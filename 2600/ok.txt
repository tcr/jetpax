------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_var
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_var_sty
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_if
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_write_imm
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_write_var
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_write_opcode
     18  10000 ????				       endm
     19  10000 ????				       mac	nibble_else
     20  10000 ????				       endm
     21  10000 ????				       mac	nibble_end_if
     22  10000 ????				       endm
     23  10000 ????				       mac	nibble_end_kernel
     24  10000 ????				       seg	CodeBank3
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     28  10000 ????				       mac	nibble_ram_store
     29  10000 ????				       {1}	[CBSRAM_NIBBLE_WRITE + {2} - NIBBLE_VAR_START]
     30  10000 ????				       endm
     31  10000 ????
     32  10000 ????				       mac	nibble_ram_load
     33  10000 ????				       {1}	[CBSRAM_NIBBLE_READ + {2} - NIBBLE_VAR_START]
     34  10000 ????				       endif
     35  10000 ????						; {1} .KEY
     36  10000 ????				       endm
     37  10000 ????
     38  10000 ????				       mac	calc_regs_and_store
     39  10000 ????			    .OFFSET    SET	{1}
     40  10000 ????				       lda	[DO_GEMS_B + .OFFSET]
     41  10000 ????				       jsr	Kernel_UpdateRegs
     42  10000 ????				       NIBBLE_RAM_STORE	sta, {2}
     43  10000 ????				       endm
     44  10000 ????
     45  10000 ????
     46  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     47  10000 ????				       mac	assert_runtime
     48  10000 ????			    .COND      SET	{1}
     49  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     50  10000 ????				       endm
     51  10000 ????
     52  10000 ????
     53  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     54  10000 ????				       mac	assert_runtime_kernel
     55  10000 ????			    .KERNEL    SET	{1}
     56  10000 ????			    .COND      SET	{2}
     57  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     58  10000 ????				       endm
     59  10000 ????
     60  10000 ????						; Static assertions for size
     61  10000 ????				       mac	assert_size
     62  10000 ????			    .STARTA    SET	{1}
     63  10000 ????			    .ENDA      SET	{2}
     64  10000 ????			    .LEN       SET	{3}
     65  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     66  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     67  10000 ????				       err
     68  10000 ????				       endif
     69  10000 ????				       endm
     70  10000 ????				       mac	assert_size_exact
     71  10000 ????			    .STARTA    SET	{1}
     72  10000 ????			    .ENDA      SET	{2}
     73  10000 ????			    .LEN       SET	{3}
     74  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     75  10000 ????				       echo	""
     76  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     77  10000 ????				       err
     78  10000 ????				       endif
     79  10000 ????				       endm
     80  10000 ????
     81  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     85  0000 ????
     86  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	CompileFlags
      2 U0000 ????
      3 U0000 ????	       00 01	   ONLY_KERNEL_A =	1
      4 U0000 ????						; ONLY_KERNEL_B = 1
      5 U0000 ????
      6 U0000 ????
      7 U0000 ????				      seg.u	Defines
      8 U0000 ????
      9 U0000 ????	       00 10	   ROW_COUNT  =	16
     10 U0000 ????	       00 02	   SIGNAL_LINE =	$02
     11 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
     12 U0000 ????
     13 U0000 ????						; RAM+ memory map
     14 U0000 ????
     15 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     16 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     17 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ_ID =	CBSRAM_KERNEL_READ
     18 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     19 U0000 ????	       f1 40	   CBSRAM_KERNEL_READ_END =	[CBSRAM_KERNEL_READ + $40]
     20 U0000 ????
     21 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     22 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     23 U0000 ????
     24 U0000 ????	       f0 80	   CBSRAM_NIBBLE_WRITE =	$f080
     25 U0000 ????	       f1 80	   CBSRAM_NIBBLE_READ =	$f180
     26 U0000 ????
     27 U0000 ????
     28 U0000 ????						; NUSIZ values
     29 U0000 ????
     30 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     31 U0000 ????
     32 U0000 ????
     33 U0000 ????						; Colors
     34 U0000 ????
     35 U0000 ????	       00 42	   COL_BG     =	$42
     36 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     37 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     38 U0000 ????
     39 U0000 ????
     40 U0000 ????						; HMOVE values for missiles
     41 U0000 ????
     42 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     43 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     44 U0000 ????
     45 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     46 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     47 U0000 ????
     48 U0000 ????						; Missile values when 2A=RST
     49 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     50 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     51 U0000 ????
     52 U0000 ????
     53 U0000 ????						; Sprite details
     54 U0000 ????
     55 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     56 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     57 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     58 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     59 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     60 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     61 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     62 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     63 U0000 ????
     64 U0000 ????	       00 1b	   JET_SP     =	GRP0
     65 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     66 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     67 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     68 U0000 ????
     69 U0000 ????
     70 U0000 ????						; Game dimensionsn
     71 U0000 ????
     72 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     73 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     74 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     75 U0000 ????
     76 U0000 ????						; Compared with YPos
     77 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     78 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     79 U0000 ????
     80 U0000 ????						; Starting player position
     81 U0000 ????	       00 48	   YPosStart  =	72
     82 U0000 ????	       00 58	   XPosStart  =	88
     83 U0000 ????
     84 U0000 ????						; Top left corner
     85 U0000 ????						; YPosStart equ 190
     86 U0000 ????						; XPosStart equ 28
     87 U0000 ????
     88 U0000 ????						; Nibble Variables
     89 U0000 ????
     90 U0000 ????						; NibbleVar1		   = 0
     91 U0000 ????						; NibbleVar2		   = 1
     92 U0000 ????						; NibbleGemini1	   = 2
     93 U0000 ????						; NibbleGemini1Reg	   = 3
     94 U0000 ????						; NibbleGemini2	   = 4
     95 U0000 ????						; NibbleGemini2Reg	   = 5
     96 U0000 ????						; NibbleGemini3	   = 6
     97 U0000 ????						; NibbleGemini3Reg	   = 7
     98 U0000 ????						; NibbleGemini4	   = 8
     99 U0000 ????						; NibbleMissile	   = 9
    100 U0000 ????						; NibbleVdel1		   = 10
    101 U0000 ????						; NibbleGrp0		   = 11
    102 U0000 ????						; NibbleX		   = 12
    103 U0000 ????						; NibbleY		   = 13
    104 U0000 ????						; NibblePhp		   = 14
    105 U0000 ????						; NibblePs		   = 15
    106 U0000 ????
    107 U0000 ????						; NIBBLE_VAR_COUNT = 1 + NibblePs
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00f6 ????				      seg.u	Variables
      2 U00f6 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00 00 00 00*coolest_level ds	$3f
      8 U00c0
      9 U00c0					      align	16
     10 U00c0
     11 U00c0		       00 c0	   NIBBLE_VAR_START =	.
     12 U00c0
     13 U00c0							; Nibble Variables
     14 U00c0		       00	   NibbleVar1 byte.b
     15 U00c1		       00	   NibbleVar2 byte.b
     16 U00c2		       00	   NibbleGemini1 byte.b
     17 U00c3		       00	   NibbleGemini1Reg byte.b
     18 U00c4		       00	   NibbleGemini2 byte.b
     19 U00c5		       00	   NibbleGemini2Reg byte.b
     20 U00c6		       00	   NibbleGemini3 byte.b
     21 U00c7		       00	   NibbleGemini3Reg byte.b
     22 U00c8		       00	   NibbleGemini4 byte.b
     23 U00c9		       00	   NibbleMissile byte.b
     24 U00ca		       00	   NibbleVdel1 byte.b
     25 U00cb		       00	   NibbleGrp0 byte.b
     26 U00cc		       00	   NibbleX    byte.b
     27 U00cd		       00	   NibbleY    byte.b
     28 U00ce		       00	   NibblePhp  byte.b
     29 U00cf		       00	   NibblePs   byte.b
     30 U00d0
     31 U00d0		       00 d0	   NIBBLE_VAR_END =	.
     32 U00d0		       00 10	   NIBBLE_VAR_COUNT =	NIBBLE_VAR_END - NIBBLE_VAR_START
     33 U00d0
     34 U00d0					      align	16
     35 U00d0
     36 U00d0							; Misc Nibble support
     37 U00d0		       00	   RamKernelGrp0 byte.b
     38 U00d1		       00	   BuildKernelRST byte.b
     39 U00d2
     40 U00d2		       00	   Temp       byte.b
     41 U00d3		       00	   Temp2      byte.b
     42 U00d4
     43 U00d4							; Counters
     44 U00d4		       00	   LoopCount  byte.b
     45 U00d5		       00	   FrameCount byte.b
     46 U00d6
     47 U00d6		       00	   SpriteEnd  byte.b
     48 U00d7		       00	   XPos       byte.b		; X position of player sprite
     49 U00d8
     50 U00d8
     51 U00d8		       00	   Speed1     byte.b
     52 U00d9		       00	   Speed2     byte.b
     53 U00da
     54 U00da		       00	   YPos       byte.b		; Y position of player sprite
     55 U00db		       00	   YPos2      byte.b
     56 U00dc
     57 U00dc		       00	   ROW_DEMO_INDEX byte.b
     58 U00dd
     59 U00dd		       00	   RamNibbleBuildState byte.b		; Nibble build state
     60 U00de
     61 U00de		       00	   RamZeroByte byte.b
     62 U00df		       00	   RamLowerSixByte byte.b
     63 U00e0		       00	   RamFFByte  byte.b
     64 U00e1		       00	   RamStackBkp byte.b
     65 U00e2		       00	   RamPF1Value byte.b
     66 U00e3
     67 U00e3		       00	   RamRowJetpackIndex byte.b		; sprite counter
     68 U00e4
     69 U00e4		       00	   level_for_game byte.b
     70 U00e5		       00		      byte.b
     71 U00e6		       00		      byte.b
     72 U00e7		       00		      byte.b
     73 U00e8
     74 U00e8		       00	   DO_MISS_A  byte.b
     75 U00e9		       00	   DO_MISS_B  byte.b
     76 U00ea		       00	   DO_GEMS_A  byte.b
     77 U00eb		       00		      byte.b
     78 U00ec		       00		      byte.b
     79 U00ed		       00		      byte.b
     80 U00ee		       00		      byte.b
     81 U00ef		       00		      byte.b
     82 U00f0		       00	   DO_GEMS_B  byte.b
     83 U00f1		       00		      byte.b
     84 U00f2		       00		      byte.b
     85 U00f3		       00		      byte.b
     86 U00f4		       00		      byte.b
     87 U00f5		       00		      byte.b
------- FILE main.s
     89 U00f6
     90 U00f6							; Bank 1
     91  e000 ????				      seg	CodeBank1
     92  d000					      org	$D000
     93  d000					      rorg	$F000
     94  d000		       00	   BANK1      byte.b
     95  d200					      org	$d200
     96  d200					      rorg	$d200
     97  d200				   Bank1Start
     98  d200		       ad fa ff 	      lda	$fffa
     99  d203		       ea		      nop
    100  d204		       ea		      nop
    101  d205		       ea		      nop
    102  d206
    103  dffc					      org	$dffc
    104  dffc					      rorg	$fffc
    105  dffc		       00 d2		      .word.w	Bank1Start
    106  dffe		       00 d2		      .word.w	Bank1Start
    107  e000
    108  e000							; Bank 2
    109  f000 ????				      seg	CodeBank2
    110  e000					      org	$E000
    111  e000					      rorg	$F000
    112  e000		       00	   BANK2      byte.b
    113  e200					      org	$e200
    114  e200					      rorg	$f200
    115  e200				   Bank2Start
    116  e200		       ad fa ff 	      lda	$fffa
    117  e203		       ea		      nop
    118  e204		       ea		      nop
    119  e205		       ea		      nop
    120  e206
    121  effc					      org	$effc
    122  effc					      rorg	$fffc
    123  effc		       00 f2		      .word.w	Bank2Start
    124  effe		       00 f2		      .word.w	Bank2Start
    125  f000
    126  f000							; Bank 3
    127  10000 ????				       seg	CodeBank3
    128  f000					      org	$F000
    129  f000					      rorg	$F000
    130  f000		       00	   BANK3      byte.b
    131  f200					      org	$f200
    132  f200					      rorg	$f200
    133  f200				   Bank3Start
    134  f200		       ad fa ff 	      lda	$fffa
    135  f203		       ea		      nop
    136  f204		       ea		      nop
    137  f205		       ea		      nop
    138  f206		       4c 09 f2 	      jmp	Start
    139  f209
    140  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 d5		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 da		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 d7		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 d8		      sta	Speed1
     48  f243		       85 d9		      sta	Speed2
     49  f245		       85 db		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 dc		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 de		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 df		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 e0		      sta	RamFFByte
     61  f257
     62  f257							; Setup level.
     63  f257		       20 3a fb 	      jsr	game_state_setup
     64  f25a
     65  f25a							; Start with overscan (calculation start of frame)
     66  f25a		       4c 00 f4 	      jmp	Overscan
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f25d					      include	"kernel_loader.s"
      1  f25d							; Copies the gem kernels to RAM
      2  f25d
      3  f25d							; Copy Kernel A to CBSRAM
      4  f25d				   LoadKernelA subroutine
      5  f25d		       a0 37		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f25f				   .loop
      7  f25f		       b9 00 fe 	      lda	kernel_1_start,Y
      8  f262		       99 00 10 	      sta	$1000,Y
      9  f265		       88		      dey
     10  f266		       d0 f7		      bne	.loop
     11  f268		       ad 00 fe 	      lda	kernel_1_start
     12  f26b		       8d 00 10 	      sta	$1000
     13  f26e		       60		      rts
     14  f26f
     15  f26f							; Copy Kernel B to CBSRAM
     16  f26f				   LoadKernelB subroutine
     17  f26f		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f271				   .loop
     19  f271		       b9 38 fe 	      lda	kernel_2_start,Y
     20  f274		       99 00 10 	      sta	$1000,Y
     21  f277		       88		      dey
     22  f278		       d0 f7		      bne	.loop
     23  f27a		       ad 38 fe 	      lda	kernel_2_start
     24  f27d		       8d 00 10 	      sta	$1000
     25  f280		       60		      rts
------- FILE main.s
------- FILE nibble_build.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_build.s"
      1  f281					      MAC	nibble_gem_kernel_a_1_build
      2  f281					      lda	#0
      3  f281					      sta	RamNibbleBuildState
      4  f281							; NIBBLE_VAR NibbleGemini4
      5  f281							; NIBBLE_VAR NibbleVdel1
      6  f281					      lda	#SENTINEL
      7  f281					      sta	BuildKernelRST
      8  f281					      NIBBLE_RAM_STORE	sta, NibbleX
      9  f281					      NIBBLE_RAM_STORE	sta, NibbleY
     10  f281							; FIXME don't hard code this?
     11  f281					      lda	#BC_STX
     12  f281					      NIBBLE_RAM_STORE	sta, NibbleMissile
     13  f281							; Gemini 1A
     14  f281				   .K_1A
     15  f281					      lda	[DO_GEMS_A + 0]
     16  f281					      jsr	KernelA_GenReset
     17  f281				   .if_1
     18  f281					      bne	.else_1
     19  f281					      sec
     20  f281					      rol	RamNibbleBuildState
     21  f281							; Special: Encoding RST0
     22  f281							; Store 1A in GRP0
     23  f281					      lda	[DO_GEMS_A + 1]
     24  f281					      NIBBLE_RAM_STORE	sta, NibbleGrp0
     25  f281					      sta	RamKernelGrp0
     26  f281							; Gemini 1A is RESPx
     27  f281							; Turn 3-cycle NOP into 4-cycle
     28  f281					      rol	RamNibbleBuildState
     29  f281					      jmp	.endif_1
     30  f281							; [BIT DEPTH] #1 If-End @ 1
     31  f281				   .else_1
     32  f281					      clc
     33  f281					      rol	RamNibbleBuildState
     34  f281							; Store 0A in GRP0
     35  f281					      lda	[DO_GEMS_A + 0]
     36  f281					      NIBBLE_RAM_STORE	sta, NibbleGrp0
     37  f281					      sta	RamKernelGrp0
     38  f281					      lda	[DO_GEMS_A + 1]
     39  f281					      jsr	KernelA_GenReset
     40  f281				   .if_2
     41  f281					      bne	.else_2
     42  f281					      sec
     43  f281					      rol	RamNibbleBuildState
     44  f281							; GEM1ASWITCH
     45  f281					      jmp	.endif_2
     46  f281							; [BIT DEPTH] #2 If-End @ 2
     47  f281				   .else_2
     48  f281					      clc
     49  f281					      rol	RamNibbleBuildState
     50  f281							; Calculate the 1A value
     51  f281					      lda	SHARD_LUT_RF1
     52  f281					      cmp	#1
     53  f281					      .byte	$D0, #3
     54  f281					      lda	#RESP1
     55  f281					      .byte	$2C
     56  f281					      lda	#GRP1
     57  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini1Reg
     58  f281							; Set opcode
     59  f281					      lda	SHARD_LUT_RF1
     60  f281					      cmp	#1
     61  f281					      lda	#BC_STX
     62  f281					      .byte	$F0, #5
     63  f281					      lda	[DO_GEMS_A + 1]
     64  f281					      jsr	Kernel_UpdateRegs
     65  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini1
     66  f281							; [BIT DEPTH] #2 *If-End @ 2
     67  f281							; [BIT DEPTH] #2 Else-End @ 2
     68  f281				   .endif_2
     69  f281							; [BIT DEPTH] #1 *If-End @ 1
     70  f281							; [BIT DEPTH] #2 Else-End @ 2
     71  f281				   .endif_1
     72  f281							; Stop preserving GRP0
     73  f281					      lda	#SENTINEL
     74  f281					      sta	RamKernelGrp0
     75  f281							; NibbleX, NibbleY are upgraded if not set
     76  f281							; Gemini 2A
     77  f281				   .K_2A
     78  f281					      lda	[DO_GEMS_A + 2]
     79  f281					      jsr	KernelA_GenReset
     80  f281				   .if_3
     81  f281					      bne	.else_3
     82  f281					      sec
     83  f281					      rol	RamNibbleBuildState
     84  f281					      jmp	.endif_3
     85  f281							; [BIT DEPTH] #3 If-End @ 3
     86  f281				   .else_3
     87  f281					      clc
     88  f281					      rol	RamNibbleBuildState
     89  f281							; Set opcode
     90  f281					      lda	[DO_GEMS_A + 2]
     91  f281					      jsr	Kernel_UpdateRegs
     92  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini2
     93  f281							; Set opcode target
     94  f281					      lda	SHARD_LUT_RF1
     95  f281					      cmp	#2
     96  f281					      .byte	$D0, #3
     97  f281					      lda	#RESP1
     98  f281					      .byte	$2C
     99  f281					      lda	#GRP1
    100  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini2Reg
    101  f281							; [BIT DEPTH] #3 *If-End @ 3
    102  f281							; [BIT DEPTH] #3 Else-End @ 3
    103  f281				   .endif_3
    104  f281							; Gemini 3A
    105  f281				   .K_3A
    106  f281					      lda	[DO_GEMS_A + 3]
    107  f281					      jsr	KernelA_GenReset
    108  f281				   .if_4
    109  f281					      bne	.else_4
    110  f281					      sec
    111  f281					      rol	RamNibbleBuildState
    112  f281					      jmp	.endif_4
    113  f281							; [BIT DEPTH] #4 If-End @ 4
    114  f281				   .else_4
    115  f281					      clc
    116  f281					      rol	RamNibbleBuildState
    117  f281							; Set opcode
    118  f281					      lda	[DO_GEMS_A + 3]
    119  f281					      jsr	Kernel_UpdateRegs
    120  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini3
    121  f281							; Set opcode target
    122  f281					      lda	SHARD_LUT_RF1
    123  f281					      cpy	#3
    124  f281					      .byte	$D0, #3
    125  f281					      lda	#RESP1
    126  f281					      .byte	$2C
    127  f281					      lda	#GRP1
    128  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini3Reg
    129  f281							; [BIT DEPTH] #4 *If-End @ 4
    130  f281							; [BIT DEPTH] #4 Else-End @ 4
    131  f281				   .endif_4
    132  f281							; [BIT DEPTH] Final: 4 (out of 8 bits)
    133  f281					      rol	RamNibbleBuildState
    134  f281					      rol	RamNibbleBuildState
    135  f281					      rol	RamNibbleBuildState
    136  f281					      rol	RamNibbleBuildState
    137  f281					      ENDM
    138  f281
    139  f281
    140  f281
    141  f281
    142  f281					      MAC	nibble_gem_kernel_a_2_build
    143  f281					      lda	#0
    144  f281					      sta	RamNibbleBuildState
    145  f281							; NIBBLE_VAR NibbleGemini1
    146  f281							; NIBBLE_VAR NibbleGemini1Reg
    147  f281							; NIBBLE_VAR NibbleGemini2
    148  f281							; NIBBLE_VAR NibbleGemini2Reg
    149  f281							; NIBBLE_VAR NibbleGemini3
    150  f281							; NIBBLE_VAR NibbleGemini3Reg
    151  f281							; VD1 default
    152  f281					      lda	[DO_GEMS_A + 1]
    153  f281					      NIBBLE_RAM_STORE	sta, NibbleVdel1
    154  f281							; Gemini 4A
    155  f281					      lda	SHARD_LUT_VD1
    156  f281					      cmp	#4
    157  f281				   .if_1
    158  f281					      beq	.else_1
    159  f281					      sec
    160  f281					      rol	RamNibbleBuildState
    161  f281							; Set PHP
    162  f281					      lda	#VDELP1
    163  f281					      NIBBLE_RAM_STORE	sta, NibblePhp
    164  f281							; Update VDEL1
    165  f281					      lda	[DO_GEMS_A + 4]
    166  f281					      NIBBLE_RAM_STORE	sta, NibbleVdel1
    167  f281					      jmp	.endif_1
    168  f281							; [BIT DEPTH] #1 If-End @ 1
    169  f281				   .else_1
    170  f281					      clc
    171  f281					      rol	RamNibbleBuildState
    172  f281					      lda	[DO_GEMS_A + 4]
    173  f281					      jsr	Kernel_UpdateRegs
    174  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini4
    175  f281							; Set PHP
    176  f281					      lda	#RESP1
    177  f281					      NIBBLE_RAM_STORE	sta, NibblePhp
    178  f281							; [BIT DEPTH] #1 *If-End @ 1
    179  f281							; [BIT DEPTH] #1 Else-End @ 1
    180  f281				   .endif_1
    181  f281							; Gemini 5A
    182  f281							; TODO eventually...?
    183  f281							; Missile
    184  f281					      lda	DO_MISS_A
    185  f281							; FIXME Why doesn't this branch compile?
    186  f281							; bne .+4
    187  f281							; ldx #BC_NOP
    188  f281							; stx NibbleMissile
    189  f281							; VD1
    190  f281							; GRP0
    191  f281					      lda	#$ff
    192  f281					      NIBBLE_RAM_STORE	sta, NibblePs
    193  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    194  f281					      rol	RamNibbleBuildState
    195  f281					      rol	RamNibbleBuildState
    196  f281					      rol	RamNibbleBuildState
    197  f281					      rol	RamNibbleBuildState
    198  f281					      rol	RamNibbleBuildState
    199  f281					      rol	RamNibbleBuildState
    200  f281					      rol	RamNibbleBuildState
    201  f281					      ENDM
    202  f281
    203  f281
    204  f281
    205  f281
    206  f281					      MAC	nibble_gem_kernel_b_1_build
    207  f281					      lda	#0
    208  f281					      sta	RamNibbleBuildState
    209  f281							; NIBBLE_VAR NibbleGemini1
    210  f281							; NIBBLE_VAR NibbleGemini1Reg
    211  f281							; NIBBLE_VAR NibbleGemini2Reg
    212  f281							; NIBBLE_VAR NibbleGemini3Reg
    213  f281							; NIBBLE_VAR NibbleGemini4
    214  f281							; NIBBLE_VAR NibbleMissile
    215  f281							; NIBBLE_VAR NibbleVdel1
    216  f281					      lda	#SENTINEL
    217  f281					      NIBBLE_RAM_STORE	sta, NibbleX
    218  f281					      NIBBLE_RAM_STORE	sta, NibbleY
    219  f281					      sta	BuildKernelRST
    220  f281							; Php target default
    221  f281					      lda	#RESP1
    222  f281					      NIBBLE_RAM_STORE	sta, NibblePhp
    223  f281							; Gemini 0B
    224  f281					      ldy	[DO_GEMS_B + 0]
    225  f281					      NIBBLE_RAM_STORE	sta, NibbleGrp0
    226  f281					      sty	RamKernelGrp0
    227  f281							; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    228  f281							; Gemini 1B
    229  f281					      lda	[DO_GEMS_B + 1]
    230  f281					      jsr	Kernel_UpdateRegs
    231  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini1
    232  f281							; Gemini 2B
    233  f281					      ldy	[DO_GEMS_B + 2]
    234  f281					      jsr	KernelB_GenPhp
    235  f281				   .if_1
    236  f281					      bne	.else_1
    237  f281					      sec
    238  f281					      rol	RamNibbleBuildState
    239  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    240  f281							; Write to PHP in 2B
    241  f281					      lda	#EMERALD_SP
    242  f281					      NIBBLE_RAM_STORE	sta, NibblePhp
    243  f281							; Update Grp0
    244  f281					      lda	BuildKernelRST
    245  f281					      sta	RamKernelGrp0
    246  f281					      rol	RamNibbleBuildState
    247  f281					      jmp	.endif_1
    248  f281							; [BIT DEPTH] #1 If-End @ 1
    249  f281				   .else_1
    250  f281					      clc
    251  f281					      rol	RamNibbleBuildState
    252  f281							; Gemini 3B
    253  f281					      lda	[DO_GEMS_B + 3]
    254  f281					      jsr	KernelB_GenPhp
    255  f281				   .if_2
    256  f281					      bne	.else_2
    257  f281					      sec
    258  f281					      rol	RamNibbleBuildState
    259  f281							; Write to PHP in 3B
    260  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    261  f281					      lda	#EMERALD_SP
    262  f281					      NIBBLE_RAM_STORE	sta, NibblePhp
    263  f281
    264  f281							; Update Grp0
    265  f281					      NIBBLE_RAM_LOAD	lda, BuildKernelRST
    266  f281					      sty	RamKernelGrp0
    267  f281					      jmp	.endif_2
    268  f281							; [BIT DEPTH] #2 If-End @ 2
    269  f281				   .else_2
    270  f281					      clc
    271  f281					      rol	RamNibbleBuildState
    272  f281							; Update 2B
    273  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    274  f281							; Update 3B
    275  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    276  f281							; [BIT DEPTH] #2 *If-End @ 2
    277  f281							; [BIT DEPTH] #2 Else-End @ 2
    278  f281				   .endif_2
    279  f281							; [BIT DEPTH] #1 *If-End @ 1
    280  f281							; [BIT DEPTH] #2 Else-End @ 2
    281  f281				   .endif_1
    282  f281							; [BIT DEPTH] Final: 2 (out of 8 bits)
    283  f281					      rol	RamNibbleBuildState
    284  f281					      rol	RamNibbleBuildState
    285  f281					      rol	RamNibbleBuildState
    286  f281					      rol	RamNibbleBuildState
    287  f281					      rol	RamNibbleBuildState
    288  f281					      rol	RamNibbleBuildState
    289  f281					      ENDM
    290  f281
    291  f281
    292  f281
    293  f281
    294  f281					      MAC	nibble_gem_kernel_b_2_build
    295  f281					      lda	#0
    296  f281					      sta	RamNibbleBuildState
    297  f281							; NIBBLE_VAR NibbleGemini1Reg
    298  f281							; NIBBLE_VAR NibbleGemini2
    299  f281							; NIBBLE_VAR NibbleGemini2Reg
    300  f281							; NIBBLE_VAR NibbleGemini3
    301  f281							; NIBBLE_VAR NibbleGemini3Reg
    302  f281							; NIBBLE_VAR NibbleMissile
    303  f281							; NIBBLE_VAR NibbleVdel1
    304  f281							; Gemini 1B
    305  f281							; Write out PHP flag comparison
    306  f281					      ldy	BuildKernelRST
    307  f281					      cpy	#G01
    308  f281				   .if_1
    309  f281					      bne	.else_1
    310  f281					      sec
    311  f281					      rol	RamNibbleBuildState
    312  f281					      jmp	.endif_1
    313  f281							; [BIT DEPTH] #1 If-End @ 1
    314  f281				   .else_1
    315  f281					      clc
    316  f281					      rol	RamNibbleBuildState
    317  f281							; [BIT DEPTH] #1 *If-End @ 1
    318  f281							; [BIT DEPTH] #1 Else-End @ 1
    319  f281				   .endif_1
    320  f281							; Missile
    321  f281							; ldy DO_MISS_B
    322  f281							; NIBBLE_IF eq
    323  f281							; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    324  f281							; NIBBLE_ELSE
    325  f281							;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    326  f281							; NIBBLE_END_IF
    327  f281							; Gemini 4B
    328  f281					      lda	[DO_GEMS_B + 4]
    329  f281					      jsr	Kernel_UpdateRegs
    330  f281					      NIBBLE_RAM_STORE	sta, NibbleGemini4
    331  f281							; TODO if no PHP, rewrite previous section:
    332  f281							; NIBBLE_IF cs
    333  f281							;
    334  f281							;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    335  f281							;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    336  f281							;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    337  f281							;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    338  f281							; NIBBLE_END_IF
    339  f281							; Make adjustments for sprites.
    340  f281					      NIBBLE_RAM_STORE	ror, NibbleGrp0
    341  f281					      NIBBLE_RAM_STORE	ror, NibbleX
    342  f281					      NIBBLE_RAM_STORE	ror, NibbleY
    343  f281							;
    344  f281							; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    345  f281							; GRP0
    346  f281					      lda	#$00
    347  f281					      NIBBLE_RAM_STORE	sta, NibblePs
    348  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    349  f281					      rol	RamNibbleBuildState
    350  f281					      rol	RamNibbleBuildState
    351  f281					      rol	RamNibbleBuildState
    352  f281					      rol	RamNibbleBuildState
    353  f281					      rol	RamNibbleBuildState
    354  f281					      rol	RamNibbleBuildState
    355  f281					      rol	RamNibbleBuildState
    356  f281					      ENDM
    357  f281
    358  f281
    359  f281
    360  f281
------- FILE main.s
------- FILE nibble_eval.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_eval.s"
      1  f281					      MAC	nibble_gem_kernel_a_1
      2  f281					      asl
      3  f281					      bcc	.else_1
      4  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
      5  f281				   .if_1
      6  f281					      ldx	#[ #BC_LDA_IMM ]
      7  f281					      stx	[[KernelA_B - $100] + 0]
      8  f281					      ldx	#[ #%10100000 ]
      9  f281					      stx	[[KernelA_B - $100 + 1] + 0]
     10  f281					      ldx	#[ #EMERALD_SP_RESET ]
     11  f281					      stx	[[KernelA_C - $100 + 1] + 0]
     12  f281					      ldx	#[ #$14 ]
     13  f281					      stx	[[KernelA_D - $100] + 0]
     14  f281					      rol
     15  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 32 }
     16  f281
     17  f281					      jmp	.endif_1
     18  f281				   .else_1
     19  f281					      asl
     20  f281					      bcc	.else_2
     21  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
     22  f281				   .if_2
     23  f281					      ldx	#[ #BC_STX ]
     24  f281					      stx	[[KernelA_D_W + 0] + 0]
     25  f281					      ldx	#[ #RESP1 ]
     26  f281					      stx	[[KernelA_D_W + 1] + 0]
     27  f281					      sleep	3
     28  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 26 }
     29  f281
     30  f281					      jmp	.endif_2
     31  f281				   .else_2
     32  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1 - NIBBLE_VAR_START],y
     33  f281					      stx	[[KernelA_D_W + 0] + 0]
     34  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1Reg - NIBBLE_VAR_START],y
     35  f281					      stx	[[KernelA_D_W + 1] + 0]
     36  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 26 }
     37  f281				   .endif_2
     38  f281					      sleep	6
     39  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 32 }
     40  f281				   .endif_1
     41  f281					      asl
     42  f281					      bcc	.else_3
     43  f281							; parent: BuildState { index: 2, checkdepth: 2, cycles: 36 }
     44  f281				   .if_3
     45  f281					      ldx	#[ #NOP_REG ]
     46  f281					      stx	[[KernelA_E_W + 1] + 0]
     47  f281					      ldx	#[ #RESP1 ]
     48  f281					      stx	[[KernelA_G_W + 1] + 0]
     49  f281					      sleep	9
     50  f281							; then: BuildState { index: 3, checkdepth: 3, cycles: 59 }
     51  f281
     52  f281					      jmp	.endif_3
     53  f281				   .else_3
     54  f281					      ldx	#[ #RESP1 ]
     55  f281					      stx	[[KernelA_E_W + 1] + 0]
     56  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
     57  f281					      stx	[[KernelA_G_W + 0] + 0]
     58  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2Reg - NIBBLE_VAR_START],y
     59  f281					      stx	[[KernelA_G_W + 1] + 0]
     60  f281							; else: BuildState { index: 3, checkdepth: 3, cycles: 59 }
     61  f281				   .endif_3
     62  f281					      asl
     63  f281					      bcc	.else_4
     64  f281							; parent: BuildState { index: 3, checkdepth: 3, cycles: 63 }
     65  f281				   .if_4
     66  f281					      ldx	#[ #RESP1 ]
     67  f281					      stx	[[KernelA_H_W + 1] + 0]
     68  f281					      sleep	9
     69  f281							; then: BuildState { index: 4, checkdepth: 4, cycles: 80 }
     70  f281
     71  f281					      jmp	.endif_4
     72  f281				   .else_4
     73  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
     74  f281					      stx	[[KernelA_H_W + 0] + 0]
     75  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3Reg - NIBBLE_VAR_START],y
     76  f281					      stx	[[KernelA_H_W + 1] + 0]
     77  f281							; else: BuildState { index: 4, checkdepth: 4, cycles: 80 }
     78  f281				   .endif_4
     79  f281					      ENDM
     80  f281
     81  f281
     82  f281
     83  f281
     84  f281					      MAC	nibble_gem_kernel_a_2
     85  f281					      asl
     86  f281					      bcc	.else_1
     87  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
     88  f281				   .if_1
     89  f281					      ldx	#[ #BC_STA ]
     90  f281					      stx	[[KernelA_I_W + 0] + 0]
     91  f281					      ldx	#[ #EMERALD_SP_RESET ]
     92  f281					      stx	[[KernelA_I_W + 0] + 1]
     93  f281					      ldx	#[ #BC_STA ]
     94  f281					      stx	[[KernelA_J_W + 1] + 0]
     95  f281					      ldx	#[ #PF1 ]
     96  f281					      stx	[[KernelA_J_W + 1] + 1]
     97  f281					      ldx	#[ #BC_PHP ]
     98  f281					      stx	[[KernelA_K_W + 1] + 0]
     99  f281					      sleep	3
    100  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 39 }
    101  f281
    102  f281					      jmp	.endif_1
    103  f281				   .else_1
    104  f281					      ldx	#[ #BC_PHP ]
    105  f281					      stx	[[KernelA_I_W + 0] + 0]
    106  f281					      ldx	#[ #BC_STA ]
    107  f281					      stx	[[KernelA_J_W + 0] + 0]
    108  f281					      ldx	#[ #PF1 ]
    109  f281					      stx	[[KernelA_J_W + 0] + 1]
    110  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini4 - NIBBLE_VAR_START],y
    111  f281					      stx	[[KernelA_K_W + 0] + 0]
    112  f281					      ldx	#[ #EMERALD_SP ]
    113  f281					      stx	[[KernelA_K_W + 1] + 0]
    114  f281					      sleep	2
    115  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 39 }
    116  f281				   .endif_1
    117  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleMissile - NIBBLE_VAR_START],y
    118  f281					      stx	[[KernelA_F - $100] + 0]
    119  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleVdel1 - NIBBLE_VAR_START],y
    120  f281					      stx	[[KernelA_VDEL1 - $100] + 0]
    121  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGrp0 - NIBBLE_VAR_START],y
    122  f281					      stx	[[KernelA_VDEL0 - $100] + 0]
    123  f281					      ENDM
    124  f281
    125  f281
    126  f281
    127  f281
    128  f281					      MAC	nibble_gem_kernel_b_1
    129  f281					      asl
    130  f281					      bcc	.else_1
    131  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
    132  f281				   .if_1
    133  f281					      ldx	#[ #BC_STY ]
    134  f281					      stx	[[KernelB_E_W + 0] + 0]
    135  f281					      ldx	#[ #EMERALD_SP_RESET ]
    136  f281					      stx	[[KernelB_E_W + 1] + 0]
    137  f281					      ldx	#[ #BC_PHP ]
    138  f281					      stx	[[KernelB_F_W + 1] + 0]
    139  f281					      ldx	#[ #BC_STA ]
    140  f281					      stx	[[KernelB_G_W + 0] + 0]
    141  f281					      ldx	#[ #PF1 ]
    142  f281					      stx	[[KernelB_G_W + 1] + 0]
    143  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
    144  f281					      stx	[[KernelB_H_W + 0] + 0]
    145  f281					      ldx	#[ #EMERALD_SP ]
    146  f281					      stx	[[KernelB_H_W + 1] + 0]
    147  f281					      rol
    148  f281					      sleep	3
    149  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 55 }
    150  f281
    151  f281					      jmp	.endif_1
    152  f281				   .else_1
    153  f281					      asl
    154  f281					      bcc	.else_2
    155  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
    156  f281				   .if_2
    157  f281					      ldx	#[ #BC_STY ]
    158  f281					      stx	[[KernelB_E_W + 0] + 0]
    159  f281					      ldx	#[ #EMERALD_SP_RESET ]
    160  f281					      stx	[[KernelB_E_W + 1] + 0]
    161  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
    162  f281					      stx	[[KernelB_F_W + 1] + 0]
    163  f281					      ldx	#[ #EMERALD_SP ]
    164  f281					      stx	[[KernelB_F_W + 2] + 0]
    165  f281					      ldx	#[ #BC_STA ]
    166  f281					      stx	[[KernelB_G_W + 1] + 0]
    167  f281					      ldx	#[ #PF1 ]
    168  f281					      stx	[[KernelB_G_W + 2] + 0]
    169  f281					      ldx	#[ #BC_PHP ]
    170  f281					      stx	[[KernelB_H_W + 1] + 0]
    171  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 55 }
    172  f281
    173  f281					      jmp	.endif_2
    174  f281				   .else_2
    175  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
    176  f281					      stx	[[KernelB_F_W + 0] + 0]
    177  f281					      ldx	#[ #EMERALD_SP ]
    178  f281					      stx	[[KernelB_F_W + 1] + 0]
    179  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
    180  f281					      stx	[[KernelB_H_W + 0] + 0]
    181  f281					      ldx	#[ #EMERALD_SP ]
    182  f281					      stx	[[KernelB_H_W + 1] + 0]
    183  f281					      sleep	17
    184  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 55 }
    185  f281				   .endif_2
    186  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 55 }
    187  f281				   .endif_1
    188  f281					      ENDM
    189  f281
    190  f281
    191  f281
    192  f281
    193  f281					      MAC	nibble_gem_kernel_b_2
    194  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1 - NIBBLE_VAR_START],y
    195  f281					      stx	[KernelB_D_W + 0]
    196  f281					      asl
    197  f281					      bcc	.else_1
    198  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 12 }
    199  f281				   .if_1
    200  f281					      ldx	#[ #RamFFByte ]
    201  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    202  f281					      sleep	2
    203  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 22 }
    204  f281
    205  f281					      jmp	.endif_1
    206  f281				   .else_1
    207  f281					      ldx	#[ #RamPF1Value ]
    208  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    209  f281					      sleep	3
    210  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 22 }
    211  f281				   .endif_1
    212  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini4 - NIBBLE_VAR_START],y
    213  f281					      stx	[KernelB_J_W + 0]
    214  f281					      ldx	[CBSRAM_NIBBLE_READ + NibbleGrp0 - NIBBLE_VAR_START],y
    215  f281					      stx	[[KernelB_VDEL0 - $100] + 0]
    216  f281					      ENDM
    217  f281
    218  f281
    219  f281
    220  f281
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_shard.s"
      1  f281							; conflict: 11011000 #%0011 #%1000
      2  f281							; conflict: 11011001 #%0011 #%1000
      3  f281							; conflict: 11011010 #%0011 #%1000
      4  f281							; conflict: 11011011 #%0011 #%1000
      5  f281							; conflict: 11100100 #%1000 #%0011
      6  f281							; conflict: 11100101 #%1000 #%0011
      7  f281							; conflict: 11100110 #%1000 #%0011
      8  f281							; conflict: 11100111 #%1000 #%0011
      9  f281							; conflict: 01111000 #%1000 #%0001
     10  f281							; conflict: 01111001 #%1000 #%0001
     11  f281							; conflict: 01111010 #%1000 #%0001
     12  f281							; conflict: 01111011 #%1000 #%0001
     13  f281							; conflict: 10110100 #%1000 #%0001
     14  f281							; conflict: 10110101 #%1000 #%0001
     15  f281							; conflict: 10110110 #%1000 #%0001
     16  f281							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400							; "Start" with overscan.
      2  f400				   Overscan   subroutine
      3  f400		       85 01		      sta	VBLANK
      0  f402					      TIMER_SETUP	29
      1  f402				   .lines     SET	29
      2  f402		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f404		       85 02		      sta	WSYNC
      4  f406		       8d 96 02 	      sta	TIM64T
      5  f409
      6  f409							; Read inputs.
      7  f409		       20 14 f5 	      jsr	MoveJoystick
      8  f40c							; Player physics.
      9  f40c		       20 54 f5 	      jsr	SpeedCalculation
     10  f40f							; Animation.
     11  f40f		       20 58 fb 	      jsr	game_state_tick
     12  f412							; Load the ROM kernel into CBSRAM.
     13  f412		       20 84 f4 	      jsr	GameFrameKernelLoader
     14  f415
     15  f415							; Extract 26-bit string to full Gemini profile
     16  f415		       20 00 fa 	      jsr	GeminiPopulate
     17  f418
     18  f418							; Wait out overscan.
      0  f418					      TIMER_WAIT
      1  f418				   .waittimer
      2  f418		       ad 84 02 	      lda	INTIM
      3  f41b		       d0 fb		      bne	.waittimer
      4  f41d		       85 02		      sta	WSYNC
     20  f41f
     21  f41f							; Vertical Sync (3 lines)
     22  f41f				   VerticalSync subroutine
      0  f41f					      VERTICAL_SYNC
      1  f41f		       a9 0e		      lda	#%1110
      2  f421		       85 02	   .VSLP1     sta	WSYNC
      3  f423		       85 00		      sta	VSYNC
      4  f425		       4a		      lsr
      5  f426		       d0 f9		      bne	.VSLP1
     24  f428
     25  f428							; Start of NTSC frame.
     26  f428				   FrameStart subroutine
      0  f428					      ASSERT_RUNTIME	"_scan == #0"
      1  f428				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f428  && !(  _scan == #0  ) }
      2  f428					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     28  f428
     29  f428				   VerticalBlank subroutine
     30  f428							; Setup frame timer and increment frame counter.
      0  f428					      TIMER_SETUP	37
      1  f428				   .lines     SET	37
      2  f428		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f42a		       85 02		      sta	WSYNC
      4  f42c		       8d 96 02 	      sta	TIM64T
     32  f42f		       e6 d5		      inc	FrameCount
     33  f431
     34  f431							; Populate the Nibble kernel values for the current row.
     35  f431		       a0 00		      ldy	#0
     36  f433		       20 fb f5 	      jsr	GameNibblePopulate
     37  f436							; Update the current kernel with precomputed Nibble data.
     38  f436							; jsr GameNibbleRun
     39  f436							; jsr NibbleCopyToRam
     40  f436							; jsr NibbleCopyFromRam
     41  f436
     42  f436		       20 94 fa 	      jsr	GeminiPopulateFull
     43  f439		       a0 00		      ldy	#0
     44  f43b							; FIXME this is what is next to enable, but it breaks:
     45  f43b							; ldy #16
     46  f43b				   .DBG_POPULATE
     47  f43b		       20 fb f5 	      jsr	GameNibblePopulate
     48  f43e		       20 4a f8 	      jsr	GameNibbleRun
     49  f441
     50  f441							; Setup frame. Jump and return
     51  f441		       4c 8c f4 	      jmp	GameFrameSetup
     52  f444
     53  f444				   VerticalBlankEnd
     54  f444							; Wait until the end of Vertical blank.
      0  f444					      TIMER_WAIT
      1  f444				   .waittimer
      2  f444		       ad 84 02 	      lda	INTIM
      3  f447		       d0 fb		      bne	.waittimer
      4  f449		       85 02		      sta	WSYNC
      0  f44b					      ASSERT_RUNTIME	"_scan == #37"
      1  f44b				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f44b  && !(  _scan == #37  ) }
      2  f44b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     57  f44b
     58  f44b							;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f44b							; Visible frame
     60  f44b							;;;;;;;;;;;;;;;;;;;;;;;;;;
     61  f44b
     62  f44b				   GameFrameRender
     63  f44b							; Start rendering the kernel.
     64  f44b		       4c 96 fb 	      jmp	KernelBorder
     65  f44e
     66  f44e				   FrameEnd   subroutine
     67  f44e		       85 02		      sta	WSYNC
     68  f450
     69  f450							; Blank all background colors.
     70  f450		       a9 00		      lda	#0
     71  f452		       85 08		      sta	COLUPF
     72  f454		       85 0f		      sta	PF2
     73  f456		       85 0e		      sta	PF1
     74  f458		       85 1c		      sta	EMERALD_SP
     75  f45a
     76  f45a							; Guide lines (2x)
     77  f45a		       a9 02		      lda	#SIGNAL_LINE
     78  f45c		       85 09		      sta	COLUBK
     79  f45e					      REPEAT	6
     80  f45e		       85 02		      sta	WSYNC
     79  f45e					      REPEND
     80  f460		       85 02		      sta	WSYNC
     79  f460					      REPEND
     80  f462		       85 02		      sta	WSYNC
     79  f462					      REPEND
     80  f464		       85 02		      sta	WSYNC
     79  f464					      REPEND
     80  f466		       85 02		      sta	WSYNC
     79  f466					      REPEND
     80  f468		       85 02		      sta	WSYNC
     81  f46a					      REPEND
     82  f46a		       a9 00		      lda	#$00
     83  f46c		       85 09		      sta	COLUBK
     84  f46e
     85  f46e							; Restore stack pointer
     86  f46e		       a6 e1		      ldx	RamStackBkp
     87  f470		       9a		      txs
     88  f471
     89  f471							; Display the rest of the blank screen.
      0  f471					      TIMER_SETUP	25
      1  f471				   .lines     SET	25
      2  f471		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f473		       85 02		      sta	WSYNC
      4  f475		       8d 96 02 	      sta	TIM64T
     91  f478		       85 02		      sta	WSYNC
      0  f47a					      TIMER_WAIT
      1  f47a				   .waittimer
      2  f47a		       ad 84 02 	      lda	INTIM
      3  f47d		       d0 fb		      bne	.waittimer
      4  f47f		       85 02		      sta	WSYNC
      0  f481					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f481				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f481  && !(  _scan == (#37 + #184)  ) }
      2  f481					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     94  f481
     95  f481							; Finish with overscan
     96  f481		       4c 00 f4 	      jmp	Overscan
     97  f484
     98  f484
     99  f484							;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f484							; Other stuff
    101  f484							;;;;;;;;;;;;;;;;;;;;;;;;;;
    102  f484
    103  f484							; Load the ROM kernel into CBSRAM.
    104  f484				   GameFrameKernelLoader subroutine
    105  f484							; Kernel A or B
    106  f484		       a9 01		      lda	#01
    107  f486					      IFNCONST	ONLY_KERNEL_B
    108  f486				  -	      IFNCONST	ONLY_KERNEL_A
    109  f486				  -			; FIXME Kernel B disabled for test
    110  f486				  -	      and	FrameCount
    111  f486				  -	      bne	.kernel_b
    112  f486					      ENDIF
    113  f486				   .kernel_a
    114  f486							; Load kernel A into CBSRAM
    115  f486		       4c 5d f2 	      jmp	LoadKernelA
    116  f489					      ENDIF
    117  f489				   .kernel_b
    118  f489							; Load kernel B into CBSRAM
    119  f489		       4c 6f f2 	      jmp	LoadKernelB
    120  f48c
    121  f48c							; Kernel-specific frame setup.
    122  f48c				   GameFrameSetup subroutine
    123  f48c							; Kernel A or B reading directly from the kernel ID
    124  f48c		       ad 00 f1 	      lda	CBSRAM_KERNEL_READ
    125  f48f		       c9 0a		      cmp	#$0a
    126  f491		       d0 1d		      bne	.kernel_b
    127  f493
    128  f493				   .kernel_a
    129  f493							; Move missile
    130  f493		       85 02		      sta	WSYNC
      0  f495					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f495				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f495
      3  f495				  -	      IF	.CYCLES < 2
      4  f495				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f495				  -	      ERR
      6  f495					      ENDIF
      7  f495
      8  f495				  -	      IF	.CYCLES & 1
      9  f495				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f495				  -	      nop	0
     11  f495				  -	      ELSE
     12  f495				  -	      bit	VSYNC
     13  f495				  -	      ENDIF
     14  f495				  -.CYCLES    SET	.CYCLES - 3
     15  f495					      ENDIF
     16  f495
     17  f495					      REPEAT	.CYCLES / 2
     18  f495		       ea		      nop
     17  f495					      REPEND
     18  f496		       ea		      nop
     17  f496					      REPEND
     18  f497		       ea		      nop
     17  f497					      REPEND
     18  f498		       ea		      nop
     17  f498					      REPEND
     18  f499		       ea		      nop
     17  f499					      REPEND
     18  f49a		       ea		      nop
     17  f49a					      REPEND
     18  f49b		       ea		      nop
     17  f49b					      REPEND
     18  f49c		       ea		      nop
     17  f49c					      REPEND
     18  f49d		       ea		      nop
     17  f49d					      REPEND
     18  f49e		       ea		      nop
     17  f49e					      REPEND
     18  f49f		       ea		      nop
     17  f49f					      REPEND
     18  f4a0		       ea		      nop
     17  f4a0					      REPEND
     18  f4a1		       ea		      nop
     17  f4a1					      REPEND
     18  f4a2		       ea		      nop
     19  f4a3					      REPEND
    132  f4a3		       85 13		      sta	EMERALD_MI_RESET
    133  f4a5		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    134  f4a7		       85 23		      sta	EMERALD_MI_HMOVE
    135  f4a9
    136  f4a9							; DEBUG: Set per-kernel color
    137  f4a9		       a2 cc		      ldx	#COL_EMERALD
    138  f4ab		       86 07		      stx	EMERALD_SP_COLOR
    139  f4ad
    140  f4ad		       4c fc f4 	      jmp	.complete
    141  f4b0
    142  f4b0				   .kernel_b
    143  f4b0							; Move missile
    144  f4b0		       85 02		      sta	WSYNC
      0  f4b2					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f4b2				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f4b2
      3  f4b2				  -	      IF	.CYCLES < 2
      4  f4b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b2				  -	      ERR
      6  f4b2					      ENDIF
      7  f4b2
      8  f4b2					      IF	.CYCLES & 1
      9  f4b2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b2		       04 00		      nop	0
     11  f4b4				  -	      ELSE
     12  f4b4				  -	      bit	VSYNC
     13  f4b4					      ENDIF
     14  f4b4				   .CYCLES    SET	.CYCLES - 3
     15  f4b4					      ENDIF
     16  f4b4
     17  f4b4					      REPEAT	.CYCLES / 2
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     17  f4b5					      REPEND
     18  f4b6		       ea		      nop
     17  f4b6					      REPEND
     18  f4b7		       ea		      nop
     17  f4b7					      REPEND
     18  f4b8		       ea		      nop
     17  f4b8					      REPEND
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     17  f4ba					      REPEND
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     17  f4bf					      REPEND
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     17  f4c1					      REPEND
     18  f4c2		       ea		      nop
     17  f4c2					      REPEND
     18  f4c3		       ea		      nop
     17  f4c3					      REPEND
     18  f4c4		       ea		      nop
     17  f4c4					      REPEND
     18  f4c5		       ea		      nop
     17  f4c5					      REPEND
     18  f4c6		       ea		      nop
     17  f4c6					      REPEND
     18  f4c7		       ea		      nop
     17  f4c7					      REPEND
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     19  f4cc					      REPEND
    146  f4cc		       85 13		      sta	EMERALD_MI_RESET
    147  f4ce		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    148  f4d0		       85 23		      sta	EMERALD_MI_HMOVE
    149  f4d2
    150  f4d2							; Possibly override Missile position.
    151  f4d2							; TODO Document use of DO_MISS_B here, to check if M1 should be reset to a
    152  f4d2							; hidden position on Kernel B as a mechanism for offing the missile bit.
    153  f4d2		       a5 e9		      lda	DO_MISS_B
    154  f4d4		       d0 22		      bne	.kernel_b_continue
    155  f4d6		       85 02		      sta	WSYNC
      0  f4d8					      sleep	KERNEL_B_MISSILE_SLEEP + 8
      1  f4d8				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP + 8
      2  f4d8
      3  f4d8				  -	      IF	.CYCLES < 2
      4  f4d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4d8				  -	      ERR
      6  f4d8					      ENDIF
      7  f4d8
      8  f4d8					      IF	.CYCLES & 1
      9  f4d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4d8		       04 00		      nop	0
     11  f4da				  -	      ELSE
     12  f4da				  -	      bit	VSYNC
     13  f4da					      ENDIF
     14  f4da				   .CYCLES    SET	.CYCLES - 3
     15  f4da					      ENDIF
     16  f4da
     17  f4da					      REPEAT	.CYCLES / 2
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     17  f4e1					      REPEND
     18  f4e2		       ea		      nop
     17  f4e2					      REPEND
     18  f4e3		       ea		      nop
     17  f4e3					      REPEND
     18  f4e4		       ea		      nop
     17  f4e4					      REPEND
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     17  f4eb					      REPEND
     18  f4ec		       ea		      nop
     17  f4ec					      REPEND
     18  f4ed		       ea		      nop
     17  f4ed					      REPEND
     18  f4ee		       ea		      nop
     17  f4ee					      REPEND
     18  f4ef		       ea		      nop
     17  f4ef					      REPEND
     18  f4f0		       ea		      nop
     17  f4f0					      REPEND
     18  f4f1		       ea		      nop
     17  f4f1					      REPEND
     18  f4f2		       ea		      nop
     17  f4f2					      REPEND
     18  f4f3		       ea		      nop
     17  f4f3					      REPEND
     18  f4f4		       ea		      nop
     17  f4f4					      REPEND
     18  f4f5		       ea		      nop
     19  f4f6					      REPEND
    157  f4f6		       85 13		      sta	EMERALD_MI_RESET
    158  f4f8
    159  f4f8				   .kernel_b_continue
    160  f4f8							; DEBUG: Set per-kernel color
    161  f4f8		       a2 e4		      ldx	#$e4
    162  f4fa							; ldx #COL_EMERALD
    163  f4fa		       86 07		      stx	EMERALD_SP_COLOR
    164  f4fc
    165  f4fc				   .complete
    166  f4fc
    167  f4fc							; General frame setup.
    168  f4fc				   FrameSetup subroutine
    169  f4fc							; Save stack pointer
    170  f4fc		       ba		      tsx
    171  f4fd		       86 e1		      stx	RamStackBkp
    172  f4ff
    173  f4ff							; Row counter
    174  f4ff		       a9 10		      lda	#ROW_COUNT
    175  f501		       85 d4		      sta	LoopCount
    176  f503
    177  f503							; let SpriteEnd = Frame Height - Y Position
    178  f503		       18		      clc
    179  f504		       a9 c8		      lda	#HEIGHT_OFFSET
    180  f506		       e5 da		      sbc	YPos
    181  f508		       85 d6		      sta	SpriteEnd
    182  f50a
    183  f50a							; Position Player 1
    184  f50a		       a5 d7		      lda	XPos
    185  f50c		       a2 00		      ldx	#0
    186  f50e		       20 8b f5 	      jsr	SetHorizPos
    187  f511
    188  f511		       4c 44 f4 	      jmp	VerticalBlankEnd
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f514					      include	"game_input.s"
      1  f514							; Handles input checking. Called from overscan.
      2  f514
      3  f514							; Read joystick movement and apply to object 0
      4  f514				   MoveJoystick subroutine
      5  f514
      6  f514							; HACK to add in resetting ability for the gems
      7  f514		       a5 0c		      lda	INPT4	; read left port action button
      8  f516		       29 80		      and	#%10000000	; safe to avoid any reads from D6 - D0
      9  f518		       30 03		      bmi	.actionButtonNotPressed	; branch if action button not pressed
     10  f51a		       20 3a fb 	      jsr	game_state_setup
     11  f51d				   .actionButtonNotPressed
     12  f51d
     13  f51d							; Move vertically
     14  f51d							; (up and down are actually reversed since ypos starts at bottom)
     15  f51d							;     ldx YPos
     16  f51d		       a9 10		      lda	#%00010000	;Up?
     17  f51f		       2c 80 02 	      bit	SWCHA
     18  f522		       d0 0d		      bne	SkipMoveUp
     19  f524
     20  f524		       18		      clc
     21  f525		       a5 d9		      lda	Speed2
     22  f527		       69 0c		      adc	#12
     23  f529		       85 d9		      sta	Speed2
     24  f52b		       a5 d8		      lda	Speed1
     25  f52d		       69 00		      adc	#00
     26  f52f		       85 d8		      sta	Speed1
     27  f531
     28  f531				   SkipMoveUp
     29  f531		       a6 d7		      ldx	XPos
     30  f533
     31  f533							; Only check left/right on odd frames;
     32  f533							; TODO make this just a fractional speed
     33  f533							; rather than dropping frames
     34  f533		       a9 01		      lda	#01
     35  f535		       25 d5		      and	FrameCount
     36  f537		       d0 18		      bne	SkipMoveRight
     37  f539
     38  f539
     39  f539							; Move horizontally
     40  f539		       a9 40		      lda	#%01000000	;Left?
     41  f53b		       2c 80 02 	      bit	SWCHA
     42  f53e		       d0 05		      bne	SkipMoveLeft
     43  f540		       e0 1d		      cpx	#29
     44  f542		       90 01		      bcc	SkipMoveLeft
     45  f544		       ca		      dex
     46  f545
     47  f545							; Reflect
     48  f545							;     lda #$ff
     49  f545							;     sta REFP0
     50  f545				   SkipMoveLeft
     51  f545		       a9 80		      lda	#%10000000	;Right?
     52  f547		       2c 80 02 	      bit	SWCHA
     53  f54a		       d0 05		      bne	SkipMoveRight
     54  f54c		       e0 80		      cpx	#128
     55  f54e		       b0 01		      bcs	SkipMoveRight
     56  f550		       e8		      inx
     57  f551
     58  f551							; Reflect
     59  f551							;     lda #$0
     60  f551							;     sta REFP0
     61  f551				   SkipMoveRight
     62  f551		       86 d7		      stx	XPos
     63  f553		       60		      rts
     64  f554
     65  f554
     66  f554				   SpeedCalculation
     67  f554		       38		      sec
     68  f555		       a5 d9		      lda	Speed2
     69  f557		       e9 07		      sbc	#7
     70  f559		       85 d9		      sta	Speed2
     71  f55b		       a5 d8		      lda	Speed1
     72  f55d		       e9 00		      sbc	#0
     73  f55f		       85 d8		      sta	Speed1
     74  f561
     75  f561		       18		      clc
     76  f562		       a5 db		      lda	YPos2
     77  f564		       65 d9		      adc	Speed2
     78  f566		       85 db		      sta	YPos2
     79  f568		       a5 da		      lda	YPos
     80  f56a		       65 d8		      adc	Speed1
     81  f56c		       85 da		      sta	YPos
     82  f56e
     83  f56e		       c9 48		      cmp	#FLOOR_OFFSET
     84  f570		       b0 0a		      bcs	NewThing2
     85  f572
     86  f572							; Reset to floor
     87  f572		       a9 48		      lda	#FLOOR_OFFSET
     88  f574		       85 da		      sta	YPos
     89  f576		       a9 00		      lda	#0
     90  f578		       85 d8		      sta	Speed1
     91  f57a		       85 d9		      sta	Speed2
     92  f57c				   NewThing2
     93  f57c
     94  f57c		       c9 c0		      cmp	#CEILING_OFFSET
     95  f57e		       90 0a		      bcc	.next
     96  f580
     97  f580							; Reset to ceiling
     98  f580		       a9 c0		      lda	#CEILING_OFFSET
     99  f582		       85 da		      sta	YPos
    100  f584		       a9 00		      lda	#0
    101  f586		       85 d8		      sta	Speed1
    102  f588		       85 d9		      sta	Speed2
    103  f58a				   .next
    104  f58a		       60		      rts
    105  f58b
    106  f58b
    107  f58b
    108  f58b							; Subroutine
    109  f58b				   SetHorizPos
    110  f58b		       85 02		      sta	WSYNC	; start a new line
    111  f58d		       24 00		      bit	0	; waste 3 cycles
    112  f58f		       38		      sec		; set carry flag
    113  f590				   DivideLoop
    114  f590		       e9 0f		      sbc	#15	; subtract 15
    115  f592		       b0 fc		      bcs	DivideLoop	; branch until negative
    116  f594		       49 07		      eor	#7	; calculate fine offset
    117  f596		       0a		      asl
    118  f597		       0a		      asl
    119  f598		       0a		      asl
    120  f599		       0a		      asl
    121  f59a		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    122  f59c		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    123  f59e		       60		      rts		; return to caller
------- FILE main.s
------- FILE game_nibble.s LEVEL 2 PASS 2
      0  f59f					      include	"game_nibble.s"
      1  f59f							; Frame loop, including calling out to other kernels.
      2  f59f
      3  f59f		       00 aa	   SENTINEL   =	%010101010
      4  f59f
      5  f59f							; Reflected for Kernel A
      6  f59f		       00 00	   G00	      =	%00000000
      7  f59f		       00 60	   G01	      =	%01100000
      8  f59f		       00 06	   G10	      =	%00000110
      9  f59f		       00 66	   G11	      =	%01100110
     10  f59f
     11  f59f		       00 a9	   BC_LDA_IMM =	$a9
     12  f59f		       00 85	   BC_STA     =	$85
     13  f59f		       00 86	   BC_STX     =	$86
     14  f59f		       00 84	   BC_STY     =	$84
     15  f59f		       00 08	   BC_PHP     =	$08
     16  f59f		       00 04	   BC_NOP     =	$04
     17  f59f
     18  f59f		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
     19  f59f
     20  f59f				   KernelA_D_W EQM	[KernelA_D - $100]
     21  f59f				   KernelA_E_W EQM	[KernelA_E - $100]
     22  f59f				   KernelA_G_W EQM	[KernelA_G - $100]
     23  f59f				   KernelA_H_W EQM	[KernelA_H - $100]
     24  f59f				   KernelA_I_W EQM	[KernelA_I - $100]
     25  f59f				   KernelA_J_W EQM	[KernelA_J - $100]
     26  f59f				   KernelA_K_W EQM	[KernelA_K - $100]
     27  f59f
     28  f59f				   KernelB_D_W EQM	[KernelB_D - $100]
     29  f59f				   KernelB_E_W EQM	[KernelB_E - $100]
     30  f59f				   KernelB_F_W EQM	[KernelB_F - $100]
     31  f59f				   KernelB_G_W EQM	[KernelB_G - $100]
     32  f59f				   KernelB_H_W EQM	[KernelB_H - $100]
     33  f59f				   KernelB_I_W EQM	[KernelB_I - $100]
     34  f59f				   KernelB_J_W EQM	[KernelB_J - $100]
     35  f59f				   KernelB_K_W EQM	[KernelB_K - $100]
     36  f59f
     37  f59f							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     38  f59f							; processor flag Z is TRUE if this is RST.
     39  f59f							; Args:
     40  f59f							;   Y = Gemini Sprite
     41  f59f				   KernelA_GenReset subroutine
     42  f59f		       c9 00		      cmp	#$00
     43  f5a1		       f0 01		      beq	.start
     44  f5a3		       60		      rts
     45  f5a4							; Current Gemini = $00
     46  f5a4				   .start
      0  f5a4					      NIBBLE_RAM_LOAD	lda, BuildKernelRST
      1  f5a4		       ad 91 f1 	      lda	[CBSRAM_NIBBLE_READ + BuildKernelRST - NIBBLE_VAR_START]
      2  f5a4					      endif
      3  f5a7
     48  f5a7		       c9 aa		      cmp	#SENTINEL
     49  f5a9		       d0 05		      bne	.set_else
     50  f5ab							; We have found the first (and only) RST on this line, set the marker var
     51  f5ab		       a9 ff		      lda	#$ff
      0  f5ad					      NIBBLE_RAM_STORE	sta, BuildKernelRST
      1  f5ad		       8d 91 f0 	      sta	[CBSRAM_NIBBLE_WRITE + BuildKernelRST - NIBBLE_VAR_START]
     53  f5b0				   .set_else
     54  f5b0		       a9 00		      lda	#$00
     55  f5b2		       60		      rts
     56  f5b3
     57  f5b3							; Y=Gemini Sprite
     58  f5b3							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     59  f5b3							; processor flag Z is TRUE if this is RST.
     60  f5b3				   KernelB_GenPhp subroutine
     61  f5b3		       c9 60		      cmp	#G01
     62  f5b5		       f0 05		      beq	.start
     63  f5b7		       c9 66		      cmp	#G11
     64  f5b9		       f0 01		      beq	.start
     65  f5bb		       60		      rts
     66  f5bc							; Current Gemini = $00
     67  f5bc				   .start
     68  f5bc		       a5 d1		      lda	BuildKernelRST
     69  f5be		       c9 aa		      cmp	#SENTINEL
     70  f5c0		       d0 06		      bne	.set_else
     71  f5c2							; We have found the first (and only) RST on this line, set the marker var
     72  f5c2		       a9 ff		      lda	#$ff
     73  f5c4		       85 d1		      sta	BuildKernelRST
     74  f5c6
     75  f5c6							; Set Z flag
     76  f5c6		       a9 00		      lda	#$00
     77  f5c8				   .set_else
     78  f5c8		       60		      rts
     79  f5c9
     80  f5c9							; Allocates build-time registers for a new Gemini sprite value.
     81  f5c9							; register Y = the storage opcode to write to the result
     82  f5c9							;
     83  f5c9							; NibbleGrp0, NibbleX, NibbleY are compared in that order.
     84  f5c9							; NibbleX, NibbleY are upgraded if not set.
     85  f5c9							; Y=Gemini Sprite
     86  f5c9				   Kernel_UpdateRegs subroutine
     87  f5c9
     88  f5c9							; If equal to GRP0, return nop
     89  f5c9							; FIXME GRP0 might not always be up to date (should update each entry?)
     90  f5c9							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     91  f5c9		       c5 d0		      cmp	RamKernelGrp0
     92  f5cb		       d0 03		      bne	.op_start
     93  f5cd							; TODO if this is stx + NOP value, then register doesn't have to change as
     94  f5cd							; often in GEM1ASWITCH
     95  f5cd		       a9 04		      lda	#BC_NOP
     96  f5cf		       60		      rts
     97  f5d0
     98  f5d0				   .op_start
      0  f5d0					      NIBBLE_RAM_LOAD	cmp, NibbleX
      1  f5d0		       cd 8c f1 	      cmp	[CBSRAM_NIBBLE_READ + NibbleX - NIBBLE_VAR_START]
      2  f5d0					      endif
      3  f5d3
    100  f5d3		       d0 03		      bne	.op_else
    101  f5d5		       a9 86		      lda	#BC_STX
    102  f5d7		       60		      rts
    103  f5d8				   .op_else
      0  f5d8					      NIBBLE_RAM_LOAD	cmp, NibbleY
      1  f5d8		       cd 8d f1 	      cmp	[CBSRAM_NIBBLE_READ + NibbleY - NIBBLE_VAR_START]
      2  f5d8					      endif
      3  f5db
    105  f5db		       d0 03		      bne	.op_end
    106  f5dd		       a9 84		      lda	#BC_STY
    107  f5df		       60		      rts
    108  f5e0				   .op_end
    109  f5e0
    110  f5e0				   .set_start
      0  f5e0					      NIBBLE_RAM_LOAD	lda, NibbleX
      1  f5e0		       ad 8c f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleX - NIBBLE_VAR_START]
      2  f5e0					      endif
      3  f5e3
    112  f5e3		       c9 aa		      cmp	#SENTINEL
    113  f5e5		       d0 06		      bne	.set_else
    114  f5e7
    115  f5e7							; KA Missile opcode determination
    116  f5e7							; DBG_CHECK_MISSILE_OPCODE:
    117  f5e7							;     sty NibbleX
    118  f5e7							;     ror NibbleX ; D0
    119  f5e7							;     ror NibbleX ; D1
    120  f5e7							;     ldx #BC_STX
    121  f5e7							;     bcs [. + 4]
    122  f5e7							;     ldx #BC_STY
    123  f5e7							;     stx NibbleMissile
    124  f5e7
    125  f5e7							; Set the X operator
      0  f5e7					      NIBBLE_RAM_STORE	sta, NibbleX
      1  f5e7		       8d 8c f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
    127  f5ea		       a9 86		      lda	#BC_STX
    128  f5ec		       60		      rts
    129  f5ed				   .set_else
      0  f5ed					      NIBBLE_RAM_LOAD	lda, NibbleY
      1  f5ed		       ad 8d f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleY - NIBBLE_VAR_START]
      2  f5ed					      endif
      3  f5f0
    131  f5f0		       c9 aa		      cmp	#SENTINEL
    132  f5f2		       d0 06		      bne	.set_end
      0  f5f4					      NIBBLE_RAM_STORE	sta, NibbleY
      1  f5f4		       8d 8d f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
    134  f5f7		       a9 84		      lda	#BC_STY
    135  f5f9		       60		      rts
    136  f5fa				   .set_end
    137  f5fa							; Failed all
      0  f5fa					      ASSERT_RUNTIME	"0"
      1  f5fa				   .COND      SET	"0"
 ASSERT: breakif { pc== $f5fa  && !(  0  ) }
      2  f5fa					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    139  f5fa		       60		      rts
    140  f5fb
    141  f5fb							; Populate the Nibble kernel values for the current row.
    142  f5fb							; Args:
    143  f5fb							;   Y = row index
    144  f5fb				   GameNibblePopulate subroutine
    145  f5fb		       ad 00 f1 	      lda	$f100
    146  f5fe		       85 80		      sta	DebugKernelID
    147  f600
    148  f600		       ad 18 ff 	      lda	shard_map
    149  f603		       a2 01		      ldx	#1	; gemini counter, starting at 1
    150  f605				   gemini_builder subroutine
    151  f605		       e0 01		      cpx	#1	; TODO top two bits of shard_map
    152  f607		       d0 00		      bne	.no_vd0
    153  f609				   .no_vd0
    154  f609
    155  f609							; Nibble Kernel A
      0  f609					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00ed ????				      seg.U	ignoreme
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini1
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini1Reg
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini2
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini2Reg
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini3
      0 U00ed ????				      NIBBLE_VAR	NibbleGemini3Reg
    163 U00ed ????						; NIBBLE_VAR NibbleGemini4
      0 U00ed ????				      NIBBLE_VAR	NibbleMissile
    165 U00ed ????						; NIBBLE_VAR NibbleVdel1
      0 U00ed ????				      NIBBLE_VAR	NibbleGrp0
      0 U00ed ????				      NIBBLE_VAR	NibbleX
      0 U00ed ????				      NIBBLE_VAR	NibbleY
    169 U00ed ????
    170 U00ed ????	       a9 aa		      lda	#SENTINEL	; sentinel
    171 U00ef ????	       85 d1		      sta	BuildKernelRST
      0 U00f1 ????				      NIBBLE_VAR_STY	NibbleX
      0 U00f1 ????				      NIBBLE_VAR_STY	NibbleY
    174 U00f1 ????
    175 U00f1 ????						; FIXME don't hard code this?
    176 U00f1 ????	       a9 86		      lda	#BC_STX
      0 U00f3 ????				      NIBBLE_VAR_STY	NibbleMissile
    178 U00f3 ????
    179 U00f3 ????						; Gemini 1A
    180 U00f3 ????			   .K_1A
    181 U00f3 ????	       a5 ea		      lda	[DO_GEMS_A + 0]
    182 U00f5 ????	       20 9f f5 	      jsr	KernelA_GenReset
      0 U00f8 ????				      NIBBLE_IF	eq
    184 U00f8 ????						; Special: Encoding RST0
      0 U00f8 ????				      NIBBLE_WRITE_IMM	[KernelA_B - $100], #BC_LDA_IMM
      0 U00f8 ????				      NIBBLE_WRITE_IMM	[KernelA_B - $100 + 1], #%10100000
    187 U00f8 ????						; Store 1A in GRP0
    188 U00f8 ????	       a5 eb		      lda	[DO_GEMS_A + 1]
      0 U00fa ????				      NIBBLE_VAR_STY	NibbleGrp0
    190 U00fa ????	       85 d0		      sta	RamKernelGrp0	; For checking purposes
    191 U00fc ????						; Gemini 1A is RESPx
      0 U00fc ????				      NIBBLE_WRITE_IMM	[KernelA_C - $100 + 1], #EMERALD_SP_RESET
    193 U00fc ????						; Turn 3-cycle NOP into 4-cycle
      0 U00fc ????				      NIBBLE_WRITE_IMM	[KernelA_D - $100], #$14	; NOP zpx (4 cycles)
      0 U00fc ????				      NIBBLE_ELSE
    196 U00fc ????						; Store 0A in GRP0
    197 U00fc ????	       a5 ea		      lda	[DO_GEMS_A + 0]
      0 U00fe ????				      NIBBLE_VAR_STY	NibbleGrp0
    199 U00fe ????	       85 d0		      sta	RamKernelGrp0
    200 U0100 ????
    201 U0100 ????	       a5 eb		      lda	[DO_GEMS_A + 1]
    202 U0102 ????	       20 9f f5 	      jsr	KernelA_GenReset
      0 U0105 ????				      NIBBLE_IF	eq
    204 U0105 ????						; GEM1ASWITCH
      0 U0105 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 0], #BC_STX
      0 U0105 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 1], #RESP1	; RESET
      0 U0105 ????				      NIBBLE_ELSE
    208 U0105 ????						; Calculate the 1A value
    209 U0105 ????	       ad 34 fb 	      lda	SHARD_LUT_RF1
    210 U0108 ????	       c9 01		      cmp	#1
    211 U010a ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    212 U010c ????	       a9 11		      lda	#RESP1
    213 U010e ????	       2c		      .byte.b	$2C	; .bit (ABS)
    214 U010f ????	       a9 1c		      lda	#GRP1
      0 U0111 ????				      NIBBLE_VAR_STY	NibbleGemini1Reg
    216 U0111 ????
    217 U0111 ????						; Set opcode
    218 U0111 ????	       ad 34 fb 	      lda	SHARD_LUT_RF1
    219 U0114 ????	       c9 01		      cmp	#1
    220 U0116 ????	       a9 86		      lda	#BC_STX	; Don't allocate
    221 U0118 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    222 U011a ????	       a5 eb		      lda	[DO_GEMS_A + 1]
    223 U011c ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U011f ????				      NIBBLE_VAR_STY	NibbleGemini1
    225 U011f ????
      0 U011f ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 0], NibbleGemini1
      0 U011f ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 1], NibbleGemini1Reg
      0 U011f ????				      NIBBLE_END_IF
      0 U011f ????				      NIBBLE_END_IF
    230 U011f ????
    231 U011f ????						; Stop preserving GRP0
    232 U011f ????	       a9 aa		      lda	#SENTINEL
    233 U0121 ????	       85 d0		      sta	RamKernelGrp0
    234 U0123 ????
    235 U0123 ????						; NibbleX, NibbleY are upgraded if not set
    236 U0123 ????						; Gemini 2A
    237 U0123 ????			   .K_2A
    238 U0123 ????	       a5 ec		      lda	[DO_GEMS_A + 2]
    239 U0125 ????	       20 9f f5 	      jsr	KernelA_GenReset
      0 U0128 ????				      NIBBLE_IF	eq
      0 U0128 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #NOP_REG	; NOP
      0 U0128 ????				      NIBBLE_WRITE_IMM	[KernelA_G_W + 1], #RESP1	; RESET
      0 U0128 ????				      NIBBLE_ELSE
    244 U0128 ????						; Set opcode
    245 U0128 ????	       a5 ec		      lda	[DO_GEMS_A + 2]
    246 U012a ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U012d ????				      NIBBLE_VAR_STY	NibbleGemini2
    248 U012d ????
    249 U012d ????						; Set opcode target
    250 U012d ????	       ad 34 fb 	      lda	SHARD_LUT_RF1
    251 U0130 ????	       c9 02		      cmp	#2
    252 U0132 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    253 U0134 ????	       a9 11		      lda	#RESP1
    254 U0136 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    255 U0137 ????	       a9 1c		      lda	#GRP1
      0 U0139 ????				      NIBBLE_VAR_STY	NibbleGemini2Reg
    257 U0139 ????
      0 U0139 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #RESP1
      0 U0139 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 0], NibbleGemini2
      0 U0139 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 1], NibbleGemini2Reg	; STX
      0 U0139 ????				      NIBBLE_END_IF
    262 U0139 ????
    263 U0139 ????						; Gemini 3A
    264 U0139 ????			   .K_3A
    265 U0139 ????	       a5 ed		      lda	[DO_GEMS_A + 3]
    266 U013b ????	       20 9f f5 	      jsr	KernelA_GenReset
      0 U013e ????				      NIBBLE_IF	eq
      0 U013e ????				      NIBBLE_WRITE_IMM	[KernelA_H_W + 1], #RESP1	; RESET
      0 U013e ????				      NIBBLE_ELSE
    270 U013e ????						; Set opcode
    271 U013e ????	       a5 ed		      lda	[DO_GEMS_A + 3]
    272 U0140 ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U0143 ????				      NIBBLE_VAR_STY	NibbleGemini3
    274 U0143 ????
    275 U0143 ????						; Set opcode target
    276 U0143 ????	       ad 34 fb 	      lda	SHARD_LUT_RF1
    277 U0146 ????	       c0 03		      cpy	#3
    278 U0148 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    279 U014a ????	       a9 11		      lda	#RESP1
    280 U014c ????	       2c		      .byte.b	$2C	; .bit (ABS)
    281 U014d ????	       a9 1c		      lda	#GRP1
      0 U014f ????				      NIBBLE_VAR_STY	NibbleGemini3Reg
    283 U014f ????
      0 U014f ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 0], NibbleGemini3
      0 U014f ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 1], NibbleGemini3Reg
      0 U014f ????				      NIBBLE_END_IF
      0 U014f ????				      NIBBLE_END_KERNEL
      1  f609					      seg	CodeBank3
    288  f609
      0  f609					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U014f ????				      seg.U	ignoreme
    290 U014f ????						; NIBBLE_VAR NibbleGemini1
    291 U014f ????						; NIBBLE_VAR NibbleGemini1Reg
    292 U014f ????						; NIBBLE_VAR NibbleGemini2
    293 U014f ????						; NIBBLE_VAR NibbleGemini2Reg
    294 U014f ????						; NIBBLE_VAR NibbleGemini3
    295 U014f ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U014f ????				      NIBBLE_VAR	NibbleGemini4
      0 U014f ????				      NIBBLE_VAR	NibbleMissile
      0 U014f ????				      NIBBLE_VAR	NibbleVdel1
      0 U014f ????				      NIBBLE_VAR	NibbleGrp0
      0 U014f ????				      NIBBLE_VAR	NibblePhp
    301 U014f ????
    302 U014f ????						; VD1 default
    303 U014f ????	       a5 eb		      lda	[DO_GEMS_A + 1]
      0 U0151 ????				      NIBBLE_VAR_STY	NibbleVdel1
    305 U0151 ????
    306 U0151 ????						; Gemini 4A
    307 U0151 ????	       ad 35 fb 	      lda	SHARD_LUT_VD1
    308 U0154 ????	       c9 04		      cmp	#4
      0 U0156 ????				      NIBBLE_IF	ne
      0 U0156 ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0156 ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0156 ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #BC_PHP
    313 U0156 ????
    314 U0156 ????						; Set PHP
    315 U0156 ????	       a9 26		      lda	#VDELP1
      0 U0158 ????				      NIBBLE_VAR_STY	NibblePhp
    317 U0158 ????
    318 U0158 ????						; Update VDEL1
    319 U0158 ????	       a5 ee		      lda	[DO_GEMS_A + 4]
      0 U015a ????				      NIBBLE_VAR_STY	NibbleVdel1
      0 U015a ????				      NIBBLE_ELSE
    322 U015a ????	       a5 ee		      lda	[DO_GEMS_A + 4]
    323 U015c ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U015f ????				      NIBBLE_VAR_STY	NibbleGemini4
    325 U015f ????
      0 U015f ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_PHP
      0 U015f ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U015f ????				      NIBBLE_WRITE_VAR	[KernelA_K_W + 0], NibbleGemini4
      0 U015f ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #EMERALD_SP
    330 U015f ????
    331 U015f ????						; Set PHP
    332 U015f ????	       a9 11		      lda	#RESP1
      0 U0161 ????				      NIBBLE_VAR_STY	NibblePhp
      0 U0161 ????				      NIBBLE_END_IF
    335 U0161 ????
    336 U0161 ????						; Gemini 5A
    337 U0161 ????						; TODO eventually...?
    338 U0161 ????
    339 U0161 ????						; Missile
    340 U0161 ????	       a5 e8		      lda	DO_MISS_A
    341 U0163 ????						; FIXME Why doesn't this branch compile?
    342 U0163 ????						; bne .+4
    343 U0163 ????						; ldx #BC_NOP
    344 U0163 ????						; stx NibbleMissile
      0 U0163 ????				      NIBBLE_WRITE_VAR	[KernelA_F - $100], NibbleMissile
    346 U0163 ????
    347 U0163 ????						; VD1
      0 U0163 ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL1 - $100], NibbleVdel1
    349 U0163 ????						; GRP0
      0 U0163 ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL0 - $100], NibbleGrp0
    351 U0163 ????
    352 U0163 ????	       a9 ff		      lda	#$ff
      0 U0165 ????				      NIBBLE_RAM_STORE	sta, NibblePs
      1 U0165 ????	       8d 8f f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePs - NIBBLE_VAR_START]
      0 U0168 ????				      NIBBLE_END_KERNEL
      1  f609					      seg	CodeBank3
    355  f609
    356  f609							; Nibble Kernel B
      0  f609					      NIBBLE_START_KERNEL	gem_kernel_b_1, 40
      1 U0168 ????				      seg.U	ignoreme
    358 U0168 ????						; NIBBLE_VAR NibbleGemini1
    359 U0168 ????						; NIBBLE_VAR NibbleGemini1Reg
      0 U0168 ????				      NIBBLE_VAR	NibbleGemini2
    361 U0168 ????						; NIBBLE_VAR NibbleGemini2Reg
      0 U0168 ????				      NIBBLE_VAR	NibbleGemini3
    363 U0168 ????						; NIBBLE_VAR NibbleGemini3Reg
    364 U0168 ????						; NIBBLE_VAR NibbleGemini4
    365 U0168 ????						; NIBBLE_VAR NibbleMissile
    366 U0168 ????						; NIBBLE_VAR NibbleVdel1
      0 U0168 ????				      NIBBLE_VAR	NibbleGrp0
    368 U0168 ????
    369 U0168 ????	       a9 aa		      lda	#SENTINEL	; sentinel
      0 U016a ????				      NIBBLE_RAM_STORE	sta, NibbleX
      1 U016a ????	       8d 8c f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
      0 U016d ????				      NIBBLE_RAM_STORE	sta, NibbleY
      1 U016d ????	       8d 8d f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
    372 U0170 ????	       85 d1		      sta	BuildKernelRST
    373 U0172 ????
    374 U0172 ????						; Php target default
    375 U0172 ????	       a9 11		      lda	#RESP1
      0 U0174 ????				      NIBBLE_RAM_STORE	sta, NibblePhp
      1 U0174 ????	       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
    377 U0177 ????
    378 U0177 ????						; Gemini 0B
    379 U0177 ????	       a4 f0		      ldy	[DO_GEMS_B + 0]
      0 U0179 ????				      NIBBLE_VAR_STY	NibbleGrp0
    381 U0179 ????	       84 d0		      sty	RamKernelGrp0
    382 U017b ????						; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    383 U017b ????
    384 U017b ????						; Gemini 1B
    385 U017b ????	       a5 f1		      lda	[DO_GEMS_B + 1]
    386 U017d ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U0180 ????				      NIBBLE_RAM_STORE	sta, NibbleGemini1
      1 U0180 ????	       8d 82 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini1 - NIBBLE_VAR_START]
    388 U0183 ????
    389 U0183 ????						; Gemini 2B
    390 U0183 ????	       a4 f2		      ldy	[DO_GEMS_B + 2]
    391 U0185 ????	       20 b3 f5 	      jsr	KernelB_GenPhp
      0 U0188 ????				      NIBBLE_IF	eq
      0 U0188 ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U0188 ????			   .OFFSET    SET	3
      2 U0188 ????	       a5 f3		      lda	[DO_GEMS_B + .OFFSET]
      3 U018a ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U018d ????				      NIBBLE_RAM_STORE	sta, NibbleGemini3
      1 U018d ????	       8d 86 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3 - NIBBLE_VAR_START]
    394 U0190 ????
    395 U0190 ????						; Write to PHP in 2B
    396 U0190 ????	       a9 1c		      lda	#EMERALD_SP
      0 U0192 ????				      NIBBLE_RAM_STORE	sta, NibblePhp
      1 U0192 ????	       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET	; 2B
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #BC_PHP
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 0], #BC_STA
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #PF1
      0 U0195 ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP	; 3B
    405 U0195 ????
    406 U0195 ????						; Update Grp0
    407 U0195 ????	       a5 d1		      lda	BuildKernelRST
    408 U0197 ????	       85 d0		      sta	RamKernelGrp0
      0 U0199 ????				      NIBBLE_ELSE
    410 U0199 ????						; Gemini 3B
    411 U0199 ????	       a5 f3		      lda	[DO_GEMS_B + 3]
    412 U019b ????	       20 b3 f5 	      jsr	KernelB_GenPhp
      0 U019e ????				      NIBBLE_IF	eq
    414 U019e ????						; Write to PHP in 3B
      0 U019e ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U019e ????			   .OFFSET    SET	2
      2 U019e ????	       a5 f2		      lda	[DO_GEMS_B + .OFFSET]
      3 U01a0 ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U01a3 ????				      NIBBLE_RAM_STORE	sta, NibbleGemini2
      1 U01a3 ????	       8d 84 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2 - NIBBLE_VAR_START]
    416 U01a6 ????	       a9 1c		      lda	#EMERALD_SP
      0 U01a8 ????				      NIBBLE_RAM_STORE	sta, NibblePhp
      1 U01a8 ????	       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET
      0 U01ab ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 1], NibbleGemini2
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 2], #EMERALD_SP	; 2B
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #BC_STA
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 2], #PF1
      0 U01ab ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #BC_PHP	; 3B
    425 U01ab ????
    426 U01ab ????						; Update Grp0
      0 U01ab ????				      NIBBLE_RAM_LOAD	lda, BuildKernelRST
      1 U01ab ????	       ad 91 f1 	      lda	[CBSRAM_NIBBLE_READ + BuildKernelRST - NIBBLE_VAR_START]
      2 U01ab ????				      endif
      3 U01ae ????
    428 U01ae ????	       84 d0		      sty	RamKernelGrp0
      0 U01b0 ????				      NIBBLE_ELSE
    430 U01b0 ????						; Update 2B
      0 U01b0 ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U01b0 ????			   .OFFSET    SET	2
      2 U01b0 ????	       a5 f2		      lda	[DO_GEMS_B + .OFFSET]
      3 U01b2 ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U01b5 ????				      NIBBLE_RAM_STORE	sta, NibbleGemini2
      1 U01b5 ????	       8d 84 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2 - NIBBLE_VAR_START]
      0 U01b8 ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 0], NibbleGemini2
      0 U01b8 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #EMERALD_SP
    434 U01b8 ????
    435 U01b8 ????						; Update 3B
      0 U01b8 ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U01b8 ????			   .OFFSET    SET	3
      2 U01b8 ????	       a5 f3		      lda	[DO_GEMS_B + .OFFSET]
      3 U01ba ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U01bd ????				      NIBBLE_RAM_STORE	sta, NibbleGemini3
      1 U01bd ????	       8d 86 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3 - NIBBLE_VAR_START]
      0 U01c0 ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U01c0 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP
      0 U01c0 ????				      NIBBLE_END_IF
      0 U01c0 ????				      NIBBLE_END_IF
    441 U01c0 ????
      0 U01c0 ????				      NIBBLE_END_KERNEL
      1  f609					      seg	CodeBank3
    443  f609
    444  f609							; Nibble Kernel B
      0  f609					      NIBBLE_START_KERNEL	gem_kernel_b_2, 40
      1 U01c0 ????				      seg.U	ignoreme
      0 U01c0 ????				      NIBBLE_VAR	NibbleGemini1
    447 U01c0 ????						; NIBBLE_VAR NibbleGemini1Reg
    448 U01c0 ????						; NIBBLE_VAR NibbleGemini2
    449 U01c0 ????						; NIBBLE_VAR NibbleGemini2Reg
    450 U01c0 ????						; NIBBLE_VAR NibbleGemini3
    451 U01c0 ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U01c0 ????				      NIBBLE_VAR	NibbleGemini4
    453 U01c0 ????						; NIBBLE_VAR NibbleMissile
    454 U01c0 ????						; NIBBLE_VAR NibbleVdel1
      0 U01c0 ????				      NIBBLE_VAR	NibbleGrp0
    456 U01c0 ????
    457 U01c0 ????						; Gemini 1B
      0 U01c0 ????				      NIBBLE_WRITE_VAR	KernelB_D_W, NibbleGemini1
    459 U01c0 ????
    460 U01c0 ????						; Write out PHP flag comparison
    461 U01c0 ????	       a4 d1		      ldy	BuildKernelRST
    462 U01c2 ????	       c0 60		      cpy	#G01
      0 U01c4 ????				      NIBBLE_IF	eq
      0 U01c4 ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamFFByte
      0 U01c4 ????				      NIBBLE_ELSE
      0 U01c4 ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamPF1Value
      0 U01c4 ????				      NIBBLE_END_IF
    468 U01c4 ????
    469 U01c4 ????						; Missile
    470 U01c4 ????						; ldy DO_MISS_B
    471 U01c4 ????						; NIBBLE_IF eq ; Disabled
    472 U01c4 ????						; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    473 U01c4 ????						; NIBBLE_ELSE
    474 U01c4 ????						;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    475 U01c4 ????						; NIBBLE_END_IF
    476 U01c4 ????
    477 U01c4 ????						; Gemini 4B
    478 U01c4 ????	       a5 f4		      lda	[DO_GEMS_B + 4]
    479 U01c6 ????	       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0 U01c9 ????				      NIBBLE_RAM_STORE	sta, NibbleGemini4
      1 U01c9 ????	       8d 88 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini4 - NIBBLE_VAR_START]
      0 U01cc ????				      NIBBLE_WRITE_VAR	KernelB_J_W, NibbleGemini4
    482 U01cc ????
    483 U01cc ????						; TODO if no PHP, rewrite previous section:
    484 U01cc ????						; NIBBLE_IF cs
    485 U01cc ????						;     ; Write to PHP in reset command
    486 U01cc ????						;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    487 U01cc ????						;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    488 U01cc ????						;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    489 U01cc ????						;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    490 U01cc ????						; NIBBLE_END_IF
    491 U01cc ????
    492 U01cc ????						; Make adjustments for sprites.
      0 U01cc ????				      NIBBLE_RAM_STORE	ror, NibbleGrp0
      1 U01cc ????	       6e 8b f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleGrp0 - NIBBLE_VAR_START]
      0 U01cf ????				      NIBBLE_RAM_STORE	ror, NibbleX
      1 U01cf ????	       6e 8c f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
      0 U01d2 ????				      NIBBLE_RAM_STORE	ror, NibbleY
      1 U01d2 ????	       6e 8d f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
    496 U01d5 ????
    497 U01d5 ????						; ; VD1
    498 U01d5 ????						; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    499 U01d5 ????						; GRP0
      0 U01d5 ????				      NIBBLE_WRITE_VAR	[KernelB_VDEL0 - $100], NibbleGrp0
    501 U01d5 ????
    502 U01d5 ????	       a9 00		      lda	#$00
      0 U01d7 ????				      NIBBLE_RAM_STORE	sta, NibblePs
      1 U01d7 ????	       8d 8f f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePs - NIBBLE_VAR_START]
    504 U01da ????
      0 U01da ????				      NIBBLE_END_KERNEL
      1  f609					      seg	CodeBank3
    506  f609
    507  f609							; TODO do this for all rows
    508  f609				   DBG_NIBBLE_BUILD subroutine
    509  f609		       ae 00 f1 	      ldx	$f100
    510  f60c		       e0 0a		      cpx	#$a
    511  f60e		       f0 03		      beq	[. + 5]
    512  f610		       4c 22 f7 	      jmp	.kernel_b
    513  f613				   .kernel_a
      0  f613					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f613		       a9 00		      lda	#0
      2  f615		       85 dd		      sta	RamNibbleBuildState
      3  f617
      4  f617
      5  f617		       a9 aa		      lda	#SENTINEL
      6  f619		       85 d1		      sta	BuildKernelRST
      0  f61b					      NIBBLE_RAM_STORE	sta, NibbleX
      1  f61b		       8d 8c f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
      0  f61e					      NIBBLE_RAM_STORE	sta, NibbleY
      1  f61e		       8d 8d f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
      9  f621
     10  f621		       a9 86		      lda	#BC_STX
      0  f623					      NIBBLE_RAM_STORE	sta, NibbleMissile
      1  f623		       8d 89 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleMissile - NIBBLE_VAR_START]
     12  f626
     13  f626				   .K_1A
     14  f626		       a5 ea		      lda	[DO_GEMS_A + 0]
     15  f628		       20 9f f5 	      jsr	KernelA_GenReset
     16  f62b				   .if_1
     17  f62b		       d0 0f		      bne	.else_1
     18  f62d		       38		      sec
     19  f62e		       26 dd		      rol	RamNibbleBuildState
     20  f630
     21  f630
     22  f630		       a5 eb		      lda	[DO_GEMS_A + 1]
      0  f632					      NIBBLE_RAM_STORE	sta, NibbleGrp0
      1  f632		       8d 8b f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGrp0 - NIBBLE_VAR_START]
     24  f635		       85 d0		      sta	RamKernelGrp0
     25  f637
     26  f637
     27  f637		       26 dd		      rol	RamNibbleBuildState
     28  f639		       4c 76 f6 	      jmp	.endif_1
     29  f63c
     30  f63c				   .else_1
     31  f63c		       18		      clc
     32  f63d		       26 dd		      rol	RamNibbleBuildState
     33  f63f
     34  f63f		       a5 ea		      lda	[DO_GEMS_A + 0]
      0  f641					      NIBBLE_RAM_STORE	sta, NibbleGrp0
      1  f641		       8d 8b f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGrp0 - NIBBLE_VAR_START]
     36  f644		       85 d0		      sta	RamKernelGrp0
     37  f646		       a5 eb		      lda	[DO_GEMS_A + 1]
     38  f648		       20 9f f5 	      jsr	KernelA_GenReset
     39  f64b				   .if_2
     40  f64b		       d0 06		      bne	.else_2
     41  f64d		       38		      sec
     42  f64e		       26 dd		      rol	RamNibbleBuildState
     43  f650
     44  f650		       4c 76 f6 	      jmp	.endif_2
     45  f653
     46  f653				   .else_2
     47  f653		       18		      clc
     48  f654		       26 dd		      rol	RamNibbleBuildState
     49  f656
     50  f656		       ad 34 fb 	      lda	SHARD_LUT_RF1
     51  f659		       c9 01		      cmp	#1
     52  f65b		       d0 03		      .byte.b	$D0, #3
     53  f65d		       a9 11		      lda	#RESP1
     54  f65f		       2c		      .byte.b	$2C
     55  f660		       a9 1c		      lda	#GRP1
      0  f662					      NIBBLE_RAM_STORE	sta, NibbleGemini1Reg
      1  f662		       8d 83 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini1Reg - NIBBLE_VAR_START]
     57  f665
     58  f665		       ad 34 fb 	      lda	SHARD_LUT_RF1
     59  f668		       c9 01		      cmp	#1
     60  f66a		       a9 86		      lda	#BC_STX
     61  f66c		       f0 05		      .byte.b	$F0, #5
     62  f66e		       a5 eb		      lda	[DO_GEMS_A + 1]
     63  f670		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f673					      NIBBLE_RAM_STORE	sta, NibbleGemini1
      1  f673		       8d 82 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini1 - NIBBLE_VAR_START]
     65  f676
     66  f676
     67  f676				   .endif_2
     68  f676
     69  f676
     70  f676				   .endif_1
     71  f676
     72  f676		       a9 aa		      lda	#SENTINEL
     73  f678		       85 d0		      sta	RamKernelGrp0
     74  f67a
     75  f67a
     76  f67a				   .K_2A
     77  f67a		       a5 ec		      lda	[DO_GEMS_A + 2]
     78  f67c		       20 9f f5 	      jsr	KernelA_GenReset
     79  f67f				   .if_3
     80  f67f		       d0 06		      bne	.else_3
     81  f681		       38		      sec
     82  f682		       26 dd		      rol	RamNibbleBuildState
     83  f684		       4c a1 f6 	      jmp	.endif_3
     84  f687
     85  f687				   .else_3
     86  f687		       18		      clc
     87  f688		       26 dd		      rol	RamNibbleBuildState
     88  f68a
     89  f68a		       a5 ec		      lda	[DO_GEMS_A + 2]
     90  f68c		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f68f					      NIBBLE_RAM_STORE	sta, NibbleGemini2
      1  f68f		       8d 84 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2 - NIBBLE_VAR_START]
     92  f692
     93  f692		       ad 34 fb 	      lda	SHARD_LUT_RF1
     94  f695		       c9 02		      cmp	#2
     95  f697		       d0 03		      .byte.b	$D0, #3
     96  f699		       a9 11		      lda	#RESP1
     97  f69b		       2c		      .byte.b	$2C
     98  f69c		       a9 1c		      lda	#GRP1
      0  f69e					      NIBBLE_RAM_STORE	sta, NibbleGemini2Reg
      1  f69e		       8d 85 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2Reg - NIBBLE_VAR_START]
    100  f6a1
    101  f6a1
    102  f6a1				   .endif_3
    103  f6a1
    104  f6a1				   .K_3A
    105  f6a1		       a5 ed		      lda	[DO_GEMS_A + 3]
    106  f6a3		       20 9f f5 	      jsr	KernelA_GenReset
    107  f6a6				   .if_4
    108  f6a6		       d0 06		      bne	.else_4
    109  f6a8		       38		      sec
    110  f6a9		       26 dd		      rol	RamNibbleBuildState
    111  f6ab		       4c c8 f6 	      jmp	.endif_4
    112  f6ae
    113  f6ae				   .else_4
    114  f6ae		       18		      clc
    115  f6af		       26 dd		      rol	RamNibbleBuildState
    116  f6b1
    117  f6b1		       a5 ed		      lda	[DO_GEMS_A + 3]
    118  f6b3		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f6b6					      NIBBLE_RAM_STORE	sta, NibbleGemini3
      1  f6b6		       8d 86 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3 - NIBBLE_VAR_START]
    120  f6b9
    121  f6b9		       ad 34 fb 	      lda	SHARD_LUT_RF1
    122  f6bc		       c0 03		      cpy	#3
    123  f6be		       d0 03		      .byte.b	$D0, #3
    124  f6c0		       a9 11		      lda	#RESP1
    125  f6c2		       2c		      .byte.b	$2C
    126  f6c3		       a9 1c		      lda	#GRP1
      0  f6c5					      NIBBLE_RAM_STORE	sta, NibbleGemini3Reg
      1  f6c5		       8d 87 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3Reg - NIBBLE_VAR_START]
    128  f6c8
    129  f6c8
    130  f6c8				   .endif_4
    131  f6c8
    132  f6c8		       26 dd		      rol	RamNibbleBuildState
    133  f6ca		       26 dd		      rol	RamNibbleBuildState
    134  f6cc		       26 dd		      rol	RamNibbleBuildState
    135  f6ce		       26 dd		      rol	RamNibbleBuildState
    515  f6d0		       a5 dd		      lda	RamNibbleBuildState
      0  f6d2					      NIBBLE_RAM_STORE	sta, NibbleVar1
      1  f6d2		       8d 80 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVar1 - NIBBLE_VAR_START]
      0  f6d5					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f6d5		       a9 00		      lda	#0
      2  f6d7		       85 dd		      sta	RamNibbleBuildState
      3  f6d9
      4  f6d9
      5  f6d9
      6  f6d9
      7  f6d9
      8  f6d9
      9  f6d9
     10  f6d9		       a5 eb		      lda	[DO_GEMS_A + 1]
      0  f6db					      NIBBLE_RAM_STORE	sta, NibbleVdel1
      1  f6db		       8d 8a f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVdel1 - NIBBLE_VAR_START]
     12  f6de
     13  f6de		       ad 35 fb 	      lda	SHARD_LUT_VD1
     14  f6e1		       c9 04		      cmp	#4
     15  f6e3				   .if_1
     16  f6e3		       f0 10		      beq	.else_1
     17  f6e5		       38		      sec
     18  f6e6		       26 dd		      rol	RamNibbleBuildState
     19  f6e8
     20  f6e8		       a9 26		      lda	#VDELP1
      0  f6ea					      NIBBLE_RAM_STORE	sta, NibblePhp
      1  f6ea		       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
     22  f6ed
     23  f6ed		       a5 ee		      lda	[DO_GEMS_A + 4]
      0  f6ef					      NIBBLE_RAM_STORE	sta, NibbleVdel1
      1  f6ef		       8d 8a f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVdel1 - NIBBLE_VAR_START]
     25  f6f2		       4c 05 f7 	      jmp	.endif_1
     26  f6f5
     27  f6f5				   .else_1
     28  f6f5		       18		      clc
     29  f6f6		       26 dd		      rol	RamNibbleBuildState
     30  f6f8		       a5 ee		      lda	[DO_GEMS_A + 4]
     31  f6fa		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f6fd					      NIBBLE_RAM_STORE	sta, NibbleGemini4
      1  f6fd		       8d 88 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini4 - NIBBLE_VAR_START]
     33  f700
     34  f700		       a9 11		      lda	#RESP1
      0  f702					      NIBBLE_RAM_STORE	sta, NibblePhp
      1  f702		       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
     36  f705
     37  f705
     38  f705				   .endif_1
     39  f705
     40  f705
     41  f705
     42  f705		       a5 e8		      lda	DO_MISS_A
     43  f707
     44  f707
     45  f707
     46  f707
     47  f707
     48  f707
     49  f707		       a9 ff		      lda	#$ff
      0  f709					      NIBBLE_RAM_STORE	sta, NibblePs
      1  f709		       8d 8f f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePs - NIBBLE_VAR_START]
     51  f70c
     52  f70c		       26 dd		      rol	RamNibbleBuildState
     53  f70e		       26 dd		      rol	RamNibbleBuildState
     54  f710		       26 dd		      rol	RamNibbleBuildState
     55  f712		       26 dd		      rol	RamNibbleBuildState
     56  f714		       26 dd		      rol	RamNibbleBuildState
     57  f716		       26 dd		      rol	RamNibbleBuildState
     58  f718		       26 dd		      rol	RamNibbleBuildState
    518  f71a		       a5 dd		      lda	RamNibbleBuildState
      0  f71c					      NIBBLE_RAM_STORE	sta, NibbleVar2
      1  f71c		       8d 81 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVar2 - NIBBLE_VAR_START]
    520  f71f		       4c e6 f7 	      jmp	.next
    521  f722				   .kernel_b
      0  f722					      NIBBLE_gem_kernel_b_1_BUILD		; TODO can this be implied
      1  f722		       a9 00		      lda	#0
      2  f724		       85 dd		      sta	RamNibbleBuildState
      3  f726
      4  f726
      5  f726
      6  f726
      7  f726
      8  f726
      9  f726
     10  f726		       a9 aa		      lda	#SENTINEL
      0  f728					      NIBBLE_RAM_STORE	sta, NibbleX
      1  f728		       8d 8c f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
      0  f72b					      NIBBLE_RAM_STORE	sta, NibbleY
      1  f72b		       8d 8d f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
     13  f72e		       85 d1		      sta	BuildKernelRST
     14  f730
     15  f730		       a9 11		      lda	#RESP1
      0  f732					      NIBBLE_RAM_STORE	sta, NibblePhp
      1  f732		       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
     17  f735
     18  f735		       a4 f0		      ldy	[DO_GEMS_B + 0]
      0  f737					      NIBBLE_RAM_STORE	sta, NibbleGrp0
      1  f737		       8d 8b f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGrp0 - NIBBLE_VAR_START]
     20  f73a		       84 d0		      sty	RamKernelGrp0
     21  f73c
     22  f73c
     23  f73c		       a5 f1		      lda	[DO_GEMS_B + 1]
     24  f73e		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f741					      NIBBLE_RAM_STORE	sta, NibbleGemini1
      1  f741		       8d 82 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini1 - NIBBLE_VAR_START]
     26  f744
     27  f744		       a4 f2		      ldy	[DO_GEMS_B + 2]
     28  f746		       20 b3 f5 	      jsr	KernelB_GenPhp
     29  f749				   .if_1
     30  f749		       d0 19		      bne	.else_1
     31  f74b		       38		      sec
     32  f74c		       26 dd		      rol	RamNibbleBuildState
      0  f74e					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f74e				   .OFFSET    SET	3
      2  f74e		       a5 f3		      lda	[DO_GEMS_B + .OFFSET]
      3  f750		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f753					      NIBBLE_RAM_STORE	sta, NibbleGemini3
      1  f753		       8d 86 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3 - NIBBLE_VAR_START]
     34  f756
     35  f756		       a9 1c		      lda	#EMERALD_SP
      0  f758					      NIBBLE_RAM_STORE	sta, NibblePhp
      1  f758		       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
     37  f75b
     38  f75b		       a5 d1		      lda	BuildKernelRST
     39  f75d		       85 d0		      sta	RamKernelGrp0
     40  f75f		       26 dd		      rol	RamNibbleBuildState
     41  f761		       4c 99 f7 	      jmp	.endif_1
     42  f764
     43  f764				   .else_1
     44  f764		       18		      clc
     45  f765		       26 dd		      rol	RamNibbleBuildState
     46  f767
     47  f767		       a5 f3		      lda	[DO_GEMS_B + 3]
     48  f769		       20 b3 f5 	      jsr	KernelB_GenPhp
     49  f76c				   .if_2
     50  f76c		       d0 18		      bne	.else_2
     51  f76e		       38		      sec
     52  f76f		       26 dd		      rol	RamNibbleBuildState
     53  f771
      0  f771					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f771				   .OFFSET    SET	2
      2  f771		       a5 f2		      lda	[DO_GEMS_B + .OFFSET]
      3  f773		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f776					      NIBBLE_RAM_STORE	sta, NibbleGemini2
      1  f776		       8d 84 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2 - NIBBLE_VAR_START]
     55  f779		       a9 1c		      lda	#EMERALD_SP
      0  f77b					      NIBBLE_RAM_STORE	sta, NibblePhp
      1  f77b		       8d 8e f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePhp - NIBBLE_VAR_START]
     57  f77e
     58  f77e
      0  f77e					      NIBBLE_RAM_LOAD	lda, BuildKernelRST
      1  f77e		       ad 91 f1 	      lda	[CBSRAM_NIBBLE_READ + BuildKernelRST - NIBBLE_VAR_START]
      2  f77e					      endif
      3  f781
     60  f781		       84 d0		      sty	RamKernelGrp0
     61  f783		       4c 99 f7 	      jmp	.endif_2
     62  f786
     63  f786				   .else_2
     64  f786		       18		      clc
     65  f787		       26 dd		      rol	RamNibbleBuildState
     66  f789
      0  f789					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f789				   .OFFSET    SET	2
      2  f789		       a5 f2		      lda	[DO_GEMS_B + .OFFSET]
      3  f78b		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f78e					      NIBBLE_RAM_STORE	sta, NibbleGemini2
      1  f78e		       8d 84 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini2 - NIBBLE_VAR_START]
     68  f791
      0  f791					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f791				   .OFFSET    SET	3
      2  f791		       a5 f3		      lda	[DO_GEMS_B + .OFFSET]
      3  f793		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f796					      NIBBLE_RAM_STORE	sta, NibbleGemini3
      1  f796		       8d 86 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini3 - NIBBLE_VAR_START]
     70  f799
     71  f799
     72  f799				   .endif_2
     73  f799
     74  f799
     75  f799				   .endif_1
     76  f799
     77  f799		       26 dd		      rol	RamNibbleBuildState
     78  f79b		       26 dd		      rol	RamNibbleBuildState
     79  f79d		       26 dd		      rol	RamNibbleBuildState
     80  f79f		       26 dd		      rol	RamNibbleBuildState
     81  f7a1		       26 dd		      rol	RamNibbleBuildState
     82  f7a3		       26 dd		      rol	RamNibbleBuildState
    523  f7a5		       a5 dd		      lda	RamNibbleBuildState
      0  f7a7					      NIBBLE_RAM_STORE	sta, NibbleVar1
      1  f7a7		       8d 80 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVar1 - NIBBLE_VAR_START]
      0  f7aa					      NIBBLE_gem_kernel_b_2_BUILD		; TODO can this be implied
      1  f7aa		       a9 00		      lda	#0
      2  f7ac		       85 dd		      sta	RamNibbleBuildState
      3  f7ae
      4  f7ae
      5  f7ae
      6  f7ae
      7  f7ae
      8  f7ae
      9  f7ae
     10  f7ae
     11  f7ae
     12  f7ae		       a4 d1		      ldy	BuildKernelRST
     13  f7b0		       c0 60		      cpy	#G01
     14  f7b2				   .if_1
     15  f7b2		       d0 06		      bne	.else_1
     16  f7b4		       38		      sec
     17  f7b5		       26 dd		      rol	RamNibbleBuildState
     18  f7b7		       4c bd f7 	      jmp	.endif_1
     19  f7ba
     20  f7ba				   .else_1
     21  f7ba		       18		      clc
     22  f7bb		       26 dd		      rol	RamNibbleBuildState
     23  f7bd
     24  f7bd
     25  f7bd				   .endif_1
     26  f7bd
     27  f7bd
     28  f7bd
     29  f7bd
     30  f7bd
     31  f7bd
     32  f7bd
     33  f7bd
     34  f7bd		       a5 f4		      lda	[DO_GEMS_B + 4]
     35  f7bf		       20 c9 f5 	      jsr	Kernel_UpdateRegs
      0  f7c2					      NIBBLE_RAM_STORE	sta, NibbleGemini4
      1  f7c2		       8d 88 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleGemini4 - NIBBLE_VAR_START]
     37  f7c5
     38  f7c5
     39  f7c5
     40  f7c5
     41  f7c5
     42  f7c5
     43  f7c5
     44  f7c5
     45  f7c5
      0  f7c5					      NIBBLE_RAM_STORE	ror, NibbleGrp0
      1  f7c5		       6e 8b f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleGrp0 - NIBBLE_VAR_START]
      0  f7c8					      NIBBLE_RAM_STORE	ror, NibbleX
      1  f7c8		       6e 8c f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleX - NIBBLE_VAR_START]
      0  f7cb					      NIBBLE_RAM_STORE	ror, NibbleY
      1  f7cb		       6e 8d f0 	      ror	[CBSRAM_NIBBLE_WRITE + NibbleY - NIBBLE_VAR_START]
     49  f7ce
     50  f7ce
     51  f7ce
     52  f7ce		       a9 00		      lda	#$00
      0  f7d0					      NIBBLE_RAM_STORE	sta, NibblePs
      1  f7d0		       8d 8f f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibblePs - NIBBLE_VAR_START]
     54  f7d3
     55  f7d3		       26 dd		      rol	RamNibbleBuildState
     56  f7d5		       26 dd		      rol	RamNibbleBuildState
     57  f7d7		       26 dd		      rol	RamNibbleBuildState
     58  f7d9		       26 dd		      rol	RamNibbleBuildState
     59  f7db		       26 dd		      rol	RamNibbleBuildState
     60  f7dd		       26 dd		      rol	RamNibbleBuildState
     61  f7df		       26 dd		      rol	RamNibbleBuildState
    526  f7e1		       a5 dd		      lda	RamNibbleBuildState
      0  f7e3					      NIBBLE_RAM_STORE	sta, NibbleVar2
      1  f7e3		       8d 81 f0 	      sta	[CBSRAM_NIBBLE_WRITE + NibbleVar2 - NIBBLE_VAR_START]
    528  f7e6				   .next
    529  f7e6		       60		      rts
    530  f7e7
    531  f7e7
    532  f7e7				   NibbleCopyToRam subroutine
    533  f7e7							; Copy out
    534  f7e7		       a2 00		      ldx	#00
    535  f7e9		       a0 00		      ldy	#$00
    536  f7eb				   .loop
    537  f7eb		       b9 c0 00 	      lda	NIBBLE_VAR_START,y
    538  f7ee		       99 80 f0 	      sta	CBSRAM_NIBBLE_WRITE,y
    539  f7f1		       96 c0		      stx	NIBBLE_VAR_START,y
    540  f7f3		       c8		      iny
    541  f7f4		       c0 10		      cpy	#NIBBLE_VAR_COUNT
    542  f7f6		       d0 f3		      bne	.loop
    543  f7f8		       60		      rts
    544  f7f9
    545  f7f9				   NibbleCopyFromRam subroutine
    546  f7f9				   .INDEX     SET	0
    547  f7f9					      REPEAT	NIBBLE_VAR_COUNT
    548  f7f9		       ad 80 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f7fc		       85 c0		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f7fc				   .INDEX     SET	.INDEX + 1
    547  f7fc					      REPEND
    548  f7fe		       ad 81 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f801		       85 c1		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f801				   .INDEX     SET	.INDEX + 1
    547  f801					      REPEND
    548  f803		       ad 82 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f806		       85 c2		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f806				   .INDEX     SET	.INDEX + 1
    547  f806					      REPEND
    548  f808		       ad 83 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f80b		       85 c3		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f80b				   .INDEX     SET	.INDEX + 1
    547  f80b					      REPEND
    548  f80d		       ad 84 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f810		       85 c4		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f810				   .INDEX     SET	.INDEX + 1
    547  f810					      REPEND
    548  f812		       ad 85 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f815		       85 c5		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f815				   .INDEX     SET	.INDEX + 1
    547  f815					      REPEND
    548  f817		       ad 86 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f81a		       85 c6		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f81a				   .INDEX     SET	.INDEX + 1
    547  f81a					      REPEND
    548  f81c		       ad 87 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f81f		       85 c7		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f81f				   .INDEX     SET	.INDEX + 1
    547  f81f					      REPEND
    548  f821		       ad 88 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f824		       85 c8		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f824				   .INDEX     SET	.INDEX + 1
    547  f824					      REPEND
    548  f826		       ad 89 f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f829		       85 c9		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f829				   .INDEX     SET	.INDEX + 1
    547  f829					      REPEND
    548  f82b		       ad 8a f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f82e		       85 ca		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f82e				   .INDEX     SET	.INDEX + 1
    547  f82e					      REPEND
    548  f830		       ad 8b f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f833		       85 cb		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f833				   .INDEX     SET	.INDEX + 1
    547  f833					      REPEND
    548  f835		       ad 8c f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f838		       85 cc		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f838				   .INDEX     SET	.INDEX + 1
    547  f838					      REPEND
    548  f83a		       ad 8d f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f83d		       85 cd		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f83d				   .INDEX     SET	.INDEX + 1
    547  f83d					      REPEND
    548  f83f		       ad 8e f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f842		       85 ce		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f842				   .INDEX     SET	.INDEX + 1
    547  f842					      REPEND
    548  f844		       ad 8f f1 	      lda	[CBSRAM_NIBBLE_READ + .INDEX]
    549  f847		       85 cf		      sta	[NIBBLE_VAR_START + .INDEX]
    550  f847				   .INDEX     SET	.INDEX + 1
    551  f849					      REPEND
    552  f849		       60		      rts
    553  f84a
    554  f84a							; Evaluate the kernel.
    555  f84a							; TODO move this into the row kernel
    556  f84a				   GameNibbleRun subroutine
    557  f84a							; Row 0.
    558  f84a		       a0 00		      ldy	#0
    559  f84c
    560  f84c							; Select kernel A or B.
    561  f84c		       ae 00 f1 	      ldx	$f100
    562  f84f		       e0 0a		      cpx	#$a
    563  f851		       f0 03		      beq	[. + 5]
    564  f853		       4c 2b f9 	      jmp	.kernel_b
    565  f856				   .kernel_a
      0  f856					      NIBBLE_RAM_LOAD	lda, NibbleVar1
      1  f856		       ad 80 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar1 - NIBBLE_VAR_START]
      2  f856					      endif
      3  f859
      0  f859					      NIBBLE_gem_kernel_a_1
      1  f859		       0a		      asl
      2  f85a		       90 18		      bcc	.else_1
      3  f85c
      4  f85c				   .if_1
      5  f85c		       a2 a9		      ldx	#[ #BC_LDA_IMM ]
      6  f85e		       8e 15 f0 	      stx	[[KernelA_B - $100] + 0]
      7  f861		       a2 a0		      ldx	#[ #%10100000 ]
      8  f863		       8e 16 f0 	      stx	[[KernelA_B - $100 + 1] + 0]
      9  f866		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
     10  f868		       8e 18 f0 	      stx	[[KernelA_C - $100 + 1] + 0]
     11  f86b		       a2 14		      ldx	#[ #$14 ]
     12  f86d		       8e 19 f0 	      stx	[[KernelA_D - $100] + 0]
     13  f870		       2a		      rol
     14  f871
     15  f871
     16  f871		       4c 95 f8 	      jmp	.endif_1
     17  f874				   .else_1
     18  f874		       0a		      asl
     19  f875		       90 0f		      bcc	.else_2
     20  f877
     21  f877				   .if_2
     22  f877		       a2 86		      ldx	#[ #BC_STX ]
     23  f879		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     24  f87c		       a2 11		      ldx	#[ #RESP1 ]
     25  f87e		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  f881					      sleep	3
      1  f881				   .CYCLES    SET	3
      2  f881
      3  f881				  -	      IF	.CYCLES < 2
      4  f881				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f881				  -	      ERR
      6  f881					      ENDIF
      7  f881
      8  f881					      IF	.CYCLES & 1
      9  f881					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f881		       04 00		      nop	0
     11  f883				  -	      ELSE
     12  f883				  -	      bit	VSYNC
     13  f883					      ENDIF
     14  f883				   .CYCLES    SET	.CYCLES - 3
     15  f883					      ENDIF
     16  f883
     17  f883				  -	      REPEAT	.CYCLES / 2
     18  f883				  -	      nop
     19  f883					      REPEND
     27  f883
     28  f883
     29  f883		       4c 92 f8 	      jmp	.endif_2
     30  f886				   .else_2
     31  f886		       be 82 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1 - NIBBLE_VAR_START],y
     32  f889		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     33  f88c		       be 83 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1Reg - NIBBLE_VAR_START],y
     34  f88f		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
     35  f892
     36  f892				   .endif_2
      0  f892					      sleep	6
      1  f892				   .CYCLES    SET	6
      2  f892
      3  f892				  -	      IF	.CYCLES < 2
      4  f892				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f892				  -	      ERR
      6  f892					      ENDIF
      7  f892
      8  f892				  -	      IF	.CYCLES & 1
      9  f892				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f892				  -	      nop	0
     11  f892				  -	      ELSE
     12  f892				  -	      bit	VSYNC
     13  f892				  -	      ENDIF
     14  f892				  -.CYCLES    SET	.CYCLES - 3
     15  f892					      ENDIF
     16  f892
     17  f892					      REPEAT	.CYCLES / 2
     18  f892		       ea		      nop
     17  f892					      REPEND
     18  f893		       ea		      nop
     17  f893					      REPEND
     18  f894		       ea		      nop
     19  f895					      REPEND
     38  f895
     39  f895				   .endif_1
     40  f895		       0a		      asl
     41  f896		       90 12		      bcc	.else_3
     42  f898
     43  f898				   .if_3
     44  f898		       a2 79		      ldx	#[ #NOP_REG ]
     45  f89a		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     46  f89d		       a2 11		      ldx	#[ #RESP1 ]
     47  f89f		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  f8a2					      sleep	9
      1  f8a2				   .CYCLES    SET	9
      2  f8a2
      3  f8a2				  -	      IF	.CYCLES < 2
      4  f8a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8a2				  -	      ERR
      6  f8a2					      ENDIF
      7  f8a2
      8  f8a2					      IF	.CYCLES & 1
      9  f8a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8a2		       04 00		      nop	0
     11  f8a4				  -	      ELSE
     12  f8a4				  -	      bit	VSYNC
     13  f8a4					      ENDIF
     14  f8a4				   .CYCLES    SET	.CYCLES - 3
     15  f8a4					      ENDIF
     16  f8a4
     17  f8a4					      REPEAT	.CYCLES / 2
     18  f8a4		       ea		      nop
     17  f8a4					      REPEND
     18  f8a5		       ea		      nop
     17  f8a5					      REPEND
     18  f8a6		       ea		      nop
     19  f8a7					      REPEND
     49  f8a7
     50  f8a7
     51  f8a7		       4c bb f8 	      jmp	.endif_3
     52  f8aa				   .else_3
     53  f8aa		       a2 11		      ldx	#[ #RESP1 ]
     54  f8ac		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     55  f8af		       be 84 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
     56  f8b2		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     57  f8b5		       be 85 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2Reg - NIBBLE_VAR_START],y
     58  f8b8		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     59  f8bb
     60  f8bb				   .endif_3
     61  f8bb		       0a		      asl
     62  f8bc		       90 0d		      bcc	.else_4
     63  f8be
     64  f8be				   .if_4
     65  f8be		       a2 11		      ldx	#[ #RESP1 ]
     66  f8c0		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  f8c3					      sleep	9
      1  f8c3				   .CYCLES    SET	9
      2  f8c3
      3  f8c3				  -	      IF	.CYCLES < 2
      4  f8c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8c3				  -	      ERR
      6  f8c3					      ENDIF
      7  f8c3
      8  f8c3					      IF	.CYCLES & 1
      9  f8c3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8c3		       04 00		      nop	0
     11  f8c5				  -	      ELSE
     12  f8c5				  -	      bit	VSYNC
     13  f8c5					      ENDIF
     14  f8c5				   .CYCLES    SET	.CYCLES - 3
     15  f8c5					      ENDIF
     16  f8c5
     17  f8c5					      REPEAT	.CYCLES / 2
     18  f8c5		       ea		      nop
     17  f8c5					      REPEND
     18  f8c6		       ea		      nop
     17  f8c6					      REPEND
     18  f8c7		       ea		      nop
     19  f8c8					      REPEND
     68  f8c8
     69  f8c8
     70  f8c8		       4c d7 f8 	      jmp	.endif_4
     71  f8cb				   .else_4
     72  f8cb		       be 86 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
     73  f8ce		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     74  f8d1		       be 87 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3Reg - NIBBLE_VAR_START],y
     75  f8d4		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     76  f8d7
     77  f8d7				   .endif_4
      0  f8d7					      NIBBLE_RAM_LOAD	lda, NibbleVar2
      1  f8d7		       ad 81 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar2 - NIBBLE_VAR_START]
      2  f8d7					      endif
      3  f8da
      0  f8da					      NIBBLE_gem_kernel_a_2
      1  f8da		       0a		      asl
      2  f8db		       90 1e		      bcc	.else_1
      3  f8dd
      4  f8dd				   .if_1
      5  f8dd		       a2 85		      ldx	#[ #BC_STA ]
      6  f8df		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  f8e2		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f8e4		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  f8e7		       a2 85		      ldx	#[ #BC_STA ]
     10  f8e9		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  f8ec		       a2 0e		      ldx	#[ #PF1 ]
     12  f8ee		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  f8f1		       a2 08		      ldx	#[ #BC_PHP ]
     14  f8f3		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f8f6					      sleep	3
      1  f8f6				   .CYCLES    SET	3
      2  f8f6
      3  f8f6				  -	      IF	.CYCLES < 2
      4  f8f6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8f6				  -	      ERR
      6  f8f6					      ENDIF
      7  f8f6
      8  f8f6					      IF	.CYCLES & 1
      9  f8f6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8f6		       04 00		      nop	0
     11  f8f8				  -	      ELSE
     12  f8f8				  -	      bit	VSYNC
     13  f8f8					      ENDIF
     14  f8f8				   .CYCLES    SET	.CYCLES - 3
     15  f8f8					      ENDIF
     16  f8f8
     17  f8f8				  -	      REPEAT	.CYCLES / 2
     18  f8f8				  -	      nop
     19  f8f8					      REPEND
     16  f8f8
     17  f8f8
     18  f8f8		       4c 16 f9 	      jmp	.endif_1
     19  f8fb				   .else_1
     20  f8fb		       a2 08		      ldx	#[ #BC_PHP ]
     21  f8fd		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  f900		       a2 85		      ldx	#[ #BC_STA ]
     23  f902		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  f905		       a2 0e		      ldx	#[ #PF1 ]
     25  f907		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  f90a		       be 88 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini4 - NIBBLE_VAR_START],y
     27  f90d		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  f910		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  f912		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f915					      sleep	2
      1  f915				   .CYCLES    SET	2
      2  f915
      3  f915				  -	      IF	.CYCLES < 2
      4  f915				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f915				  -	      ERR
      6  f915					      ENDIF
      7  f915
      8  f915				  -	      IF	.CYCLES & 1
      9  f915				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f915				  -	      nop	0
     11  f915				  -	      ELSE
     12  f915				  -	      bit	VSYNC
     13  f915				  -	      ENDIF
     14  f915				  -.CYCLES    SET	.CYCLES - 3
     15  f915					      ENDIF
     16  f915
     17  f915					      REPEAT	.CYCLES / 2
     18  f915		       ea		      nop
     19  f916					      REPEND
     31  f916
     32  f916				   .endif_1
     33  f916		       be 89 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleMissile - NIBBLE_VAR_START],y
     34  f919		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  f91c		       be 8a f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleVdel1 - NIBBLE_VAR_START],y
     36  f91f		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  f922		       be 8b f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGrp0 - NIBBLE_VAR_START],y
     38  f925		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
    570  f928		       4c cc f9 	      jmp	.next
    571  f92b				   .kernel_b
      0  f92b					      NIBBLE_RAM_LOAD	lda, NibbleVar1
      1  f92b		       ad 80 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar1 - NIBBLE_VAR_START]
      2  f92b					      endif
      3  f92e
      0  f92e					      NIBBLE_gem_kernel_b_1
      1  f92e		       0a		      asl
      2  f92f		       90 2a		      bcc	.else_1
      3  f931
      4  f931				   .if_1
      5  f931		       a2 84		      ldx	#[ #BC_STY ]
      6  f933		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
      7  f936		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f938		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
      9  f93b		       a2 08		      ldx	#[ #BC_PHP ]
     10  f93d		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     11  f940		       a2 85		      ldx	#[ #BC_STA ]
     12  f942		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     13  f945		       a2 0e		      ldx	#[ #PF1 ]
     14  f947		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     15  f94a		       be 86 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
     16  f94d		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     17  f950		       a2 1c		      ldx	#[ #EMERALD_SP ]
     18  f952		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     19  f955		       2a		      rol
      0  f956					      sleep	3
      1  f956				   .CYCLES    SET	3
      2  f956
      3  f956				  -	      IF	.CYCLES < 2
      4  f956				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f956				  -	      ERR
      6  f956					      ENDIF
      7  f956
      8  f956					      IF	.CYCLES & 1
      9  f956					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f956		       04 00		      nop	0
     11  f958				  -	      ELSE
     12  f958				  -	      bit	VSYNC
     13  f958					      ENDIF
     14  f958				   .CYCLES    SET	.CYCLES - 3
     15  f958					      ENDIF
     16  f958
     17  f958				  -	      REPEAT	.CYCLES / 2
     18  f958				  -	      nop
     19  f958					      REPEND
     21  f958
     22  f958
     23  f958		       4c a4 f9 	      jmp	.endif_1
     24  f95b				   .else_1
     25  f95b		       0a		      asl
     26  f95c		       90 27		      bcc	.else_2
     27  f95e
     28  f95e				   .if_2
     29  f95e		       a2 84		      ldx	#[ #BC_STY ]
     30  f960		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     31  f963		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
     32  f965		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
     33  f968		       be 84 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
     34  f96b		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     35  f96e		       a2 1c		      ldx	#[ #EMERALD_SP ]
     36  f970		       8e 20 f0 	      stx	[[KernelB_F_W + 2] + 0]
     37  f973		       a2 85		      ldx	#[ #BC_STA ]
     38  f975		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     39  f978		       a2 0e		      ldx	#[ #PF1 ]
     40  f97a		       8e 22 f0 	      stx	[[KernelB_G_W + 2] + 0]
     41  f97d		       a2 08		      ldx	#[ #BC_PHP ]
     42  f97f		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     43  f982
     44  f982
     45  f982		       4c a4 f9 	      jmp	.endif_2
     46  f985				   .else_2
     47  f985		       be 84 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
     48  f988		       8e 1e f0 	      stx	[[KernelB_F_W + 0] + 0]
     49  f98b		       a2 1c		      ldx	#[ #EMERALD_SP ]
     50  f98d		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     51  f990		       be 86 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
     52  f993		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     53  f996		       a2 1c		      ldx	#[ #EMERALD_SP ]
     54  f998		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
      0  f99b					      sleep	17
      1  f99b				   .CYCLES    SET	17
      2  f99b
      3  f99b				  -	      IF	.CYCLES < 2
      4  f99b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f99b				  -	      ERR
      6  f99b					      ENDIF
      7  f99b
      8  f99b					      IF	.CYCLES & 1
      9  f99b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f99b		       04 00		      nop	0
     11  f99d				  -	      ELSE
     12  f99d				  -	      bit	VSYNC
     13  f99d					      ENDIF
     14  f99d				   .CYCLES    SET	.CYCLES - 3
     15  f99d					      ENDIF
     16  f99d
     17  f99d					      REPEAT	.CYCLES / 2
     18  f99d		       ea		      nop
     17  f99d					      REPEND
     18  f99e		       ea		      nop
     17  f99e					      REPEND
     18  f99f		       ea		      nop
     17  f99f					      REPEND
     18  f9a0		       ea		      nop
     17  f9a0					      REPEND
     18  f9a1		       ea		      nop
     17  f9a1					      REPEND
     18  f9a2		       ea		      nop
     17  f9a2					      REPEND
     18  f9a3		       ea		      nop
     19  f9a4					      REPEND
     56  f9a4
     57  f9a4				   .endif_2
     58  f9a4
     59  f9a4				   .endif_1
      0  f9a4					      NIBBLE_RAM_LOAD	lda, NibbleVar2
      1  f9a4		       ad 81 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar2 - NIBBLE_VAR_START]
      2  f9a4					      endif
      3  f9a7
      0  f9a7					      NIBBLE_gem_kernel_b_2
      1  f9a7		       be 82 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1 - NIBBLE_VAR_START],y
      2  f9aa		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f9ad		       0a		      asl
      4  f9ae		       90 09		      bcc	.else_1
      5  f9b0
      6  f9b0				   .if_1
      7  f9b0		       a2 e0		      ldx	#[ #RamFFByte ]
      8  f9b2		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f9b5					      sleep	2
      1  f9b5				   .CYCLES    SET	2
      2  f9b5
      3  f9b5				  -	      IF	.CYCLES < 2
      4  f9b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f9b5				  -	      ERR
      6  f9b5					      ENDIF
      7  f9b5
      8  f9b5				  -	      IF	.CYCLES & 1
      9  f9b5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f9b5				  -	      nop	0
     11  f9b5				  -	      ELSE
     12  f9b5				  -	      bit	VSYNC
     13  f9b5				  -	      ENDIF
     14  f9b5				  -.CYCLES    SET	.CYCLES - 3
     15  f9b5					      ENDIF
     16  f9b5
     17  f9b5					      REPEAT	.CYCLES / 2
     18  f9b5		       ea		      nop
     19  f9b6					      REPEND
     10  f9b6
     11  f9b6
     12  f9b6		       4c c0 f9 	      jmp	.endif_1
     13  f9b9				   .else_1
     14  f9b9		       a2 e2		      ldx	#[ #RamPF1Value ]
     15  f9bb		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f9be					      sleep	3
      1  f9be				   .CYCLES    SET	3
      2  f9be
      3  f9be				  -	      IF	.CYCLES < 2
      4  f9be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f9be				  -	      ERR
      6  f9be					      ENDIF
      7  f9be
      8  f9be					      IF	.CYCLES & 1
      9  f9be					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f9be		       04 00		      nop	0
     11  f9c0				  -	      ELSE
     12  f9c0				  -	      bit	VSYNC
     13  f9c0					      ENDIF
     14  f9c0				   .CYCLES    SET	.CYCLES - 3
     15  f9c0					      ENDIF
     16  f9c0
     17  f9c0				  -	      REPEAT	.CYCLES / 2
     18  f9c0				  -	      nop
     19  f9c0					      REPEND
     17  f9c0
     18  f9c0				   .endif_1
     19  f9c0		       be 88 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini4 - NIBBLE_VAR_START],y
     20  f9c3		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     21  f9c6		       be 8b f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGrp0 - NIBBLE_VAR_START],y
     22  f9c9		       8e 07 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
    576  f9cc				   .next
    577  f9cc		       60		      rts
    578  f9cd
    579  f9cd
    580  f9cd							; Populate Gemini array from level_for_game
    581  f9cd
    582  f9cd					      mac	gemini_populate
    583  f9cd				   .TARGET    SET	{1}
    584  f9cd					      ldx	#%00000011
    585  f9cd					      .byte	$cb, $00	; axs #0 : x = a&x - #0
    586  f9cd					      ldy	GEMINI_LOOKUP,x
    587  f9cd					      sty	.TARGET
    588  f9cd					      endm
    589  f9cd
    590  f9cd					      mac	gemini_populate_missile
    591  f9cd				   .TARGET    SET	{1}
    592  f9cd					      ldx	#%00000001
    593  f9cd					      sax	.TARGET
    594  f9cd					      endm
    595  f9cd
    596  fa00		       00 00 00 00*	      align	256
    597  fa00
    598  fa00				   GeminiPopulate subroutine
    599  fa00		       a5 e7		      lda	level_for_game + 3
      0  fa02					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa02				   .TARGET    SET	DO_GEMS_B + 5
      2  fa02		       a2 03		      ldx	#%00000011
      3  fa04		       cb 00		      .byte.b	$cb, $00
      4  fa06		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa09		       84 f5		      sty	.TARGET
    601  fa0b		       6a		      ror
    602  fa0c		       6a		      ror
      0  fa0d					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa0d				   .TARGET    SET	DO_GEMS_A + 5
      2  fa0d		       a2 03		      ldx	#%00000011
      3  fa0f		       cb 00		      .byte.b	$cb, $00
      4  fa11		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa14		       84 ef		      sty	.TARGET
    604  fa16		       6a		      ror
    605  fa17		       6a		      ror
      0  fa18					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa18				   .TARGET    SET	DO_GEMS_B + 4
      2  fa18		       a2 03		      ldx	#%00000011
      3  fa1a		       cb 00		      .byte.b	$cb, $00
      4  fa1c		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa1f		       84 f4		      sty	.TARGET
    607  fa21		       6a		      ror
    608  fa22		       6a		      ror
      0  fa23					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa23				   .TARGET    SET	DO_GEMS_A + 4
      2  fa23		       a2 03		      ldx	#%00000011
      3  fa25		       cb 00		      .byte.b	$cb, $00
      4  fa27		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa2a		       84 ee		      sty	.TARGET
    610  fa2c							; ror
    611  fa2c							; ror
    612  fa2c
    613  fa2c		       a5 e6		      lda	level_for_game + 2
      0  fa2e					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa2e				   .TARGET    SET	DO_MISS_B
      2  fa2e		       a2 01		      ldx	#%00000001
      3  fa30		       87 e9		      sax	.TARGET
    615  fa32		       6a		      ror
      0  fa33					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa33				   .TARGET    SET	DO_GEMS_B + 3
      2  fa33		       a2 03		      ldx	#%00000011
      3  fa35		       cb 00		      .byte.b	$cb, $00
      4  fa37		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa3a		       84 f3		      sty	.TARGET
    617  fa3c		       6a		      ror
    618  fa3d		       6a		      ror
      0  fa3e					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa3e				   .TARGET    SET	DO_GEMS_A + 3
      2  fa3e		       a2 03		      ldx	#%00000011
      3  fa40		       cb 00		      .byte.b	$cb, $00
      4  fa42		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa45		       84 ed		      sty	.TARGET
    620  fa47		       6a		      ror
    621  fa48		       6a		      ror
      0  fa49					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa49				   .TARGET    SET	DO_GEMS_B + 2
      2  fa49		       a2 03		      ldx	#%00000011
      3  fa4b		       cb 00		      .byte.b	$cb, $00
      4  fa4d		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa50		       84 f2		      sty	.TARGET
    623  fa52		       6a		      ror
    624  fa53		       6a		      ror
    625  fa54
    626  fa54							; Join last bit and first bit
    627  fa54		       6a		      ror
    628  fa55		       a5 e5		      lda	level_for_game + 1
    629  fa57		       2a		      rol
      0  fa58					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa58				   .TARGET    SET	DO_GEMS_A + 2
      2  fa58		       a2 03		      ldx	#%00000011
      3  fa5a		       cb 00		      .byte.b	$cb, $00
      4  fa5c		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa5f		       84 ec		      sty	.TARGET
    631  fa61
    632  fa61		       a5 e5		      lda	level_for_game + 1
    633  fa63		       6a		      ror
      0  fa64					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa64				   .TARGET    SET	DO_MISS_A
      2  fa64		       a2 01		      ldx	#%00000001
      3  fa66		       87 e8		      sax	.TARGET
    635  fa68		       6a		      ror
      0  fa69					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa69				   .TARGET    SET	DO_GEMS_B + 1
      2  fa69		       a2 03		      ldx	#%00000011
      3  fa6b		       cb 00		      .byte.b	$cb, $00
      4  fa6d		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa70		       84 f1		      sty	.TARGET
    637  fa72		       6a		      ror
    638  fa73		       6a		      ror
      0  fa74					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  fa74				   .TARGET    SET	DO_GEMS_A + 1
      2  fa74		       a2 03		      ldx	#%00000011
      3  fa76		       cb 00		      .byte.b	$cb, $00
      4  fa78		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa7b		       84 eb		      sty	.TARGET
    640  fa7d		       6a		      ror
    641  fa7e		       6a		      ror
      0  fa7f					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  fa7f				   .TARGET    SET	DO_GEMS_B + 0
      2  fa7f		       a2 03		      ldx	#%00000011
      3  fa81		       cb 00		      .byte.b	$cb, $00
      4  fa83		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa86		       84 f0		      sty	.TARGET
    643  fa88							; ror
    644  fa88							; ror
    645  fa88
    646  fa88		       a5 e4		      lda	level_for_game + 0
      0  fa8a					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fa8a				   .TARGET    SET	DO_GEMS_A + 0
      2  fa8a		       a2 03		      ldx	#%00000011
      3  fa8c		       cb 00		      .byte.b	$cb, $00
      4  fa8e		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa91		       84 ea		      sty	.TARGET
    648  fa93							; ror
    649  fa93							; ror
    650  fa93
    651  fa93		       60		      rts
    652  fa94				   gemini_populate_end
    653  fa94
    654  fa94							; FIXME this should be deleted
    655  fa94				   GeminiPopulateFull subroutine
    656  fa94		       a9 ff		      lda	#%11111111
      0  fa96					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa96				   .TARGET    SET	DO_GEMS_B + 5
      2  fa96		       a2 03		      ldx	#%00000011
      3  fa98		       cb 00		      .byte.b	$cb, $00
      4  fa9a		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fa9d		       84 f5		      sty	.TARGET
    658  fa9f		       6a		      ror
    659  faa0		       6a		      ror
      0  faa1					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  faa1				   .TARGET    SET	DO_GEMS_A + 5
      2  faa1		       a2 03		      ldx	#%00000011
      3  faa3		       cb 00		      .byte.b	$cb, $00
      4  faa5		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  faa8		       84 ef		      sty	.TARGET
    661  faaa		       6a		      ror
    662  faab		       6a		      ror
      0  faac					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  faac				   .TARGET    SET	DO_GEMS_B + 4
      2  faac		       a2 03		      ldx	#%00000011
      3  faae		       cb 00		      .byte.b	$cb, $00
      4  fab0		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fab3		       84 f4		      sty	.TARGET
    664  fab5		       6a		      ror
    665  fab6		       6a		      ror
      0  fab7					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fab7				   .TARGET    SET	DO_GEMS_A + 4
      2  fab7		       a2 03		      ldx	#%00000011
      3  fab9		       cb 00		      .byte.b	$cb, $00
      4  fabb		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fabe		       84 ee		      sty	.TARGET
    667  fac0							; ror
    668  fac0							; ror
    669  fac0
    670  fac0		       a9 ff		      lda	#%11111111
      0  fac2					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fac2				   .TARGET    SET	DO_MISS_B
      2  fac2		       a2 01		      ldx	#%00000001
      3  fac4		       87 e9		      sax	.TARGET
    672  fac6		       6a		      ror
      0  fac7					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fac7				   .TARGET    SET	DO_GEMS_B + 3
      2  fac7		       a2 03		      ldx	#%00000011
      3  fac9		       cb 00		      .byte.b	$cb, $00
      4  facb		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  face		       84 f3		      sty	.TARGET
    674  fad0		       6a		      ror
    675  fad1		       6a		      ror
      0  fad2					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fad2				   .TARGET    SET	DO_GEMS_A + 3
      2  fad2		       a2 03		      ldx	#%00000011
      3  fad4		       cb 00		      .byte.b	$cb, $00
      4  fad6		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fad9		       84 ed		      sty	.TARGET
    677  fadb		       6a		      ror
    678  fadc		       6a		      ror
      0  fadd					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fadd				   .TARGET    SET	DO_GEMS_B + 2
      2  fadd		       a2 03		      ldx	#%00000011
      3  fadf		       cb 00		      .byte.b	$cb, $00
      4  fae1		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fae4		       84 f2		      sty	.TARGET
    680  fae6		       6a		      ror
    681  fae7		       6a		      ror
    682  fae8
    683  fae8							; Join last bit and first bit
    684  fae8		       6a		      ror
    685  fae9		       a9 ff		      lda	#%11111111
    686  faeb		       2a		      rol
      0  faec					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  faec				   .TARGET    SET	DO_GEMS_A + 2
      2  faec		       a2 03		      ldx	#%00000011
      3  faee		       cb 00		      .byte.b	$cb, $00
      4  faf0		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  faf3		       84 ec		      sty	.TARGET
    688  faf5
    689  faf5		       a9 ff		      lda	#%11111111
    690  faf7		       6a		      ror
      0  faf8					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  faf8				   .TARGET    SET	DO_MISS_A
      2  faf8		       a2 01		      ldx	#%00000001
      3  fafa		       87 e8		      sax	.TARGET
    692  fafc		       6a		      ror
      0  fafd					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fafd				   .TARGET    SET	DO_GEMS_B + 1
      2  fafd		       a2 03		      ldx	#%00000011
      3  faff		       cb 00		      .byte.b	$cb, $00
      4  fb01		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fb04		       84 f1		      sty	.TARGET
    694  fb06		       6a		      ror
    695  fb07		       6a		      ror
      0  fb08					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  fb08				   .TARGET    SET	DO_GEMS_A + 1
      2  fb08		       a2 03		      ldx	#%00000011
      3  fb0a		       cb 00		      .byte.b	$cb, $00
      4  fb0c		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fb0f		       84 eb		      sty	.TARGET
    697  fb11		       6a		      ror
    698  fb12		       6a		      ror
      0  fb13					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  fb13				   .TARGET    SET	DO_GEMS_B + 0
      2  fb13		       a2 03		      ldx	#%00000011
      3  fb15		       cb 00		      .byte.b	$cb, $00
      4  fb17		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fb1a		       84 f0		      sty	.TARGET
    700  fb1c							; ror
    701  fb1c							; ror
    702  fb1c
    703  fb1c		       a9 ff		      lda	#%11111111
      0  fb1e					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fb1e				   .TARGET    SET	DO_GEMS_A + 0
      2  fb1e		       a2 03		      ldx	#%00000011
      3  fb20		       cb 00		      .byte.b	$cb, $00
      4  fb22		       bc 30 fb 	      ldy	GEMINI_LOOKUP,x
      5  fb25		       84 ea		      sty	.TARGET
    705  fb27							; ror
    706  fb27							; ror
    707  fb27
    708  fb27		       60		      rts
    709  fb28
    710  fb28
    711  fb30		       00 00 00 00*	      align	16
    712  fb30
    713  fb30				   GEMINI_LOOKUP
    714  fb30		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    715  fb34
    716  fb34				   SHARD_LUT_RF1
    717  fb34		       00		      .byte.b	#0
    718  fb35				   SHARD_LUT_VD1
    719  fb35		       00		      .byte.b	#0
    720  fb36
------- FILE main.s
------- FILE game_state.s LEVEL 2 PASS 2
      0  fb36					      include	"game_state.s"
      1  fb36							; Perform a left rotation on the 32 bit number at
      2  fb36							; location VLA and store the result at location
      3  fb36							; RES. If VLA and RES are the same then the
      4  fb36							; operation is applied directly to the memory,
      5  fb36							; otherwise it is done in the accumulator.
      6  fb36							;
      7  fb36							; On exit: A = ??, X & Y are unchanged.
      8  fb36
      9  fb36							;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     10  fb36					      mac	_ror32
     11  fb36				   VLA	      EQU	{1}
     12  fb36				   RES	      EQU	{2}
     13  fb36					      IF	VLA != RES
     14  fb36					      LDA	VLA+0
     15  fb36					      ROR	A
     16  fb36					      STA	RES+0
     17  fb36					      LDA	VLA+1
     18  fb36					      ROR	A
     19  fb36					      STA	RES+1
     20  fb36					      LDA	VLA+2
     21  fb36					      ROR	A
     22  fb36					      STA	RES+2
     23  fb36					      LDA	VLA+3
     24  fb36					      ROR	A
     25  fb36					      STA	RES+3
     26  fb36					      ELSE
     27  fb36					      ROR	VLA+0
     28  fb36					      ROR	VLA+1
     29  fb36					      ROR	VLA+2
     30  fb36					      ROR	VLA+3
     31  fb36					      ENDIF
     32  fb36					      ENDM
     33  fb36							; Add two 32 bit numbers together and store the
     34  fb36							; result in another memory location. RES may be
     35  fb36							; the same as either VLA or VLB.
     36  fb36							;
     37  fb36							; On exit: A = ??, X & Y are unchanged.
     38  fb36
     39  fb36				   game_state_adder
     40  fb36		       00		      .byte.b	#$0
     41  fb37		       00		      .byte.b	#$0
     42  fb38		       00		      .byte.b	#$0
     43  fb39		       10		      .byte.b	#%10000
     44  fb3a
     45  fb3a					      mac	_add32
     46  fb3a				   .VLA       EQU	{1}
     47  fb3a				   .VLB       EQU	{2}
     48  fb3a				   .RES       EQU	{3}
     49  fb3a					      CLC
     50  fb3a					      LDA	.VLA+3
     51  fb3a					      ADC	.VLB+3
     52  fb3a					      STA	.RES+3
     53  fb3a					      LDA	.VLA+2
     54  fb3a					      ADC	.VLB+2
     55  fb3a					      STA	.RES+2
     56  fb3a					      LDA	.VLA+1
     57  fb3a					      ADC	.VLB+1
     58  fb3a					      STA	.RES+1
     59  fb3a					      LDA	.VLA+0
     60  fb3a					      ADC	.VLB+0
     61  fb3a					      STA	.RES+0
     62  fb3a					      ENDM
     63  fb3a
     64  fb3a				   game_state_setup
     65  fb3a							; Set up the level
     66  fb3a		       a9 fb		      lda	#%11111011
     67  fb3c		       85 e4		      sta	[level_for_game + 0]
     68  fb3e		       a9 ff		      lda	#%11111111
     69  fb40		       85 e5		      sta	[level_for_game + 1]
     70  fb42		       a9 ff		      lda	#%11111111
     71  fb44		       85 e6		      sta	[level_for_game + 2]
     72  fb46		       a9 ff		      lda	#%11111111
     73  fb48		       85 e7		      sta	[level_for_game + 3]
     74  fb4a		       60		      rts
     75  fb4b
     76  fb50		       00 00 00 00*	      align	16
     77  fb50				   game_state_mask
     78  fb50		       7f		      .byte.b	#%01111111
     79  fb51		       bf		      .byte.b	#%10111111
     80  fb52		       df		      .byte.b	#%11011111
     81  fb53		       ef		      .byte.b	#%11101111
     82  fb54		       f7		      .byte.b	#%11110111
     83  fb55		       fb		      .byte.b	#%11111011
     84  fb56		       fd		      .byte.b	#%11111101
     85  fb57		       fe		      .byte.b	#%11111110
     86  fb58
     87  fb58				   game_state_tick subroutine
     88  fb58							; jsr game_state_setup
     89  fb58
     90  fb58							; Get index [0, 25]
     91  fb58		       18		      clc
     92  fb59		       a5 d7		      lda	XPos
     93  fb5b		       e9 02		      sbc	#2
     94  fb5d		       4a		      lsr
     95  fb5e		       4a		      lsr
     96  fb5f		       85 d2		      sta	Temp
     97  fb61
     98  fb61							; Load bit offset
     99  fb61		       29 07		      and	#%111
    100  fb63		       a8		      tay
    101  fb64		       b9 50 fb 	      lda	game_state_mask,y
    102  fb67		       85 d3		      sta	Temp2
    103  fb69
    104  fb69							; Load sprite offset
    105  fb69		       a5 d2		      lda	Temp
    106  fb6b		       4a		      lsr
    107  fb6c		       4a		      lsr
    108  fb6d		       4a		      lsr
    109  fb6e		       a8		      tay
    110  fb6f		       a5 d3		      lda	Temp2
    111  fb71		       39 e4 00 	      and	level_for_game,y
    112  fb74		       99 e4 00 	      sta	level_for_game,y
    113  fb77		       60		      rts
    114  fb78
    115  fb78				   game_state_tick_1 subroutine
      0  fb78					      _ADD32	level_for_game, game_state_adder, level_for_game
      1  fb78		       00 e4	   .VLA       EQU	level_for_game
      2  fb78		       fb 36	   .VLB       EQU	game_state_adder
      3  fb78		       00 e4	   .RES       EQU	level_for_game
      4  fb78		       18		      CLC
      5  fb79		       a5 e7		      LDA	.VLA+3
      6  fb7b		       6d 39 fb 	      ADC	.VLB+3
      7  fb7e		       85 e7		      STA	.RES+3
      8  fb80		       a5 e6		      LDA	.VLA+2
      9  fb82		       6d 38 fb 	      ADC	.VLB+2
     10  fb85		       85 e6		      STA	.RES+2
     11  fb87		       a5 e5		      LDA	.VLA+1
     12  fb89		       6d 37 fb 	      ADC	.VLB+1
     13  fb8c		       85 e5		      STA	.RES+1
     14  fb8e		       a5 e4		      LDA	.VLA+0
     15  fb90		       6d 36 fb 	      ADC	.VLB+0
     16  fb93		       85 e4		      STA	.RES+0
    117  fb95		       60		      rts
    118  fb96
    119  fb96							; game_state_tick:
    120  fb96							;     lda FrameCount
    121  fb96							;     and #%111
    122  fb96							;     bne .skiprotate
    123  fb96							;     lda level_for_game + 3
    124  fb96							;     ror
    125  fb96							; .rollall:
    126  fb96							;     _ROR32 level_for_game, level_for_game
    127  fb96
    128  fb96							;     lda #%11101111
    129  fb96							;     cmp [level_for_game + 3]
    130  fb96							;     bne .skiprotate
    131  fb96							;     jmp game_state_setup
    132  fb96							; .skiprotate:
    133  fb96							;     rts
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb96					      include	"kernel_border.s"
      1  fb96							; Visible Kernel
      2  fb96
      3  fb96				   KernelBorder subroutine
      4  fb96		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb98
      6  fb98							; First HMOVE
      7  fb98		       85 2a		      sta	HMOVE
      8  fb9a
      9  fb9a							; Border top
     10  fb9a		       a9 00		      lda	#0
     11  fb9c		       85 08		      sta	COLUPF
     12  fb9e		       85 0e		      sta	PF1
     13  fba0		       85 0f		      sta	PF2
     14  fba2		       a9 02		      lda	#SIGNAL_LINE
     15  fba4		       85 09		      sta	COLUBK
     16  fba6
     17  fba6					      REPEAT	6
     18  fba6		       85 02		      sta	WSYNC
     17  fba6					      REPEND
     18  fba8		       85 02		      sta	WSYNC
     17  fba8					      REPEND
     18  fbaa		       85 02		      sta	WSYNC
     17  fbaa					      REPEND
     18  fbac		       85 02		      sta	WSYNC
     17  fbac					      REPEND
     18  fbae		       85 02		      sta	WSYNC
     17  fbae					      REPEND
     18  fbb0		       85 02		      sta	WSYNC
     19  fbb2					      REPEND
     20  fbb2
     21  fbb2		       a9 00		      lda	#0
     22  fbb4		       85 09		      sta	COLUBK
     23  fbb6		       85 02		      sta	WSYNC
     24  fbb8
     25  fbb8							; Start top border
     26  fbb8				   border_top
     27  fbb8							; Make the playfield solid.
     28  fbb8		       a9 3f		      lda	#%00111111
     29  fbba		       85 0e		      sta	PF1
     30  fbbc		       a9 ff		      lda	#%11111111
     31  fbbe		       85 0f		      sta	PF2
     32  fbc0
     33  fbc0		       a9 42		      lda	#COL_BG
     34  fbc2		       a0 00		      ldy	#0
     35  fbc4
     36  fbc4							; X_XXXX_XX
     37  fbc4							; Commented lines removed to save on space.
     38  fbc4		       85 08		      sta	COLUPF
     39  fbc6		       85 02		      sta	WSYNC
     40  fbc8		       84 08		      sty	COLUPF
     41  fbca		       85 02		      sta	WSYNC
     42  fbcc		       85 08		      sta	COLUPF
     43  fbce		       85 02		      sta	WSYNC
     44  fbd0							; sta COLUPF
     45  fbd0		       85 02		      sta	WSYNC
     46  fbd2							; sta COLUPF
     47  fbd2		       85 02		      sta	WSYNC
     48  fbd4		       84 08		      sty	COLUPF
     49  fbd6		       85 02		      sta	WSYNC
     50  fbd8		       85 08		      sta	COLUPF
     51  fbda
     52  fbda		       85 02		      sta	WSYNC
     53  fbdc							; sta COLUPF
     54  fbdc
     55  fbdc				   PlayArea
     56  fbdc							; PF is now the playing area
      0  fbdc					      ASSERT_RUNTIME	"_scycles == #0"
      1  fbdc				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fbdc  && !(  _scycles == #0  ) }
      2  fbdc					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fbdc					      sleep	61
      1  fbdc				   .CYCLES    SET	61
      2  fbdc
      3  fbdc				  -	      IF	.CYCLES < 2
      4  fbdc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fbdc				  -	      ERR
      6  fbdc					      ENDIF
      7  fbdc
      8  fbdc					      IF	.CYCLES & 1
      9  fbdc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fbdc		       04 00		      nop	0
     11  fbde				  -	      ELSE
     12  fbde				  -	      bit	VSYNC
     13  fbde					      ENDIF
     14  fbde				   .CYCLES    SET	.CYCLES - 3
     15  fbde					      ENDIF
     16  fbde
     17  fbde					      REPEAT	.CYCLES / 2
     18  fbde		       ea		      nop
     17  fbde					      REPEND
     18  fbdf		       ea		      nop
     17  fbdf					      REPEND
     18  fbe0		       ea		      nop
     17  fbe0					      REPEND
     18  fbe1		       ea		      nop
     17  fbe1					      REPEND
     18  fbe2		       ea		      nop
     17  fbe2					      REPEND
     18  fbe3		       ea		      nop
     17  fbe3					      REPEND
     18  fbe4		       ea		      nop
     17  fbe4					      REPEND
     18  fbe5		       ea		      nop
     17  fbe5					      REPEND
     18  fbe6		       ea		      nop
     17  fbe6					      REPEND
     18  fbe7		       ea		      nop
     17  fbe7					      REPEND
     18  fbe8		       ea		      nop
     17  fbe8					      REPEND
     18  fbe9		       ea		      nop
     17  fbe9					      REPEND
     18  fbea		       ea		      nop
     17  fbea					      REPEND
     18  fbeb		       ea		      nop
     17  fbeb					      REPEND
     18  fbec		       ea		      nop
     17  fbec					      REPEND
     18  fbed		       ea		      nop
     17  fbed					      REPEND
     18  fbee		       ea		      nop
     17  fbee					      REPEND
     18  fbef		       ea		      nop
     17  fbef					      REPEND
     18  fbf0		       ea		      nop
     17  fbf0					      REPEND
     18  fbf1		       ea		      nop
     17  fbf1					      REPEND
     18  fbf2		       ea		      nop
     17  fbf2					      REPEND
     18  fbf3		       ea		      nop
     17  fbf3					      REPEND
     18  fbf4		       ea		      nop
     17  fbf4					      REPEND
     18  fbf5		       ea		      nop
     17  fbf5					      REPEND
     18  fbf6		       ea		      nop
     17  fbf6					      REPEND
     18  fbf7		       ea		      nop
     17  fbf7					      REPEND
     18  fbf8		       ea		      nop
     17  fbf8					      REPEND
     18  fbf9		       ea		      nop
     17  fbf9					      REPEND
     18  fbfa		       ea		      nop
     19  fbfb					      REPEND
     59  fbfb		       a9 00		      lda	#%00000000
     60  fbfd		       85 0d		      sta	PF0
     61  fbff		       a9 20		      lda	#%00100000
     62  fc01		       85 0e		      sta	PF1
     63  fc03		       a9 00		      lda	#%00000000
     64  fc05		       85 0f		      sta	PF2
      0  fc07					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc07				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc07  && !(  _scycles == #0  ) }
      2  fc07					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fc07					      sleep	7
      1  fc07				   .CYCLES    SET	7
      2  fc07
      3  fc07				  -	      IF	.CYCLES < 2
      4  fc07				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc07				  -	      ERR
      6  fc07					      ENDIF
      7  fc07
      8  fc07					      IF	.CYCLES & 1
      9  fc07					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc07		       04 00		      nop	0
     11  fc09				  -	      ELSE
     12  fc09				  -	      bit	VSYNC
     13  fc09					      ENDIF
     14  fc09				   .CYCLES    SET	.CYCLES - 3
     15  fc09					      ENDIF
     16  fc09
     17  fc09					      REPEAT	.CYCLES / 2
     18  fc09		       ea		      nop
     17  fc09					      REPEND
     18  fc0a		       ea		      nop
     19  fc0b					      REPEND
     67  fc0b		       4c 3d fc 	      jmp	row_start
     68  fc0e							; enter row on cycle 10.
     69  fc0e
     70  fc0e							; reset the background for bottom of playfield
     71  fc0e				   border_bottom
     72  fc0e							;sta WSYNC
     73  fc0e
     74  fc0e							; Form the bottom of the level frame.
     75  fc0e		       a9 3f		      lda	#%00111111
     76  fc10		       85 0e		      sta	PF1
     77  fc12		       a9 ff		      lda	#%11111111
     78  fc14		       85 0f		      sta	PF2
     79  fc16
     80  fc16							; Clear all sprites.
     81  fc16		       a9 00		      lda	#0
     82  fc18		       85 1c		      sta	EMERALD_SP
     83  fc1a		       85 1b		      sta	JET_SP
     84  fc1c		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fc1e
     86  fc1e		       a9 42		      lda	#COL_BG
     87  fc20		       a0 00		      ldy	#0
     88  fc22		       85 02		      sta	WSYNC
     89  fc24
     90  fc24		       84 08		      sty	COLUPF
     91  fc26		       85 02		      sta	WSYNC
     92  fc28
     93  fc28		       85 08		      sta	COLUPF
     94  fc2a		       85 02		      sta	WSYNC
     95  fc2c
     96  fc2c		       85 02		      sta	WSYNC
     97  fc2e
     98  fc2e		       85 02		      sta	WSYNC
     99  fc30
    100  fc30		       84 08		      sty	COLUPF
    101  fc32		       85 02		      sta	WSYNC
    102  fc34
    103  fc34		       85 08		      sta	COLUPF
    104  fc36		       85 02		      sta	WSYNC
    105  fc38		       85 02		      sta	WSYNC
    106  fc3a		       4c 4e f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fc3d					      include	"kernel_row.s"
      1  fc3d							; Frame Start
      2  fc3d
      3  fc3d							; Macros for calculating sprite values (GRPx).
      4  fc3d
      5  fc3d							; mac jet_spritedata_calc
      6  fc3d							;
      7  fc3d							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fc3d							; GRP0.
      9  fc3d					      mac	jet_spritedata_calc
     10  fc3d					      dec	RamRowJetpackIndex
     11  fc3d					      ldy	RamRowJetpackIndex
     12  fc3d					      ldx	Frame0,Y
     13  fc3d					      stx	JET_SP
     14  fc3d					      endm
     15  fc3d
     16  fc3d				   row_start
     17  fc3d
     18  fc3d							; [scanline 1]
     19  fc3d				   row_1
     20  fc3d							; Enter after scanline starts on row "9" and wraps
      0  fc3d					      ASSERT_RUNTIME	"_scycles == #10"
      1  fc3d				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fc3d  && !(  _scycles == #10  ) }
      2  fc3d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fc3d
     23  fc3d							; Load sprite details
     24  fc3d		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fc3f		       c5 d6		      cmp	SpriteEnd	; 5c
     26  fc41		       a9 00		      lda	#0	; 2c
     27  fc43							; constant 6c: if carry set, load SpriteEnd into y
     28  fc43		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fc45		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fc46		       a5 d6		      lda	SpriteEnd
     31  fc48		       69 08		      adc	#8
     32  fc4a		       85 e3		      sta	RamRowJetpackIndex
     33  fc4c
     34  fc4c							; Load sprite
     35  fc4c		       c6 e3		      dec	RamRowJetpackIndex
     36  fc4e		       a4 e3		      ldy	RamRowJetpackIndex
     37  fc50		       be 00 ff 	      ldx	Frame0,Y
     38  fc53		       86 1b		      stx	JET_SP
     39  fc55
     40  fc55							; TODO assert cycle is not in visible range!
     41  fc55
     42  fc55							; Decrease SpriteEnd
     43  fc55		       38		      sec
     44  fc56		       a5 d6		      lda	SpriteEnd
     45  fc58		       e9 08		      sbc	#8
     46  fc5a		       85 d6		      sta	SpriteEnd
     47  fc5c
     48  fc5c							; Idle.
     49  fc5c		       85 02		      sta	WSYNC
     50  fc5e							; sleep 33
     51  fc5e
      0  fc5e					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc5e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc5e  && !(  _scycles == #0  ) }
      2  fc5e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  fc5e
     54  fc5e							; [scanline 2]
     55  fc5e				   row_2
      0  fc5e					      jet_spritedata_calc
      1  fc5e		       c6 e3		      dec	RamRowJetpackIndex
      2  fc60		       a4 e3		      ldy	RamRowJetpackIndex
      3  fc62		       be 00 ff 	      ldx	Frame0,Y
      4  fc65		       86 1b		      stx	JET_SP
      0  fc67					      sleep	5
      1  fc67				   .CYCLES    SET	5
      2  fc67
      3  fc67				  -	      IF	.CYCLES < 2
      4  fc67				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc67				  -	      ERR
      6  fc67					      ENDIF
      7  fc67
      8  fc67					      IF	.CYCLES & 1
      9  fc67					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc67		       04 00		      nop	0
     11  fc69				  -	      ELSE
     12  fc69				  -	      bit	VSYNC
     13  fc69					      ENDIF
     14  fc69				   .CYCLES    SET	.CYCLES - 3
     15  fc69					      ENDIF
     16  fc69
     17  fc69					      REPEAT	.CYCLES / 2
     18  fc69		       ea		      nop
     19  fc6a					      REPEND
     58  fc6a
     59  fc6a							; Black out playfield
     60  fc6a							; TODO This should be done with playfield pixels, not color.
     61  fc6a		       a9 00		      lda	#0
     62  fc6c		       85 08		      sta	COLUPF
     63  fc6e
     64  fc6e							; [[[Nibble VM.]]]
      0  fc6e					      sleep	21
      1  fc6e				   .CYCLES    SET	21
      2  fc6e
      3  fc6e				  -	      IF	.CYCLES < 2
      4  fc6e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc6e				  -	      ERR
      6  fc6e					      ENDIF
      7  fc6e
      8  fc6e					      IF	.CYCLES & 1
      9  fc6e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc6e		       04 00		      nop	0
     11  fc70				  -	      ELSE
     12  fc70				  -	      bit	VSYNC
     13  fc70					      ENDIF
     14  fc70				   .CYCLES    SET	.CYCLES - 3
     15  fc70					      ENDIF
     16  fc70
     17  fc70					      REPEAT	.CYCLES / 2
     18  fc70		       ea		      nop
     17  fc70					      REPEND
     18  fc71		       ea		      nop
     17  fc71					      REPEND
     18  fc72		       ea		      nop
     17  fc72					      REPEND
     18  fc73		       ea		      nop
     17  fc73					      REPEND
     18  fc74		       ea		      nop
     17  fc74					      REPEND
     18  fc75		       ea		      nop
     17  fc75					      REPEND
     18  fc76		       ea		      nop
     17  fc76					      REPEND
     18  fc77		       ea		      nop
     17  fc77					      REPEND
     18  fc78		       ea		      nop
     19  fc79					      REPEND
     66  fc79
     67  fc79							; Load PF1 value
     68  fc79		       a9 3d		      lda	#%00111101
     69  fc7b		       85 e2		      sta	RamPF1Value
     70  fc7d
     71  fc7d		       a9 04		      lda	#4
     72  fc7f		       8d 96 02 	      sta	TIM64T
     73  fc82
     74  fc82							; Set stack pointer for PHP use from NibblePhp.
     75  fc82							; FIXME need to fix these and other Nibble references
      0  fc82					      NIBBLE_RAM_LOAD	ldx, NibblePhp
      1  fc82		       ae 8e f1 	      ldx	[CBSRAM_NIBBLE_READ + NibblePhp - NIBBLE_VAR_START]
      2  fc82					      endif
      3  fc85
     77  fc85		       ca		      dex
     78  fc86		       9a		      txs
     79  fc87
     80  fc87							; Enable playfield at end of scanline
     81  fc87		       a9 42		      lda	#COL_BG
     82  fc89		       85 08		      sta	COLUPF
     83  fc8b
     84  fc8b							; Set overflow flag
      0  fc8b					      NIBBLE_RAM_LOAD	bit, NibblePs
      1  fc8b		       2c 8f f1 	      bit	[CBSRAM_NIBBLE_READ + NibblePs - NIBBLE_VAR_START]
      2  fc8b					      endif
      3  fc8e
     86  fc8e
      0  fc8e					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc8e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc8e  && !(  _scycles == #0  ) }
      2  fc8e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     88  fc8e
     89  fc8e							; [scanline 3]
     90  fc8e				   row_3
     91  fc8e							; Current row and next two rows.
     92  fc8e		       a4 e3		      ldy	RamRowJetpackIndex
     93  fc90		       88		      dey
     94  fc91		       be 00 ff 	      ldx	Frame0,Y
     95  fc94		       86 1b		      stx	JET_SP
     96  fc96		       88		      dey
     97  fc97		       be 00 ff 	      ldx	Frame0,Y
     98  fc9a		       86 d0		      stx	RamKernelGrp0
     99  fc9c		       88		      dey
    100  fc9d		       be 00 ff 	      ldx	Frame0,Y
    101  fca0		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
    102  fca3		       84 e3		      sty	RamRowJetpackIndex
    103  fca5
    104  fca5							; [[[Nibble VM.]]]
    105  fca5							; Idle.
      0  fca5					      sleep	22
      1  fca5				   .CYCLES    SET	22
      2  fca5
      3  fca5				  -	      IF	.CYCLES < 2
      4  fca5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fca5				  -	      ERR
      6  fca5					      ENDIF
      7  fca5
      8  fca5				  -	      IF	.CYCLES & 1
      9  fca5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fca5				  -	      nop	0
     11  fca5				  -	      ELSE
     12  fca5				  -	      bit	VSYNC
     13  fca5				  -	      ENDIF
     14  fca5				  -.CYCLES    SET	.CYCLES - 3
     15  fca5					      ENDIF
     16  fca5
     17  fca5					      REPEAT	.CYCLES / 2
     18  fca5		       ea		      nop
     17  fca5					      REPEND
     18  fca6		       ea		      nop
     17  fca6					      REPEND
     18  fca7		       ea		      nop
     17  fca7					      REPEND
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     17  fcac					      REPEND
     18  fcad		       ea		      nop
     17  fcad					      REPEND
     18  fcae		       ea		      nop
     17  fcae					      REPEND
     18  fcaf		       ea		      nop
     19  fcb0					      REPEND
    107  fcb0
    108  fcb0							; Setup for kernel
    109  fcb0		       38		      sec		; clear carry bit
      0  fcb1					      NIBBLE_RAM_LOAD	ldx, NibbleX
      1  fcb1		       ae 8c f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleX - NIBBLE_VAR_START]
      2  fcb1					      endif
      3  fcb4
      0  fcb4					      NIBBLE_RAM_LOAD	ldy, NibbleY
      1  fcb4		       ac 8d f1 	      ldy	[CBSRAM_NIBBLE_READ + NibbleY - NIBBLE_VAR_START]
      2  fcb4					      endif
      3  fcb7
    112  fcb7
    113  fcb7							; Jump immediately into scanlines 4-5 aka "kernel_gem"
    114  fcb7		       a5 ca		      lda	NibbleVdel1
    115  fcb9		       85 1c		      sta	EMERALD_SP
    116  fcbb		       a5 d0		      lda	RamKernelGrp0	; Load sprite 2 into A
    117  fcbd							; [scanline 4]
    118  fcbd							; [scanline 5]
      0  fcbd					      ASSERT_RUNTIME	"_scycles == #73"
      1  fcbd				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fcbd  && !(  _scycles == #73  ) }
      2  fcbd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    120  fcbd		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    121  fcc0
    122  fcc0							; [scanline 6]
    123  fcc0
    124  fcc0				   row_after_kernel
    125  fcc0				   row_6
      0  fcc0					      ASSERT_RUNTIME	"_scycles == #0"
      1  fcc0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fcc0  && !(  _scycles == #0  ) }
      2  fcc0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    127  fcc0
    128  fcc0							; Cleanup from the kernel.
    129  fcc0		       a9 00		      lda	#0
    130  fcc2		       85 1e		      sta	EMERALD_MI_ENABLE
    131  fcc4		       85 1c		      sta	EMERALD_SP
    132  fcc6		       85 08		      sta	COLUPF
    133  fcc8
    134  fcc8		       a9 20		      lda	#%00100000
    135  fcca		       85 0e		      sta	PF1
    136  fccc
      0  fccc					      jet_spritedata_calc
      1  fccc		       c6 e3		      dec	RamRowJetpackIndex
      2  fcce		       a4 e3		      ldy	RamRowJetpackIndex
      3  fcd0		       be 00 ff 	      ldx	Frame0,Y
      4  fcd3		       86 1b		      stx	JET_SP
    138  fcd5
    139  fcd5							; Load nibble index.
    140  fcd5		       a0 00		      ldy	#0
    141  fcd7
    142  fcd7							; Idle.
    143  fcd7		       85 02		      sta	WSYNC
    144  fcd9
    145  fcd9							; [scanline 7]
    146  fcd9				   row_7
      0  fcd9					      ASSERT_RUNTIME	"_scycles == #0"
      1  fcd9				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fcd9  && !(  _scycles == #0  ) }
      2  fcd9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    148  fcd9
    149  fcd9							; FIXME this should be enabled!
    150  fcd9							; jet_spritedata_calc
    151  fcd9
    152  fcd9		       a9 42		      lda	#COL_BG
    153  fcdb		       85 08		      sta	COLUPF
    154  fcdd
    155  fcdd							; Idle.
    156  fcdd							; sleep 71
    157  fcdd
    158  fcdd							; Run Kernel.
      0  fcdd					      NIBBLE_RAM_LOAD	lda, NibbleVar2
      1  fcdd		       ad 81 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar2 - NIBBLE_VAR_START]
      2  fcdd					      endif
      3  fce0
      0  fce0					      NIBBLE_gem_kernel_a_2
      1  fce0		       0a		      asl
      2  fce1		       90 1e		      bcc	.else_1
      3  fce3
      4  fce3				   .if_1
      5  fce3		       a2 85		      ldx	#[ #BC_STA ]
      6  fce5		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  fce8		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  fcea		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  fced		       a2 85		      ldx	#[ #BC_STA ]
     10  fcef		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  fcf2		       a2 0e		      ldx	#[ #PF1 ]
     12  fcf4		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  fcf7		       a2 08		      ldx	#[ #BC_PHP ]
     14  fcf9		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fcfc					      sleep	3
      1  fcfc				   .CYCLES    SET	3
      2  fcfc
      3  fcfc				  -	      IF	.CYCLES < 2
      4  fcfc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcfc				  -	      ERR
      6  fcfc					      ENDIF
      7  fcfc
      8  fcfc					      IF	.CYCLES & 1
      9  fcfc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcfc		       04 00		      nop	0
     11  fcfe				  -	      ELSE
     12  fcfe				  -	      bit	VSYNC
     13  fcfe					      ENDIF
     14  fcfe				   .CYCLES    SET	.CYCLES - 3
     15  fcfe					      ENDIF
     16  fcfe
     17  fcfe				  -	      REPEAT	.CYCLES / 2
     18  fcfe				  -	      nop
     19  fcfe					      REPEND
     16  fcfe
     17  fcfe
     18  fcfe		       4c 1c fd 	      jmp	.endif_1
     19  fd01				   .else_1
     20  fd01		       a2 08		      ldx	#[ #BC_PHP ]
     21  fd03		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  fd06		       a2 85		      ldx	#[ #BC_STA ]
     23  fd08		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  fd0b		       a2 0e		      ldx	#[ #PF1 ]
     25  fd0d		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  fd10		       be 88 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini4 - NIBBLE_VAR_START],y
     27  fd13		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  fd16		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  fd18		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fd1b					      sleep	2
      1  fd1b				   .CYCLES    SET	2
      2  fd1b
      3  fd1b				  -	      IF	.CYCLES < 2
      4  fd1b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd1b				  -	      ERR
      6  fd1b					      ENDIF
      7  fd1b
      8  fd1b				  -	      IF	.CYCLES & 1
      9  fd1b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd1b				  -	      nop	0
     11  fd1b				  -	      ELSE
     12  fd1b				  -	      bit	VSYNC
     13  fd1b				  -	      ENDIF
     14  fd1b				  -.CYCLES    SET	.CYCLES - 3
     15  fd1b					      ENDIF
     16  fd1b
     17  fd1b					      REPEAT	.CYCLES / 2
     18  fd1b		       ea		      nop
     19  fd1c					      REPEND
     31  fd1c
     32  fd1c				   .endif_1
     33  fd1c		       be 89 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleMissile - NIBBLE_VAR_START],y
     34  fd1f		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  fd22		       be 8a f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleVdel1 - NIBBLE_VAR_START],y
     36  fd25		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  fd28		       be 8b f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGrp0 - NIBBLE_VAR_START],y
     38  fd2b		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
    161  fd2e							; sleep 5
    162  fd2e
    163  fd2e							; [scanline 8]
    164  fd2e				   row_8
      0  fd2e					      ASSERT_RUNTIME	"_scycles == #0"
      1  fd2e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fd2e  && !(  _scycles == #0  ) }
      2  fd2e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    166  fd2e
    167  fd2e							; FIXME this should be enabled!
    168  fd2e							; jet_spritedata_calc
    169  fd2e
    170  fd2e							; [NIBBLE VM]
      0  fd2e					      NIBBLE_RAM_LOAD	lda, NibbleVar1
      1  fd2e		       ad 80 f1 	      lda	[CBSRAM_NIBBLE_READ + NibbleVar1 - NIBBLE_VAR_START]
      2  fd2e					      endif
      3  fd31
      0  fd31					      NIBBLE_gem_kernel_a_1
      1  fd31		       0a		      asl
      2  fd32		       90 18		      bcc	.else_1
      3  fd34
      4  fd34				   .if_1
      5  fd34		       a2 a9		      ldx	#[ #BC_LDA_IMM ]
      6  fd36		       8e 15 f0 	      stx	[[KernelA_B - $100] + 0]
      7  fd39		       a2 a0		      ldx	#[ #%10100000 ]
      8  fd3b		       8e 16 f0 	      stx	[[KernelA_B - $100 + 1] + 0]
      9  fd3e		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
     10  fd40		       8e 18 f0 	      stx	[[KernelA_C - $100 + 1] + 0]
     11  fd43		       a2 14		      ldx	#[ #$14 ]
     12  fd45		       8e 19 f0 	      stx	[[KernelA_D - $100] + 0]
     13  fd48		       2a		      rol
     14  fd49
     15  fd49
     16  fd49		       4c 6d fd 	      jmp	.endif_1
     17  fd4c				   .else_1
     18  fd4c		       0a		      asl
     19  fd4d		       90 0f		      bcc	.else_2
     20  fd4f
     21  fd4f				   .if_2
     22  fd4f		       a2 86		      ldx	#[ #BC_STX ]
     23  fd51		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     24  fd54		       a2 11		      ldx	#[ #RESP1 ]
     25  fd56		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  fd59					      sleep	3
      1  fd59				   .CYCLES    SET	3
      2  fd59
      3  fd59				  -	      IF	.CYCLES < 2
      4  fd59				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd59				  -	      ERR
      6  fd59					      ENDIF
      7  fd59
      8  fd59					      IF	.CYCLES & 1
      9  fd59					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd59		       04 00		      nop	0
     11  fd5b				  -	      ELSE
     12  fd5b				  -	      bit	VSYNC
     13  fd5b					      ENDIF
     14  fd5b				   .CYCLES    SET	.CYCLES - 3
     15  fd5b					      ENDIF
     16  fd5b
     17  fd5b				  -	      REPEAT	.CYCLES / 2
     18  fd5b				  -	      nop
     19  fd5b					      REPEND
     27  fd5b
     28  fd5b
     29  fd5b		       4c 6a fd 	      jmp	.endif_2
     30  fd5e				   .else_2
     31  fd5e		       be 82 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1 - NIBBLE_VAR_START],y
     32  fd61		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     33  fd64		       be 83 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini1Reg - NIBBLE_VAR_START],y
     34  fd67		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
     35  fd6a
     36  fd6a				   .endif_2
      0  fd6a					      sleep	6
      1  fd6a				   .CYCLES    SET	6
      2  fd6a
      3  fd6a				  -	      IF	.CYCLES < 2
      4  fd6a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd6a				  -	      ERR
      6  fd6a					      ENDIF
      7  fd6a
      8  fd6a				  -	      IF	.CYCLES & 1
      9  fd6a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd6a				  -	      nop	0
     11  fd6a				  -	      ELSE
     12  fd6a				  -	      bit	VSYNC
     13  fd6a				  -	      ENDIF
     14  fd6a				  -.CYCLES    SET	.CYCLES - 3
     15  fd6a					      ENDIF
     16  fd6a
     17  fd6a					      REPEAT	.CYCLES / 2
     18  fd6a		       ea		      nop
     17  fd6a					      REPEND
     18  fd6b		       ea		      nop
     17  fd6b					      REPEND
     18  fd6c		       ea		      nop
     19  fd6d					      REPEND
     38  fd6d
     39  fd6d				   .endif_1
     40  fd6d		       0a		      asl
     41  fd6e		       90 12		      bcc	.else_3
     42  fd70
     43  fd70				   .if_3
     44  fd70		       a2 79		      ldx	#[ #NOP_REG ]
     45  fd72		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     46  fd75		       a2 11		      ldx	#[ #RESP1 ]
     47  fd77		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  fd7a					      sleep	9
      1  fd7a				   .CYCLES    SET	9
      2  fd7a
      3  fd7a				  -	      IF	.CYCLES < 2
      4  fd7a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd7a				  -	      ERR
      6  fd7a					      ENDIF
      7  fd7a
      8  fd7a					      IF	.CYCLES & 1
      9  fd7a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd7a		       04 00		      nop	0
     11  fd7c				  -	      ELSE
     12  fd7c				  -	      bit	VSYNC
     13  fd7c					      ENDIF
     14  fd7c				   .CYCLES    SET	.CYCLES - 3
     15  fd7c					      ENDIF
     16  fd7c
     17  fd7c					      REPEAT	.CYCLES / 2
     18  fd7c		       ea		      nop
     17  fd7c					      REPEND
     18  fd7d		       ea		      nop
     17  fd7d					      REPEND
     18  fd7e		       ea		      nop
     19  fd7f					      REPEND
     49  fd7f
     50  fd7f
     51  fd7f		       4c 93 fd 	      jmp	.endif_3
     52  fd82				   .else_3
     53  fd82		       a2 11		      ldx	#[ #RESP1 ]
     54  fd84		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     55  fd87		       be 84 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2 - NIBBLE_VAR_START],y
     56  fd8a		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     57  fd8d		       be 85 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini2Reg - NIBBLE_VAR_START],y
     58  fd90		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     59  fd93
     60  fd93				   .endif_3
     61  fd93		       0a		      asl
     62  fd94		       90 0d		      bcc	.else_4
     63  fd96
     64  fd96				   .if_4
     65  fd96		       a2 11		      ldx	#[ #RESP1 ]
     66  fd98		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  fd9b					      sleep	9
      1  fd9b				   .CYCLES    SET	9
      2  fd9b
      3  fd9b				  -	      IF	.CYCLES < 2
      4  fd9b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd9b				  -	      ERR
      6  fd9b					      ENDIF
      7  fd9b
      8  fd9b					      IF	.CYCLES & 1
      9  fd9b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd9b		       04 00		      nop	0
     11  fd9d				  -	      ELSE
     12  fd9d				  -	      bit	VSYNC
     13  fd9d					      ENDIF
     14  fd9d				   .CYCLES    SET	.CYCLES - 3
     15  fd9d					      ENDIF
     16  fd9d
     17  fd9d					      REPEAT	.CYCLES / 2
     18  fd9d		       ea		      nop
     17  fd9d					      REPEND
     18  fd9e		       ea		      nop
     17  fd9e					      REPEND
     18  fd9f		       ea		      nop
     19  fda0					      REPEND
     68  fda0
     69  fda0
     70  fda0		       4c af fd 	      jmp	.endif_4
     71  fda3				   .else_4
     72  fda3		       be 86 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3 - NIBBLE_VAR_START],y
     73  fda6		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     74  fda9		       be 87 f1 	      ldx	[CBSRAM_NIBBLE_READ + NibbleGemini3Reg - NIBBLE_VAR_START],y
     75  fdac		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     76  fdaf
     77  fdaf				   .endif_4
    173  fdaf							; sleep 3
    174  fdaf
    175  fdaf							; Idle.
    176  fdaf							; sleep 51
    177  fdaf							; sta WSYNC
    178  fdaf
    179  fdaf							; [scanline 8-1]
      0  fdaf					      ASSERT_RUNTIME	"_scycles == #0"
      1  fdaf				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fdaf  && !(  _scycles == #0  ) }
      2  fdaf					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fdaf							; Repeat loop until LoopCount < 0
    182  fdaf		       c6 d4		      dec	LoopCount
    183  fdb1		       f0 03		      beq	row_end
    184  fdb3		       4c 3d fc 	      jmp	row_start
    185  fdb6				   row_end
    186  fdb6		       4c 0e fc 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fdb9					      include	"kernel_gem.s"
      1  fdb9							;
      2  fdb9							; Gem Kernels
      3  fdb9							;
      4  fdb9							; Gems are displayed in alternating kernels. This chart shows
      5  fdb9							; which kernel is responsible for which gem, with missiles denoted.
      6  fdb9							;
      7  fdb9							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fdb9							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fdb9							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fdb9							;  #	 0^	 8^	  17^	    26^       gem index
     11  fdb9							;
     12  fdb9							; The middle bar indicates where the pattern reverses.
     13  fdb9							;
     14  fdb9							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fdb9							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fdb9							; requires with a single sprite. By alternating sprites each frame with an...
     17  fdb9							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fdb9							; line, except for two. These are instead rendered by the missile, which
     19  fdb9							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fdb9
     21  fdb9							; for copying
     22  fe00		       00 00 00 00*	      align	256
     23  fe00
     24  fe00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fe00							;
     26  fe00							; GEM KERNEL A
     27  fe00							;
     28  fe00
     29  fe00				   kernel_1_start subroutine
     30  fe00					      rorg	$f100
     31  fe00
     32  fe00							; Kernel Marker
     33  fe00		       0a		      .byte.b	$A
     34  fe01
     35  fe01				   KernelA_early
      0  fe01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fe01				   .KERNEL    SET	$A
      2  fe01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fe01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fe01		       b8		      clv
     38  fe02
     39  fe02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fe02		       a9 ff		      lda	#$ff
     41  fe02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fe04
     43  fe04				   KernelA    subroutine
      0  fe04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fe04				   .KERNEL    SET	$A
      2  fe04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fe04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fe04
     46  fe04							; Write Player from accumulator. When writing to the other sprite, the
     47  fe04							; TIA will copy Gemini 0A into visible sprite register
     48  fe04		       85 1b		      sta	JET_SP
     49  fe06							; Write Gemini 1A into visible sprite register
     50  fe06		       a9 66		      lda	#%01100110
     51  fe06		       f1 07	   KernelA_VDEL0 =	. - 1
     52  fe08		       85 1c		      sta	EMERALD_SP
     53  fe0a
     54  fe0a							; Register config
     55  fe0a		       a9 08		      lda	#%00001000
     56  fe0c		       85 0c		      sta	REFP1
     57  fe0e
     58  fe0e		       a9 20		      lda	#%00100000
     59  fe10		       85 0e		      sta	PF1
     60  fe12
     61  fe12							; Reset stack pointer
     62  fe12		       68		      pla
     63  fe13
     64  fe13							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fe13					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fe13				   .KERNEL    SET	$A
      2  fe13				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f113  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fe13					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fe13				   KernelA_A
     67  fe13		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fe15
     69  fe15							; RST0 vvv
     70  fe15				   KernelA_B
     71  fe15		       a5 e2		      lda	RamPF1Value
     72  fe17				   KernelA_C
     73  fe17		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fe19				   KernelA_D
     75  fe19							; sty EMERALD_SP ; Gemini 1A
      0  fe19					      sleep	3
      1  fe19				   .CYCLES    SET	3
      2  fe19
      3  fe19				  -	      IF	.CYCLES < 2
      4  fe19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe19				  -	      ERR
      6  fe19					      ENDIF
      7  fe19
      8  fe19					      IF	.CYCLES & 1
      9  fe19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe19		       04 00		      nop	0
     11  fe1b				  -	      ELSE
     12  fe1b				  -	      bit	VSYNC
     13  fe1b					      ENDIF
     14  fe1b				   .CYCLES    SET	.CYCLES - 3
     15  fe1b					      ENDIF
     16  fe1b
     17  fe1b				  -	      REPEAT	.CYCLES / 2
     18  fe1b				  -	      nop
     19  fe1b					      REPEND
     77  fe1b							; RST0 ^^^
     78  fe1b
     79  fe1b				   KernelA_E
     80  fe1b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     81  fe1d				   KernelA_F
     82  fe1d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     83  fe1f				   KernelA_G
     84  fe1f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     85  fe21
     86  fe21				   KernelA_H
     87  fe21		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     88  fe23
      0  fe23					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fe23				   .KERNEL    SET	$A
      2  fe23				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f123  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fe23					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     90  fe23							; RST4 vvv
     91  fe23				   KernelA_I
     92  fe23		       08		      php		; Reset "medium close" NUSIZ repetition
     93  fe24				   KernelA_J		; unchanging
     94  fe24		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     95  fe26				   KernelA_K
     96  fe26		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     97  fe28							; RST4 ^^^
     98  fe28
     99  fe28				   KernelA_L
    100  fe28		       a5 de		      lda	RamZeroByte	; FIXME this doesn't belong here
    101  fe2a				   KernelA_M
    102  fe2a		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    103  fe2c				   KernelA_N
    104  fe2c		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME better place for this?
    105  fe2e				   KernelA_O
    106  fe2e		       a9 66		      lda	#%01100110
    107  fe2e		       f1 2f	   KernelA_VDEL1 =	. - 1
    108  fe30
    109  fe30							; End visible line
      0  fe30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #66"
      1  fe30				   .KERNEL    SET	$A
      2  fe30				   .COND      SET	"_scycles == #66"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #66  ) }
      3  fe30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fe30				   KernelA_branch
    112  fe30		       85 1c		      sta	EMERALD_SP	; set VDEL1
    113  fe32
    114  fe32							; Branch or return.
    115  fe32		       70 cd		      bvs	KernelA_early
      0  fe34					      sleep	2
      1  fe34				   .CYCLES    SET	2
      2  fe34
      3  fe34				  -	      IF	.CYCLES < 2
      4  fe34				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe34				  -	      ERR
      6  fe34					      ENDIF
      7  fe34
      8  fe34				  -	      IF	.CYCLES & 1
      9  fe34				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe34				  -	      nop	0
     11  fe34				  -	      ELSE
     12  fe34				  -	      bit	VSYNC
     13  fe34				  -	      ENDIF
     14  fe34				  -.CYCLES    SET	.CYCLES - 3
     15  fe34					      ENDIF
     16  fe34
     17  fe34					      REPEAT	.CYCLES / 2
     18  fe34		       ea		      nop
     19  fe35					      REPEND
    117  fe35		       4c c0 fc 	      jmp	row_after_kernel
    118  fe38
    119  fe38					      rend
    120  fe38				   kernel_1_end
      0  fe38					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fe38				   .STARTA    SET	kernel_1_start
      2  fe38				   .ENDA      SET	kernel_1_end
      3  fe38				   .LEN       SET	$40
      4  fe38				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe38				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe38				  -	      err
      7  fe38					      endif
    122  fe38
    123  fe38							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  fe38							;
    125  fe38							; GEM KERNEL B
    126  fe38							;
    127  fe38
    128  fe38				   kernel_2_start subroutine
    129  fe38					      rorg	$f100
    130  fe38
    131  fe38							; Kernel Marker
    132  fe38		       0b		      .byte.b	$B
    133  fe39
    134  fe39		       b8		      clv
    135  fe3a
    136  fe3a				   KernelB_early
    137  fe3a							; Early code to set next GRP0 image. Value is overwritten
    138  fe3a		       a9 ff		      lda	#$ff
    139  fe3a		       f1 03	   KernelB_GRP0 =	. - 1
    140  fe3c
    141  fe3c				   KernelB    subroutine
      0  fe3c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fe3c				   .KERNEL    SET	$B
      2  fe3c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fe3c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    143  fe3c
    144  fe3c							; Write Player from accumulator. When writing to the other sprite, the
    145  fe3c							; TIA will copy Gemini 0A into visible sprite register
    146  fe3c		       85 1b		      sta	JET_SP
    147  fe3e		       a9 aa		      lda	#%10101010
    148  fe3e		       f1 07	   KernelB_VDEL0 =	. - 1
    149  fe40							; Write Gemini 1A into delayed sprite register
    150  fe40		       85 1c		      sta	EMERALD_SP
    151  fe42
    152  fe42							; Reset stack
    153  fe42		       68		      pla
    154  fe43
    155  fe43							; 6c
    156  fe43		       a9 20		      lda	#%00100000
    157  fe45		       85 0e		      sta	PF1
    158  fe47
    159  fe47							; Register config
    160  fe47		       a9 ff		      lda	#$ff
    161  fe49		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    162  fe4b
    163  fe4b							; Set processor register bit for PHP sprite rendering.
      0  fe4b					      sleep	3
      1  fe4b				   .CYCLES    SET	3
      2  fe4b
      3  fe4b				  -	      IF	.CYCLES < 2
      4  fe4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe4b				  -	      ERR
      6  fe4b					      ENDIF
      7  fe4b
      8  fe4b					      IF	.CYCLES & 1
      9  fe4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe4b		       04 00		      nop	0
     11  fe4d				  -	      ELSE
     12  fe4d				  -	      bit	VSYNC
     13  fe4d					      ENDIF
     14  fe4d				   .CYCLES    SET	.CYCLES - 3
     15  fe4d					      ENDIF
     16  fe4d
     17  fe4d				  -	      REPEAT	.CYCLES / 2
     18  fe4d				  -	      nop
     19  fe4d					      REPEND
    165  fe4d
    166  fe4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fe4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fe4d				   .KERNEL    SET	$B
      2  fe4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fe4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    168  fe4d				   KernelB_A
    169  fe4d		       85 11		      sta	EMERALD_SP_RESET
    170  fe4f				   KernelB_B
    171  fe4f		       a5 e2		      lda	RamPF1Value
    172  fe51				   KernelB_C
    173  fe51		       c5 e2		      cmp	RamPF1Value
    174  fe53				   KernelB_D
    175  fe53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    176  fe55
    177  fe55							; below has one php load (could just be RESET)
    178  fe55				   KernelB_E
    179  fe55		       08		      php
    180  fe56				   KernelB_F
    181  fe56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    182  fe58				   KernelB_G
    183  fe58		       85 0e		      sta	PF1
    184  fe5a				   KernelB_H
    185  fe5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    186  fe5c							; above has one PHP load
    187  fe5c
    188  fe5c				   KernelB_I
    189  fe5c		       85 11		      sta	EMERALD_SP_RESET
    190  fe5e				   KernelB_J
    191  fe5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    192  fe60				   KernelB_K
    193  fe60		       85 1e		      sta	EMERALD_MI_ENABLE	; FIXME this can't rely on sta
    194  fe62				   KernelB_L
    195  fe62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    196  fe64
    197  fe64				   KernelB_M
      0  fe64					      sleep	3
      1  fe64				   .CYCLES    SET	3
      2  fe64
      3  fe64				  -	      IF	.CYCLES < 2
      4  fe64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe64				  -	      ERR
      6  fe64					      ENDIF
      7  fe64
      8  fe64					      IF	.CYCLES & 1
      9  fe64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe64		       04 00		      nop	0
     11  fe66				  -	      ELSE
     12  fe66				  -	      bit	VSYNC
     13  fe66					      ENDIF
     14  fe66				   .CYCLES    SET	.CYCLES - 3
     15  fe66					      ENDIF
     16  fe66
     17  fe66				  -	      REPEAT	.CYCLES / 2
     18  fe66				  -	      nop
     19  fe66					      REPEND
    199  fe66				   KernelB_N
      0  fe66					      sleep	3
      1  fe66				   .CYCLES    SET	3
      2  fe66
      3  fe66				  -	      IF	.CYCLES < 2
      4  fe66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe66				  -	      ERR
      6  fe66					      ENDIF
      7  fe66
      8  fe66					      IF	.CYCLES & 1
      9  fe66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe66		       04 00		      nop	0
     11  fe68				  -	      ELSE
     12  fe68				  -	      bit	VSYNC
     13  fe68					      ENDIF
     14  fe68				   .CYCLES    SET	.CYCLES - 3
     15  fe68					      ENDIF
     16  fe68
     17  fe68				  -	      REPEAT	.CYCLES / 2
     18  fe68				  -	      nop
     19  fe68					      REPEND
    201  fe68
    202  fe68							; End visible line
      0  fe68					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fe68				   .KERNEL    SET	$B
      2  fe68				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fe68					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    204  fe68
    205  fe68				   KernelB_branch
    206  fe68		       ad 84 02 	      lda	INTIM
    207  fe6b		       d0 cd		      bne	KernelB_early
    208  fe6d		       4c c0 fc 	      jmp	row_after_kernel
    209  fe70
    210  fe70					      rend
    211  fe70				   kernel_2_end
      0  fe70					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fe70				   .STARTA    SET	kernel_2_start
      2  fe70				   .ENDA      SET	kernel_2_end
      3  fe70				   .LEN       SET	$40
      4  fe70				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe70				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe70				  -	      err
      7  fe70					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fe70					      include	"data_sprites.s"
      1  fe70
      2  ff00		       00 00 00 00*	      align	256
      3  ff00
      4  ff00				   Frame0
      5  ff00							; 8 buffer
      6  ff00		       00		      .byte.b	#%00000000
      7  ff01		       00		      .byte.b	#%00000000
      8  ff02		       00		      .byte.b	#%00000000
      9  ff03		       00		      .byte.b	#%00000000
     10  ff04		       00		      .byte.b	#%00000000
     11  ff05		       00		      .byte.b	#%00000000
     12  ff06		       00		      .byte.b	#%00000000
     13  ff07		       00		      .byte.b	#%00000000
     14  ff08
     15  ff08							; 8 rows
     16  ff08		       60		      .byte.b	#%01100000
     17  ff09		       60		      .byte.b	#%01100000
     18  ff0a		       60		      .byte.b	#%01100000
     19  ff0b		       c0		      .byte.b	#%11000000
     20  ff0c		       c0		      .byte.b	#%11000000
     21  ff0d		       f0		      .byte.b	#%11110000
     22  ff0e		       c0		      .byte.b	#%11000000
     23  ff0f		       c0		      .byte.b	#%11000000
     24  ff10
     25  ff10							; 8 buffer
     26  ff10		       00		      .byte.b	#%00000000
     27  ff11		       00		      .byte.b	#%00000000
     28  ff12		       00		      .byte.b	#%00000000
     29  ff13		       00		      .byte.b	#%00000000
     30  ff14		       00		      .byte.b	#%00000000
     31  ff15		       00		      .byte.b	#%00000000
     32  ff16		       00		      .byte.b	#%00000000
     33  ff17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  ff18					      include	"data_levels.s"
      1  ff18					      align	8
      2  ff18
      3  ff18				   shard_map
      4  ff18		       40		      .byte.b	%01000000	; [1, 0, 0]
      5  ff19				   shard_map_end
------- FILE main.s
    155  ff19
    156  fffc					      org	$fffc
    157  fffc		       09 f2		      .word.w	Start
    158  fffe		       09 f2		      .word.w	Start
