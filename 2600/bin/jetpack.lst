------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00a7 ????				      seg.u	Variables
      2 U00a7 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   RamNibbleTemp byte.b
     31 U0090		       00	   RamNibbleVar1 byte.b
     32 U0091		       00	   RamNibbleVar2 byte.b
     33 U0092		       00	   RamZeroByte byte.b
     34 U0093		       00	   RamLowerSixByte byte.b
     35 U0094		       00	   RamStackBkp byte.b
     36 U0095
     37 U0095							; Kernel support
     38 U0095		       00	   RamPF1Value byte.b
     39 U0096		       00	   RamKernelGRP0 byte.b		; temp
     40 U0097		       00	   RamKernelPhpTarget byte.b
     41 U0098		       00	   RamKernelX byte.b
     42 U0099		       00	   RamKernelY byte.b
     43 U009a		       00	   RamKernelGemini1 byte.b
     44 U009b		       00	   RamKernelGemini1Reg byte.b
     45 U009c		       00	   RamKernelGemini2 byte.b
     46 U009d		       00	   RamKernelGemini2Reg byte.b
     47 U009e		       00	   RamKernelGemini3 byte.b
     48 U009f		       00	   RamKernelGemini3Reg byte.b
     49 U00a0		       00	   RamKernelGemini4 byte.b
     50 U00a1		       00	   RamKernelGemini4Reg byte.b
     51 U00a2		       00	   RamKernelGemini5 byte.b
     52 U00a3
     53 U00a3		       00	   BuildKernelX byte.b
     54 U00a4		       00	   BuildKernelY byte.b
     55 U00a5		       00	   BuildKernelZ byte.b
     56 U00a6		       00	   BuildKernelGrp0 byte.b
     57 U00a7
     58 U00a7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59 U00a7
     60 U00a7		       00 10	   ROW_COUNT  =	16
     61 U00a7
     62 U00a7		       00 02	   SIGNAL_LINE =	$02
     63 U00a7
     64 U00a7							; RAM+ memory map
     65 U00a7		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     66 U00a7		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     67 U00a7		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     68 U00a7
     69 U00a7		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     70 U00a7		       f1 40	   RAMP_STORAGE_R =	$f140
     71 U00a7
     72 U00a7							; NUSIZ values
     73 U00a7
     74 U00a7		       00 13	   THREE_COPIES =	%00010011
     75 U00a7
     76 U00a7							; Colors
     77 U00a7
     78 U00a7		       00 42	   COL_BG     equ	$42
     79 U00a7		       00 cc	   COL_EMERALD equ	$CC
     80 U00a7		       00 cc	   COL_EMERALD_2 equ	$CC
     81 U00a7
     82 U00a7							; HMOVE values for missiles
     83 U00a7
     84 U00a7		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     85 U00a7		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     86 U00a7
     87 U00a7		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     88 U00a7		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     89 U00a7
     90 U00a7							; Missile values when 2A=RST
     91 U00a7							; KERNEL_B_MISSILE_SLEEP equ 46
     92 U00a7							; KERNEL_B_MISSILE_HMOVE equ $20
     93 U00a7
     94 U00a7							; Sprite details
     95 U00a7
     96 U00a7		       00 09	   SPRITE_HEIGHT equ	9
     97 U00a7
     98 U00a7		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     99 U00a7		       00 1c	   EMERALD_SP equ	GRP1
    100 U00a7		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    101 U00a7		       00 11	   EMERALD_SP_RESET equ	RESP1
    102 U00a7		       00 13	   EMERALD_MI_RESET equ	RESM1
    103 U00a7		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    104 U00a7		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    105 U00a7		       00 05	   EMERALD_COPIES equ	NUSIZ1
    106 U00a7
    107 U00a7		       00 1b	   JET_SP     equ	GRP0
    108 U00a7		       00 10	   JET_SP_RESET equ	RESP0
    109 U00a7		       00 20	   JET_SP_HMOVE equ	HMP0
    110 U00a7		       00 06	   JET_SP_COLOR equ	COLUP0
    111 U00a7
    112 U00a7							; Spriteend is HEIGHT_OFFSET - YPos
    113 U00a7		       00 c8	   HEIGHT_OFFSET equ	200
    114 U00a7
    115 U00a7							; Compared with YPos
    116 U00a7		       00 3e	   FLOOR_OFFSET equ	62
    117 U00a7		       00 be	   CEILING_OFFSET equ	190
    118 U00a7
    119 U00a7							; Starting player position
    120 U00a7		       00 3e	   YPosStart  equ	62
    121 U00a7		       00 37	   XPosStart  equ	55
    122 U00a7
    123 U00a7							; Top left corner
    124 U00a7							; YPosStart equ 190
    125 U00a7							; XPosStart equ 28
    126 U00a7
    127 U00a7							; Tick (every 8 frames)
    128 U00a7		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00a7
     64 U00a7							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 83		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 89		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 86		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 87		      sta	Speed1
     48  f243		       85 88		      sta	Speed2
     49  f245		       85 8a		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8e		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 92		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 93		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c a1 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 f8 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 f8 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 f8 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 f8 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelZ
      8  f27a							; Gemini 1A
      9  f27a					      ldx	#SHARD_0A_RST
     10  f27a				   .if_1
     11  f27a					      beq	.else_1
     12  f27a					      sec
     13  f27a					      rol
     14  f27a							; Special: Encoding RST0
     15  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     16  f27a					      ldy	#BC_LDA_IMM
     17  f27a					      sty	[KernelA_B - $100]
     18  f27a					      ldy	#%10100000
     19  f27a					      sty	[KernelA_B - $100 + 1]
     20  f27a							; Store 1A in GRP0
     21  f27a					      ldy	#GEM1
     22  f27a					      sty	BuildKernelGrp0
     23  f27a							; Gemini 1A is RESPx
     24  f27a					      ldy	#EMERALD_SP_RESET
     25  f27a					      sty	[KernelA_C - $100 + 1]
     26  f27a							; Turn 3-cycle NOP into 4-cycle
     27  f27a					      ldy	#$14
     28  f27a					      sty	[KernelA_D - $100]
     29  f27a					      jmp	.endif_1
     30  f27a							; [BIT DEPTH] #1 If-End @ 1
     31  f27a					      rol
     32  f27a
     33  f27a				   .else_1
     34  f27a					      clc
     35  f27a					      rol
     36  f27a							; Store 0A in GRP0
     37  f27a					      ldy	#GEM0
     38  f27a					      sty	BuildKernelGrp0
     39  f27a					      ldx	#SHARD_1A_RST
     40  f27a				   .if_2
     41  f27a					      beq	.else_2
     42  f27a					      sec
     43  f27a					      rol
     44  f27a					      jmp	.endif_2
     45  f27a							; [BIT DEPTH] #2 If-End @ 2
     46  f27a
     47  f27a				   .else_2
     48  f27a					      clc
     49  f27a					      rol
     50  f27a							; Calculate the 1A value
     51  f27a					      if	SHARD_LUT_RF1
     52  f27a					      ldy	#REFP1
     53  f27a					      else
     54  f27a					      ldy	#GEM1
     55  f27a					      jsr	KernelA_UpdateRegs
     56  f27a					      sty	RamKernelGemini1
     57  f27a					      ldy	#GRP1
     58  f27a					      endif
     59  f27a					      sty	RamKernelGemini1Reg
     60  f27a							; [BIT DEPTH] #2 *If-End @ 2
     61  f27a							; [BIT DEPTH] #2 Else-End @ 2
     62  f27a				   .endif_2
     63  f27a							; [BIT DEPTH] #1 *If-End @ 1
     64  f27a							; [BIT DEPTH] #1 Else-End @ 2
     65  f27a				   .endif_1
     66  f27a							; Gemini 2A
     67  f27a					      ldx	#SHARD_2A_RST
     68  f27a				   .if_3
     69  f27a					      beq	.else_3
     70  f27a					      sec
     71  f27a					      rol
     72  f27a					      jmp	.endif_3
     73  f27a							; [BIT DEPTH] #3 If-End @ 3
     74  f27a
     75  f27a				   .else_3
     76  f27a					      clc
     77  f27a					      rol
     78  f27a							; FIXME Calculate the 2A value
     79  f27a					      ldy	#GEM2
     80  f27a					      jsr	KernelA_UpdateRegs
     81  f27a					      sty	RamKernelGemini2
     82  f27a							; [BIT DEPTH] #3 *If-End @ 3
     83  f27a							; [BIT DEPTH] #3 Else-End @ 3
     84  f27a				   .endif_3
     85  f27a							; Gemini 3A
     86  f27a					      ldx	#SHARD_3A_RST
     87  f27a				   .if_4
     88  f27a					      beq	.else_4
     89  f27a					      sec
     90  f27a					      rol
     91  f27a					      jmp	.endif_4
     92  f27a							; [BIT DEPTH] #4 If-End @ 4
     93  f27a
     94  f27a				   .else_4
     95  f27a					      clc
     96  f27a					      rol
     97  f27a							; FIXME Calculate the 3A value
     98  f27a					      ldy	#SHARD_3A
     99  f27a					      jsr	KernelA_UpdateRegs
    100  f27a					      sty	RamKernelGemini3
    101  f27a							; [BIT DEPTH] #4 *If-End @ 4
    102  f27a							; [BIT DEPTH] #4 Else-End @ 4
    103  f27a				   .endif_4
    104  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    105  f27a					      rol
    106  f27a					      rol
    107  f27a					      rol
    108  f27a					      rol
    109  f27a					      ENDM
    110  f27a
    111  f27a					      MAC	nibble_gem_kernel_a_2_build
    112  f27a					      lda	#0
    113  f27a							; Gemini 4A
    114  f27a					      ldx	#SHARD_4A_VD1
    115  f27a				   .if_1
    116  f27a					      beq	.else_1
    117  f27a					      sec
    118  f27a					      rol
    119  f27a							; Set PHP
    120  f27a					      jmp	.endif_1
    121  f27a							; [BIT DEPTH] #1 If-End @ 1
    122  f27a
    123  f27a				   .else_1
    124  f27a					      clc
    125  f27a					      rol
    126  f27a							; FIXME Calculate the 4A value
    127  f27a					      ldy	#SHARD_4A
    128  f27a					      jsr	KernelA_UpdateRegs
    129  f27a					      sty	RamKernelGemini4
    130  f27a							; Set PHP
    131  f27a							; [BIT DEPTH] #1 *If-End @ 1
    132  f27a							; [BIT DEPTH] #1 Else-End @ 1
    133  f27a				   .endif_1
    134  f27a							; VD1
    135  f27a							; ldy #SHARD_VD1
    136  f27a							; sty [KernelA_VDEL1 - $100]
    137  f27a							; GRP0
    138  f27a							; ldy #SHARD_GRP0
    139  f27a							; sty [KernelA_VDEL0 - $100]
    140  f27a							; X
    141  f27a							; ldy #SHARD_X
    142  f27a							; sty RamKernelX
    143  f27a							; Y
    144  f27a							; Gemini 5A
    145  f27a							; TODO eventually...?
    146  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    147  f27a					      rol
    148  f27a					      rol
    149  f27a					      rol
    150  f27a					      rol
    151  f27a					      rol
    152  f27a					      rol
    153  f27a					      rol
    154  f27a					      ENDM
    155  f27a
    156  f27a					      MAC	nibble_gem_kernel_b_build
    157  f27a					      lda	#0
    158  f27a							; X
    159  f27a					      ldy	#%00000011
    160  f27a					      sty	RamKernelX
    161  f27a							; Y
    162  f27a					      ldy	#%00110011
    163  f27a					      sty	[KernelB_STY - $100]
    164  f27a
    165  f27a					      cpx	#$00
    166  f27a				   .if_1
    167  f27a					      bcc	.else_1
    168  f27a					      sec
    169  f27a					      rol
    170  f27a							; NIBBLE_WRITE [KernelB_H_W + 0], #BC_STA
    171  f27a							; NIBBLE_WRITE [KernelB_H_W + 1], #EMERALD_SP
    172  f27a							; NIBBLE_WRITE [KernelB_H_W + 2], #BC_PHP
    173  f27a					      jmp	.endif_1
    174  f27a							; [BIT DEPTH] #1 If-End @ 1
    175  f27a
    176  f27a				   .else_1
    177  f27a					      clc
    178  f27a					      rol
    179  f27a							; NIBBLE_WRITE [KernelB_H_W + 0], #BC_PHP
    180  f27a							; NIBBLE_WRITE [KernelB_H_W + 1], #BC_STA
    181  f27a							; NIBBLE_WRITE [KernelB_H_W + 2], #EMERALD_SP_RESET
    182  f27a							; [BIT DEPTH] #1 *If-End @ 1
    183  f27a							; [BIT DEPTH] #1 Else-End @ 1
    184  f27a				   .endif_1
    185  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    186  f27a					      rol
    187  f27a					      rol
    188  f27a					      rol
    189  f27a					      rol
    190  f27a					      rol
    191  f27a					      rol
    192  f27a					      rol
    193  f27a					      ENDM
    194  f27a
    195  f27a
    196  f27a					      MAC	nibble_gem_kernel_a_1
    197  f27a				   .if_1
    198  f27a					      asl
    199  f27a					      bcc	.else_1
    200  f27a					      jmp	.endif_1
    201  f27a				   .else_1
    202  f27a				   .if_2
    203  f27a					      asl
    204  f27a					      bcc	.else_2
    205  f27a					      ldx	#RESP1
    206  f27a					      stx	[KernelA_D_W + 1 + 0]
    207  f27a					      jmp	.endif_2
    208  f27a				   .else_2
    209  f27a					      ldx	RamKernelGemini1
    210  f27a					      stx	[KernelA_D_W + 0]
    211  f27a					      ldx	RamKernelGemini1Reg
    212  f27a					      stx	[KernelA_D_W + 1]
    213  f27a				   .endif_2
    214  f27a				   .endif_1
    215  f27a				   .if_3
    216  f27a					      asl
    217  f27a					      bcc	.else_3
    218  f27a					      ldx	#NOP_REG
    219  f27a					      stx	[KernelA_E_W + 1 + 0]
    220  f27a					      ldx	#RESP1
    221  f27a					      stx	[KernelA_G_W + 1 + 0]
    222  f27a					      jmp	.endif_3
    223  f27a				   .else_3
    224  f27a					      ldx	#RESP1
    225  f27a					      stx	[KernelA_E_W + 1 + 0]
    226  f27a					      ldx	RamKernelGemini2
    227  f27a					      stx	[KernelA_G_W + 0]
    228  f27a					      ldx	#SHARD_2A_REG
    229  f27a					      stx	[KernelA_G_W + 1]
    230  f27a				   .endif_3
    231  f27a				   .if_4
    232  f27a					      asl
    233  f27a					      bcc	.else_4
    234  f27a					      ldx	#RESP1
    235  f27a					      stx	[KernelA_H_W + 1 + 0]
    236  f27a					      jmp	.endif_4
    237  f27a				   .else_4
    238  f27a					      ldx	RamKernelGemini3
    239  f27a					      stx	[KernelA_H_W + 0]
    240  f27a					      ldx	#SHARD_3A_REG
    241  f27a					      stx	[KernelA_H_W + 1]
    242  f27a				   .endif_4
    243  f27a					      ENDM
    244  f27a
    245  f27a					      MAC	nibble_gem_kernel_a_2
    246  f27a				   .if_1
    247  f27a					      asl
    248  f27a					      bcc	.else_1
    249  f27a					      ldx	#BC_STA
    250  f27a					      stx	[[KernelA_I_W + 0] + 0]
    251  f27a					      ldx	#EMERALD_SP_RESET
    252  f27a					      stx	[[KernelA_I_W + 0] + 1]
    253  f27a					      ldx	#BC_STA
    254  f27a					      stx	[[KernelA_J_W + 1] + 0]
    255  f27a					      ldx	#PF1
    256  f27a					      stx	[[KernelA_J_W + 1] + 1]
    257  f27a					      ldx	#BC_PHP
    258  f27a					      stx	[[KernelA_K_W + 1] + 0]
    259  f27a					      ldx	#VDELP1
    260  f27a					      stx	[RamKernelPhpTarget + 0]
    261  f27a					      jmp	.endif_1
    262  f27a				   .else_1
    263  f27a					      ldx	#BC_PHP
    264  f27a					      stx	[[KernelA_I_W + 0] + 0]
    265  f27a					      ldx	#BC_STA
    266  f27a					      stx	[[KernelA_J_W + 0] + 0]
    267  f27a					      ldx	#PF1
    268  f27a					      stx	[[KernelA_J_W + 0] + 1]
    269  f27a					      ldx	RamKernelGemini4
    270  f27a					      stx	[KernelA_K_W + 0]
    271  f27a					      ldx	#EMERALD_SP
    272  f27a					      stx	[KernelA_K_W + 1]
    273  f27a					      ldx	#RESP1
    274  f27a					      stx	[RamKernelPhpTarget + 0]
    275  f27a				   .endif_1
    276  f27a					      ldx	#SHARD_VD1
    277  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    278  f27a					      ldx	#SHARD_GRP0
    279  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    280  f27a					      ldx	#SHARD_X
    281  f27a					      stx	[RamKernelX + 0]
    282  f27a					      ldx	#SHARD_Y
    283  f27a					      stx	[[KernelA_STY - $100] + 0]
    284  f27a					      ENDM
    285  f27a
    286  f27a					      MAC	nibble_gem_kernel_b
    287  f27a				   .if_1
    288  f27a					      asl
    289  f27a					      bcc	.else_1
    290  f27a					      ldx	#EMERALD_SP_RESET
    291  f27a					      stx	[RamKernelPhpTarget + 0]
    292  f27a					      jmp	.endif_1
    293  f27a				   .else_1
    294  f27a					      ldx	#EMERALD_SP
    295  f27a					      stx	[RamKernelPhpTarget + 0]
    296  f27a				   .endif_1
    297  f27a					      ENDM
    298  f27a
    299  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a				   KernelA_UpdateRegs subroutine
      4  f27a							; GRP0 returns nop
      5  f27a							; FIXME GRP0 might not always be up to date
      6  f27a		       c4 a6		      cpy	BuildKernelGrp0
      7  f27c		       d0 03		      bne	.set_start
      8  f27e		       a0 15		      ldy	#BC_NOP
      9  f280		       60		      rts
     10  f281
     11  f281				   .set_start
     12  f281		       a6 a3		      ldx	BuildKernelX
     13  f283		       e0 aa		      cpx	#SENTINEL
     14  f285		       d0 04		      bne	.set_else
     15  f287		       84 a3		      sty	BuildKernelX
     16  f289		       f0 08		      beq	.set_end
     17  f28b				   .set_else
     18  f28b		       a6 a4		      ldx	BuildKernelY
     19  f28d		       e0 aa		      cpx	#SENTINEL
     20  f28f		       d0 02		      bne	.set_end
     21  f291		       84 a4		      sty	BuildKernelY
     22  f293				   .set_end
     23  f293
     24  f293		       c4 a3		      cpy	BuildKernelX
     25  f295		       d0 03		      bne	.op_else
     26  f297		       a0 86		      ldy	#BC_STX
     27  f299		       60		      rts
     28  f29a				   .op_else
     29  f29a		       c4 a4		      cpy	BuildKernelY
     30  f29c		       d0 02		      bne	.op_end
     31  f29e		       a0 84		      ldy	#BC_STY
     32  f2a0				   .op_end
     33  f2a0		       60		      rts
     34  f2a1
     35  f2a1							; Vertical Sync
     36  f2a1				   VerticalSync subroutine
      0  f2a1					      VERTICAL_SYNC
      1  f2a1		       a9 0e		      lda	#%1110
      2  f2a3		       85 02	   .VSLP1     sta	WSYNC
      3  f2a5		       85 00		      sta	VSYNC
      4  f2a7		       4a		      lsr
      5  f2a8		       d0 f9		      bne	.VSLP1
     38  f2aa
     39  f2aa				   FrameStart subroutine
      0  f2aa					      ASSERT_RUNTIME	"_scan == #0"
      1  f2aa				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2aa  && !(  _scan == #0  ) }
      2  f2aa					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     41  f2aa
     42  f2aa				   VerticalBlank subroutine
      0  f2aa					      TIMER_SETUP	37
      1  f2aa				   .lines     SET	37
      2  f2aa		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2ac		       85 02		      sta	WSYNC
      4  f2ae		       8d 96 02 	      sta	TIM64T
     44  f2b1
     45  f2b1							; Scanline counter
     46  f2b1		       a9 10		      lda	#ROW_COUNT
     47  f2b3		       85 82		      sta	LoopCount
     48  f2b5
     49  f2b5							; Frame counter
     50  f2b5		       e6 83		      inc	FrameCount
     51  f2b7
     52  f2b7							; Skip every 8 frames for increasing demo index
     53  f2b7		       a5 83		      lda	FrameCount
     54  f2b9		       29 07		      and	#FrameSkip
     55  f2bb		       c9 07		      cmp	#FrameSkip
     56  f2bd		       d0 0d		      bne	.next_next_thing
     57  f2bf
     58  f2bf		       18		      clc
     59  f2c0		       a5 8e		      lda	ROW_DEMO_INDEX
     60  f2c2		       69 04		      adc	#4
     61  f2c4		       c9 68		      cmp	#[level_01_end - level_01]
     62  f2c6		       90 02		      bcc	.next_thing_local
     63  f2c8		       a9 00		      lda	#0
     64  f2ca				   .next_thing_local
     65  f2ca		       85 8e		      sta	ROW_DEMO_INDEX
     66  f2cc				   .next_next_thing
     67  f2cc		       85 02		      sta	WSYNC
     68  f2ce
     69  f2ce							; Positioning
      0  f2ce					      SLEEP	40
      1  f2ce				   .CYCLES    SET	40
      2  f2ce
      3  f2ce				  -	      IF	.CYCLES < 2
      4  f2ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ce				  -	      ERR
      6  f2ce					      ENDIF
      7  f2ce
      8  f2ce				  -	      IF	.CYCLES & 1
      9  f2ce				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ce				  -	      nop	0
     11  f2ce				  -	      ELSE
     12  f2ce				  -	      bit	VSYNC
     13  f2ce				  -	      ENDIF
     14  f2ce				  -.CYCLES    SET	.CYCLES - 3
     15  f2ce					      ENDIF
     16  f2ce
     17  f2ce					      REPEAT	.CYCLES / 2
     18  f2ce		       ea		      nop
     17  f2ce					      REPEND
     18  f2cf		       ea		      nop
     17  f2cf					      REPEND
     18  f2d0		       ea		      nop
     17  f2d0					      REPEND
     18  f2d1		       ea		      nop
     17  f2d1					      REPEND
     18  f2d2		       ea		      nop
     17  f2d2					      REPEND
     18  f2d3		       ea		      nop
     17  f2d3					      REPEND
     18  f2d4		       ea		      nop
     17  f2d4					      REPEND
     18  f2d5		       ea		      nop
     17  f2d5					      REPEND
     18  f2d6		       ea		      nop
     17  f2d6					      REPEND
     18  f2d7		       ea		      nop
     17  f2d7					      REPEND
     18  f2d8		       ea		      nop
     17  f2d8					      REPEND
     18  f2d9		       ea		      nop
     17  f2d9					      REPEND
     18  f2da		       ea		      nop
     17  f2da					      REPEND
     18  f2db		       ea		      nop
     17  f2db					      REPEND
     18  f2dc		       ea		      nop
     17  f2dc					      REPEND
     18  f2dd		       ea		      nop
     17  f2dd					      REPEND
     18  f2de		       ea		      nop
     17  f2de					      REPEND
     18  f2df		       ea		      nop
     17  f2df					      REPEND
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     19  f2e2					      REPEND
     71  f2e2		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     72  f2e4		       85 02		      sta	WSYNC
     73  f2e6
     74  f2e6							; Misc
     75  f2e6		       a9 00		      lda	#00
     76  f2e8		       85 1e		      sta	EMERALD_MI_ENABLE
     77  f2ea
     78  f2ea							; Assign dervied SpriteEnd value
     79  f2ea		       18		      clc
     80  f2eb		       a9 c8		      lda	#HEIGHT_OFFSET
     81  f2ed		       e5 89		      sbc	YPos
     82  f2ef		       85 85		      sta	SpriteEnd
     83  f2f1
     84  f2f1							; Player 1
     85  f2f1		       a5 86		      lda	XPos
     86  f2f3		       a2 00		      ldx	#0
     87  f2f5		       20 ba f5 	      jsr	SetHorizPos
     88  f2f8
     89  f2f8				   frame_setup subroutine
     90  f2f8							; Kernel A or B
     91  f2f8		       a9 01		      lda	#01
     92  f2fa		       25 83		      and	FrameCount
     93  f2fc		       d0 24		      bne	frame_setup_kernel_b
     94  f2fe
     95  f2fe				   frame_setup_kernel_a subroutine
     96  f2fe							; Load kernel into CBSRAM
     97  f2fe		       20 56 f2 	      jsr	LoadKernelA
     98  f301
     99  f301							; Move missile
    100  f301		       85 02		      sta	WSYNC
      0  f303					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f303				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f303
      3  f303				  -	      IF	.CYCLES < 2
      4  f303				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f303				  -	      ERR
      6  f303					      ENDIF
      7  f303
      8  f303				  -	      IF	.CYCLES & 1
      9  f303				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f303				  -	      nop	0
     11  f303				  -	      ELSE
     12  f303				  -	      bit	VSYNC
     13  f303				  -	      ENDIF
     14  f303				  -.CYCLES    SET	.CYCLES - 3
     15  f303					      ENDIF
     16  f303
     17  f303					      REPEAT	.CYCLES / 2
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     19  f311					      REPEND
    102  f311		       85 13		      sta	EMERALD_MI_RESET
    103  f313		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    104  f315		       85 23		      sta	EMERALD_MI_HMOVE
    105  f317
    106  f317							; DEBUG: Set per-kernel color
    107  f317		       a2 cc		      ldx	#COL_EMERALD
    108  f319		       86 07		      stx	EMERALD_SP_COLOR
    109  f31b
    110  f31b							; Set reflection for Jetpack.
    111  f31b		       a9 ff		      lda	#%11111111
    112  f31d		       85 0c		      sta	REFP1
    113  f31f
    114  f31f		       4c 4f f3 	      jmp	frame_setup_complete
    115  f322
    116  f322				   frame_setup_kernel_b subroutine
    117  f322							; Load kernel into CBSRAM
    118  f322		       20 68 f2 	      jsr	LoadKernelB
    119  f325
    120  f325							; Move missile
    121  f325		       85 02		      sta	WSYNC
      0  f327					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f327				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f327
      3  f327				  -	      IF	.CYCLES < 2
      4  f327				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f327				  -	      ERR
      6  f327					      ENDIF
      7  f327
      8  f327					      IF	.CYCLES & 1
      9  f327					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f327		       04 00		      nop	0
     11  f329				  -	      ELSE
     12  f329				  -	      bit	VSYNC
     13  f329					      ENDIF
     14  f329				   .CYCLES    SET	.CYCLES - 3
     15  f329					      ENDIF
     16  f329
     17  f329					      REPEAT	.CYCLES / 2
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     17  f32a					      REPEND
     18  f32b		       ea		      nop
     17  f32b					      REPEND
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     17  f332					      REPEND
     18  f333		       ea		      nop
     17  f333					      REPEND
     18  f334		       ea		      nop
     17  f334					      REPEND
     18  f335		       ea		      nop
     17  f335					      REPEND
     18  f336		       ea		      nop
     17  f336					      REPEND
     18  f337		       ea		      nop
     17  f337					      REPEND
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     19  f341					      REPEND
    123  f341		       85 13		      sta	EMERALD_MI_RESET
    124  f343		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    125  f345		       85 23		      sta	EMERALD_MI_HMOVE
    126  f347
    127  f347							; DEBUG: Set per-kernel color
    128  f347		       a2 e0		      ldx	#$e0
    129  f349		       86 07		      stx	EMERALD_SP_COLOR
    130  f34b
    131  f34b							; Disable reflection for Jetpack.
    132  f34b		       a9 ff		      lda	#%11111111
    133  f34d		       85 0c		      sta	REFP1
    134  f34f
    135  f34f				   frame_setup_complete
    136  f34f
    137  f34f		       ad 7c f9 	      lda	shard_map
    138  f352		       a0 01		      ldy	#1	; gemini counter, starting at 1
    139  f354				   gemini_builder
    140  f354		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    141  f356		       d0 00		      bne	.no_vd0
    142  f358				   .no_vd0
    143  f358
    144  f358
    145  f358				   nibble_precompile_gem_kernel
    146  f358				   DBG_NIBBLE
    147  f358		       00 a9	   BC_LDA_IMM =	$a9
    148  f358		       00 85	   BC_STA     =	$85
    149  f358		       00 86	   BC_STX     =	$86
    150  f358		       00 84	   BC_STY     =	$84
    151  f358		       00 08	   BC_PHP     =	$08
    152  f358		       00 15	   BC_NOP     =	$15
    153  f358
    154  f358		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    155  f358
    156  f358				   KernelA_D_W EQM	[KernelA_D - $100]
    157  f358				   KernelA_E_W EQM	[KernelA_E - $100]
    158  f358				   KernelA_G_W EQM	[KernelA_G - $100]
    159  f358				   KernelA_H_W EQM	[KernelA_H - $100]
    160  f358				   KernelA_I_W EQM	[KernelA_I - $100]
    161  f358				   KernelA_J_W EQM	[KernelA_J - $100]
    162  f358				   KernelA_K_W EQM	[KernelA_K - $100]
    163  f358
    164  f358				   KernelB_H_W EQM	[KernelB_H - $100]
    165  f358
    166  f358							; Reflected for Kernel A
    167  f358		       00 00	   G00	      =	%00000000
    168  f358		       00 60	   G01	      =	%01100000
    169  f358		       00 06	   G10	      =	%00000110
    170  f358		       00 66	   G11	      =	%01100110
    171  f358
    172  f358							; gems:     [g01,g00,g00,g11,g01,g11]
    173  f358							; cpu:      cpu(g00,g01,false,g01,g11,false)
    174  f358							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
    175  f358
    176  f358							; gems:     [g01,g00,g00,g11,g01,g11]
    177  f358							; cpu:      cpu(g01,g01,false,g00,g11,false)
    178  f358							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
    179  f358
    180  f358							; gems:     [g11,g01,g01,g01,g01,g00]
    181  f358							; cpu:      cpu(g00,g01,false,g11,g00,false)
    182  f358							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
    183  f358
    184  f358							; gems:     [g01,g10,g01,g11,g00,g00]
    185  f358							; cpu:      cpu(g01,g00,false,g10,g11,false)
    186  f358							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
    187  f358
    188  f358							; gems:     [g00,g01,g10,g11,g00,g01]
    189  f358							; cpu:      cpu(g01,g00,false,g10,g11,false)
    190  f358							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
    191  f358
    192  f358							; gems:     [g01,g10,g11,g00,g01,g10]
    193  f358							; cpu:      cpu(g01,g01,false,g10,g11,false)
    194  f358							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
    195  f358
    196  f358							; gems:     [g10,g11,g00,g01,g10,g11]
    197  f358							; cpu:      cpu(g10,g10,false,g11,g01,false)
    198  f358							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
    199  f358
    200  f358		       00 00	   SHARD_LUT_RF1 =	0
    201  f358		       00 04	   SHARD_LUT_VD1 =	4
    202  f358		       00 06	   GEM0       =	G10
    203  f358		       00 66	   GEM1       =	G11
    204  f358		       00 00	   GEM2       =	G00
    205  f358		       00 60	   GEM3       =	G01
    206  f358		       00 06	   GEM4       =	G10
    207  f358		       00 66	   GEM5       =	G11
    208  f358
    209  f358		       00 00	   SHARD_0A_RST =	[GEM0 == G00]
    210  f358		       00 00	   SHARD_1A_RST =	[!SHARD_0A_RST && GEM1 == G00]
    211  f358		       00 01	   SHARD_2A_RST =	[!SHARD_0A_RST && !SHARD_1A_RST && GEM2 == G00]
    212  f358		       00 00	   SHARD_3A_RST =	0	; TODO
    213  f358							; Sprites (may be reversed)
    214  f358		       00 06	   SHARD_VD1  =	[SHARD_LUT_VD1 == 4 ? GEM4 - GEM1] + GEM1
    215  f358		       00 06	   SHARD_GRP0 =	[SHARD_0A_RST ? [GEM1 << 1] - GEM0] + GEM0
    216  f358		       00 66	   SHARD_X    =	%01100110
    217  f358		       00 60	   SHARD_Y    =	%01100000
    218  f358							; Opcodes
    219  f358							; SHARD_0A	   = BC_NOP
    220  f358		       00 86	   SHARD_1A   =	BC_STX
    221  f358		       00 1c	   SHARD_1A_REG_0 =	[SHARD_LUT_RF1 == 1 ? REFP1 - GRP1] + GRP1
    222  f358		       00 1c	   SHARD_1A_REG =	[SHARD_0A_RST ? NOP_REG - SHARD_1A_REG_0] + SHARD_1A_REG_0
    223  f358		       00 84	   SHARD_2A   =	BC_STY
    224  f358		       00 1c	   SHARD_2A_REG =	[SHARD_LUT_RF1 == 2 ? REFP1 - GRP1] + GRP1
    225  f358		       00 84	   SHARD_3A   =	BC_STY
    226  f358		       00 1c	   SHARD_3A_REG =	[SHARD_LUT_RF1 == 3 ? REFP1 - GRP1] + GRP1
    227  f358		       00 01	   SHARD_4A_VD1 =	[SHARD_LUT_VD1 == 4]
    228  f358		       00 86	   SHARD_4A   =	BC_STX
    229  f358
    230  f358		       00 aa	   SENTINEL   =	%010101010
    231  f358
    232  f358							; Nibble Kernel A
      0  f358					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U0059 ????				      seg.U	ignoreme
    234 U0059 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    235 U005b ????	       86 a3		      stx	BuildKernelX
    236 U005d ????	       86 a4		      stx	BuildKernelY
    237 U005f ????	       86 a5		      stx	BuildKernelZ
    238 U0061 ????
    239 U0061 ????						; Gemini 1A
    240 U0061 ????	       a2 00		      ldx	#SHARD_0A_RST
      0 U0063 ????				      NIBBLE_IF	ne
    242 U0063 ????						; Special: Encoding RST0
    243 U0063 ????						; Rewrite lda RamKernelPF1 to be #immediate
    244 U0063 ????	       a0 a9		      ldy	#BC_LDA_IMM
    245 U0065 ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    246 U0068 ????	       a0 a0		      ldy	#%10100000
    247 U006a ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    248 U006d ????						; Store 1A in GRP0
    249 U006d ????	       a0 66		      ldy	#GEM1
    250 U006f ????	       84 a6		      sty	BuildKernelGrp0
    251 U0071 ????						; Gemini 1A is RESPx
    252 U0071 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    253 U0073 ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    254 U0076 ????						; Turn 3-cycle NOP into 4-cycle
    255 U0076 ????	       a0 14		      ldy	#$14
    256 U0078 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U007b ????				      NIBBLE_ELSE
    258 U007b ????						; Store 0A in GRP0
    259 U007b ????	       a0 06		      ldy	#GEM0
    260 U007d ????	       84 a6		      sty	BuildKernelGrp0
    261 U007f ????
    262 U007f ????	       a2 00		      ldx	#SHARD_1A_RST
      0 U0081 ????				      NIBBLE_IF	ne
      0 U0081 ????				      NIBBLE_WRITE	KernelA_D_W + 1, #RESP1	; RESET
      0 U0081 ????				      NIBBLE_ELSE
    266 U0081 ????						; Calculate the 1A value
    267 U0081 ????			  -	      if	SHARD_LUT_RF1
    268 U0081 ????			  -	      ldy	#REFP1
    269 U0081 ????				      else
    270 U0081 ????	       a0 66		      ldy	#GEM1
    271 U0083 ????	       20 7a f2 	      jsr	KernelA_UpdateRegs
    272 U0086 ????	       84 9a		      sty	RamKernelGemini1
    273 U0088 ????
    274 U0088 ????	       a0 1c		      ldy	#GRP1
    275 U008a ????				      endif
    276 U008a ????	       84 9b		      sty	RamKernelGemini1Reg
    277 U008c ????
      0 U008c ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U008c ????				      NIBBLE_END_IF
      0 U008c ????				      NIBBLE_END_IF
    281 U008c ????
    282 U008c ????						; Gemini 2A
    283 U008c ????	       a2 01		      ldx	#SHARD_2A_RST
      0 U008e ????				      NIBBLE_IF	ne
      0 U008e ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U008e ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U008e ????				      NIBBLE_ELSE
    288 U008e ????						; FIXME Calculate the 2A value
    289 U008e ????
      0 U008e ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
    291 U008e ????	       a0 00		      ldy	#GEM2
    292 U0090 ????	       20 7a f2 	      jsr	KernelA_UpdateRegs
    293 U0093 ????	       84 9c		      sty	RamKernelGemini2
      0 U0095 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, #SHARD_2A_REG	; STX
      0 U0095 ????				      NIBBLE_END_IF
    296 U0095 ????
    297 U0095 ????						; Gemini 3A
    298 U0095 ????	       a2 00		      ldx	#SHARD_3A_RST
      0 U0097 ????				      NIBBLE_IF	ne
      0 U0097 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0097 ????				      NIBBLE_ELSE
    302 U0097 ????						; FIXME Calculate the 3A value
    303 U0097 ????
    304 U0097 ????	       a0 84		      ldy	#SHARD_3A
    305 U0099 ????	       20 7a f2 	      jsr	KernelA_UpdateRegs
    306 U009c ????	       84 9e		      sty	RamKernelGemini3
      0 U009e ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, #SHARD_3A_REG	; STY
      0 U009e ????				      NIBBLE_END_IF
      0 U009e ????				      NIBBLE_END_KERNEL
      1  f358					      seg	CodeBank3
    310  f358
      0  f358					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U009e ????				      seg.U	ignoreme
    312 U009e ????						; Gemini 4A
    313 U009e ????	       a2 01		      ldx	#SHARD_4A_VD1
      0 U00a0 ????				      NIBBLE_IF	ne
      0 U00a0 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U00a0 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U00a0 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    318 U00a0 ????
    319 U00a0 ????						; Set PHP
      0 U00a0 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
      0 U00a0 ????				      NIBBLE_ELSE
    322 U00a0 ????						; FIXME Calculate the 4A value
    323 U00a0 ????	       a0 86		      ldy	#SHARD_4A
    324 U00a2 ????	       20 7a f2 	      jsr	KernelA_UpdateRegs
    325 U00a5 ????	       84 a0		      sty	RamKernelGemini4
    326 U00a7 ????
      0 U00a7 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U00a7 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U00a7 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    330 U00a7 ????
    331 U00a7 ????						; Set PHP
      0 U00a7 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U00a7 ????				      NIBBLE_END_IF
    334 U00a7 ????
    335 U00a7 ????						; VD1
    336 U00a7 ????						; ldy #SHARD_VD1
    337 U00a7 ????						; sty [KernelA_VDEL1 - $100]
      0 U00a7 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], #SHARD_VD1
    339 U00a7 ????						; GRP0
    340 U00a7 ????						; ldy #SHARD_GRP0
    341 U00a7 ????						; sty [KernelA_VDEL0 - $100]
      0 U00a7 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], #SHARD_GRP0
    343 U00a7 ????						; X
    344 U00a7 ????						; ldy #SHARD_X
    345 U00a7 ????						; sty RamKernelX
      0 U00a7 ????				      NIBBLE_WRITE	RamKernelX, #SHARD_X
    347 U00a7 ????						; Y
      0 U00a7 ????				      NIBBLE_WRITE	[KernelA_STY - $100], #SHARD_Y
    349 U00a7 ????
    350 U00a7 ????						; Gemini 5A
    351 U00a7 ????						; TODO eventually...?
      0 U00a7 ????				      NIBBLE_END_KERNEL
      1  f358					      seg	CodeBank3
    353  f358
    354  f358							; Nibble Kernel B
      0  f358					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U00a7 ????				      seg.U	ignoreme
    356 U00a7 ????						; X
    357 U00a7 ????	       a0 03		      ldy	#%00000011
    358 U00a9 ????	       84 98		      sty	RamKernelX
    359 U00ab ????						; Y
    360 U00ab ????	       a0 33		      ldy	#%00110011
    361 U00ad ????	       8c 11 f0 	      sty	[KernelB_STY - $100]
    362 U00b0 ????
    363 U00b0 ????	       e0 00		      cpx	#$00
      0 U00b2 ????				      NIBBLE_IF	cs
      0 U00b2 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP_RESET
    366 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 0], #BC_STA
    367 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 1], #EMERALD_SP
    368 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 2], #BC_PHP
      0 U00b2 ????				      NIBBLE_ELSE
      0 U00b2 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
    371 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 0], #BC_PHP
    372 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 1], #BC_STA
    373 U00b2 ????						; NIBBLE_WRITE [KernelB_H_W + 2], #EMERALD_SP_RESET
      0 U00b2 ????				      NIBBLE_END_IF
      0 U00b2 ????				      NIBBLE_END_KERNEL
      1  f358					      seg	CodeBank3
    376  f358
    377  f358							; TODO do this for all rows
    378  f358				   DBG_NIBBLE_BUILD subroutine
    379  f358		       ae 00 f1 	      ldx	$f100
    380  f35b		       e0 0a		      cpx	#$a
    381  f35d		       f0 03		      beq	[. + 5]
    382  f35f		       4c f4 f3 	      jmp	.kernel_b
    383  f362				   .kernel_a
      0  f362					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f362		       a9 00		      lda	#0
      2  f364		       a2 aa		      ldx	#SENTINEL
      3  f366		       86 a3		      stx	BuildKernelX
      4  f368		       86 a4		      stx	BuildKernelY
      5  f36a		       86 a5		      stx	BuildKernelZ
      6  f36c
      7  f36c		       a2 00		      ldx	#SHARD_0A_RST
      8  f36e				   .if_1
      9  f36e		       f0 1e		      beq	.else_1
     10  f370		       38		      sec
     11  f371		       2a		      rol
     12  f372
     13  f372
     14  f372		       a0 a9		      ldy	#BC_LDA_IMM
     15  f374		       8c 16 f0 	      sty	[KernelA_B - $100]
     16  f377		       a0 a0		      ldy	#%10100000
     17  f379		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     18  f37c
     19  f37c		       a0 66		      ldy	#GEM1
     20  f37e		       84 a6		      sty	BuildKernelGrp0
     21  f380
     22  f380		       a0 11		      ldy	#EMERALD_SP_RESET
     23  f382		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     24  f385
     25  f385		       a0 14		      ldy	#$14
     26  f387		       8c 1a f0 	      sty	[KernelA_D - $100]
     27  f38a		       4c aa f3 	      jmp	.endif_1
     28  f38d
     29  f38d		       2a		      rol
     30  f38e
     31  f38e				   .else_1
     32  f38e		       18		      clc
     33  f38f		       2a		      rol
     34  f390
     35  f390		       a0 06		      ldy	#GEM0
     36  f392		       84 a6		      sty	BuildKernelGrp0
     37  f394		       a2 00		      ldx	#SHARD_1A_RST
     38  f396				   .if_2
     39  f396		       f0 05		      beq	.else_2
     40  f398		       38		      sec
     41  f399		       2a		      rol
     42  f39a		       4c aa f3 	      jmp	.endif_2
     43  f39d
     44  f39d
     45  f39d				   .else_2
     46  f39d		       18		      clc
     47  f39e		       2a		      rol
     48  f39f
     49  f39f				  -	      if	SHARD_LUT_RF1
     50  f39f				  -	      ldy	#REFP1
     51  f39f					      else
     52  f39f		       a0 66		      ldy	#GEM1
     53  f3a1		       20 7a f2 	      jsr	KernelA_UpdateRegs
     54  f3a4		       84 9a		      sty	RamKernelGemini1
     55  f3a6		       a0 1c		      ldy	#GRP1
     56  f3a8					      endif
     57  f3a8		       84 9b		      sty	RamKernelGemini1Reg
     58  f3aa
     59  f3aa
     60  f3aa				   .endif_2
     61  f3aa
     62  f3aa
     63  f3aa				   .endif_1
     64  f3aa
     65  f3aa		       a2 01		      ldx	#SHARD_2A_RST
     66  f3ac				   .if_3
     67  f3ac		       f0 05		      beq	.else_3
     68  f3ae		       38		      sec
     69  f3af		       2a		      rol
     70  f3b0		       4c bc f3 	      jmp	.endif_3
     71  f3b3
     72  f3b3
     73  f3b3				   .else_3
     74  f3b3		       18		      clc
     75  f3b4		       2a		      rol
     76  f3b5
     77  f3b5		       a0 00		      ldy	#GEM2
     78  f3b7		       20 7a f2 	      jsr	KernelA_UpdateRegs
     79  f3ba		       84 9c		      sty	RamKernelGemini2
     80  f3bc
     81  f3bc
     82  f3bc				   .endif_3
     83  f3bc
     84  f3bc		       a2 00		      ldx	#SHARD_3A_RST
     85  f3be				   .if_4
     86  f3be		       f0 05		      beq	.else_4
     87  f3c0		       38		      sec
     88  f3c1		       2a		      rol
     89  f3c2		       4c ce f3 	      jmp	.endif_4
     90  f3c5
     91  f3c5
     92  f3c5				   .else_4
     93  f3c5		       18		      clc
     94  f3c6		       2a		      rol
     95  f3c7
     96  f3c7		       a0 84		      ldy	#SHARD_3A
     97  f3c9		       20 7a f2 	      jsr	KernelA_UpdateRegs
     98  f3cc		       84 9e		      sty	RamKernelGemini3
     99  f3ce
    100  f3ce
    101  f3ce				   .endif_4
    102  f3ce
    103  f3ce		       2a		      rol
    104  f3cf		       2a		      rol
    105  f3d0		       2a		      rol
    106  f3d1		       2a		      rol
    385  f3d2		       85 90		      sta	RamNibbleVar1
      0  f3d4					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f3d4		       a9 00		      lda	#0
      2  f3d6
      3  f3d6		       a2 01		      ldx	#SHARD_4A_VD1
      4  f3d8				   .if_1
      5  f3d8		       f0 05		      beq	.else_1
      6  f3da		       38		      sec
      7  f3db		       2a		      rol
      8  f3dc
      9  f3dc		       4c e8 f3 	      jmp	.endif_1
     10  f3df
     11  f3df
     12  f3df				   .else_1
     13  f3df		       18		      clc
     14  f3e0		       2a		      rol
     15  f3e1
     16  f3e1		       a0 86		      ldy	#SHARD_4A
     17  f3e3		       20 7a f2 	      jsr	KernelA_UpdateRegs
     18  f3e6		       84 a0		      sty	RamKernelGemini4
     19  f3e8
     20  f3e8
     21  f3e8
     22  f3e8				   .endif_1
     23  f3e8
     24  f3e8
     25  f3e8
     26  f3e8
     27  f3e8
     28  f3e8
     29  f3e8
     30  f3e8
     31  f3e8
     32  f3e8
     33  f3e8
     34  f3e8
     35  f3e8
     36  f3e8		       2a		      rol
     37  f3e9		       2a		      rol
     38  f3ea		       2a		      rol
     39  f3eb		       2a		      rol
     40  f3ec		       2a		      rol
     41  f3ed		       2a		      rol
     42  f3ee		       2a		      rol
    387  f3ef		       85 91		      sta	RamNibbleVar2
    388  f3f1		       4c 13 f4 	      jmp	.next
    389  f3f4				   .kernel_b
      0  f3f4					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f3f4		       a9 00		      lda	#0
      2  f3f6
      3  f3f6		       a0 03		      ldy	#%00000011
      4  f3f8		       84 98		      sty	RamKernelX
      5  f3fa
      6  f3fa		       a0 33		      ldy	#%00110011
      7  f3fc		       8c 11 f0 	      sty	[KernelB_STY - $100]
      8  f3ff
      9  f3ff		       e0 00		      cpx	#$00
     10  f401				   .if_1
     11  f401		       90 05		      bcc	.else_1
     12  f403		       38		      sec
     13  f404		       2a		      rol
     14  f405
     15  f405
     16  f405
     17  f405		       4c 0a f4 	      jmp	.endif_1
     18  f408
     19  f408
     20  f408				   .else_1
     21  f408		       18		      clc
     22  f409		       2a		      rol
     23  f40a
     24  f40a
     25  f40a
     26  f40a
     27  f40a
     28  f40a				   .endif_1
     29  f40a
     30  f40a		       2a		      rol
     31  f40b		       2a		      rol
     32  f40c		       2a		      rol
     33  f40d		       2a		      rol
     34  f40e		       2a		      rol
     35  f40f		       2a		      rol
     36  f410		       2a		      rol
    391  f411		       85 90		      sta	RamNibbleVar1
    392  f413				   .next
    393  f413
    394  f413							; TODO move this into the row kernel
    395  f413				   DBG_NIBBLE_RUN subroutine
    396  f413		       ae 00 f1 	      ldx	$f100
    397  f416		       e0 0a		      cpx	#$a
    398  f418		       f0 03		      beq	[. + 5]
    399  f41a		       4c c6 f4 	      jmp	.kernel_b
    400  f41d				   .kernel_a
    401  f41d		       a5 90		      lda	RamNibbleVar1
      0  f41f					      NIBBLE_gem_kernel_a_1
      1  f41f				   .if_1
      2  f41f		       0a		      asl
      3  f420		       90 03		      bcc	.else_1
      4  f422		       4c 3a f4 	      jmp	.endif_1
      5  f425				   .else_1
      6  f425				   .if_2
      7  f425		       0a		      asl
      8  f426		       90 08		      bcc	.else_2
      9  f428		       a2 11		      ldx	#RESP1
     10  f42a		       8e 1b f0 	      stx	[KernelA_D_W + 1 + 0]
     11  f42d		       4c 3a f4 	      jmp	.endif_2
     12  f430				   .else_2
     13  f430		       a6 9a		      ldx	RamKernelGemini1
     14  f432		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     15  f435		       a6 9b		      ldx	RamKernelGemini1Reg
     16  f437		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     17  f43a				   .endif_2
     18  f43a				   .endif_1
     19  f43a				   .if_3
     20  f43a		       0a		      asl
     21  f43b		       90 0d		      bcc	.else_3
     22  f43d		       a2 79		      ldx	#NOP_REG
     23  f43f		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     24  f442		       a2 11		      ldx	#RESP1
     25  f444		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     26  f447		       4c 59 f4 	      jmp	.endif_3
     27  f44a				   .else_3
     28  f44a		       a2 11		      ldx	#RESP1
     29  f44c		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     30  f44f		       a6 9c		      ldx	RamKernelGemini2
     31  f451		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     32  f454		       a2 1c		      ldx	#SHARD_2A_REG
     33  f456		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     34  f459				   .endif_3
     35  f459				   .if_4
     36  f459		       0a		      asl
     37  f45a		       90 08		      bcc	.else_4
     38  f45c		       a2 11		      ldx	#RESP1
     39  f45e		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     40  f461		       4c 6e f4 	      jmp	.endif_4
     41  f464				   .else_4
     42  f464		       a6 9e		      ldx	RamKernelGemini3
     43  f466		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     44  f469		       a2 1c		      ldx	#SHARD_3A_REG
     45  f46b		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     46  f46e				   .endif_4
    403  f46e		       a5 91		      lda	RamNibbleVar2
      0  f470					      NIBBLE_gem_kernel_a_2
      1  f470				   .if_1
      2  f470		       0a		      asl
      3  f471		       90 20		      bcc	.else_1
      4  f473		       a2 85		      ldx	#BC_STA
      5  f475		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f478		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f47a		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f47d		       a2 85		      ldx	#BC_STA
      9  f47f		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f482		       a2 0e		      ldx	#PF1
     11  f484		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f487		       a2 08		      ldx	#BC_PHP
     13  f489		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f48c		       a2 26		      ldx	#VDELP1
     15  f48e		       86 97		      stx	[RamKernelPhpTarget + 0]
     16  f490		       4c b0 f4 	      jmp	.endif_1
     17  f493				   .else_1
     18  f493		       a2 08		      ldx	#BC_PHP
     19  f495		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f498		       a2 85		      ldx	#BC_STA
     21  f49a		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f49d		       a2 0e		      ldx	#PF1
     23  f49f		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f4a2		       a6 a0		      ldx	RamKernelGemini4
     25  f4a4		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f4a7		       a2 1c		      ldx	#EMERALD_SP
     27  f4a9		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f4ac		       a2 11		      ldx	#RESP1
     29  f4ae		       86 97		      stx	[RamKernelPhpTarget + 0]
     30  f4b0				   .endif_1
     31  f4b0		       a2 06		      ldx	#SHARD_VD1
     32  f4b2		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f4b5		       a2 06		      ldx	#SHARD_GRP0
     34  f4b7		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f4ba		       a2 66		      ldx	#SHARD_X
     36  f4bc		       86 98		      stx	[RamKernelX + 0]
     37  f4be		       a2 60		      ldx	#SHARD_Y
     38  f4c0		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    405  f4c3		       4c d6 f4 	      jmp	.next
    406  f4c6				   .kernel_b
    407  f4c6		       a5 90		      lda	RamNibbleVar1
      0  f4c8					      NIBBLE_gem_kernel_b
      1  f4c8				   .if_1
      2  f4c8		       0a		      asl
      3  f4c9		       90 07		      bcc	.else_1
      4  f4cb		       a2 11		      ldx	#EMERALD_SP_RESET
      5  f4cd		       86 97		      stx	[RamKernelPhpTarget + 0]
      6  f4cf		       4c d6 f4 	      jmp	.endif_1
      7  f4d2				   .else_1
      8  f4d2		       a2 1c		      ldx	#EMERALD_SP
      9  f4d4		       86 97		      stx	[RamKernelPhpTarget + 0]
     10  f4d6				   .endif_1
    409  f4d6				   .next
    410  f4d6
    411  f4d6				   VerticalBlankEnd
    412  f4d6							; Wait until the end of Vertical blank.
      0  f4d6					      TIMER_WAIT
      1  f4d6				   .waittimer
      2  f4d6		       ad 84 02 	      lda	INTIM
      3  f4d9		       d0 fb		      bne	.waittimer
      4  f4db		       85 02		      sta	WSYNC
      0  f4dd					      ASSERT_RUNTIME	"_scan == #37"
      1  f4dd				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f4dd  && !(  _scan == #37  ) }
      2  f4dd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    415  f4dd
    416  f4dd							; Save stack pointer
    417  f4dd		       ba		      tsx
    418  f4de		       86 94		      stx	RamStackBkp
    419  f4e0
    420  f4e0							; Start rendering the kernel.
    421  f4e0		       4c ce f5 	      jmp	KernelBorder
    422  f4e3
    423  f500		       00 00 00 00*	      align	256	; TODO why
    424  f500
    425  f500				   FrameEnd   subroutine
    426  f500		       85 02		      sta	WSYNC
    427  f502
    428  f502							; Blank all background colors.
    429  f502		       a9 00		      lda	#0
    430  f504		       85 08		      sta	COLUPF
    431  f506		       85 0f		      sta	PF2
    432  f508		       85 0e		      sta	PF1
    433  f50a		       85 1c		      sta	EMERALD_SP
    434  f50c
    435  f50c							; Guide lines (2x)
    436  f50c		       a9 02		      lda	#SIGNAL_LINE
    437  f50e		       85 09		      sta	COLUBK
    438  f510					      REPEAT	6
    439  f510		       85 02		      sta	WSYNC
    438  f510					      REPEND
    439  f512		       85 02		      sta	WSYNC
    438  f512					      REPEND
    439  f514		       85 02		      sta	WSYNC
    438  f514					      REPEND
    439  f516		       85 02		      sta	WSYNC
    438  f516					      REPEND
    439  f518		       85 02		      sta	WSYNC
    438  f518					      REPEND
    439  f51a		       85 02		      sta	WSYNC
    440  f51c					      REPEND
    441  f51c		       a9 00		      lda	#$00
    442  f51e		       85 09		      sta	COLUBK
    443  f520
    444  f520							; Restore stack pointer
    445  f520		       a6 94		      ldx	RamStackBkp
    446  f522		       9a		      txs
    447  f523
    448  f523							; Display the rest of the blank screen.
      0  f523					      TIMER_SETUP	25
      1  f523				   .lines     SET	25
      2  f523		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f525		       85 02		      sta	WSYNC
      4  f527		       8d 96 02 	      sta	TIM64T
    450  f52a		       85 02		      sta	WSYNC
      0  f52c					      TIMER_WAIT
      1  f52c				   .waittimer
      2  f52c		       ad 84 02 	      lda	INTIM
      3  f52f		       d0 fb		      bne	.waittimer
      4  f531		       85 02		      sta	WSYNC
      0  f533					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f533				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f533  && !(  _scan == (#37 + #192)  ) }
      2  f533					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    453  f533
    454  f533							; Overscan
    455  f533				   Overscan   subroutine
    456  f533		       85 01		      sta	VBLANK
      0  f535					      TIMER_SETUP	29
      1  f535				   .lines     SET	29
      2  f535		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f537		       85 02		      sta	WSYNC
      4  f539		       8d 96 02 	      sta	TIM64T
    458  f53c
    459  f53c		       20 4c f5 	      jsr	MoveJoystick
    460  f53f		       20 83 f5 	      jsr	SpeedCalculation
    461  f542
      0  f542					      TIMER_WAIT
      1  f542				   .waittimer
      2  f542		       ad 84 02 	      lda	INTIM
      3  f545		       d0 fb		      bne	.waittimer
      4  f547		       85 02		      sta	WSYNC
      0  f549					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f549				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f549  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f549					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    464  f549
    465  f549		       4c a1 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f54c					      include	"game_input.s"
      1  f54c							; Handles input checking. Called from overscan.
      2  f54c
      3  f54c							; Read joystick movement and apply to object 0
      4  f54c				   MoveJoystick
      5  f54c							; Move vertically
      6  f54c							; (up and down are actually reversed since ypos starts at bottom)
      7  f54c							;     ldx YPos
      8  f54c		       a9 10		      lda	#%00010000	;Up?
      9  f54e		       2c 80 02 	      bit	SWCHA
     10  f551		       d0 0d		      bne	SkipMoveUp
     11  f553
     12  f553		       18		      clc
     13  f554		       a5 88		      lda	Speed2
     14  f556		       69 0c		      adc	#12
     15  f558		       85 88		      sta	Speed2
     16  f55a		       a5 87		      lda	Speed1
     17  f55c		       69 00		      adc	#00
     18  f55e		       85 87		      sta	Speed1
     19  f560
     20  f560				   SkipMoveUp
     21  f560		       a6 86		      ldx	XPos
     22  f562
     23  f562							; Only check left/right on odd frames;
     24  f562							; TODO make this just a fractional speed
     25  f562							; rather than dropping frames
     26  f562		       a9 01		      lda	#01
     27  f564		       25 83		      and	FrameCount
     28  f566		       d0 18		      bne	SkipMoveRight
     29  f568
     30  f568
     31  f568							; Move horizontally
     32  f568		       a9 40		      lda	#%01000000	;Left?
     33  f56a		       2c 80 02 	      bit	SWCHA
     34  f56d		       d0 05		      bne	SkipMoveLeft
     35  f56f		       e0 1d		      cpx	#29
     36  f571		       90 01		      bcc	SkipMoveLeft
     37  f573		       ca		      dex
     38  f574
     39  f574							; Reflect
     40  f574							;     lda #$ff
     41  f574							;     sta REFP0
     42  f574				   SkipMoveLeft
     43  f574		       a9 80		      lda	#%10000000	;Right?
     44  f576		       2c 80 02 	      bit	SWCHA
     45  f579		       d0 05		      bne	SkipMoveRight
     46  f57b		       e0 80		      cpx	#128
     47  f57d		       b0 01		      bcs	SkipMoveRight
     48  f57f		       e8		      inx
     49  f580
     50  f580							; Reflect
     51  f580							;     lda #$0
     52  f580							;     sta REFP0
     53  f580				   SkipMoveRight
     54  f580		       86 86		      stx	XPos
     55  f582		       60		      rts
     56  f583
     57  f583
     58  f583				   SpeedCalculation
     59  f583		       38		      sec
     60  f584		       a5 88		      lda	Speed2
     61  f586		       e9 07		      sbc	#7
     62  f588		       85 88		      sta	Speed2
     63  f58a		       a5 87		      lda	Speed1
     64  f58c		       e9 00		      sbc	#0
     65  f58e		       85 87		      sta	Speed1
     66  f590
     67  f590		       18		      clc
     68  f591		       a5 8a		      lda	YPos2
     69  f593		       65 88		      adc	Speed2
     70  f595		       85 8a		      sta	YPos2
     71  f597		       a5 89		      lda	YPos
     72  f599		       65 87		      adc	Speed1
     73  f59b		       85 89		      sta	YPos
     74  f59d
     75  f59d		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f59f		       b0 0a		      bcs	NewThing2
     77  f5a1
     78  f5a1							; Reset to floor
     79  f5a1		       a9 3e		      lda	#FLOOR_OFFSET
     80  f5a3		       85 89		      sta	YPos
     81  f5a5		       a9 00		      lda	#0
     82  f5a7		       85 87		      sta	Speed1
     83  f5a9		       85 88		      sta	Speed2
     84  f5ab				   NewThing2
     85  f5ab
     86  f5ab		       c9 be		      cmp	#CEILING_OFFSET
     87  f5ad		       90 0a		      bcc	.next
     88  f5af
     89  f5af							; Reset to ceiling
     90  f5af		       a9 be		      lda	#CEILING_OFFSET
     91  f5b1		       85 89		      sta	YPos
     92  f5b3		       a9 00		      lda	#0
     93  f5b5		       85 87		      sta	Speed1
     94  f5b7		       85 88		      sta	Speed2
     95  f5b9				   .next
     96  f5b9		       60		      rts
     97  f5ba
     98  f5ba
     99  f5ba
    100  f5ba							; Subroutine
    101  f5ba				   SetHorizPos
    102  f5ba		       85 02		      sta	WSYNC	; start a new line
    103  f5bc		       24 00		      bit	0	; waste 3 cycles
    104  f5be		       38		      sec		; set carry flag
    105  f5bf				   DivideLoop
    106  f5bf		       e9 0f		      sbc	#15	; subtract 15
    107  f5c1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f5c3		       49 07		      eor	#7	; calculate fine offset
    109  f5c5		       0a		      asl
    110  f5c6		       0a		      asl
    111  f5c7		       0a		      asl
    112  f5c8		       0a		      asl
    113  f5c9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f5cb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f5cd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f5ce					      include	"kernel_border.s"
      1  f5ce							; Visible Kernel
      2  f5ce
      3  f5ce				   KernelBorder subroutine
      4  f5ce		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f5d0
      6  f5d0							; First HMOVE
      7  f5d0		       85 2a		      sta	HMOVE
      8  f5d2
      9  f5d2							; Border top
     10  f5d2		       a9 00		      lda	#0
     11  f5d4		       85 08		      sta	COLUPF
     12  f5d6		       85 0e		      sta	PF1
     13  f5d8		       85 0f		      sta	PF2
     14  f5da		       a9 02		      lda	#SIGNAL_LINE
     15  f5dc		       85 09		      sta	COLUBK
     16  f5de
     17  f5de					      REPEAT	6
     18  f5de		       85 02		      sta	WSYNC
     17  f5de					      REPEND
     18  f5e0		       85 02		      sta	WSYNC
     17  f5e0					      REPEND
     18  f5e2		       85 02		      sta	WSYNC
     17  f5e2					      REPEND
     18  f5e4		       85 02		      sta	WSYNC
     17  f5e4					      REPEND
     18  f5e6		       85 02		      sta	WSYNC
     17  f5e6					      REPEND
     18  f5e8		       85 02		      sta	WSYNC
     19  f5ea					      REPEND
     20  f5ea
     21  f5ea		       a9 00		      lda	#0
     22  f5ec		       85 09		      sta	COLUBK
     23  f5ee		       85 02		      sta	WSYNC
     24  f5f0
     25  f5f0							; Start top border
     26  f5f0				   border_top
     27  f5f0							; Make the playfield solid.
     28  f5f0		       a9 3f		      lda	#%00111111
     29  f5f2		       85 0e		      sta	PF1
     30  f5f4		       a9 ff		      lda	#%11111111
     31  f5f6		       85 0f		      sta	PF2
     32  f5f8
     33  f5f8		       a9 42		      lda	#COL_BG
     34  f5fa		       a0 00		      ldy	#0
     35  f5fc
     36  f5fc							; X_XXXX_XX
     37  f5fc							; Commented lines removed to save on space.
     38  f5fc		       85 08		      sta	COLUPF
     39  f5fe		       85 02		      sta	WSYNC
     40  f600		       84 08		      sty	COLUPF
     41  f602		       85 02		      sta	WSYNC
     42  f604		       85 08		      sta	COLUPF
     43  f606		       85 02		      sta	WSYNC
     44  f608							; sta COLUPF
     45  f608		       85 02		      sta	WSYNC
     46  f60a							; sta COLUPF
     47  f60a		       85 02		      sta	WSYNC
     48  f60c		       84 08		      sty	COLUPF
     49  f60e		       85 02		      sta	WSYNC
     50  f610		       85 08		      sta	COLUPF
     51  f612
     52  f612		       85 02		      sta	WSYNC
     53  f614							; sta COLUPF
     54  f614
     55  f614				   PlayArea
     56  f614							; PF is now the playing area
      0  f614					      ASSERT_RUNTIME	"_scycles == #0"
      1  f614				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f614  && !(  _scycles == #0  ) }
      2  f614					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f614					      sleep	61
      1  f614				   .CYCLES    SET	61
      2  f614
      3  f614				  -	      IF	.CYCLES < 2
      4  f614				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f614				  -	      ERR
      6  f614					      ENDIF
      7  f614
      8  f614					      IF	.CYCLES & 1
      9  f614					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f614		       04 00		      nop	0
     11  f616				  -	      ELSE
     12  f616				  -	      bit	VSYNC
     13  f616					      ENDIF
     14  f616				   .CYCLES    SET	.CYCLES - 3
     15  f616					      ENDIF
     16  f616
     17  f616					      REPEAT	.CYCLES / 2
     18  f616		       ea		      nop
     17  f616					      REPEND
     18  f617		       ea		      nop
     17  f617					      REPEND
     18  f618		       ea		      nop
     17  f618					      REPEND
     18  f619		       ea		      nop
     17  f619					      REPEND
     18  f61a		       ea		      nop
     17  f61a					      REPEND
     18  f61b		       ea		      nop
     17  f61b					      REPEND
     18  f61c		       ea		      nop
     17  f61c					      REPEND
     18  f61d		       ea		      nop
     17  f61d					      REPEND
     18  f61e		       ea		      nop
     17  f61e					      REPEND
     18  f61f		       ea		      nop
     17  f61f					      REPEND
     18  f620		       ea		      nop
     17  f620					      REPEND
     18  f621		       ea		      nop
     17  f621					      REPEND
     18  f622		       ea		      nop
     17  f622					      REPEND
     18  f623		       ea		      nop
     17  f623					      REPEND
     18  f624		       ea		      nop
     17  f624					      REPEND
     18  f625		       ea		      nop
     17  f625					      REPEND
     18  f626		       ea		      nop
     17  f626					      REPEND
     18  f627		       ea		      nop
     17  f627					      REPEND
     18  f628		       ea		      nop
     17  f628					      REPEND
     18  f629		       ea		      nop
     17  f629					      REPEND
     18  f62a		       ea		      nop
     17  f62a					      REPEND
     18  f62b		       ea		      nop
     17  f62b					      REPEND
     18  f62c		       ea		      nop
     17  f62c					      REPEND
     18  f62d		       ea		      nop
     17  f62d					      REPEND
     18  f62e		       ea		      nop
     17  f62e					      REPEND
     18  f62f		       ea		      nop
     17  f62f					      REPEND
     18  f630		       ea		      nop
     17  f630					      REPEND
     18  f631		       ea		      nop
     17  f631					      REPEND
     18  f632		       ea		      nop
     19  f633					      REPEND
     59  f633		       a9 00		      lda	#%00000000
     60  f635		       85 0d		      sta	PF0
     61  f637		       a9 20		      lda	#%00100000
     62  f639		       85 0e		      sta	PF1
     63  f63b		       a9 00		      lda	#%00000000
     64  f63d		       85 0f		      sta	PF2
      0  f63f					      ASSERT_RUNTIME	"_scycles == #0"
      1  f63f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f63f  && !(  _scycles == #0  ) }
      2  f63f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f63f					      sleep	7
      1  f63f				   .CYCLES    SET	7
      2  f63f
      3  f63f				  -	      IF	.CYCLES < 2
      4  f63f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f63f				  -	      ERR
      6  f63f					      ENDIF
      7  f63f
      8  f63f					      IF	.CYCLES & 1
      9  f63f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f63f		       04 00		      nop	0
     11  f641				  -	      ELSE
     12  f641				  -	      bit	VSYNC
     13  f641					      ENDIF
     14  f641				   .CYCLES    SET	.CYCLES - 3
     15  f641					      ENDIF
     16  f641
     17  f641					      REPEAT	.CYCLES / 2
     18  f641		       ea		      nop
     17  f641					      REPEND
     18  f642		       ea		      nop
     19  f643					      REPEND
     67  f643		       4c 75 f6 	      jmp	row_start
     68  f646							; enter row on cycle 10.
     69  f646
     70  f646							; reset the background for bottom of playfield
     71  f646				   border_bottom
     72  f646							;sta WSYNC
     73  f646
     74  f646							; Form the bottom of the level frame.
     75  f646		       a9 3f		      lda	#%00111111
     76  f648		       85 0e		      sta	PF1
     77  f64a		       a9 ff		      lda	#%11111111
     78  f64c		       85 0f		      sta	PF2
     79  f64e
     80  f64e							; Clear all sprites.
     81  f64e		       a9 00		      lda	#0
     82  f650		       85 1c		      sta	EMERALD_SP
     83  f652		       85 1b		      sta	JET_SP
     84  f654		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f656
     86  f656		       a9 42		      lda	#COL_BG
     87  f658		       a0 00		      ldy	#0
     88  f65a		       85 02		      sta	WSYNC
     89  f65c
     90  f65c		       84 08		      sty	COLUPF
     91  f65e		       85 02		      sta	WSYNC
     92  f660
     93  f660		       85 08		      sta	COLUPF
     94  f662		       85 02		      sta	WSYNC
     95  f664
     96  f664		       85 02		      sta	WSYNC
     97  f666
     98  f666		       85 02		      sta	WSYNC
     99  f668
    100  f668		       84 08		      sty	COLUPF
    101  f66a		       85 02		      sta	WSYNC
    102  f66c
    103  f66c		       85 08		      sta	COLUPF
    104  f66e		       85 02		      sta	WSYNC
    105  f670		       85 02		      sta	WSYNC
    106  f672		       4c 00 f5 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f675					      include	"kernel_row.s"
      1  f675							; Frame Start
      2  f675
      3  f675							; Macros for calculating sprite values (GRPx).
      4  f675
      5  f675							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f675					      mac	kernel_load_player
      7  f675							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f675					      dcp	SpriteEnd	; 5c
      9  f675					      ldy	#0	; 2c
     10  f675							; constant 6c:
     11  f675					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f675					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f675					      ldy	SpriteEnd
     14  f675							; 4c
     15  f675					      ldx	Frame0,Y
     16  f675					      endm
     17  f675
     18  f675							; mac jet_spritedata_calc
     19  f675							;
     20  f675							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f675							; GRP0.
     22  f675					      mac	jet_spritedata_calc
     23  f675							; loader
     24  f675					      lda	#SPRITE_HEIGHT
     25  f675					      dcp	SpriteEnd
     26  f675					      ldy	SpriteEnd
     27  f675
     28  f675							; 4c
     29  f675							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f675							; from Frame0 + Y must never cross a page boundary.
     31  f675					      lda	Frame0,Y
     32  f675							; 6c
     33  f675					      .byte	$b0, $01	;2c / 3c (taken)
     34  f675					      .byte	$2c	; 4c / 0c
     35  f675					      sta	JET_SP	; 0c / 3c
     36  f675					      endm
     37  f675
     38  f675				   row_start
     39  f675
     40  f675							; [scanline 1]
     41  f675				   row_1
     42  f675							; Enter after scanline starts on row "9" and wraps
      0  f675					      ASSERT_RUNTIME	"_scycles == #10"
      1  f675				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f675  && !(  _scycles == #10  ) }
      2  f675					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f675
      0  f675					      jet_spritedata_calc
      1  f675
      2  f675		       a9 09		      lda	#SPRITE_HEIGHT
      3  f677		       c7 85		      dcp	SpriteEnd
      4  f679		       a4 85		      ldy	SpriteEnd
      5  f67b
      6  f67b
      7  f67b
      8  f67b
      9  f67b		       b9 00 f9 	      lda	Frame0,Y
     10  f67e
     11  f67e		       b0 01		      .byte.b	$b0, $01
     12  f680		       2c		      .byte.b	$2c
     13  f681		       85 1b		      sta	JET_SP
     46  f683
     47  f683							; [[[Nibble VM.]]]
     48  f683		       85 02		      sta	WSYNC
     49  f685
     50  f685							; sleep 46
     51  f685
      0  f685					      ASSERT_RUNTIME	"_scycles == #0"
      1  f685				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f685  && !(  _scycles == #0  ) }
      2  f685					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f685
     54  f685							; [scanline 2]
     55  f685				   row_2
      0  f685					      jet_spritedata_calc
      1  f685
      2  f685		       a9 09		      lda	#SPRITE_HEIGHT
      3  f687		       c7 85		      dcp	SpriteEnd
      4  f689		       a4 85		      ldy	SpriteEnd
      5  f68b
      6  f68b
      7  f68b
      8  f68b
      9  f68b		       b9 00 f9 	      lda	Frame0,Y
     10  f68e
     11  f68e		       b0 01		      .byte.b	$b0, $01
     12  f690		       2c		      .byte.b	$2c
     13  f691		       85 1b		      sta	JET_SP
     57  f693
     58  f693							; Black out playfield
     59  f693							; TODO This should be done with playfield pixels, not color.
     60  f693		       a9 00		      lda	#0
     61  f695		       85 08		      sta	COLUPF
     62  f697
     63  f697							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  f697		       a6 97		      ldx	RamKernelPhpTarget
     65  f699		       9a		      txs
     66  f69a
     67  f69a							; [[[Nibble VM.]]]
      0  f69a					      sleep	30
      1  f69a				   .CYCLES    SET	30
      2  f69a
      3  f69a				  -	      IF	.CYCLES < 2
      4  f69a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f69a				  -	      ERR
      6  f69a					      ENDIF
      7  f69a
      8  f69a				  -	      IF	.CYCLES & 1
      9  f69a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f69a				  -	      nop	0
     11  f69a				  -	      ELSE
     12  f69a				  -	      bit	VSYNC
     13  f69a				  -	      ENDIF
     14  f69a				  -.CYCLES    SET	.CYCLES - 3
     15  f69a					      ENDIF
     16  f69a
     17  f69a					      REPEAT	.CYCLES / 2
     18  f69a		       ea		      nop
     17  f69a					      REPEND
     18  f69b		       ea		      nop
     17  f69b					      REPEND
     18  f69c		       ea		      nop
     17  f69c					      REPEND
     18  f69d		       ea		      nop
     17  f69d					      REPEND
     18  f69e		       ea		      nop
     17  f69e					      REPEND
     18  f69f		       ea		      nop
     17  f69f					      REPEND
     18  f6a0		       ea		      nop
     17  f6a0					      REPEND
     18  f6a1		       ea		      nop
     17  f6a1					      REPEND
     18  f6a2		       ea		      nop
     17  f6a2					      REPEND
     18  f6a3		       ea		      nop
     17  f6a3					      REPEND
     18  f6a4		       ea		      nop
     17  f6a4					      REPEND
     18  f6a5		       ea		      nop
     17  f6a5					      REPEND
     18  f6a6		       ea		      nop
     17  f6a6					      REPEND
     18  f6a7		       ea		      nop
     17  f6a7					      REPEND
     18  f6a8		       ea		      nop
     19  f6a9					      REPEND
     69  f6a9
     70  f6a9							; Load PF1 value
     71  f6a9		       a9 a0		      lda	#%10100000
     72  f6ab		       85 95		      sta	RamPF1Value
     73  f6ad
     74  f6ad		       a9 04		      lda	#4
     75  f6af		       8d 96 02 	      sta	TIM64T
     76  f6b2
     77  f6b2							; Enable playfield at end of scanline
     78  f6b2		       a9 42		      lda	#COL_BG
     79  f6b4		       85 08		      sta	COLUPF
     80  f6b6
     81  f6b6							; lda #%00001000
     82  f6b6							; sta REFP1
     83  f6b6
      0  f6b6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f6b6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f6b6  && !(  _scycles == #0  ) }
      2  f6b6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f6b6
     86  f6b6							; [scanline 3]
     87  f6b6				   row_3
      0  f6b6					      jet_spritedata_calc
      1  f6b6
      2  f6b6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f6b8		       c7 85		      dcp	SpriteEnd
      4  f6ba		       a4 85		      ldy	SpriteEnd
      5  f6bc
      6  f6bc
      7  f6bc
      8  f6bc
      9  f6bc		       b9 00 f9 	      lda	Frame0,Y
     10  f6bf
     11  f6bf		       b0 01		      .byte.b	$b0, $01
     12  f6c1		       2c		      .byte.b	$2c
     13  f6c2		       85 1b		      sta	JET_SP
     89  f6c4
     90  f6c4							; Pre-populate graphics.
     91  f6c4		       a9 09		      lda	#SPRITE_HEIGHT
      0  f6c6					      KERNEL_LOAD_PLAYER
      1  f6c6
      2  f6c6		       c7 85		      dcp	SpriteEnd
      3  f6c8		       a0 00		      ldy	#0
      4  f6ca
      5  f6ca		       b0 01		      .byte.b	$b0, $01
      6  f6cc		       2c		      .byte.b	$2c
      7  f6cd		       a4 85		      ldy	SpriteEnd
      8  f6cf
      9  f6cf		       be 00 f9 	      ldx	Frame0,Y
     93  f6d2		       86 96		      stx	RamKernelGRP0
      0  f6d4					      KERNEL_LOAD_PLAYER
      1  f6d4
      2  f6d4		       c7 85		      dcp	SpriteEnd
      3  f6d6		       a0 00		      ldy	#0
      4  f6d8
      5  f6d8		       b0 01		      .byte.b	$b0, $01
      6  f6da		       2c		      .byte.b	$2c
      7  f6db		       a4 85		      ldy	SpriteEnd
      8  f6dd
      9  f6dd		       be 00 f9 	      ldx	Frame0,Y
     95  f6e0		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f6e3		       a5 96		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  f6e5					      sleep	2
      1  f6e5				   .CYCLES    SET	2
      2  f6e5
      3  f6e5				  -	      IF	.CYCLES < 2
      4  f6e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6e5				  -	      ERR
      6  f6e5					      ENDIF
      7  f6e5
      8  f6e5				  -	      IF	.CYCLES & 1
      9  f6e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6e5				  -	      nop	0
     11  f6e5				  -	      ELSE
     12  f6e5				  -	      bit	VSYNC
     13  f6e5				  -	      ENDIF
     14  f6e5				  -.CYCLES    SET	.CYCLES - 3
     15  f6e5					      ENDIF
     16  f6e5
     17  f6e5					      REPEAT	.CYCLES / 2
     18  f6e5		       ea		      nop
     19  f6e6					      REPEND
     98  f6e6
     99  f6e6							; [scanlines 4-5]
    100  f6e6							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  f6e6		       a6 98		      ldx	RamKernelX
    102  f6e8		       38		      sec
      0  f6e9					      ASSERT_RUNTIME	"_scycles == #73"
      1  f6e9				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f6e9  && !(  _scycles == #73  ) }
      2  f6e9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f6e9		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  f6ec
    106  f6ec							; [scanline 6]
    107  f6ec
    108  f6ec							; Try to avoid page crossing in jet_spritedata_calc
    109  f6ec							; TODO enforce this with ASSERT_RUNTIME instead?
    110  f6f0		       00 00 00 00	      align	16
    111  f6f0
    112  f6f0				   row_after_kernel
    113  f6f0				   row_6
      0  f6f0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f6f0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f6f0  && !(  _scycles == #0  ) }
      2  f6f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  f6f0
    116  f6f0							; Cleanup from the kernel.
    117  f6f0		       a9 00		      lda	#0
    118  f6f2		       85 1e		      sta	EMERALD_MI_ENABLE
    119  f6f4		       85 1c		      sta	EMERALD_SP
    120  f6f6		       85 08		      sta	COLUPF
    121  f6f8		       85 26		      sta	VDELP1
    122  f6fa
      0  f6fa					      jet_spritedata_calc
      1  f6fa
      2  f6fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f6fc		       c7 85		      dcp	SpriteEnd
      4  f6fe		       a4 85		      ldy	SpriteEnd
      5  f700
      6  f700
      7  f700
      8  f700
      9  f700		       b9 00 f9 	      lda	Frame0,Y
     10  f703
     11  f703		       b0 01		      .byte.b	$b0, $01
     12  f705		       2c		      .byte.b	$2c
     13  f706		       85 1b		      sta	JET_SP
    124  f708
    125  f708							; Idle.
    126  f708		       85 02		      sta	WSYNC
    127  f70a
    128  f70a							; [scanline 7]
    129  f70a				   row_7
      0  f70a					      jet_spritedata_calc
      1  f70a
      2  f70a		       a9 09		      lda	#SPRITE_HEIGHT
      3  f70c		       c7 85		      dcp	SpriteEnd
      4  f70e		       a4 85		      ldy	SpriteEnd
      5  f710
      6  f710
      7  f710
      8  f710
      9  f710		       b9 00 f9 	      lda	Frame0,Y
     10  f713
     11  f713		       b0 01		      .byte.b	$b0, $01
     12  f715		       2c		      .byte.b	$2c
     13  f716		       85 1b		      sta	JET_SP
    131  f718
    132  f718		       a9 42		      lda	#COL_BG
    133  f71a		       85 08		      sta	COLUPF
    134  f71c
    135  f71c							; FRAMESWITCH
    136  f71c		       a9 01		      lda	#01
    137  f71e		       25 83		      and	FrameCount
    138  f720		       d0 13		      bne	loadframe2
    139  f722
    140  f722							; Perform gem loading for Kernel A.
    141  f722
    142  f722				   loadframe1
      0  f722					      ASSERT_RUNTIME	"_scycles == #32"
      1  f722				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f722  && !(  _scycles == #32  ) }
      2  f722					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f722
    145  f722							; Emerald byte setting 1A
    146  f722							; ldx #0
    147  f722							; lda KERNEL_STORAGE_R,X
    148  f722							; sta GEM_00_W
    149  f722							; inx
    150  f722							; lda KERNEL_STORAGE_R,X
    151  f722							; sta GEM_04_W
    152  f722							; inx
    153  f722							; lda KERNEL_STORAGE_R,X
    154  f722							; sta GEM_09_W
    155  f722							; inx
    156  f722
    157  f722		       85 02		      sta	WSYNC
    158  f724
    159  f724							; [scanline 8]
      0  f724					      jet_spritedata_calc
      1  f724
      2  f724		       a9 09		      lda	#SPRITE_HEIGHT
      3  f726		       c7 85		      dcp	SpriteEnd
      4  f728		       a4 85		      ldy	SpriteEnd
      5  f72a
      6  f72a
      7  f72a
      8  f72a
      9  f72a		       b9 00 f9 	      lda	Frame0,Y
     10  f72d
     11  f72d		       b0 01		      .byte.b	$b0, $01
     12  f72f		       2c		      .byte.b	$2c
     13  f730		       85 1b		      sta	JET_SP
    161  f732
    162  f732							; Emerald byte setting 1B
    163  f732							; lda KERNEL_STORAGE_R,X
    164  f732							; sta GEM_13_W
    165  f732							; inx
    166  f732							; lda KERNEL_STORAGE_R,X
    167  f732							; sta GEM_17_W
    168  f732							; inx
    169  f732							; lda KERNEL_STORAGE_R,X
    170  f732							; sta GEM_18_W
    171  f732							; inx
    172  f732							; lda KERNEL_STORAGE_R,X
    173  f732							; sta GEM_22_W
    174  f732
    175  f732		       4c 48 f7 	      jmp	row_8_end
    176  f735
    177  f735							; Perform gem loading for Kernel B.
    178  f735
    179  f735				   loadframe2
      0  f735					      ASSERT_RUNTIME	"_scycles == #33"
      1  f735				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f735  && !(  _scycles == #33  ) }
      2  f735					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f735
    182  f735							; Emerald byte setting 2A
    183  f735							; ldx #[storage_02 - storage]
    184  f735							; lda KERNEL_STORAGE_R,X
    185  f735							; sta GEM_02_W
    186  f735							; inx
    187  f735							; lda KERNEL_STORAGE_R,X
    188  f735							; sta GEM_06_W
    189  f735							; inx
    190  f735							; lda KERNEL_STORAGE_R,X
    191  f735							; sta GEM_08_W
    192  f735							; inx
    193  f735
    194  f735		       85 02		      sta	WSYNC
    195  f737
    196  f737							; [scanline 8]
    197  f737				   row_8
      0  f737					      jet_spritedata_calc
      1  f737
      2  f737		       a9 09		      lda	#SPRITE_HEIGHT
      3  f739		       c7 85		      dcp	SpriteEnd
      4  f73b		       a4 85		      ldy	SpriteEnd
      5  f73d
      6  f73d
      7  f73d
      8  f73d
      9  f73d		       b9 00 f9 	      lda	Frame0,Y
     10  f740
     11  f740		       b0 01		      .byte.b	$b0, $01
     12  f742		       2c		      .byte.b	$2c
     13  f743		       85 1b		      sta	JET_SP
    199  f745
    200  f745							; Emerald byte setting 2B
    201  f745							; lda KERNEL_STORAGE_R,X
    202  f745							; sta GEM_11_W
    203  f745							; inx
    204  f745							; lda KERNEL_STORAGE_R,X
    205  f745							; sta GEM_15_W
    206  f745							; inx
    207  f745							; lda KERNEL_STORAGE_R,X
    208  f745							; sta GEM_20_W
    209  f745							; inx
    210  f745							; lda KERNEL_STORAGE_R,X
    211  f745							; sta GEM_24_W
    212  f745
    213  f745		       4c 48 f7 	      jmp	row_8_end
    214  f748
    215  f748							; Common row 8 return.
    216  f748
    217  f748				   row_8_end
    218  f748							; Idle.
    219  f748		       85 02		      sta	WSYNC
    220  f74a
    221  f74a							; [scanline 8]
    222  f74a							; Repeat loop until LoopCount < 0
    223  f74a		       c6 82		      dec	LoopCount
    224  f74c		       30 03		      bmi	row_end
    225  f74e		       4c 75 f6 	      jmp	row_start
    226  f751				   row_end
    227  f751		       4c 46 f6 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f754					      include	"kernel_gem.s"
      1  f754							;
      2  f754							; Gem Kernels
      3  f754							;
      4  f754							; Gems are displayed in alternating kernels. This chart shows
      5  f754							; which kernel is responsible for which gem, with missiles denoted.
      6  f754							;
      7  f754							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f754							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f754							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f754							;  #	 0^	 8^	  17^	    26^       gem index
     11  f754							;
     12  f754							; The middle bar indicates where the pattern reverses.
     13  f754							;
     14  f754							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f754							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f754							; requires with a single sprite. By alternating sprites each frame with an...
     17  f754							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f754							; line, except for two. These are instead rendered by the missile, which
     19  f754							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f754
     21  f754							; for copying
     22  f800		       00 00 00 00*	      align	256
     23  f800
     24  f800							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f800							;
     26  f800							; GEM KERNEL A
     27  f800							;
     28  f800
     29  f800				   kernel_1_start subroutine
     30  f800					      rorg	$f100
     31  f800
     32  f800							; Kernel Marker
     33  f800		       0a		      .byte.b	$A
     34  f801
     35  f801				   KernelA_early
     36  f801							; Early code to set next GRP0 image. Immediate value is overwritten
     37  f801		       a9 ff		      lda	#$ff
     38  f803
     39  f803				   KernelA    subroutine
      0  f803					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  f803				   .KERNEL    SET	$A
      2  f803				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  f803					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  f803
     42  f803							; Write Gemini 0A into delayed sprite register
     43  f803		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  f803		       f1 04	   KernelA_VDEL1 =	. - 1
     45  f805		       84 1c		      sty	EMERALD_SP
     46  f807							; Write Player from accumulator. When writing to the other sprite, the
     47  f807							; TIA will copy Gemini 0A into visible sprite register
     48  f807		       85 1b		      sta	JET_SP
     49  f809							; Write Gemini 1A into visible sprite register
     50  f809		       a0 66		      ldy	#%01100110
     51  f809		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  f80b		       84 1c		      sty	EMERALD_SP
     53  f80d		       a0 06		      ldy	#%00000110	; TODO temporary?
     54  f80d		       f1 0e	   KernelA_STY =	. - 1
     55  f80f
     56  f80f							; Need D0 for VDELP1 trigger with PHP
      0  f80f					      sleep	2
      1  f80f				   .CYCLES    SET	2
      2  f80f
      3  f80f				  -	      IF	.CYCLES < 2
      4  f80f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f80f				  -	      ERR
      6  f80f					      ENDIF
      7  f80f
      8  f80f				  -	      IF	.CYCLES & 1
      9  f80f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f80f				  -	      nop	0
     11  f80f				  -	      ELSE
     12  f80f				  -	      bit	VSYNC
     13  f80f				  -	      ENDIF
     14  f80f				  -.CYCLES    SET	.CYCLES - 3
     15  f80f					      ENDIF
     16  f80f
     17  f80f					      REPEAT	.CYCLES / 2
     18  f80f		       ea		      nop
     19  f810					      REPEND
     58  f810
     59  f810							; Register config
     60  f810		       a9 08		      lda	#%00001000
     61  f812							; sta EMERALD_MI_ENABLE ; disable missile FIXME this should be uncommented!
     62  f812		       85 0c		      sta	REFP1
     63  f814
     64  f814							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f814					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  f814				   .KERNEL    SET	$A
      2  f814				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  f814					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  f814				   KernelA_A
     67  f814		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  f816
     69  f816							; vvv RST0
     70  f816				   KernelA_B
     71  f816		       a5 95		      lda	RamPF1Value
     72  f818				   KernelA_C
     73  f818		       84 26		      sty	VDELP1	; disable delayed sprite
     74  f81a				   KernelA_D
     75  f81a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  f81a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  f81a				   .CYCLES    SET	3
      2  f81a
      3  f81a				  -	      IF	.CYCLES < 2
      4  f81a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f81a				  -	      ERR
      6  f81a					      ENDIF
      7  f81a
      8  f81a					      IF	.CYCLES & 1
      9  f81a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f81a		       04 00		      nop	0
     11  f81c				  -	      ELSE
     12  f81c				  -	      bit	VSYNC
     13  f81c					      ENDIF
     14  f81c				   .CYCLES    SET	.CYCLES - 3
     15  f81c					      ENDIF
     16  f81c
     17  f81c				  -	      REPEAT	.CYCLES / 2
     18  f81c				  -	      nop
     19  f81c					      REPEND
     77  f81c				   KernelA_E
     78  f81c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     79  f81e				   KernelA_F
     80  f81e							; sty EMERALD_MI_ENABLE ; Enable the missile (if we use %0xx00110 pattern)
      0  f81e					      sleep	3	; FIXME This should be uncommented!
      1  f81e				   .CYCLES    SET	3
      2  f81e
      3  f81e				  -	      IF	.CYCLES < 2
      4  f81e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f81e				  -	      ERR
      6  f81e					      ENDIF
      7  f81e
      8  f81e					      IF	.CYCLES & 1
      9  f81e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f81e		       04 00		      nop	0
     11  f820				  -	      ELSE
     12  f820				  -	      bit	VSYNC
     13  f820					      ENDIF
     14  f820				   .CYCLES    SET	.CYCLES - 3
     15  f820					      ENDIF
     16  f820
     17  f820				  -	      REPEAT	.CYCLES / 2
     18  f820				  -	      nop
     19  f820					      REPEND
     82  f820				   KernelA_G
     83  f820		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     84  f822
     85  f822				   KernelA_H
     86  f822		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     87  f824
     88  f824							; ASSERT_RUNTIME_KERNEL $A, "_scycles == #67"
     89  f824							; RST4 vvv
     90  f824				   KernelA_I
     91  f824		       08		      php		; Reset "medium close" NUSIZ repetition
     92  f825				   KernelA_J		; unchanging
     93  f825		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     94  f827				   KernelA_K
     95  f827		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     96  f829							; RST4 ^^^
     97  f829
     98  f829				   KernelA_L
      0  f829					      sleep	3	; when possible, sta VDELP0
      1  f829				   .CYCLES    SET	3
      2  f829
      3  f829				  -	      IF	.CYCLES < 2
      4  f829				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f829				  -	      ERR
      6  f829					      ENDIF
      7  f829
      8  f829					      IF	.CYCLES & 1
      9  f829					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f829		       04 00		      nop	0
     11  f82b				  -	      ELSE
     12  f82b				  -	      bit	VSYNC
     13  f82b					      ENDIF
     14  f82b				   .CYCLES    SET	.CYCLES - 3
     15  f82b					      ENDIF
     16  f82b
     17  f82b				  -	      REPEAT	.CYCLES / 2
     18  f82b				  -	      nop
     19  f82b					      REPEND
    100  f82b				   KernelA_M
    101  f82b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    102  f82d
    103  f82d				   KernelA_N
    104  f82d				   KernelA_O
      0  f82d					      sleep	2
      1  f82d				   .CYCLES    SET	2
      2  f82d
      3  f82d				  -	      IF	.CYCLES < 2
      4  f82d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f82d				  -	      ERR
      6  f82d					      ENDIF
      7  f82d
      8  f82d				  -	      IF	.CYCLES & 1
      9  f82d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f82d				  -	      nop	0
     11  f82d				  -	      ELSE
     12  f82d				  -	      bit	VSYNC
     13  f82d				  -	      ENDIF
     14  f82d				  -.CYCLES    SET	.CYCLES - 3
     15  f82d					      ENDIF
     16  f82d
     17  f82d					      REPEAT	.CYCLES / 2
     18  f82d		       ea		      nop
     19  f82e					      REPEND
    106  f82e							; reset stack pointer
    107  f82e		       68		      pla
    108  f82f
    109  f82f							; End visible line
      0  f82f					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  f82f				   .KERNEL    SET	$A
      2  f82f				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  f82f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  f82f
    112  f82f				   KernelA_branch
    113  f82f		       ad 84 02 	      lda	INTIM
    114  f832		       d0 cd		      bne	KernelA_early
    115  f834
    116  f834		       4c f0 f6 	      jmp	row_after_kernel
    117  f837
    118  f837					      rend
    119  f837				   kernel_1_end
      0  f837					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f837				   .STARTA    SET	kernel_1_start
      2  f837				   .ENDA      SET	kernel_1_end
      3  f837				   .LEN       SET	$40
      4  f837				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f837				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f837				  -	      err
      7  f837					      endif
    121  f837
    122  f837							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f837							;
    124  f837							; GEM KERNEL B
    125  f837							;
    126  f837
    127  f837				   kernel_2_start subroutine
    128  f837					      rorg	$f100
    129  f837
    130  f837							; Kernel Marker
    131  f837		       0b		      .byte.b	$B
    132  f838
    133  f838				   KernelB_early
    134  f838							; Early code to set next GRP0 image. Value is overwritten
    135  f838		       a9 ff		      lda	#$ff
    136  f83a
    137  f83a				   KernelB    subroutine
      0  f83a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  f83a				   .KERNEL    SET	$B
      2  f83a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  f83a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    139  f83a
    140  f83a							; Write Gemini 0A into delayed sprite register
    141  f83a		       84 1c		      sty	EMERALD_SP
    142  f83c							; Write Player from accumulator. When writing to the other sprite, the
    143  f83c							; TIA will copy Gemini 0A into visible sprite register
    144  f83c		       85 1b		      sta	JET_SP
    145  f83e							; Write Gemini 1A into delayed sprite register
    146  f83e		       84 1c		      sty	EMERALD_SP
    147  f840
    148  f840							; Register config
    149  f840		       a9 ff		      lda	#$ff
    150  f842		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    151  f844		       8d 26 00 	      sta.w	VDELP1	; enable delayed sprite
    152  f847
    153  f847		       a0 ff		      ldy	#$ff
    154  f847		       f1 11	   KernelB_STY =	. - 1
    155  f849
    156  f849							; Clear bits in processor status register for drawing.
    157  f849		       18		      clc
    158  f84a		       24 93		      bit	RamLowerSixByte
    159  f84c
    160  f84c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f84c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  f84c				   .KERNEL    SET	$B
      2  f84c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  f84c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    162  f84c				   KernelB_A
    163  f84c		       85 11		      sta	EMERALD_SP_RESET
    164  f84e				   KernelB_B
    165  f84e				   KernelB_C
    166  f84e				   KernelB_D
    167  f84e							; Load PF1 value into accumulator
    168  f84e		       ad 95 00 	      lda.w	RamPF1Value
    169  f851							; sleep 4
    170  f851							; set D0 = 0 without using a register
    171  f851		       06 26		      asl	VDELP1
    172  f853				   KernelB_E
    173  f853		       85 11		      sta	EMERALD_SP_RESET
    174  f855				   KernelB_F
    175  f855		       84 1c		      sty	EMERALD_SP
    176  f857				   KernelB_G
    177  f857		       85 0e		      sta	PF1
    178  f859
    179  f859							; below has one php load (could just be RESET)
    180  f859				   KernelB_H
    181  f859		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    182  f85b				   KernelB_I
    183  f85b		       85 11		      sta	EMERALD_SP_RESET
    184  f85d				   KernelB_J
    185  f85d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    186  f85f				   KernelB_K
    187  f85f		       86 1e		      stx	EMERALD_MI_ENABLE
    188  f861				   KernelB_L
    189  f861		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    190  f863							; above has one PHP loa
    191  f863
    192  f863				   KernelB_M
    193  f863				   KernelB_N
      0  f863					      sleep	2
      1  f863				   .CYCLES    SET	2
      2  f863
      3  f863				  -	      IF	.CYCLES < 2
      4  f863				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f863				  -	      ERR
      6  f863					      ENDIF
      7  f863
      8  f863				  -	      IF	.CYCLES & 1
      9  f863				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f863				  -	      nop	0
     11  f863				  -	      ELSE
     12  f863				  -	      bit	VSYNC
     13  f863				  -	      ENDIF
     14  f863				  -.CYCLES    SET	.CYCLES - 3
     15  f863					      ENDIF
     16  f863
     17  f863					      REPEAT	.CYCLES / 2
     18  f863		       ea		      nop
     19  f864					      REPEND
    195  f864
    196  f864							; reset stack pointer
    197  f864		       68		      pla
    198  f865
    199  f865							; End visible line
      0  f865					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f865				   .KERNEL    SET	$B
      2  f865				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  f865					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    201  f865
    202  f865				   KernelB_branch
    203  f865		       ad 84 02 	      lda	INTIM
    204  f868		       d0 ce		      bne	KernelB_early
    205  f86a		       4c f0 f6 	      jmp	row_after_kernel
    206  f86d
    207  f86d					      rend
    208  f86d				   kernel_2_end
      0  f86d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f86d				   .STARTA    SET	kernel_2_start
      2  f86d				   .ENDA      SET	kernel_2_end
      3  f86d				   .LEN       SET	$40
      4  f86d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f86d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f86d				  -	      err
      7  f86d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f86d					      include	"data_sprites.s"
      1  f900		       00 00 00 00*	      align	256
      2  f900
      3  f900							; Player
      4  f900				   Frame0
      5  f900		       00		      .byte.b	#%00000000
      6  f901		       60		      .byte.b	#%01100000
      7  f902		       60		      .byte.b	#%01100000
      8  f903		       60		      .byte.b	#%01100000
      9  f904		       c0		      .byte.b	#%11000000
     10  f905		       c0		      .byte.b	#%11000000
     11  f906		       f0		      .byte.b	#%11110000
     12  f907		       c0		      .byte.b	#%11000000
     13  f908		       c0		      .byte.b	#%11000000
     14  f909		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f90a					      include	"data_levels.s"
      1  f910		       00 00 00 00*	      align	8
      2  f910							; first bit of byte 2 & 3 are unused for simplicity
      3  f910
      4  f910				   level_00
      5  f910		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f914
      7  f914				   level_01
      8  f914		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f918		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f91c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f920		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f924		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f928		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f92c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f930		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f934		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f938		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f93c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f940		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f944		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f948		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f94c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f950		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f954		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f958		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f95c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f960		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f964		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f968		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f96c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f970		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f974		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f978		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f97c				   level_01_end
     35  f97c
     36  f97c
     37  f97c				   shard_map
     38  f97c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  f97d				   shard_map_end
------- FILE main.s
    125  f97d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
