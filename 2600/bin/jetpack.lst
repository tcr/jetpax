------- FILE main.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
     18  10000 ????
------- FILE jetpax.h LEVEL 2 PASS 2
      0  10000 ????				       include	"jetpax.h"
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE jetpax.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE jetpax.h
------- FILE xmacro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"xmacro.h"
      1  10000 ????
      2  10000 ????						;-------------------------------------------------------
      3  10000 ????						; Usage: TIMER_SETUP lines
      4  10000 ????						; where lines is the number of scanlines to skip (> 2).
      5  10000 ????						; The timer will be set so that it expires before this number
      6  10000 ????						; of scanlines. A WSYNC will be done first.
      7  10000 ????
      8  10000 ????				       MAC	timer_setup
      9  10000 ????			    .lines     SET	{1}
     10  10000 ????				       lda	#(((.lines-1)*76-14)/64)
     11  10000 ????				       sta	WSYNC
     12  10000 ????				       sta	TIM64T
     13  10000 ????				       ENDM
     14  10000 ????
     15  10000 ????						;-------------------------------------------------------
     16  10000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  10000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  10000 ????						; is not accurate to the beginning/end of a scanline.
     19  10000 ????
     20  10000 ????				       MAC	timer_wait
     21  10000 ????			    .waittimer
     22  10000 ????				       lda	INTIM
     23  10000 ????				       bne	.waittimer
     24  10000 ????				       ENDM
     25  10000 ????
------- FILE jetpax.h
------- FILE main.s
     20  10000 ????
------- FILE vars.s LEVEL 2 PASS 2
      0  10000 ????				       include	"vars.s"
      1 U008f ????				      seg.u	Variables
      2 U0080					      org	$80
      3 U0080
      4 U0080		       00	   Temp       byte.b
      5 U0081
      6 U0081							; Counters
      7 U0081		       00	   RowCount   byte.b
      8 U0082		       00	   LoopCount  byte.b
      9 U0083		       00	   FrameCount byte.b
     10 U0084
     11 U0084		       00	   YP1	      byte.b
     12 U0085		       00	   SpriteEnd  byte.b
     13 U0086		       00	   XPos       byte.b		; X position of player sprite
     14 U0087
     15 U0087
     16 U0087		       00	   Speed1     byte.b
     17 U0088		       00	   Speed2     byte.b
     18 U0089
     19 U0089		       00	   YPos       byte.b		; Y position of player sprite
     20 U008a		       00	   YPos2      byte.b
     21 U008b
     22 U008b		       00	   GEM_02_TARGET byte.b
     23 U008c
     24 U008c		       00	   JMP_ADDR   byte.b
     25 U008d		       00	   JMP_ADDR_2 byte.b
     26 U008e
     27 U008e		       00	   ROW_DEMO_INDEX byte.b
     28 U008f
     29 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     30 U008f
     31 U008f		       00 10	   ROW_COUNT  equ	16
     32 U008f
     33 U008f		       00 02	   SIGNAL_LINE equ	$02
     34 U008f
     35 U008f		       11 00	   KERNEL_START equ	$1100
     36 U008f
     37 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     38 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     39 U008f
     40 U008f							; Sprites
     41 U008f
     42 U008f							; Nusiz
     43 U008f		       00 13	   THREE_COPIES equ	%00010011
     44 U008f
     45 U008f							; Frame 1 sprites
     46 U008f		       00 60	   EMR1       equ	%01100000
     47 U008f		       00 06	   EMR2       equ	%00000110
     48 U008f		       00 66	   EMR3       equ	%01100110
     49 U008f
     50 U008f							; Frame 2 sprites
     51 U008f		       00 c0	   T1	      equ	%11000000
     52 U008f		       00 0c	   T2	      equ	%00001100
     53 U008f		       00 cc	   T3	      equ	%11001100
     54 U008f
     55 U008f							; Shorthands
     56 U008f
     57 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     58 U008f		       00 85	   SET_1_0    equ	$85	; STA
     59 U008f		       00 86	   SET_0_1    equ	$86	; STX
     60 U008f		       00 84	   SET_1_1    equ	$84	; STY
     61 U008f
     62 U008f		       00 86	   SET_0_L    equ	$86	; STX
     63 U008f		       00 85	   SET_1_L    equ	$85	; STA
     64 U008f
     65 U008f		       00 85	   SET_0_R    equ	$85	; STA
     66 U008f		       00 84	   SET_1_R    equ	$84	; STY
     67 U008f
     68 U008f							; Gem enabling/disabling globally
     69 U008f
     70 U008f							; ; all off
     71 U008f							; GEM_00 equ SET_0_0
     72 U008f							; GEM_02 equ SET_0_0
     73 U008f							; GEM_04 equ SET_0_0
     74 U008f							; GEM_06 equ SET_0_0
     75 U008f							; GEM_08 equ SET_0_L
     76 U008f							; GEM_09 equ SET_0_0
     77 U008f							; GEM_11 equ SET_0_0
     78 U008f							; GEM_13 equ SET_0_0
     79 U008f							; GEM_15 equ SET_0_0
     80 U008f							; GEM_17 equ SET_0_R
     81 U008f							; GEM_18 equ SET_0_0
     82 U008f							; GEM_20 equ SET_0_0
     83 U008f							; GEM_22 equ SET_0_0
     84 U008f							; GEM_24 equ SET_0_0
     85 U008f
     86 U008f							; all on
     87 U008f		       00 84	   GEM_00     equ	SET_1_1
     88 U008f		       00 84	   GEM_02     equ	SET_1_1
     89 U008f		       00 84	   GEM_04     equ	SET_1_1
     90 U008f		       00 84	   GEM_06     equ	SET_1_1
     91 U008f		       00 85	   GEM_08     equ	SET_1_L
     92 U008f		       00 84	   GEM_09     equ	SET_1_1
     93 U008f		       00 84	   GEM_11     equ	SET_1_1
     94 U008f		       00 84	   GEM_13     equ	SET_1_1
     95 U008f		       00 84	   GEM_15     equ	SET_1_1
     96 U008f		       00 84	   GEM_17     equ	SET_1_R
     97 U008f		       00 84	   GEM_18     equ	SET_1_1
     98 U008f		       00 84	   GEM_20     equ	SET_1_1
     99 U008f		       00 84	   GEM_22     equ	SET_1_1
    100 U008f		       00 84	   GEM_24     equ	SET_1_1
    101 U008f
    102 U008f							; ; odd on
    103 U008f							; GEM_00 equ SET_1_0
    104 U008f							; GEM_02 equ SET_1_0
    105 U008f							; GEM_04 equ SET_1_0
    106 U008f							; GEM_06 equ SET_1_0
    107 U008f							; GEM_08 equ SET_1_L
    108 U008f							; GEM_09 equ SET_0_1
    109 U008f							; GEM_11 equ SET_0_1
    110 U008f							; GEM_13 equ SET_0_1
    111 U008f							; GEM_15 equ SET_0_1
    112 U008f							; GEM_17 equ SET_0_R
    113 U008f							; GEM_18 equ SET_1_0
    114 U008f							; GEM_20 equ SET_1_0
    115 U008f							; GEM_22 equ SET_1_0
    116 U008f							; GEM_24 equ SET_1_0
    117 U008f
    118 U008f							; ; even on
    119 U008f							; GEM_00 equ SET_0_1
    120 U008f							; GEM_02 equ SET_0_1
    121 U008f							; GEM_04 equ SET_0_1
    122 U008f							; GEM_06 equ SET_0_1
    123 U008f							; GEM_08 equ SET_0_L
    124 U008f							; GEM_09 equ SET_1_0
    125 U008f							; GEM_11 equ SET_1_0
    126 U008f							; GEM_13 equ SET_1_0
    127 U008f							; GEM_15 equ SET_1_0
    128 U008f							; GEM_17 equ SET_1_R
    129 U008f							; GEM_18 equ SET_0_1
    130 U008f							; GEM_20 equ SET_0_1
    131 U008f							; GEM_22 equ SET_0_1
    132 U008f							; GEM_24 equ SET_0_1
    133 U008f
    134 U008f							; Colors
    135 U008f
    136 U008f		       00 42	   COL_BG     equ	$42
    137 U008f		       00 cc	   COL_EMERALD equ	$CC
    138 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    139 U008f
    140 U008f							; HMOVE values
    141 U008f
    142 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    143 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    144 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    145 U008f
    146 U008f							; Sprite details
    147 U008f
    148 U008f		       00 09	   SPRITE_HEIGHT equ	9
    149 U008f
    150 U008f
    151 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    152 U008f		       00 1c	   EMERALD_SP equ	GRP1
    153 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    154 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    155 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    156 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    157 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    158 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    159 U008f
    160 U008f		       00 1b	   JET_SP     equ	GRP0
    161 U008f		       00 10	   JET_SP_RESET equ	RESP0
    162 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    163 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    164 U008f
    165 U008f
    166 U008f							; Offset from the sprite label to the point
    167 U008f							; at which the sprite actually starts. This is the 0-padding
    168 U008f							; FRAME_OFFSET equ 53
    169 U008f
    170 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    171 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    172 U008f
    173 U008f							; Compared with YPos
    174 U008f		       00 43	   FLOOR_OFFSET equ	67
    175 U008f		       00 bf	   CEILING_OFFSET equ	191
    176 U008f
    177 U008f							; YPos definite position
    178 U008f		       00 64	   YPosStart  equ	100
------- FILE main.s
------- FILE banks.s LEVEL 2 PASS 2
      0 U008f					      include	"banks.s"
------- FILE jetpax.h LEVEL 3 PASS 2
      0 U008f					      include	"jetpax.h"
------- FILE vcs.h LEVEL 4 PASS 2
      0 U008f					      include	"vcs.h"
      1 U008f							; VCS.H
      2 U008f							; Version 1.05, 13/November/2003
      3 U008f
      4 U008f		       00 69	   VERSION_VCS =	105
      5 U008f
      6 U008f							; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7 U008f							; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8 U008f							; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9 U008f							;
     10 U008f							; This file defines hardware registers and memory mapping for the
     11 U008f							; Atari 2600. It is distributed as a companion machine-specific support package
     12 U008f							; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13 U008f							; available at at http://www.atari2600.org/dasm
     14 U008f							;
     15 U008f							; Many thanks to the original author(s) of this file, and to everyone who has
     16 U008f							; contributed to understanding the Atari 2600.  If you take issue with the
     17 U008f							; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18 U008f							; with your views.  Please contribute, if you think you can improve this
     19 U008f							; file!
     20 U008f							;
     21 U008f							; Latest Revisions...
     22 U008f							; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23 U008f							;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24 U008f							;			    This will allow conditional code to verify VCS.H being
     25 U008f							;			    used for code assembly.
     26 U008f							; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27 U008f							;			 convenient disassembly/reassembly compatibility for hardware
     28 U008f							;			 mirrored reading/writing differences.	This is more a 
     29 U008f							;			 readability issue, and binary compatibility with disassembled
     30 U008f							;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31 U008f							; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32 U008f							;			 which was broken by the use of segments in this file, as
     33 U008f							;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34 U008f							; 1.02  22/MAR/2003	 Added TIMINT($285)
     35 U008f							; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36 U008f							;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37 U008f							;						   it is safe to leave it undefined, and the base address will
     38 U008f							;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39 U008f							;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40 U008f							;			  - register definitions are now generated through assignment
     41 U008f							;			    in uninitialised segments.	This allows a changeable base
     42 U008f							;			    address architecture.
     43 U008f							; 1.0	22/MAR/2003		Initial release
     44 U008f
     45 U008f
     46 U008f							;-------------------------------------------------------------------------------
     47 U008f
     48 U008f							; TIA_BASE_ADDRESS
     49 U008f							; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50 U008f							; Normally 0, the base address should (externally, before including this file)
     51 U008f							; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52 U008f							; The reason is that this bankswitching scheme treats any access to locations
     53 U008f							; < $40 as a bankswitch.
     54 U008f
     55 U008f				  -	      IFNCONST	TIA_BASE_ADDRESS
     56 U008f				  -TIA_BASE_ADDRESS =	0
     57 U008f					      ENDIF
     58 U008f
     59 U008f							; Note: The address may be defined on the command-line using the -D switch, eg:
     60 U008f							; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61 U008f							; *OR* by declaring the label before including this file, eg:
     62 U008f							; TIA_BASE_ADDRESS = $40
     63 U008f							;   include "vcs.h"
     64 U008f
     65 U008f							; Alternate read/write address capability - allows for some disassembly compatibility
     66 U008f							; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67 U008f							; for the mirrored ROM hardware registers.
     68 U008f
     69 U008f							; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70 U008f							; using the -D command-line switch, as required.  If the addresses are not defined, 
     71 U008f							; they defaut to the TIA_BASE_ADDRESS.
     72 U008f
     73 U008f				  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74 U008f				  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75 U008f					      ENDIF
     76 U008f
     77 U008f				  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78 U008f				  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79 U008f					      ENDIF
     80 U008f
     81 U008f							;-------------------------------------------------------------------------------
     82 U008f
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE jetpax.h
------- FILE macro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE jetpax.h
------- FILE xmacro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"xmacro.h"
      1  10000 ????
      2  10000 ????						;-------------------------------------------------------
      3  10000 ????						; Usage: TIMER_SETUP lines
      4  10000 ????						; where lines is the number of scanlines to skip (> 2).
      5  10000 ????						; The timer will be set so that it expires before this number
      6  10000 ????						; of scanlines. A WSYNC will be done first.
      7  10000 ????
      8  10000 ????				       MAC	timer_setup
      9  10000 ????			    .lines     SET	{1}
     10  10000 ????				       lda	#(((.lines-1)*76-14)/64)
     11  10000 ????				       sta	WSYNC
     12  10000 ????				       sta	TIM64T
     13  10000 ????				       ENDM
     14  10000 ????
     15  10000 ????						;-------------------------------------------------------
     16  10000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  10000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  10000 ????						; is not accurate to the beginning/end of a scanline.
     19  10000 ????
     20  10000 ????				       MAC	timer_wait
     21  10000 ????			    .waittimer
     22  10000 ????				       lda	INTIM
     23  10000 ????				       bne	.waittimer
     24  10000 ????				       ENDM
     25  10000 ????
------- FILE jetpax.h
------- FILE banks.s
------- FILE main.s
------- FILE code.s LEVEL 2 PASS 2
      0  10000 ????				       include	"code.s"
------- FILE jetpax.h LEVEL 3 PASS 2
      0  10000 ????				       include	"jetpax.h"
------- FILE vcs.h LEVEL 4 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE jetpax.h
------- FILE macro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE jetpax.h
------- FILE xmacro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"xmacro.h"
      1  10000 ????
      2  10000 ????						;-------------------------------------------------------
      3  10000 ????						; Usage: TIMER_SETUP lines
      4  10000 ????						; where lines is the number of scanlines to skip (> 2).
      5  10000 ????						; The timer will be set so that it expires before this number
      6  10000 ????						; of scanlines. A WSYNC will be done first.
      7  10000 ????
      8  10000 ????				       MAC	timer_setup
      9  10000 ????			    .lines     SET	{1}
     10  10000 ????				       lda	#(((.lines-1)*76-14)/64)
     11  10000 ????				       sta	WSYNC
     12  10000 ????				       sta	TIM64T
     13  10000 ????				       ENDM
     14  10000 ????
     15  10000 ????						;-------------------------------------------------------
     16  10000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  10000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  10000 ????						; is not accurate to the beginning/end of a scanline.
     19  10000 ????
     20  10000 ????				       MAC	timer_wait
     21  10000 ????			    .waittimer
     22  10000 ????				       lda	INTIM
     23  10000 ????				       bne	.waittimer
     24  10000 ????				       ENDM
     25  10000 ????
------- FILE jetpax.h
------- FILE code.s
      2  10000 ????
      3  f663 ????				      seg	Code
      4  f663 ????
      5  d000					      org	$D000
      6  d000					      rorg	$F000
      7  d000
      8  d000		       00	   BANK1      byte.b
      9  d001
     10  d200					      org	$D200
     11  d200					      rorg	$F200
     12  d200
     13  d200				   Bank1Start
     14  d200		       ad fa ff 	      lda	$FFFA
     15  d203		       ea		      nop
     16  d204		       ea		      nop
     17  d205		       ea		      nop
     18  d206
     19  d206							; Epilogue
     20  dffc					      org	$DFFC
     21  dffc					      rorg	$FFFC
     22  dffc		       00 f2		      .word.w	Bank1Start
     23  dffe		       00 f2		      .word.w	Bank1Start
     24  e000
     25  e000					      org	$E000
     26  e000					      rorg	$F000
     27  e000
     28  e000		       00	   BANK2      byte.b
     29  e001
     30  e200					      org	$E200
     31  e200					      rorg	$F200
     32  e200
     33  e200				   Bank2Start
     34  e200		       ad fa ff 	      lda	$FFFA
     35  e203		       ea		      nop
     36  e204		       ea		      nop
     37  e205		       ea		      nop
     38  e206
     39  e206							; Epilogue
     40  effc					      org	$EFFC
     41  effc					      rorg	$FFFC
     42  effc		       00 f2		      .word.w	Bank2Start
     43  effe		       00 f2		      .word.w	Bank2Start
     44  f000
     45  f000					      org	$F000
     46  f000					      rorg	$F000
     47  f000
     48  f000		       00	   BANK3      byte.b
     49  f001
     50  f001							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51  f001							;
     52  f001							; Start of Bank 0 (where all banks redirect to)
     53  f001
     54  f200					      org	$F200
     55  f200					      rorg	$F200
     56  f200
     57  f200				   Start
     58  f200		       ad fa ff 	      lda	$FFFA
     59  f203		       ea		      nop
     60  f204		       ea		      nop
     61  f205		       ea		      nop
     62  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
     64  f211		       a9 00		      lda	#0
     65  f213		       85 83		      sta	FrameCount
     66  f215
     67  f215							; P0 has three copies
     68  f215		       a9 13		      lda	#%00010011
     69  f217		       85 05		      sta	EMERALD_COPIES
     70  f219
     71  f219		       a9 00		      lda	#$00
     72  f21b		       85 09		      sta	COLUBK
     73  f21d		       a9 01		      lda	#%00000001
     74  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
     75  f221
     76  f221							; Disable VDEL
     77  f221		       a9 00		      lda	#0
     78  f223		       85 25		      sta	VDELP0
     79  f225		       85 26		      sta	VDELP1
     80  f227
     81  f227
     82  f227							; Player 0
     83  f227		       a2 cc		      ldx	#COL_EMERALD
     84  f229		       86 07		      stx	EMERALD_SP_COLOR
     85  f22b
     86  f22b							; Player 1
     87  f22b		       a9 0f		      lda	#$0f
     88  f22d		       85 06		      sta	JET_SP_COLOR
     89  f22f		       a9 00		      lda	#$00
     90  f231		       85 1b		      sta	JET_SP
     91  f233
     92  f233							; Positions
     93  f233		       a9 64		      lda	#YPosStart
     94  f235		       85 89		      sta	YPos
     95  f237		       a9 37		      lda	#55
     96  f239		       85 86		      sta	XPos
     97  f23b		       a9 00		      lda	#0
     98  f23d		       85 87		      sta	Speed1
     99  f23f		       85 88		      sta	Speed2
    100  f241		       85 8a		      sta	YPos2
    101  f243
    102  f243		       a9 00		      lda	#0
    103  f245		       85 8e		      sta	ROW_DEMO_INDEX
    104  f247
    105  f247				   BeginFrame
      0  f247					      VERTICAL_SYNC
      1  f247		       a9 0e		      lda	#%1110
      2  f249		       85 02	   .VSLP1     sta	WSYNC
      3  f24b		       85 00		      sta	VSYNC
      4  f24d		       4a		      lsr
      5  f24e		       d0 f9		      bne	.VSLP1
    107  f250
      0  f250					      TIMER_SETUP	37
      1  f250				   .lines     SET	37
      2  f250		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f252		       85 02		      sta	WSYNC
      4  f254		       8d 96 02 	      sta	TIM64T
    109  f257
    110  f257							; Scanline counter
    111  f257		       a9 10		      lda	#ROW_COUNT
    112  f259		       85 82		      sta	LoopCount
    113  f25b
    114  f25b							; Frame counter
    115  f25b		       e6 83		      inc	FrameCount
    116  f25d
    117  f25d							; Now the work stuff
    118  f25d		       4c e8 f2 	      jmp	copy_frame
    119  f260
    120  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    121  f260
    122  f260					      MAC	emeralds_two
    123  f260				   .target    SET	{1}
    124  f260					      ldx	#%11
    125  f260					      .byte	$CB, $0	; axs
    126  f260					      ldy	map_full,X
    127  f260					      sty	[.target - storage + KERNEL_STORAGE_W]
    128  f260					      ror
    129  f260					      ror
    130  f260					      ENDM
    131  f260
    132  f260					      MAC	emeralds_two_skip
    133  f260					      ror
    134  f260					      ror
    135  f260					      ENDM
    136  f260
    137  f260					      MAC	emeralds_one
    138  f260				   .target    SET	{1}
    139  f260				   .source    SET	{2}
    140  f260					      tax
    141  f260					      and	#%1
    142  f260					      tay
    143  f260					      lda	.source,Y
    144  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    145  f260					      txa
    146  f260					      ror
    147  f260					      ENDM
    148  f260
    149  f260					      MAC	emeralds_one_skip
    150  f260					      ror
    151  f260					      ENDM
    152  f260
    153  f260					      align	8
    154  f260				   storage
    155  f260							; Gem defaults kernel 1
    156  f260				   storage_00
    157  f260		       85		      .byte.b	SET_1_0
    158  f261				   storage_04
    159  f261		       87		      .byte.b	SET_0_0
    160  f262				   storage_09
    161  f262		       84		      .byte.b	SET_1_1
    162  f263				   storage_13
    163  f263		       84		      .byte.b	SET_1_1
    164  f264				   storage_17
    165  f264		       84		      .byte.b	SET_1_R
    166  f265				   storage_18
    167  f265		       87		      .byte.b	SET_0_0
    168  f266				   storage_22
    169  f266		       87		      .byte.b	SET_0_0
    170  f267
    171  f267							; Gem defaults kernel 2
    172  f267				   storage_02
    173  f267		       87		      .byte.b	SET_0_0
    174  f268				   storage_06
    175  f268		       87		      .byte.b	SET_0_0
    176  f269				   storage_08
    177  f269		       86		      .byte.b	SET_0_L
    178  f26a				   storage_11
    179  f26a		       84		      .byte.b	SET_1_1
    180  f26b				   storage_15
    181  f26b		       84		      .byte.b	SET_1_1
    182  f26c				   storage_20
    183  f26c		       87		      .byte.b	SET_0_0
    184  f26d				   storage_24
    185  f26d		       86		      .byte.b	SET_0_1
    186  f26e				   storage_end
    187  f26e
    188  f270		       00 00		      align	8
    189  f270							; first bit of byte 2 & 3 are unused for simplicity
    190  f270		       00 01 04 00	      .byte.b	%0000, %000001, %0000100, %00000000
    191  f274				   map_emeralds
    192  f274		       0a 00 00 00	      .byte.b	%1010, %0000000, %0000000, %00000000
    193  f278		       05 00 00 00	      .byte.b	%0101, %0000000, %0000000, %00000000
    194  f27c		       02 40 00 00	      .byte.b	%0010, %1000000, %0000000, %00000000
    195  f280		       01 20 00 00	      .byte.b	%0001, %0100000, %0000000, %00000000
    196  f284		       00 50 00 00	      .byte.b	%0000, %1010000, %0000000, %00000000
    197  f288		       00 28 00 00	      .byte.b	%0000, %0101000, %0000000, %00000000
    198  f28c		       00 14 00 00	      .byte.b	%0000, %0010100, %0000000, %00000000
    199  f290		       00 0a 00 00	      .byte.b	%0000, %0001010, %0000000, %00000000
    200  f294		       00 05 00 00	      .byte.b	%0000, %0000101, %0000000, %00000000
    201  f298		       00 02 40 00	      .byte.b	%0000, %0000010, %1000000, %00000000
    202  f29c		       00 01 20 00	      .byte.b	%0000, %0000001, %0100000, %00000000
    203  f2a0		       00 00 50 00	      .byte.b	%0000, %0000000, %1010000, %00000000
    204  f2a4		       00 00 28 00	      .byte.b	%0000, %0000000, %0101000, %00000000
    205  f2a8		       00 00 14 00	      .byte.b	%0000, %0000000, %0010100, %00000000
    206  f2ac		       00 00 0a 00	      .byte.b	%0000, %0000000, %0001010, %00000000
    207  f2b0		       00 00 05 00	      .byte.b	%0000, %0000000, %0000101, %00000000
    208  f2b4		       00 00 02 80	      .byte.b	%0000, %0000000, %0000010, %10000000
    209  f2b8		       00 00 01 40	      .byte.b	%0000, %0000000, %0000001, %01000000
    210  f2bc		       00 00 00 a0	      .byte.b	%0000, %0000000, %0000000, %10100000
    211  f2c0		       00 00 00 50	      .byte.b	%0000, %0000000, %0000000, %01010000
    212  f2c4		       00 00 00 28	      .byte.b	%0000, %0000000, %0000000, %00101000
    213  f2c8		       00 00 00 14	      .byte.b	%0000, %0000000, %0000000, %00010100
    214  f2cc		       00 00 00 0a	      .byte.b	%0000, %0000000, %0000000, %00001010
    215  f2d0		       00 00 00 05	      .byte.b	%0000, %0000000, %0000000, %00000101
    216  f2d4		       08 00 00 02	      .byte.b	%1000, %0000000, %0000000, %00000010
    217  f2d8		       04 00 00 01	      .byte.b	%0100, %0000000, %0000000, %00000001
    218  f2dc				   map_emeralds_end
    219  f2dc
    220  f2e0		       00 00 00 00	      align	8
    221  f2e0				   map_full
    222  f2e0		       87		      .byte.b	SET_0_0
    223  f2e1		       86		      .byte.b	SET_0_1
    224  f2e2		       85		      .byte.b	SET_1_0
    225  f2e3		       84		      .byte.b	SET_1_1
    226  f2e4				   map_missle_l
    227  f2e4		       86		      .byte.b	SET_0_L
    228  f2e5		       85		      .byte.b	SET_1_L
    229  f2e6				   map_missle_r
    230  f2e6		       85		      .byte.b	SET_0_R
    231  f2e7		       84		      .byte.b	SET_1_R
    232  f2e8
    233  f2e8
    234  f2e8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    235  f2e8
    236  f2e8				   copy_frame
    237  f2e8							; FRAMESWITCH
    238  f2e8		       a9 01		      lda	#01
    239  f2ea		       25 83		      and	FrameCount
    240  f2ec		       f0 03		      beq	CopyFrame1Kernel
    241  f2ee		       4c 7a f3 	      jmp	CopyFrame2Kernel
    242  f2f1
    243  f2f1				   CopyFrame1Kernel
    244  f2f1							; Copy: KERNEL 1
    245  f2f1		       a0 2d		      ldy	#(kernel_1_end - kernel_1_start)-1
    246  f2f3				   .copy_loop_1
    247  f2f3		       b9 00 f8 	      lda	kernel_1_start,Y
    248  f2f6		       99 00 10 	      sta	$1000,Y
    249  f2f9		       88		      dey
    250  f2fa		       d0 f7		      bne	.copy_loop_1
    251  f2fc		       ad 00 f8 	      lda	kernel_1_start
    252  f2ff		       8d 00 10 	      sta	$1000
    253  f302
    254  f302		       a6 8e		      ldx	ROW_DEMO_INDEX
    255  f304		       bd 77 f2 	      lda	map_emeralds+3,X
      0  f307					      EMERALDS_TWO_SKIP
      1  f307		       6a		      ror
      2  f308		       6a		      ror
      0  f309					      EMERALDS_TWO	storage_22
      1  f309				   .target    SET	storage_22
      2  f309		       a2 03		      ldx	#%11
      3  f30b		       cb 00		      .byte.b	$CB, $0
      4  f30d		       bc e0 f2 	      ldy	map_full,X
      5  f310		       8c 46 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f313		       6a		      ror
      7  f314		       6a		      ror
      0  f315					      EMERALDS_TWO_SKIP
      1  f315		       6a		      ror
      2  f316		       6a		      ror
      0  f317					      EMERALDS_TWO	storage_18
      1  f317				   .target    SET	storage_18
      2  f317		       a2 03		      ldx	#%11
      3  f319		       cb 00		      .byte.b	$CB, $0
      4  f31b		       bc e0 f2 	      ldy	map_full,X
      5  f31e		       8c 45 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f321		       6a		      ror
      7  f322		       6a		      ror
    260  f323
    261  f323		       a6 8e		      ldx	ROW_DEMO_INDEX
    262  f325		       bd 76 f2 	      lda	map_emeralds+2,X
      0  f328					      EMERALDS_ONE	storage_17, map_missle_r
      1  f328				   .target    SET	storage_17
      2  f328				   .source    SET	map_missle_r
      3  f328		       aa		      tax
      4  f329		       29 01		      and	#%1
      5  f32b		       a8		      tay
      6  f32c		       b9 e6 f2 	      lda	.source,Y
      7  f32f		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f332		       8a		      txa
      9  f333		       6a		      ror
      0  f334					      EMERALDS_TWO_SKIP
      1  f334		       6a		      ror
      2  f335		       6a		      ror
      0  f336					      EMERALDS_TWO	storage_13
      1  f336				   .target    SET	storage_13
      2  f336		       a2 03		      ldx	#%11
      3  f338		       cb 00		      .byte.b	$CB, $0
      4  f33a		       bc e0 f2 	      ldy	map_full,X
      5  f33d		       8c 43 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f340		       6a		      ror
      7  f341		       6a		      ror
      0  f342					      EMERALDS_TWO_SKIP
      1  f342		       6a		      ror
      2  f343		       6a		      ror
    267  f344
    268  f344		       a6 8e		      ldx	ROW_DEMO_INDEX
    269  f346		       bd 75 f2 	      lda	map_emeralds+1,X
      0  f349					      EMERALDS_TWO	storage_09
      1  f349				   .target    SET	storage_09
      2  f349		       a2 03		      ldx	#%11
      3  f34b		       cb 00		      .byte.b	$CB, $0
      4  f34d		       bc e0 f2 	      ldy	map_full,X
      5  f350		       8c 42 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f353		       6a		      ror
      7  f354		       6a		      ror
      0  f355					      EMERALDS_ONE_SKIP
      1  f355		       6a		      ror
      0  f356					      EMERALDS_TWO_SKIP
      1  f356		       6a		      ror
      2  f357		       6a		      ror
      0  f358					      EMERALDS_TWO	storage_04
      1  f358				   .target    SET	storage_04
      2  f358		       a2 03		      ldx	#%11
      3  f35a		       cb 00		      .byte.b	$CB, $0
      4  f35c		       bc e0 f2 	      ldy	map_full,X
      5  f35f		       8c 41 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f362		       6a		      ror
      7  f363		       6a		      ror
    274  f364
    275  f364		       a6 8e		      ldx	ROW_DEMO_INDEX
    276  f366		       bd 74 f2 	      lda	map_emeralds+0,X
      0  f369					      EMERALDS_TWO_SKIP
      1  f369		       6a		      ror
      2  f36a		       6a		      ror
      0  f36b					      EMERALDS_TWO	storage_00
      1  f36b				   .target    SET	storage_00
      2  f36b		       a2 03		      ldx	#%11
      3  f36d		       cb 00		      .byte.b	$CB, $0
      4  f36f		       bc e0 f2 	      ldy	map_full,X
      5  f372		       8c 40 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f375		       6a		      ror
      7  f376		       6a		      ror
    279  f377
    280  f377		       4c 03 f4 	      jmp	CopyFrameNext
    281  f37a
    282  f37a				   CopyFrame2Kernel
    283  f37a							; Copy: KERNEL 2
    284  f37a		       a0 2d		      ldy	#(kernel_2_end - kernel_2_start)-1
    285  f37c				   .copy_loop_2
    286  f37c		       b9 2e f8 	      lda	kernel_2_start,Y
    287  f37f		       99 00 10 	      sta	$1000,Y
    288  f382		       88		      dey
    289  f383		       d0 f7		      bne	.copy_loop_2
    290  f385		       ad 2e f8 	      lda	kernel_2_start
    291  f388		       8d 00 10 	      sta	$1000
    292  f38b
    293  f38b		       a6 8e		      ldx	ROW_DEMO_INDEX
    294  f38d		       bd 77 f2 	      lda	map_emeralds+3,X
      0  f390					      EMERALDS_TWO	storage_24
      1  f390				   .target    SET	storage_24
      2  f390		       a2 03		      ldx	#%11
      3  f392		       cb 00		      .byte.b	$CB, $0
      4  f394		       bc e0 f2 	      ldy	map_full,X
      5  f397		       8c 4d 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f39a		       6a		      ror
      7  f39b		       6a		      ror
      0  f39c					      EMERALDS_TWO_SKIP
      1  f39c		       6a		      ror
      2  f39d		       6a		      ror
      0  f39e					      EMERALDS_TWO	storage_20
      1  f39e				   .target    SET	storage_20
      2  f39e		       a2 03		      ldx	#%11
      3  f3a0		       cb 00		      .byte.b	$CB, $0
      4  f3a2		       bc e0 f2 	      ldy	map_full,X
      5  f3a5		       8c 4c 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3a8		       6a		      ror
      7  f3a9		       6a		      ror
      0  f3aa					      EMERALDS_TWO_SKIP
      1  f3aa		       6a		      ror
      2  f3ab		       6a		      ror
    299  f3ac
    300  f3ac		       a6 8e		      ldx	ROW_DEMO_INDEX
    301  f3ae		       bd 76 f2 	      lda	map_emeralds+2,X
      0  f3b1					      EMERALDS_ONE_SKIP
      1  f3b1		       6a		      ror
      0  f3b2					      EMERALDS_TWO	storage_15
      1  f3b2				   .target    SET	storage_15
      2  f3b2		       a2 03		      ldx	#%11
      3  f3b4		       cb 00		      .byte.b	$CB, $0
      4  f3b6		       bc e0 f2 	      ldy	map_full,X
      5  f3b9		       8c 4b 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3bc		       6a		      ror
      7  f3bd		       6a		      ror
      0  f3be					      EMERALDS_TWO_SKIP
      1  f3be		       6a		      ror
      2  f3bf		       6a		      ror
      0  f3c0					      EMERALDS_TWO	storage_11
      1  f3c0				   .target    SET	storage_11
      2  f3c0		       a2 03		      ldx	#%11
      3  f3c2		       cb 00		      .byte.b	$CB, $0
      4  f3c4		       bc e0 f2 	      ldy	map_full,X
      5  f3c7		       8c 4a 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3ca		       6a		      ror
      7  f3cb		       6a		      ror
    306  f3cc
    307  f3cc		       a6 8e		      ldx	ROW_DEMO_INDEX
    308  f3ce		       bd 75 f2 	      lda	map_emeralds+1,X
      0  f3d1					      EMERALDS_TWO_SKIP
      1  f3d1		       6a		      ror
      2  f3d2		       6a		      ror
      0  f3d3					      EMERALDS_ONE	storage_08, map_missle_l
      1  f3d3				   .target    SET	storage_08
      2  f3d3				   .source    SET	map_missle_l
      3  f3d3		       aa		      tax
      4  f3d4		       29 01		      and	#%1
      5  f3d6		       a8		      tay
      6  f3d7		       b9 e4 f2 	      lda	.source,Y
      7  f3da		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f3dd		       8a		      txa
      9  f3de		       6a		      ror
      0  f3df					      EMERALDS_TWO	storage_06
      1  f3df				   .target    SET	storage_06
      2  f3df		       a2 03		      ldx	#%11
      3  f3e1		       cb 00		      .byte.b	$CB, $0
      4  f3e3		       bc e0 f2 	      ldy	map_full,X
      5  f3e6		       8c 48 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3e9		       6a		      ror
      7  f3ea		       6a		      ror
      0  f3eb					      EMERALDS_TWO_SKIP
      1  f3eb		       6a		      ror
      2  f3ec		       6a		      ror
    313  f3ed
    314  f3ed		       a6 8e		      ldx	ROW_DEMO_INDEX
    315  f3ef		       bd 74 f2 	      lda	map_emeralds+0,X
      0  f3f2					      EMERALDS_TWO	storage_02
      1  f3f2				   .target    SET	storage_02
      2  f3f2		       a2 03		      ldx	#%11
      3  f3f4		       cb 00		      .byte.b	$CB, $0
      4  f3f6		       bc e0 f2 	      ldy	map_full,X
      5  f3f9		       8c 47 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3fc		       6a		      ror
      7  f3fd		       6a		      ror
      0  f3fe					      EMERALDS_TWO_SKIP
      1  f3fe		       6a		      ror
      2  f3ff		       6a		      ror
    318  f400
    319  f400		       4c 03 f4 	      jmp	CopyFrameNext
    320  f403
    321  f403
    322  f403				   CopyFrameNext
    323  f403
    324  f403							; Frame skipping for increasing demo index
    325  f403		       a5 83		      lda	FrameCount
    326  f405		       29 07		      and	#%111
    327  f407		       c9 07		      cmp	#%111
    328  f409		       d0 0d		      bne	.next_next_thing
    329  f40b
    330  f40b		       18		      clc
    331  f40c		       a5 8e		      lda	ROW_DEMO_INDEX
    332  f40e		       69 04		      adc	#4
    333  f410		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
    334  f412		       90 02		      bcc	.next_thing_local
    335  f414		       a9 00		      lda	#0
    336  f416				   .next_thing_local
    337  f416		       85 8e		      sta	ROW_DEMO_INDEX
    338  f418				   .next_next_thing
    339  f418		       85 02		      sta	WSYNC
    340  f41a
    341  f41a							; Positioning
      0  f41a					      SLEEP	40
      1  f41a				   .CYCLES    SET	40
      2  f41a
      3  f41a				  -	      IF	.CYCLES < 2
      4  f41a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f41a				  -	      ERR
      6  f41a					      ENDIF
      7  f41a
      8  f41a				  -	      IF	.CYCLES & 1
      9  f41a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f41a				  -	      nop	0
     11  f41a				  -	      ELSE
     12  f41a				  -	      bit	VSYNC
     13  f41a				  -	      ENDIF
     14  f41a				  -.CYCLES    SET	.CYCLES - 3
     15  f41a					      ENDIF
     16  f41a
     17  f41a					      REPEAT	.CYCLES / 2
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     17  f41c					      REPEND
     18  f41d		       ea		      nop
     17  f41d					      REPEND
     18  f41e		       ea		      nop
     17  f41e					      REPEND
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     17  f425					      REPEND
     18  f426		       ea		      nop
     17  f426					      REPEND
     18  f427		       ea		      nop
     17  f427					      REPEND
     18  f428		       ea		      nop
     17  f428					      REPEND
     18  f429		       ea		      nop
     17  f429					      REPEND
     18  f42a		       ea		      nop
     17  f42a					      REPEND
     18  f42b		       ea		      nop
     17  f42b					      REPEND
     18  f42c		       ea		      nop
     17  f42c					      REPEND
     18  f42d		       ea		      nop
     19  f42e					      REPEND
    343  f42e		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    344  f430		       85 02		      sta	WSYNC
    345  f432
    346  f432							; Misc
    347  f432		       a9 00		      lda	#00
    348  f434		       85 1e		      sta	EMERALD_MI_ENABLE
    349  f436
    350  f436							; Assign dervied SpriteEnd value
    351  f436		       a9 c8		      lda	#HEIGHT_OFFSET
    352  f438		       e5 89		      sbc	YPos
    353  f43a		       85 85		      sta	SpriteEnd
    354  f43c
    355  f43c							; Move missile to starting position and fine-tune position
    356  f43c							; TODO replace with an HMOVE macro
    357  f43c		       85 02		      sta	WSYNC
      0  f43e					      sleep	EMERALD_MI_HMOVE_S
      1  f43e				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f43e
      3  f43e				  -	      IF	.CYCLES < 2
      4  f43e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f43e				  -	      ERR
      6  f43e					      ENDIF
      7  f43e
      8  f43e					      IF	.CYCLES & 1
      9  f43e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f43e		       04 00		      nop	0
     11  f440				  -	      ELSE
     12  f440				  -	      bit	VSYNC
     13  f440					      ENDIF
     14  f440				   .CYCLES    SET	.CYCLES - 3
     15  f440					      ENDIF
     16  f440
     17  f440					      REPEAT	.CYCLES / 2
     18  f440		       ea		      nop
     17  f440					      REPEND
     18  f441		       ea		      nop
     17  f441					      REPEND
     18  f442		       ea		      nop
     17  f442					      REPEND
     18  f443		       ea		      nop
     17  f443					      REPEND
     18  f444		       ea		      nop
     17  f444					      REPEND
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     17  f44b					      REPEND
     18  f44c		       ea		      nop
     17  f44c					      REPEND
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     19  f452					      REPEND
    359  f452		       85 13		      sta	EMERALD_MI_RESET
    360  f454
    361  f454							; Player 1
    362  f454		       a5 86		      lda	XPos
    363  f456		       a2 00		      ldx	#0
    364  f458		       20 ca f8 	      jsr	SetHorizPos
    365  f45b
    366  f45b
    367  f45b							; Choose which hmove value to use
    368  f45b
    369  f45b
    370  f45b							; [TODO]
    371  f45b							; Make these into separate horizontal positioning calls
    372  f45b							; which will make it possible to do better missle tricks
    373  f45b							; and free up both kernels to have another reigster
    374  f45b
    375  f45b
    376  f45b
    377  f45b							; FRAMESWITCH
    378  f45b		       a9 01		      lda	#01
    379  f45d		       25 83		      and	FrameCount
    380  f45f		       d0 07		      bne	doframe2
    381  f461
    382  f461							; frame 1
    383  f461		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    384  f463		       85 23		      sta	EMERALD_MI_HMOVE
    385  f465		       4c 6c f4 	      jmp	doframe2after
    386  f468
    387  f468							; frame 2
    388  f468				   doframe2
    389  f468		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    390  f46a		       85 23		      sta	EMERALD_MI_HMOVE
    391  f46c				   doframe2after
    392  f46c
    393  f46c
    394  f46c
    395  f46c
      0  f46c					      TIMER_WAIT
      1  f46c				   .waittimer
      2  f46c		       ad 84 02 	      lda	INTIM
      3  f46f		       d0 fb		      bne	.waittimer
      0  f471					      TIMER_SETUP	192
      1  f471				   .lines     SET	192
      2  f471		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f473		       85 02		      sta	WSYNC
      4  f475		       8d 96 02 	      sta	TIM64T
    398  f478		       85 02		      sta	WSYNC	; ??? Is this needed?
    399  f47a
    400  f47a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    401  f47a							;
    402  f47a							; Visible Kernel
    403  f47a							;
    404  f47a
    405  f47a							; Frame border top
    406  f47a
    407  f47a							; First HMOVE
    408  f47a		       85 2a		      sta	HMOVE
    409  f47c
    410  f47c		       a9 00		      lda	#0
    411  f47e		       85 08		      sta	COLUPF
    412  f480		       85 0e		      sta	PF1
    413  f482		       85 0f		      sta	PF2
    414  f484		       a9 02		      lda	#SIGNAL_LINE
    415  f486		       85 09		      sta	COLUBK
    416  f488
    417  f488					      REPEAT	6
    418  f488		       85 02		      sta	WSYNC
    417  f488					      REPEND
    418  f48a		       85 02		      sta	WSYNC
    417  f48a					      REPEND
    418  f48c		       85 02		      sta	WSYNC
    417  f48c					      REPEND
    418  f48e		       85 02		      sta	WSYNC
    417  f48e					      REPEND
    418  f490		       85 02		      sta	WSYNC
    417  f490					      REPEND
    418  f492		       85 02		      sta	WSYNC
    419  f494					      REPEND
    420  f494
    421  f494		       a9 00		      lda	#0
    422  f496		       85 09		      sta	COLUBK
    423  f498		       85 02		      sta	WSYNC
    424  f49a
    425  f49a							; Start top border
    426  f49a				   border_top
    427  f49a							; Make the playfield solid.
    428  f49a		       a9 3f		      lda	#%00111111
    429  f49c		       85 0e		      sta	PF1
    430  f49e		       a9 ff		      lda	#%11111111
    431  f4a0		       85 0f		      sta	PF2
    432  f4a2
    433  f4a2		       a9 42		      lda	#COL_BG
    434  f4a4		       a0 00		      ldy	#0
    435  f4a6
    436  f4a6		       85 08		      sta	COLUPF
    437  f4a8		       85 02		      sta	WSYNC
    438  f4aa
    439  f4aa		       84 08		      sty	COLUPF
    440  f4ac		       85 02		      sta	WSYNC
    441  f4ae
    442  f4ae		       85 08		      sta	COLUPF
    443  f4b0		       85 02		      sta	WSYNC
    444  f4b2
    445  f4b2		       85 02		      sta	WSYNC
    446  f4b4
    447  f4b4		       85 02		      sta	WSYNC
    448  f4b6
    449  f4b6		       84 08		      sty	COLUPF
    450  f4b8		       85 02		      sta	WSYNC
    451  f4ba
    452  f4ba		       85 08		      sta	COLUPF
    453  f4bc		       85 02		      sta	WSYNC
    454  f4be
    455  f4be		       85 02		      sta	WSYNC
    456  f4c0
    457  f4c0				   PlayArea
    458  f4c0							; PF is now the playing area
    459  f4c0		       a9 00		      lda	#%00000000
    460  f4c2		       85 0d		      sta	PF0
    461  f4c4		       a9 20		      lda	#%00100000
    462  f4c6		       85 0e		      sta	PF1
    463  f4c8		       a9 00		      lda	#%00000000
    464  f4ca		       85 0f		      sta	PF2
    465  f4cc
    466  f4cc
    467  f4cc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    468  f4cc
    469  f4cc							; Frame Start
    470  f4cc
    471  f4cc
    472  f4cc
    473  f4cc							; MACRO for calculating next GRPx value
    474  f4cc
    475  f4cc					      MAC	jet_spritedata_calc_nosta
    476  f4cc							; loader
    477  f4cc					      dcp	SpriteEnd
    478  f4cc
    479  f4cc							; 4c
    480  f4cc							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    481  f4cc							; 6c
    482  f4cc					      ldy	#0
    483  f4cc					      .byte	$b0, $01	;2c / 3c (taken)
    484  f4cc					      .byte	$2c	; 4c / 0c
    485  f4cc					      ldy	SpriteEnd
    486  f4cc
    487  f4cc					      ENDM
    488  f4cc
    489  f4cc					      MAC	jet_spritedata_calc
    490  f4cc							; loader
    491  f4cc					      lda	#SPRITE_HEIGHT
    492  f4cc					      dcp	SpriteEnd
    493  f4cc					      ldy	SpriteEnd
    494  f4cc
    495  f4cc							; 4c
    496  f4cc							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    497  f4cc					      lda	Frame0,Y
    498  f4cc							; 6c
    499  f4cc					      .byte	$b0, $01	;2c / 3c (taken)
    500  f4cc					      .byte	$2c	; 4c / 0c
    501  f4cc					      sta	JET_SP	; 0c / 3c
    502  f4cc
    503  f4cc					      ENDM
    504  f4cc
    505  f4cc
    506  f4cc							; Start the row with a WSYNC.
    507  f4cc				   row_start
    508  f4cc							; ~15c
      0  f4cc					      jet_spritedata_calc
      1  f4cc
      2  f4cc		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ce		       c7 85		      dcp	SpriteEnd
      4  f4d0		       a4 85		      ldy	SpriteEnd
      5  f4d2
      6  f4d2
      7  f4d2
      8  f4d2		       b9 00 f9 	      lda	Frame0,Y
      9  f4d5
     10  f4d5		       b0 01		      .byte.b	$b0, $01
     11  f4d7		       2c		      .byte.b	$2c
     12  f4d8		       85 1b		      sta	JET_SP
     13  f4da
    510  f4da		       85 02		      sta	WSYNC
    511  f4dc
    512  f4dc							; [row:1]
      0  f4dc					      jet_spritedata_calc
      1  f4dc
      2  f4dc		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4de		       c7 85		      dcp	SpriteEnd
      4  f4e0		       a4 85		      ldy	SpriteEnd
      5  f4e2
      6  f4e2
      7  f4e2
      8  f4e2		       b9 00 f9 	      lda	Frame0,Y
      9  f4e5
     10  f4e5		       b0 01		      .byte.b	$b0, $01
     11  f4e7		       2c		      .byte.b	$2c
     12  f4e8		       85 1b		      sta	JET_SP
     13  f4ea
    514  f4ea
    515  f4ea		       a9 00		      lda	#0
    516  f4ec		       85 08		      sta	COLUPF
    517  f4ee
    518  f4ee							; Push jump table to the stack
    519  f4ee		       a9 f5		      lda	#>[row_after_kernel - 1]
    520  f4f0		       48		      pha
    521  f4f1		       a9 37		      lda	#<[row_after_kernel - 1]
    522  f4f3		       48		      pha
    523  f4f4		       a9 81		      lda	#%10000001
    524  f4f6		       48		      pha
    525  f4f7		       a9 10		      lda	#>[$1100 - 1]
    526  f4f9		       48		      pha
    527  f4fa		       a9 ff		      lda	#<[$1100 - 1]
    528  f4fc		       48		      pha
    529  f4fd		       a9 81		      lda	#%10000001
    530  f4ff		       48		      pha
    531  f500
    532  f500		       85 02		      sta	WSYNC
    533  f502
    534  f502							; [row:2]
      0  f502					      jet_spritedata_calc
      1  f502
      2  f502		       a9 09		      lda	#SPRITE_HEIGHT
      3  f504		       c7 85		      dcp	SpriteEnd
      4  f506		       a4 85		      ldy	SpriteEnd
      5  f508
      6  f508
      7  f508
      8  f508		       b9 00 f9 	      lda	Frame0,Y
      9  f50b
     10  f50b		       b0 01		      .byte.b	$b0, $01
     11  f50d		       2c		      .byte.b	$2c
     12  f50e		       85 1b		      sta	JET_SP
     13  f510
    536  f510
    537  f510
    538  f510		       a9 42		      lda	#COL_BG
    539  f512		       85 08		      sta	COLUPF
    540  f514
    541  f514
    542  f514		       a9 09		      lda	#SPRITE_HEIGHT
      0  f516					      jet_spritedata_calc_nosta
      1  f516
      2  f516		       c7 85		      dcp	SpriteEnd
      3  f518
      4  f518
      5  f518
      6  f518
      7  f518		       a0 00		      ldy	#0
      8  f51a		       b0 01		      .byte.b	$b0, $01
      9  f51c		       2c		      .byte.b	$2c
     10  f51d		       a4 85		      ldy	SpriteEnd
     11  f51f
    544  f51f		       b9 00 f9 	      lda	Frame0,Y
    545  f522		       85 fa		      sta	$fa
      0  f524					      jet_spritedata_calc_nosta
      1  f524
      2  f524		       c7 85		      dcp	SpriteEnd
      3  f526
      4  f526
      5  f526
      6  f526
      7  f526		       a0 00		      ldy	#0
      8  f528		       b0 01		      .byte.b	$b0, $01
      9  f52a		       2c		      .byte.b	$2c
     10  f52b		       a4 85		      ldy	SpriteEnd
     11  f52d
    547  f52d		       b9 00 f9 	      lda	Frame0,Y
    548  f530		       85 fd		      sta	$fd
    549  f532
      0  f532					      sleep	6
      1  f532				   .CYCLES    SET	6
      2  f532
      3  f532				  -	      IF	.CYCLES < 2
      4  f532				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f532				  -	      ERR
      6  f532					      ENDIF
      7  f532
      8  f532				  -	      IF	.CYCLES & 1
      9  f532				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f532				  -	      nop	0
     11  f532				  -	      ELSE
     12  f532				  -	      bit	VSYNC
     13  f532				  -	      ENDIF
     14  f532				  -.CYCLES    SET	.CYCLES - 3
     15  f532					      ENDIF
     16  f532
     17  f532					      REPEAT	.CYCLES / 2
     18  f532		       ea		      nop
     17  f532					      REPEND
     18  f533		       ea		      nop
     17  f533					      REPEND
     18  f534		       ea		      nop
     19  f535					      REPEND
    551  f535
    552  f535							; [row:3-4]
    553  f535							; Jump to the copied kernel.
    554  f535				   kernel_launch
    555  f535		       4c 00 11 	      jmp	KERNEL_START
    556  f538
    557  f538				   row_after_kernel
    558  f538							; [row:5]
    559  f538							; Cleanup from the kernel.
    560  f538		       a9 00		      lda	#0
    561  f53a		       85 1e		      sta	EMERALD_MI_ENABLE
    562  f53c		       85 1c		      sta	EMERALD_SP
    563  f53e		       85 08		      sta	COLUPF
    564  f540
      0  f540					      jet_spritedata_calc
      1  f540
      2  f540		       a9 09		      lda	#SPRITE_HEIGHT
      3  f542		       c7 85		      dcp	SpriteEnd
      4  f544		       a4 85		      ldy	SpriteEnd
      5  f546
      6  f546
      7  f546
      8  f546		       b9 00 f9 	      lda	Frame0,Y
      9  f549
     10  f549		       b0 01		      .byte.b	$b0, $01
     11  f54b		       2c		      .byte.b	$2c
     12  f54c		       85 1b		      sta	JET_SP
     13  f54e
    566  f54e
    567  f54e		       85 02		      sta	WSYNC
    568  f550
    569  f550							; [row:6]
      0  f550					      jet_spritedata_calc
      1  f550
      2  f550		       a9 09		      lda	#SPRITE_HEIGHT
      3  f552		       c7 85		      dcp	SpriteEnd
      4  f554		       a4 85		      ldy	SpriteEnd
      5  f556
      6  f556
      7  f556
      8  f556		       b9 00 f9 	      lda	Frame0,Y
      9  f559
     10  f559		       b0 01		      .byte.b	$b0, $01
     11  f55b		       2c		      .byte.b	$2c
     12  f55c		       85 1b		      sta	JET_SP
     13  f55e
    571  f55e		       a9 42		      lda	#COL_BG
    572  f560		       85 08		      sta	COLUPF
    573  f562
    574  f562							; FRAMESWITCH
    575  f562		       a9 01		      lda	#01
    576  f564		       25 83		      and	FrameCount
    577  f566		       d0 45		      bne	loadframe2
    578  f568
    579  f568				   loadframe1
    580  f568							; ~30c
    581  f568
    582  f568							; Emerald byte setting 1A
    583  f568		       a2 00		      ldx	#0
    584  f56a		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    585  f56d		       8d 0c 10 	      sta	GEM_00_W
    586  f570		       e8		      inx
    587  f571		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    588  f574		       8d 14 10 	      sta	GEM_04_W
    589  f577		       e8		      inx
    590  f578		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    591  f57b		       8d 18 10 	      sta	GEM_09_W
    592  f57e		       e8		      inx
    593  f57f
    594  f57f		       85 02		      sta	WSYNC
    595  f581
    596  f581							; [row:7]
      0  f581					      jet_spritedata_calc
      1  f581
      2  f581		       a9 09		      lda	#SPRITE_HEIGHT
      3  f583		       c7 85		      dcp	SpriteEnd
      4  f585		       a4 85		      ldy	SpriteEnd
      5  f587
      6  f587
      7  f587
      8  f587		       b9 00 f9 	      lda	Frame0,Y
      9  f58a
     10  f58a		       b0 01		      .byte.b	$b0, $01
     11  f58c		       2c		      .byte.b	$2c
     12  f58d		       85 1b		      sta	JET_SP
     13  f58f
    598  f58f
    599  f58f							; Emerald byte setting 1B
    600  f58f		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    601  f592		       8d 1c 10 	      sta	GEM_13_W
    602  f595		       e8		      inx
    603  f596		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    604  f599		       8d 20 10 	      sta	GEM_17_W
    605  f59c		       e8		      inx
    606  f59d		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    607  f5a0		       8d 22 10 	      sta	GEM_18_W
    608  f5a3		       e8		      inx
    609  f5a4		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    610  f5a7		       8d 26 10 	      sta	GEM_22_W
    611  f5aa
    612  f5aa		       4c f2 f5 	      jmp	row_7_end
    613  f5ad
    614  f5ad				   loadframe2
    615  f5ad							; ~30c
    616  f5ad
    617  f5ad							; Emerald byte setting 2A
    618  f5ad		       a2 07		      ldx	#[storage_02 - storage]
    619  f5af		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    620  f5b2		       8d 0f 10 	      sta	GEM_02_W
    621  f5b5		       e8		      inx
    622  f5b6		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    623  f5b9		       8d 16 10 	      sta	GEM_06_W
    624  f5bc		       e8		      inx
    625  f5bd		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    626  f5c0		       8d 0b 10 	      sta	GEM_08_W
    627  f5c3		       e8		      inx
    628  f5c4
    629  f5c4		       85 02		      sta	WSYNC
    630  f5c6
    631  f5c6							; [row:7]
      0  f5c6					      jet_spritedata_calc
      1  f5c6
      2  f5c6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c8		       c7 85		      dcp	SpriteEnd
      4  f5ca		       a4 85		      ldy	SpriteEnd
      5  f5cc
      6  f5cc
      7  f5cc
      8  f5cc		       b9 00 f9 	      lda	Frame0,Y
      9  f5cf
     10  f5cf		       b0 01		      .byte.b	$b0, $01
     11  f5d1		       2c		      .byte.b	$2c
     12  f5d2		       85 1b		      sta	JET_SP
     13  f5d4
    633  f5d4
    634  f5d4							; Emerald byte setting 2B
    635  f5d4		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    636  f5d7		       8d 1a 10 	      sta	GEM_11_W
    637  f5da		       e8		      inx
    638  f5db		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    639  f5de		       8d 1e 10 	      sta	GEM_15_W
    640  f5e1		       e8		      inx
    641  f5e2		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    642  f5e5		       8d 22 10 	      sta	GEM_20_W
    643  f5e8		       e8		      inx
    644  f5e9		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    645  f5ec		       8d 26 10 	      sta	GEM_24_W
    646  f5ef
    647  f5ef		       4c f2 f5 	      jmp	row_7_end
    648  f5f2
    649  f5f2				   row_7_end
    650  f5f2		       85 02		      sta	WSYNC
    651  f5f4
    652  f5f4							; [row:8]
    653  f5f4							; Repeat loop until LoopCount < 0
    654  f5f4		       c6 82		      dec	LoopCount
    655  f5f6		       30 03		      bmi	frame_bottom
    656  f5f8		       4c cc f4 	      jmp	row_start
    657  f5fb
    658  f5fb							; reset the background for bottom of playfield
    659  f5fb				   frame_bottom
    660  f5fb							;sta WSYNC
    661  f5fb
    662  f5fb							; Form the bottom of the level frame.
    663  f5fb		       a9 3f		      lda	#%00111111
    664  f5fd		       85 0e		      sta	PF1
    665  f5ff		       a9 ff		      lda	#%11111111
    666  f601		       85 0f		      sta	PF2
    667  f603
    668  f603							; Clear all sprites.
    669  f603		       a9 00		      lda	#0
    670  f605		       85 1c		      sta	EMERALD_SP
    671  f607		       85 1b		      sta	JET_SP
    672  f609		       85 1e		      sta	EMERALD_MI_ENABLE
    673  f60b
    674  f60b		       a9 42		      lda	#COL_BG
    675  f60d		       a0 00		      ldy	#0
    676  f60f		       85 02		      sta	WSYNC
    677  f611
    678  f611		       84 08		      sty	COLUPF
    679  f613		       85 02		      sta	WSYNC
    680  f615
    681  f615		       85 08		      sta	COLUPF
    682  f617		       85 02		      sta	WSYNC
    683  f619
    684  f619		       85 02		      sta	WSYNC
    685  f61b
    686  f61b		       85 02		      sta	WSYNC
    687  f61d
    688  f61d		       84 08		      sty	COLUPF
    689  f61f		       85 02		      sta	WSYNC
    690  f621
    691  f621		       85 08		      sta	COLUPF
    692  f623		       85 02		      sta	WSYNC
    693  f625		       85 02		      sta	WSYNC
    694  f627
    695  f627							; Blank all background colors.
    696  f627				   frame_end
    697  f627		       a9 00		      lda	#0
    698  f629		       85 08		      sta	COLUPF
    699  f62b		       85 0f		      sta	PF2
    700  f62d		       85 0e		      sta	PF1
    701  f62f		       85 1c		      sta	EMERALD_SP
    702  f631		       85 02		      sta	WSYNC
    703  f633
    704  f633							; Guide lines (2x)
    705  f633		       a9 02		      lda	#SIGNAL_LINE
    706  f635		       85 09		      sta	COLUBK
    707  f637					      REPEAT	6
    708  f637		       85 02		      sta	WSYNC
    707  f637					      REPEND
    708  f639		       85 02		      sta	WSYNC
    707  f639					      REPEND
    708  f63b		       85 02		      sta	WSYNC
    707  f63b					      REPEND
    708  f63d		       85 02		      sta	WSYNC
    707  f63d					      REPEND
    708  f63f		       85 02		      sta	WSYNC
    707  f63f					      REPEND
    708  f641		       85 02		      sta	WSYNC
    709  f643					      REPEND
    710  f643		       a9 00		      lda	#$00
    711  f645		       85 09		      sta	COLUBK
    712  f647		       85 02		      sta	WSYNC
    713  f649
      0  f649					      TIMER_WAIT
      1  f649				   .waittimer
      2  f649		       ad 84 02 	      lda	INTIM
      3  f64c		       d0 fb		      bne	.waittimer
      0  f64e					      TIMER_SETUP	30
      1  f64e				   .lines     SET	30
      2  f64e		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f650		       85 02		      sta	WSYNC
      4  f652		       8d 96 02 	      sta	TIM64T
    716  f655
    717  f655		       20 5c f8 	      jsr	MoveJoystick
    718  f658		       20 93 f8 	      jsr	SpeedCalculation
    719  f65b
      0  f65b					      TIMER_WAIT
      1  f65b				   .waittimer
      2  f65b		       ad 84 02 	      lda	INTIM
      3  f65e		       d0 fb		      bne	.waittimer
    721  f660		       4c 47 f2 	      jmp	BeginFrame
    722  f663
    723  f663
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f663					      include	"kernel_gem.s"
------- FILE jetpax.h LEVEL 3 PASS 2
      0  f663					      include	"jetpax.h"
------- FILE vcs.h LEVEL 4 PASS 2
      0  f663					      include	"vcs.h"
      1  f663							; VCS.H
      2  f663							; Version 1.05, 13/November/2003
      3  f663
      4  f663		       00 69	   VERSION_VCS =	105
      5  f663
      6  f663							; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  f663							; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f663							; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  f663							;
     10  f663							; This file defines hardware registers and memory mapping for the
     11  f663							; Atari 2600. It is distributed as a companion machine-specific support package
     12  f663							; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f663							; available at at http://www.atari2600.org/dasm
     14  f663							;
     15  f663							; Many thanks to the original author(s) of this file, and to everyone who has
     16  f663							; contributed to understanding the Atari 2600.  If you take issue with the
     17  f663							; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  f663							; with your views.  Please contribute, if you think you can improve this
     19  f663							; file!
     20  f663							;
     21  f663							; Latest Revisions...
     22  f663							; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  f663							;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  f663							;			    This will allow conditional code to verify VCS.H being
     25  f663							;			    used for code assembly.
     26  f663							; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  f663							;			 convenient disassembly/reassembly compatibility for hardware
     28  f663							;			 mirrored reading/writing differences.	This is more a 
     29  f663							;			 readability issue, and binary compatibility with disassembled
     30  f663							;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  f663							; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  f663							;			 which was broken by the use of segments in this file, as
     33  f663							;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  f663							; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  f663							; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  f663							;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  f663							;						   it is safe to leave it undefined, and the base address will
     38  f663							;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  f663							;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  f663							;			  - register definitions are now generated through assignment
     41  f663							;			    in uninitialised segments.	This allows a changeable base
     42  f663							;			    address architecture.
     43  f663							; 1.0	22/MAR/2003		Initial release
     44  f663
     45  f663
     46  f663							;-------------------------------------------------------------------------------
     47  f663
     48  f663							; TIA_BASE_ADDRESS
     49  f663							; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  f663							; Normally 0, the base address should (externally, before including this file)
     51  f663							; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  f663							; The reason is that this bankswitching scheme treats any access to locations
     53  f663							; < $40 as a bankswitch.
     54  f663
     55  f663				  -	      IFNCONST	TIA_BASE_ADDRESS
     56  f663				  -TIA_BASE_ADDRESS =	0
     57  f663					      ENDIF
     58  f663
     59  f663							; Note: The address may be defined on the command-line using the -D switch, eg:
     60  f663							; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  f663							; *OR* by declaring the label before including this file, eg:
     62  f663							; TIA_BASE_ADDRESS = $40
     63  f663							;   include "vcs.h"
     64  f663
     65  f663							; Alternate read/write address capability - allows for some disassembly compatibility
     66  f663							; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  f663							; for the mirrored ROM hardware registers.
     68  f663
     69  f663							; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  f663							; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  f663							; they defaut to the TIA_BASE_ADDRESS.
     72  f663
     73  f663				  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  f663				  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  f663					      ENDIF
     76  f663
     77  f663				  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  f663				  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  f663					      ENDIF
     80  f663
     81  f663							;-------------------------------------------------------------------------------
     82  f663
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE jetpax.h
------- FILE macro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  10000 ????
      4  10000 ????		00 6a	    VERSION_MACRO =	106
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  10000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  10000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  10000 ????						;			   used for code assembly.
     25  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  10000 ????						;
     27  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  10000 ????						;
     29  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  10000 ????						;			   (standardised macro for vertical synch code)
     31  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  10000 ????						; 1.0	22/MAR/2003		Initial release
     34  10000 ????
     35  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  10000 ????						;   registers and require them to be defined first).
     40  10000 ????
     41  10000 ????						; Available macros...
     42  10000 ????						;   SLEEP n		 - sleep for n cycles
     43  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????						; SLEEP duration
     49  10000 ????						; Original author: Thomas Jentzsch
     50  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  10000 ????						; useful for code where precise timing is required.
     52  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  10000 ????
     56  10000 ????				       MAC	sleep
     57  10000 ????			    .CYCLES    SET	{1}
     58  10000 ????
     59  10000 ????				       IF	.CYCLES < 2
     60  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  10000 ????				       ERR
     62  10000 ????				       ENDIF
     63  10000 ????
     64  10000 ????				       IF	.CYCLES & 1
     65  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     66  10000 ????				       nop	0
     67  10000 ????				       ELSE
     68  10000 ????				       bit	VSYNC
     69  10000 ????				       ENDIF
     70  10000 ????			    .CYCLES    SET	.CYCLES - 3
     71  10000 ????				       ENDIF
     72  10000 ????
     73  10000 ????				       REPEAT	.CYCLES / 2
     74  10000 ????				       nop
     75  10000 ????				       REPEND
     76  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     77  10000 ????
     78  10000 ????						;-------------------------------------------------------------------------------
     79  10000 ????						; VERTICAL_SYNC
     80  10000 ????						; revised version by Edwin Blink -- saves bytes!
     81  10000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  10000 ????						; Note: Alters the accumulator
     83  10000 ????
     84  10000 ????						; OUT: A = 0
     85  10000 ????
     86  10000 ????				       MAC	vertical_sync
     87  10000 ????				       lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  10000 ????			    .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  10000 ????				       sta	VSYNC
     90  10000 ????				       lsr
     91  10000 ????				       bne	.VSLP1	; branch until VYSNC has been reset
     92  10000 ????				       ENDM
     93  10000 ????
     94  10000 ????						;-------------------------------------------------------------------------------
     95  10000 ????						; CLEAN_START
     96  10000 ????						; Original author: Andrew Davie
     97  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  10000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  10000 ????						; Use as very first section of code on boot (ie: at reset)
    101  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  10000 ????
    103  10000 ????				       MAC	clean_start
    104  10000 ????				       sei
    105  10000 ????				       cld
    106  10000 ????
    107  10000 ????				       ldx	#0
    108  10000 ????				       txa
    109  10000 ????				       tay
    110  10000 ????			    .CLEAR_STACK dex
    111  10000 ????				       txs
    112  10000 ????				       pha
    113  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  10000 ????
    115  10000 ????				       ENDM
    116  10000 ????
    117  10000 ????						;-------------------------------------------------------
    118  10000 ????						; SET_POINTER
    119  10000 ????						; Original author: Manuel Rotschkar
    120  10000 ????						;
    121  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  10000 ????						;
    123  10000 ????						; Usage: SET_POINTER pointer, address
    124  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  10000 ????						;
    126  10000 ????						; Note: Alters the accumulator, NZ flags
    127  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  10000 ????						; IN 2: absolute address
    129  10000 ????
    130  10000 ????				       MAC	set_pointer
    131  10000 ????			    .POINTER   SET	{1}
    132  10000 ????			    .ADDRESS   SET	{2}
    133  10000 ????
    134  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  10000 ????				       STA	.POINTER	; Store in pointer
    136  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    137  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    138  10000 ????
    139  10000 ????				       ENDM
    140  10000 ????
    141  10000 ????						;-------------------------------------------------------
    142  10000 ????						; BOUNDARY byte#
    143  10000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  10000 ????						;
    145  10000 ????						; Push data to a certain position inside a page and keep count of how
    146  10000 ????						; many free bytes the programmer will have.
    147  10000 ????						;
    148  10000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  10000 ????
    150  10000 ????			    .FREE_BYTES SET	0
    151  10000 ????				       MAC	boundary
    152  10000 ????				       REPEAT	256
    153  10000 ????				       IF	<. % {1} = 0
    154  10000 ????				       MEXIT
    155  10000 ????				       ELSE
    156  10000 ????			    .FREE_BYTES SET	.FREE_BYTES + 1
    157  10000 ????				       .byte	$00
    158  10000 ????				       ENDIF
    159  10000 ????				       REPEND
    160  10000 ????				       ENDM
    161  10000 ????
    162  10000 ????
    163  10000 ????						; EOF
------- FILE jetpax.h
------- FILE xmacro.h LEVEL 4 PASS 2
      0  10000 ????				       include	"xmacro.h"
      1  10000 ????
      2  10000 ????						;-------------------------------------------------------
      3  10000 ????						; Usage: TIMER_SETUP lines
      4  10000 ????						; where lines is the number of scanlines to skip (> 2).
      5  10000 ????						; The timer will be set so that it expires before this number
      6  10000 ????						; of scanlines. A WSYNC will be done first.
      7  10000 ????
      8  10000 ????				       MAC	timer_setup
      9  10000 ????			    .lines     SET	{1}
     10  10000 ????				       lda	#(((.lines-1)*76-14)/64)
     11  10000 ????				       sta	WSYNC
     12  10000 ????				       sta	TIM64T
     13  10000 ????				       ENDM
     14  10000 ????
     15  10000 ????						;-------------------------------------------------------
     16  10000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  10000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  10000 ????						; is not accurate to the beginning/end of a scanline.
     19  10000 ????
     20  10000 ????				       MAC	timer_wait
     21  10000 ????			    .waittimer
     22  10000 ????				       lda	INTIM
     23  10000 ????				       bne	.waittimer
     24  10000 ????				       ENDM
     25  10000 ????
------- FILE jetpax.h
------- FILE kernel_gem.s
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;
      5  10000 ????						; Gem kernels
      6  10000 ????						;
      7  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      8  10000 ????						;
      9  10000 ????						; Gems are displayed in alternating kernels. This chart shows
     10  10000 ????						; which kernel is responsible for which gem, with missiles denoted.
     11  10000 ????						;
     12  10000 ????						;  1: |SS  SS	 SS  |SS  MSS  SS  |	    kernel 1 (S = Sprite, M = missile)
     13  10000 ????						;  2: |  SS  SSM  SS|	SS   SS  SS|	    kernel 2
     14  10000 ????						;  =  |1122112221122|1122111221122|	    kernel #
     15  10000 ????						;  #  0^      8^	17^	25^	    gem index
     16  10000 ????						;  C 29^			  64^	    scanline cycle
     17  10000 ????						;
     18  10000 ????						; (The middle bar indicates where the pattern reverses.)
     19  10000 ????						;
     20  10000 ????						; Because we can repeat a sprite multiple times, and reset the sprite
     21  10000 ????						; occurance mid-line, we can render close to half of the 26 gems a line
     22  10000 ????						; requires with a single sprite. By alternating sprites each frame with an...
     23  10000 ????						; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     24  10000 ????						; line, except for two. These are instead rendered by the missile, which
     25  10000 ????						; corresponds to the sprite and must have the same color and repeat pattern.
     26  10000 ????						;
     27  10000 ????						; TODO there is a better writeup of how to get the last few sprites on the line
     28  10000 ????						; with missles?
     29  10000 ????						;
     30  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     31  10000 ????
     32  10000 ????						; KERNEL 1
     33  10000 ????
     34  10000 ????						; Emerald line macro (1, 2, ...)
     35  10000 ????
     36  f800					      org	$f800
     37  f800
     38  f800				   kernel_1_start
     39  f800							; sleep first make this distinct from
     40  f800							; other kernel for debug scenarios
      0  f800					      sleep	6
      1  f800				   .CYCLES    SET	6
      2  f800
      3  f800				  -	      IF	.CYCLES < 2
      4  f800				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f800				  -	      ERR
      6  f800					      ENDIF
      7  f800
      8  f800				  -	      IF	.CYCLES & 1
      9  f800				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f800				  -	      nop	0
     11  f800				  -	      ELSE
     12  f800				  -	      bit	VSYNC
     13  f800				  -	      ENDIF
     14  f800				  -.CYCLES    SET	.CYCLES - 3
     15  f800					      ENDIF
     16  f800
     17  f800					      REPEAT	.CYCLES / 2
     18  f800		       ea		      nop
     17  f800					      REPEND
     18  f801		       ea		      nop
     17  f801					      REPEND
     18  f802		       ea		      nop
     19  f803					      REPEND
     42  f803		       68		      pla
     43  f804		       85 1b		      sta	GRP0
     44  f806
     45  f806		       a9 60		      lda	#EMR1
     46  f808		       a2 06		      ldx	#EMR2
     47  f80a		       a0 66		      ldy	#EMR3
     48  f80c				   .gem_00
     49  f80c		       84 1c		      .byte.b	GEM_00, EMERALD_SP	; moveable?
     50  f80e
     51  f80e							; Critical: 22c (start of precise timing)
     52  f80e							; (A)
     53  f80e		       85 11		      sta	EMERALD_SP_RESET	; trivial
     54  f810							; (B)
     55  f810		       85 1e		      sta	EMERALD_MI_ENABLE	; trivial ; Is this timing-critical??
     56  f812							; (C)
      0  f812					      sleep	3
      1  f812				   .CYCLES    SET	3
      2  f812
      3  f812				  -	      IF	.CYCLES < 2
      4  f812				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f812				  -	      ERR
      6  f812					      ENDIF
      7  f812
      8  f812					      IF	.CYCLES & 1
      9  f812					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f812		       04 00		      nop	0
     11  f814				  -	      ELSE
     12  f814				  -	      bit	VSYNC
     13  f814					      ENDIF
     14  f814				   .CYCLES    SET	.CYCLES - 3
     15  f814					      ENDIF
     16  f814
     17  f814				  -	      REPEAT	.CYCLES / 2
     18  f814				  -	      nop
     19  f814					      REPEND
     58  f814
     59  f814							; TODO bonus VDEL sprite
     60  f814				   .gem_04
     61  f814							; (D) far
     62  f814		       84 1c		      .byte.b	GEM_04, EMERALD_SP
     63  f816
     64  f816							; middle triplet; first kernel 1???
     65  f816							; (A)
     66  f816		       85 11		      sta	EMERALD_SP_RESET	; trivial
     67  f818				   .gem_09
     68  f818							; (B)
     69  f818		       84 1c		      .byte.b	GEM_09, EMERALD_SP
     70  f81a
     71  f81a							; TODO PF1 load
     72  f81a							; (C)
      0  f81a					      sleep	3
      1  f81a				   .CYCLES    SET	3
      2  f81a
      3  f81a				  -	      IF	.CYCLES < 2
      4  f81a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f81a				  -	      ERR
      6  f81a					      ENDIF
      7  f81a
      8  f81a					      IF	.CYCLES & 1
      9  f81a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f81a		       04 00		      nop	0
     11  f81c				  -	      ELSE
     12  f81c				  -	      bit	VSYNC
     13  f81c					      ENDIF
     14  f81c				   .CYCLES    SET	.CYCLES - 3
     15  f81c					      ENDIF
     16  f81c
     17  f81c				  -	      REPEAT	.CYCLES / 2
     18  f81c				  -	      nop
     19  f81c					      REPEND
     74  f81c
     75  f81c							; end triplet; second kernel 1???
     76  f81c				   .gem_13
     77  f81c							; (D) for far ?
     78  f81c		       84 1c		      .byte.b	GEM_13, EMERALD_SP
     79  f81e
     80  f81e							; reset (A)
     81  f81e		       85 11		      sta	EMERALD_SP_RESET	; trivial
     82  f820				   .gem_17
     83  f820
     84  f820							; spare; missle writes
     85  f820							; 49c (B)
     86  f820		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE	; could htis ever possibly be
     87  f822							; moved out of the kernel, and if so, huge wins
     88  f822							; (makes next sprite a freebie too, then just dealing with 3)
     89  f822							; unique sprite values!!
     90  f822							; or at least the write of the particular OPCODE out of hte krernel ?
     91  f822							; even extreme measures...! PHP with Z register!!! muahaha
     92  f822							; dunno how to deal with the opcode length change though?
     93  f822
     94  f822							; middle triplet; third kernel 1??? (C)
     95  f822				   .gem_18
     96  f822		       84 1c		      .byte.b	GEM_18, EMERALD_SP
     97  f824
     98  f824							; end triplet; free (D)
      0  f824					      sleep	3
      1  f824				   .CYCLES    SET	3
      2  f824
      3  f824				  -	      IF	.CYCLES < 2
      4  f824				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f824				  -	      ERR
      6  f824					      ENDIF
      7  f824
      8  f824					      IF	.CYCLES & 1
      9  f824					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f824		       04 00		      nop	0
     11  f826				  -	      ELSE
     12  f826				  -	      bit	VSYNC
     13  f826					      ENDIF
     14  f826				   .CYCLES    SET	.CYCLES - 3
     15  f826					      ENDIF
     16  f826
     17  f826				  -	      REPEAT	.CYCLES / 2
     18  f826				  -	      nop
     19  f826					      REPEND
    100  f826				   .gem_22
    101  f826							; (E) past far ????
    102  f826		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    103  f828							; Critical End: 64c (cycle follows start of right border)
    104  f828
      0  f828					      sleep	9
      1  f828				   .CYCLES    SET	9
      2  f828
      3  f828				  -	      IF	.CYCLES < 2
      4  f828				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f828				  -	      ERR
      6  f828					      ENDIF
      7  f828
      8  f828					      IF	.CYCLES & 1
      9  f828					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f828		       04 00		      nop	0
     11  f82a				  -	      ELSE
     12  f82a				  -	      bit	VSYNC
     13  f82a					      ENDIF
     14  f82a				   .CYCLES    SET	.CYCLES - 3
     15  f82a					      ENDIF
     16  f82a
     17  f82a					      REPEAT	.CYCLES / 2
     18  f82a		       ea		      nop
     17  f82a					      REPEND
     18  f82b		       ea		      nop
     17  f82b					      REPEND
     18  f82c		       ea		      nop
     19  f82d					      REPEND
    106  f82d		       60		      rts
    107  f82e				   kernel_1_end
    108  f82e
    109  f82e		       10 0c	   GEM_00_W   equ	[$1000 + .gem_00 - kernel_1_start]
    110  f82e		       10 14	   GEM_04_W   equ	[$1000 + .gem_04 - kernel_1_start]
    111  f82e		       10 18	   GEM_09_W   equ	[$1000 + .gem_09 - kernel_1_start]
    112  f82e		       10 1c	   GEM_13_W   equ	[$1000 + .gem_13 - kernel_1_start]
    113  f82e		       10 20	   GEM_17_W   equ	[$1000 + .gem_17 - kernel_1_start]
    114  f82e		       10 22	   GEM_18_W   equ	[$1000 + .gem_18 - kernel_1_start]
    115  f82e		       10 26	   GEM_22_W   equ	[$1000 + .gem_22 - kernel_1_start]
    116  f82e
    117  f82e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    118  f82e
    119  f82e							; KERNEL 2
    120  f82e
    121  f82e							; Emerald line macro (3, 4, ...)
    122  f82e
    123  f82e				   kernel_2_start
    124  f82e							; don't sleep first to make this distinct from kernel 1
    125  f82e		       68		      pla
    126  f82f		       85 1b		      sta	GRP0
      0  f831					      sleep	4
      1  f831				   .CYCLES    SET	4
      2  f831
      3  f831				  -	      IF	.CYCLES < 2
      4  f831				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f831				  -	      ERR
      6  f831					      ENDIF
      7  f831
      8  f831				  -	      IF	.CYCLES & 1
      9  f831				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f831				  -	      nop	0
     11  f831				  -	      ELSE
     12  f831				  -	      bit	VSYNC
     13  f831				  -	      ENDIF
     14  f831				  -.CYCLES    SET	.CYCLES - 3
     15  f831					      ENDIF
     16  f831
     17  f831					      REPEAT	.CYCLES / 2
     18  f831		       ea		      nop
     17  f831					      REPEND
     18  f832		       ea		      nop
     19  f833					      REPEND
    128  f833
    129  f833							; Enable missile (using excessive lda instructions)
    130  f833		       a9 02		      lda	#02
    131  f835		       a2 0c		      ldx	#T2
    132  f837		       a0 cc		      ldy	#T3
    133  f839				   .gem_08
    134  f839		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE	; movable
    135  f83b		       a9 c0		      lda	#T1	; movable?
    136  f83d				   .gem_02
    137  f83d							; load the first sprite
    138  f83d		       84 1c		      .byte.b	GEM_02, EMERALD_SP	; movable
    139  f83f
    140  f83f							; TODO preload the second sprite and
    141  f83f							; have that write GEM_06
    142  f83f
    143  f83f							; Critical: 25c (start of precise timing)
    144  f83f		       85 11		      sta	EMERALD_SP_RESET	; trivial
    145  f841
    146  f841							; already set middle triplet
    147  f841							;ldx #%00010010
    148  f841							;stx.w NUSIZ1
      0  f841					      sleep	6
      1  f841				   .CYCLES    SET	6
      2  f841
      3  f841				  -	      IF	.CYCLES < 2
      4  f841				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f841				  -	      ERR
      6  f841					      ENDIF
      7  f841
      8  f841				  -	      IF	.CYCLES & 1
      9  f841				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f841				  -	      nop	0
     11  f841				  -	      ELSE
     12  f841				  -	      bit	VSYNC
     13  f841				  -	      ENDIF
     14  f841				  -.CYCLES    SET	.CYCLES - 3
     15  f841					      ENDIF
     16  f841
     17  f841					      REPEAT	.CYCLES / 2
     18  f841		       ea		      nop
     17  f841					      REPEND
     18  f842		       ea		      nop
     17  f842					      REPEND
     18  f843		       ea		      nop
     19  f844					      REPEND
    150  f844
    151  f844							; end triplet; bonus VDEL write
    152  f844				   .gem_06
    153  f844		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    154  f846
    155  f846							; middle triplet; write or change nusiz
    156  f846		       85 11		      sta	EMERALD_SP_RESET	; trivial
    157  f848				   .gem_11
    158  f848		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    159  f84a
    160  f84a							; disable missle
    161  f84a		       86 1e		      stx	EMERALD_MI_ENABLE
    162  f84c							; sleep 3
    163  f84c							; ^ could this be moved, and then free the timing slot
    164  f84c							; then can do the setting of PF1 value(!)
    165  f84c
    166  f84c							; end triplet; write or reset
    167  f84c				   .gem_15
    168  f84c		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    169  f84e							; 49c midway
    170  f84e		       85 11		      sta	EMERALD_SP_RESET	; spare
    171  f850							; PF2
    172  f850
    173  f850							; middle triplet; write or change nusiz
    174  f850				   .gem_20
    175  f850		       84 1c		      .byte.b	GEM_20, EMERALD_SP
      0  f852					      sleep	3	; spare
      1  f852				   .CYCLES    SET	3
      2  f852
      3  f852				  -	      IF	.CYCLES < 2
      4  f852				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f852				  -	      ERR
      6  f852					      ENDIF
      7  f852
      8  f852					      IF	.CYCLES & 1
      9  f852					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f852		       04 00		      nop	0
     11  f854				  -	      ELSE
     12  f854				  -	      bit	VSYNC
     13  f854					      ENDIF
     14  f854				   .CYCLES    SET	.CYCLES - 3
     15  f854					      ENDIF
     16  f854
     17  f854				  -	      REPEAT	.CYCLES / 2
     18  f854				  -	      nop
     19  f854					      REPEND
    177  f854
    178  f854							; end triplet; free
    179  f854				   .gem_24
    180  f854		       84 1c		      .byte.b	GEM_24, EMERALD_SP
    181  f856							; Critical End: 61c (just before gem 24 render)
    182  f856
    183  f856							; ldx #%0001001
    184  f856							; stx.w NUSIZ1
      0  f856					      sleep	9
      1  f856				   .CYCLES    SET	9
      2  f856
      3  f856				  -	      IF	.CYCLES < 2
      4  f856				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f856				  -	      ERR
      6  f856					      ENDIF
      7  f856
      8  f856					      IF	.CYCLES & 1
      9  f856					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f856		       04 00		      nop	0
     11  f858				  -	      ELSE
     12  f858				  -	      bit	VSYNC
     13  f858					      ENDIF
     14  f858				   .CYCLES    SET	.CYCLES - 3
     15  f858					      ENDIF
     16  f858
     17  f858					      REPEAT	.CYCLES / 2
     18  f858		       ea		      nop
     17  f858					      REPEND
     18  f859		       ea		      nop
     17  f859					      REPEND
     18  f85a		       ea		      nop
     19  f85b					      REPEND
    186  f85b		       60		      rts
    187  f85c				   kernel_2_end
    188  f85c
    189  f85c		       10 0f	   GEM_02_W   equ	[$1000 + .gem_02 - kernel_2_start]
    190  f85c		       10 16	   GEM_06_W   equ	[$1000 + .gem_06 - kernel_2_start]
    191  f85c		       10 0b	   GEM_08_W   equ	[$1000 + .gem_08 - kernel_2_start]
    192  f85c		       10 1a	   GEM_11_W   equ	[$1000 + .gem_11 - kernel_2_start]
    193  f85c		       10 1e	   GEM_15_W   equ	[$1000 + .gem_15 - kernel_2_start]
    194  f85c		       10 22	   GEM_20_W   equ	[$1000 + .gem_20 - kernel_2_start]
    195  f85c		       10 26	   GEM_24_W   equ	[$1000 + .gem_24 - kernel_2_start]
------- FILE main.s
------- FILE input.s LEVEL 2 PASS 2
      0  f85c					      include	"input.s"
------- FILE jetpax.h LEVEL 3 PASS 2
      0  f85c					      include	"jetpax.h"
------- FILE vcs.h LEVEL 4 PASS 2
      0  f85c					      include	"vcs.h"
      1  f85c							; VCS.H
      2  f85c							; Version 1.05, 13/November/2003
      3  f85c
      4  f85c		       00 69	   VERSION_VCS =	105
      5  f85c
      6  f85c							; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  f85c							; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f85c							; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  f85c							;
     10  f85c							; This file defines hardware registers and memory mapping for the
     11  f85c							; Atari 2600. It is distributed as a companion machine-specific support package
     12  f85c							; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f85c							; available at at http://www.atari2600.org/dasm
     14  f85c							;
     15  f85c							; Many thanks to the original author(s) of this file, and to everyone who has
     16  f85c							; contributed to understanding the Atari 2600.  If you take issue with the
     17  f85c							; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  f85c							; with your views.  Please contribute, if you think you can improve this
     19  f85c							; file!
     20  f85c							;
     21  f85c							; Latest Revisions...
     22  f85c							; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  f85c							;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  f85c							;			    This will allow conditional code to verify VCS.H being
     25  f85c							;			    used for code assembly.
     26  f85c							; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  f85c							;			 convenient disassembly/reassembly compatibility for hardware
     28  f85c							;			 mirrored reading/writing differences.	This is more a 
     29  f85c							;			 readability issue, and binary compatibility with disassembled
     30  f85c							;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  f85c							; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  f85c							;			 which was broken by the use of segments in this file, as
     33  f85c							;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  f85c							; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  f85c							; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  f85c							;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  f85c							;						   it is safe to leave it undefined, and the base address will
     38  f85c							;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  f85c							;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  f85c							;			  - register definitions are now generated through assignment
     41  f85c							;			    in uninitialised segments.	This allows a changeable base
     42  f85c							;			    address architecture.
     43  f85c							; 1.0	22/MAR/2003		Initial release
     44  f85c
     45  f85c
     46  f85c							;-------------------------------------------------------------------------------
     47  f85c
     48  f85c							; TIA_BASE_ADDRESS
     49  f85c							; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  f85c							; Normally 0, the base address should (externally, before including this file)
     51  f85c							; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  f85c							; The reason is that this bankswitching scheme treats any access to locations
     53  f85c							; < $40 as a bankswitch.
     54  f85c
     55  f85c				  -	      IFNCONST	TIA_BASE_ADDRESS
     56  f85c				  -TIA_BASE_ADDRESS =	0
     57  f85c					      ENDIF
     58  f85c
     59  f85c							; Note: The address may be defined on the command-line using the -D switch, eg:
     60  f85c							; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  f85c							; *OR* by declaring the label before including this file, eg:
     62  f85c							; TIA_BASE_ADDRESS = $40
     63  f85c							;   include "vcs.h"
     64  f85c
     65  f85c							; Alternate read/write address capability - allows for some disassembly compatibility
     66  f85c							; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  f85c							; for the mirrored ROM hardware registers.
     68  f85c
     69  f85c							; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  f85c							; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  f85c							; they defaut to the TIA_BASE_ADDRESS.
     72  f85c
     73  f85c				  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  f85c				  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  f85c					      ENDIF
     76  f85c
     77  f85c				  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  f85c				  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  f85c					      ENDIF
     80  f85c
     81  f85c							;-------------------------------------------------------------------------------
     82  f85c
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  f85c					      SEG
    199  f85c
    200  f85c							; EOF
------- FILE jetpax.h
------- FILE macro.h LEVEL 4 PASS 2
      0  f85c					      include	"macro.h"
      1  f85c							; MACRO.H
      2  f85c							; Version 1.06, 3/SEPTEMBER/2004
      3  f85c
      4  f85c		       00 6a	   VERSION_MACRO =	106
      5  f85c
      6  f85c							;
      7  f85c							; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f85c							; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  f85c							;
     10  f85c							; This file defines DASM macros useful for development for the Atari 2600.
     11  f85c							; It is distributed as a companion machine-specific support package
     12  f85c							; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f85c							; available at at http://www.atari2600.org/dasm
     14  f85c							;
     15  f85c							; Many thanks to the people who have contributed.  If you take issue with the
     16  f85c							; contents, or would like to add something, please write to me
     17  f85c							; (atari2600@taswegian.com) with your contribution.
     18  f85c							;
     19  f85c							; Latest Revisions...
     20  f85c							;
     21  f85c							; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  f85c							; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  f85c							;			   This will allow conditional code to verify MACRO.H being
     24  f85c							;			   used for code assembly.
     25  f85c							; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  f85c							;
     27  f85c							; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  f85c							;
     29  f85c							; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  f85c							;			   (standardised macro for vertical synch code)
     31  f85c							; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  f85c							;			 - NO_ILLEGAL_OPCODES switch implemented
     33  f85c							; 1.0	22/MAR/2003		Initial release
     34  f85c
     35  f85c							; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  f85c							;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  f85c							;   If you do not allow illegal opcode usage, you must include this file 
     38  f85c							;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  f85c							;   registers and require them to be defined first).
     40  f85c
     41  f85c							; Available macros...
     42  f85c							;   SLEEP n		 - sleep for n cycles
     43  f85c							;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  f85c							;   CLEAN_START	 - set machine to known state on startup
     45  f85c							;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  f85c
     47  f85c							;-------------------------------------------------------------------------------
     48  f85c							; SLEEP duration
     49  f85c							; Original author: Thomas Jentzsch
     50  f85c							; Inserts code which takes the specified number of cycles to execute.	This is
     51  f85c							; useful for code where precise timing is required.
     52  f85c							; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  f85c							; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  f85c							; Uses illegal opcode (DASM 2.20.01 onwards).
     55  f85c
     56  f85c					      MAC	sleep
     57  f85c				   .CYCLES    SET	{1}
     58  f85c
     59  f85c					      IF	.CYCLES < 2
     60  f85c					      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  f85c					      ERR
     62  f85c					      ENDIF
     63  f85c
     64  f85c					      IF	.CYCLES & 1
     65  f85c					      IFNCONST	NO_ILLEGAL_OPCODES
     66  f85c					      nop	0
     67  f85c					      ELSE
     68  f85c					      bit	VSYNC
     69  f85c					      ENDIF
     70  f85c				   .CYCLES    SET	.CYCLES - 3
     71  f85c					      ENDIF
     72  f85c
     73  f85c					      REPEAT	.CYCLES / 2
     74  f85c					      nop
     75  f85c					      REPEND
     76  f85c					      ENDM		;usage: SLEEP n (n>1)
     77  f85c
     78  f85c							;-------------------------------------------------------------------------------
     79  f85c							; VERTICAL_SYNC
     80  f85c							; revised version by Edwin Blink -- saves bytes!
     81  f85c							; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  f85c							; Note: Alters the accumulator
     83  f85c
     84  f85c							; OUT: A = 0
     85  f85c
     86  f85c					      MAC	vertical_sync
     87  f85c					      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  f85c				   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  f85c					      sta	VSYNC
     90  f85c					      lsr
     91  f85c					      bne	.VSLP1	; branch until VYSNC has been reset
     92  f85c					      ENDM
     93  f85c
     94  f85c							;-------------------------------------------------------------------------------
     95  f85c							; CLEAN_START
     96  f85c							; Original author: Andrew Davie
     97  f85c							; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  f85c							; Sets stack pointer to $FF, and all registers to 0
     99  f85c							; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  f85c							; Use as very first section of code on boot (ie: at reset)
    101  f85c							; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  f85c
    103  f85c					      MAC	clean_start
    104  f85c					      sei
    105  f85c					      cld
    106  f85c
    107  f85c					      ldx	#0
    108  f85c					      txa
    109  f85c					      tay
    110  f85c				   .CLEAR_STACK dex
    111  f85c					      txs
    112  f85c					      pha
    113  f85c					      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  f85c
    115  f85c					      ENDM
    116  f85c
    117  f85c							;-------------------------------------------------------
    118  f85c							; SET_POINTER
    119  f85c							; Original author: Manuel Rotschkar
    120  f85c							;
    121  f85c							; Sets a 2 byte RAM pointer to an absolute address.
    122  f85c							;
    123  f85c							; Usage: SET_POINTER pointer, address
    124  f85c							; Example: SET_POINTER SpritePTR, SpriteData
    125  f85c							;
    126  f85c							; Note: Alters the accumulator, NZ flags
    127  f85c							; IN 1: 2 byte RAM location reserved for pointer
    128  f85c							; IN 2: absolute address
    129  f85c
    130  f85c					      MAC	set_pointer
    131  f85c				   .POINTER   SET	{1}
    132  f85c				   .ADDRESS   SET	{2}
    133  f85c
    134  f85c					      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  f85c					      STA	.POINTER	; Store in pointer
    136  f85c					      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  f85c					      STA	.POINTER+1	; Store in pointer+1
    138  f85c
    139  f85c					      ENDM
    140  f85c
    141  f85c							;-------------------------------------------------------
    142  f85c							; BOUNDARY byte#
    143  f85c							; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  f85c							;
    145  f85c							; Push data to a certain position inside a page and keep count of how
    146  f85c							; many free bytes the programmer will have.
    147  f85c							;
    148  f85c							; eg: BOUNDARY 5    ; position at byte #5 in page
    149  f85c
    150  f85c				   .FREE_BYTES SET	0
    151  f85c					      MAC	boundary
    152  f85c					      REPEAT	256
    153  f85c					      IF	<. % {1} = 0
    154  f85c					      MEXIT
    155  f85c					      ELSE
    156  f85c				   .FREE_BYTES SET	.FREE_BYTES + 1
    157  f85c					      .byte	$00
    158  f85c					      ENDIF
    159  f85c					      REPEND
    160  f85c					      ENDM
    161  f85c
    162  f85c
    163  f85c							; EOF
------- FILE jetpax.h
------- FILE xmacro.h LEVEL 4 PASS 2
      0  f85c					      include	"xmacro.h"
      1  f85c
      2  f85c							;-------------------------------------------------------
      3  f85c							; Usage: TIMER_SETUP lines
      4  f85c							; where lines is the number of scanlines to skip (> 2).
      5  f85c							; The timer will be set so that it expires before this number
      6  f85c							; of scanlines. A WSYNC will be done first.
      7  f85c
      8  f85c					      MAC	timer_setup
      9  f85c				   .lines     SET	{1}
     10  f85c					      lda	#(((.lines-1)*76-14)/64)
     11  f85c					      sta	WSYNC
     12  f85c					      sta	TIM64T
     13  f85c					      ENDM
     14  f85c
     15  f85c							;-------------------------------------------------------
     16  f85c							; Use with TIMER_SETUP to wait for timer to complete.
     17  f85c							; You may want to do a WSYNC afterwards, since the timer
     18  f85c							; is not accurate to the beginning/end of a scanline.
     19  f85c
     20  f85c					      MAC	timer_wait
     21  f85c				   .waittimer
     22  f85c					      lda	INTIM
     23  f85c					      bne	.waittimer
     24  f85c					      ENDM
     25  f85c
------- FILE jetpax.h
------- FILE input.s
      2  f85c
      3  f85c							; SUBROUTINE
      4  f85c							; Read joystick movement and apply to object 0
      5  f85c				   MoveJoystick
      6  f85c							; Move vertically
      7  f85c							; (up and down are actually reversed since ypos starts at bottom)
      8  f85c							;     ldx YPos
      9  f85c		       a9 10		      lda	#%00010000	;Up?
     10  f85e		       2c 80 02 	      bit	SWCHA
     11  f861		       d0 0d		      bne	SkipMoveUp
     12  f863
     13  f863		       18		      clc
     14  f864		       a5 88		      lda	Speed2
     15  f866		       69 0c		      adc	#12
     16  f868		       85 88		      sta	Speed2
     17  f86a		       a5 87		      lda	Speed1
     18  f86c		       69 00		      adc	#00
     19  f86e		       85 87		      sta	Speed1
     20  f870
     21  f870				   SkipMoveUp
     22  f870		       a6 86		      ldx	XPos
     23  f872
     24  f872							; Only check left/right on odd frames;
     25  f872							; TODO make this just a fractional speed
     26  f872							; rather than dropping frames
     27  f872		       a9 01		      lda	#01
     28  f874		       25 83		      and	FrameCount
     29  f876		       d0 18		      bne	SkipMoveRight
     30  f878
     31  f878
     32  f878							; Move horizontally
     33  f878		       a9 40		      lda	#%01000000	;Left?
     34  f87a		       2c 80 02 	      bit	SWCHA
     35  f87d		       d0 05		      bne	SkipMoveLeft
     36  f87f		       e0 1d		      cpx	#29
     37  f881		       90 01		      bcc	SkipMoveLeft
     38  f883		       ca		      dex
     39  f884
     40  f884							; Reflect
     41  f884							;     lda #$ff
     42  f884							;     sta REFP0
     43  f884				   SkipMoveLeft
     44  f884		       a9 80		      lda	#%10000000	;Right?
     45  f886		       2c 80 02 	      bit	SWCHA
     46  f889		       d0 05		      bne	SkipMoveRight
     47  f88b		       e0 80		      cpx	#128
     48  f88d		       b0 01		      bcs	SkipMoveRight
     49  f88f		       e8		      inx
     50  f890
     51  f890							; Reflect
     52  f890							;     lda #$0
     53  f890							;     sta REFP0
     54  f890				   SkipMoveRight
     55  f890		       86 86		      stx	XPos
     56  f892		       60		      rts
     57  f893
     58  f893
     59  f893							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60  f893
     61  f893
     62  f893				   SpeedCalculation
     63  f893		       38		      sec
     64  f894		       a5 88		      lda	Speed2
     65  f896		       e9 07		      sbc	#7
     66  f898		       85 88		      sta	Speed2
     67  f89a		       a5 87		      lda	Speed1
     68  f89c		       e9 00		      sbc	#0
     69  f89e		       85 87		      sta	Speed1
     70  f8a0
     71  f8a0		       18		      clc
     72  f8a1		       a5 8a		      lda	YPos2
     73  f8a3		       65 88		      adc	Speed2
     74  f8a5		       85 8a		      sta	YPos2
     75  f8a7		       a5 89		      lda	YPos
     76  f8a9		       65 87		      adc	Speed1
     77  f8ab		       85 89		      sta	YPos
     78  f8ad
     79  f8ad		       c9 43		      cmp	#FLOOR_OFFSET
     80  f8af		       b0 0a		      bcs	NewThing2
     81  f8b1
     82  f8b1							; Reset to floor
     83  f8b1		       a9 43		      lda	#FLOOR_OFFSET
     84  f8b3		       85 89		      sta	YPos
     85  f8b5		       a9 00		      lda	#0
     86  f8b7		       85 87		      sta	Speed1
     87  f8b9		       85 88		      sta	Speed2
     88  f8bb				   NewThing2
     89  f8bb
     90  f8bb		       c9 bf		      cmp	#CEILING_OFFSET
     91  f8bd		       90 0a		      bcc	.next
     92  f8bf
     93  f8bf							; Reset to ceiling
     94  f8bf		       a9 bf		      lda	#CEILING_OFFSET
     95  f8c1		       85 89		      sta	YPos
     96  f8c3		       a9 00		      lda	#0
     97  f8c5		       85 87		      sta	Speed1
     98  f8c7		       85 88		      sta	Speed2
     99  f8c9				   .next
    100  f8c9
    101  f8c9		       60		      rts
    102  f8ca
    103  f8ca
    104  f8ca
    105  f8ca							; Subroutine
    106  f8ca				   SetHorizPos
    107  f8ca		       85 02		      sta	WSYNC	; start a new line
    108  f8cc		       24 00		      bit	0	; waste 3 cycles
    109  f8ce		       38		      sec		; set carry flag
    110  f8cf				   DivideLoop
    111  f8cf		       e9 0f		      sbc	#15	; subtract 15
    112  f8d1		       b0 fc		      bcs	DivideLoop	; branch until negative
    113  f8d3		       49 07		      eor	#7	; calculate fine offset
    114  f8d5		       0a		      asl
    115  f8d6		       0a		      asl
    116  f8d7		       0a		      asl
    117  f8d8		       0a		      asl
    118  f8d9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    119  f8db		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    120  f8dd		       60		      rts		; return to caller
------- FILE main.s
------- FILE sprites.s LEVEL 2 PASS 2
      0  f8de					      include	"sprites.s"
      1  f900		       00 00 00 00*	      align	256
      2  f900
      3  f900							; Bitmap data for character "standing" position
      4  f900							; Comical amount of 0's for now to simplify sprite rendering
      5  f900
      6  f900							; Y can be from:
      7  f900							;     SPRITE_HEIGHT to (8*ROW_COUNT)
      8  f900							; SpriteEnd: 8..128
      9  f900							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
     10  f900				   Frame0
     11  f900		       00		      .byte.b	#%00000000
     12  f901		       60		      .byte.b	#%01100000
     13  f902		       60		      .byte.b	#%01100000
     14  f903		       60		      .byte.b	#%01100000
     15  f904		       c0		      .byte.b	#%11000000
     16  f905		       c0		      .byte.b	#%11000000
     17  f906		       f0		      .byte.b	#%11110000
     18  f907		       c0		      .byte.b	#%11000000
     19  f908		       c0		      .byte.b	#%11000000
     20  f909		       00		      .byte.b	#%00000000
------- FILE main.s
     27  f90a
     28  fffc					      org	$fffc
     29  fffc		       00 f2		      .word.w	Start
     30  fffe		       00 f2		      .word.w	Start
