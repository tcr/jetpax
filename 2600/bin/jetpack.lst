------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008f ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e		       00	   ROW_DEMO_INDEX byte.b
     49 U008f
     50 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51 U008f
     52 U008f		       00 10	   ROW_COUNT  equ	16
     53 U008f
     54 U008f		       00 02	   SIGNAL_LINE equ	$02
     55 U008f
     56 U008f		       11 00	   KERNEL_START equ	$1100
     57 U008f
     58 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     59 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     60 U008f
     61 U008f							; Sprites
     62 U008f
     63 U008f							; Nusiz
     64 U008f		       00 13	   THREE_COPIES equ	%00010011
     65 U008f
     66 U008f							; Frame 1 sprites
     67 U008f		       00 60	   EMR1       equ	%01100000
     68 U008f		       00 06	   EMR2       equ	%00000110
     69 U008f		       00 66	   EMR3       equ	%01100110
     70 U008f
     71 U008f							; Frame 2 sprites
     72 U008f		       00 c0	   T1	      equ	%11000000
     73 U008f		       00 0c	   T2	      equ	%00001100
     74 U008f		       00 cc	   T3	      equ	%11001100
     75 U008f
     76 U008f							; Shorthands
     77 U008f
     78 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     79 U008f		       00 85	   SET_1_0    equ	$85	; STA
     80 U008f		       00 86	   SET_0_1    equ	$86	; STX
     81 U008f		       00 84	   SET_1_1    equ	$84	; STY
     82 U008f
     83 U008f		       00 86	   SET_0_L    equ	$86	; STX
     84 U008f		       00 85	   SET_1_L    equ	$85	; STA
     85 U008f
     86 U008f		       00 85	   SET_0_R    equ	$85	; STA
     87 U008f		       00 84	   SET_1_R    equ	$84	; STY
     88 U008f
     89 U008f							; Gem enabling/disabling globally
     90 U008f
     91 U008f							; ; all off
     92 U008f							; GEM_00 equ SET_0_0
     93 U008f							; GEM_02 equ SET_0_0
     94 U008f							; GEM_04 equ SET_0_0
     95 U008f							; GEM_06 equ SET_0_0
     96 U008f							; GEM_08 equ SET_0_L
     97 U008f							; GEM_09 equ SET_0_0
     98 U008f							; GEM_11 equ SET_0_0
     99 U008f							; GEM_13 equ SET_0_0
    100 U008f							; GEM_15 equ SET_0_0
    101 U008f							; GEM_17 equ SET_0_R
    102 U008f							; GEM_18 equ SET_0_0
    103 U008f							; GEM_20 equ SET_0_0
    104 U008f							; GEM_22 equ SET_0_0
    105 U008f							; GEM_24 equ SET_0_0
    106 U008f
    107 U008f							; all on
    108 U008f		       00 84	   GEM_00     equ	SET_1_1
    109 U008f		       00 84	   GEM_02     equ	SET_1_1
    110 U008f		       00 84	   GEM_04     equ	SET_1_1
    111 U008f		       00 84	   GEM_06     equ	SET_1_1
    112 U008f		       00 85	   GEM_08     equ	SET_1_L
    113 U008f		       00 84	   GEM_09     equ	SET_1_1
    114 U008f		       00 84	   GEM_11     equ	SET_1_1
    115 U008f		       00 84	   GEM_13     equ	SET_1_1
    116 U008f		       00 84	   GEM_15     equ	SET_1_1
    117 U008f		       00 84	   GEM_17     equ	SET_1_R
    118 U008f		       00 84	   GEM_18     equ	SET_1_1
    119 U008f		       00 84	   GEM_20     equ	SET_1_1
    120 U008f		       00 84	   GEM_22     equ	SET_1_1
    121 U008f		       00 84	   GEM_24     equ	SET_1_1
    122 U008f
    123 U008f							; ; odd on
    124 U008f							; GEM_00 equ SET_1_0
    125 U008f							; GEM_02 equ SET_1_0
    126 U008f							; GEM_04 equ SET_1_0
    127 U008f							; GEM_06 equ SET_1_0
    128 U008f							; GEM_08 equ SET_1_L
    129 U008f							; GEM_09 equ SET_0_1
    130 U008f							; GEM_11 equ SET_0_1
    131 U008f							; GEM_13 equ SET_0_1
    132 U008f							; GEM_15 equ SET_0_1
    133 U008f							; GEM_17 equ SET_0_R
    134 U008f							; GEM_18 equ SET_1_0
    135 U008f							; GEM_20 equ SET_1_0
    136 U008f							; GEM_22 equ SET_1_0
    137 U008f							; GEM_24 equ SET_1_0
    138 U008f
    139 U008f							; ; even on
    140 U008f							; GEM_00 equ SET_0_1
    141 U008f							; GEM_02 equ SET_0_1
    142 U008f							; GEM_04 equ SET_0_1
    143 U008f							; GEM_06 equ SET_0_1
    144 U008f							; GEM_08 equ SET_0_L
    145 U008f							; GEM_09 equ SET_1_0
    146 U008f							; GEM_11 equ SET_1_0
    147 U008f							; GEM_13 equ SET_1_0
    148 U008f							; GEM_15 equ SET_1_0
    149 U008f							; GEM_17 equ SET_1_R
    150 U008f							; GEM_18 equ SET_0_1
    151 U008f							; GEM_20 equ SET_0_1
    152 U008f							; GEM_22 equ SET_0_1
    153 U008f							; GEM_24 equ SET_0_1
    154 U008f
    155 U008f							; Colors
    156 U008f
    157 U008f		       00 42	   COL_BG     equ	$42
    158 U008f		       00 cc	   COL_EMERALD equ	$CC
    159 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    160 U008f
    161 U008f							; HMOVE values
    162 U008f
    163 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    164 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    165 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    166 U008f
    167 U008f							; Sprite details
    168 U008f
    169 U008f		       00 09	   SPRITE_HEIGHT equ	9
    170 U008f
    171 U008f
    172 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    173 U008f		       00 1c	   EMERALD_SP equ	GRP1
    174 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    175 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    176 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    177 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    178 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    179 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    180 U008f
    181 U008f		       00 1b	   JET_SP     equ	GRP0
    182 U008f		       00 10	   JET_SP_RESET equ	RESP0
    183 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    184 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    185 U008f
    186 U008f
    187 U008f							; Offset from the sprite label to the point
    188 U008f							; at which the sprite actually starts. This is the 0-padding
    189 U008f							; FRAME_OFFSET equ 53
    190 U008f
    191 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    192 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    193 U008f
    194 U008f							; Compared with YPos
    195 U008f		       00 43	   FLOOR_OFFSET equ	67
    196 U008f		       00 bf	   CEILING_OFFSET equ	191
    197 U008f
    198 U008f							; YPos definite position
    199 U008f		       00 64	   YPosStart  equ	100
    200 U008f
    201 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    202 U008f
    203  10000 ????				       seg	Code
    204  10000 ????
    205  d000					      org	$D000
    206  d000					      rorg	$F000
    207  d000
    208  d000		       00	   BANK1      byte.b
    209  d001
    210  d200					      org	$D200
    211  d200					      rorg	$F200
    212  d200
    213  d200				   Bank1Start
    214  d200		       ad fa ff 	      lda	$FFFA
    215  d203		       ea		      nop
    216  d204		       ea		      nop
    217  d205		       ea		      nop
    218  d206
    219  d206							; Epilogue
    220  dffc					      org	$DFFC
    221  dffc					      rorg	$FFFC
    222  dffc		       00 f2		      .word.w	Bank1Start
    223  dffe		       00 f2		      .word.w	Bank1Start
    224  e000
    225  e000					      org	$E000
    226  e000					      rorg	$F000
    227  e000
    228  e000		       00	   BANK2      byte.b
    229  e001
    230  e200					      org	$E200
    231  e200					      rorg	$F200
    232  e200
    233  e200				   Bank2Start
    234  e200		       ad fa ff 	      lda	$FFFA
    235  e203		       ea		      nop
    236  e204		       ea		      nop
    237  e205		       ea		      nop
    238  e206
    239  e206							; Epilogue
    240  effc					      org	$EFFC
    241  effc					      rorg	$FFFC
    242  effc		       00 f2		      .word.w	Bank2Start
    243  effe		       00 f2		      .word.w	Bank2Start
    244  f000
    245  f000					      org	$F000
    246  f000					      rorg	$F000
    247  f000
    248  f000		       00	   BANK3      byte.b
    249  f001
    250  f200					      org	$F200
    251  f200					      rorg	$F200
    252  f200
    253  f200				   Start
    254  f200		       ad fa ff 	      lda	$FFFA
    255  f203		       ea		      nop
    256  f204		       ea		      nop
    257  f205		       ea		      nop
    258  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    260  f211		       a9 00		      lda	#0
    261  f213		       85 83		      sta	FrameCount
    262  f215
    263  f215							; P0 has three copies
    264  f215		       a9 13		      lda	#THREE_COPIES
    265  f217		       85 05		      sta	EMERALD_COPIES
    266  f219
    267  f219		       a9 00		      lda	#$00
    268  f21b		       85 09		      sta	COLUBK
    269  f21d		       a9 01		      lda	#%00000001
    270  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    271  f221
    272  f221							; Disable VDEL
    273  f221		       a9 00		      lda	#0
    274  f223		       85 25		      sta	VDELP0
    275  f225		       85 26		      sta	VDELP1
    276  f227
    277  f227
    278  f227							; Player 0
    279  f227		       a2 cc		      ldx	#COL_EMERALD
    280  f229		       86 07		      stx	EMERALD_SP_COLOR
    281  f22b
    282  f22b							; Player 1
    283  f22b		       a9 98		      lda	#$98
    284  f22d		       85 06		      sta	JET_SP_COLOR
    285  f22f		       a9 00		      lda	#$00
    286  f231		       85 1b		      sta	JET_SP
    287  f233
    288  f233							; Positions
    289  f233		       a9 64		      lda	#YPosStart
    290  f235		       85 89		      sta	YPos
    291  f237		       a9 37		      lda	#55
    292  f239		       85 86		      sta	XPos
    293  f23b		       a9 00		      lda	#0
    294  f23d		       85 87		      sta	Speed1
    295  f23f		       85 88		      sta	Speed2
    296  f241		       85 8a		      sta	YPos2
    297  f243
    298  f243		       a9 00		      lda	#0
    299  f245		       85 8e		      sta	ROW_DEMO_INDEX
    300  f247
    301  f247				   BeginFrame
      0  f247					      VERTICAL_SYNC
      1  f247		       a9 0e		      lda	#%1110
      2  f249		       85 02	   .VSLP1     sta	WSYNC
      3  f24b		       85 00		      sta	VSYNC
      4  f24d		       4a		      lsr
      5  f24e		       d0 f9		      bne	.VSLP1
    303  f250
      0  f250					      TIMER_SETUP	37
      1  f250				   .lines     SET	37
      2  f250		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f252		       85 02		      sta	WSYNC
      4  f254		       8d 96 02 	      sta	TIM64T
    305  f257
    306  f257							; Scanline counter
    307  f257		       a9 10		      lda	#ROW_COUNT
    308  f259		       85 82		      sta	LoopCount
    309  f25b
    310  f25b							; Frame counter
    311  f25b		       e6 83		      inc	FrameCount
    312  f25d
    313  f25d							; Now the work stuff
    314  f25d		       4c e0 f2 	      jmp	copy_frame
    315  f260
    316  f260					      MAC	emeralds_two
    317  f260				   .target    SET	{1}
    318  f260					      tax
    319  f260					      and	#%11
    320  f260					      tay
    321  f260					      lda	map_full,Y
    322  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    323  f260					      txa
    324  f260					      ror
    325  f260					      ror
    326  f260					      ENDM
    327  f260
    328  f260					      MAC	emeralds_two_skip
    329  f260					      ror
    330  f260					      ror
    331  f260					      ENDM
    332  f260
    333  f260					      MAC	emeralds_one
    334  f260				   .target    SET	{1}
    335  f260				   .source    SET	{2}
    336  f260					      tax
    337  f260					      and	#%1
    338  f260					      tay
    339  f260					      lda	.source,Y
    340  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    341  f260					      txa
    342  f260					      ror
    343  f260					      ENDM
    344  f260
    345  f260					      MAC	emeralds_one_skip
    346  f260					      ror
    347  f260					      ENDM
    348  f260
    349  f260					      align	8
    350  f260				   storage
    351  f260							; Emerald byte setting 1A
    352  f260				   storage_00
    353  f260		       85		      .byte.b	SET_1_0
    354  f261				   storage_04
    355  f261		       87		      .byte.b	SET_0_0
    356  f262				   storage_09
    357  f262		       84		      .byte.b	SET_1_1
    358  f263				   storage_13
    359  f263		       84		      .byte.b	SET_1_1
    360  f264				   storage_17
    361  f264		       84		      .byte.b	SET_1_R
    362  f265				   storage_18
    363  f265		       87		      .byte.b	SET_0_0
    364  f266				   storage_22
    365  f266		       87		      .byte.b	SET_0_0
    366  f267
    367  f267							; Emerald byte setting 2A
    368  f267				   storage_02
    369  f267		       87		      .byte.b	SET_0_0
    370  f268				   storage_06
    371  f268		       87		      .byte.b	SET_0_0
    372  f269				   storage_08
    373  f269		       86		      .byte.b	SET_0_L
    374  f26a				   storage_11
    375  f26a		       84		      .byte.b	SET_1_1
    376  f26b				   storage_15
    377  f26b		       84		      .byte.b	SET_1_1
    378  f26c				   storage_20
    379  f26c		       87		      .byte.b	SET_0_0
    380  f26d				   storage_24
    381  f26d		       86		      .byte.b	SET_0_1
    382  f26e				   storage_end
    383  f26e
    384  f270		       00 00		      align	8
    385  f270							; first bit of byte 2 & 3 are unused for simplicity
    386  f270				   map_emeralds
    387  f270		       0e 00 00 00	      .byte.b	%1110, %0000000, %0000000, %00000000
    388  f274		       07 00 00 00	      .byte.b	%0111, %0000000, %0000000, %00000000
    389  f278		       03 40 00 00	      .byte.b	%0011, %1000000, %0000000, %00000000
    390  f27c		       01 60 00 00	      .byte.b	%0001, %1100000, %0000000, %00000000
    391  f280		       00 70 00 00	      .byte.b	%0000, %1110000, %0000000, %00000000
    392  f284		       00 38 00 00	      .byte.b	%0000, %0111000, %0000000, %00000000
    393  f288		       00 1c 00 00	      .byte.b	%0000, %0011100, %0000000, %00000000
    394  f28c		       00 0e 00 00	      .byte.b	%0000, %0001110, %0000000, %00000000
    395  f290		       00 07 00 00	      .byte.b	%0000, %0000111, %0000000, %00000000
    396  f294		       00 03 40 00	      .byte.b	%0000, %0000011, %1000000, %00000000
    397  f298		       00 01 60 00	      .byte.b	%0000, %0000001, %1100000, %00000000
    398  f29c		       00 00 70 00	      .byte.b	%0000, %0000000, %1110000, %00000000
    399  f2a0		       00 00 38 00	      .byte.b	%0000, %0000000, %0111000, %00000000
    400  f2a4		       00 00 1c 00	      .byte.b	%0000, %0000000, %0011100, %00000000
    401  f2a8		       00 00 0e 00	      .byte.b	%0000, %0000000, %0001110, %00000000
    402  f2ac		       00 00 07 00	      .byte.b	%0000, %0000000, %0000111, %00000000
    403  f2b0		       00 00 03 80	      .byte.b	%0000, %0000000, %0000011, %10000000
    404  f2b4		       00 00 01 c0	      .byte.b	%0000, %0000000, %0000001, %11000000
    405  f2b8		       00 00 00 e0	      .byte.b	%0000, %0000000, %0000000, %11100000
    406  f2bc		       00 00 00 70	      .byte.b	%0000, %0000000, %0000000, %01110000
    407  f2c0		       00 00 00 38	      .byte.b	%0000, %0000000, %0000000, %00111000
    408  f2c4		       00 00 00 1c	      .byte.b	%0000, %0000000, %0000000, %00011100
    409  f2c8		       00 00 00 0e	      .byte.b	%0000, %0000000, %0000000, %00001110
    410  f2cc		       00 00 00 07	      .byte.b	%0000, %0000000, %0000000, %00000111
    411  f2d0		       00 00 00 03	      .byte.b	%0000, %0000000, %0000000, %00000011
    412  f2d4		       00 00 00 01	      .byte.b	%0000, %0000000, %0000000, %00000001
    413  f2d8				   map_emeralds_end
    414  f2d8
    415  f2d8					      align	8
    416  f2d8				   map_full
    417  f2d8		       87		      .byte.b	SET_0_0
    418  f2d9		       86		      .byte.b	SET_0_1
    419  f2da		       85		      .byte.b	SET_1_0
    420  f2db		       84		      .byte.b	SET_1_1
    421  f2dc				   map_missle_l
    422  f2dc		       86		      .byte.b	SET_0_L
    423  f2dd		       85		      .byte.b	SET_1_L
    424  f2de				   map_missle_r
    425  f2de		       85		      .byte.b	SET_0_R
    426  f2df		       84		      .byte.b	SET_1_R
    427  f2e0
    428  f2e0
    429  f2e0				   copy_frame
    430  f2e0							; FRAMESWITCH
    431  f2e0		       a9 01		      lda	#01
    432  f2e2		       25 83		      and	FrameCount
    433  f2e4		       f0 03		      beq	CopyFrame1Kernel
    434  f2e6		       4c 78 f3 	      jmp	CopyFrame2Kernel
    435  f2e9
    436  f2e9				   CopyFrame1Kernel
    437  f2e9							; Copy: KERNEL 1
    438  f2e9		       a0 2e		      ldy	#(kernel_1_end - kernel_1_start)-1
    439  f2eb				   .copy_loop_1
    440  f2eb		       b9 67 f6 	      lda	kernel_1_start,Y
    441  f2ee		       99 00 10 	      sta	$1000,Y
    442  f2f1		       88		      dey
    443  f2f2		       d0 f7		      bne	.copy_loop_1
    444  f2f4		       ad 67 f6 	      lda	kernel_1_start
    445  f2f7		       8d 00 10 	      sta	$1000
    446  f2fa
    447  f2fa		       a6 8e		      ldx	ROW_DEMO_INDEX
    448  f2fc		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f2ff					      EMERALDS_TWO_SKIP
      1  f2ff		       6a		      ror
      2  f300		       6a		      ror
      0  f301					      EMERALDS_TWO	storage_22
      1  f301				   .target    SET	storage_22
      2  f301		       aa		      tax
      3  f302		       29 03		      and	#%11
      4  f304		       a8		      tay
      5  f305		       b9 d8 f2 	      lda	map_full,Y
      6  f308		       8d 46 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f30b		       8a		      txa
      8  f30c		       6a		      ror
      9  f30d		       6a		      ror
      0  f30e					      EMERALDS_TWO_SKIP
      1  f30e		       6a		      ror
      2  f30f		       6a		      ror
      0  f310					      EMERALDS_TWO	storage_18
      1  f310				   .target    SET	storage_18
      2  f310		       aa		      tax
      3  f311		       29 03		      and	#%11
      4  f313		       a8		      tay
      5  f314		       b9 d8 f2 	      lda	map_full,Y
      6  f317		       8d 45 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f31a		       8a		      txa
      8  f31b		       6a		      ror
      9  f31c		       6a		      ror
    453  f31d
    454  f31d		       a6 8e		      ldx	ROW_DEMO_INDEX
    455  f31f		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f322					      EMERALDS_ONE	storage_17, map_missle_r
      1  f322				   .target    SET	storage_17
      2  f322				   .source    SET	map_missle_r
      3  f322		       aa		      tax
      4  f323		       29 01		      and	#%1
      5  f325		       a8		      tay
      6  f326		       b9 de f2 	      lda	.source,Y
      7  f329		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f32c		       8a		      txa
      9  f32d		       6a		      ror
      0  f32e					      EMERALDS_TWO_SKIP
      1  f32e		       6a		      ror
      2  f32f		       6a		      ror
      0  f330					      EMERALDS_TWO	storage_13
      1  f330				   .target    SET	storage_13
      2  f330		       aa		      tax
      3  f331		       29 03		      and	#%11
      4  f333		       a8		      tay
      5  f334		       b9 d8 f2 	      lda	map_full,Y
      6  f337		       8d 43 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f33a		       8a		      txa
      8  f33b		       6a		      ror
      9  f33c		       6a		      ror
      0  f33d					      EMERALDS_TWO_SKIP
      1  f33d		       6a		      ror
      2  f33e		       6a		      ror
    460  f33f
    461  f33f		       a6 8e		      ldx	ROW_DEMO_INDEX
    462  f341		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f344					      EMERALDS_TWO	storage_09
      1  f344				   .target    SET	storage_09
      2  f344		       aa		      tax
      3  f345		       29 03		      and	#%11
      4  f347		       a8		      tay
      5  f348		       b9 d8 f2 	      lda	map_full,Y
      6  f34b		       8d 42 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f34e		       8a		      txa
      8  f34f		       6a		      ror
      9  f350		       6a		      ror
      0  f351					      EMERALDS_ONE_SKIP
      1  f351		       6a		      ror
      0  f352					      EMERALDS_TWO_SKIP
      1  f352		       6a		      ror
      2  f353		       6a		      ror
      0  f354					      EMERALDS_TWO	storage_04
      1  f354				   .target    SET	storage_04
      2  f354		       aa		      tax
      3  f355		       29 03		      and	#%11
      4  f357		       a8		      tay
      5  f358		       b9 d8 f2 	      lda	map_full,Y
      6  f35b		       8d 41 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f35e		       8a		      txa
      8  f35f		       6a		      ror
      9  f360		       6a		      ror
    467  f361
    468  f361		       a6 8e		      ldx	ROW_DEMO_INDEX
    469  f363		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f366					      EMERALDS_TWO_SKIP
      1  f366		       6a		      ror
      2  f367		       6a		      ror
      0  f368					      EMERALDS_TWO	storage_00
      1  f368				   .target    SET	storage_00
      2  f368		       aa		      tax
      3  f369		       29 03		      and	#%11
      4  f36b		       a8		      tay
      5  f36c		       b9 d8 f2 	      lda	map_full,Y
      6  f36f		       8d 40 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f372		       8a		      txa
      8  f373		       6a		      ror
      9  f374		       6a		      ror
    472  f375
    473  f375		       4c 07 f4 	      jmp	CopyFrameNext
    474  f378
    475  f378				   CopyFrame2Kernel
    476  f378							; Copy: KERNEL 2
    477  f378		       a0 2d		      ldy	#(kernel_2_end - kernel_2_start)-1
    478  f37a				   .copy_loop_2
    479  f37a		       b9 96 f6 	      lda	kernel_2_start,Y
    480  f37d		       99 00 10 	      sta	$1000,Y
    481  f380		       88		      dey
    482  f381		       d0 f7		      bne	.copy_loop_2
    483  f383		       ad 96 f6 	      lda	kernel_2_start
    484  f386		       8d 00 10 	      sta	$1000
    485  f389
    486  f389		       a6 8e		      ldx	ROW_DEMO_INDEX
    487  f38b		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f38e					      EMERALDS_TWO	storage_24
      1  f38e				   .target    SET	storage_24
      2  f38e		       aa		      tax
      3  f38f		       29 03		      and	#%11
      4  f391		       a8		      tay
      5  f392		       b9 d8 f2 	      lda	map_full,Y
      6  f395		       8d 4d 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f398		       8a		      txa
      8  f399		       6a		      ror
      9  f39a		       6a		      ror
      0  f39b					      EMERALDS_TWO_SKIP
      1  f39b		       6a		      ror
      2  f39c		       6a		      ror
      0  f39d					      EMERALDS_TWO	storage_20
      1  f39d				   .target    SET	storage_20
      2  f39d		       aa		      tax
      3  f39e		       29 03		      and	#%11
      4  f3a0		       a8		      tay
      5  f3a1		       b9 d8 f2 	      lda	map_full,Y
      6  f3a4		       8d 4c 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3a7		       8a		      txa
      8  f3a8		       6a		      ror
      9  f3a9		       6a		      ror
      0  f3aa					      EMERALDS_TWO_SKIP
      1  f3aa		       6a		      ror
      2  f3ab		       6a		      ror
    492  f3ac
    493  f3ac		       a6 8e		      ldx	ROW_DEMO_INDEX
    494  f3ae		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f3b1					      EMERALDS_ONE_SKIP
      1  f3b1		       6a		      ror
      0  f3b2					      EMERALDS_TWO	storage_15
      1  f3b2				   .target    SET	storage_15
      2  f3b2		       aa		      tax
      3  f3b3		       29 03		      and	#%11
      4  f3b5		       a8		      tay
      5  f3b6		       b9 d8 f2 	      lda	map_full,Y
      6  f3b9		       8d 4b 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3bc		       8a		      txa
      8  f3bd		       6a		      ror
      9  f3be		       6a		      ror
      0  f3bf					      EMERALDS_TWO_SKIP
      1  f3bf		       6a		      ror
      2  f3c0		       6a		      ror
      0  f3c1					      EMERALDS_TWO	storage_11
      1  f3c1				   .target    SET	storage_11
      2  f3c1		       aa		      tax
      3  f3c2		       29 03		      and	#%11
      4  f3c4		       a8		      tay
      5  f3c5		       b9 d8 f2 	      lda	map_full,Y
      6  f3c8		       8d 4a 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3cb		       8a		      txa
      8  f3cc		       6a		      ror
      9  f3cd		       6a		      ror
    499  f3ce
    500  f3ce		       a6 8e		      ldx	ROW_DEMO_INDEX
    501  f3d0		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f3d3					      EMERALDS_TWO_SKIP
      1  f3d3		       6a		      ror
      2  f3d4		       6a		      ror
      0  f3d5					      EMERALDS_ONE	storage_08, map_missle_l
      1  f3d5				   .target    SET	storage_08
      2  f3d5				   .source    SET	map_missle_l
      3  f3d5		       aa		      tax
      4  f3d6		       29 01		      and	#%1
      5  f3d8		       a8		      tay
      6  f3d9		       b9 dc f2 	      lda	.source,Y
      7  f3dc		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f3df		       8a		      txa
      9  f3e0		       6a		      ror
      0  f3e1					      EMERALDS_TWO	storage_06
      1  f3e1				   .target    SET	storage_06
      2  f3e1		       aa		      tax
      3  f3e2		       29 03		      and	#%11
      4  f3e4		       a8		      tay
      5  f3e5		       b9 d8 f2 	      lda	map_full,Y
      6  f3e8		       8d 48 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3eb		       8a		      txa
      8  f3ec		       6a		      ror
      9  f3ed		       6a		      ror
      0  f3ee					      EMERALDS_TWO_SKIP
      1  f3ee		       6a		      ror
      2  f3ef		       6a		      ror
    506  f3f0
    507  f3f0		       a6 8e		      ldx	ROW_DEMO_INDEX
    508  f3f2		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f3f5					      EMERALDS_TWO	storage_02
      1  f3f5				   .target    SET	storage_02
      2  f3f5		       aa		      tax
      3  f3f6		       29 03		      and	#%11
      4  f3f8		       a8		      tay
      5  f3f9		       b9 d8 f2 	      lda	map_full,Y
      6  f3fc		       8d 47 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3ff		       8a		      txa
      8  f400		       6a		      ror
      9  f401		       6a		      ror
      0  f402					      EMERALDS_TWO_SKIP
      1  f402		       6a		      ror
      2  f403		       6a		      ror
    511  f404
    512  f404		       4c 07 f4 	      jmp	CopyFrameNext
    513  f407
    514  f407
    515  f407				   CopyFrameNext
    516  f407
    517  f407							; Frame skipping for increasing demo index
    518  f407		       a5 83		      lda	FrameCount
    519  f409		       29 03		      and	#%11
    520  f40b		       c9 03		      cmp	#%11
    521  f40d		       d0 0d		      bne	.next_next_thing
    522  f40f
    523  f40f		       18		      clc
    524  f410		       a5 8e		      lda	ROW_DEMO_INDEX
    525  f412		       69 04		      adc	#4
    526  f414		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
    527  f416		       90 02		      bcc	.next_thing_local
    528  f418		       a9 00		      lda	#0
    529  f41a				   .next_thing_local
    530  f41a		       85 8e		      sta	ROW_DEMO_INDEX
    531  f41c				   .next_next_thing
    532  f41c		       85 02		      sta	WSYNC
    533  f41e
    534  f41e							; Positioning
      0  f41e					      SLEEP	40
      1  f41e				   .CYCLES    SET	40
      2  f41e
      3  f41e				  -	      IF	.CYCLES < 2
      4  f41e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f41e				  -	      ERR
      6  f41e					      ENDIF
      7  f41e
      8  f41e				  -	      IF	.CYCLES & 1
      9  f41e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f41e				  -	      nop	0
     11  f41e				  -	      ELSE
     12  f41e				  -	      bit	VSYNC
     13  f41e				  -	      ENDIF
     14  f41e				  -.CYCLES    SET	.CYCLES - 3
     15  f41e					      ENDIF
     16  f41e
     17  f41e					      REPEAT	.CYCLES / 2
     18  f41e		       ea		      nop
     17  f41e					      REPEND
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     17  f425					      REPEND
     18  f426		       ea		      nop
     17  f426					      REPEND
     18  f427		       ea		      nop
     17  f427					      REPEND
     18  f428		       ea		      nop
     17  f428					      REPEND
     18  f429		       ea		      nop
     17  f429					      REPEND
     18  f42a		       ea		      nop
     17  f42a					      REPEND
     18  f42b		       ea		      nop
     17  f42b					      REPEND
     18  f42c		       ea		      nop
     17  f42c					      REPEND
     18  f42d		       ea		      nop
     17  f42d					      REPEND
     18  f42e		       ea		      nop
     17  f42e					      REPEND
     18  f42f		       ea		      nop
     17  f42f					      REPEND
     18  f430		       ea		      nop
     17  f430					      REPEND
     18  f431		       ea		      nop
     19  f432					      REPEND
    536  f432		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    537  f434		       85 02		      sta	WSYNC
    538  f436
    539  f436							; Misc
    540  f436		       a9 00		      lda	#00
    541  f438		       85 1e		      sta	EMERALD_MI_ENABLE
    542  f43a
    543  f43a							; Assign dervied SpriteEnd value
    544  f43a		       a9 c8		      lda	#HEIGHT_OFFSET
    545  f43c		       e5 89		      sbc	YPos
    546  f43e		       85 85		      sta	SpriteEnd
    547  f440
    548  f440							; Move missile to starting position and fine-tune position
    549  f440							; TODO replace with an HMOVE macro
    550  f440		       85 02		      sta	WSYNC
      0  f442					      sleep	EMERALD_MI_HMOVE_S
      1  f442				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f442
      3  f442				  -	      IF	.CYCLES < 2
      4  f442				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f442				  -	      ERR
      6  f442					      ENDIF
      7  f442
      8  f442					      IF	.CYCLES & 1
      9  f442					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f442		       04 00		      nop	0
     11  f444				  -	      ELSE
     12  f444				  -	      bit	VSYNC
     13  f444					      ENDIF
     14  f444				   .CYCLES    SET	.CYCLES - 3
     15  f444					      ENDIF
     16  f444
     17  f444					      REPEAT	.CYCLES / 2
     18  f444		       ea		      nop
     17  f444					      REPEND
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     17  f44b					      REPEND
     18  f44c		       ea		      nop
     17  f44c					      REPEND
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     17  f452					      REPEND
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     19  f456					      REPEND
    552  f456		       85 13		      sta	EMERALD_MI_RESET
    553  f458
    554  f458							; Player 1
    555  f458		       a5 86		      lda	XPos
    556  f45a		       a2 00		      ldx	#0
    557  f45c		       20 32 f7 	      jsr	SetHorizPos
    558  f45f
    559  f45f
    560  f45f							; Choose which hmove value to use
    561  f45f							; FRAMESWITCH
    562  f45f		       a9 01		      lda	#01
    563  f461		       25 83		      and	FrameCount
    564  f463		       d0 07		      bne	doframe2
    565  f465
    566  f465							; frame 1
    567  f465		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    568  f467		       85 23		      sta	EMERALD_MI_HMOVE
    569  f469		       4c 70 f4 	      jmp	doframe2after
    570  f46c
    571  f46c							; frame 2
    572  f46c				   doframe2
    573  f46c		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    574  f46e		       85 23		      sta	EMERALD_MI_HMOVE
    575  f470				   doframe2after
    576  f470
      0  f470					      TIMER_WAIT
      1  f470				   .waittimer
      2  f470		       ad 84 02 	      lda	INTIM
      3  f473		       d0 fb		      bne	.waittimer
      0  f475					      TIMER_SETUP	192
      1  f475				   .lines     SET	192
      2  f475		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f477		       85 02		      sta	WSYNC
      4  f479		       8d 96 02 	      sta	TIM64T
    579  f47c		       85 02		      sta	WSYNC	; ???
    580  f47e
    581  f47e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    582  f47e
    583  f47e							; Frame border top
    584  f47e
    585  f47e
    586  f47e							; First HMOVE
    587  f47e		       85 2a		      sta	HMOVE
    588  f480
    589  f480		       a9 00		      lda	#0
    590  f482		       85 08		      sta	COLUPF
    591  f484		       85 0e		      sta	PF1
    592  f486		       85 0f		      sta	PF2
    593  f488		       a9 02		      lda	#SIGNAL_LINE
    594  f48a		       85 09		      sta	COLUBK
    595  f48c
    596  f48c					      REPEAT	6
    597  f48c		       85 02		      sta	WSYNC
    596  f48c					      REPEND
    597  f48e		       85 02		      sta	WSYNC
    596  f48e					      REPEND
    597  f490		       85 02		      sta	WSYNC
    596  f490					      REPEND
    597  f492		       85 02		      sta	WSYNC
    596  f492					      REPEND
    597  f494		       85 02		      sta	WSYNC
    596  f494					      REPEND
    597  f496		       85 02		      sta	WSYNC
    598  f498					      REPEND
    599  f498
    600  f498		       a9 00		      lda	#0
    601  f49a		       85 09		      sta	COLUBK
    602  f49c		       85 02		      sta	WSYNC
    603  f49e
    604  f49e							; Start top border
    605  f49e				   border_top
    606  f49e							; Make the playfield solid.
    607  f49e		       a9 3f		      lda	#%00111111
    608  f4a0		       85 0e		      sta	PF1
    609  f4a2		       a9 ff		      lda	#%11111111
    610  f4a4		       85 0f		      sta	PF2
    611  f4a6
    612  f4a6		       a9 42		      lda	#COL_BG
    613  f4a8		       a0 00		      ldy	#0
    614  f4aa
    615  f4aa		       85 08		      sta	COLUPF
    616  f4ac		       85 02		      sta	WSYNC
    617  f4ae
    618  f4ae		       84 08		      sty	COLUPF
    619  f4b0		       85 02		      sta	WSYNC
    620  f4b2
    621  f4b2		       85 08		      sta	COLUPF
    622  f4b4		       85 02		      sta	WSYNC
    623  f4b6
    624  f4b6		       85 02		      sta	WSYNC
    625  f4b8
    626  f4b8		       85 02		      sta	WSYNC
    627  f4ba
    628  f4ba		       84 08		      sty	COLUPF
    629  f4bc		       85 02		      sta	WSYNC
    630  f4be
    631  f4be		       85 08		      sta	COLUPF
    632  f4c0		       85 02		      sta	WSYNC
    633  f4c2
    634  f4c2		       85 02		      sta	WSYNC
    635  f4c4
    636  f4c4				   PlayArea
    637  f4c4							; PF is now the playing area
    638  f4c4		       a9 00		      lda	#%00000000
    639  f4c6		       85 0d		      sta	PF0
    640  f4c8		       a9 20		      lda	#%00100000
    641  f4ca		       85 0e		      sta	PF1
    642  f4cc		       a9 00		      lda	#%00000000
    643  f4ce		       85 0f		      sta	PF2
    644  f4d0
    645  f4d0
    646  f4d0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    647  f4d0
    648  f4d0							; frame start
    649  f4d0
    650  f4d0
    651  f4d0
    652  f4d0
    653  f4d0							; MACRO for calculating next GRPx value
    654  f4d0
    655  f4d0					      MAC	jet_spritedata_calc_nosta
    656  f4d0							; loader
    657  f4d0					      dcp	SpriteEnd
    658  f4d0
    659  f4d0							; 4c
    660  f4d0							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    661  f4d0							; 6c
    662  f4d0					      ldy	#0
    663  f4d0					      .byte	$b0, $01	;2c / 3c (taken)
    664  f4d0					      .byte	$2c	; 4c / 0c
    665  f4d0					      ldy	SpriteEnd
    666  f4d0
    667  f4d0					      ENDM
    668  f4d0
    669  f4d0					      MAC	jet_spritedata_calc
    670  f4d0							; loader
    671  f4d0					      lda	#SPRITE_HEIGHT
    672  f4d0					      dcp	SpriteEnd
    673  f4d0					      ldy	SpriteEnd
    674  f4d0
    675  f4d0							; 4c
    676  f4d0							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    677  f4d0					      lda	Frame0,Y
    678  f4d0							; 6c
    679  f4d0					      .byte	$b0, $01	;2c / 3c (taken)
    680  f4d0					      .byte	$2c	; 4c / 0c
    681  f4d0					      sta	JET_SP	; 0c / 3c
    682  f4d0
    683  f4d0					      ENDM
    684  f4d0
    685  f4d0
    686  f4d0							; Start the row with a WSYNC.
    687  f4d0				   row_start
    688  f4d0							; ~15c
      0  f4d0					      jet_spritedata_calc
      1  f4d0
      2  f4d0		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4d2		       c7 85		      dcp	SpriteEnd
      4  f4d4		       a4 85		      ldy	SpriteEnd
      5  f4d6
      6  f4d6
      7  f4d6
      8  f4d6		       b9 00 f8 	      lda	Frame0,Y
      9  f4d9
     10  f4d9		       b0 01		      .byte.b	$b0, $01
     11  f4db		       2c		      .byte.b	$2c
     12  f4dc		       85 1b		      sta	JET_SP
     13  f4de
    690  f4de		       85 02		      sta	WSYNC
    691  f4e0
    692  f4e0							; [row:1]
      0  f4e0					      jet_spritedata_calc
      1  f4e0
      2  f4e0		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4e2		       c7 85		      dcp	SpriteEnd
      4  f4e4		       a4 85		      ldy	SpriteEnd
      5  f4e6
      6  f4e6
      7  f4e6
      8  f4e6		       b9 00 f8 	      lda	Frame0,Y
      9  f4e9
     10  f4e9		       b0 01		      .byte.b	$b0, $01
     11  f4eb		       2c		      .byte.b	$2c
     12  f4ec		       85 1b		      sta	JET_SP
     13  f4ee
    694  f4ee
    695  f4ee		       a9 00		      lda	#0
    696  f4f0		       85 08		      sta	COLUPF
    697  f4f2
    698  f4f2							; Push jump table to the stack
    699  f4f2		       a9 f5		      lda	#>[row_after_kernel - 1]
    700  f4f4		       48		      pha
    701  f4f5		       a9 3b		      lda	#<[row_after_kernel - 1]
    702  f4f7		       48		      pha
    703  f4f8		       a9 81		      lda	#%10000001
    704  f4fa		       48		      pha
    705  f4fb		       a9 10		      lda	#>[$1100 - 1]
    706  f4fd		       48		      pha
    707  f4fe		       a9 ff		      lda	#<[$1100 - 1]
    708  f500		       48		      pha
    709  f501		       a9 81		      lda	#%10000001
    710  f503		       48		      pha
    711  f504
    712  f504		       85 02		      sta	WSYNC
    713  f506
    714  f506							; [row:2]
      0  f506					      jet_spritedata_calc
      1  f506
      2  f506		       a9 09		      lda	#SPRITE_HEIGHT
      3  f508		       c7 85		      dcp	SpriteEnd
      4  f50a		       a4 85		      ldy	SpriteEnd
      5  f50c
      6  f50c
      7  f50c
      8  f50c		       b9 00 f8 	      lda	Frame0,Y
      9  f50f
     10  f50f		       b0 01		      .byte.b	$b0, $01
     11  f511		       2c		      .byte.b	$2c
     12  f512		       85 1b		      sta	JET_SP
     13  f514
    716  f514
    717  f514
    718  f514		       a9 42		      lda	#COL_BG
    719  f516		       85 08		      sta	COLUPF
    720  f518
    721  f518
    722  f518		       a9 09		      lda	#SPRITE_HEIGHT
      0  f51a					      jet_spritedata_calc_nosta
      1  f51a
      2  f51a		       c7 85		      dcp	SpriteEnd
      3  f51c
      4  f51c
      5  f51c
      6  f51c
      7  f51c		       a0 00		      ldy	#0
      8  f51e		       b0 01		      .byte.b	$b0, $01
      9  f520		       2c		      .byte.b	$2c
     10  f521		       a4 85		      ldy	SpriteEnd
     11  f523
    724  f523		       b9 00 f8 	      lda	Frame0,Y
    725  f526		       85 fa		      sta	$fa
      0  f528					      jet_spritedata_calc_nosta
      1  f528
      2  f528		       c7 85		      dcp	SpriteEnd
      3  f52a
      4  f52a
      5  f52a
      6  f52a
      7  f52a		       a0 00		      ldy	#0
      8  f52c		       b0 01		      .byte.b	$b0, $01
      9  f52e		       2c		      .byte.b	$2c
     10  f52f		       a4 85		      ldy	SpriteEnd
     11  f531
    727  f531		       b9 00 f8 	      lda	Frame0,Y
    728  f534		       85 fd		      sta	$fd
    729  f536
      0  f536					      sleep	6
      1  f536				   .CYCLES    SET	6
      2  f536
      3  f536				  -	      IF	.CYCLES < 2
      4  f536				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f536				  -	      ERR
      6  f536					      ENDIF
      7  f536
      8  f536				  -	      IF	.CYCLES & 1
      9  f536				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f536				  -	      nop	0
     11  f536				  -	      ELSE
     12  f536				  -	      bit	VSYNC
     13  f536				  -	      ENDIF
     14  f536				  -.CYCLES    SET	.CYCLES - 3
     15  f536					      ENDIF
     16  f536
     17  f536					      REPEAT	.CYCLES / 2
     18  f536		       ea		      nop
     17  f536					      REPEND
     18  f537		       ea		      nop
     17  f537					      REPEND
     18  f538		       ea		      nop
     19  f539					      REPEND
    731  f539
    732  f539							; [row:3-4]
    733  f539							; Jump to the copied kernel.
    734  f539				   kernel_launch
    735  f539		       4c 00 11 	      jmp	KERNEL_START
    736  f53c
    737  f53c				   row_after_kernel
    738  f53c							; [row:5]
    739  f53c							; Cleanup from the kernel.
    740  f53c		       a9 00		      lda	#0
    741  f53e		       85 1e		      sta	EMERALD_MI_ENABLE
    742  f540		       85 1c		      sta	EMERALD_SP
    743  f542		       85 08		      sta	COLUPF
    744  f544
      0  f544					      jet_spritedata_calc
      1  f544
      2  f544		       a9 09		      lda	#SPRITE_HEIGHT
      3  f546		       c7 85		      dcp	SpriteEnd
      4  f548		       a4 85		      ldy	SpriteEnd
      5  f54a
      6  f54a
      7  f54a
      8  f54a		       b9 00 f8 	      lda	Frame0,Y
      9  f54d
     10  f54d		       b0 01		      .byte.b	$b0, $01
     11  f54f		       2c		      .byte.b	$2c
     12  f550		       85 1b		      sta	JET_SP
     13  f552
    746  f552
    747  f552		       85 02		      sta	WSYNC
    748  f554
    749  f554							; [row:6]
      0  f554					      jet_spritedata_calc
      1  f554
      2  f554		       a9 09		      lda	#SPRITE_HEIGHT
      3  f556		       c7 85		      dcp	SpriteEnd
      4  f558		       a4 85		      ldy	SpriteEnd
      5  f55a
      6  f55a
      7  f55a
      8  f55a		       b9 00 f8 	      lda	Frame0,Y
      9  f55d
     10  f55d		       b0 01		      .byte.b	$b0, $01
     11  f55f		       2c		      .byte.b	$2c
     12  f560		       85 1b		      sta	JET_SP
     13  f562
    751  f562		       a9 42		      lda	#COL_BG
    752  f564		       85 08		      sta	COLUPF
    753  f566
    754  f566							; FRAMESWITCH
    755  f566		       a9 01		      lda	#01
    756  f568		       25 83		      and	FrameCount
    757  f56a		       d0 45		      bne	loadframe2
    758  f56c
    759  f56c				   loadframe1
    760  f56c							; ~30c
    761  f56c
    762  f56c							; Emerald byte setting 1A
    763  f56c		       a2 00		      ldx	#0
    764  f56e		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    765  f571		       8d 0d 10 	      sta	GEM_00_W
    766  f574		       e8		      inx
    767  f575		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    768  f578		       8d 15 10 	      sta	GEM_04_W
    769  f57b		       e8		      inx
    770  f57c		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    771  f57f		       8d 19 10 	      sta	GEM_09_W
    772  f582		       e8		      inx
    773  f583
    774  f583		       85 02		      sta	WSYNC
    775  f585
    776  f585							; [row:7]
      0  f585					      jet_spritedata_calc
      1  f585
      2  f585		       a9 09		      lda	#SPRITE_HEIGHT
      3  f587		       c7 85		      dcp	SpriteEnd
      4  f589		       a4 85		      ldy	SpriteEnd
      5  f58b
      6  f58b
      7  f58b
      8  f58b		       b9 00 f8 	      lda	Frame0,Y
      9  f58e
     10  f58e		       b0 01		      .byte.b	$b0, $01
     11  f590		       2c		      .byte.b	$2c
     12  f591		       85 1b		      sta	JET_SP
     13  f593
    778  f593
    779  f593							; Emerald byte setting 1B
    780  f593		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    781  f596		       8d 1d 10 	      sta	GEM_13_W
    782  f599		       e8		      inx
    783  f59a		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    784  f59d		       8d 21 10 	      sta	GEM_17_W
    785  f5a0		       e8		      inx
    786  f5a1		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    787  f5a4		       8d 23 10 	      sta	GEM_18_W
    788  f5a7		       e8		      inx
    789  f5a8		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    790  f5ab		       8d 27 10 	      sta	GEM_22_W
    791  f5ae
    792  f5ae		       4c f6 f5 	      jmp	row_7_end
    793  f5b1
    794  f5b1				   loadframe2
    795  f5b1							; ~30c
    796  f5b1
    797  f5b1							; Emerald byte setting 2A
    798  f5b1		       a2 07		      ldx	#[storage_02 - storage]
    799  f5b3		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    800  f5b6		       8d 0f 10 	      sta	GEM_02_W
    801  f5b9		       e8		      inx
    802  f5ba		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    803  f5bd		       8d 16 10 	      sta	GEM_06_W
    804  f5c0		       e8		      inx
    805  f5c1		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    806  f5c4		       8d 0b 10 	      sta	GEM_08_W
    807  f5c7		       e8		      inx
    808  f5c8
    809  f5c8		       85 02		      sta	WSYNC
    810  f5ca
    811  f5ca							; [row:7]
      0  f5ca					      jet_spritedata_calc
      1  f5ca
      2  f5ca		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5cc		       c7 85		      dcp	SpriteEnd
      4  f5ce		       a4 85		      ldy	SpriteEnd
      5  f5d0
      6  f5d0
      7  f5d0
      8  f5d0		       b9 00 f8 	      lda	Frame0,Y
      9  f5d3
     10  f5d3		       b0 01		      .byte.b	$b0, $01
     11  f5d5		       2c		      .byte.b	$2c
     12  f5d6		       85 1b		      sta	JET_SP
     13  f5d8
    813  f5d8
    814  f5d8							; Emerald byte setting 2B
    815  f5d8		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    816  f5db		       8d 1a 10 	      sta	GEM_11_W
    817  f5de		       e8		      inx
    818  f5df		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    819  f5e2		       8d 1e 10 	      sta	GEM_15_W
    820  f5e5		       e8		      inx
    821  f5e6		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    822  f5e9		       8d 22 10 	      sta	GEM_20_W
    823  f5ec		       e8		      inx
    824  f5ed		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    825  f5f0		       8d 26 10 	      sta	GEM_24_W
    826  f5f3
    827  f5f3		       4c f6 f5 	      jmp	row_7_end
    828  f5f6
    829  f5f6				   row_7_end
    830  f5f6		       85 02		      sta	WSYNC
    831  f5f8
    832  f5f8							; [row:8]
    833  f5f8							; Repeat loop until LoopCount < 0
    834  f5f8		       c6 82		      dec	LoopCount
    835  f5fa		       30 03		      bmi	frame_bottom
    836  f5fc		       4c d0 f4 	      jmp	row_start
    837  f5ff
    838  f5ff							; reset the background for bottom of playfield
    839  f5ff				   frame_bottom
    840  f5ff							;sta WSYNC
    841  f5ff
    842  f5ff							; Make the playfield solid.
    843  f5ff		       a9 3f		      lda	#%00111111
    844  f601		       85 0e		      sta	PF1
    845  f603		       a9 ff		      lda	#%11111111
    846  f605		       85 0f		      sta	PF2
    847  f607
    848  f607							; Clear all sprites.
    849  f607		       a9 00		      lda	#0
    850  f609		       85 1c		      sta	EMERALD_SP
    851  f60b		       85 1b		      sta	JET_SP
    852  f60d		       85 1e		      sta	EMERALD_MI_ENABLE
    853  f60f
    854  f60f		       a9 42		      lda	#COL_BG
    855  f611		       a0 00		      ldy	#0
    856  f613		       85 02		      sta	WSYNC
    857  f615
    858  f615		       84 08		      sty	COLUPF
    859  f617		       85 02		      sta	WSYNC
    860  f619
    861  f619		       85 08		      sta	COLUPF
    862  f61b		       85 02		      sta	WSYNC
    863  f61d
    864  f61d		       85 02		      sta	WSYNC
    865  f61f
    866  f61f		       85 02		      sta	WSYNC
    867  f621
    868  f621		       84 08		      sty	COLUPF
    869  f623		       85 02		      sta	WSYNC
    870  f625
    871  f625		       85 08		      sta	COLUPF
    872  f627		       85 02		      sta	WSYNC
    873  f629		       85 02		      sta	WSYNC
    874  f62b
    875  f62b							; Blank all background colors.
    876  f62b				   frame_end
    877  f62b		       a9 00		      lda	#0
    878  f62d		       85 08		      sta	COLUPF
    879  f62f		       85 0f		      sta	PF2
    880  f631		       85 0e		      sta	PF1
    881  f633		       85 1c		      sta	EMERALD_SP
    882  f635		       85 02		      sta	WSYNC
    883  f637
    884  f637							; Guide lines (2x)
    885  f637		       a9 02		      lda	#SIGNAL_LINE
    886  f639		       85 09		      sta	COLUBK
    887  f63b					      REPEAT	6
    888  f63b		       85 02		      sta	WSYNC
    887  f63b					      REPEND
    888  f63d		       85 02		      sta	WSYNC
    887  f63d					      REPEND
    888  f63f		       85 02		      sta	WSYNC
    887  f63f					      REPEND
    888  f641		       85 02		      sta	WSYNC
    887  f641					      REPEND
    888  f643		       85 02		      sta	WSYNC
    887  f643					      REPEND
    888  f645		       85 02		      sta	WSYNC
    889  f647					      REPEND
    890  f647		       a9 00		      lda	#$00
    891  f649		       85 09		      sta	COLUBK
    892  f64b		       85 02		      sta	WSYNC
    893  f64d
      0  f64d					      TIMER_WAIT
      1  f64d				   .waittimer
      2  f64d		       ad 84 02 	      lda	INTIM
      3  f650		       d0 fb		      bne	.waittimer
      0  f652					      TIMER_SETUP	30
      1  f652				   .lines     SET	30
      2  f652		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f654		       85 02		      sta	WSYNC
      4  f656		       8d 96 02 	      sta	TIM64T
    896  f659
    897  f659		       20 c4 f6 	      jsr	MoveJoystick
    898  f65c		       20 fb f6 	      jsr	SpeedCalculation
    899  f65f
      0  f65f					      TIMER_WAIT
      1  f65f				   .waittimer
      2  f65f		       ad 84 02 	      lda	INTIM
      3  f662		       d0 fb		      bne	.waittimer
    901  f664		       4c 47 f2 	      jmp	BeginFrame
    902  f667
    903  f667
    904  f667							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    905  f667
    906  f667							; kernels
    907  f667
    908  f667
    909  f667							; Important cycles for the kernels:
    910  f667							; left border: 29, right border: 64
    911  f667
    912  f667							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    913  f667
    914  f667							; KERNEL 1
    915  f667
    916  f667							; Emerald line macro (1, 2, ...)
    917  f667
    918  f667				   kernel_1_start
    919  f667							; sleep first make this distinct from
    920  f667							; other kernel for debug scenarios
      0  f667					      sleep	5
      1  f667				   .CYCLES    SET	5
      2  f667
      3  f667				  -	      IF	.CYCLES < 2
      4  f667				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f667				  -	      ERR
      6  f667					      ENDIF
      7  f667
      8  f667					      IF	.CYCLES & 1
      9  f667					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f667		       04 00		      nop	0
     11  f669				  -	      ELSE
     12  f669				  -	      bit	VSYNC
     13  f669					      ENDIF
     14  f669				   .CYCLES    SET	.CYCLES - 3
     15  f669					      ENDIF
     16  f669
     17  f669					      REPEAT	.CYCLES / 2
     18  f669		       ea		      nop
     19  f66a					      REPEND
    922  f66a		       68		      pla
    923  f66b		       8d 1b 00 	      sta.w	GRP0
    924  f66e
    925  f66e		       a9 60		      lda	#EMR1
    926  f670		       a2 06		      ldx	#EMR2
    927  f672		       a0 66		      ldy	#EMR3
    928  f674				   .gem_00
    929  f674		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    930  f676
    931  f676							; 22
    932  f676		       85 11		      sta	EMERALD_SP_RESET
    933  f678		       85 1e		      sta	EMERALD_MI_ENABLE
      0  f67a					      sleep	3
      1  f67a				   .CYCLES    SET	3
      2  f67a
      3  f67a				  -	      IF	.CYCLES < 2
      4  f67a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f67a				  -	      ERR
      6  f67a					      ENDIF
      7  f67a
      8  f67a					      IF	.CYCLES & 1
      9  f67a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f67a		       04 00		      nop	0
     11  f67c				  -	      ELSE
     12  f67c				  -	      bit	VSYNC
     13  f67c					      ENDIF
     14  f67c				   .CYCLES    SET	.CYCLES - 3
     15  f67c					      ENDIF
     16  f67c
     17  f67c				  -	      REPEAT	.CYCLES / 2
     18  f67c				  -	      nop
     19  f67c					      REPEND
    935  f67c				   .gem_04
    936  f67c		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    937  f67e		       85 11		      sta	EMERALD_SP_RESET
    938  f680				   .gem_09
    939  f680		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f682					      sleep	3
      1  f682				   .CYCLES    SET	3
      2  f682
      3  f682				  -	      IF	.CYCLES < 2
      4  f682				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f682				  -	      ERR
      6  f682					      ENDIF
      7  f682
      8  f682					      IF	.CYCLES & 1
      9  f682					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f682		       04 00		      nop	0
     11  f684				  -	      ELSE
     12  f684				  -	      bit	VSYNC
     13  f684					      ENDIF
     14  f684				   .CYCLES    SET	.CYCLES - 3
     15  f684					      ENDIF
     16  f684
     17  f684				  -	      REPEAT	.CYCLES / 2
     18  f684				  -	      nop
     19  f684					      REPEND
    941  f684				   .gem_13
    942  f684		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    943  f686		       85 11		      sta	EMERALD_SP_RESET
    944  f688				   .gem_17
    945  f688		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    946  f68a				   .gem_18
    947  f68a		       84 1c		      .byte.b	GEM_18, EMERALD_SP
      0  f68c					      sleep	3
      1  f68c				   .CYCLES    SET	3
      2  f68c
      3  f68c				  -	      IF	.CYCLES < 2
      4  f68c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f68c				  -	      ERR
      6  f68c					      ENDIF
      7  f68c
      8  f68c					      IF	.CYCLES & 1
      9  f68c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f68c		       04 00		      nop	0
     11  f68e				  -	      ELSE
     12  f68e				  -	      bit	VSYNC
     13  f68e					      ENDIF
     14  f68e				   .CYCLES    SET	.CYCLES - 3
     15  f68e					      ENDIF
     16  f68e
     17  f68e				  -	      REPEAT	.CYCLES / 2
     18  f68e				  -	      nop
     19  f68e					      REPEND
    949  f68e				   .gem_22
    950  f68e		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    951  f690
    952  f690							; cycle 64 (start of right border)
      0  f690					      sleep	9
      1  f690				   .CYCLES    SET	9
      2  f690
      3  f690				  -	      IF	.CYCLES < 2
      4  f690				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f690				  -	      ERR
      6  f690					      ENDIF
      7  f690
      8  f690					      IF	.CYCLES & 1
      9  f690					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f690		       04 00		      nop	0
     11  f692				  -	      ELSE
     12  f692				  -	      bit	VSYNC
     13  f692					      ENDIF
     14  f692				   .CYCLES    SET	.CYCLES - 3
     15  f692					      ENDIF
     16  f692
     17  f692					      REPEAT	.CYCLES / 2
     18  f692		       ea		      nop
     17  f692					      REPEND
     18  f693		       ea		      nop
     17  f693					      REPEND
     18  f694		       ea		      nop
     19  f695					      REPEND
    954  f695		       60		      rts
    955  f696				   kernel_1_end
    956  f696
    957  f696		       10 0d	   GEM_00_W   equ	[$1000 + .gem_00 - kernel_1_start]
    958  f696		       10 15	   GEM_04_W   equ	[$1000 + .gem_04 - kernel_1_start]
    959  f696		       10 19	   GEM_09_W   equ	[$1000 + .gem_09 - kernel_1_start]
    960  f696		       10 1d	   GEM_13_W   equ	[$1000 + .gem_13 - kernel_1_start]
    961  f696		       10 21	   GEM_17_W   equ	[$1000 + .gem_17 - kernel_1_start]
    962  f696		       10 23	   GEM_18_W   equ	[$1000 + .gem_18 - kernel_1_start]
    963  f696		       10 27	   GEM_22_W   equ	[$1000 + .gem_22 - kernel_1_start]
    964  f696
    965  f696							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    966  f696
    967  f696							; KERNEL 2
    968  f696
    969  f696							; Emerald line macro (3, 4, ...)
    970  f696
    971  f696				   kernel_2_start
    972  f696							; don't sleep first to make this distinct from kernel 1
    973  f696		       68		      pla
    974  f697		       85 1b		      sta	GRP0
      0  f699					      sleep	4
      1  f699				   .CYCLES    SET	4
      2  f699
      3  f699				  -	      IF	.CYCLES < 2
      4  f699				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f699				  -	      ERR
      6  f699					      ENDIF
      7  f699
      8  f699				  -	      IF	.CYCLES & 1
      9  f699				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f699				  -	      nop	0
     11  f699				  -	      ELSE
     12  f699				  -	      bit	VSYNC
     13  f699				  -	      ENDIF
     14  f699				  -.CYCLES    SET	.CYCLES - 3
     15  f699					      ENDIF
     16  f699
     17  f699					      REPEAT	.CYCLES / 2
     18  f699		       ea		      nop
     17  f699					      REPEND
     18  f69a		       ea		      nop
     19  f69b					      REPEND
    976  f69b
    977  f69b							; Enable missile (using excessive lda instructions)
    978  f69b		       a9 02		      lda	#02
    979  f69d		       a2 0c		      ldx	#T2
    980  f69f		       a0 cc		      ldy	#T3
    981  f6a1				   .gem_08
    982  f6a1		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    983  f6a3		       a9 c0		      lda	#T1	; movable
    984  f6a5				   .gem_02
    985  f6a5		       84 1c		      .byte.b	GEM_02, EMERALD_SP
    986  f6a7
    987  f6a7							; cycle 25
    988  f6a7		       85 11		      sta	EMERALD_SP_RESET
      0  f6a9					      sleep	6
      1  f6a9				   .CYCLES    SET	6
      2  f6a9
      3  f6a9				  -	      IF	.CYCLES < 2
      4  f6a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6a9				  -	      ERR
      6  f6a9					      ENDIF
      7  f6a9
      8  f6a9				  -	      IF	.CYCLES & 1
      9  f6a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6a9				  -	      nop	0
     11  f6a9				  -	      ELSE
     12  f6a9				  -	      bit	VSYNC
     13  f6a9				  -	      ENDIF
     14  f6a9				  -.CYCLES    SET	.CYCLES - 3
     15  f6a9					      ENDIF
     16  f6a9
     17  f6a9					      REPEAT	.CYCLES / 2
     18  f6a9		       ea		      nop
     17  f6a9					      REPEND
     18  f6aa		       ea		      nop
     17  f6aa					      REPEND
     18  f6ab		       ea		      nop
     19  f6ac					      REPEND
    990  f6ac				   .gem_06
    991  f6ac		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    992  f6ae		       85 11		      sta	EMERALD_SP_RESET
    993  f6b0				   .gem_11
    994  f6b0		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    995  f6b2		       86 1e		      stx	EMERALD_MI_ENABLE
    996  f6b4				   .gem_15
    997  f6b4		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    998  f6b6		       85 11		      sta	EMERALD_SP_RESET
    999  f6b8				   .gem_20
   1000  f6b8		       84 1c		      .byte.b	GEM_20, EMERALD_SP
      0  f6ba					      sleep	3
      1  f6ba				   .CYCLES    SET	3
      2  f6ba
      3  f6ba				  -	      IF	.CYCLES < 2
      4  f6ba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ba				  -	      ERR
      6  f6ba					      ENDIF
      7  f6ba
      8  f6ba					      IF	.CYCLES & 1
      9  f6ba					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ba		       04 00		      nop	0
     11  f6bc				  -	      ELSE
     12  f6bc				  -	      bit	VSYNC
     13  f6bc					      ENDIF
     14  f6bc				   .CYCLES    SET	.CYCLES - 3
     15  f6bc					      ENDIF
     16  f6bc
     17  f6bc				  -	      REPEAT	.CYCLES / 2
     18  f6bc				  -	      nop
     19  f6bc					      REPEND
   1002  f6bc				   .gem_24
   1003  f6bc		       84 1c		      .byte.b	GEM_24, EMERALD_SP
      0  f6be					      sleep	3
      1  f6be				   .CYCLES    SET	3
      2  f6be
      3  f6be				  -	      IF	.CYCLES < 2
      4  f6be				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6be				  -	      ERR
      6  f6be					      ENDIF
      7  f6be
      8  f6be					      IF	.CYCLES & 1
      9  f6be					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6be		       04 00		      nop	0
     11  f6c0				  -	      ELSE
     12  f6c0				  -	      bit	VSYNC
     13  f6c0					      ENDIF
     14  f6c0				   .CYCLES    SET	.CYCLES - 3
     15  f6c0					      ENDIF
     16  f6c0
     17  f6c0				  -	      REPEAT	.CYCLES / 2
     18  f6c0				  -	      nop
     19  f6c0					      REPEND
   1005  f6c0
   1006  f6c0							; cycle 64 (start of right border)
      0  f6c0					      sleep	6
      1  f6c0				   .CYCLES    SET	6
      2  f6c0
      3  f6c0				  -	      IF	.CYCLES < 2
      4  f6c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6c0				  -	      ERR
      6  f6c0					      ENDIF
      7  f6c0
      8  f6c0				  -	      IF	.CYCLES & 1
      9  f6c0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6c0				  -	      nop	0
     11  f6c0				  -	      ELSE
     12  f6c0				  -	      bit	VSYNC
     13  f6c0				  -	      ENDIF
     14  f6c0				  -.CYCLES    SET	.CYCLES - 3
     15  f6c0					      ENDIF
     16  f6c0
     17  f6c0					      REPEAT	.CYCLES / 2
     18  f6c0		       ea		      nop
     17  f6c0					      REPEND
     18  f6c1		       ea		      nop
     17  f6c1					      REPEND
     18  f6c2		       ea		      nop
     19  f6c3					      REPEND
   1008  f6c3		       60		      rts
   1009  f6c4				   kernel_2_end
   1010  f6c4
   1011  f6c4		       10 0f	   GEM_02_W   equ	[$1000 + .gem_02 - kernel_2_start]
   1012  f6c4		       10 16	   GEM_06_W   equ	[$1000 + .gem_06 - kernel_2_start]
   1013  f6c4		       10 0b	   GEM_08_W   equ	[$1000 + .gem_08 - kernel_2_start]
   1014  f6c4		       10 1a	   GEM_11_W   equ	[$1000 + .gem_11 - kernel_2_start]
   1015  f6c4		       10 1e	   GEM_15_W   equ	[$1000 + .gem_15 - kernel_2_start]
   1016  f6c4		       10 22	   GEM_20_W   equ	[$1000 + .gem_20 - kernel_2_start]
   1017  f6c4		       10 26	   GEM_24_W   equ	[$1000 + .gem_24 - kernel_2_start]
   1018  f6c4
   1019  f6c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1020  f6c4
   1021  f6c4							; SUBROUTINE
   1022  f6c4							; Read joystick movement and apply to object 0
   1023  f6c4				   MoveJoystick
   1024  f6c4							; Move vertically
   1025  f6c4							; (up and down are actually reversed since ypos starts at bottom)
   1026  f6c4							;     ldx YPos
   1027  f6c4		       a9 10		      lda	#%00010000	;Up?
   1028  f6c6		       2c 80 02 	      bit	SWCHA
   1029  f6c9		       d0 0d		      bne	SkipMoveUp
   1030  f6cb
   1031  f6cb		       18		      clc
   1032  f6cc		       a5 88		      lda	Speed2
   1033  f6ce		       69 0c		      adc	#12
   1034  f6d0		       85 88		      sta	Speed2
   1035  f6d2		       a5 87		      lda	Speed1
   1036  f6d4		       69 00		      adc	#00
   1037  f6d6		       85 87		      sta	Speed1
   1038  f6d8
   1039  f6d8				   SkipMoveUp
   1040  f6d8		       a6 86		      ldx	XPos
   1041  f6da
   1042  f6da							; Only check left/right on odd frames;
   1043  f6da							; TODO make this just a fractional speed
   1044  f6da							; rather than dropping frames
   1045  f6da		       a9 01		      lda	#01
   1046  f6dc		       25 83		      and	FrameCount
   1047  f6de		       d0 18		      bne	SkipMoveRight
   1048  f6e0
   1049  f6e0
   1050  f6e0							; Move horizontally
   1051  f6e0		       a9 40		      lda	#%01000000	;Left?
   1052  f6e2		       2c 80 02 	      bit	SWCHA
   1053  f6e5		       d0 05		      bne	SkipMoveLeft
   1054  f6e7		       e0 1d		      cpx	#29
   1055  f6e9		       90 01		      bcc	SkipMoveLeft
   1056  f6eb		       ca		      dex
   1057  f6ec
   1058  f6ec							; Reflect
   1059  f6ec							;     lda #$ff
   1060  f6ec							;     sta REFP0
   1061  f6ec				   SkipMoveLeft
   1062  f6ec		       a9 80		      lda	#%10000000	;Right?
   1063  f6ee		       2c 80 02 	      bit	SWCHA
   1064  f6f1		       d0 05		      bne	SkipMoveRight
   1065  f6f3		       e0 80		      cpx	#128
   1066  f6f5		       b0 01		      bcs	SkipMoveRight
   1067  f6f7		       e8		      inx
   1068  f6f8
   1069  f6f8							; Reflect
   1070  f6f8							;     lda #$0
   1071  f6f8							;     sta REFP0
   1072  f6f8				   SkipMoveRight
   1073  f6f8		       86 86		      stx	XPos
   1074  f6fa		       60		      rts
   1075  f6fb
   1076  f6fb
   1077  f6fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1078  f6fb
   1079  f6fb
   1080  f6fb				   SpeedCalculation
   1081  f6fb		       38		      sec
   1082  f6fc		       a5 88		      lda	Speed2
   1083  f6fe		       e9 07		      sbc	#7
   1084  f700		       85 88		      sta	Speed2
   1085  f702		       a5 87		      lda	Speed1
   1086  f704		       e9 00		      sbc	#0
   1087  f706		       85 87		      sta	Speed1
   1088  f708
   1089  f708		       18		      clc
   1090  f709		       a5 8a		      lda	YPos2
   1091  f70b		       65 88		      adc	Speed2
   1092  f70d		       85 8a		      sta	YPos2
   1093  f70f		       a5 89		      lda	YPos
   1094  f711		       65 87		      adc	Speed1
   1095  f713		       85 89		      sta	YPos
   1096  f715
   1097  f715		       c9 43		      cmp	#FLOOR_OFFSET
   1098  f717		       b0 0a		      bcs	NewThing2
   1099  f719
   1100  f719							; Reset to floor
   1101  f719		       a9 43		      lda	#FLOOR_OFFSET
   1102  f71b		       85 89		      sta	YPos
   1103  f71d		       a9 00		      lda	#0
   1104  f71f		       85 87		      sta	Speed1
   1105  f721		       85 88		      sta	Speed2
   1106  f723				   NewThing2
   1107  f723
   1108  f723		       c9 bf		      cmp	#CEILING_OFFSET
   1109  f725		       90 0a		      bcc	.next
   1110  f727
   1111  f727							; Reset to ceiling
   1112  f727		       a9 bf		      lda	#CEILING_OFFSET
   1113  f729		       85 89		      sta	YPos
   1114  f72b		       a9 00		      lda	#0
   1115  f72d		       85 87		      sta	Speed1
   1116  f72f		       85 88		      sta	Speed2
   1117  f731				   .next
   1118  f731
   1119  f731		       60		      rts
   1120  f732
   1121  f732
   1122  f732
   1123  f732							; Subroutine
   1124  f732				   SetHorizPos
   1125  f732		       85 02		      sta	WSYNC	; start a new line
   1126  f734		       24 00		      bit	0	; waste 3 cycles
   1127  f736		       38		      sec		; set carry flag
   1128  f737				   DivideLoop
   1129  f737		       e9 0f		      sbc	#15	; subtract 15
   1130  f739		       b0 fc		      bcs	DivideLoop	; branch until negative
   1131  f73b		       49 07		      eor	#7	; calculate fine offset
   1132  f73d		       0a		      asl
   1133  f73e		       0a		      asl
   1134  f73f		       0a		      asl
   1135  f740		       0a		      asl
   1136  f741		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
   1137  f743		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
   1138  f745		       60		      rts		; return to caller
   1139  f746
   1140  f746
   1141  f746
   1142  f800		       00 00 00 00*	      align	256
   1143  f800
   1144  f800							; Bitmap data for character "standing" position
   1145  f800							; Comical amount of 0's for now to simplify sprite rendering
   1146  f800
   1147  f800							; Y can be from:
   1148  f800							;     SPRITE_HEIGHT to (8*ROW_COUNT)
   1149  f800							; SpriteEnd: 8..128
   1150  f800							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
   1151  f800				   Frame0
   1152  f800		       00		      .byte.b	#%00000000
   1153  f801		       60		      .byte.b	#%01100000
   1154  f802		       60		      .byte.b	#%01100000
   1155  f803		       60		      .byte.b	#%01100000
   1156  f804		       c0		      .byte.b	#%11000000
   1157  f805		       c0		      .byte.b	#%11000000
   1158  f806		       f0		      .byte.b	#%11110000
   1159  f807		       c0		      .byte.b	#%11000000
   1160  f808		       c0		      .byte.b	#%11000000
   1161  f809		       00		      .byte.b	#%00000000
   1162  f80a
   1163  f80a
   1164  f80a							; Epilogue
   1165  fffc					      org	$fffc
   1166  fffc		       00 f2		      .word.w	Start
   1167  fffe		       00 f2		      .word.w	Start
