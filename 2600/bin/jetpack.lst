------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
      4  10000 ????				       mac	assert_runtime
      5  10000 ????			    .COND      SET	{1}
      6  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      7  10000 ????				       endm
      8  10000 ????
      9  10000 ????						; Static assertions for size
     10  10000 ????				       mac	assert_size
     11  10000 ????			    .STARTA    SET	{1}
     12  10000 ????			    .ENDA      SET	{2}
     13  10000 ????			    .LEN       SET	{3}
     14  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     15  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     16  10000 ????				       err
     17  10000 ????				       endif
     18  10000 ????				       endm
     19  10000 ????				       mac	assert_size_exact
     20  10000 ????			    .STARTA    SET	{1}
     21  10000 ????			    .ENDA      SET	{2}
     22  10000 ????			    .LEN       SET	{3}
     23  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     24  10000 ????				       echo	""
     25  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     26  10000 ????				       err
     27  10000 ????				       endif
     28  10000 ????				       endm
     29  10000 ????
     30  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     34  0000 ????
     35  0000 ????						; RAM and constants
------- FILE vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"vars.s"
      1 U0090 ????				      seg.u	Variables
      2 U0090 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   KERNEL_TEMP_A byte.b
     31 U0090
     32 U0090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U0090
     34 U0090		       00 10	   ROW_COUNT  =	16
     35 U0090
     36 U0090		       00 02	   SIGNAL_LINE =	$02
     37 U0090
     38 U0090							; RAM+ memory map
     39 U0090
     40 U0090		       f0 00	   RAMP_KERNEL_W =	$f000
     41 U0090		       f1 00	   RAMP_KERNEL_R =	$f100
     42 U0090
     43 U0090		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     44 U0090		       f1 40	   RAMP_STORAGE_R =	$f140
     45 U0090
     46 U0090							; NUSIZ values
     47 U0090
     48 U0090		       00 13	   THREE_COPIES =	%00010011
     49 U0090
     50 U0090							; Colors
     51 U0090
     52 U0090		       00 42	   COL_BG     equ	$42
     53 U0090		       00 cc	   COL_EMERALD equ	$CC
     54 U0090		       00 cc	   COL_EMERALD_2 equ	$CC
     55 U0090
     56 U0090							; HMOVE values for missiles
     57 U0090
     58 U0090		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     59 U0090		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     60 U0090
     61 U0090		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     62 U0090		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     63 U0090
     64 U0090							; Sprite details
     65 U0090
     66 U0090		       00 09	   SPRITE_HEIGHT equ	9
     67 U0090
     68 U0090		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     69 U0090		       00 1c	   EMERALD_SP equ	GRP1
     70 U0090		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     71 U0090		       00 11	   EMERALD_SP_RESET equ	RESP1
     72 U0090		       00 13	   EMERALD_MI_RESET equ	RESM1
     73 U0090		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     74 U0090		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     75 U0090		       00 05	   EMERALD_COPIES equ	NUSIZ1
     76 U0090
     77 U0090		       00 1b	   JET_SP     equ	GRP0
     78 U0090		       00 10	   JET_SP_RESET equ	RESP0
     79 U0090		       00 20	   JET_SP_HMOVE equ	HMP0
     80 U0090		       00 06	   JET_SP_COLOR equ	COLUP0
     81 U0090
     82 U0090							; Spriteend is HEIGHT_OFFSET - YPos
     83 U0090		       00 c8	   HEIGHT_OFFSET equ	200
     84 U0090
     85 U0090							; Compared with YPos
     86 U0090		       00 3e	   FLOOR_OFFSET equ	62
     87 U0090		       00 be	   CEILING_OFFSET equ	190
     88 U0090
     89 U0090							; Starting player position
     90 U0090		       00 3e	   YPosStart  equ	62
     91 U0090		       00 37	   XPosStart  equ	55
     92 U0090
     93 U0090							; Top left corner
     94 U0090							; YPosStart equ 190
     95 U0090							; XPosStart equ 28
     96 U0090
     97 U0090							; Tick (every 8 frames)
     98 U0090		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     37 U0090
     38 U0090							; Bank 1
     39  e000 ????				      seg	CodeBank1
     40  d000					      org	$D000
     41  d000					      rorg	$F000
     42  d000		       00	   BANK1      byte.b
     43  d200					      org	$d200
     44  d200					      rorg	$d200
     45  d200				   Bank1Start
     46  d200		       ad fa ff 	      lda	$fffa
     47  d203		       ea		      nop
     48  d204		       ea		      nop
     49  d205		       ea		      nop
     50  d206
     51  dffc					      org	$dffc
     52  dffc					      rorg	$fffc
     53  dffc		       00 d2		      .word.w	Bank1Start
     54  dffe		       00 d2		      .word.w	Bank1Start
     55  e000
     56  e000							; Bank 2
     57  f000 ????				      seg	CodeBank2
     58  e000					      org	$E000
     59  e000					      rorg	$F000
     60  e000		       00	   BANK2      byte.b
     61  e200					      org	$e200
     62  e200					      rorg	$f200
     63  e200				   Bank2Start
     64  e200		       ad fa ff 	      lda	$fffa
     65  e203		       ea		      nop
     66  e204		       ea		      nop
     67  e205		       ea		      nop
     68  e206
     69  effc					      org	$effc
     70  effc					      rorg	$fffc
     71  effc		       00 f2		      .word.w	Bank2Start
     72  effe		       00 f2		      .word.w	Bank2Start
     73  f000
     74  f000							; Bank 3
     75  10000 ????				       seg	CodeBank3
     76  f000					      org	$F000
     77  f000					      rorg	$F000
     78  f000		       00	   BANK3      byte.b
     79  f200					      org	$f200
     80  f200					      rorg	$f200
     81  f200				   Bank3Start
     82  f200		       ad fa ff 	      lda	$fffa
     83  f203		       ea		      nop
     84  f204		       ea		      nop
     85  f205		       ea		      nop
     86  f206		       4c 09 f2 	      jmp	Start
     87  f209
     88  f209							; Bank 3 source code
------- FILE init.s LEVEL 2 PASS 2
      0  f209					      include	"init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209					      mac	nibble_start_kernel
      4  f209					      endm
      5  f209					      mac	nibble_if
      6  f209					      ror
      7  f209					      endm
      8  f209					      mac	nibble_write
      9  f209					      endm
     10  f209					      mac	nibble_write_opcode
     11  f209					      endm
     12  f209					      mac	nibble_else
     13  f209					      endm
     14  f209					      mac	nibble_end_if
     15  f209					      endm
     16  f209					      mac	nibble_end_kernel
     17  f209					      endm
     18  f209
     19  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
     21  f214
     22  f214				   InitSetup
     23  f214		       a9 00		      lda	#0
     24  f216		       85 83		      sta	FrameCount
     25  f218
     26  f218							; P0 has three copies
     27  f218		       a9 13		      lda	#%00010011
     28  f21a		       85 05		      sta	EMERALD_COPIES
     29  f21c
     30  f21c		       a9 00		      lda	#$00
     31  f21e		       85 09		      sta	COLUBK
     32  f220		       a9 01		      lda	#%00000001
     33  f222		       85 0a		      sta	CTRLPF	; reflect playfield
     34  f224
     35  f224							; Disable VDEL
     36  f224		       a9 00		      lda	#0
     37  f226		       85 25		      sta	VDELP0
     38  f228		       85 26		      sta	VDELP1
     39  f22a
     40  f22a
     41  f22a							; Player 0
     42  f22a		       a2 cc		      ldx	#COL_EMERALD
     43  f22c		       86 07		      stx	EMERALD_SP_COLOR
     44  f22e
     45  f22e							; Player 1
     46  f22e		       a9 0f		      lda	#$0f
     47  f230		       85 06		      sta	JET_SP_COLOR
     48  f232		       a9 00		      lda	#$00
     49  f234		       85 1b		      sta	JET_SP
     50  f236
     51  f236							; Positions
     52  f236		       a9 3e		      lda	#YPosStart
     53  f238		       85 89		      sta	YPos
     54  f23a		       a9 37		      lda	#XPosStart
     55  f23c		       85 86		      sta	XPos
     56  f23e		       a9 00		      lda	#0
     57  f240		       85 87		      sta	Speed1
     58  f242		       85 88		      sta	Speed2
     59  f244		       85 8a		      sta	YPos2
     60  f246
     61  f246		       a9 00		      lda	#0
     62  f248		       85 8e		      sta	ROW_DEMO_INDEX
     63  f24a
     64  f24a							; Start with vertical sync (to reset frame)
     65  f24a		       4c 7e f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE loader.s LEVEL 2 PASS 2
      0  f24d					      include	"loader.s"
      1  f24d							; Copies the gem kernel to RAM
      2  f24d
      3  f24d				   CopyFrame  subroutine
      4  f24d							; FRAMESWITCH
      5  f24d		       a9 01		      lda	#01
      6  f24f		       25 83		      and	FrameCount
      7  f251		       f0 03		      beq	CopyFrame1Kernel
      8  f253		       4c 68 f2 	      jmp	CopyFrame2Kernel
      9  f256
     10  f256							; Copy: KERNEL 1
     11  f256				   CopyFrame1Kernel subroutine
     12  f256		       a0 2f		      ldy	#(kernel_1_end - kernel_1_start)-1
     13  f258				   .loop
     14  f258		       b9 00 f6 	      lda	kernel_1_start,Y
     15  f25b		       99 00 10 	      sta	$1000,Y
     16  f25e		       88		      dey
     17  f25f		       d0 f7		      bne	.loop
     18  f261		       ad 00 f6 	      lda	kernel_1_start
     19  f264		       8d 00 10 	      sta	$1000
     20  f267		       60		      rts
     21  f268
     22  f268							; Copy: KERNEL 2
     23  f268				   CopyFrame2Kernel subroutine
     24  f268		       a0 2f		      ldy	#(kernel_2_end - kernel_2_start)-1
     25  f26a				   .loop
     26  f26a		       b9 30 f6 	      lda	kernel_2_start,Y
     27  f26d		       99 00 10 	      sta	$1000,Y
     28  f270		       88		      dey
     29  f271		       d0 f7		      bne	.loop
     30  f273		       ad 30 f6 	      lda	kernel_2_start
     31  f276		       8d 00 10 	      sta	$1000
     32  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a				   NIBBLE_gem_kernel_OPCODE_1
      2  f27a		       a9 c6		      lda	#%011000110
      0  f27c					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_1, ., 2
      1  f27c				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_1
      2  f27c				   .ENDA      SET	.
      3  f27c				   .LEN       SET	2
      4  f27c				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27c				  -	      echo	""
      6  f27c				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27c				  -	      err
      8  f27c					      endif
      4  f27c				   NIBBLE_gem_kernel_OPCODE_2
      5  f27c		       a9 00		      lda	#%000000000
      0  f27e					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_2, ., 2
      1  f27e				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_2
      2  f27e				   .ENDA      SET	.
      3  f27e				   .LEN       SET	2
      4  f27e				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27e				  -	      echo	""
      6  f27e				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27e				  -	      err
      8  f27e					      endif
      7  f27e
      8  f27e					      MAC	nibble_gem_kernel
      9  f27e				   .if_1
     10  f27e					      asl
     11  f27e					      bcc	.else_1
     12  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 0]
     13  f27e					      stx	[[KernelA_TEST - $100] + 0]
     14  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 1]
     15  f27e					      stx	[[KernelA_TEST - $100] + 1]
     16  f27e					      jmp	.endif_1
     17  f27e				   .else_1
     18  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 0]
     19  f27e					      stx	[[KernelA_TEST - $100] + 0]
     20  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 1]
     21  f27e					      stx	[[KernelA_TEST - $100] + 1]
     22  f27e				   .endif_1
     23  f27e					      ENDM
     24  f27e
------- FILE main.s
------- FILE frame.s LEVEL 2 PASS 2
      0  f27e					      include	"frame.s"
      1  f27e							; Frame loop, including calling out to other kernels.
      2  f27e
      3  f27e							; Vertical Sync
      4  f27e				   VerticalSync subroutine
      0  f27e					      VERTICAL_SYNC
      1  f27e		       a9 0e		      lda	#%1110
      2  f280		       85 02	   .VSLP1     sta	WSYNC
      3  f282		       85 00		      sta	VSYNC
      4  f284		       4a		      lsr
      5  f285		       d0 f9		      bne	.VSLP1
      6  f287
      7  f287				   FrameStart subroutine
      0  f287					      ASSERT_RUNTIME	"_scan == #0"
      1  f287				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f287  && !(  _scan == #0  ) }
      2  f287					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f287
     10  f287				   VerticalBlank subroutine
      0  f287					      TIMER_SETUP	37
      1  f287				   .lines     SET	37
      2  f287		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f289		       85 02		      sta	WSYNC
      4  f28b		       8d 96 02 	      sta	TIM64T
     12  f28e
     13  f28e							; Scanline counter
     14  f28e		       a9 10		      lda	#ROW_COUNT
     15  f290		       85 82		      sta	LoopCount
     16  f292
     17  f292							; Frame counter
     18  f292		       e6 83		      inc	FrameCount
     19  f294
     20  f294							; Copy frames
     21  f294		       20 4d f2 	      jsr	CopyFrame
     22  f297
     23  f297							; Skip every 8 frames for increasing demo index
     24  f297		       a5 83		      lda	FrameCount
     25  f299		       29 07		      and	#FrameSkip
     26  f29b		       c9 07		      cmp	#FrameSkip
     27  f29d		       d0 0d		      bne	.next_next_thing
     28  f29f
     29  f29f		       18		      clc
     30  f2a0		       a5 8e		      lda	ROW_DEMO_INDEX
     31  f2a2		       69 04		      adc	#4
     32  f2a4		       c9 68		      cmp	#[level_01_end - level_01]
     33  f2a6		       90 02		      bcc	.next_thing_local
     34  f2a8		       a9 00		      lda	#0
     35  f2aa				   .next_thing_local
     36  f2aa		       85 8e		      sta	ROW_DEMO_INDEX
     37  f2ac				   .next_next_thing
     38  f2ac		       85 02		      sta	WSYNC
     39  f2ae
     40  f2ae							; Positioning
      0  f2ae					      SLEEP	40
      1  f2ae				   .CYCLES    SET	40
      2  f2ae
      3  f2ae				  -	      IF	.CYCLES < 2
      4  f2ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ae				  -	      ERR
      6  f2ae					      ENDIF
      7  f2ae
      8  f2ae				  -	      IF	.CYCLES & 1
      9  f2ae				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ae				  -	      nop	0
     11  f2ae				  -	      ELSE
     12  f2ae				  -	      bit	VSYNC
     13  f2ae				  -	      ENDIF
     14  f2ae				  -.CYCLES    SET	.CYCLES - 3
     15  f2ae					      ENDIF
     16  f2ae
     17  f2ae					      REPEAT	.CYCLES / 2
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     17  f2c0					      REPEND
     18  f2c1		       ea		      nop
     19  f2c2					      REPEND
     42  f2c2		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     43  f2c4		       85 02		      sta	WSYNC
     44  f2c6
     45  f2c6							; Misc
     46  f2c6		       a9 00		      lda	#00
     47  f2c8		       85 1e		      sta	EMERALD_MI_ENABLE
     48  f2ca
     49  f2ca							; Assign dervied SpriteEnd value
     50  f2ca		       18		      clc
     51  f2cb		       a9 c8		      lda	#HEIGHT_OFFSET
     52  f2cd		       e5 89		      sbc	YPos
     53  f2cf		       85 85		      sta	SpriteEnd
     54  f2d1
     55  f2d1
     56  f2d1							; Player 1
     57  f2d1		       a5 86		      lda	XPos
     58  f2d3		       a2 00		      ldx	#0
     59  f2d5		       20 e2 f3 	      jsr	SetHorizPos
     60  f2d8
     61  f2d8				   PositionMissiles subroutine
     62  f2d8							; Kernel A or B
     63  f2d8		       a9 01		      lda	#01
     64  f2da		       25 83		      and	FrameCount
     65  f2dc		       d0 19		      bne	.kernel_b
     66  f2de
     67  f2de				   .kernel_a
     68  f2de		       85 02		      sta	WSYNC
      0  f2e0					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2e0				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2e0
      3  f2e0				  -	      IF	.CYCLES < 2
      4  f2e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2e0				  -	      ERR
      6  f2e0					      ENDIF
      7  f2e0
      8  f2e0				  -	      IF	.CYCLES & 1
      9  f2e0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2e0				  -	      nop	0
     11  f2e0				  -	      ELSE
     12  f2e0				  -	      bit	VSYNC
     13  f2e0				  -	      ENDIF
     14  f2e0				  -.CYCLES    SET	.CYCLES - 3
     15  f2e0					      ENDIF
     16  f2e0
     17  f2e0					      REPEAT	.CYCLES / 2
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     17  f2e1					      REPEND
     18  f2e2		       ea		      nop
     17  f2e2					      REPEND
     18  f2e3		       ea		      nop
     17  f2e3					      REPEND
     18  f2e4		       ea		      nop
     17  f2e4					      REPEND
     18  f2e5		       ea		      nop
     17  f2e5					      REPEND
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     17  f2ec					      REPEND
     18  f2ed		       ea		      nop
     19  f2ee					      REPEND
     70  f2ee		       85 13		      sta	EMERALD_MI_RESET
     71  f2f0
     72  f2f0		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     73  f2f2		       85 23		      sta	EMERALD_MI_HMOVE
     74  f2f4
     75  f2f4		       4c 19 f3 	      jmp	.complete
     76  f2f7
     77  f2f7				   .kernel_b
     78  f2f7		       85 02		      sta	WSYNC
      0  f2f9					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f2f9				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f2f9
      3  f2f9				  -	      IF	.CYCLES < 2
      4  f2f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f9				  -	      ERR
      6  f2f9					      ENDIF
      7  f2f9
      8  f2f9					      IF	.CYCLES & 1
      9  f2f9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f9		       04 00		      nop	0
     11  f2fb				  -	      ELSE
     12  f2fb				  -	      bit	VSYNC
     13  f2fb					      ENDIF
     14  f2fb				   .CYCLES    SET	.CYCLES - 3
     15  f2fb					      ENDIF
     16  f2fb
     17  f2fb					      REPEAT	.CYCLES / 2
     18  f2fb		       ea		      nop
     17  f2fb					      REPEND
     18  f2fc		       ea		      nop
     17  f2fc					      REPEND
     18  f2fd		       ea		      nop
     17  f2fd					      REPEND
     18  f2fe		       ea		      nop
     17  f2fe					      REPEND
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     19  f313					      REPEND
     80  f313		       85 13		      sta	EMERALD_MI_RESET
     81  f315
     82  f315		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     83  f317		       85 23		      sta	EMERALD_MI_HMOVE
     84  f319
     85  f319				   .complete
     86  f319
     87  f319							; Perform Nibble calculations
     88  f319		       a9 00		      lda	#$00
      0  f31b					      NIBBLE_START_KERNEL	gem_kernel, 40
     90  f31b		       ae 10 f7 	      ldx	level_00
     91  f31e		       e0 c0		      cpx	#%11000000
      0  f320					      NIBBLE_IF	cs
      1  f320		       6a		      ror
      0  f321					      NIBBLE_WRITE_OPCODE	[KernelA_TEST - $100], 2, lda #%011000110
      0  f321					      NIBBLE_ELSE
      0  f321					      NIBBLE_WRITE_OPCODE	[KernelA_TEST - $100], 2, lda #%000000000
      0  f321					      NIBBLE_END_IF
      0  f321					      NIBBLE_END_KERNEL
     98  f321		       85 8f		      sta	KERNEL_TEMP_A
     99  f323
    100  f323				   VerticalBlankEnd
    101  f323							; Wait until the end of Vertical blank.
      0  f323					      TIMER_WAIT
      1  f323				   .waittimer
      2  f323		       ad 84 02 	      lda	INTIM
      3  f326		       d0 fb		      bne	.waittimer
      4  f328		       85 02		      sta	WSYNC
      0  f32a					      ASSERT_RUNTIME	"_scan == #37"
      1  f32a				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f32a  && !(  _scan == #37  ) }
      2  f32a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f32a
    105  f32a							; Start rendering the kernel.
      0  f32a					      TIMER_SETUP	192
      1  f32a				   .lines     SET	192
      2  f32a		       a9 e3		      lda	#(((.lines)*76-14)/64)
      3  f32c		       85 02		      sta	WSYNC
      4  f32e		       8d 96 02 	      sta	TIM64T
    107  f331		       4c f6 f3 	      jmp	KernelBorder
    108  f334
    109  f334				   FrameEnd   subroutine
    110  f334		       85 02		      sta	WSYNC
    111  f336
    112  f336							; Blank all background colors.
    113  f336		       a9 00		      lda	#0
    114  f338		       85 08		      sta	COLUPF
    115  f33a		       85 0f		      sta	PF2
    116  f33c		       85 0e		      sta	PF1
    117  f33e		       85 1c		      sta	EMERALD_SP
    118  f340
    119  f340							; Guide lines (2x)
    120  f340		       a9 02		      lda	#SIGNAL_LINE
    121  f342		       85 09		      sta	COLUBK
    122  f344					      REPEAT	6
    123  f344		       85 02		      sta	WSYNC
    122  f344					      REPEND
    123  f346		       85 02		      sta	WSYNC
    122  f346					      REPEND
    123  f348		       85 02		      sta	WSYNC
    122  f348					      REPEND
    123  f34a		       85 02		      sta	WSYNC
    122  f34a					      REPEND
    123  f34c		       85 02		      sta	WSYNC
    122  f34c					      REPEND
    123  f34e		       85 02		      sta	WSYNC
    124  f350					      REPEND
    125  f350		       a9 00		      lda	#$00
    126  f352		       85 09		      sta	COLUBK
    127  f354
    128  f354							; TODO Should a timer be necessary for ending the graphics kernel?
      0  f354					      TIMER_WAIT
      1  f354				   .waittimer
      2  f354		       ad 84 02 	      lda	INTIM
      3  f357		       d0 fb		      bne	.waittimer
      4  f359		       85 02		      sta	WSYNC
      0  f35b					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f35b				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f35b  && !(  _scan == (#37 + #192)  ) }
      2  f35b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    131  f35b
    132  f35b							; Overscan
    133  f35b				   Overscan   subroutine
    134  f35b		       85 01		      sta	VBLANK
      0  f35d					      TIMER_SETUP	29
      1  f35d				   .lines     SET	29
      2  f35d		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f35f		       85 02		      sta	WSYNC
      4  f361		       8d 96 02 	      sta	TIM64T
    136  f364
    137  f364		       20 74 f3 	      jsr	MoveJoystick
    138  f367		       20 ab f3 	      jsr	SpeedCalculation
    139  f36a
      0  f36a					      TIMER_WAIT
      1  f36a				   .waittimer
      2  f36a		       ad 84 02 	      lda	INTIM
      3  f36d		       d0 fb		      bne	.waittimer
      4  f36f		       85 02		      sta	WSYNC
      0  f371					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f371				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f371  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f371					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    142  f371
    143  f371		       4c 7e f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE input.s LEVEL 2 PASS 2
      0  f374					      include	"input.s"
      1  f374							; Handles input checking. Called from overscan.
      2  f374
      3  f374							; Read joystick movement and apply to object 0
      4  f374				   MoveJoystick
      5  f374							; Move vertically
      6  f374							; (up and down are actually reversed since ypos starts at bottom)
      7  f374							;     ldx YPos
      8  f374		       a9 10		      lda	#%00010000	;Up?
      9  f376		       2c 80 02 	      bit	SWCHA
     10  f379		       d0 0d		      bne	SkipMoveUp
     11  f37b
     12  f37b		       18		      clc
     13  f37c		       a5 88		      lda	Speed2
     14  f37e		       69 0c		      adc	#12
     15  f380		       85 88		      sta	Speed2
     16  f382		       a5 87		      lda	Speed1
     17  f384		       69 00		      adc	#00
     18  f386		       85 87		      sta	Speed1
     19  f388
     20  f388				   SkipMoveUp
     21  f388		       a6 86		      ldx	XPos
     22  f38a
     23  f38a							; Only check left/right on odd frames;
     24  f38a							; TODO make this just a fractional speed
     25  f38a							; rather than dropping frames
     26  f38a		       a9 01		      lda	#01
     27  f38c		       25 83		      and	FrameCount
     28  f38e		       d0 18		      bne	SkipMoveRight
     29  f390
     30  f390
     31  f390							; Move horizontally
     32  f390		       a9 40		      lda	#%01000000	;Left?
     33  f392		       2c 80 02 	      bit	SWCHA
     34  f395		       d0 05		      bne	SkipMoveLeft
     35  f397		       e0 1d		      cpx	#29
     36  f399		       90 01		      bcc	SkipMoveLeft
     37  f39b		       ca		      dex
     38  f39c
     39  f39c							; Reflect
     40  f39c							;     lda #$ff
     41  f39c							;     sta REFP0
     42  f39c				   SkipMoveLeft
     43  f39c		       a9 80		      lda	#%10000000	;Right?
     44  f39e		       2c 80 02 	      bit	SWCHA
     45  f3a1		       d0 05		      bne	SkipMoveRight
     46  f3a3		       e0 80		      cpx	#128
     47  f3a5		       b0 01		      bcs	SkipMoveRight
     48  f3a7		       e8		      inx
     49  f3a8
     50  f3a8							; Reflect
     51  f3a8							;     lda #$0
     52  f3a8							;     sta REFP0
     53  f3a8				   SkipMoveRight
     54  f3a8		       86 86		      stx	XPos
     55  f3aa		       60		      rts
     56  f3ab
     57  f3ab
     58  f3ab				   SpeedCalculation
     59  f3ab		       38		      sec
     60  f3ac		       a5 88		      lda	Speed2
     61  f3ae		       e9 07		      sbc	#7
     62  f3b0		       85 88		      sta	Speed2
     63  f3b2		       a5 87		      lda	Speed1
     64  f3b4		       e9 00		      sbc	#0
     65  f3b6		       85 87		      sta	Speed1
     66  f3b8
     67  f3b8		       18		      clc
     68  f3b9		       a5 8a		      lda	YPos2
     69  f3bb		       65 88		      adc	Speed2
     70  f3bd		       85 8a		      sta	YPos2
     71  f3bf		       a5 89		      lda	YPos
     72  f3c1		       65 87		      adc	Speed1
     73  f3c3		       85 89		      sta	YPos
     74  f3c5
     75  f3c5		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f3c7		       b0 0a		      bcs	NewThing2
     77  f3c9
     78  f3c9							; Reset to floor
     79  f3c9		       a9 3e		      lda	#FLOOR_OFFSET
     80  f3cb		       85 89		      sta	YPos
     81  f3cd		       a9 00		      lda	#0
     82  f3cf		       85 87		      sta	Speed1
     83  f3d1		       85 88		      sta	Speed2
     84  f3d3				   NewThing2
     85  f3d3
     86  f3d3		       c9 be		      cmp	#CEILING_OFFSET
     87  f3d5		       90 0a		      bcc	.next
     88  f3d7
     89  f3d7							; Reset to ceiling
     90  f3d7		       a9 be		      lda	#CEILING_OFFSET
     91  f3d9		       85 89		      sta	YPos
     92  f3db		       a9 00		      lda	#0
     93  f3dd		       85 87		      sta	Speed1
     94  f3df		       85 88		      sta	Speed2
     95  f3e1				   .next
     96  f3e1		       60		      rts
     97  f3e2
     98  f3e2
     99  f3e2
    100  f3e2							; Subroutine
    101  f3e2				   SetHorizPos
    102  f3e2		       85 02		      sta	WSYNC	; start a new line
    103  f3e4		       24 00		      bit	0	; waste 3 cycles
    104  f3e6		       38		      sec		; set carry flag
    105  f3e7				   DivideLoop
    106  f3e7		       e9 0f		      sbc	#15	; subtract 15
    107  f3e9		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f3eb		       49 07		      eor	#7	; calculate fine offset
    109  f3ed		       0a		      asl
    110  f3ee		       0a		      asl
    111  f3ef		       0a		      asl
    112  f3f0		       0a		      asl
    113  f3f1		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f3f3		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f3f5		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f3f6					      include	"kernel_border.s"
      1  f3f6							; Visible Kernel
      2  f3f6
      3  f3f6				   KernelBorder subroutine
      4  f3f6		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f3f8
      6  f3f8							; First HMOVE
      7  f3f8		       85 2a		      sta	HMOVE
      8  f3fa
      9  f3fa							; Border top
     10  f3fa		       a9 00		      lda	#0
     11  f3fc		       85 08		      sta	COLUPF
     12  f3fe		       85 0e		      sta	PF1
     13  f400		       85 0f		      sta	PF2
     14  f402		       a9 02		      lda	#SIGNAL_LINE
     15  f404		       85 09		      sta	COLUBK
     16  f406
     17  f406					      REPEAT	6
     18  f406		       85 02		      sta	WSYNC
     17  f406					      REPEND
     18  f408		       85 02		      sta	WSYNC
     17  f408					      REPEND
     18  f40a		       85 02		      sta	WSYNC
     17  f40a					      REPEND
     18  f40c		       85 02		      sta	WSYNC
     17  f40c					      REPEND
     18  f40e		       85 02		      sta	WSYNC
     17  f40e					      REPEND
     18  f410		       85 02		      sta	WSYNC
     19  f412					      REPEND
     20  f412
     21  f412		       a9 00		      lda	#0
     22  f414		       85 09		      sta	COLUBK
     23  f416		       85 02		      sta	WSYNC
     24  f418
     25  f418							; Start top border
     26  f418				   border_top
     27  f418							; Make the playfield solid.
     28  f418		       a9 3f		      lda	#%00111111
     29  f41a		       85 0e		      sta	PF1
     30  f41c		       a9 ff		      lda	#%11111111
     31  f41e		       85 0f		      sta	PF2
     32  f420
     33  f420		       a9 42		      lda	#COL_BG
     34  f422		       a0 00		      ldy	#0
     35  f424
     36  f424							; X_XXXX_XX
     37  f424							; Commented lines removed to save on space.
     38  f424		       85 08		      sta	COLUPF
     39  f426		       85 02		      sta	WSYNC
     40  f428		       84 08		      sty	COLUPF
     41  f42a		       85 02		      sta	WSYNC
     42  f42c		       85 08		      sta	COLUPF
     43  f42e		       85 02		      sta	WSYNC
     44  f430							; sta COLUPF
     45  f430		       85 02		      sta	WSYNC
     46  f432							; sta COLUPF
     47  f432		       85 02		      sta	WSYNC
     48  f434		       84 08		      sty	COLUPF
     49  f436		       85 02		      sta	WSYNC
     50  f438		       85 08		      sta	COLUPF
     51  f43a
     52  f43a		       a2 ff		      ldx	#$ff
     53  f43c		       9a		      txs
     54  f43d							; Push jump table to the stack
      0  f43d					      ASSERT_RUNTIME	"sp == $ff"
      1  f43d				   .COND      SET	"sp == $ff"
 ASSERT: breakif { pc== $f43d  && !(  sp == $ff  ) }
      2  f43d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f43d							; final rts to return point of kernel
     57  f43d		       a9 f5		      lda	#>[row_after_kernel - 1]
     58  f43f		       48		      pha		; $ff
     59  f440		       a9 4f		      lda	#<[row_after_kernel - 1]	; exit gem kernel
     60  f442		       48		      pha		; $fe
     61  f443		       a9 00		      lda	#%0	; GRP0 B
     62  f445		       48		      pha		; $fd
     63  f446		       a9 10		      lda	#>[$1100 - 1]
     64  f448		       48		      pha		; $fc
     65  f449		       a9 ff		      lda	#<[$1100 - 1]	; repeat gem kernel once
     66  f44b		       48		      pha		; $fb
     67  f44c		       a9 00		      lda	#%0	; GRP0 A
     68  f44e		       48		      pha		; $fa
      0  f44f					      ASSERT_RUNTIME	"sp == $f9"
      1  f44f				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f44f  && !(  sp == $f9  ) }
      2  f44f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     70  f44f
     71  f44f		       85 02		      sta	WSYNC
     72  f451							; sta COLUPF
     73  f451
     74  f451				   PlayArea
     75  f451							; PF is now the playing area
      0  f451					      ASSERT_RUNTIME	"_scycles == #0"
      1  f451				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f451  && !(  _scycles == #0  ) }
      2  f451					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f451					      sleep	61
      1  f451				   .CYCLES    SET	61
      2  f451
      3  f451				  -	      IF	.CYCLES < 2
      4  f451				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f451				  -	      ERR
      6  f451					      ENDIF
      7  f451
      8  f451					      IF	.CYCLES & 1
      9  f451					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f451		       04 00		      nop	0
     11  f453				  -	      ELSE
     12  f453				  -	      bit	VSYNC
     13  f453					      ENDIF
     14  f453				   .CYCLES    SET	.CYCLES - 3
     15  f453					      ENDIF
     16  f453
     17  f453					      REPEAT	.CYCLES / 2
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     17  f456					      REPEND
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     17  f467					      REPEND
     18  f468		       ea		      nop
     17  f468					      REPEND
     18  f469		       ea		      nop
     17  f469					      REPEND
     18  f46a		       ea		      nop
     17  f46a					      REPEND
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     17  f46c					      REPEND
     18  f46d		       ea		      nop
     17  f46d					      REPEND
     18  f46e		       ea		      nop
     17  f46e					      REPEND
     18  f46f		       ea		      nop
     19  f470					      REPEND
     78  f470		       a9 00		      lda	#%00000000
     79  f472		       85 0d		      sta	PF0
     80  f474		       a9 20		      lda	#%00100000
     81  f476		       85 0e		      sta	PF1
     82  f478		       a9 00		      lda	#%00000000
     83  f47a		       85 0f		      sta	PF2
      0  f47c					      ASSERT_RUNTIME	"_scycles == #0"
      1  f47c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f47c  && !(  _scycles == #0  ) }
      2  f47c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f47c					      sleep	7
      1  f47c				   .CYCLES    SET	7
      2  f47c
      3  f47c				  -	      IF	.CYCLES < 2
      4  f47c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f47c				  -	      ERR
      6  f47c					      ENDIF
      7  f47c
      8  f47c					      IF	.CYCLES & 1
      9  f47c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f47c		       04 00		      nop	0
     11  f47e				  -	      ELSE
     12  f47e				  -	      bit	VSYNC
     13  f47e					      ENDIF
     14  f47e				   .CYCLES    SET	.CYCLES - 3
     15  f47e					      ENDIF
     16  f47e
     17  f47e					      REPEAT	.CYCLES / 2
     18  f47e		       ea		      nop
     17  f47e					      REPEND
     18  f47f		       ea		      nop
     19  f480					      REPEND
     86  f480		       4c b2 f4 	      jmp	row_start
     87  f483							; enter row on cycle 10.
     88  f483
     89  f483							; reset the background for bottom of playfield
     90  f483				   border_bottom
     91  f483							;sta WSYNC
     92  f483
     93  f483							; Form the bottom of the level frame.
     94  f483		       a9 3f		      lda	#%00111111
     95  f485		       85 0e		      sta	PF1
     96  f487		       a9 ff		      lda	#%11111111
     97  f489		       85 0f		      sta	PF2
     98  f48b
     99  f48b							; Clear all sprites.
    100  f48b		       a9 00		      lda	#0
    101  f48d		       85 1c		      sta	EMERALD_SP
    102  f48f		       85 1b		      sta	JET_SP
    103  f491		       85 1e		      sta	EMERALD_MI_ENABLE
    104  f493
    105  f493		       a9 42		      lda	#COL_BG
    106  f495		       a0 00		      ldy	#0
    107  f497		       85 02		      sta	WSYNC
    108  f499
    109  f499		       84 08		      sty	COLUPF
    110  f49b		       85 02		      sta	WSYNC
    111  f49d
    112  f49d		       85 08		      sta	COLUPF
    113  f49f		       85 02		      sta	WSYNC
    114  f4a1
    115  f4a1		       85 02		      sta	WSYNC
    116  f4a3
    117  f4a3		       85 02		      sta	WSYNC
    118  f4a5
    119  f4a5		       84 08		      sty	COLUPF
    120  f4a7		       85 02		      sta	WSYNC
    121  f4a9
    122  f4a9		       85 08		      sta	COLUPF
    123  f4ab		       85 02		      sta	WSYNC
    124  f4ad		       85 02		      sta	WSYNC
    125  f4af		       4c 34 f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4b2					      include	"kernel_row.s"
      1  f4b2							; Frame Start
      2  f4b2
      3  f4b2							; Macros for calculating sprite values (GRPx).
      4  f4b2
      5  f4b2							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4b2					      mac	kernel_load_player
      7  f4b2							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4b2					      dcp	SpriteEnd	; 5c
      9  f4b2					      ldy	#0	; 2c
     10  f4b2							; constant 6c:
     11  f4b2					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4b2					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4b2					      ldy	SpriteEnd
     14  f4b2							; 4c
     15  f4b2					      ldx	Frame0,Y
     16  f4b2					      endm
     17  f4b2
     18  f4b2							; mac jet_spritedata_calc
     19  f4b2							;
     20  f4b2							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4b2							; GRP0.
     22  f4b2					      mac	jet_spritedata_calc
     23  f4b2							; loader
     24  f4b2					      lda	#SPRITE_HEIGHT
     25  f4b2					      dcp	SpriteEnd
     26  f4b2					      ldy	SpriteEnd
     27  f4b2
     28  f4b2							; 4c
     29  f4b2							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4b2							; from Frame0 + Y must never cross a page boundary.
     31  f4b2					      lda	Frame0,Y
     32  f4b2							; 6c
     33  f4b2					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4b2					      .byte	$2c	; 4c / 0c
     35  f4b2					      sta	JET_SP	; 0c / 3c
     36  f4b2					      endm
     37  f4b2
     38  f4b2				   row_start
     39  f4b2
     40  f4b2							; [scanline 1]
     41  f4b2				   row_1
     42  f4b2							; Enter after scanline starts on row "9" and wraps
      0  f4b2					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4b2				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4b2  && !(  _scycles == #10  ) }
      2  f4b2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4b2
      0  f4b2					      jet_spritedata_calc
      1  f4b2
      2  f4b2		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4b4		       c7 85		      dcp	SpriteEnd
      4  f4b6		       a4 85		      ldy	SpriteEnd
      5  f4b8
      6  f4b8
      7  f4b8
      8  f4b8
      9  f4b8		       b9 00 f7 	      lda	Frame0,Y
     10  f4bb
     11  f4bb		       b0 01		      .byte.b	$b0, $01
     12  f4bd		       2c		      .byte.b	$2c
     13  f4be		       85 1b		      sta	JET_SP
     46  f4c0
     47  f4c0							; Nibble VM.
     48  f4c0		       a5 8f		      lda	KERNEL_TEMP_A
      0  f4c2					      NIBBLE_gem_kernel
      1  f4c2				   .if_1
      2  f4c2		       0a		      asl
      3  f4c3		       90 0f		      bcc	.else_1
      4  f4c5		       ae 7a f2 	      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 0]
      5  f4c8		       8e 05 f0 	      stx	[[KernelA_TEST - $100] + 0]
      6  f4cb		       ae 7b f2 	      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 1]
      7  f4ce		       8e 06 f0 	      stx	[[KernelA_TEST - $100] + 1]
      8  f4d1		       4c e0 f4 	      jmp	.endif_1
      9  f4d4				   .else_1
     10  f4d4		       ae 7c f2 	      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 0]
     11  f4d7		       8e 05 f0 	      stx	[[KernelA_TEST - $100] + 0]
     12  f4da		       ae 7d f2 	      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 1]
     13  f4dd		       8e 06 f0 	      stx	[[KernelA_TEST - $100] + 1]
     14  f4e0				   .endif_1
     50  f4e0		       85 02		      sta	WSYNC
     51  f4e2
     52  f4e2							; sleep 46
     53  f4e2							; ASSERT_RUNTIME "_scycles == #0"
     54  f4e2
     55  f4e2							; [scanline 2]
     56  f4e2				   row_2
      0  f4e2					      jet_spritedata_calc
      1  f4e2
      2  f4e2		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4e4		       c7 85		      dcp	SpriteEnd
      4  f4e6		       a4 85		      ldy	SpriteEnd
      5  f4e8
      6  f4e8
      7  f4e8
      8  f4e8
      9  f4e8		       b9 00 f7 	      lda	Frame0,Y
     10  f4eb
     11  f4eb		       b0 01		      .byte.b	$b0, $01
     12  f4ed		       2c		      .byte.b	$2c
     13  f4ee		       85 1b		      sta	JET_SP
     58  f4f0
     59  f4f0							; Black out playfield
     60  f4f0							; TODO This should be done with playfield pixels, not color.
     61  f4f0		       a9 00		      lda	#0
     62  f4f2		       85 08		      sta	COLUPF
     63  f4f4
     64  f4f4							; Idle.
      0  f4f4					      sleep	51
      1  f4f4				   .CYCLES    SET	51
      2  f4f4
      3  f4f4				  -	      IF	.CYCLES < 2
      4  f4f4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f4				  -	      ERR
      6  f4f4					      ENDIF
      7  f4f4
      8  f4f4					      IF	.CYCLES & 1
      9  f4f4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f4		       04 00		      nop	0
     11  f4f6				  -	      ELSE
     12  f4f6				  -	      bit	VSYNC
     13  f4f6					      ENDIF
     14  f4f6				   .CYCLES    SET	.CYCLES - 3
     15  f4f6					      ENDIF
     16  f4f6
     17  f4f6					      REPEAT	.CYCLES / 2
     18  f4f6		       ea		      nop
     17  f4f6					      REPEND
     18  f4f7		       ea		      nop
     17  f4f7					      REPEND
     18  f4f8		       ea		      nop
     17  f4f8					      REPEND
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     17  f4fc					      REPEND
     18  f4fd		       ea		      nop
     17  f4fd					      REPEND
     18  f4fe		       ea		      nop
     17  f4fe					      REPEND
     18  f4ff		       ea		      nop
     17  f4ff					      REPEND
     18  f500		       ea		      nop
     17  f500					      REPEND
     18  f501		       ea		      nop
     17  f501					      REPEND
     18  f502		       ea		      nop
     17  f502					      REPEND
     18  f503		       ea		      nop
     17  f503					      REPEND
     18  f504		       ea		      nop
     17  f504					      REPEND
     18  f505		       ea		      nop
     17  f505					      REPEND
     18  f506		       ea		      nop
     17  f506					      REPEND
     18  f507		       ea		      nop
     17  f507					      REPEND
     18  f508		       ea		      nop
     17  f508					      REPEND
     18  f509		       ea		      nop
     17  f509					      REPEND
     18  f50a		       ea		      nop
     17  f50a					      REPEND
     18  f50b		       ea		      nop
     17  f50b					      REPEND
     18  f50c		       ea		      nop
     17  f50c					      REPEND
     18  f50d		       ea		      nop
     19  f50e					      REPEND
      0  f50e					      ASSERT_RUNTIME	"_scycles == #0"
      1  f50e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f50e  && !(  _scycles == #0  ) }
      2  f50e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     67  f50e
     68  f50e							; [scanline 3]
     69  f50e				   row_3
      0  f50e					      jet_spritedata_calc
      1  f50e
      2  f50e		       a9 09		      lda	#SPRITE_HEIGHT
      3  f510		       c7 85		      dcp	SpriteEnd
      4  f512		       a4 85		      ldy	SpriteEnd
      5  f514
      6  f514
      7  f514
      8  f514
      9  f514		       b9 00 f7 	      lda	Frame0,Y
     10  f517
     11  f517		       b0 01		      .byte.b	$b0, $01
     12  f519		       2c		      .byte.b	$2c
     13  f51a		       85 1b		      sta	JET_SP
     71  f51c
     72  f51c							; Enable playfield
     73  f51c		       a9 42		      lda	#COL_BG
     74  f51e		       85 08		      sta	COLUPF
     75  f520
     76  f520							; Set stack pointer and populate graphics.
     77  f520		       a2 f9		      ldx	#$f9
     78  f522		       9a		      txs
     79  f523		       a9 09		      lda	#SPRITE_HEIGHT
      0  f525					      KERNEL_LOAD_PLAYER
      1  f525
      2  f525		       c7 85		      dcp	SpriteEnd
      3  f527		       a0 00		      ldy	#0
      4  f529
      5  f529		       b0 01		      .byte.b	$b0, $01
      6  f52b		       2c		      .byte.b	$2c
      7  f52c		       a4 85		      ldy	SpriteEnd
      8  f52e
      9  f52e		       be 00 f7 	      ldx	Frame0,Y
     81  f531		       86 fa		      stx	$fa
      0  f533					      KERNEL_LOAD_PLAYER
      1  f533
      2  f533		       c7 85		      dcp	SpriteEnd
      3  f535		       a0 00		      ldy	#0
      4  f537
      5  f537		       b0 01		      .byte.b	$b0, $01
      6  f539		       2c		      .byte.b	$2c
      7  f53a		       a4 85		      ldy	SpriteEnd
      8  f53c
      9  f53c		       be 00 f7 	      ldx	Frame0,Y
     83  f53f		       86 fd		      stx	$fd
     84  f541
     85  f541							; Jump immediately into scanlines 4-5: the gem kernel
      0  f541					      sleep	2
      1  f541				   .CYCLES    SET	2
      2  f541
      3  f541				  -	      IF	.CYCLES < 2
      4  f541				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f541				  -	      ERR
      6  f541					      ENDIF
      7  f541
      8  f541				  -	      IF	.CYCLES & 1
      9  f541				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f541				  -	      nop	0
     11  f541				  -	      ELSE
     12  f541				  -	      bit	VSYNC
     13  f541				  -	      ENDIF
     14  f541				  -.CYCLES    SET	.CYCLES - 3
     15  f541					      ENDIF
     16  f541
     17  f541					      REPEAT	.CYCLES / 2
     18  f541		       ea		      nop
     19  f542					      REPEND
      0  f542					      ASSERT_RUNTIME	"_scycles == #73"
      1  f542				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f542  && !(  _scycles == #73  ) }
      2  f542					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     88  f542		       4c 00 f1 	      jmp	RAMP_KERNEL_R
     89  f545
     90  f545							; [scanline 6]
     91  f545
     92  f545							; Try to avoid page crossing in jet_spritedata_calc
     93  f545							; TODO enforce this with ASSERT_RUNTIME instead?
     94  f550		       00 00 00 00*	      align	16
     95  f550
     96  f550				   row_after_kernel
     97  f550				   row_6
      0  f550					      ASSERT_RUNTIME	"_scycles == #0"
      1  f550				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f550  && !(  _scycles == #0  ) }
      2  f550					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     99  f550
    100  f550							; Cleanup from the kernel.
    101  f550		       a9 00		      lda	#0
    102  f552		       85 1e		      sta	EMERALD_MI_ENABLE
    103  f554		       85 1c		      sta	EMERALD_SP
    104  f556		       85 08		      sta	COLUPF
    105  f558
      0  f558					      jet_spritedata_calc
      1  f558
      2  f558		       a9 09		      lda	#SPRITE_HEIGHT
      3  f55a		       c7 85		      dcp	SpriteEnd
      4  f55c		       a4 85		      ldy	SpriteEnd
      5  f55e
      6  f55e
      7  f55e
      8  f55e
      9  f55e		       b9 00 f7 	      lda	Frame0,Y
     10  f561
     11  f561		       b0 01		      .byte.b	$b0, $01
     12  f563		       2c		      .byte.b	$2c
     13  f564		       85 1b		      sta	JET_SP
    107  f566
    108  f566							; Idle.
    109  f566		       85 02		      sta	WSYNC
    110  f568
    111  f568							; [scanline 7]
    112  f568				   row_7
      0  f568					      jet_spritedata_calc
      1  f568
      2  f568		       a9 09		      lda	#SPRITE_HEIGHT
      3  f56a		       c7 85		      dcp	SpriteEnd
      4  f56c		       a4 85		      ldy	SpriteEnd
      5  f56e
      6  f56e
      7  f56e
      8  f56e
      9  f56e		       b9 00 f7 	      lda	Frame0,Y
     10  f571
     11  f571		       b0 01		      .byte.b	$b0, $01
     12  f573		       2c		      .byte.b	$2c
     13  f574		       85 1b		      sta	JET_SP
    114  f576
    115  f576		       a9 42		      lda	#COL_BG
    116  f578		       85 08		      sta	COLUPF
    117  f57a
    118  f57a							; FRAMESWITCH
    119  f57a		       a9 01		      lda	#01
    120  f57c		       25 83		      and	FrameCount
    121  f57e		       d0 13		      bne	loadframe2
    122  f580
    123  f580							; Perform gem loading for Kernel A.
    124  f580
    125  f580				   loadframe1
      0  f580					      ASSERT_RUNTIME	"_scycles == #32"
      1  f580				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f580  && !(  _scycles == #32  ) }
      2  f580					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    127  f580
    128  f580							; Emerald byte setting 1A
    129  f580							; ldx #0
    130  f580							; lda KERNEL_STORAGE_R,X
    131  f580							; sta GEM_00_W
    132  f580							; inx
    133  f580							; lda KERNEL_STORAGE_R,X
    134  f580							; sta GEM_04_W
    135  f580							; inx
    136  f580							; lda KERNEL_STORAGE_R,X
    137  f580							; sta GEM_09_W
    138  f580							; inx
    139  f580
    140  f580		       85 02		      sta	WSYNC
    141  f582
    142  f582							; [scanline 8]
      0  f582					      jet_spritedata_calc
      1  f582
      2  f582		       a9 09		      lda	#SPRITE_HEIGHT
      3  f584		       c7 85		      dcp	SpriteEnd
      4  f586		       a4 85		      ldy	SpriteEnd
      5  f588
      6  f588
      7  f588
      8  f588
      9  f588		       b9 00 f7 	      lda	Frame0,Y
     10  f58b
     11  f58b		       b0 01		      .byte.b	$b0, $01
     12  f58d		       2c		      .byte.b	$2c
     13  f58e		       85 1b		      sta	JET_SP
    144  f590
    145  f590							; Emerald byte setting 1B
    146  f590							; lda KERNEL_STORAGE_R,X
    147  f590							; sta GEM_13_W
    148  f590							; inx
    149  f590							; lda KERNEL_STORAGE_R,X
    150  f590							; sta GEM_17_W
    151  f590							; inx
    152  f590							; lda KERNEL_STORAGE_R,X
    153  f590							; sta GEM_18_W
    154  f590							; inx
    155  f590							; lda KERNEL_STORAGE_R,X
    156  f590							; sta GEM_22_W
    157  f590
    158  f590		       4c a6 f5 	      jmp	row_8_end
    159  f593
    160  f593							; Perform gem loading for Kernel B.
    161  f593
    162  f593				   loadframe2
      0  f593					      ASSERT_RUNTIME	"_scycles == #33"
      1  f593				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f593  && !(  _scycles == #33  ) }
      2  f593					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    164  f593
    165  f593							; Emerald byte setting 2A
    166  f593							; ldx #[storage_02 - storage]
    167  f593							; lda KERNEL_STORAGE_R,X
    168  f593							; sta GEM_02_W
    169  f593							; inx
    170  f593							; lda KERNEL_STORAGE_R,X
    171  f593							; sta GEM_06_W
    172  f593							; inx
    173  f593							; lda KERNEL_STORAGE_R,X
    174  f593							; sta GEM_08_W
    175  f593							; inx
    176  f593
    177  f593		       85 02		      sta	WSYNC
    178  f595
    179  f595							; [scanline 8]
    180  f595				   row_8
      0  f595					      jet_spritedata_calc
      1  f595
      2  f595		       a9 09		      lda	#SPRITE_HEIGHT
      3  f597		       c7 85		      dcp	SpriteEnd
      4  f599		       a4 85		      ldy	SpriteEnd
      5  f59b
      6  f59b
      7  f59b
      8  f59b
      9  f59b		       b9 00 f7 	      lda	Frame0,Y
     10  f59e
     11  f59e		       b0 01		      .byte.b	$b0, $01
     12  f5a0		       2c		      .byte.b	$2c
     13  f5a1		       85 1b		      sta	JET_SP
    182  f5a3
    183  f5a3							; Emerald byte setting 2B
    184  f5a3							; lda KERNEL_STORAGE_R,X
    185  f5a3							; sta GEM_11_W
    186  f5a3							; inx
    187  f5a3							; lda KERNEL_STORAGE_R,X
    188  f5a3							; sta GEM_15_W
    189  f5a3							; inx
    190  f5a3							; lda KERNEL_STORAGE_R,X
    191  f5a3							; sta GEM_20_W
    192  f5a3							; inx
    193  f5a3							; lda KERNEL_STORAGE_R,X
    194  f5a3							; sta GEM_24_W
    195  f5a3
    196  f5a3		       4c a6 f5 	      jmp	row_8_end
    197  f5a6
    198  f5a6							; Common row 8 return.
    199  f5a6
    200  f5a6				   row_8_end
    201  f5a6							; Idle.
    202  f5a6		       85 02		      sta	WSYNC
    203  f5a8
    204  f5a8							; [scanline 8]
    205  f5a8							; Repeat loop until LoopCount < 0
    206  f5a8		       c6 82		      dec	LoopCount
    207  f5aa		       30 03		      bmi	row_end
    208  f5ac		       4c b2 f4 	      jmp	row_start
    209  f5af				   row_end
    210  f5af		       4c 83 f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f5b2					      include	"kernel_gem.s"
      1  f5b2							;
      2  f5b2							; Gem Kernels
      3  f5b2							;
      4  f5b2							; Gems are displayed in alternating kernels. This chart shows
      5  f5b2							; which kernel is responsible for which gem, with missiles denoted.
      6  f5b2							;
      7  f5b2							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f5b2							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f5b2							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f5b2							;  #	 0^	 8^	  17^	    26^       gem index
     11  f5b2							;
     12  f5b2							; The middle bar indicates where the pattern reverses.
     13  f5b2							;
     14  f5b2							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f5b2							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f5b2							; requires with a single sprite. By alternating sprites each frame with an...
     17  f5b2							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f5b2							; line, except for two. These are instead rendered by the missile, which
     19  f5b2							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f5b2
     21  f5b2							; for copying
     22  f600		       00 00 00 00*	      align	256
     23  f600
     24  f600							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f600							;
     26  f600							; GEM KERNEL A
     27  f600							;
     28  f600
     29  f600				   kernel_1_start subroutine
     30  f600					      rorg	$f100
     31  f600
     32  f600				   Kernel1    subroutine
      0  f600					      ASSERT_RUNTIME	"sp == $f9"
      1  f600				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f600					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     34  f600
     35  f600							; this sleep first make this distinct from Kernel B in debugger, lol
      0  f600					      sleep	3
      1  f600				   .CYCLES    SET	3
      2  f600
      3  f600				  -	      IF	.CYCLES < 2
      4  f600				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f600				  -	      ERR
      6  f600					      ENDIF
      7  f600
      8  f600					      IF	.CYCLES & 1
      9  f600					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f600		       04 00		      nop	0
     11  f602				  -	      ELSE
     12  f602				  -	      bit	VSYNC
     13  f602					      ENDIF
     14  f602				   .CYCLES    SET	.CYCLES - 3
     15  f602					      ENDIF
     16  f602
     17  f602				  -	      REPEAT	.CYCLES / 2
     18  f602				  -	      nop
     19  f602					      REPEND
     37  f602
     38  f602							; Load next Player sprite
     39  f602		       68		      pla
     40  f603		       85 1b		      sta	GRP0
     41  f605
     42  f605				   KernelA_TEST
     43  f605		       a9 60		      lda	#%01100000
     44  f607		       a2 06		      ldx	#%00000110
     45  f609		       a0 66		      ldy	#%01100110
     46  f60b
     47  f60b		       85 1e		      sta	EMERALD_MI_ENABLE	;disable
     48  f60d
     49  f60d		       85 1c		      sta	EMERALD_SP
     50  f60f
     51  f60f							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f60f					      ASSERT_RUNTIME	"_scycles == #22"
      1  f60f				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f10f  && !(  _scycles == #22  ) }
      2  f60f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f60f				   KernelA_A
     54  f60f		       86 11		      stx	EMERALD_SP_RESET
     55  f611				   KernelA_B
      0  f611					      sleep	3
      1  f611				   .CYCLES    SET	3
      2  f611
      3  f611				  -	      IF	.CYCLES < 2
      4  f611				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f611				  -	      ERR
      6  f611					      ENDIF
      7  f611
      8  f611					      IF	.CYCLES & 1
      9  f611					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f611		       04 00		      nop	0
     11  f613				  -	      ELSE
     12  f613				  -	      bit	VSYNC
     13  f613					      ENDIF
     14  f613				   .CYCLES    SET	.CYCLES - 3
     15  f613					      ENDIF
     16  f613
     17  f613				  -	      REPEAT	.CYCLES / 2
     18  f613				  -	      nop
     19  f613					      REPEND
     57  f613				   KernelA_C
      0  f613					      sleep	3
      1  f613				   .CYCLES    SET	3
      2  f613
      3  f613				  -	      IF	.CYCLES < 2
      4  f613				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f613				  -	      ERR
      6  f613					      ENDIF
      7  f613
      8  f613					      IF	.CYCLES & 1
      9  f613					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f613		       04 00		      nop	0
     11  f615				  -	      ELSE
     12  f615				  -	      bit	VSYNC
     13  f615					      ENDIF
     14  f615				   .CYCLES    SET	.CYCLES - 3
     15  f615					      ENDIF
     16  f615
     17  f615				  -	      REPEAT	.CYCLES / 2
     18  f615				  -	      nop
     19  f615					      REPEND
     59  f615				   KernelA_D
     60  f615		       84 1c		      sty	EMERALD_SP
     61  f617				   KernelA_E
      0  f617					      sleep	3
      1  f617				   .CYCLES    SET	3
      2  f617
      3  f617				  -	      IF	.CYCLES < 2
      4  f617				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f617				  -	      ERR
      6  f617					      ENDIF
      7  f617
      8  f617					      IF	.CYCLES & 1
      9  f617					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f617		       04 00		      nop	0
     11  f619				  -	      ELSE
     12  f619				  -	      bit	VSYNC
     13  f619					      ENDIF
     14  f619				   .CYCLES    SET	.CYCLES - 3
     15  f619					      ENDIF
     16  f619
     17  f619				  -	      REPEAT	.CYCLES / 2
     18  f619				  -	      nop
     19  f619					      REPEND
     63  f619				   KernelA_F
     64  f619		       86 1e		      stx	EMERALD_MI_ENABLE
     65  f61b				   KernelA_G
     66  f61b		       86 11		      stx	EMERALD_SP_RESET
     67  f61d				   KernelA_H
     68  f61d		       84 1c		      sty	EMERALD_SP
     69  f61f				   KernelA_I
     70  f61f		       86 11		      stx	EMERALD_SP_RESET
     71  f621				   KernelA_J
      0  f621					      sleep	3	; PF1
      1  f621				   .CYCLES    SET	3
      2  f621
      3  f621				  -	      IF	.CYCLES < 2
      4  f621				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f621				  -	      ERR
      6  f621					      ENDIF
      7  f621
      8  f621					      IF	.CYCLES & 1
      9  f621					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f621		       04 00		      nop	0
     11  f623				  -	      ELSE
     12  f623				  -	      bit	VSYNC
     13  f623					      ENDIF
     14  f623				   .CYCLES    SET	.CYCLES - 3
     15  f623					      ENDIF
     16  f623
     17  f623				  -	      REPEAT	.CYCLES / 2
     18  f623				  -	      nop
     19  f623					      REPEND
     73  f623				   KernelA_K
     74  f623		       84 1c		      sty	EMERALD_SP
     75  f625				   KernelA_L
      0  f625					      sleep	3
      1  f625				   .CYCLES    SET	3
      2  f625
      3  f625				  -	      IF	.CYCLES < 2
      4  f625				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f625				  -	      ERR
      6  f625					      ENDIF
      7  f625
      8  f625					      IF	.CYCLES & 1
      9  f625					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f625		       04 00		      nop	0
     11  f627				  -	      ELSE
     12  f627				  -	      bit	VSYNC
     13  f627					      ENDIF
     14  f627				   .CYCLES    SET	.CYCLES - 3
     15  f627					      ENDIF
     16  f627
     17  f627				  -	      REPEAT	.CYCLES / 2
     18  f627				  -	      nop
     19  f627					      REPEND
     77  f627				   KernelA_M
     78  f627		       84 1c		      sty	EMERALD_SP
     79  f629				   KernelA_N
      0  f629					      sleep	3
      1  f629				   .CYCLES    SET	3
      2  f629
      3  f629				  -	      IF	.CYCLES < 2
      4  f629				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f629				  -	      ERR
      6  f629					      ENDIF
      7  f629
      8  f629					      IF	.CYCLES & 1
      9  f629					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f629		       04 00		      nop	0
     11  f62b				  -	      ELSE
     12  f62b				  -	      bit	VSYNC
     13  f62b					      ENDIF
     14  f62b				   .CYCLES    SET	.CYCLES - 3
     15  f62b					      ENDIF
     16  f62b
     17  f62b				  -	      REPEAT	.CYCLES / 2
     18  f62b				  -	      nop
     19  f62b					      REPEND
     81  f62b				   KernelA_O
      0  f62b					      sleep	3
      1  f62b				   .CYCLES    SET	3
      2  f62b
      3  f62b				  -	      IF	.CYCLES < 2
      4  f62b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62b				  -	      ERR
      6  f62b					      ENDIF
      7  f62b
      8  f62b					      IF	.CYCLES & 1
      9  f62b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62b		       04 00		      nop	0
     11  f62d				  -	      ELSE
     12  f62d				  -	      bit	VSYNC
     13  f62d					      ENDIF
     14  f62d				   .CYCLES    SET	.CYCLES - 3
     15  f62d					      ENDIF
     16  f62d
     17  f62d				  -	      REPEAT	.CYCLES / 2
     18  f62d				  -	      nop
     19  f62d					      REPEND
     83  f62d				   KernelA_P
      0  f62d					      sleep	3
      1  f62d				   .CYCLES    SET	3
      2  f62d
      3  f62d				  -	      IF	.CYCLES < 2
      4  f62d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62d				  -	      ERR
      6  f62d					      ENDIF
      7  f62d
      8  f62d					      IF	.CYCLES & 1
      9  f62d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62d		       04 00		      nop	0
     11  f62f				  -	      ELSE
     12  f62f				  -	      bit	VSYNC
     13  f62f					      ENDIF
     14  f62f				   .CYCLES    SET	.CYCLES - 3
     15  f62f					      ENDIF
     16  f62f
     17  f62f				  -	      REPEAT	.CYCLES / 2
     18  f62f				  -	      nop
     19  f62f					      REPEND
     85  f62f
     86  f62f							; 6c
      0  f62f					      ASSERT_RUNTIME	"_scycles == #70"
      1  f62f				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12f  && !(  _scycles == #70  ) }
      2  f62f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     88  f62f		       60		      rts
     89  f630
     90  f630					      rend
     91  f630				   kernel_1_end
      0  f630					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f630				   .STARTA    SET	kernel_1_start
      2  f630				   .ENDA      SET	kernel_1_end
      3  f630				   .LEN       SET	$40
      4  f630				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f630				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f630				  -	      err
      7  f630					      endif
     93  f630
     94  f630							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     95  f630							;
     96  f630							; GEM KERNEL B
     97  f630							;
     98  f630
     99  f630				   kernel_2_start subroutine
    100  f630					      rorg	$f100
    101  f630
    102  f630				   Kernel2    subroutine
      0  f630					      ASSERT_RUNTIME	"sp == $f9"
      1  f630				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f630					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f630							; Assert: M1 is at position #61
    105  f630
    106  f630							; don't sleep first to make this distinct from Kernel A in debugger, lol
    107  f630
    108  f630							; Load next Player sprite
    109  f630		       68		      pla
    110  f631		       85 1b		      sta	GRP0
    111  f633
      0  f633					      sleep	4
      1  f633				   .CYCLES    SET	4
      2  f633
      3  f633				  -	      IF	.CYCLES < 2
      4  f633				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f633				  -	      ERR
      6  f633					      ENDIF
      7  f633
      8  f633				  -	      IF	.CYCLES & 1
      9  f633				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f633				  -	      nop	0
     11  f633				  -	      ELSE
     12  f633				  -	      bit	VSYNC
     13  f633				  -	      ENDIF
     14  f633				  -.CYCLES    SET	.CYCLES - 3
     15  f633					      ENDIF
     16  f633
     17  f633					      REPEAT	.CYCLES / 2
     18  f633		       ea		      nop
     17  f633					      REPEND
     18  f634		       ea		      nop
     19  f635					      REPEND
    113  f635
    114  f635
    115  f635		       a2 0c		      ldx	#%00001100
    116  f637		       a0 cc		      ldy	#%11001100
    117  f639
    118  f639		       a9 02		      lda	#02
    119  f63b		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable missile
    120  f63d
    121  f63d		       a9 c0		      lda	#%11000000
    122  f63f		       84 1c		      sty	EMERALD_SP
    123  f641
    124  f641							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f641					      ASSERT_RUNTIME	"_scycles == #25"
      1  f641				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f111  && !(  _scycles == #25  ) }
      2  f641					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    126  f641				   KernelB_A
    127  f641		       85 11		      sta	EMERALD_SP_RESET
    128  f643				   KernelB_B
      0  f643					      sleep	3
      1  f643				   .CYCLES    SET	3
      2  f643
      3  f643				  -	      IF	.CYCLES < 2
      4  f643				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f643				  -	      ERR
      6  f643					      ENDIF
      7  f643
      8  f643					      IF	.CYCLES & 1
      9  f643					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f643		       04 00		      nop	0
     11  f645				  -	      ELSE
     12  f645				  -	      bit	VSYNC
     13  f645					      ENDIF
     14  f645				   .CYCLES    SET	.CYCLES - 3
     15  f645					      ENDIF
     16  f645
     17  f645				  -	      REPEAT	.CYCLES / 2
     18  f645				  -	      nop
     19  f645					      REPEND
    130  f645				   KernelB_C
      0  f645					      sleep	3
      1  f645				   .CYCLES    SET	3
      2  f645
      3  f645				  -	      IF	.CYCLES < 2
      4  f645				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f645				  -	      ERR
      6  f645					      ENDIF
      7  f645
      8  f645					      IF	.CYCLES & 1
      9  f645					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f645		       04 00		      nop	0
     11  f647				  -	      ELSE
     12  f647				  -	      bit	VSYNC
     13  f647					      ENDIF
     14  f647				   .CYCLES    SET	.CYCLES - 3
     15  f647					      ENDIF
     16  f647
     17  f647				  -	      REPEAT	.CYCLES / 2
     18  f647				  -	      nop
     19  f647					      REPEND
    132  f647				   KernelB_D
    133  f647		       84 1c		      sty	EMERALD_SP
    134  f649				   KernelB_E
    135  f649		       85 11		      sta	EMERALD_SP_RESET
    136  f64b				   KernelB_F
    137  f64b		       84 1c		      sty	EMERALD_SP
    138  f64d				   KernelB_G		; PF1
      0  f64d					      sleep	3
      1  f64d				   .CYCLES    SET	3
      2  f64d
      3  f64d				  -	      IF	.CYCLES < 2
      4  f64d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64d				  -	      ERR
      6  f64d					      ENDIF
      7  f64d
      8  f64d					      IF	.CYCLES & 1
      9  f64d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64d		       04 00		      nop	0
     11  f64f				  -	      ELSE
     12  f64f				  -	      bit	VSYNC
     13  f64f					      ENDIF
     14  f64f				   .CYCLES    SET	.CYCLES - 3
     15  f64f					      ENDIF
     16  f64f
     17  f64f				  -	      REPEAT	.CYCLES / 2
     18  f64f				  -	      nop
     19  f64f					      REPEND
    140  f64f				   KernelB_H
    141  f64f		       84 1c		      sty	EMERALD_SP
    142  f651				   KernelB_I
    143  f651		       85 11		      sta	EMERALD_SP_RESET
    144  f653				   KernelB_J
    145  f653		       84 1c		      sty	EMERALD_SP
    146  f655				   KernelB_K
    147  f655		       85 1e		      sta	EMERALD_MI_ENABLE
    148  f657				   KernelB_L
    149  f657		       84 1c		      sty	EMERALD_SP
    150  f659				   KernelB_M
      0  f659					      sleep	3
      1  f659				   .CYCLES    SET	3
      2  f659
      3  f659				  -	      IF	.CYCLES < 2
      4  f659				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f659				  -	      ERR
      6  f659					      ENDIF
      7  f659
      8  f659					      IF	.CYCLES & 1
      9  f659					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f659		       04 00		      nop	0
     11  f65b				  -	      ELSE
     12  f65b				  -	      bit	VSYNC
     13  f65b					      ENDIF
     14  f65b				   .CYCLES    SET	.CYCLES - 3
     15  f65b					      ENDIF
     16  f65b
     17  f65b				  -	      REPEAT	.CYCLES / 2
     18  f65b				  -	      nop
     19  f65b					      REPEND
    152  f65b				   KernelB_N
      0  f65b					      sleep	3
      1  f65b				   .CYCLES    SET	3
      2  f65b
      3  f65b				  -	      IF	.CYCLES < 2
      4  f65b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65b				  -	      ERR
      6  f65b					      ENDIF
      7  f65b
      8  f65b					      IF	.CYCLES & 1
      9  f65b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65b		       04 00		      nop	0
     11  f65d				  -	      ELSE
     12  f65d				  -	      bit	VSYNC
     13  f65d					      ENDIF
     14  f65d				   .CYCLES    SET	.CYCLES - 3
     15  f65d					      ENDIF
     16  f65d
     17  f65d				  -	      REPEAT	.CYCLES / 2
     18  f65d				  -	      nop
     19  f65d					      REPEND
    154  f65d				   KernelB_O
      0  f65d					      sleep	3
      1  f65d				   .CYCLES    SET	3
      2  f65d
      3  f65d				  -	      IF	.CYCLES < 2
      4  f65d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65d				  -	      ERR
      6  f65d					      ENDIF
      7  f65d
      8  f65d					      IF	.CYCLES & 1
      9  f65d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65d		       04 00		      nop	0
     11  f65f				  -	      ELSE
     12  f65f				  -	      bit	VSYNC
     13  f65f					      ENDIF
     14  f65f				   .CYCLES    SET	.CYCLES - 3
     15  f65f					      ENDIF
     16  f65f
     17  f65f				  -	      REPEAT	.CYCLES / 2
     18  f65f				  -	      nop
     19  f65f					      REPEND
    156  f65f
    157  f65f							; 6c
      0  f65f					      ASSERT_RUNTIME	"_scycles == #70"
      1  f65f				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12f  && !(  _scycles == #70  ) }
      2  f65f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    159  f65f		       60		      rts
    160  f660
    161  f660					      rend
    162  f660				   kernel_2_end
      0  f660					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f660				   .STARTA    SET	kernel_2_start
      2  f660				   .ENDA      SET	kernel_2_end
      3  f660				   .LEN       SET	$40
      4  f660				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f660				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f660				  -	      err
      7  f660					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f660					      include	"data_sprites.s"
      1  f700		       00 00 00 00*	      align	256
      2  f700
      3  f700							; Player
      4  f700				   Frame0
      5  f700		       00		      .byte.b	#%00000000
      6  f701		       60		      .byte.b	#%01100000
      7  f702		       60		      .byte.b	#%01100000
      8  f703		       60		      .byte.b	#%01100000
      9  f704		       c0		      .byte.b	#%11000000
     10  f705		       c0		      .byte.b	#%11000000
     11  f706		       f0		      .byte.b	#%11110000
     12  f707		       c0		      .byte.b	#%11000000
     13  f708		       c0		      .byte.b	#%11000000
     14  f709		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f70a					      include	"data_levels.s"
      1  f710		       00 00 00 00*	      align	8
      2  f710							; first bit of byte 2 & 3 are unused for simplicity
      3  f710
      4  f710				   level_00
      5  f710		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f714
      7  f714				   level_01
      8  f714		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f718		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f71c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f720		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f724		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f728		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f72c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f730		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f734		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f738		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f73c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f740		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f744		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f748		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f74c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f750		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f754		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f758		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f75c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f760		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f764		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f768		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f76c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f770		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f774		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f778		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f77c				   level_01_end
------- FILE main.s
     99  f77c
    100  fffc					      org	$fffc
    101  fffc		       09 f2		      .word.w	Start
    102  fffe		       09 f2		      .word.w	Start
