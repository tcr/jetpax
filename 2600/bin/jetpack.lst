------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Stella assertions for "make debug"
      4  10000 ????				       mac	assert_runtime
      5  10000 ????			    .COND      SET	{1}
      6  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      7  10000 ????				       endm
      8  10000 ????
      9  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     13  0000 ????
     14  0000 ????						; RAM and constants
------- FILE vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"vars.s"
      1 U0090 ????				      seg.u	Variables
      2 U0090 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   KERNEL_TEMP_A byte.b
     31 U0090
     32 U0090							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     33 U0090
     34 U0090		       00 10	   ROW_COUNT  =	16
     35 U0090
     36 U0090		       00 02	   SIGNAL_LINE =	$02
     37 U0090
     38 U0090							; Memory map
     39 U0090
     40 U0090		       f1 00	   KERNEL_START =	$f100
     41 U0090		       f0 40	   KERNEL_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     42 U0090		       f1 40	   KERNEL_STORAGE_R =	$f140
     43 U0090
     44 U0090							; NUSIZ values
     45 U0090
     46 U0090		       00 13	   THREE_COPIES =	%00010011
     47 U0090
     48 U0090							; Colors
     49 U0090
     50 U0090		       00 42	   COL_BG     equ	$42
     51 U0090		       00 cc	   COL_EMERALD equ	$CC
     52 U0090		       00 cc	   COL_EMERALD_2 equ	$CC
     53 U0090
     54 U0090							; HMOVE values for missiles
     55 U0090
     56 U0090		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     57 U0090		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     58 U0090
     59 U0090		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     60 U0090		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     61 U0090
     62 U0090							; Sprite details
     63 U0090
     64 U0090		       00 09	   SPRITE_HEIGHT equ	9
     65 U0090
     66 U0090		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     67 U0090		       00 1c	   EMERALD_SP equ	GRP1
     68 U0090		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     69 U0090		       00 11	   EMERALD_SP_RESET equ	RESP1
     70 U0090		       00 13	   EMERALD_MI_RESET equ	RESM1
     71 U0090		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     72 U0090		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     73 U0090		       00 05	   EMERALD_COPIES equ	NUSIZ1
     74 U0090
     75 U0090		       00 1b	   JET_SP     equ	GRP0
     76 U0090		       00 10	   JET_SP_RESET equ	RESP0
     77 U0090		       00 20	   JET_SP_HMOVE equ	HMP0
     78 U0090		       00 06	   JET_SP_COLOR equ	COLUP0
     79 U0090
     80 U0090							; Spriteend is HEIGHT_OFFSET - YPos
     81 U0090		       00 c8	   HEIGHT_OFFSET equ	200
     82 U0090
     83 U0090							; Compared with YPos
     84 U0090		       00 3e	   FLOOR_OFFSET equ	62
     85 U0090		       00 be	   CEILING_OFFSET equ	190
     86 U0090
     87 U0090							; Starting player position
     88 U0090		       00 3e	   YPosStart  equ	62
     89 U0090		       00 37	   XPosStart  equ	55
     90 U0090
     91 U0090							; Top left corner
     92 U0090							; YPosStart equ 190
     93 U0090							; XPosStart equ 28
     94 U0090
     95 U0090							; Tick (every 8 frames)
     96 U0090		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     16 U0090
     17 U0090							; Bank 1
     18  e000 ????				      seg	CodeBank1
     19  d000					      org	$D000
     20  d000					      rorg	$F000
     21  d000		       00	   BANK1      byte.b
     22  d200					      org	$d200
     23  d200					      rorg	$d200
     24  d200				   Bank1Start
     25  d200		       ad fa ff 	      lda	$fffa
     26  d203		       ea		      nop
     27  d204		       ea		      nop
     28  d205		       ea		      nop
     29  d206
     30  dffc					      org	$dffc
     31  dffc					      rorg	$fffc
     32  dffc		       00 d2		      .word.w	Bank1Start
     33  dffe		       00 d2		      .word.w	Bank1Start
     34  e000
     35  e000							; Bank 2
     36  f000 ????				      seg	CodeBank2
     37  e000					      org	$E000
     38  e000					      rorg	$F000
     39  e000		       00	   BANK2      byte.b
     40  e200					      org	$e200
     41  e200					      rorg	$f200
     42  e200				   Bank2Start
     43  e200		       ad fa ff 	      lda	$fffa
     44  e203		       ea		      nop
     45  e204		       ea		      nop
     46  e205		       ea		      nop
     47  e206
     48  effc					      org	$effc
     49  effc					      rorg	$fffc
     50  effc		       00 f2		      .word.w	Bank2Start
     51  effe		       00 f2		      .word.w	Bank2Start
     52  f000
     53  f000							; Bank 3
     54  10000 ????				       seg	CodeBank3
     55  f000					      org	$F000
     56  f000					      rorg	$F000
     57  f000		       00	   BANK3      byte.b
     58  f200					      org	$f200
     59  f200					      rorg	$f200
     60  f200				   Bank3Start
     61  f200		       ad fa ff 	      lda	$fffa
     62  f203		       ea		      nop
     63  f204		       ea		      nop
     64  f205		       ea		      nop
     65  f206		       4c 09 f2 	      jmp	Start
     66  f209
     67  f209							; Bank 3 source code
------- FILE init.s LEVEL 2 PASS 2
      0  f209					      include	"init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209					      mac	nibble_start_kernel
      4  f209					      endm
      5  f209					      mac	nibble_if
      6  f209					      ror
      7  f209					      endm
      8  f209					      mac	nibble_write
      9  f209					      endm
     10  f209					      mac	nibble_write_opcode
     11  f209					      endm
     12  f209					      mac	nibble_else
     13  f209					      endm
     14  f209					      mac	nibble_end_if
     15  f209					      endm
     16  f209					      mac	nibble_end_kernel
     17  f209					      endm
     18  f209
     19  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
     21  f214
     22  f214							; just testing stuff
     23  f214
      0  f214					      NIBBLE_START_KERNEL	gem_kernel, 40
     25  f214		       a5 80		      lda	$80
     26  f216		       c9 66		      cmp	#%01100110
      0  f218					      NIBBLE_IF	cs
      1  f218		       6a		      ror
     28  f219		       c9 60		      cmp	#%01100000
      0  f21b					      NIBBLE_IF	cs
      1  f21b		       6a		      ror
      0  f21c					      NIBBLE_WRITE	.gem_ldx, #%11001100	; write value to mem location
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_08, 2, lda #02	; write *opcode* to mem location
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_09, 2, sleep 3
      0  f21c					      NIBBLE_ELSE
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_08, 2, sta VDELP1
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_09, 2, sta RESP1
      0  f21c					      NIBBLE_END_IF
      0  f21c					      NIBBLE_ELSE
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_08, 2, sleep 3
      0  f21c					      NIBBLE_WRITE_OPCODE	.gem_09, 2, sleep 3
      0  f21c					      NIBBLE_END_IF
      0  f21c					      NIBBLE_END_KERNEL
     42  f21c
     43  f21c				   InitSetup
     44  f21c		       a9 00		      lda	#0
     45  f21e		       85 83		      sta	FrameCount
     46  f220
     47  f220							; P0 has three copies
     48  f220		       a9 13		      lda	#%00010011
     49  f222		       85 05		      sta	EMERALD_COPIES
     50  f224
     51  f224		       a9 00		      lda	#$00
     52  f226		       85 09		      sta	COLUBK
     53  f228		       a9 01		      lda	#%00000001
     54  f22a		       85 0a		      sta	CTRLPF	; reflect playfield
     55  f22c
     56  f22c							; Disable VDEL
     57  f22c		       a9 00		      lda	#0
     58  f22e		       85 25		      sta	VDELP0
     59  f230		       85 26		      sta	VDELP1
     60  f232
     61  f232
     62  f232							; Player 0
     63  f232		       a2 cc		      ldx	#COL_EMERALD
     64  f234		       86 07		      stx	EMERALD_SP_COLOR
     65  f236
     66  f236							; Player 1
     67  f236		       a9 0f		      lda	#$0f
     68  f238		       85 06		      sta	JET_SP_COLOR
     69  f23a		       a9 00		      lda	#$00
     70  f23c		       85 1b		      sta	JET_SP
     71  f23e
     72  f23e							; Positions
     73  f23e		       a9 3e		      lda	#YPosStart
     74  f240		       85 89		      sta	YPos
     75  f242		       a9 37		      lda	#XPosStart
     76  f244		       85 86		      sta	XPos
     77  f246		       a9 00		      lda	#0
     78  f248		       85 87		      sta	Speed1
     79  f24a		       85 88		      sta	Speed2
     80  f24c		       85 8a		      sta	YPos2
     81  f24e
     82  f24e		       a9 00		      lda	#0
     83  f250		       85 8e		      sta	ROW_DEMO_INDEX
     84  f252
     85  f252							; Start with vertical sync (to reset frame)
     86  f252		       4c 82 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE loader.s LEVEL 2 PASS 2
      0  f255					      include	"loader.s"
      1  f255							; Copies the gem kernel to RAM
      2  f255
      3  f255				   CopyFrame  subroutine
      4  f255							; FRAMESWITCH
      5  f255		       a9 01		      lda	#01
      6  f257		       25 83		      and	FrameCount
      7  f259		       f0 03		      beq	CopyFrame1Kernel
      8  f25b		       4c 70 f2 	      jmp	CopyFrame2Kernel
      9  f25e
     10  f25e							; Copy: KERNEL 1
     11  f25e				   CopyFrame1Kernel subroutine
     12  f25e		       a0 2f		      ldy	#(kernel_1_end - kernel_1_start)-1
     13  f260				   .loop
     14  f260		       b9 00 f6 	      lda	kernel_1_start,Y
     15  f263		       99 00 10 	      sta	$1000,Y
     16  f266		       88		      dey
     17  f267		       d0 f7		      bne	.loop
     18  f269		       ad 00 f6 	      lda	kernel_1_start
     19  f26c		       8d 00 10 	      sta	$1000
     20  f26f		       60		      rts
     21  f270
     22  f270							; Copy: KERNEL 2
     23  f270				   CopyFrame2Kernel subroutine
     24  f270		       a0 2f		      ldy	#(kernel_2_end - kernel_2_start)-1
     25  f272				   .loop
     26  f272		       b9 30 f6 	      lda	kernel_2_start,Y
     27  f275		       99 00 10 	      sta	$1000,Y
     28  f278		       88		      dey
     29  f279		       d0 f7		      bne	.loop
     30  f27b		       ad 30 f6 	      lda	kernel_2_start
     31  f27e		       8d 00 10 	      sta	$1000
     32  f281		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f282					      include	"nibble.s"
------- FILE main.s
------- FILE frame.s LEVEL 2 PASS 2
      0  f282					      include	"frame.s"
      1  f282							; Frame loop, including calling out to other kernels.
      2  f282
      3  f282							; Vertical Sync
      4  f282				   VerticalSync subroutine
      0  f282					      VERTICAL_SYNC
      1  f282		       a9 0e		      lda	#%1110
      2  f284		       85 02	   .VSLP1     sta	WSYNC
      3  f286		       85 00		      sta	VSYNC
      4  f288		       4a		      lsr
      5  f289		       d0 f9		      bne	.VSLP1
      6  f28b
      7  f28b				   FrameStart subroutine
      0  f28b					      ASSERT_RUNTIME	"_scan == #0"
      1  f28b				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f28b  && !(  _scan == #0  ) }
      2  f28b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f28b
     10  f28b				   VerticalBlank subroutine
      0  f28b					      TIMER_SETUP	37
      1  f28b				   .lines     SET	37
      2  f28b		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f28d		       85 02		      sta	WSYNC
      4  f28f		       8d 96 02 	      sta	TIM64T
     12  f292
     13  f292							; Scanline counter
     14  f292		       a9 10		      lda	#ROW_COUNT
     15  f294		       85 82		      sta	LoopCount
     16  f296
     17  f296							; Frame counter
     18  f296		       e6 83		      inc	FrameCount
     19  f298
     20  f298							; Copy frames
     21  f298		       20 55 f2 	      jsr	CopyFrame
     22  f29b
     23  f29b							; Skip every 8 frames for increasing demo index
     24  f29b		       a5 83		      lda	FrameCount
     25  f29d		       29 07		      and	#FrameSkip
     26  f29f		       c9 07		      cmp	#FrameSkip
     27  f2a1		       d0 0d		      bne	.next_next_thing
     28  f2a3
     29  f2a3		       18		      clc
     30  f2a4		       a5 8e		      lda	ROW_DEMO_INDEX
     31  f2a6		       69 04		      adc	#4
     32  f2a8		       c9 68		      cmp	#[level_01_end - level_01]
     33  f2aa		       90 02		      bcc	.next_thing_local
     34  f2ac		       a9 00		      lda	#0
     35  f2ae				   .next_thing_local
     36  f2ae		       85 8e		      sta	ROW_DEMO_INDEX
     37  f2b0				   .next_next_thing
     38  f2b0		       85 02		      sta	WSYNC
     39  f2b2
     40  f2b2							; Positioning
      0  f2b2					      SLEEP	40
      1  f2b2				   .CYCLES    SET	40
      2  f2b2
      3  f2b2				  -	      IF	.CYCLES < 2
      4  f2b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2b2				  -	      ERR
      6  f2b2					      ENDIF
      7  f2b2
      8  f2b2				  -	      IF	.CYCLES & 1
      9  f2b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2b2				  -	      nop	0
     11  f2b2				  -	      ELSE
     12  f2b2				  -	      bit	VSYNC
     13  f2b2				  -	      ENDIF
     14  f2b2				  -.CYCLES    SET	.CYCLES - 3
     15  f2b2					      ENDIF
     16  f2b2
     17  f2b2					      REPEAT	.CYCLES / 2
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     17  f2c0					      REPEND
     18  f2c1		       ea		      nop
     17  f2c1					      REPEND
     18  f2c2		       ea		      nop
     17  f2c2					      REPEND
     18  f2c3		       ea		      nop
     17  f2c3					      REPEND
     18  f2c4		       ea		      nop
     17  f2c4					      REPEND
     18  f2c5		       ea		      nop
     19  f2c6					      REPEND
     42  f2c6		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     43  f2c8		       85 02		      sta	WSYNC
     44  f2ca
     45  f2ca							; Misc
     46  f2ca		       a9 00		      lda	#00
     47  f2cc		       85 1e		      sta	EMERALD_MI_ENABLE
     48  f2ce
     49  f2ce							; Assign dervied SpriteEnd value
     50  f2ce		       18		      clc
     51  f2cf		       a9 c8		      lda	#HEIGHT_OFFSET
     52  f2d1		       e5 89		      sbc	YPos
     53  f2d3		       85 85		      sta	SpriteEnd
     54  f2d5
     55  f2d5
     56  f2d5							; Player 1
     57  f2d5		       a5 86		      lda	XPos
     58  f2d7		       a2 00		      ldx	#0
     59  f2d9		       20 dc f3 	      jsr	SetHorizPos
     60  f2dc
     61  f2dc				   PositionMissiles subroutine
     62  f2dc							; Kernel A or B
     63  f2dc		       a9 01		      lda	#01
     64  f2de		       25 83		      and	FrameCount
     65  f2e0		       d0 19		      bne	.kernel_b
     66  f2e2
     67  f2e2				   .kernel_a
     68  f2e2		       85 02		      sta	WSYNC
      0  f2e4					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2e4				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2e4
      3  f2e4				  -	      IF	.CYCLES < 2
      4  f2e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2e4				  -	      ERR
      6  f2e4					      ENDIF
      7  f2e4
      8  f2e4				  -	      IF	.CYCLES & 1
      9  f2e4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2e4				  -	      nop	0
     11  f2e4				  -	      ELSE
     12  f2e4				  -	      bit	VSYNC
     13  f2e4				  -	      ENDIF
     14  f2e4				  -.CYCLES    SET	.CYCLES - 3
     15  f2e4					      ENDIF
     16  f2e4
     17  f2e4					      REPEAT	.CYCLES / 2
     18  f2e4		       ea		      nop
     17  f2e4					      REPEND
     18  f2e5		       ea		      nop
     17  f2e5					      REPEND
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     17  f2ec					      REPEND
     18  f2ed		       ea		      nop
     17  f2ed					      REPEND
     18  f2ee		       ea		      nop
     17  f2ee					      REPEND
     18  f2ef		       ea		      nop
     17  f2ef					      REPEND
     18  f2f0		       ea		      nop
     17  f2f0					      REPEND
     18  f2f1		       ea		      nop
     19  f2f2					      REPEND
     70  f2f2		       85 13		      sta	EMERALD_MI_RESET
     71  f2f4
     72  f2f4		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     73  f2f6		       85 23		      sta	EMERALD_MI_HMOVE
     74  f2f8
     75  f2f8		       4c 1d f3 	      jmp	.complete
     76  f2fb
     77  f2fb				   .kernel_b
     78  f2fb		       85 02		      sta	WSYNC
      0  f2fd					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f2fd				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f2fd
      3  f2fd				  -	      IF	.CYCLES < 2
      4  f2fd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2fd				  -	      ERR
      6  f2fd					      ENDIF
      7  f2fd
      8  f2fd					      IF	.CYCLES & 1
      9  f2fd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2fd		       04 00		      nop	0
     11  f2ff				  -	      ELSE
     12  f2ff				  -	      bit	VSYNC
     13  f2ff					      ENDIF
     14  f2ff				   .CYCLES    SET	.CYCLES - 3
     15  f2ff					      ENDIF
     16  f2ff
     17  f2ff					      REPEAT	.CYCLES / 2
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     19  f317					      REPEND
     80  f317		       85 13		      sta	EMERALD_MI_RESET
     81  f319
     82  f319		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     83  f31b		       85 23		      sta	EMERALD_MI_HMOVE
     84  f31d
     85  f31d				   .complete
     86  f31d
     87  f31d				   VerticalBlankEnd
     88  f31d							; Wait until the end of Vertical blank.
      0  f31d					      TIMER_WAIT
      1  f31d				   .waittimer
      2  f31d		       ad 84 02 	      lda	INTIM
      3  f320		       d0 fb		      bne	.waittimer
      4  f322		       85 02		      sta	WSYNC
      0  f324					      ASSERT_RUNTIME	"_scan == #37"
      1  f324				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f324  && !(  _scan == #37  ) }
      2  f324					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     91  f324
     92  f324							; Start rendering the kernel.
      0  f324					      TIMER_SETUP	192
      1  f324				   .lines     SET	192
      2  f324		       a9 e3		      lda	#(((.lines)*76-14)/64)
      3  f326		       85 02		      sta	WSYNC
      4  f328		       8d 96 02 	      sta	TIM64T
     94  f32b		       4c f0 f3 	      jmp	KernelBorder
     95  f32e
     96  f32e				   FrameEnd   subroutine
     97  f32e		       85 02		      sta	WSYNC
     98  f330
     99  f330							; Blank all background colors.
    100  f330		       a9 00		      lda	#0
    101  f332		       85 08		      sta	COLUPF
    102  f334		       85 0f		      sta	PF2
    103  f336		       85 0e		      sta	PF1
    104  f338		       85 1c		      sta	EMERALD_SP
    105  f33a
    106  f33a							; Guide lines (2x)
    107  f33a		       a9 02		      lda	#SIGNAL_LINE
    108  f33c		       85 09		      sta	COLUBK
    109  f33e					      REPEAT	6
    110  f33e		       85 02		      sta	WSYNC
    109  f33e					      REPEND
    110  f340		       85 02		      sta	WSYNC
    109  f340					      REPEND
    110  f342		       85 02		      sta	WSYNC
    109  f342					      REPEND
    110  f344		       85 02		      sta	WSYNC
    109  f344					      REPEND
    110  f346		       85 02		      sta	WSYNC
    109  f346					      REPEND
    110  f348		       85 02		      sta	WSYNC
    111  f34a					      REPEND
    112  f34a		       a9 00		      lda	#$00
    113  f34c		       85 09		      sta	COLUBK
    114  f34e
    115  f34e							; TODO Should a timer be necessary for ending the graphics kernel?
      0  f34e					      TIMER_WAIT
      1  f34e				   .waittimer
      2  f34e		       ad 84 02 	      lda	INTIM
      3  f351		       d0 fb		      bne	.waittimer
      4  f353		       85 02		      sta	WSYNC
      0  f355					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f355				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f355  && !(  _scan == (#37 + #192)  ) }
      2  f355					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    118  f355
    119  f355							; Overscan
    120  f355				   Overscan   subroutine
    121  f355		       85 01		      sta	VBLANK
      0  f357					      TIMER_SETUP	29
      1  f357				   .lines     SET	29
      2  f357		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f359		       85 02		      sta	WSYNC
      4  f35b		       8d 96 02 	      sta	TIM64T
    123  f35e
    124  f35e		       20 6e f3 	      jsr	MoveJoystick
    125  f361		       20 a5 f3 	      jsr	SpeedCalculation
    126  f364
      0  f364					      TIMER_WAIT
      1  f364				   .waittimer
      2  f364		       ad 84 02 	      lda	INTIM
      3  f367		       d0 fb		      bne	.waittimer
      4  f369		       85 02		      sta	WSYNC
      0  f36b					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f36b				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f36b  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f36b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    129  f36b
    130  f36b		       4c 82 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE input.s LEVEL 2 PASS 2
      0  f36e					      include	"input.s"
      1  f36e							; Handles input checking. Called from overscan.
      2  f36e
      3  f36e							; Read joystick movement and apply to object 0
      4  f36e				   MoveJoystick
      5  f36e							; Move vertically
      6  f36e							; (up and down are actually reversed since ypos starts at bottom)
      7  f36e							;     ldx YPos
      8  f36e		       a9 10		      lda	#%00010000	;Up?
      9  f370		       2c 80 02 	      bit	SWCHA
     10  f373		       d0 0d		      bne	SkipMoveUp
     11  f375
     12  f375		       18		      clc
     13  f376		       a5 88		      lda	Speed2
     14  f378		       69 0c		      adc	#12
     15  f37a		       85 88		      sta	Speed2
     16  f37c		       a5 87		      lda	Speed1
     17  f37e		       69 00		      adc	#00
     18  f380		       85 87		      sta	Speed1
     19  f382
     20  f382				   SkipMoveUp
     21  f382		       a6 86		      ldx	XPos
     22  f384
     23  f384							; Only check left/right on odd frames;
     24  f384							; TODO make this just a fractional speed
     25  f384							; rather than dropping frames
     26  f384		       a9 01		      lda	#01
     27  f386		       25 83		      and	FrameCount
     28  f388		       d0 18		      bne	SkipMoveRight
     29  f38a
     30  f38a
     31  f38a							; Move horizontally
     32  f38a		       a9 40		      lda	#%01000000	;Left?
     33  f38c		       2c 80 02 	      bit	SWCHA
     34  f38f		       d0 05		      bne	SkipMoveLeft
     35  f391		       e0 1d		      cpx	#29
     36  f393		       90 01		      bcc	SkipMoveLeft
     37  f395		       ca		      dex
     38  f396
     39  f396							; Reflect
     40  f396							;     lda #$ff
     41  f396							;     sta REFP0
     42  f396				   SkipMoveLeft
     43  f396		       a9 80		      lda	#%10000000	;Right?
     44  f398		       2c 80 02 	      bit	SWCHA
     45  f39b		       d0 05		      bne	SkipMoveRight
     46  f39d		       e0 80		      cpx	#128
     47  f39f		       b0 01		      bcs	SkipMoveRight
     48  f3a1		       e8		      inx
     49  f3a2
     50  f3a2							; Reflect
     51  f3a2							;     lda #$0
     52  f3a2							;     sta REFP0
     53  f3a2				   SkipMoveRight
     54  f3a2		       86 86		      stx	XPos
     55  f3a4		       60		      rts
     56  f3a5
     57  f3a5
     58  f3a5				   SpeedCalculation
     59  f3a5		       38		      sec
     60  f3a6		       a5 88		      lda	Speed2
     61  f3a8		       e9 07		      sbc	#7
     62  f3aa		       85 88		      sta	Speed2
     63  f3ac		       a5 87		      lda	Speed1
     64  f3ae		       e9 00		      sbc	#0
     65  f3b0		       85 87		      sta	Speed1
     66  f3b2
     67  f3b2		       18		      clc
     68  f3b3		       a5 8a		      lda	YPos2
     69  f3b5		       65 88		      adc	Speed2
     70  f3b7		       85 8a		      sta	YPos2
     71  f3b9		       a5 89		      lda	YPos
     72  f3bb		       65 87		      adc	Speed1
     73  f3bd		       85 89		      sta	YPos
     74  f3bf
     75  f3bf		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f3c1		       b0 0a		      bcs	NewThing2
     77  f3c3
     78  f3c3							; Reset to floor
     79  f3c3		       a9 3e		      lda	#FLOOR_OFFSET
     80  f3c5		       85 89		      sta	YPos
     81  f3c7		       a9 00		      lda	#0
     82  f3c9		       85 87		      sta	Speed1
     83  f3cb		       85 88		      sta	Speed2
     84  f3cd				   NewThing2
     85  f3cd
     86  f3cd		       c9 be		      cmp	#CEILING_OFFSET
     87  f3cf		       90 0a		      bcc	.next
     88  f3d1
     89  f3d1							; Reset to ceiling
     90  f3d1		       a9 be		      lda	#CEILING_OFFSET
     91  f3d3		       85 89		      sta	YPos
     92  f3d5		       a9 00		      lda	#0
     93  f3d7		       85 87		      sta	Speed1
     94  f3d9		       85 88		      sta	Speed2
     95  f3db				   .next
     96  f3db		       60		      rts
     97  f3dc
     98  f3dc
     99  f3dc
    100  f3dc							; Subroutine
    101  f3dc				   SetHorizPos
    102  f3dc		       85 02		      sta	WSYNC	; start a new line
    103  f3de		       24 00		      bit	0	; waste 3 cycles
    104  f3e0		       38		      sec		; set carry flag
    105  f3e1				   DivideLoop
    106  f3e1		       e9 0f		      sbc	#15	; subtract 15
    107  f3e3		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f3e5		       49 07		      eor	#7	; calculate fine offset
    109  f3e7		       0a		      asl
    110  f3e8		       0a		      asl
    111  f3e9		       0a		      asl
    112  f3ea		       0a		      asl
    113  f3eb		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f3ed		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f3ef		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f3f0					      include	"kernel_border.s"
      1  f3f0							; Visible Kernel
      2  f3f0
      3  f3f0				   KernelBorder subroutine
      4  f3f0		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f3f2
      6  f3f2							; First HMOVE
      7  f3f2		       85 2a		      sta	HMOVE
      8  f3f4
      9  f3f4							; Border top
     10  f3f4		       a9 00		      lda	#0
     11  f3f6		       85 08		      sta	COLUPF
     12  f3f8		       85 0e		      sta	PF1
     13  f3fa		       85 0f		      sta	PF2
     14  f3fc		       a9 02		      lda	#SIGNAL_LINE
     15  f3fe		       85 09		      sta	COLUBK
     16  f400
     17  f400					      REPEAT	6
     18  f400		       85 02		      sta	WSYNC
     17  f400					      REPEND
     18  f402		       85 02		      sta	WSYNC
     17  f402					      REPEND
     18  f404		       85 02		      sta	WSYNC
     17  f404					      REPEND
     18  f406		       85 02		      sta	WSYNC
     17  f406					      REPEND
     18  f408		       85 02		      sta	WSYNC
     17  f408					      REPEND
     18  f40a		       85 02		      sta	WSYNC
     19  f40c					      REPEND
     20  f40c
     21  f40c		       a9 00		      lda	#0
     22  f40e		       85 09		      sta	COLUBK
     23  f410		       85 02		      sta	WSYNC
     24  f412
     25  f412							; Start top border
     26  f412				   border_top
     27  f412							; Make the playfield solid.
     28  f412		       a9 3f		      lda	#%00111111
     29  f414		       85 0e		      sta	PF1
     30  f416		       a9 ff		      lda	#%11111111
     31  f418		       85 0f		      sta	PF2
     32  f41a
     33  f41a		       a9 42		      lda	#COL_BG
     34  f41c		       a0 00		      ldy	#0
     35  f41e
     36  f41e							; X_XXXX_XX
     37  f41e							; Commented lines removed to save on space.
     38  f41e		       85 08		      sta	COLUPF
     39  f420		       85 02		      sta	WSYNC
     40  f422		       84 08		      sty	COLUPF
     41  f424		       85 02		      sta	WSYNC
     42  f426		       85 08		      sta	COLUPF
     43  f428		       85 02		      sta	WSYNC
     44  f42a							; sta COLUPF
     45  f42a		       85 02		      sta	WSYNC
     46  f42c							; sta COLUPF
     47  f42c		       85 02		      sta	WSYNC
     48  f42e		       84 08		      sty	COLUPF
     49  f430		       85 02		      sta	WSYNC
     50  f432		       85 08		      sta	COLUPF
     51  f434
     52  f434		       a2 ff		      ldx	#$ff
     53  f436		       9a		      txs
     54  f437							; Push jump table to the stack
      0  f437					      ASSERT_RUNTIME	"sp == $ff"
      1  f437				   .COND      SET	"sp == $ff"
 ASSERT: breakif { pc== $f437  && !(  sp == $ff  ) }
      2  f437					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f437							; final rts to return point of kernel
     57  f437		       a9 f5		      lda	#>[row_after_kernel - 1]
     58  f439		       48		      pha		; $ff
     59  f43a		       a9 3f		      lda	#<[row_after_kernel - 1]	; exit gem kernel
     60  f43c		       48		      pha		; $fe
     61  f43d		       a9 00		      lda	#%0	; GRP0 B
     62  f43f		       48		      pha		; $fd
     63  f440		       a9 10		      lda	#>[$1100 - 1]
     64  f442		       48		      pha		; $fc
     65  f443		       a9 ff		      lda	#<[$1100 - 1]	; repeat gem kernel once
     66  f445		       48		      pha		; $fb
     67  f446		       a9 00		      lda	#%0	; GRP0 A
     68  f448		       48		      pha		; $fa
      0  f449					      ASSERT_RUNTIME	"sp == $f9"
      1  f449				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f449  && !(  sp == $f9  ) }
      2  f449					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     70  f449
     71  f449		       85 02		      sta	WSYNC
     72  f44b							; sta COLUPF
     73  f44b
     74  f44b				   PlayArea
     75  f44b							; PF is now the playing area
      0  f44b					      ASSERT_RUNTIME	"_scycles == #0"
      1  f44b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f44b  && !(  _scycles == #0  ) }
      2  f44b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f44b					      sleep	61
      1  f44b				   .CYCLES    SET	61
      2  f44b
      3  f44b				  -	      IF	.CYCLES < 2
      4  f44b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f44b				  -	      ERR
      6  f44b					      ENDIF
      7  f44b
      8  f44b					      IF	.CYCLES & 1
      9  f44b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f44b		       04 00		      nop	0
     11  f44d				  -	      ELSE
     12  f44d				  -	      bit	VSYNC
     13  f44d					      ENDIF
     14  f44d				   .CYCLES    SET	.CYCLES - 3
     15  f44d					      ENDIF
     16  f44d
     17  f44d					      REPEAT	.CYCLES / 2
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     17  f452					      REPEND
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     17  f456					      REPEND
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     17  f467					      REPEND
     18  f468		       ea		      nop
     17  f468					      REPEND
     18  f469		       ea		      nop
     19  f46a					      REPEND
     78  f46a		       a9 00		      lda	#%00000000
     79  f46c		       85 0d		      sta	PF0
     80  f46e		       a9 20		      lda	#%00100000
     81  f470		       85 0e		      sta	PF1
     82  f472		       a9 00		      lda	#%00000000
     83  f474		       85 0f		      sta	PF2
      0  f476					      ASSERT_RUNTIME	"_scycles == #0"
      1  f476				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f476  && !(  _scycles == #0  ) }
      2  f476					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f476					      sleep	7
      1  f476				   .CYCLES    SET	7
      2  f476
      3  f476				  -	      IF	.CYCLES < 2
      4  f476				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f476				  -	      ERR
      6  f476					      ENDIF
      7  f476
      8  f476					      IF	.CYCLES & 1
      9  f476					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f476		       04 00		      nop	0
     11  f478				  -	      ELSE
     12  f478				  -	      bit	VSYNC
     13  f478					      ENDIF
     14  f478				   .CYCLES    SET	.CYCLES - 3
     15  f478					      ENDIF
     16  f478
     17  f478					      REPEAT	.CYCLES / 2
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     19  f47a					      REPEND
     86  f47a		       4c ac f4 	      jmp	row_start
     87  f47d							; enter row on cycle 10.
     88  f47d
     89  f47d							; reset the background for bottom of playfield
     90  f47d				   border_bottom
     91  f47d							;sta WSYNC
     92  f47d
     93  f47d							; Form the bottom of the level frame.
     94  f47d		       a9 3f		      lda	#%00111111
     95  f47f		       85 0e		      sta	PF1
     96  f481		       a9 ff		      lda	#%11111111
     97  f483		       85 0f		      sta	PF2
     98  f485
     99  f485							; Clear all sprites.
    100  f485		       a9 00		      lda	#0
    101  f487		       85 1c		      sta	EMERALD_SP
    102  f489		       85 1b		      sta	JET_SP
    103  f48b		       85 1e		      sta	EMERALD_MI_ENABLE
    104  f48d
    105  f48d		       a9 42		      lda	#COL_BG
    106  f48f		       a0 00		      ldy	#0
    107  f491		       85 02		      sta	WSYNC
    108  f493
    109  f493		       84 08		      sty	COLUPF
    110  f495		       85 02		      sta	WSYNC
    111  f497
    112  f497		       85 08		      sta	COLUPF
    113  f499		       85 02		      sta	WSYNC
    114  f49b
    115  f49b		       85 02		      sta	WSYNC
    116  f49d
    117  f49d		       85 02		      sta	WSYNC
    118  f49f
    119  f49f		       84 08		      sty	COLUPF
    120  f4a1		       85 02		      sta	WSYNC
    121  f4a3
    122  f4a3		       85 08		      sta	COLUPF
    123  f4a5		       85 02		      sta	WSYNC
    124  f4a7		       85 02		      sta	WSYNC
    125  f4a9		       4c 2e f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4ac					      include	"kernel_row.s"
      1  f4ac							; Frame Start
      2  f4ac
      3  f4ac							; Macros for calculating sprite values (GRPx).
      4  f4ac
      5  f4ac							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4ac					      mac	kernel_load_player
      7  f4ac							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4ac					      dcp	SpriteEnd	; 5c
      9  f4ac					      ldy	#0	; 2c
     10  f4ac							; constant 6c:
     11  f4ac					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4ac					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4ac					      ldy	SpriteEnd
     14  f4ac							; 4c
     15  f4ac					      ldx	Frame0,Y
     16  f4ac					      endm
     17  f4ac
     18  f4ac							; mac jet_spritedata_calc
     19  f4ac							;
     20  f4ac							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4ac							; GRP0.
     22  f4ac					      mac	jet_spritedata_calc
     23  f4ac							; loader
     24  f4ac					      lda	#SPRITE_HEIGHT
     25  f4ac					      dcp	SpriteEnd
     26  f4ac					      ldy	SpriteEnd
     27  f4ac
     28  f4ac							; 4c
     29  f4ac							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4ac							; from Frame0 + Y must never cross a page boundary.
     31  f4ac					      lda	Frame0,Y
     32  f4ac							; 6c
     33  f4ac					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4ac					      .byte	$2c	; 4c / 0c
     35  f4ac					      sta	JET_SP	; 0c / 3c
     36  f4ac					      endm
     37  f4ac
     38  f4ac				   row_start
     39  f4ac
     40  f4ac							; [scanline 1]
     41  f4ac				   row_1
     42  f4ac							; Enter after scanline starts on row "9" and wraps
      0  f4ac					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4ac				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4ac  && !(  _scycles == #10  ) }
      2  f4ac					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4ac
      0  f4ac					      jet_spritedata_calc
      1  f4ac
      2  f4ac		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ae		       c7 85		      dcp	SpriteEnd
      4  f4b0		       a4 85		      ldy	SpriteEnd
      5  f4b2
      6  f4b2
      7  f4b2
      8  f4b2
      9  f4b2		       b9 00 f7 	      lda	Frame0,Y
     10  f4b5
     11  f4b5		       b0 01		      .byte.b	$b0, $01
     12  f4b7		       2c		      .byte.b	$2c
     13  f4b8		       85 1b		      sta	JET_SP
     46  f4ba
     47  f4ba							; Idle.
      0  f4ba					      sleep	46
      1  f4ba				   .CYCLES    SET	46
      2  f4ba
      3  f4ba				  -	      IF	.CYCLES < 2
      4  f4ba				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ba				  -	      ERR
      6  f4ba					      ENDIF
      7  f4ba
      8  f4ba				  -	      IF	.CYCLES & 1
      9  f4ba				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ba				  -	      nop	0
     11  f4ba				  -	      ELSE
     12  f4ba				  -	      bit	VSYNC
     13  f4ba				  -	      ENDIF
     14  f4ba				  -.CYCLES    SET	.CYCLES - 3
     15  f4ba					      ENDIF
     16  f4ba
     17  f4ba					      REPEAT	.CYCLES / 2
     18  f4ba		       ea		      nop
     17  f4ba					      REPEND
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     17  f4bf					      REPEND
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     17  f4c1					      REPEND
     18  f4c2		       ea		      nop
     17  f4c2					      REPEND
     18  f4c3		       ea		      nop
     17  f4c3					      REPEND
     18  f4c4		       ea		      nop
     17  f4c4					      REPEND
     18  f4c5		       ea		      nop
     17  f4c5					      REPEND
     18  f4c6		       ea		      nop
     17  f4c6					      REPEND
     18  f4c7		       ea		      nop
     17  f4c7					      REPEND
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     17  f4cd					      REPEND
     18  f4ce		       ea		      nop
     17  f4ce					      REPEND
     18  f4cf		       ea		      nop
     17  f4cf					      REPEND
     18  f4d0		       ea		      nop
     19  f4d1					      REPEND
      0  f4d1					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4d1				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4d1  && !(  _scycles == #0  ) }
      2  f4d1					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     50  f4d1
     51  f4d1							; [scanline 2]
     52  f4d1				   row_2
      0  f4d1					      jet_spritedata_calc
      1  f4d1
      2  f4d1		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4d3		       c7 85		      dcp	SpriteEnd
      4  f4d5		       a4 85		      ldy	SpriteEnd
      5  f4d7
      6  f4d7
      7  f4d7
      8  f4d7
      9  f4d7		       b9 00 f7 	      lda	Frame0,Y
     10  f4da
     11  f4da		       b0 01		      .byte.b	$b0, $01
     12  f4dc		       2c		      .byte.b	$2c
     13  f4dd		       85 1b		      sta	JET_SP
     54  f4df
     55  f4df							; Black out playfield
     56  f4df							; TODO This should be done with playfield pixels, not color.
     57  f4df		       a9 00		      lda	#0
     58  f4e1		       85 08		      sta	COLUPF
     59  f4e3
     60  f4e3							; Idle.
      0  f4e3					      sleep	51
      1  f4e3				   .CYCLES    SET	51
      2  f4e3
      3  f4e3				  -	      IF	.CYCLES < 2
      4  f4e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4e3				  -	      ERR
      6  f4e3					      ENDIF
      7  f4e3
      8  f4e3					      IF	.CYCLES & 1
      9  f4e3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4e3		       04 00		      nop	0
     11  f4e5				  -	      ELSE
     12  f4e5				  -	      bit	VSYNC
     13  f4e5					      ENDIF
     14  f4e5				   .CYCLES    SET	.CYCLES - 3
     15  f4e5					      ENDIF
     16  f4e5
     17  f4e5					      REPEAT	.CYCLES / 2
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     17  f4eb					      REPEND
     18  f4ec		       ea		      nop
     17  f4ec					      REPEND
     18  f4ed		       ea		      nop
     17  f4ed					      REPEND
     18  f4ee		       ea		      nop
     17  f4ee					      REPEND
     18  f4ef		       ea		      nop
     17  f4ef					      REPEND
     18  f4f0		       ea		      nop
     17  f4f0					      REPEND
     18  f4f1		       ea		      nop
     17  f4f1					      REPEND
     18  f4f2		       ea		      nop
     17  f4f2					      REPEND
     18  f4f3		       ea		      nop
     17  f4f3					      REPEND
     18  f4f4		       ea		      nop
     17  f4f4					      REPEND
     18  f4f5		       ea		      nop
     17  f4f5					      REPEND
     18  f4f6		       ea		      nop
     17  f4f6					      REPEND
     18  f4f7		       ea		      nop
     17  f4f7					      REPEND
     18  f4f8		       ea		      nop
     17  f4f8					      REPEND
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     19  f4fd					      REPEND
      0  f4fd					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4fd				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4fd  && !(  _scycles == #0  ) }
      2  f4fd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     63  f4fd
     64  f4fd							; [scanline 3]
     65  f4fd				   row_3
      0  f4fd					      jet_spritedata_calc
      1  f4fd
      2  f4fd		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ff		       c7 85		      dcp	SpriteEnd
      4  f501		       a4 85		      ldy	SpriteEnd
      5  f503
      6  f503
      7  f503
      8  f503
      9  f503		       b9 00 f7 	      lda	Frame0,Y
     10  f506
     11  f506		       b0 01		      .byte.b	$b0, $01
     12  f508		       2c		      .byte.b	$2c
     13  f509		       85 1b		      sta	JET_SP
     67  f50b
     68  f50b							; Enable playfield
     69  f50b		       a9 42		      lda	#COL_BG
     70  f50d		       85 08		      sta	COLUPF
     71  f50f
     72  f50f							; Set stack pointer and populate graphics.
     73  f50f		       a2 f9		      ldx	#$f9
     74  f511		       9a		      txs
     75  f512		       a9 09		      lda	#SPRITE_HEIGHT
      0  f514					      KERNEL_LOAD_PLAYER
      1  f514
      2  f514		       c7 85		      dcp	SpriteEnd
      3  f516		       a0 00		      ldy	#0
      4  f518
      5  f518		       b0 01		      .byte.b	$b0, $01
      6  f51a		       2c		      .byte.b	$2c
      7  f51b		       a4 85		      ldy	SpriteEnd
      8  f51d
      9  f51d		       be 00 f7 	      ldx	Frame0,Y
     77  f520		       86 fa		      stx	$fa
      0  f522					      KERNEL_LOAD_PLAYER
      1  f522
      2  f522		       c7 85		      dcp	SpriteEnd
      3  f524		       a0 00		      ldy	#0
      4  f526
      5  f526		       b0 01		      .byte.b	$b0, $01
      6  f528		       2c		      .byte.b	$2c
      7  f529		       a4 85		      ldy	SpriteEnd
      8  f52b
      9  f52b		       be 00 f7 	      ldx	Frame0,Y
     79  f52e		       86 fd		      stx	$fd
     80  f530
     81  f530							; Jump immediately into scanlines 4-5: the gem kernel
      0  f530					      sleep	2
      1  f530				   .CYCLES    SET	2
      2  f530
      3  f530				  -	      IF	.CYCLES < 2
      4  f530				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f530				  -	      ERR
      6  f530					      ENDIF
      7  f530
      8  f530				  -	      IF	.CYCLES & 1
      9  f530				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f530				  -	      nop	0
     11  f530				  -	      ELSE
     12  f530				  -	      bit	VSYNC
     13  f530				  -	      ENDIF
     14  f530				  -.CYCLES    SET	.CYCLES - 3
     15  f530					      ENDIF
     16  f530
     17  f530					      REPEAT	.CYCLES / 2
     18  f530		       ea		      nop
     19  f531					      REPEND
      0  f531					      ASSERT_RUNTIME	"_scycles == #73"
      1  f531				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f531  && !(  _scycles == #73  ) }
      2  f531					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     84  f531		       4c 00 f1 	      jmp	KERNEL_START
     85  f534
     86  f534							; [scanline 6]
     87  f534
     88  f534							; Try to avoid page crossing in jet_spritedata_calc
     89  f534							; TODO enforce this with ASSERT_RUNTIME instead?
     90  f540		       00 00 00 00*	      align	16
     91  f540
     92  f540				   row_after_kernel
     93  f540				   row_6
      0  f540					      ASSERT_RUNTIME	"_scycles == #0"
      1  f540				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f540  && !(  _scycles == #0  ) }
      2  f540					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     95  f540
     96  f540							; Cleanup from the kernel.
     97  f540		       a9 00		      lda	#0
     98  f542		       85 1e		      sta	EMERALD_MI_ENABLE
     99  f544		       85 1c		      sta	EMERALD_SP
    100  f546		       85 08		      sta	COLUPF
    101  f548
      0  f548					      jet_spritedata_calc
      1  f548
      2  f548		       a9 09		      lda	#SPRITE_HEIGHT
      3  f54a		       c7 85		      dcp	SpriteEnd
      4  f54c		       a4 85		      ldy	SpriteEnd
      5  f54e
      6  f54e
      7  f54e
      8  f54e
      9  f54e		       b9 00 f7 	      lda	Frame0,Y
     10  f551
     11  f551		       b0 01		      .byte.b	$b0, $01
     12  f553		       2c		      .byte.b	$2c
     13  f554		       85 1b		      sta	JET_SP
    103  f556
    104  f556							; Idle.
    105  f556		       85 02		      sta	WSYNC
    106  f558
    107  f558							; [scanline 7]
    108  f558				   row_7
      0  f558					      jet_spritedata_calc
      1  f558
      2  f558		       a9 09		      lda	#SPRITE_HEIGHT
      3  f55a		       c7 85		      dcp	SpriteEnd
      4  f55c		       a4 85		      ldy	SpriteEnd
      5  f55e
      6  f55e
      7  f55e
      8  f55e
      9  f55e		       b9 00 f7 	      lda	Frame0,Y
     10  f561
     11  f561		       b0 01		      .byte.b	$b0, $01
     12  f563		       2c		      .byte.b	$2c
     13  f564		       85 1b		      sta	JET_SP
    110  f566
    111  f566		       a9 42		      lda	#COL_BG
    112  f568		       85 08		      sta	COLUPF
    113  f56a
    114  f56a							; FRAMESWITCH
    115  f56a		       a9 01		      lda	#01
    116  f56c		       25 83		      and	FrameCount
    117  f56e		       d0 13		      bne	loadframe2
    118  f570
    119  f570							; Perform gem loading for Kernel A.
    120  f570
    121  f570				   loadframe1
      0  f570					      ASSERT_RUNTIME	"_scycles == #32"
      1  f570				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f570  && !(  _scycles == #32  ) }
      2  f570					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    123  f570
    124  f570							; Emerald byte setting 1A
    125  f570							; ldx #0
    126  f570							; lda KERNEL_STORAGE_R,X
    127  f570							; sta GEM_00_W
    128  f570							; inx
    129  f570							; lda KERNEL_STORAGE_R,X
    130  f570							; sta GEM_04_W
    131  f570							; inx
    132  f570							; lda KERNEL_STORAGE_R,X
    133  f570							; sta GEM_09_W
    134  f570							; inx
    135  f570
    136  f570		       85 02		      sta	WSYNC
    137  f572
    138  f572							; [scanline 8]
      0  f572					      jet_spritedata_calc
      1  f572
      2  f572		       a9 09		      lda	#SPRITE_HEIGHT
      3  f574		       c7 85		      dcp	SpriteEnd
      4  f576		       a4 85		      ldy	SpriteEnd
      5  f578
      6  f578
      7  f578
      8  f578
      9  f578		       b9 00 f7 	      lda	Frame0,Y
     10  f57b
     11  f57b		       b0 01		      .byte.b	$b0, $01
     12  f57d		       2c		      .byte.b	$2c
     13  f57e		       85 1b		      sta	JET_SP
    140  f580
    141  f580							; Emerald byte setting 1B
    142  f580							; lda KERNEL_STORAGE_R,X
    143  f580							; sta GEM_13_W
    144  f580							; inx
    145  f580							; lda KERNEL_STORAGE_R,X
    146  f580							; sta GEM_17_W
    147  f580							; inx
    148  f580							; lda KERNEL_STORAGE_R,X
    149  f580							; sta GEM_18_W
    150  f580							; inx
    151  f580							; lda KERNEL_STORAGE_R,X
    152  f580							; sta GEM_22_W
    153  f580
    154  f580		       4c 96 f5 	      jmp	row_8_end
    155  f583
    156  f583							; Perform gem loading for Kernel B.
    157  f583
    158  f583				   loadframe2
      0  f583					      ASSERT_RUNTIME	"_scycles == #33"
      1  f583				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f583  && !(  _scycles == #33  ) }
      2  f583					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    160  f583
    161  f583							; Emerald byte setting 2A
    162  f583							; ldx #[storage_02 - storage]
    163  f583							; lda KERNEL_STORAGE_R,X
    164  f583							; sta GEM_02_W
    165  f583							; inx
    166  f583							; lda KERNEL_STORAGE_R,X
    167  f583							; sta GEM_06_W
    168  f583							; inx
    169  f583							; lda KERNEL_STORAGE_R,X
    170  f583							; sta GEM_08_W
    171  f583							; inx
    172  f583
    173  f583		       85 02		      sta	WSYNC
    174  f585
    175  f585							; [scanline 8]
    176  f585				   row_8
      0  f585					      jet_spritedata_calc
      1  f585
      2  f585		       a9 09		      lda	#SPRITE_HEIGHT
      3  f587		       c7 85		      dcp	SpriteEnd
      4  f589		       a4 85		      ldy	SpriteEnd
      5  f58b
      6  f58b
      7  f58b
      8  f58b
      9  f58b		       b9 00 f7 	      lda	Frame0,Y
     10  f58e
     11  f58e		       b0 01		      .byte.b	$b0, $01
     12  f590		       2c		      .byte.b	$2c
     13  f591		       85 1b		      sta	JET_SP
    178  f593
    179  f593							; Emerald byte setting 2B
    180  f593							; lda KERNEL_STORAGE_R,X
    181  f593							; sta GEM_11_W
    182  f593							; inx
    183  f593							; lda KERNEL_STORAGE_R,X
    184  f593							; sta GEM_15_W
    185  f593							; inx
    186  f593							; lda KERNEL_STORAGE_R,X
    187  f593							; sta GEM_20_W
    188  f593							; inx
    189  f593							; lda KERNEL_STORAGE_R,X
    190  f593							; sta GEM_24_W
    191  f593
    192  f593		       4c 96 f5 	      jmp	row_8_end
    193  f596
    194  f596							; Common row 8 return.
    195  f596
    196  f596				   row_8_end
    197  f596							; Idle.
    198  f596		       85 02		      sta	WSYNC
    199  f598
    200  f598							; [scanline 8]
    201  f598							; Repeat loop until LoopCount < 0
    202  f598		       c6 82		      dec	LoopCount
    203  f59a		       30 03		      bmi	row_end
    204  f59c		       4c ac f4 	      jmp	row_start
    205  f59f				   row_end
    206  f59f		       4c 7d f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f5a2					      include	"kernel_gem.s"
      1  f5a2							;
      2  f5a2							; Gem Kernels
      3  f5a2							;
      4  f5a2							; Gems are displayed in alternating kernels. This chart shows
      5  f5a2							; which kernel is responsible for which gem, with missiles denoted.
      6  f5a2							;
      7  f5a2							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f5a2							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f5a2							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f5a2							;  #	 0^	 8^	  17^	    26^       gem index
     11  f5a2							;
     12  f5a2							; The middle bar indicates where the pattern reverses.
     13  f5a2							;
     14  f5a2							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f5a2							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f5a2							; requires with a single sprite. By alternating sprites each frame with an...
     17  f5a2							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f5a2							; line, except for two. These are instead rendered by the missile, which
     19  f5a2							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f5a2
     21  f5a2							; for copying
     22  f600		       00 00 00 00*	      align	256
     23  f600
     24  f600							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f600							;
     26  f600							; GEM KERNEL A
     27  f600							;
     28  f600
     29  f600				   kernel_1_start subroutine
     30  f600					      rorg	$f100
     31  f600
     32  f600				   Kernel1    subroutine
      0  f600					      ASSERT_RUNTIME	"sp == $f9"
      1  f600				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f600					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     34  f600
     35  f600							; this sleep first make this distinct from Kernel B in debugger, lol
      0  f600					      sleep	3
      1  f600				   .CYCLES    SET	3
      2  f600
      3  f600				  -	      IF	.CYCLES < 2
      4  f600				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f600				  -	      ERR
      6  f600					      ENDIF
      7  f600
      8  f600					      IF	.CYCLES & 1
      9  f600					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f600		       04 00		      nop	0
     11  f602				  -	      ELSE
     12  f602				  -	      bit	VSYNC
     13  f602					      ENDIF
     14  f602				   .CYCLES    SET	.CYCLES - 3
     15  f602					      ENDIF
     16  f602
     17  f602				  -	      REPEAT	.CYCLES / 2
     18  f602				  -	      nop
     19  f602					      REPEND
     37  f602
     38  f602							; Load next Player sprite
     39  f602		       68		      pla
     40  f603		       85 1b		      sta	GRP0
     41  f605
     42  f605		       a9 62		      lda	#%01100010
     43  f607		       a2 06		      ldx	#%00000110
     44  f609		       a0 66		      ldy	#%01100110
     45  f60b
     46  f60b		       85 1e		      sta	EMERALD_MI_ENABLE	;disable
     47  f60d
     48  f60d		       84 1c		      sty	EMERALD_SP
     49  f60f
     50  f60f							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f60f					      ASSERT_RUNTIME	"_scycles == #22"
      1  f60f				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f10f  && !(  _scycles == #22  ) }
      2  f60f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     52  f60f				   KernelA_A
     53  f60f		       85 11		      sta	EMERALD_SP_RESET
     54  f611				   KernelA_B
      0  f611					      sleep	3
      1  f611				   .CYCLES    SET	3
      2  f611
      3  f611				  -	      IF	.CYCLES < 2
      4  f611				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f611				  -	      ERR
      6  f611					      ENDIF
      7  f611
      8  f611					      IF	.CYCLES & 1
      9  f611					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f611		       04 00		      nop	0
     11  f613				  -	      ELSE
     12  f613				  -	      bit	VSYNC
     13  f613					      ENDIF
     14  f613				   .CYCLES    SET	.CYCLES - 3
     15  f613					      ENDIF
     16  f613
     17  f613				  -	      REPEAT	.CYCLES / 2
     18  f613				  -	      nop
     19  f613					      REPEND
     56  f613				   KernelA_C
      0  f613					      sleep	3
      1  f613				   .CYCLES    SET	3
      2  f613
      3  f613				  -	      IF	.CYCLES < 2
      4  f613				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f613				  -	      ERR
      6  f613					      ENDIF
      7  f613
      8  f613					      IF	.CYCLES & 1
      9  f613					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f613		       04 00		      nop	0
     11  f615				  -	      ELSE
     12  f615				  -	      bit	VSYNC
     13  f615					      ENDIF
     14  f615				   .CYCLES    SET	.CYCLES - 3
     15  f615					      ENDIF
     16  f615
     17  f615				  -	      REPEAT	.CYCLES / 2
     18  f615				  -	      nop
     19  f615					      REPEND
     58  f615				   KernelA_D
     59  f615		       84 1c		      sty	EMERALD_SP
     60  f617				   KernelA_E
      0  f617					      sleep	3
      1  f617				   .CYCLES    SET	3
      2  f617
      3  f617				  -	      IF	.CYCLES < 2
      4  f617				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f617				  -	      ERR
      6  f617					      ENDIF
      7  f617
      8  f617					      IF	.CYCLES & 1
      9  f617					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f617		       04 00		      nop	0
     11  f619				  -	      ELSE
     12  f619				  -	      bit	VSYNC
     13  f619					      ENDIF
     14  f619				   .CYCLES    SET	.CYCLES - 3
     15  f619					      ENDIF
     16  f619
     17  f619				  -	      REPEAT	.CYCLES / 2
     18  f619				  -	      nop
     19  f619					      REPEND
     62  f619				   KernelA_F
     63  f619		       86 1e		      stx	EMERALD_MI_ENABLE
     64  f61b				   KernelA_G
     65  f61b		       85 11		      sta	EMERALD_SP_RESET
     66  f61d				   KernelA_H
     67  f61d		       84 1c		      sty	EMERALD_SP
     68  f61f				   KernelA_I
     69  f61f		       85 11		      sta	EMERALD_SP_RESET
     70  f621				   KernelA_J
      0  f621					      sleep	3	; PF1
      1  f621				   .CYCLES    SET	3
      2  f621
      3  f621				  -	      IF	.CYCLES < 2
      4  f621				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f621				  -	      ERR
      6  f621					      ENDIF
      7  f621
      8  f621					      IF	.CYCLES & 1
      9  f621					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f621		       04 00		      nop	0
     11  f623				  -	      ELSE
     12  f623				  -	      bit	VSYNC
     13  f623					      ENDIF
     14  f623				   .CYCLES    SET	.CYCLES - 3
     15  f623					      ENDIF
     16  f623
     17  f623				  -	      REPEAT	.CYCLES / 2
     18  f623				  -	      nop
     19  f623					      REPEND
     72  f623				   KernelA_K
     73  f623		       84 1c		      sty	EMERALD_SP
     74  f625				   KernelA_L
      0  f625					      sleep	3
      1  f625				   .CYCLES    SET	3
      2  f625
      3  f625				  -	      IF	.CYCLES < 2
      4  f625				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f625				  -	      ERR
      6  f625					      ENDIF
      7  f625
      8  f625					      IF	.CYCLES & 1
      9  f625					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f625		       04 00		      nop	0
     11  f627				  -	      ELSE
     12  f627				  -	      bit	VSYNC
     13  f627					      ENDIF
     14  f627				   .CYCLES    SET	.CYCLES - 3
     15  f627					      ENDIF
     16  f627
     17  f627				  -	      REPEAT	.CYCLES / 2
     18  f627				  -	      nop
     19  f627					      REPEND
     76  f627				   KernelA_M
     77  f627		       84 1c		      sty	EMERALD_SP
     78  f629				   KernelA_N
      0  f629					      sleep	3
      1  f629				   .CYCLES    SET	3
      2  f629
      3  f629				  -	      IF	.CYCLES < 2
      4  f629				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f629				  -	      ERR
      6  f629					      ENDIF
      7  f629
      8  f629					      IF	.CYCLES & 1
      9  f629					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f629		       04 00		      nop	0
     11  f62b				  -	      ELSE
     12  f62b				  -	      bit	VSYNC
     13  f62b					      ENDIF
     14  f62b				   .CYCLES    SET	.CYCLES - 3
     15  f62b					      ENDIF
     16  f62b
     17  f62b				  -	      REPEAT	.CYCLES / 2
     18  f62b				  -	      nop
     19  f62b					      REPEND
     80  f62b				   KernelA_O
      0  f62b					      sleep	3
      1  f62b				   .CYCLES    SET	3
      2  f62b
      3  f62b				  -	      IF	.CYCLES < 2
      4  f62b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62b				  -	      ERR
      6  f62b					      ENDIF
      7  f62b
      8  f62b					      IF	.CYCLES & 1
      9  f62b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62b		       04 00		      nop	0
     11  f62d				  -	      ELSE
     12  f62d				  -	      bit	VSYNC
     13  f62d					      ENDIF
     14  f62d				   .CYCLES    SET	.CYCLES - 3
     15  f62d					      ENDIF
     16  f62d
     17  f62d				  -	      REPEAT	.CYCLES / 2
     18  f62d				  -	      nop
     19  f62d					      REPEND
     82  f62d				   KernelA_P
      0  f62d					      sleep	3
      1  f62d				   .CYCLES    SET	3
      2  f62d
      3  f62d				  -	      IF	.CYCLES < 2
      4  f62d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62d				  -	      ERR
      6  f62d					      ENDIF
      7  f62d
      8  f62d					      IF	.CYCLES & 1
      9  f62d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62d		       04 00		      nop	0
     11  f62f				  -	      ELSE
     12  f62f				  -	      bit	VSYNC
     13  f62f					      ENDIF
     14  f62f				   .CYCLES    SET	.CYCLES - 3
     15  f62f					      ENDIF
     16  f62f
     17  f62f				  -	      REPEAT	.CYCLES / 2
     18  f62f				  -	      nop
     19  f62f					      REPEND
     84  f62f
     85  f62f							; 6c
      0  f62f					      ASSERT_RUNTIME	"_scycles == #70"
      1  f62f				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12f  && !(  _scycles == #70  ) }
      2  f62f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     87  f62f		       60		      rts
     88  f630
     89  f630					      rend
     90  f630				   kernel_1_end
     91  f630
     92  f630							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     93  f630							;
     94  f630							; GEM KERNEL B
     95  f630							;
     96  f630
     97  f630				   kernel_2_start subroutine
     98  f630					      rorg	$f100
     99  f630
    100  f630				   Kernel2    subroutine
      0  f630					      ASSERT_RUNTIME	"sp == $f9"
      1  f630				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f630					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    102  f630							; Assert: M1 is at position #61
    103  f630
    104  f630							; don't sleep first to make this distinct from Kernel A in debugger, lol
    105  f630
    106  f630							; Load next Player sprite
    107  f630		       68		      pla
    108  f631		       85 1b		      sta	GRP0
    109  f633
      0  f633					      sleep	4
      1  f633				   .CYCLES    SET	4
      2  f633
      3  f633				  -	      IF	.CYCLES < 2
      4  f633				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f633				  -	      ERR
      6  f633					      ENDIF
      7  f633
      8  f633				  -	      IF	.CYCLES & 1
      9  f633				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f633				  -	      nop	0
     11  f633				  -	      ELSE
     12  f633				  -	      bit	VSYNC
     13  f633				  -	      ENDIF
     14  f633				  -.CYCLES    SET	.CYCLES - 3
     15  f633					      ENDIF
     16  f633
     17  f633					      REPEAT	.CYCLES / 2
     18  f633		       ea		      nop
     17  f633					      REPEND
     18  f634		       ea		      nop
     19  f635					      REPEND
    111  f635
    112  f635
    113  f635		       a2 0c		      ldx	#%00001100
    114  f637		       a0 cc		      ldy	#%11001100
    115  f639
    116  f639		       a9 02		      lda	#02
    117  f63b		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable missile
    118  f63d
    119  f63d		       a9 c0		      lda	#%11000000
    120  f63f		       84 1c		      sty	EMERALD_SP
    121  f641
    122  f641							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f641					      ASSERT_RUNTIME	"_scycles == #25"
      1  f641				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f111  && !(  _scycles == #25  ) }
      2  f641					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    124  f641				   KernelB_A
    125  f641		       85 11		      sta	EMERALD_SP_RESET
    126  f643				   KernelB_B
      0  f643					      sleep	3
      1  f643				   .CYCLES    SET	3
      2  f643
      3  f643				  -	      IF	.CYCLES < 2
      4  f643				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f643				  -	      ERR
      6  f643					      ENDIF
      7  f643
      8  f643					      IF	.CYCLES & 1
      9  f643					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f643		       04 00		      nop	0
     11  f645				  -	      ELSE
     12  f645				  -	      bit	VSYNC
     13  f645					      ENDIF
     14  f645				   .CYCLES    SET	.CYCLES - 3
     15  f645					      ENDIF
     16  f645
     17  f645				  -	      REPEAT	.CYCLES / 2
     18  f645				  -	      nop
     19  f645					      REPEND
    128  f645				   KernelB_C
      0  f645					      sleep	3
      1  f645				   .CYCLES    SET	3
      2  f645
      3  f645				  -	      IF	.CYCLES < 2
      4  f645				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f645				  -	      ERR
      6  f645					      ENDIF
      7  f645
      8  f645					      IF	.CYCLES & 1
      9  f645					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f645		       04 00		      nop	0
     11  f647				  -	      ELSE
     12  f647				  -	      bit	VSYNC
     13  f647					      ENDIF
     14  f647				   .CYCLES    SET	.CYCLES - 3
     15  f647					      ENDIF
     16  f647
     17  f647				  -	      REPEAT	.CYCLES / 2
     18  f647				  -	      nop
     19  f647					      REPEND
    130  f647				   KernelB_D
    131  f647		       84 1c		      sty	EMERALD_SP
    132  f649				   KernelB_E
    133  f649		       85 11		      sta	EMERALD_SP_RESET
    134  f64b				   KernelB_F
    135  f64b		       84 1c		      sty	EMERALD_SP
    136  f64d				   KernelB_G		; PF1
      0  f64d					      sleep	3
      1  f64d				   .CYCLES    SET	3
      2  f64d
      3  f64d				  -	      IF	.CYCLES < 2
      4  f64d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64d				  -	      ERR
      6  f64d					      ENDIF
      7  f64d
      8  f64d					      IF	.CYCLES & 1
      9  f64d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64d		       04 00		      nop	0
     11  f64f				  -	      ELSE
     12  f64f				  -	      bit	VSYNC
     13  f64f					      ENDIF
     14  f64f				   .CYCLES    SET	.CYCLES - 3
     15  f64f					      ENDIF
     16  f64f
     17  f64f				  -	      REPEAT	.CYCLES / 2
     18  f64f				  -	      nop
     19  f64f					      REPEND
    138  f64f				   KernelB_H
    139  f64f		       84 1c		      sty	EMERALD_SP
    140  f651				   KernelB_I
    141  f651		       85 11		      sta	EMERALD_SP_RESET
    142  f653				   KernelB_J
    143  f653		       84 1c		      sty	EMERALD_SP
    144  f655				   KernelB_K
    145  f655		       85 1e		      sta	EMERALD_MI_ENABLE
    146  f657				   KernelB_L
    147  f657		       84 1c		      sty	EMERALD_SP
    148  f659				   KernelB_M
      0  f659					      sleep	3
      1  f659				   .CYCLES    SET	3
      2  f659
      3  f659				  -	      IF	.CYCLES < 2
      4  f659				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f659				  -	      ERR
      6  f659					      ENDIF
      7  f659
      8  f659					      IF	.CYCLES & 1
      9  f659					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f659		       04 00		      nop	0
     11  f65b				  -	      ELSE
     12  f65b				  -	      bit	VSYNC
     13  f65b					      ENDIF
     14  f65b				   .CYCLES    SET	.CYCLES - 3
     15  f65b					      ENDIF
     16  f65b
     17  f65b				  -	      REPEAT	.CYCLES / 2
     18  f65b				  -	      nop
     19  f65b					      REPEND
    150  f65b				   KernelB_N
      0  f65b					      sleep	3
      1  f65b				   .CYCLES    SET	3
      2  f65b
      3  f65b				  -	      IF	.CYCLES < 2
      4  f65b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65b				  -	      ERR
      6  f65b					      ENDIF
      7  f65b
      8  f65b					      IF	.CYCLES & 1
      9  f65b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65b		       04 00		      nop	0
     11  f65d				  -	      ELSE
     12  f65d				  -	      bit	VSYNC
     13  f65d					      ENDIF
     14  f65d				   .CYCLES    SET	.CYCLES - 3
     15  f65d					      ENDIF
     16  f65d
     17  f65d				  -	      REPEAT	.CYCLES / 2
     18  f65d				  -	      nop
     19  f65d					      REPEND
    152  f65d				   KernelB_O
      0  f65d					      sleep	3
      1  f65d				   .CYCLES    SET	3
      2  f65d
      3  f65d				  -	      IF	.CYCLES < 2
      4  f65d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65d				  -	      ERR
      6  f65d					      ENDIF
      7  f65d
      8  f65d					      IF	.CYCLES & 1
      9  f65d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65d		       04 00		      nop	0
     11  f65f				  -	      ELSE
     12  f65f				  -	      bit	VSYNC
     13  f65f					      ENDIF
     14  f65f				   .CYCLES    SET	.CYCLES - 3
     15  f65f					      ENDIF
     16  f65f
     17  f65f				  -	      REPEAT	.CYCLES / 2
     18  f65f				  -	      nop
     19  f65f					      REPEND
    154  f65f
    155  f65f							; 6c
      0  f65f					      ASSERT_RUNTIME	"_scycles == #70"
      1  f65f				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12f  && !(  _scycles == #70  ) }
      2  f65f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    157  f65f		       60		      rts
    158  f660
    159  f660					      rend
    160  f660				   kernel_2_end
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f660					      include	"data_sprites.s"
      1  f700		       00 00 00 00*	      align	256
      2  f700
      3  f700							; Player
      4  f700				   Frame0
      5  f700		       00		      .byte.b	#%00000000
      6  f701		       60		      .byte.b	#%01100000
      7  f702		       60		      .byte.b	#%01100000
      8  f703		       60		      .byte.b	#%01100000
      9  f704		       c0		      .byte.b	#%11000000
     10  f705		       c0		      .byte.b	#%11000000
     11  f706		       f0		      .byte.b	#%11110000
     12  f707		       c0		      .byte.b	#%11000000
     13  f708		       c0		      .byte.b	#%11000000
     14  f709		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f70a					      include	"data_levels.s"
      1  f710		       00 00 00 00*	      align	8
      2  f710							; first bit of byte 2 & 3 are unused for simplicity
      3  f710				   level_01
      4  f710		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      5  f714		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
      6  f718		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
      7  f71c		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
      8  f720		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
      9  f724		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     10  f728		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     11  f72c		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     12  f730		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     13  f734		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     14  f738		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     15  f73c		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     16  f740		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     17  f744		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     18  f748		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     19  f74c		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     20  f750		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     21  f754		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     22  f758		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     23  f75c		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     24  f760		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     25  f764		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     26  f768		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     27  f76c		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     28  f770		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     29  f774		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     30  f778				   level_01_end
------- FILE main.s
     78  f778
     79  fffc					      org	$fffc
     80  fffc		       09 f2		      .word.w	Start
     81  fffe		       09 f2		      .word.w	Start
