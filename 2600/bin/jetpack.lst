------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00a8 ????				      seg.u	Variables
      2 U00a8 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   RamNibbleTemp byte.b
     31 U0090		       00	   RamNibbleVar1 byte.b
     32 U0091		       00	   RamNibbleVar2 byte.b
     33 U0092		       00	   RamZeroByte byte.b
     34 U0093		       00	   RamLowerSixByte byte.b
     35 U0094		       00	   RamStackBkp byte.b
     36 U0095
     37 U0095							; Kernel support
     38 U0095		       00	   RamPF1Value byte.b
     39 U0096		       00	   RamKernelGRP0 byte.b		; temp
     40 U0097		       00	   RamKernelPhpTarget byte.b
     41 U0098		       00	   RamKernelX byte.b
     42 U0099		       00	   RamKernelY byte.b
     43 U009a		       00	   RamKernelGemini1 byte.b
     44 U009b		       00	   RamKernelGemini1Reg byte.b
     45 U009c		       00	   RamKernelGemini2 byte.b
     46 U009d		       00	   RamKernelGemini2Reg byte.b
     47 U009e		       00	   RamKernelGemini3 byte.b
     48 U009f		       00	   RamKernelGemini3Reg byte.b
     49 U00a0		       00	   RamKernelGemini4 byte.b
     50 U00a1		       00	   RamKernelGemini4Reg byte.b
     51 U00a2		       00	   RamKernelGemini5 byte.b
     52 U00a3
     53 U00a3		       00	   BuildKernelX byte.b
     54 U00a4		       00	   BuildKernelY byte.b
     55 U00a5		       00	   BuildKernelRST byte.b
     56 U00a6		       00	   BuildKernelGrp0 byte.b
     57 U00a7		       00	   BuildKernelVdel1 byte.b
     58 U00a8
     59 U00a8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60 U00a8
     61 U00a8		       00 10	   ROW_COUNT  =	16
     62 U00a8
     63 U00a8		       00 02	   SIGNAL_LINE =	$02
     64 U00a8
     65 U00a8							; RAM+ memory map
     66 U00a8		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     67 U00a8		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     68 U00a8		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     69 U00a8
     70 U00a8		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     71 U00a8		       f1 40	   RAMP_STORAGE_R =	$f140
     72 U00a8
     73 U00a8							; NUSIZ values
     74 U00a8
     75 U00a8		       00 13	   THREE_COPIES =	%00010011
     76 U00a8
     77 U00a8							; Colors
     78 U00a8
     79 U00a8		       00 42	   COL_BG     equ	$42
     80 U00a8		       00 cc	   COL_EMERALD equ	$CC
     81 U00a8		       00 cc	   COL_EMERALD_2 equ	$CC
     82 U00a8
     83 U00a8							; HMOVE values for missiles
     84 U00a8
     85 U00a8		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     86 U00a8		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     87 U00a8
     88 U00a8		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     89 U00a8		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     90 U00a8
     91 U00a8							; Missile values when 2A=RST
     92 U00a8							; KERNEL_B_MISSILE_SLEEP equ 46
     93 U00a8							; KERNEL_B_MISSILE_HMOVE equ $20
     94 U00a8
     95 U00a8							; Sprite details
     96 U00a8
     97 U00a8		       00 09	   SPRITE_HEIGHT equ	9
     98 U00a8
     99 U00a8		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    100 U00a8		       00 1c	   EMERALD_SP equ	GRP1
    101 U00a8		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    102 U00a8		       00 11	   EMERALD_SP_RESET equ	RESP1
    103 U00a8		       00 13	   EMERALD_MI_RESET equ	RESM1
    104 U00a8		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    105 U00a8		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    106 U00a8		       00 05	   EMERALD_COPIES equ	NUSIZ1
    107 U00a8
    108 U00a8		       00 1b	   JET_SP     equ	GRP0
    109 U00a8		       00 10	   JET_SP_RESET equ	RESP0
    110 U00a8		       00 20	   JET_SP_HMOVE equ	HMP0
    111 U00a8		       00 06	   JET_SP_COLOR equ	COLUP0
    112 U00a8
    113 U00a8							; Spriteend is HEIGHT_OFFSET - YPos
    114 U00a8		       00 c8	   HEIGHT_OFFSET equ	200
    115 U00a8
    116 U00a8							; Compared with YPos
    117 U00a8		       00 3e	   FLOOR_OFFSET equ	62
    118 U00a8		       00 be	   CEILING_OFFSET equ	190
    119 U00a8
    120 U00a8							; Starting player position
    121 U00a8		       00 3e	   YPosStart  equ	62
    122 U00a8		       00 37	   XPosStart  equ	55
    123 U00a8
    124 U00a8							; Top left corner
    125 U00a8							; YPosStart equ 190
    126 U00a8							; XPosStart equ 28
    127 U00a8
    128 U00a8							; Tick (every 8 frames)
    129 U00a8		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00a8
     64 U00a8							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 83		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 89		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 86		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 87		      sta	Speed1
     48  f243		       85 88		      sta	Speed2
     49  f245		       85 8a		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8e		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 92		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 93		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c bb f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 f9 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 f9 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 f9 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 f9 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelRST
      8  f27a							; Gemini 1A
      9  f27a					      ldy	GEM0
     10  f27a					      jsr	KernelA_GenReset
     11  f27a				   .if_1
     12  f27a					      bne	.else_1
     13  f27a					      sec
     14  f27a					      rol
     15  f27a							; Special: Encoding RST0
     16  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     17  f27a					      ldy	#BC_LDA_IMM
     18  f27a					      sty	[KernelA_B - $100]
     19  f27a					      ldy	#%10100000
     20  f27a					      sty	[KernelA_B - $100 + 1]
     21  f27a							; Store 1A in GRP0
     22  f27a					      ldy	GEM1
     23  f27a					      sty	BuildKernelGrp0
     24  f27a							; Gemini 1A is RESPx
     25  f27a					      ldy	#EMERALD_SP_RESET
     26  f27a					      sty	[KernelA_C - $100 + 1]
     27  f27a							; Turn 3-cycle NOP into 4-cycle
     28  f27a					      ldy	#$14
     29  f27a					      sty	[KernelA_D - $100]
     30  f27a					      jmp	.endif_1
     31  f27a							; [BIT DEPTH] #1 If-End @ 1
     32  f27a					      rol
     33  f27a
     34  f27a				   .else_1
     35  f27a					      clc
     36  f27a					      rol
     37  f27a							; Store 0A in GRP0
     38  f27a					      ldy	GEM0
     39  f27a					      sty	BuildKernelGrp0
     40  f27a					      ldy	GEM1
     41  f27a					      jsr	KernelA_GenReset
     42  f27a				   .if_2
     43  f27a					      bne	.else_2
     44  f27a					      sec
     45  f27a					      rol
     46  f27a							; GEM1ASWITCH
     47  f27a					      jmp	.endif_2
     48  f27a							; [BIT DEPTH] #2 If-End @ 2
     49  f27a
     50  f27a				   .else_2
     51  f27a					      clc
     52  f27a					      rol
     53  f27a							; Calculate the 1A value
     54  f27a					      ldy	SHARD_LUT_RF1
     55  f27a					      cpy	#1
     56  f27a					      .byte	$D0, #3
     57  f27a					      ldy	#RESP1
     58  f27a					      .byte	$2C
     59  f27a					      ldy	#GRP1
     60  f27a					      sty	RamKernelGemini1Reg
     61  f27a							; Set opcode
     62  f27a					      ldx	SHARD_LUT_RF1
     63  f27a					      cpx	#1
     64  f27a					      ldy	#BC_STX
     65  f27a					      .byte	$D0, #4
     66  f27a					      ldy	GEM1
     67  f27a					      jsr	KernelA_UpdateRegs
     68  f27a					      sty	RamKernelGemini1
     69  f27a							; [BIT DEPTH] #2 *If-End @ 2
     70  f27a							; [BIT DEPTH] #2 Else-End @ 2
     71  f27a				   .endif_2
     72  f27a							; [BIT DEPTH] #1 *If-End @ 1
     73  f27a							; [BIT DEPTH] #1 Else-End @ 2
     74  f27a				   .endif_1
     75  f27a							; Gemini 2A
     76  f27a					      ldy	GEM2
     77  f27a					      jsr	KernelA_GenReset
     78  f27a				   .if_3
     79  f27a					      bne	.else_3
     80  f27a					      sec
     81  f27a					      rol
     82  f27a					      jmp	.endif_3
     83  f27a							; [BIT DEPTH] #3 If-End @ 3
     84  f27a
     85  f27a				   .else_3
     86  f27a					      clc
     87  f27a					      rol
     88  f27a							; Set opcode
     89  f27a					      ldy	GEM2
     90  f27a					      jsr	KernelA_UpdateRegs
     91  f27a					      sty	RamKernelGemini2
     92  f27a							; Set opcode target
     93  f27a					      ldy	SHARD_LUT_RF1
     94  f27a					      cpy	#2
     95  f27a					      .byte	$D0, #3
     96  f27a					      ldy	#RESP1
     97  f27a					      .byte	$2C
     98  f27a					      ldy	#GRP1
     99  f27a					      sty	RamKernelGemini2Reg
    100  f27a							; [BIT DEPTH] #3 *If-End @ 3
    101  f27a							; [BIT DEPTH] #3 Else-End @ 3
    102  f27a				   .endif_3
    103  f27a							; Gemini 3A
    104  f27a					      ldy	GEM3
    105  f27a					      jsr	KernelA_GenReset
    106  f27a				   .if_4
    107  f27a					      bne	.else_4
    108  f27a					      sec
    109  f27a					      rol
    110  f27a					      jmp	.endif_4
    111  f27a							; [BIT DEPTH] #4 If-End @ 4
    112  f27a
    113  f27a				   .else_4
    114  f27a					      clc
    115  f27a					      rol
    116  f27a							; Set opcode
    117  f27a					      ldy	GEM3
    118  f27a					      jsr	KernelA_UpdateRegs
    119  f27a					      sty	RamKernelGemini3
    120  f27a							; Set opcode target
    121  f27a					      ldy	SHARD_LUT_RF1
    122  f27a					      cpy	#3
    123  f27a					      .byte	$D0, #3
    124  f27a					      ldy	#RESP1
    125  f27a					      .byte	$2C
    126  f27a					      ldy	#GRP1
    127  f27a					      sty	RamKernelGemini3Reg
    128  f27a							; [BIT DEPTH] #4 *If-End @ 4
    129  f27a							; [BIT DEPTH] #4 Else-End @ 4
    130  f27a				   .endif_4
    131  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    132  f27a					      rol
    133  f27a					      rol
    134  f27a					      rol
    135  f27a					      rol
    136  f27a					      ENDM
    137  f27a
    138  f27a					      MAC	nibble_gem_kernel_a_2_build
    139  f27a					      lda	#0
    140  f27a							; VD1 default
    141  f27a					      ldx	GEM1
    142  f27a					      stx	BuildKernelVdel1
    143  f27a							; Gemini 4A
    144  f27a					      ldx	SHARD_LUT_VD1
    145  f27a					      cpx	#4
    146  f27a				   .if_1
    147  f27a					      beq	.else_1
    148  f27a					      sec
    149  f27a					      rol
    150  f27a							; Set PHP
    151  f27a							; Update VDEL1
    152  f27a					      ldx	GEM4
    153  f27a					      stx	BuildKernelVdel1
    154  f27a					      jmp	.endif_1
    155  f27a							; [BIT DEPTH] #1 If-End @ 1
    156  f27a
    157  f27a				   .else_1
    158  f27a					      clc
    159  f27a					      rol
    160  f27a					      ldy	GEM4
    161  f27a					      jsr	KernelA_UpdateRegs
    162  f27a					      sty	RamKernelGemini4
    163  f27a							; Set PHP
    164  f27a							; [BIT DEPTH] #1 *If-End @ 1
    165  f27a							; [BIT DEPTH] #1 Else-End @ 1
    166  f27a				   .endif_1
    167  f27a							; VD1
    168  f27a							; ldy #SHARD_VD1
    169  f27a							; sty [KernelA_VDEL1 - $100]
    170  f27a							; GRP0
    171  f27a							; ldy #SHARD_GRP0
    172  f27a							; sty [KernelA_VDEL0 - $100]
    173  f27a							; X
    174  f27a							; ldy #SHARD_X
    175  f27a							; sty RamKernelX
    176  f27a							; Y
    177  f27a							; Gemini 5A
    178  f27a							; TODO eventually...?
    179  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    180  f27a					      rol
    181  f27a					      rol
    182  f27a					      rol
    183  f27a					      rol
    184  f27a					      rol
    185  f27a					      rol
    186  f27a					      rol
    187  f27a					      ENDM
    188  f27a
    189  f27a					      MAC	nibble_gem_kernel_b_build
    190  f27a					      lda	#0
    191  f27a							; X
    192  f27a					      ldy	#%00000011
    193  f27a					      sty	RamKernelX
    194  f27a							; Y
    195  f27a					      ldy	#%00110011
    196  f27a					      sty	[KernelB_STY - $100]
    197  f27a
    198  f27a					      cpx	#$00
    199  f27a							; NIBBLE_IF cs
    200  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    201  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    202  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    203  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    204  f27a							; NIBBLE_ELSE
    205  f27a							;     NIBBLE_WRITE RamKernelPhpTarget, #EMERALD_SP
    206  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP_RESET
    207  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    208  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    209  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    210  f27a							; NIBBLE_ELSE
    211  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP_RESET
    212  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    213  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    214  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    215  f27a							; NIBBLE_END_IF
    216  f27a							; [BIT DEPTH] Final: 0 (out of 8 bits)
    217  f27a					      rol
    218  f27a					      rol
    219  f27a					      rol
    220  f27a					      rol
    221  f27a					      rol
    222  f27a					      rol
    223  f27a					      rol
    224  f27a					      rol
    225  f27a					      ENDM
    226  f27a
    227  f27a
    228  f27a					      MAC	nibble_gem_kernel_a_1
    229  f27a				   .if_1
    230  f27a					      asl
    231  f27a					      bcc	.else_1
    232  f27a					      jmp	.endif_1
    233  f27a				   .else_1
    234  f27a				   .if_2
    235  f27a					      asl
    236  f27a					      bcc	.else_2
    237  f27a					      ldx	#BC_STX
    238  f27a					      stx	[KernelA_D_W + 0]
    239  f27a					      ldx	#RESP1
    240  f27a					      stx	[KernelA_D_W + 1]
    241  f27a					      jmp	.endif_2
    242  f27a				   .else_2
    243  f27a					      ldx	RamKernelGemini1
    244  f27a					      stx	[KernelA_D_W + 0]
    245  f27a					      ldx	RamKernelGemini1Reg
    246  f27a					      stx	[KernelA_D_W + 1]
    247  f27a				   .endif_2
    248  f27a				   .endif_1
    249  f27a				   .if_3
    250  f27a					      asl
    251  f27a					      bcc	.else_3
    252  f27a					      ldx	#NOP_REG
    253  f27a					      stx	[KernelA_E_W + 1 + 0]
    254  f27a					      ldx	#RESP1
    255  f27a					      stx	[KernelA_G_W + 1 + 0]
    256  f27a					      jmp	.endif_3
    257  f27a				   .else_3
    258  f27a					      ldx	#RESP1
    259  f27a					      stx	[KernelA_E_W + 1 + 0]
    260  f27a					      ldx	RamKernelGemini2
    261  f27a					      stx	[KernelA_G_W + 0]
    262  f27a					      ldx	RamKernelGemini2Reg
    263  f27a					      stx	[KernelA_G_W + 1]
    264  f27a				   .endif_3
    265  f27a				   .if_4
    266  f27a					      asl
    267  f27a					      bcc	.else_4
    268  f27a					      ldx	#RESP1
    269  f27a					      stx	[KernelA_H_W + 1 + 0]
    270  f27a					      jmp	.endif_4
    271  f27a				   .else_4
    272  f27a					      ldx	RamKernelGemini3
    273  f27a					      stx	[KernelA_H_W + 0]
    274  f27a					      ldx	RamKernelGemini3Reg
    275  f27a					      stx	[KernelA_H_W + 1]
    276  f27a				   .endif_4
    277  f27a					      ENDM
    278  f27a
    279  f27a					      MAC	nibble_gem_kernel_a_2
    280  f27a				   .if_1
    281  f27a					      asl
    282  f27a					      bcc	.else_1
    283  f27a					      ldx	#BC_STA
    284  f27a					      stx	[[KernelA_I_W + 0] + 0]
    285  f27a					      ldx	#EMERALD_SP_RESET
    286  f27a					      stx	[[KernelA_I_W + 0] + 1]
    287  f27a					      ldx	#BC_STA
    288  f27a					      stx	[[KernelA_J_W + 1] + 0]
    289  f27a					      ldx	#PF1
    290  f27a					      stx	[[KernelA_J_W + 1] + 1]
    291  f27a					      ldx	#BC_PHP
    292  f27a					      stx	[[KernelA_K_W + 1] + 0]
    293  f27a					      ldx	#VDELP1
    294  f27a					      stx	[RamKernelPhpTarget + 0]
    295  f27a					      jmp	.endif_1
    296  f27a				   .else_1
    297  f27a					      ldx	#BC_PHP
    298  f27a					      stx	[[KernelA_I_W + 0] + 0]
    299  f27a					      ldx	#BC_STA
    300  f27a					      stx	[[KernelA_J_W + 0] + 0]
    301  f27a					      ldx	#PF1
    302  f27a					      stx	[[KernelA_J_W + 0] + 1]
    303  f27a					      ldx	RamKernelGemini4
    304  f27a					      stx	[KernelA_K_W + 0]
    305  f27a					      ldx	#EMERALD_SP
    306  f27a					      stx	[KernelA_K_W + 1]
    307  f27a					      ldx	#RESP1
    308  f27a					      stx	[RamKernelPhpTarget + 0]
    309  f27a				   .endif_1
    310  f27a					      ldx	BuildKernelVdel1
    311  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    312  f27a					      ldx	BuildKernelGrp0
    313  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    314  f27a					      ldx	BuildKernelX
    315  f27a					      stx	[RamKernelX + 0]
    316  f27a					      ldx	BuildKernelY
    317  f27a					      stx	[[KernelA_STY - $100] + 0]
    318  f27a					      ENDM
    319  f27a
    320  f27a					      MAC	nibble_gem_kernel_b
    321  f27a					      ldx	#EMERALD_SP_RESET
    322  f27a					      stx	[RamKernelPhpTarget + 0]
    323  f27a					      ENDM
    324  f27a
    325  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a		       00 aa	   SENTINEL   =	%010101010
      4  f27a
      5  f27a							; Reflected for Kernel A
      6  f27a		       00 00	   G00	      =	%00000000
      7  f27a		       00 60	   G01	      =	%01100000
      8  f27a		       00 06	   G10	      =	%00000110
      9  f27a		       00 66	   G11	      =	%01100110
     10  f27a
     11  f27a							; gems:     [g01,g10,g01,g11,g00,g00]
     12  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     13  f27a							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     14  f27a
     15  f27a							; gems:     [g00,g01,g10,g11,g00,g01]
     16  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     17  f27a							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     18  f27a
     19  f27a							; gems:     [g01,g10,g11,g00,g01,g10]
     20  f27a							; cpu:      cpu(g01,g01,false,g10,g11,false)
     21  f27a							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     22  f27a
     23  f27a							; gems:     [g10,g11,g00,g01,g10,g11]
     24  f27a							; cpu:      cpu(g10,g10,false,g11,g01,false)
     25  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     26  f27a
     27  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     28  f27a							; cpu:      cpu(g01,g01,false,g00,g11,false)
     29  f27a							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     30  f27a
     31  f27a							; gems:     [g11,g01,g01,g01,g01,g00]
     32  f27a							; cpu:      cpu(g00,g01,false,g11,g00,false)
     33  f27a							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     34  f27a
     35  f27a							; gems:     [g10,g10,g11,g00,g11,g01]
     36  f27a							; cpu:      cpu(g00,g00,false,g10,g11,false)
     37  f27a							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     38  f27a
     39  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     40  f27a							; cpu:      cpu(g00,g01,false,g01,g11,false)
     41  f27a							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     42  f27a
     43  f27a							; gems:     [g11,g10,g00,g01,g00,g01]
     44  f27a							; cpu:      cpu(g11,g00,false,g10,g01,false)
     45  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     46  f27a
     47  f27a				   SHARD_LUT_RF1
     48  f27a		       00		      .byte.b	#0
     49  f27b				   SHARD_LUT_VD1
     50  f27b		       04		      .byte.b	#4
     51  f27c
     52  f27c				   GEM0
     53  f27c		       66		      .byte.b	G11
     54  f27d				   GEM1
     55  f27d		       06		      .byte.b	G10
     56  f27e				   GEM2
     57  f27e		       00		      .byte.b	G00
     58  f27f				   GEM3
     59  f27f		       60		      .byte.b	G01
     60  f280				   GEM4
     61  f280		       00		      .byte.b	G00
     62  f281				   GEM5
     63  f281		       60		      .byte.b	G01
     64  f282
     65  f282							; Y=Gemini Sprite
     66  f282							; processor flag Z=is RST opcode
     67  f282				   KernelA_GenReset subroutine
     68  f282		       c0 00		      cpy	#$00
     69  f284		       f0 01		      beq	.start
     70  f286		       60		      rts
     71  f287							; Current Gemini = $00
     72  f287				   .start
     73  f287		       a6 a5		      ldx	BuildKernelRST
     74  f289		       e0 aa		      cpx	#SENTINEL
     75  f28b		       d0 04		      bne	.set_else
     76  f28d							; We have found the first (and only) RST on this line, set the marker var
     77  f28d		       a2 ff		      ldx	#$ff
     78  f28f		       86 a5		      stx	BuildKernelRST
     79  f291				   .set_else
     80  f291		       a2 00		      ldx	#$00
     81  f293		       60		      rts
     82  f294
     83  f294							; Allocates build-time registers for a new Gemini sprite value.
     84  f294							; Return value (Y) is the storage opcode to use for the next build-time register
     85  f294							;
     86  f294							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     87  f294							; BuildKernelX, BuildKernelY are upgraded if not set.
     88  f294							; Y=Gemini Sprite
     89  f294				   KernelA_UpdateRegs subroutine
     90  f294
     91  f294							; If equal to GRP0, return nop
     92  f294							; FIXME GRP0 might not always be up to date (should update each entry?)
     93  f294							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     94  f294		       c4 a6		      cpy	BuildKernelGrp0
     95  f296		       d0 03		      bne	.set_start
     96  f298							; TODO if this is stx + NOP value, then register doesn't have to change as
     97  f298							; often in GEM1ASWITCH
     98  f298		       a0 04		      ldy	#BC_NOP
     99  f29a		       60		      rts
    100  f29b
    101  f29b				   .set_start
    102  f29b		       a6 a3		      ldx	BuildKernelX
    103  f29d		       e0 aa		      cpx	#SENTINEL
    104  f29f		       d0 04		      bne	.set_else
    105  f2a1		       84 a3		      sty	BuildKernelX
    106  f2a3							; FIXME like here is where graphics would be reversed savedinto BuidlKernelX
    107  f2a3		       f0 08		      beq	.set_end
    108  f2a5				   .set_else
    109  f2a5		       a6 a4		      ldx	BuildKernelY
    110  f2a7		       e0 aa		      cpx	#SENTINEL
    111  f2a9		       d0 02		      bne	.set_end
    112  f2ab		       84 a4		      sty	BuildKernelY
    113  f2ad				   .set_end
    114  f2ad
    115  f2ad		       c4 a3		      cpy	BuildKernelX
    116  f2af		       d0 03		      bne	.op_else
    117  f2b1		       a0 86		      ldy	#BC_STX
    118  f2b3		       60		      rts
    119  f2b4				   .op_else
    120  f2b4		       c4 a4		      cpy	BuildKernelY
    121  f2b6		       d0 02		      bne	.op_end
    122  f2b8		       a0 84		      ldy	#BC_STY
    123  f2ba				   .op_end
    124  f2ba		       60		      rts
    125  f2bb
    126  f2bb							; Vertical Sync
    127  f2bb				   VerticalSync subroutine
      0  f2bb					      VERTICAL_SYNC
      1  f2bb		       a9 0e		      lda	#%1110
      2  f2bd		       85 02	   .VSLP1     sta	WSYNC
      3  f2bf		       85 00		      sta	VSYNC
      4  f2c1		       4a		      lsr
      5  f2c2		       d0 f9		      bne	.VSLP1
    129  f2c4
    130  f2c4				   FrameStart subroutine
      0  f2c4					      ASSERT_RUNTIME	"_scan == #0"
      1  f2c4				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2c4  && !(  _scan == #0  ) }
      2  f2c4					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    132  f2c4
    133  f2c4				   VerticalBlank subroutine
      0  f2c4					      TIMER_SETUP	37
      1  f2c4				   .lines     SET	37
      2  f2c4		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2c6		       85 02		      sta	WSYNC
      4  f2c8		       8d 96 02 	      sta	TIM64T
    135  f2cb
    136  f2cb							; Scanline counter
    137  f2cb		       a9 10		      lda	#ROW_COUNT
    138  f2cd		       85 82		      sta	LoopCount
    139  f2cf
    140  f2cf							; Frame counter
    141  f2cf		       e6 83		      inc	FrameCount
    142  f2d1
    143  f2d1							; Skip every 8 frames for increasing demo index
    144  f2d1		       a5 83		      lda	FrameCount
    145  f2d3		       29 07		      and	#FrameSkip
    146  f2d5		       c9 07		      cmp	#FrameSkip
    147  f2d7		       d0 0d		      bne	.next_next_thing
    148  f2d9
    149  f2d9		       18		      clc
    150  f2da		       a5 8e		      lda	ROW_DEMO_INDEX
    151  f2dc		       69 04		      adc	#4
    152  f2de		       c9 68		      cmp	#[level_01_end - level_01]
    153  f2e0		       90 02		      bcc	.next_thing_local
    154  f2e2		       a9 00		      lda	#0
    155  f2e4				   .next_thing_local
    156  f2e4		       85 8e		      sta	ROW_DEMO_INDEX
    157  f2e6				   .next_next_thing
    158  f2e6		       85 02		      sta	WSYNC
    159  f2e8
    160  f2e8							; Positioning
      0  f2e8					      SLEEP	40
      1  f2e8				   .CYCLES    SET	40
      2  f2e8
      3  f2e8				  -	      IF	.CYCLES < 2
      4  f2e8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2e8				  -	      ERR
      6  f2e8					      ENDIF
      7  f2e8
      8  f2e8				  -	      IF	.CYCLES & 1
      9  f2e8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2e8				  -	      nop	0
     11  f2e8				  -	      ELSE
     12  f2e8				  -	      bit	VSYNC
     13  f2e8				  -	      ENDIF
     14  f2e8				  -.CYCLES    SET	.CYCLES - 3
     15  f2e8					      ENDIF
     16  f2e8
     17  f2e8					      REPEAT	.CYCLES / 2
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     17  f2ec					      REPEND
     18  f2ed		       ea		      nop
     17  f2ed					      REPEND
     18  f2ee		       ea		      nop
     17  f2ee					      REPEND
     18  f2ef		       ea		      nop
     17  f2ef					      REPEND
     18  f2f0		       ea		      nop
     17  f2f0					      REPEND
     18  f2f1		       ea		      nop
     17  f2f1					      REPEND
     18  f2f2		       ea		      nop
     17  f2f2					      REPEND
     18  f2f3		       ea		      nop
     17  f2f3					      REPEND
     18  f2f4		       ea		      nop
     17  f2f4					      REPEND
     18  f2f5		       ea		      nop
     17  f2f5					      REPEND
     18  f2f6		       ea		      nop
     17  f2f6					      REPEND
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     17  f2fa					      REPEND
     18  f2fb		       ea		      nop
     19  f2fc					      REPEND
    162  f2fc		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    163  f2fe		       85 02		      sta	WSYNC
    164  f300
    165  f300							; Misc
    166  f300		       a9 00		      lda	#00
    167  f302		       85 1e		      sta	EMERALD_MI_ENABLE
    168  f304
    169  f304							; Assign dervied SpriteEnd value
    170  f304		       18		      clc
    171  f305		       a9 c8		      lda	#HEIGHT_OFFSET
    172  f307		       e5 89		      sbc	YPos
    173  f309		       85 85		      sta	SpriteEnd
    174  f30b
    175  f30b							; Player 1
    176  f30b		       a5 86		      lda	XPos
    177  f30d		       a2 00		      ldx	#0
    178  f30f		       20 ba f6 	      jsr	SetHorizPos
    179  f312
    180  f312				   frame_setup subroutine
    181  f312							; Kernel A or B
    182  f312		       a9 01		      lda	#01
    183  f314		       25 83		      and	FrameCount
    184  f316		       d0 24		      bne	frame_setup_kernel_b
    185  f318
    186  f318				   frame_setup_kernel_a subroutine
    187  f318							; Load kernel into CBSRAM
    188  f318		       20 56 f2 	      jsr	LoadKernelA
    189  f31b
    190  f31b							; Move missile
    191  f31b		       85 02		      sta	WSYNC
      0  f31d					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f31d				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f31d
      3  f31d				  -	      IF	.CYCLES < 2
      4  f31d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f31d				  -	      ERR
      6  f31d					      ENDIF
      7  f31d
      8  f31d				  -	      IF	.CYCLES & 1
      9  f31d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f31d				  -	      nop	0
     11  f31d				  -	      ELSE
     12  f31d				  -	      bit	VSYNC
     13  f31d				  -	      ENDIF
     14  f31d				  -.CYCLES    SET	.CYCLES - 3
     15  f31d					      ENDIF
     16  f31d
     17  f31d					      REPEAT	.CYCLES / 2
     18  f31d		       ea		      nop
     17  f31d					      REPEND
     18  f31e		       ea		      nop
     17  f31e					      REPEND
     18  f31f		       ea		      nop
     17  f31f					      REPEND
     18  f320		       ea		      nop
     17  f320					      REPEND
     18  f321		       ea		      nop
     17  f321					      REPEND
     18  f322		       ea		      nop
     17  f322					      REPEND
     18  f323		       ea		      nop
     17  f323					      REPEND
     18  f324		       ea		      nop
     17  f324					      REPEND
     18  f325		       ea		      nop
     17  f325					      REPEND
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     17  f328					      REPEND
     18  f329		       ea		      nop
     17  f329					      REPEND
     18  f32a		       ea		      nop
     19  f32b					      REPEND
    193  f32b		       85 13		      sta	EMERALD_MI_RESET
    194  f32d		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    195  f32f		       85 23		      sta	EMERALD_MI_HMOVE
    196  f331
    197  f331							; DEBUG: Set per-kernel color
    198  f331		       a2 cc		      ldx	#COL_EMERALD
    199  f333		       86 07		      stx	EMERALD_SP_COLOR
    200  f335
    201  f335							; Set reflection for Jetpack.
    202  f335		       a9 ff		      lda	#%11111111
    203  f337		       85 0c		      sta	REFP1
    204  f339
    205  f339		       4c 69 f3 	      jmp	frame_setup_complete
    206  f33c
    207  f33c				   frame_setup_kernel_b subroutine
    208  f33c							; Load kernel into CBSRAM
    209  f33c		       20 68 f2 	      jsr	LoadKernelB
    210  f33f
    211  f33f							; Move missile
    212  f33f		       85 02		      sta	WSYNC
      0  f341					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f341				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f341
      3  f341				  -	      IF	.CYCLES < 2
      4  f341				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f341				  -	      ERR
      6  f341					      ENDIF
      7  f341
      8  f341					      IF	.CYCLES & 1
      9  f341					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f341		       04 00		      nop	0
     11  f343				  -	      ELSE
     12  f343				  -	      bit	VSYNC
     13  f343					      ENDIF
     14  f343				   .CYCLES    SET	.CYCLES - 3
     15  f343					      ENDIF
     16  f343
     17  f343					      REPEAT	.CYCLES / 2
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     17  f348					      REPEND
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     17  f355					      REPEND
     18  f356		       ea		      nop
     17  f356					      REPEND
     18  f357		       ea		      nop
     17  f357					      REPEND
     18  f358		       ea		      nop
     17  f358					      REPEND
     18  f359		       ea		      nop
     17  f359					      REPEND
     18  f35a		       ea		      nop
     19  f35b					      REPEND
    214  f35b		       85 13		      sta	EMERALD_MI_RESET
    215  f35d		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    216  f35f		       85 23		      sta	EMERALD_MI_HMOVE
    217  f361
    218  f361							; DEBUG: Set per-kernel color
    219  f361		       a2 e0		      ldx	#$e0
    220  f363		       86 07		      stx	EMERALD_SP_COLOR
    221  f365
    222  f365							; Disable reflection for Jetpack.
    223  f365		       a9 ff		      lda	#%11111111
    224  f367		       85 0c		      sta	REFP1
    225  f369
    226  f369				   frame_setup_complete
    227  f369
    228  f369		       ad 7c fa 	      lda	shard_map
    229  f36c		       a0 01		      ldy	#1	; gemini counter, starting at 1
    230  f36e				   gemini_builder
    231  f36e		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    232  f370		       d0 00		      bne	.no_vd0
    233  f372				   .no_vd0
    234  f372
    235  f372
    236  f372				   nibble_precompile_gem_kernel
    237  f372				   DBG_NIBBLE
    238  f372		       00 a9	   BC_LDA_IMM =	$a9
    239  f372		       00 85	   BC_STA     =	$85
    240  f372		       00 86	   BC_STX     =	$86
    241  f372		       00 84	   BC_STY     =	$84
    242  f372		       00 08	   BC_PHP     =	$08
    243  f372		       00 04	   BC_NOP     =	$04
    244  f372
    245  f372		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    246  f372
    247  f372				   KernelA_D_W EQM	[KernelA_D - $100]
    248  f372				   KernelA_E_W EQM	[KernelA_E - $100]
    249  f372				   KernelA_G_W EQM	[KernelA_G - $100]
    250  f372				   KernelA_H_W EQM	[KernelA_H - $100]
    251  f372				   KernelA_I_W EQM	[KernelA_I - $100]
    252  f372				   KernelA_J_W EQM	[KernelA_J - $100]
    253  f372				   KernelA_K_W EQM	[KernelA_K - $100]
    254  f372
    255  f372				   KernelB_H_W EQM	[KernelB_H - $100]
    256  f372
    257  f372							; Nibble Kernel A
      0  f372					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00ab ????				      seg.U	ignoreme
    259 U00ab ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    260 U00ad ????	       86 a3		      stx	BuildKernelX
    261 U00af ????	       86 a4		      stx	BuildKernelY
    262 U00b1 ????	       86 a5		      stx	BuildKernelRST
    263 U00b3 ????
    264 U00b3 ????						; Gemini 1A
    265 U00b3 ????	       ac 7c f2 	      ldy	GEM0
    266 U00b6 ????	       20 82 f2 	      jsr	KernelA_GenReset
      0 U00b9 ????				      NIBBLE_IF	eq
    268 U00b9 ????						; Special: Encoding RST0
    269 U00b9 ????						; Rewrite lda RamKernelPF1 to be #immediate
    270 U00b9 ????	       a0 a9		      ldy	#BC_LDA_IMM
    271 U00bb ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    272 U00be ????	       a0 a0		      ldy	#%10100000
    273 U00c0 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    274 U00c3 ????						; Store 1A in GRP0
    275 U00c3 ????	       ac 7d f2 	      ldy	GEM1
    276 U00c6 ????	       84 a6		      sty	BuildKernelGrp0
    277 U00c8 ????						; Gemini 1A is RESPx
    278 U00c8 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    279 U00ca ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    280 U00cd ????						; Turn 3-cycle NOP into 4-cycle
    281 U00cd ????	       a0 14		      ldy	#$14	; TODO what is this
    282 U00cf ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U00d2 ????				      NIBBLE_ELSE
    284 U00d2 ????						; Store 0A in GRP0
    285 U00d2 ????	       ac 7c f2 	      ldy	GEM0
    286 U00d5 ????	       84 a6		      sty	BuildKernelGrp0
    287 U00d7 ????
    288 U00d7 ????	       ac 7d f2 	      ldy	GEM1
    289 U00da ????	       20 82 f2 	      jsr	KernelA_GenReset
      0 U00dd ????				      NIBBLE_IF	eq
    291 U00dd ????						; GEM1ASWITCH
      0 U00dd ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U00dd ????				      NIBBLE_ELSE
    294 U00dd ????						; Calculate the 1A value
    295 U00dd ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    296 U00e0 ????	       c0 01		      cpy	#1
    297 U00e2 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    298 U00e4 ????	       a0 11		      ldy	#RESP1
    299 U00e6 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    300 U00e7 ????	       a0 1c		      ldy	#GRP1
    301 U00e9 ????	       84 9b		      sty	RamKernelGemini1Reg
    302 U00eb ????
    303 U00eb ????						; Set opcode
    304 U00eb ????	       ae 7a f2 	      ldx	SHARD_LUT_RF1
    305 U00ee ????	       e0 01		      cpx	#1
    306 U00f0 ????	       a0 86		      ldy	#BC_STX
    307 U00f2 ????	       d0 04		      .byte.b	$D0, #4	; bne +5
    308 U00f4 ????	       ac 7d f2 	      ldy	GEM1
    309 U00f7 ????	       20 94 f2 	      jsr	KernelA_UpdateRegs
    310 U00fa ????	       84 9a		      sty	RamKernelGemini1
    311 U00fc ????
      0 U00fc ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U00fc ????				      NIBBLE_END_IF
      0 U00fc ????				      NIBBLE_END_IF
    315 U00fc ????
    316 U00fc ????						; Gemini 2A
    317 U00fc ????	       ac 7e f2 	      ldy	GEM2
    318 U00ff ????	       20 82 f2 	      jsr	KernelA_GenReset
      0 U0102 ????				      NIBBLE_IF	eq
      0 U0102 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0102 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0102 ????				      NIBBLE_ELSE
    323 U0102 ????						; Set opcode
    324 U0102 ????	       ac 7e f2 	      ldy	GEM2
    325 U0105 ????	       20 94 f2 	      jsr	KernelA_UpdateRegs
    326 U0108 ????	       84 9c		      sty	RamKernelGemini2
    327 U010a ????
    328 U010a ????						; Set opcode target
    329 U010a ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    330 U010d ????	       c0 02		      cpy	#2
    331 U010f ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    332 U0111 ????	       a0 11		      ldy	#RESP1
    333 U0113 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    334 U0114 ????	       a0 1c		      ldy	#GRP1
    335 U0116 ????	       84 9d		      sty	RamKernelGemini2Reg
    336 U0118 ????
      0 U0118 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0118 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0118 ????				      NIBBLE_END_IF
    340 U0118 ????
    341 U0118 ????						; Gemini 3A
    342 U0118 ????	       ac 7f f2 	      ldy	GEM3
    343 U011b ????	       20 82 f2 	      jsr	KernelA_GenReset
      0 U011e ????				      NIBBLE_IF	eq
      0 U011e ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U011e ????				      NIBBLE_ELSE
    347 U011e ????						; Set opcode
    348 U011e ????	       ac 7f f2 	      ldy	GEM3
    349 U0121 ????	       20 94 f2 	      jsr	KernelA_UpdateRegs
    350 U0124 ????	       84 9e		      sty	RamKernelGemini3
    351 U0126 ????
    352 U0126 ????						; Set opcode target
    353 U0126 ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    354 U0129 ????	       c0 03		      cpy	#3
    355 U012b ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    356 U012d ????	       a0 11		      ldy	#RESP1
    357 U012f ????	       2c		      .byte.b	$2C	; .bit (ABS)
    358 U0130 ????	       a0 1c		      ldy	#GRP1
    359 U0132 ????	       84 9f		      sty	RamKernelGemini3Reg
    360 U0134 ????
      0 U0134 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0134 ????				      NIBBLE_END_IF
      0 U0134 ????				      NIBBLE_END_KERNEL
      1  f372					      seg	CodeBank3
    364  f372
      0  f372					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0134 ????				      seg.U	ignoreme
    366 U0134 ????						; VD1 default
    367 U0134 ????	       ae 7d f2 	      ldx	GEM1
    368 U0137 ????	       86 a7		      stx	BuildKernelVdel1
    369 U0139 ????
    370 U0139 ????						; Gemini 4A
    371 U0139 ????	       ae 7b f2 	      ldx	SHARD_LUT_VD1
    372 U013c ????	       e0 04		      cpx	#4
      0 U013e ????				      NIBBLE_IF	ne
      0 U013e ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U013e ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U013e ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    377 U013e ????
    378 U013e ????						; Set PHP
      0 U013e ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    380 U013e ????
    381 U013e ????						; Update VDEL1
    382 U013e ????	       ae 80 f2 	      ldx	GEM4
    383 U0141 ????	       86 a7		      stx	BuildKernelVdel1
      0 U0143 ????				      NIBBLE_ELSE
    385 U0143 ????	       ac 80 f2 	      ldy	GEM4
    386 U0146 ????	       20 94 f2 	      jsr	KernelA_UpdateRegs
    387 U0149 ????	       84 a0		      sty	RamKernelGemini4
    388 U014b ????
      0 U014b ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U014b ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U014b ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    392 U014b ????
    393 U014b ????						; Set PHP
      0 U014b ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U014b ????				      NIBBLE_END_IF
    396 U014b ????
    397 U014b ????						; VD1
    398 U014b ????						; ldy #SHARD_VD1
    399 U014b ????						; sty [KernelA_VDEL1 - $100]
      0 U014b ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    401 U014b ????						; GRP0
    402 U014b ????						; ldy #SHARD_GRP0
    403 U014b ????						; sty [KernelA_VDEL0 - $100]
      0 U014b ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    405 U014b ????						; X
    406 U014b ????						; ldy #SHARD_X
    407 U014b ????						; sty RamKernelX
      0 U014b ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    409 U014b ????						; Y
      0 U014b ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    411 U014b ????
    412 U014b ????						; Gemini 5A
    413 U014b ????						; TODO eventually...?
      0 U014b ????				      NIBBLE_END_KERNEL
      1  f372					      seg	CodeBank3
    415  f372
    416  f372							; Nibble Kernel B
      0  f372					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U014b ????				      seg.U	ignoreme
    418 U014b ????						; X
    419 U014b ????	       a0 03		      ldy	#%00000011
    420 U014d ????	       84 98		      sty	RamKernelX
    421 U014f ????						; Y
    422 U014f ????	       a0 33		      ldy	#%00110011
    423 U0151 ????	       8c 11 f0 	      sty	[KernelB_STY - $100]
    424 U0154 ????
    425 U0154 ????	       e0 00		      cpx	#$00
    426 U0156 ????						; NIBBLE_IF cs
      0 U0156 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP_RESET
    428 U0156 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    429 U0156 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    430 U0156 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    431 U0156 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    432 U0156 ????						; NIBBLE_ELSE
    433 U0156 ????						;     NIBBLE_WRITE RamKernelPhpTarget, #EMERALD_SP
    434 U0156 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP_RESET ; 2B
    435 U0156 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    436 U0156 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    437 U0156 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    438 U0156 ????						; NIBBLE_ELSE
    439 U0156 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP_RESET ; 3B
    440 U0156 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    441 U0156 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    442 U0156 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    443 U0156 ????						; NIBBLE_END_IF
      0 U0156 ????				      NIBBLE_END_KERNEL
      1  f372					      seg	CodeBank3
    445  f372
    446  f372							; TODO do this for all rows
    447  f372				   DBG_NIBBLE_BUILD subroutine
    448  f372		       ae 00 f1 	      ldx	$f100
    449  f375		       e0 0a		      cpx	#$a
    450  f377		       f0 03		      beq	[. + 5]
    451  f379		       4c 60 f4 	      jmp	.kernel_b
    452  f37c				   .kernel_a
      0  f37c					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f37c		       a9 00		      lda	#0
      2  f37e		       a2 aa		      ldx	#SENTINEL
      3  f380		       86 a3		      stx	BuildKernelX
      4  f382		       86 a4		      stx	BuildKernelY
      5  f384		       86 a5		      stx	BuildKernelRST
      6  f386
      7  f386		       ac 7c f2 	      ldy	GEM0
      8  f389		       20 82 f2 	      jsr	KernelA_GenReset
      9  f38c				   .if_1
     10  f38c		       d0 1f		      bne	.else_1
     11  f38e		       38		      sec
     12  f38f		       2a		      rol
     13  f390
     14  f390
     15  f390		       a0 a9		      ldy	#BC_LDA_IMM
     16  f392		       8c 16 f0 	      sty	[KernelA_B - $100]
     17  f395		       a0 a0		      ldy	#%10100000
     18  f397		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     19  f39a
     20  f39a		       ac 7d f2 	      ldy	GEM1
     21  f39d		       84 a6		      sty	BuildKernelGrp0
     22  f39f
     23  f39f		       a0 11		      ldy	#EMERALD_SP_RESET
     24  f3a1		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     25  f3a4
     26  f3a4		       a0 14		      ldy	#$14
     27  f3a6		       8c 1a f0 	      sty	[KernelA_D - $100]
     28  f3a9		       4c e2 f3 	      jmp	.endif_1
     29  f3ac
     30  f3ac		       2a		      rol
     31  f3ad
     32  f3ad				   .else_1
     33  f3ad		       18		      clc
     34  f3ae		       2a		      rol
     35  f3af
     36  f3af		       ac 7c f2 	      ldy	GEM0
     37  f3b2		       84 a6		      sty	BuildKernelGrp0
     38  f3b4		       ac 7d f2 	      ldy	GEM1
     39  f3b7		       20 82 f2 	      jsr	KernelA_GenReset
     40  f3ba				   .if_2
     41  f3ba		       d0 05		      bne	.else_2
     42  f3bc		       38		      sec
     43  f3bd		       2a		      rol
     44  f3be
     45  f3be		       4c e2 f3 	      jmp	.endif_2
     46  f3c1
     47  f3c1
     48  f3c1				   .else_2
     49  f3c1		       18		      clc
     50  f3c2		       2a		      rol
     51  f3c3
     52  f3c3		       ac 7a f2 	      ldy	SHARD_LUT_RF1
     53  f3c6		       c0 01		      cpy	#1
     54  f3c8		       d0 03		      .byte.b	$D0, #3
     55  f3ca		       a0 11		      ldy	#RESP1
     56  f3cc		       2c		      .byte.b	$2C
     57  f3cd		       a0 1c		      ldy	#GRP1
     58  f3cf		       84 9b		      sty	RamKernelGemini1Reg
     59  f3d1
     60  f3d1		       ae 7a f2 	      ldx	SHARD_LUT_RF1
     61  f3d4		       e0 01		      cpx	#1
     62  f3d6		       a0 86		      ldy	#BC_STX
     63  f3d8		       d0 04		      .byte.b	$D0, #4
     64  f3da		       ac 7d f2 	      ldy	GEM1
     65  f3dd		       20 94 f2 	      jsr	KernelA_UpdateRegs
     66  f3e0		       84 9a		      sty	RamKernelGemini1
     67  f3e2
     68  f3e2
     69  f3e2				   .endif_2
     70  f3e2
     71  f3e2
     72  f3e2				   .endif_1
     73  f3e2
     74  f3e2		       ac 7e f2 	      ldy	GEM2
     75  f3e5		       20 82 f2 	      jsr	KernelA_GenReset
     76  f3e8				   .if_3
     77  f3e8		       d0 05		      bne	.else_3
     78  f3ea		       38		      sec
     79  f3eb		       2a		      rol
     80  f3ec		       4c 07 f4 	      jmp	.endif_3
     81  f3ef
     82  f3ef
     83  f3ef				   .else_3
     84  f3ef		       18		      clc
     85  f3f0		       2a		      rol
     86  f3f1
     87  f3f1		       ac 7e f2 	      ldy	GEM2
     88  f3f4		       20 94 f2 	      jsr	KernelA_UpdateRegs
     89  f3f7		       84 9c		      sty	RamKernelGemini2
     90  f3f9
     91  f3f9		       ac 7a f2 	      ldy	SHARD_LUT_RF1
     92  f3fc		       c0 02		      cpy	#2
     93  f3fe		       d0 03		      .byte.b	$D0, #3
     94  f400		       a0 11		      ldy	#RESP1
     95  f402		       2c		      .byte.b	$2C
     96  f403		       a0 1c		      ldy	#GRP1
     97  f405		       84 9d		      sty	RamKernelGemini2Reg
     98  f407
     99  f407
    100  f407				   .endif_3
    101  f407
    102  f407		       ac 7f f2 	      ldy	GEM3
    103  f40a		       20 82 f2 	      jsr	KernelA_GenReset
    104  f40d				   .if_4
    105  f40d		       d0 05		      bne	.else_4
    106  f40f		       38		      sec
    107  f410		       2a		      rol
    108  f411		       4c 2c f4 	      jmp	.endif_4
    109  f414
    110  f414
    111  f414				   .else_4
    112  f414		       18		      clc
    113  f415		       2a		      rol
    114  f416
    115  f416		       ac 7f f2 	      ldy	GEM3
    116  f419		       20 94 f2 	      jsr	KernelA_UpdateRegs
    117  f41c		       84 9e		      sty	RamKernelGemini3
    118  f41e
    119  f41e		       ac 7a f2 	      ldy	SHARD_LUT_RF1
    120  f421		       c0 03		      cpy	#3
    121  f423		       d0 03		      .byte.b	$D0, #3
    122  f425		       a0 11		      ldy	#RESP1
    123  f427		       2c		      .byte.b	$2C
    124  f428		       a0 1c		      ldy	#GRP1
    125  f42a		       84 9f		      sty	RamKernelGemini3Reg
    126  f42c
    127  f42c
    128  f42c				   .endif_4
    129  f42c
    130  f42c		       2a		      rol
    131  f42d		       2a		      rol
    132  f42e		       2a		      rol
    133  f42f		       2a		      rol
    454  f430		       85 90		      sta	RamNibbleVar1
      0  f432					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f432		       a9 00		      lda	#0
      2  f434
      3  f434		       ae 7d f2 	      ldx	GEM1
      4  f437		       86 a7		      stx	BuildKernelVdel1
      5  f439
      6  f439		       ae 7b f2 	      ldx	SHARD_LUT_VD1
      7  f43c		       e0 04		      cpx	#4
      8  f43e				   .if_1
      9  f43e		       f0 0a		      beq	.else_1
     10  f440		       38		      sec
     11  f441		       2a		      rol
     12  f442
     13  f442
     14  f442		       ae 80 f2 	      ldx	GEM4
     15  f445		       86 a7		      stx	BuildKernelVdel1
     16  f447		       4c 54 f4 	      jmp	.endif_1
     17  f44a
     18  f44a
     19  f44a				   .else_1
     20  f44a		       18		      clc
     21  f44b		       2a		      rol
     22  f44c		       ac 80 f2 	      ldy	GEM4
     23  f44f		       20 94 f2 	      jsr	KernelA_UpdateRegs
     24  f452		       84 a0		      sty	RamKernelGemini4
     25  f454
     26  f454
     27  f454
     28  f454				   .endif_1
     29  f454
     30  f454
     31  f454
     32  f454
     33  f454
     34  f454
     35  f454
     36  f454
     37  f454
     38  f454
     39  f454
     40  f454
     41  f454
     42  f454		       2a		      rol
     43  f455		       2a		      rol
     44  f456		       2a		      rol
     45  f457		       2a		      rol
     46  f458		       2a		      rol
     47  f459		       2a		      rol
     48  f45a		       2a		      rol
    456  f45b		       85 91		      sta	RamNibbleVar2
    457  f45d		       4c 77 f4 	      jmp	.next
    458  f460				   .kernel_b
      0  f460					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f460		       a9 00		      lda	#0
      2  f462
      3  f462		       a0 03		      ldy	#%00000011
      4  f464		       84 98		      sty	RamKernelX
      5  f466
      6  f466		       a0 33		      ldy	#%00110011
      7  f468		       8c 11 f0 	      sty	[KernelB_STY - $100]
      8  f46b
      9  f46b		       e0 00		      cpx	#$00
     10  f46d
     11  f46d
     12  f46d
     13  f46d
     14  f46d
     15  f46d
     16  f46d
     17  f46d
     18  f46d
     19  f46d
     20  f46d
     21  f46d
     22  f46d
     23  f46d
     24  f46d
     25  f46d
     26  f46d
     27  f46d
     28  f46d		       2a		      rol
     29  f46e		       2a		      rol
     30  f46f		       2a		      rol
     31  f470		       2a		      rol
     32  f471		       2a		      rol
     33  f472		       2a		      rol
     34  f473		       2a		      rol
     35  f474		       2a		      rol
    460  f475		       85 90		      sta	RamNibbleVar1
    461  f477				   .next
    462  f477
    463  f477							; TODO move this into the row kernel
    464  f477				   DBG_NIBBLE_RUN subroutine
    465  f477		       ae 00 f1 	      ldx	$f100
    466  f47a		       e0 0a		      cpx	#$a
    467  f47c		       f0 03		      beq	[. + 5]
    468  f47e		       4c 2f f5 	      jmp	.kernel_b
    469  f481				   .kernel_a
    470  f481		       a5 90		      lda	RamNibbleVar1
      0  f483					      NIBBLE_gem_kernel_a_1
      1  f483				   .if_1
      2  f483		       0a		      asl
      3  f484		       90 03		      bcc	.else_1
      4  f486		       4c a3 f4 	      jmp	.endif_1
      5  f489				   .else_1
      6  f489				   .if_2
      7  f489		       0a		      asl
      8  f48a		       90 0d		      bcc	.else_2
      9  f48c		       a2 86		      ldx	#BC_STX
     10  f48e		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f491		       a2 11		      ldx	#RESP1
     12  f493		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f496		       4c a3 f4 	      jmp	.endif_2
     14  f499				   .else_2
     15  f499		       a6 9a		      ldx	RamKernelGemini1
     16  f49b		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f49e		       a6 9b		      ldx	RamKernelGemini1Reg
     18  f4a0		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f4a3				   .endif_2
     20  f4a3				   .endif_1
     21  f4a3				   .if_3
     22  f4a3		       0a		      asl
     23  f4a4		       90 0d		      bcc	.else_3
     24  f4a6		       a2 79		      ldx	#NOP_REG
     25  f4a8		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f4ab		       a2 11		      ldx	#RESP1
     27  f4ad		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f4b0		       4c c2 f4 	      jmp	.endif_3
     29  f4b3				   .else_3
     30  f4b3		       a2 11		      ldx	#RESP1
     31  f4b5		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f4b8		       a6 9c		      ldx	RamKernelGemini2
     33  f4ba		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f4bd		       a6 9d		      ldx	RamKernelGemini2Reg
     35  f4bf		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f4c2				   .endif_3
     37  f4c2				   .if_4
     38  f4c2		       0a		      asl
     39  f4c3		       90 08		      bcc	.else_4
     40  f4c5		       a2 11		      ldx	#RESP1
     41  f4c7		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f4ca		       4c d7 f4 	      jmp	.endif_4
     43  f4cd				   .else_4
     44  f4cd		       a6 9e		      ldx	RamKernelGemini3
     45  f4cf		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f4d2		       a6 9f		      ldx	RamKernelGemini3Reg
     47  f4d4		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f4d7				   .endif_4
    472  f4d7		       a5 91		      lda	RamNibbleVar2
      0  f4d9					      NIBBLE_gem_kernel_a_2
      1  f4d9				   .if_1
      2  f4d9		       0a		      asl
      3  f4da		       90 20		      bcc	.else_1
      4  f4dc		       a2 85		      ldx	#BC_STA
      5  f4de		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f4e1		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f4e3		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f4e6		       a2 85		      ldx	#BC_STA
      9  f4e8		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f4eb		       a2 0e		      ldx	#PF1
     11  f4ed		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f4f0		       a2 08		      ldx	#BC_PHP
     13  f4f2		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f4f5		       a2 26		      ldx	#VDELP1
     15  f4f7		       86 97		      stx	[RamKernelPhpTarget + 0]
     16  f4f9		       4c 19 f5 	      jmp	.endif_1
     17  f4fc				   .else_1
     18  f4fc		       a2 08		      ldx	#BC_PHP
     19  f4fe		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f501		       a2 85		      ldx	#BC_STA
     21  f503		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f506		       a2 0e		      ldx	#PF1
     23  f508		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f50b		       a6 a0		      ldx	RamKernelGemini4
     25  f50d		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f510		       a2 1c		      ldx	#EMERALD_SP
     27  f512		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f515		       a2 11		      ldx	#RESP1
     29  f517		       86 97		      stx	[RamKernelPhpTarget + 0]
     30  f519				   .endif_1
     31  f519		       a6 a7		      ldx	BuildKernelVdel1
     32  f51b		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f51e		       a6 a6		      ldx	BuildKernelGrp0
     34  f520		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f523		       a6 a3		      ldx	BuildKernelX
     36  f525		       86 98		      stx	[RamKernelX + 0]
     37  f527		       a6 a4		      ldx	BuildKernelY
     38  f529		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    474  f52c		       4c 35 f5 	      jmp	.next
    475  f52f				   .kernel_b
    476  f52f		       a5 90		      lda	RamNibbleVar1
      0  f531					      NIBBLE_gem_kernel_b
      1  f531		       a2 11		      ldx	#EMERALD_SP_RESET
      2  f533		       86 97		      stx	[RamKernelPhpTarget + 0]
    478  f535				   .next
    479  f535
    480  f535				   VerticalBlankEnd
    481  f535							; Wait until the end of Vertical blank.
      0  f535					      TIMER_WAIT
      1  f535				   .waittimer
      2  f535		       ad 84 02 	      lda	INTIM
      3  f538		       d0 fb		      bne	.waittimer
      4  f53a		       85 02		      sta	WSYNC
      0  f53c					      ASSERT_RUNTIME	"_scan == #37"
      1  f53c				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f53c  && !(  _scan == #37  ) }
      2  f53c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    484  f53c
    485  f53c							; Save stack pointer
    486  f53c		       ba		      tsx
    487  f53d		       86 94		      stx	RamStackBkp
    488  f53f
    489  f53f							; Start rendering the kernel.
    490  f53f		       4c ce f6 	      jmp	KernelBorder
    491  f542
    492  f600		       00 00 00 00*	      align	256	; TODO why
    493  f600
    494  f600				   FrameEnd   subroutine
    495  f600		       85 02		      sta	WSYNC
    496  f602
    497  f602							; Blank all background colors.
    498  f602		       a9 00		      lda	#0
    499  f604		       85 08		      sta	COLUPF
    500  f606		       85 0f		      sta	PF2
    501  f608		       85 0e		      sta	PF1
    502  f60a		       85 1c		      sta	EMERALD_SP
    503  f60c
    504  f60c							; Guide lines (2x)
    505  f60c		       a9 02		      lda	#SIGNAL_LINE
    506  f60e		       85 09		      sta	COLUBK
    507  f610					      REPEAT	6
    508  f610		       85 02		      sta	WSYNC
    507  f610					      REPEND
    508  f612		       85 02		      sta	WSYNC
    507  f612					      REPEND
    508  f614		       85 02		      sta	WSYNC
    507  f614					      REPEND
    508  f616		       85 02		      sta	WSYNC
    507  f616					      REPEND
    508  f618		       85 02		      sta	WSYNC
    507  f618					      REPEND
    508  f61a		       85 02		      sta	WSYNC
    509  f61c					      REPEND
    510  f61c		       a9 00		      lda	#$00
    511  f61e		       85 09		      sta	COLUBK
    512  f620
    513  f620							; Restore stack pointer
    514  f620		       a6 94		      ldx	RamStackBkp
    515  f622		       9a		      txs
    516  f623
    517  f623							; Display the rest of the blank screen.
      0  f623					      TIMER_SETUP	25
      1  f623				   .lines     SET	25
      2  f623		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f625		       85 02		      sta	WSYNC
      4  f627		       8d 96 02 	      sta	TIM64T
    519  f62a		       85 02		      sta	WSYNC
      0  f62c					      TIMER_WAIT
      1  f62c				   .waittimer
      2  f62c		       ad 84 02 	      lda	INTIM
      3  f62f		       d0 fb		      bne	.waittimer
      4  f631		       85 02		      sta	WSYNC
      0  f633					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f633				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f633  && !(  _scan == (#37 + #192)  ) }
      2  f633					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    522  f633
    523  f633							; Overscan
    524  f633				   Overscan   subroutine
    525  f633		       85 01		      sta	VBLANK
      0  f635					      TIMER_SETUP	29
      1  f635				   .lines     SET	29
      2  f635		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f637		       85 02		      sta	WSYNC
      4  f639		       8d 96 02 	      sta	TIM64T
    527  f63c
    528  f63c		       20 4c f6 	      jsr	MoveJoystick
    529  f63f		       20 83 f6 	      jsr	SpeedCalculation
    530  f642
      0  f642					      TIMER_WAIT
      1  f642				   .waittimer
      2  f642		       ad 84 02 	      lda	INTIM
      3  f645		       d0 fb		      bne	.waittimer
      4  f647		       85 02		      sta	WSYNC
      0  f649					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f649				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f649  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f649					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    533  f649
    534  f649		       4c bb f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f64c					      include	"game_input.s"
      1  f64c							; Handles input checking. Called from overscan.
      2  f64c
      3  f64c							; Read joystick movement and apply to object 0
      4  f64c				   MoveJoystick
      5  f64c							; Move vertically
      6  f64c							; (up and down are actually reversed since ypos starts at bottom)
      7  f64c							;     ldx YPos
      8  f64c		       a9 10		      lda	#%00010000	;Up?
      9  f64e		       2c 80 02 	      bit	SWCHA
     10  f651		       d0 0d		      bne	SkipMoveUp
     11  f653
     12  f653		       18		      clc
     13  f654		       a5 88		      lda	Speed2
     14  f656		       69 0c		      adc	#12
     15  f658		       85 88		      sta	Speed2
     16  f65a		       a5 87		      lda	Speed1
     17  f65c		       69 00		      adc	#00
     18  f65e		       85 87		      sta	Speed1
     19  f660
     20  f660				   SkipMoveUp
     21  f660		       a6 86		      ldx	XPos
     22  f662
     23  f662							; Only check left/right on odd frames;
     24  f662							; TODO make this just a fractional speed
     25  f662							; rather than dropping frames
     26  f662		       a9 01		      lda	#01
     27  f664		       25 83		      and	FrameCount
     28  f666		       d0 18		      bne	SkipMoveRight
     29  f668
     30  f668
     31  f668							; Move horizontally
     32  f668		       a9 40		      lda	#%01000000	;Left?
     33  f66a		       2c 80 02 	      bit	SWCHA
     34  f66d		       d0 05		      bne	SkipMoveLeft
     35  f66f		       e0 1d		      cpx	#29
     36  f671		       90 01		      bcc	SkipMoveLeft
     37  f673		       ca		      dex
     38  f674
     39  f674							; Reflect
     40  f674							;     lda #$ff
     41  f674							;     sta REFP0
     42  f674				   SkipMoveLeft
     43  f674		       a9 80		      lda	#%10000000	;Right?
     44  f676		       2c 80 02 	      bit	SWCHA
     45  f679		       d0 05		      bne	SkipMoveRight
     46  f67b		       e0 80		      cpx	#128
     47  f67d		       b0 01		      bcs	SkipMoveRight
     48  f67f		       e8		      inx
     49  f680
     50  f680							; Reflect
     51  f680							;     lda #$0
     52  f680							;     sta REFP0
     53  f680				   SkipMoveRight
     54  f680		       86 86		      stx	XPos
     55  f682		       60		      rts
     56  f683
     57  f683
     58  f683				   SpeedCalculation
     59  f683		       38		      sec
     60  f684		       a5 88		      lda	Speed2
     61  f686		       e9 07		      sbc	#7
     62  f688		       85 88		      sta	Speed2
     63  f68a		       a5 87		      lda	Speed1
     64  f68c		       e9 00		      sbc	#0
     65  f68e		       85 87		      sta	Speed1
     66  f690
     67  f690		       18		      clc
     68  f691		       a5 8a		      lda	YPos2
     69  f693		       65 88		      adc	Speed2
     70  f695		       85 8a		      sta	YPos2
     71  f697		       a5 89		      lda	YPos
     72  f699		       65 87		      adc	Speed1
     73  f69b		       85 89		      sta	YPos
     74  f69d
     75  f69d		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f69f		       b0 0a		      bcs	NewThing2
     77  f6a1
     78  f6a1							; Reset to floor
     79  f6a1		       a9 3e		      lda	#FLOOR_OFFSET
     80  f6a3		       85 89		      sta	YPos
     81  f6a5		       a9 00		      lda	#0
     82  f6a7		       85 87		      sta	Speed1
     83  f6a9		       85 88		      sta	Speed2
     84  f6ab				   NewThing2
     85  f6ab
     86  f6ab		       c9 be		      cmp	#CEILING_OFFSET
     87  f6ad		       90 0a		      bcc	.next
     88  f6af
     89  f6af							; Reset to ceiling
     90  f6af		       a9 be		      lda	#CEILING_OFFSET
     91  f6b1		       85 89		      sta	YPos
     92  f6b3		       a9 00		      lda	#0
     93  f6b5		       85 87		      sta	Speed1
     94  f6b7		       85 88		      sta	Speed2
     95  f6b9				   .next
     96  f6b9		       60		      rts
     97  f6ba
     98  f6ba
     99  f6ba
    100  f6ba							; Subroutine
    101  f6ba				   SetHorizPos
    102  f6ba		       85 02		      sta	WSYNC	; start a new line
    103  f6bc		       24 00		      bit	0	; waste 3 cycles
    104  f6be		       38		      sec		; set carry flag
    105  f6bf				   DivideLoop
    106  f6bf		       e9 0f		      sbc	#15	; subtract 15
    107  f6c1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f6c3		       49 07		      eor	#7	; calculate fine offset
    109  f6c5		       0a		      asl
    110  f6c6		       0a		      asl
    111  f6c7		       0a		      asl
    112  f6c8		       0a		      asl
    113  f6c9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f6cb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f6cd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f6ce					      include	"kernel_border.s"
      1  f6ce							; Visible Kernel
      2  f6ce
      3  f6ce				   KernelBorder subroutine
      4  f6ce		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f6d0
      6  f6d0							; First HMOVE
      7  f6d0		       85 2a		      sta	HMOVE
      8  f6d2
      9  f6d2							; Border top
     10  f6d2		       a9 00		      lda	#0
     11  f6d4		       85 08		      sta	COLUPF
     12  f6d6		       85 0e		      sta	PF1
     13  f6d8		       85 0f		      sta	PF2
     14  f6da		       a9 02		      lda	#SIGNAL_LINE
     15  f6dc		       85 09		      sta	COLUBK
     16  f6de
     17  f6de					      REPEAT	6
     18  f6de		       85 02		      sta	WSYNC
     17  f6de					      REPEND
     18  f6e0		       85 02		      sta	WSYNC
     17  f6e0					      REPEND
     18  f6e2		       85 02		      sta	WSYNC
     17  f6e2					      REPEND
     18  f6e4		       85 02		      sta	WSYNC
     17  f6e4					      REPEND
     18  f6e6		       85 02		      sta	WSYNC
     17  f6e6					      REPEND
     18  f6e8		       85 02		      sta	WSYNC
     19  f6ea					      REPEND
     20  f6ea
     21  f6ea		       a9 00		      lda	#0
     22  f6ec		       85 09		      sta	COLUBK
     23  f6ee		       85 02		      sta	WSYNC
     24  f6f0
     25  f6f0							; Start top border
     26  f6f0				   border_top
     27  f6f0							; Make the playfield solid.
     28  f6f0		       a9 3f		      lda	#%00111111
     29  f6f2		       85 0e		      sta	PF1
     30  f6f4		       a9 ff		      lda	#%11111111
     31  f6f6		       85 0f		      sta	PF2
     32  f6f8
     33  f6f8		       a9 42		      lda	#COL_BG
     34  f6fa		       a0 00		      ldy	#0
     35  f6fc
     36  f6fc							; X_XXXX_XX
     37  f6fc							; Commented lines removed to save on space.
     38  f6fc		       85 08		      sta	COLUPF
     39  f6fe		       85 02		      sta	WSYNC
     40  f700		       84 08		      sty	COLUPF
     41  f702		       85 02		      sta	WSYNC
     42  f704		       85 08		      sta	COLUPF
     43  f706		       85 02		      sta	WSYNC
     44  f708							; sta COLUPF
     45  f708		       85 02		      sta	WSYNC
     46  f70a							; sta COLUPF
     47  f70a		       85 02		      sta	WSYNC
     48  f70c		       84 08		      sty	COLUPF
     49  f70e		       85 02		      sta	WSYNC
     50  f710		       85 08		      sta	COLUPF
     51  f712
     52  f712		       85 02		      sta	WSYNC
     53  f714							; sta COLUPF
     54  f714
     55  f714				   PlayArea
     56  f714							; PF is now the playing area
      0  f714					      ASSERT_RUNTIME	"_scycles == #0"
      1  f714				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f714  && !(  _scycles == #0  ) }
      2  f714					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f714					      sleep	61
      1  f714				   .CYCLES    SET	61
      2  f714
      3  f714				  -	      IF	.CYCLES < 2
      4  f714				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f714				  -	      ERR
      6  f714					      ENDIF
      7  f714
      8  f714					      IF	.CYCLES & 1
      9  f714					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f714		       04 00		      nop	0
     11  f716				  -	      ELSE
     12  f716				  -	      bit	VSYNC
     13  f716					      ENDIF
     14  f716				   .CYCLES    SET	.CYCLES - 3
     15  f716					      ENDIF
     16  f716
     17  f716					      REPEAT	.CYCLES / 2
     18  f716		       ea		      nop
     17  f716					      REPEND
     18  f717		       ea		      nop
     17  f717					      REPEND
     18  f718		       ea		      nop
     17  f718					      REPEND
     18  f719		       ea		      nop
     17  f719					      REPEND
     18  f71a		       ea		      nop
     17  f71a					      REPEND
     18  f71b		       ea		      nop
     17  f71b					      REPEND
     18  f71c		       ea		      nop
     17  f71c					      REPEND
     18  f71d		       ea		      nop
     17  f71d					      REPEND
     18  f71e		       ea		      nop
     17  f71e					      REPEND
     18  f71f		       ea		      nop
     17  f71f					      REPEND
     18  f720		       ea		      nop
     17  f720					      REPEND
     18  f721		       ea		      nop
     17  f721					      REPEND
     18  f722		       ea		      nop
     17  f722					      REPEND
     18  f723		       ea		      nop
     17  f723					      REPEND
     18  f724		       ea		      nop
     17  f724					      REPEND
     18  f725		       ea		      nop
     17  f725					      REPEND
     18  f726		       ea		      nop
     17  f726					      REPEND
     18  f727		       ea		      nop
     17  f727					      REPEND
     18  f728		       ea		      nop
     17  f728					      REPEND
     18  f729		       ea		      nop
     17  f729					      REPEND
     18  f72a		       ea		      nop
     17  f72a					      REPEND
     18  f72b		       ea		      nop
     17  f72b					      REPEND
     18  f72c		       ea		      nop
     17  f72c					      REPEND
     18  f72d		       ea		      nop
     17  f72d					      REPEND
     18  f72e		       ea		      nop
     17  f72e					      REPEND
     18  f72f		       ea		      nop
     17  f72f					      REPEND
     18  f730		       ea		      nop
     17  f730					      REPEND
     18  f731		       ea		      nop
     17  f731					      REPEND
     18  f732		       ea		      nop
     19  f733					      REPEND
     59  f733		       a9 00		      lda	#%00000000
     60  f735		       85 0d		      sta	PF0
     61  f737		       a9 20		      lda	#%00100000
     62  f739		       85 0e		      sta	PF1
     63  f73b		       a9 00		      lda	#%00000000
     64  f73d		       85 0f		      sta	PF2
      0  f73f					      ASSERT_RUNTIME	"_scycles == #0"
      1  f73f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f73f  && !(  _scycles == #0  ) }
      2  f73f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f73f					      sleep	7
      1  f73f				   .CYCLES    SET	7
      2  f73f
      3  f73f				  -	      IF	.CYCLES < 2
      4  f73f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f73f				  -	      ERR
      6  f73f					      ENDIF
      7  f73f
      8  f73f					      IF	.CYCLES & 1
      9  f73f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f73f		       04 00		      nop	0
     11  f741				  -	      ELSE
     12  f741				  -	      bit	VSYNC
     13  f741					      ENDIF
     14  f741				   .CYCLES    SET	.CYCLES - 3
     15  f741					      ENDIF
     16  f741
     17  f741					      REPEAT	.CYCLES / 2
     18  f741		       ea		      nop
     17  f741					      REPEND
     18  f742		       ea		      nop
     19  f743					      REPEND
     67  f743		       4c 75 f7 	      jmp	row_start
     68  f746							; enter row on cycle 10.
     69  f746
     70  f746							; reset the background for bottom of playfield
     71  f746				   border_bottom
     72  f746							;sta WSYNC
     73  f746
     74  f746							; Form the bottom of the level frame.
     75  f746		       a9 3f		      lda	#%00111111
     76  f748		       85 0e		      sta	PF1
     77  f74a		       a9 ff		      lda	#%11111111
     78  f74c		       85 0f		      sta	PF2
     79  f74e
     80  f74e							; Clear all sprites.
     81  f74e		       a9 00		      lda	#0
     82  f750		       85 1c		      sta	EMERALD_SP
     83  f752		       85 1b		      sta	JET_SP
     84  f754		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f756
     86  f756		       a9 42		      lda	#COL_BG
     87  f758		       a0 00		      ldy	#0
     88  f75a		       85 02		      sta	WSYNC
     89  f75c
     90  f75c		       84 08		      sty	COLUPF
     91  f75e		       85 02		      sta	WSYNC
     92  f760
     93  f760		       85 08		      sta	COLUPF
     94  f762		       85 02		      sta	WSYNC
     95  f764
     96  f764		       85 02		      sta	WSYNC
     97  f766
     98  f766		       85 02		      sta	WSYNC
     99  f768
    100  f768		       84 08		      sty	COLUPF
    101  f76a		       85 02		      sta	WSYNC
    102  f76c
    103  f76c		       85 08		      sta	COLUPF
    104  f76e		       85 02		      sta	WSYNC
    105  f770		       85 02		      sta	WSYNC
    106  f772		       4c 00 f6 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f775					      include	"kernel_row.s"
      1  f775							; Frame Start
      2  f775
      3  f775							; Macros for calculating sprite values (GRPx).
      4  f775
      5  f775							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f775					      mac	kernel_load_player
      7  f775							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f775					      dcp	SpriteEnd	; 5c
      9  f775					      ldy	#0	; 2c
     10  f775							; constant 6c:
     11  f775					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f775					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f775					      ldy	SpriteEnd
     14  f775							; 4c
     15  f775					      ldx	Frame0,Y
     16  f775					      endm
     17  f775
     18  f775							; mac jet_spritedata_calc
     19  f775							;
     20  f775							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f775							; GRP0.
     22  f775					      mac	jet_spritedata_calc
     23  f775							; loader
     24  f775					      lda	#SPRITE_HEIGHT
     25  f775					      dcp	SpriteEnd
     26  f775					      ldy	SpriteEnd
     27  f775
     28  f775							; 4c
     29  f775							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f775							; from Frame0 + Y must never cross a page boundary.
     31  f775					      lda	Frame0,Y
     32  f775							; 6c
     33  f775					      .byte	$b0, $01	;2c / 3c (taken)
     34  f775					      .byte	$2c	; 4c / 0c
     35  f775					      sta	JET_SP	; 0c / 3c
     36  f775					      endm
     37  f775
     38  f775				   row_start
     39  f775
     40  f775							; [scanline 1]
     41  f775				   row_1
     42  f775							; Enter after scanline starts on row "9" and wraps
      0  f775					      ASSERT_RUNTIME	"_scycles == #10"
      1  f775				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f775  && !(  _scycles == #10  ) }
      2  f775					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f775
      0  f775					      jet_spritedata_calc
      1  f775
      2  f775		       a9 09		      lda	#SPRITE_HEIGHT
      3  f777		       c7 85		      dcp	SpriteEnd
      4  f779		       a4 85		      ldy	SpriteEnd
      5  f77b
      6  f77b
      7  f77b
      8  f77b
      9  f77b		       b9 00 fa 	      lda	Frame0,Y
     10  f77e
     11  f77e		       b0 01		      .byte.b	$b0, $01
     12  f780		       2c		      .byte.b	$2c
     13  f781		       85 1b		      sta	JET_SP
     46  f783
     47  f783							; [[[Nibble VM.]]]
     48  f783		       85 02		      sta	WSYNC
     49  f785
     50  f785							; sleep 46
     51  f785
      0  f785					      ASSERT_RUNTIME	"_scycles == #0"
      1  f785				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f785  && !(  _scycles == #0  ) }
      2  f785					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f785
     54  f785							; [scanline 2]
     55  f785				   row_2
      0  f785					      jet_spritedata_calc
      1  f785
      2  f785		       a9 09		      lda	#SPRITE_HEIGHT
      3  f787		       c7 85		      dcp	SpriteEnd
      4  f789		       a4 85		      ldy	SpriteEnd
      5  f78b
      6  f78b
      7  f78b
      8  f78b
      9  f78b		       b9 00 fa 	      lda	Frame0,Y
     10  f78e
     11  f78e		       b0 01		      .byte.b	$b0, $01
     12  f790		       2c		      .byte.b	$2c
     13  f791		       85 1b		      sta	JET_SP
     57  f793
     58  f793							; Black out playfield
     59  f793							; TODO This should be done with playfield pixels, not color.
     60  f793		       a9 00		      lda	#0
     61  f795		       85 08		      sta	COLUPF
     62  f797
     63  f797							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  f797		       a6 97		      ldx	RamKernelPhpTarget
     65  f799		       9a		      txs
     66  f79a
     67  f79a							; [[[Nibble VM.]]]
      0  f79a					      sleep	30
      1  f79a				   .CYCLES    SET	30
      2  f79a
      3  f79a				  -	      IF	.CYCLES < 2
      4  f79a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f79a				  -	      ERR
      6  f79a					      ENDIF
      7  f79a
      8  f79a				  -	      IF	.CYCLES & 1
      9  f79a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f79a				  -	      nop	0
     11  f79a				  -	      ELSE
     12  f79a				  -	      bit	VSYNC
     13  f79a				  -	      ENDIF
     14  f79a				  -.CYCLES    SET	.CYCLES - 3
     15  f79a					      ENDIF
     16  f79a
     17  f79a					      REPEAT	.CYCLES / 2
     18  f79a		       ea		      nop
     17  f79a					      REPEND
     18  f79b		       ea		      nop
     17  f79b					      REPEND
     18  f79c		       ea		      nop
     17  f79c					      REPEND
     18  f79d		       ea		      nop
     17  f79d					      REPEND
     18  f79e		       ea		      nop
     17  f79e					      REPEND
     18  f79f		       ea		      nop
     17  f79f					      REPEND
     18  f7a0		       ea		      nop
     17  f7a0					      REPEND
     18  f7a1		       ea		      nop
     17  f7a1					      REPEND
     18  f7a2		       ea		      nop
     17  f7a2					      REPEND
     18  f7a3		       ea		      nop
     17  f7a3					      REPEND
     18  f7a4		       ea		      nop
     17  f7a4					      REPEND
     18  f7a5		       ea		      nop
     17  f7a5					      REPEND
     18  f7a6		       ea		      nop
     17  f7a6					      REPEND
     18  f7a7		       ea		      nop
     17  f7a7					      REPEND
     18  f7a8		       ea		      nop
     19  f7a9					      REPEND
     69  f7a9
     70  f7a9							; Load PF1 value
     71  f7a9		       a9 a0		      lda	#%10100000
     72  f7ab		       85 95		      sta	RamPF1Value
     73  f7ad
     74  f7ad		       a9 04		      lda	#4
     75  f7af		       8d 96 02 	      sta	TIM64T
     76  f7b2
     77  f7b2							; Enable playfield at end of scanline
     78  f7b2		       a9 42		      lda	#COL_BG
     79  f7b4		       85 08		      sta	COLUPF
     80  f7b6
     81  f7b6							; lda #%00001000
     82  f7b6							; sta REFP1
     83  f7b6
      0  f7b6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f7b6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f7b6  && !(  _scycles == #0  ) }
      2  f7b6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f7b6
     86  f7b6							; [scanline 3]
     87  f7b6				   row_3
      0  f7b6					      jet_spritedata_calc
      1  f7b6
      2  f7b6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f7b8		       c7 85		      dcp	SpriteEnd
      4  f7ba		       a4 85		      ldy	SpriteEnd
      5  f7bc
      6  f7bc
      7  f7bc
      8  f7bc
      9  f7bc		       b9 00 fa 	      lda	Frame0,Y
     10  f7bf
     11  f7bf		       b0 01		      .byte.b	$b0, $01
     12  f7c1		       2c		      .byte.b	$2c
     13  f7c2		       85 1b		      sta	JET_SP
     89  f7c4
     90  f7c4							; Pre-populate graphics.
     91  f7c4		       a9 09		      lda	#SPRITE_HEIGHT
      0  f7c6					      KERNEL_LOAD_PLAYER
      1  f7c6
      2  f7c6		       c7 85		      dcp	SpriteEnd
      3  f7c8		       a0 00		      ldy	#0
      4  f7ca
      5  f7ca		       b0 01		      .byte.b	$b0, $01
      6  f7cc		       2c		      .byte.b	$2c
      7  f7cd		       a4 85		      ldy	SpriteEnd
      8  f7cf
      9  f7cf		       be 00 fa 	      ldx	Frame0,Y
     93  f7d2		       86 96		      stx	RamKernelGRP0
      0  f7d4					      KERNEL_LOAD_PLAYER
      1  f7d4
      2  f7d4		       c7 85		      dcp	SpriteEnd
      3  f7d6		       a0 00		      ldy	#0
      4  f7d8
      5  f7d8		       b0 01		      .byte.b	$b0, $01
      6  f7da		       2c		      .byte.b	$2c
      7  f7db		       a4 85		      ldy	SpriteEnd
      8  f7dd
      9  f7dd		       be 00 fa 	      ldx	Frame0,Y
     95  f7e0		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f7e3		       a5 96		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  f7e5					      sleep	2
      1  f7e5				   .CYCLES    SET	2
      2  f7e5
      3  f7e5				  -	      IF	.CYCLES < 2
      4  f7e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7e5				  -	      ERR
      6  f7e5					      ENDIF
      7  f7e5
      8  f7e5				  -	      IF	.CYCLES & 1
      9  f7e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7e5				  -	      nop	0
     11  f7e5				  -	      ELSE
     12  f7e5				  -	      bit	VSYNC
     13  f7e5				  -	      ENDIF
     14  f7e5				  -.CYCLES    SET	.CYCLES - 3
     15  f7e5					      ENDIF
     16  f7e5
     17  f7e5					      REPEAT	.CYCLES / 2
     18  f7e5		       ea		      nop
     19  f7e6					      REPEND
     98  f7e6
     99  f7e6							; [scanlines 4-5]
    100  f7e6							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  f7e6		       a6 98		      ldx	RamKernelX
    102  f7e8		       38		      sec
      0  f7e9					      ASSERT_RUNTIME	"_scycles == #73"
      1  f7e9				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f7e9  && !(  _scycles == #73  ) }
      2  f7e9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f7e9		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  f7ec
    106  f7ec							; [scanline 6]
    107  f7ec
    108  f7ec							; Try to avoid page crossing in jet_spritedata_calc
    109  f7ec							; TODO enforce this with ASSERT_RUNTIME instead?
    110  f7f0		       00 00 00 00	      align	16
    111  f7f0
    112  f7f0				   row_after_kernel
    113  f7f0				   row_6
      0  f7f0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f7f0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f7f0  && !(  _scycles == #0  ) }
      2  f7f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  f7f0
    116  f7f0							; Cleanup from the kernel.
    117  f7f0		       a9 00		      lda	#0
    118  f7f2		       85 1e		      sta	EMERALD_MI_ENABLE
    119  f7f4		       85 1c		      sta	EMERALD_SP
    120  f7f6		       85 08		      sta	COLUPF
    121  f7f8		       85 26		      sta	VDELP1
    122  f7fa
      0  f7fa					      jet_spritedata_calc
      1  f7fa
      2  f7fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f7fc		       c7 85		      dcp	SpriteEnd
      4  f7fe		       a4 85		      ldy	SpriteEnd
      5  f800
      6  f800
      7  f800
      8  f800
      9  f800		       b9 00 fa 	      lda	Frame0,Y
     10  f803
     11  f803		       b0 01		      .byte.b	$b0, $01
     12  f805		       2c		      .byte.b	$2c
     13  f806		       85 1b		      sta	JET_SP
    124  f808
    125  f808							; Idle.
    126  f808		       85 02		      sta	WSYNC
    127  f80a
    128  f80a							; [scanline 7]
    129  f80a				   row_7
      0  f80a					      jet_spritedata_calc
      1  f80a
      2  f80a		       a9 09		      lda	#SPRITE_HEIGHT
      3  f80c		       c7 85		      dcp	SpriteEnd
      4  f80e		       a4 85		      ldy	SpriteEnd
      5  f810
      6  f810
      7  f810
      8  f810
      9  f810		       b9 00 fa 	      lda	Frame0,Y
     10  f813
     11  f813		       b0 01		      .byte.b	$b0, $01
     12  f815		       2c		      .byte.b	$2c
     13  f816		       85 1b		      sta	JET_SP
    131  f818
    132  f818		       a9 42		      lda	#COL_BG
    133  f81a		       85 08		      sta	COLUPF
    134  f81c
    135  f81c							; FRAMESWITCH
    136  f81c		       a9 01		      lda	#01
    137  f81e		       25 83		      and	FrameCount
    138  f820		       d0 13		      bne	loadframe2
    139  f822
    140  f822							; Perform gem loading for Kernel A.
    141  f822
    142  f822				   loadframe1
      0  f822					      ASSERT_RUNTIME	"_scycles == #32"
      1  f822				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f822  && !(  _scycles == #32  ) }
      2  f822					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f822
    145  f822							; Emerald byte setting 1A
    146  f822							; ldx #0
    147  f822							; lda KERNEL_STORAGE_R,X
    148  f822							; sta GEM_00_W
    149  f822							; inx
    150  f822							; lda KERNEL_STORAGE_R,X
    151  f822							; sta GEM_04_W
    152  f822							; inx
    153  f822							; lda KERNEL_STORAGE_R,X
    154  f822							; sta GEM_09_W
    155  f822							; inx
    156  f822
    157  f822		       85 02		      sta	WSYNC
    158  f824
    159  f824							; [scanline 8]
      0  f824					      jet_spritedata_calc
      1  f824
      2  f824		       a9 09		      lda	#SPRITE_HEIGHT
      3  f826		       c7 85		      dcp	SpriteEnd
      4  f828		       a4 85		      ldy	SpriteEnd
      5  f82a
      6  f82a
      7  f82a
      8  f82a
      9  f82a		       b9 00 fa 	      lda	Frame0,Y
     10  f82d
     11  f82d		       b0 01		      .byte.b	$b0, $01
     12  f82f		       2c		      .byte.b	$2c
     13  f830		       85 1b		      sta	JET_SP
    161  f832
    162  f832							; Emerald byte setting 1B
    163  f832							; lda KERNEL_STORAGE_R,X
    164  f832							; sta GEM_13_W
    165  f832							; inx
    166  f832							; lda KERNEL_STORAGE_R,X
    167  f832							; sta GEM_17_W
    168  f832							; inx
    169  f832							; lda KERNEL_STORAGE_R,X
    170  f832							; sta GEM_18_W
    171  f832							; inx
    172  f832							; lda KERNEL_STORAGE_R,X
    173  f832							; sta GEM_22_W
    174  f832
    175  f832		       4c 48 f8 	      jmp	row_8_end
    176  f835
    177  f835							; Perform gem loading for Kernel B.
    178  f835
    179  f835				   loadframe2
      0  f835					      ASSERT_RUNTIME	"_scycles == #33"
      1  f835				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f835  && !(  _scycles == #33  ) }
      2  f835					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f835
    182  f835							; Emerald byte setting 2A
    183  f835							; ldx #[storage_02 - storage]
    184  f835							; lda KERNEL_STORAGE_R,X
    185  f835							; sta GEM_02_W
    186  f835							; inx
    187  f835							; lda KERNEL_STORAGE_R,X
    188  f835							; sta GEM_06_W
    189  f835							; inx
    190  f835							; lda KERNEL_STORAGE_R,X
    191  f835							; sta GEM_08_W
    192  f835							; inx
    193  f835
    194  f835		       85 02		      sta	WSYNC
    195  f837
    196  f837							; [scanline 8]
    197  f837				   row_8
      0  f837					      jet_spritedata_calc
      1  f837
      2  f837		       a9 09		      lda	#SPRITE_HEIGHT
      3  f839		       c7 85		      dcp	SpriteEnd
      4  f83b		       a4 85		      ldy	SpriteEnd
      5  f83d
      6  f83d
      7  f83d
      8  f83d
      9  f83d		       b9 00 fa 	      lda	Frame0,Y
     10  f840
     11  f840		       b0 01		      .byte.b	$b0, $01
     12  f842		       2c		      .byte.b	$2c
     13  f843		       85 1b		      sta	JET_SP
    199  f845
    200  f845							; Emerald byte setting 2B
    201  f845							; lda KERNEL_STORAGE_R,X
    202  f845							; sta GEM_11_W
    203  f845							; inx
    204  f845							; lda KERNEL_STORAGE_R,X
    205  f845							; sta GEM_15_W
    206  f845							; inx
    207  f845							; lda KERNEL_STORAGE_R,X
    208  f845							; sta GEM_20_W
    209  f845							; inx
    210  f845							; lda KERNEL_STORAGE_R,X
    211  f845							; sta GEM_24_W
    212  f845
    213  f845		       4c 48 f8 	      jmp	row_8_end
    214  f848
    215  f848							; Common row 8 return.
    216  f848
    217  f848				   row_8_end
    218  f848							; Idle.
    219  f848		       85 02		      sta	WSYNC
    220  f84a
    221  f84a							; [scanline 8]
    222  f84a							; Repeat loop until LoopCount < 0
    223  f84a		       c6 82		      dec	LoopCount
    224  f84c		       30 03		      bmi	row_end
    225  f84e		       4c 75 f7 	      jmp	row_start
    226  f851				   row_end
    227  f851		       4c 46 f7 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f854					      include	"kernel_gem.s"
      1  f854							;
      2  f854							; Gem Kernels
      3  f854							;
      4  f854							; Gems are displayed in alternating kernels. This chart shows
      5  f854							; which kernel is responsible for which gem, with missiles denoted.
      6  f854							;
      7  f854							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f854							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f854							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f854							;  #	 0^	 8^	  17^	    26^       gem index
     11  f854							;
     12  f854							; The middle bar indicates where the pattern reverses.
     13  f854							;
     14  f854							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f854							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f854							; requires with a single sprite. By alternating sprites each frame with an...
     17  f854							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f854							; line, except for two. These are instead rendered by the missile, which
     19  f854							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f854
     21  f854							; for copying
     22  f900		       00 00 00 00*	      align	256
     23  f900
     24  f900							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f900							;
     26  f900							; GEM KERNEL A
     27  f900							;
     28  f900
     29  f900				   kernel_1_start subroutine
     30  f900					      rorg	$f100
     31  f900
     32  f900							; Kernel Marker
     33  f900		       0a		      .byte.b	$A
     34  f901
     35  f901				   KernelA_early
     36  f901							; Early code to set next GRP0 image. Immediate value is overwritten
     37  f901		       a9 ff		      lda	#$ff
     38  f903
     39  f903				   KernelA    subroutine
      0  f903					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  f903				   .KERNEL    SET	$A
      2  f903				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  f903					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  f903
     42  f903							; Write Gemini 0A into delayed sprite register
     43  f903		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  f903		       f1 04	   KernelA_VDEL1 =	. - 1
     45  f905		       84 1c		      sty	EMERALD_SP
     46  f907							; Write Player from accumulator. When writing to the other sprite, the
     47  f907							; TIA will copy Gemini 0A into visible sprite register
     48  f907		       85 1b		      sta	JET_SP
     49  f909							; Write Gemini 1A into visible sprite register
     50  f909		       a0 66		      ldy	#%01100110
     51  f909		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  f90b		       84 1c		      sty	EMERALD_SP
     53  f90d		       a0 06		      ldy	#%00000110	; TODO temporary?
     54  f90d		       f1 0e	   KernelA_STY =	. - 1
     55  f90f
     56  f90f							; Need D0 for VDELP1 trigger with PHP
      0  f90f					      sleep	2
      1  f90f				   .CYCLES    SET	2
      2  f90f
      3  f90f				  -	      IF	.CYCLES < 2
      4  f90f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f90f				  -	      ERR
      6  f90f					      ENDIF
      7  f90f
      8  f90f				  -	      IF	.CYCLES & 1
      9  f90f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f90f				  -	      nop	0
     11  f90f				  -	      ELSE
     12  f90f				  -	      bit	VSYNC
     13  f90f				  -	      ENDIF
     14  f90f				  -.CYCLES    SET	.CYCLES - 3
     15  f90f					      ENDIF
     16  f90f
     17  f90f					      REPEAT	.CYCLES / 2
     18  f90f		       ea		      nop
     19  f910					      REPEND
     58  f910
     59  f910							; Register config
     60  f910		       a9 08		      lda	#%00001000
     61  f912							; sta EMERALD_MI_ENABLE ; disable missile FIXME this should be uncommented!
     62  f912		       85 0c		      sta	REFP1
     63  f914
     64  f914							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f914					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  f914				   .KERNEL    SET	$A
      2  f914				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  f914					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  f914				   KernelA_A
     67  f914		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  f916
     69  f916							; vvv RST0
     70  f916				   KernelA_B
     71  f916		       a5 95		      lda	RamPF1Value
     72  f918				   KernelA_C
     73  f918		       84 26		      sty	VDELP1	; disable delayed sprite
     74  f91a				   KernelA_D
     75  f91a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  f91a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  f91a				   .CYCLES    SET	3
      2  f91a
      3  f91a				  -	      IF	.CYCLES < 2
      4  f91a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f91a				  -	      ERR
      6  f91a					      ENDIF
      7  f91a
      8  f91a					      IF	.CYCLES & 1
      9  f91a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f91a		       04 00		      nop	0
     11  f91c				  -	      ELSE
     12  f91c				  -	      bit	VSYNC
     13  f91c					      ENDIF
     14  f91c				   .CYCLES    SET	.CYCLES - 3
     15  f91c					      ENDIF
     16  f91c
     17  f91c				  -	      REPEAT	.CYCLES / 2
     18  f91c				  -	      nop
     19  f91c					      REPEND
     77  f91c				   KernelA_E
     78  f91c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     79  f91e				   KernelA_F
     80  f91e							; sty EMERALD_MI_ENABLE ; Enable the missile (if we use %0xx00110 pattern)
      0  f91e					      sleep	3	; FIXME This should be uncommented!
      1  f91e				   .CYCLES    SET	3
      2  f91e
      3  f91e				  -	      IF	.CYCLES < 2
      4  f91e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f91e				  -	      ERR
      6  f91e					      ENDIF
      7  f91e
      8  f91e					      IF	.CYCLES & 1
      9  f91e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f91e		       04 00		      nop	0
     11  f920				  -	      ELSE
     12  f920				  -	      bit	VSYNC
     13  f920					      ENDIF
     14  f920				   .CYCLES    SET	.CYCLES - 3
     15  f920					      ENDIF
     16  f920
     17  f920				  -	      REPEAT	.CYCLES / 2
     18  f920				  -	      nop
     19  f920					      REPEND
     82  f920				   KernelA_G
     83  f920		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     84  f922
     85  f922				   KernelA_H
     86  f922		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     87  f924
      0  f924					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  f924				   .KERNEL    SET	$A
      2  f924				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  f924					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     89  f924							; RST4 vvv
     90  f924				   KernelA_I
     91  f924		       08		      php		; Reset "medium close" NUSIZ repetition
     92  f925				   KernelA_J		; unchanging
     93  f925		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     94  f927				   KernelA_K
     95  f927		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     96  f929							; RST4 ^^^
     97  f929
     98  f929				   KernelA_L
      0  f929					      sleep	3	; when possible, sta VDELP0
      1  f929				   .CYCLES    SET	3
      2  f929
      3  f929				  -	      IF	.CYCLES < 2
      4  f929				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f929				  -	      ERR
      6  f929					      ENDIF
      7  f929
      8  f929					      IF	.CYCLES & 1
      9  f929					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f929		       04 00		      nop	0
     11  f92b				  -	      ELSE
     12  f92b				  -	      bit	VSYNC
     13  f92b					      ENDIF
     14  f92b				   .CYCLES    SET	.CYCLES - 3
     15  f92b					      ENDIF
     16  f92b
     17  f92b				  -	      REPEAT	.CYCLES / 2
     18  f92b				  -	      nop
     19  f92b					      REPEND
    100  f92b				   KernelA_M
    101  f92b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    102  f92d
    103  f92d				   KernelA_N
    104  f92d				   KernelA_O
      0  f92d					      sleep	2
      1  f92d				   .CYCLES    SET	2
      2  f92d
      3  f92d				  -	      IF	.CYCLES < 2
      4  f92d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f92d				  -	      ERR
      6  f92d					      ENDIF
      7  f92d
      8  f92d				  -	      IF	.CYCLES & 1
      9  f92d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f92d				  -	      nop	0
     11  f92d				  -	      ELSE
     12  f92d				  -	      bit	VSYNC
     13  f92d				  -	      ENDIF
     14  f92d				  -.CYCLES    SET	.CYCLES - 3
     15  f92d					      ENDIF
     16  f92d
     17  f92d					      REPEAT	.CYCLES / 2
     18  f92d		       ea		      nop
     19  f92e					      REPEND
    106  f92e							; reset stack pointer
    107  f92e		       68		      pla
    108  f92f
    109  f92f							; End visible line
      0  f92f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  f92f				   .KERNEL    SET	$A
      2  f92f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  f92f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  f92f
    112  f92f				   KernelA_branch
    113  f92f		       ad 84 02 	      lda	INTIM
    114  f932		       d0 cd		      bne	KernelA_early
    115  f934
    116  f934		       4c f0 f7 	      jmp	row_after_kernel
    117  f937
    118  f937					      rend
    119  f937				   kernel_1_end
      0  f937					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f937				   .STARTA    SET	kernel_1_start
      2  f937				   .ENDA      SET	kernel_1_end
      3  f937				   .LEN       SET	$40
      4  f937				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f937				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f937				  -	      err
      7  f937					      endif
    121  f937
    122  f937							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f937							;
    124  f937							; GEM KERNEL B
    125  f937							;
    126  f937
    127  f937				   kernel_2_start subroutine
    128  f937					      rorg	$f100
    129  f937
    130  f937							; Kernel Marker
    131  f937		       0b		      .byte.b	$B
    132  f938
    133  f938				   KernelB_early
    134  f938							; Early code to set next GRP0 image. Value is overwritten
    135  f938		       a9 ff		      lda	#$ff
    136  f93a
    137  f93a				   KernelB    subroutine
      0  f93a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  f93a				   .KERNEL    SET	$B
      2  f93a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  f93a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    139  f93a
    140  f93a							; Write Gemini 0A into delayed sprite register
    141  f93a		       84 1c		      sty	EMERALD_SP
    142  f93c							; Write Player from accumulator. When writing to the other sprite, the
    143  f93c							; TIA will copy Gemini 0A into visible sprite register
    144  f93c		       85 1b		      sta	JET_SP
    145  f93e							; Write Gemini 1A into delayed sprite register
    146  f93e		       84 1c		      sty	EMERALD_SP
    147  f940
    148  f940							; Register config
    149  f940		       a9 ff		      lda	#$ff
    150  f942		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    151  f944		       8d 26 00 	      sta.w	VDELP1	; enable delayed sprite
    152  f947
    153  f947		       a0 ff		      ldy	#$ff
    154  f947		       f1 11	   KernelB_STY =	. - 1
    155  f949
    156  f949							; Clear bits in processor status register for drawing.
    157  f949		       18		      clc
    158  f94a		       24 93		      bit	RamLowerSixByte
    159  f94c
    160  f94c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f94c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  f94c				   .KERNEL    SET	$B
      2  f94c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  f94c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    162  f94c				   KernelB_A
    163  f94c		       85 11		      sta	EMERALD_SP_RESET
    164  f94e				   KernelB_B
    165  f94e							; Load PF1 value into accumulator
    166  f94e		       a5 95		      lda	RamPF1Value
    167  f950				   KernelB_C
      0  f950					      sleep	3
      1  f950				   .CYCLES    SET	3
      2  f950
      3  f950				  -	      IF	.CYCLES < 2
      4  f950				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f950				  -	      ERR
      6  f950					      ENDIF
      7  f950
      8  f950					      IF	.CYCLES & 1
      9  f950					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f950		       04 00		      nop	0
     11  f952				  -	      ELSE
     12  f952				  -	      bit	VSYNC
     13  f952					      ENDIF
     14  f952				   .CYCLES    SET	.CYCLES - 3
     15  f952					      ENDIF
     16  f952
     17  f952				  -	      REPEAT	.CYCLES / 2
     18  f952				  -	      nop
     19  f952					      REPEND
    169  f952				   KernelB_D
    170  f952		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    171  f954
    172  f954							; below has one php load (could just be RESET)
    173  f954				   KernelB_E
    174  f954		       08		      php
    175  f955				   KernelB_F
    176  f955		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    177  f957				   KernelB_G
    178  f957		       85 0e		      sta	PF1
    179  f959				   KernelB_H
    180  f959		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    181  f95b							; above has one PHP load
    182  f95b
    183  f95b				   KernelB_I
    184  f95b		       85 11		      sta	EMERALD_SP_RESET
    185  f95d				   KernelB_J
    186  f95d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    187  f95f				   KernelB_K
    188  f95f		       86 1e		      stx	EMERALD_MI_ENABLE
    189  f961				   KernelB_L
    190  f961		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    191  f963
    192  f963				   KernelB_M
    193  f963				   KernelB_N
      0  f963					      sleep	2
      1  f963				   .CYCLES    SET	2
      2  f963
      3  f963				  -	      IF	.CYCLES < 2
      4  f963				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f963				  -	      ERR
      6  f963					      ENDIF
      7  f963
      8  f963				  -	      IF	.CYCLES & 1
      9  f963				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f963				  -	      nop	0
     11  f963				  -	      ELSE
     12  f963				  -	      bit	VSYNC
     13  f963				  -	      ENDIF
     14  f963				  -.CYCLES    SET	.CYCLES - 3
     15  f963					      ENDIF
     16  f963
     17  f963					      REPEAT	.CYCLES / 2
     18  f963		       ea		      nop
     19  f964					      REPEND
    195  f964
    196  f964							; reset stack pointer
    197  f964		       68		      pla
    198  f965
    199  f965							; End visible line
      0  f965					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f965				   .KERNEL    SET	$B
      2  f965				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  f965					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    201  f965
    202  f965				   KernelB_branch
    203  f965		       ad 84 02 	      lda	INTIM
    204  f968		       d0 ce		      bne	KernelB_early
    205  f96a		       4c f0 f7 	      jmp	row_after_kernel
    206  f96d
    207  f96d					      rend
    208  f96d				   kernel_2_end
      0  f96d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f96d				   .STARTA    SET	kernel_2_start
      2  f96d				   .ENDA      SET	kernel_2_end
      3  f96d				   .LEN       SET	$40
      4  f96d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f96d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f96d				  -	      err
      7  f96d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f96d					      include	"data_sprites.s"
      1  fa00		       00 00 00 00*	      align	256
      2  fa00
      3  fa00							; Player
      4  fa00				   Frame0
      5  fa00		       00		      .byte.b	#%00000000
      6  fa01		       60		      .byte.b	#%01100000
      7  fa02		       60		      .byte.b	#%01100000
      8  fa03		       60		      .byte.b	#%01100000
      9  fa04		       c0		      .byte.b	#%11000000
     10  fa05		       c0		      .byte.b	#%11000000
     11  fa06		       f0		      .byte.b	#%11110000
     12  fa07		       c0		      .byte.b	#%11000000
     13  fa08		       c0		      .byte.b	#%11000000
     14  fa09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fa0a					      include	"data_levels.s"
      1  fa10		       00 00 00 00*	      align	8
      2  fa10							; first bit of byte 2 & 3 are unused for simplicity
      3  fa10
      4  fa10				   level_00
      5  fa10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fa14
      7  fa14				   level_01
      8  fa14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fa18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fa1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fa20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fa24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fa28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fa2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fa30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fa34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fa38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fa3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fa40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fa44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fa48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fa4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fa50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fa54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fa58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fa5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fa60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fa64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fa68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fa6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fa70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fa74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fa78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fa7c				   level_01_end
     35  fa7c
     36  fa7c
     37  fa7c				   shard_map
     38  fa7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fa7d				   shard_map_end
------- FILE main.s
    125  fa7d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
