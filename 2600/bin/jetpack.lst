------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       endm
      6  10000 ????				       mac	nibble_if
      7  10000 ????				       ror
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       endm
     19  10000 ????
     20  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     21  10000 ????				       mac	assert_runtime
     22  10000 ????			    .COND      SET	{1}
     23  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     24  10000 ????				       endm
     25  10000 ????
     26  10000 ????
     27  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     28  10000 ????				       mac	assert_runtime_kernel
     29  10000 ????			    .KERNEL    SET	{1}
     30  10000 ????			    .COND      SET	{2}
     31  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     32  10000 ????				       endm
     33  10000 ????
     34  10000 ????						; Static assertions for size
     35  10000 ????				       mac	assert_size
     36  10000 ????			    .STARTA    SET	{1}
     37  10000 ????			    .ENDA      SET	{2}
     38  10000 ????			    .LEN       SET	{3}
     39  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     40  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     41  10000 ????				       err
     42  10000 ????				       endif
     43  10000 ????				       endm
     44  10000 ????				       mac	assert_size_exact
     45  10000 ????			    .STARTA    SET	{1}
     46  10000 ????			    .ENDA      SET	{2}
     47  10000 ????			    .LEN       SET	{3}
     48  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     49  10000 ????				       echo	""
     50  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     51  10000 ????				       err
     52  10000 ????				       endif
     53  10000 ????				       endm
     54  10000 ????
     55  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     59  0000 ????
     60  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U0096 ????				      seg.u	Variables
      2 U0096 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   KERNEL_TEMP_A byte.b
     31 U0090
     32 U0090		       00	   RamZeroByte byte.b
     33 U0091		       00	   RamLowerSixByte byte.b
     34 U0092		       00	   RamPF1Value byte.b
     35 U0093		       00	   RamKernelGRP0 byte.b		; temp
     36 U0094		       00	   RamStackBkp byte.b
     37 U0095		       00	   RamKernelPhpTarget byte.b
     38 U0096
     39 U0096							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U0096
     41 U0096		       00 10	   ROW_COUNT  =	16
     42 U0096
     43 U0096		       00 02	   SIGNAL_LINE =	$02
     44 U0096
     45 U0096							; RAM+ memory map
     46 U0096		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     47 U0096		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     48 U0096		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     49 U0096
     50 U0096		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     51 U0096		       f1 40	   RAMP_STORAGE_R =	$f140
     52 U0096
     53 U0096							; NUSIZ values
     54 U0096
     55 U0096		       00 13	   THREE_COPIES =	%00010011
     56 U0096
     57 U0096							; Colors
     58 U0096
     59 U0096		       00 42	   COL_BG     equ	$42
     60 U0096		       00 cc	   COL_EMERALD equ	$CC
     61 U0096		       00 cc	   COL_EMERALD_2 equ	$CC
     62 U0096
     63 U0096							; HMOVE values for missiles
     64 U0096
     65 U0096		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     66 U0096		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     67 U0096
     68 U0096		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     69 U0096		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     70 U0096
     71 U0096							; Sprite details
     72 U0096
     73 U0096		       00 09	   SPRITE_HEIGHT equ	9
     74 U0096
     75 U0096		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     76 U0096		       00 1c	   EMERALD_SP equ	GRP1
     77 U0096		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     78 U0096		       00 11	   EMERALD_SP_RESET equ	RESP1
     79 U0096		       00 13	   EMERALD_MI_RESET equ	RESM1
     80 U0096		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     81 U0096		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     82 U0096		       00 05	   EMERALD_COPIES equ	NUSIZ1
     83 U0096
     84 U0096		       00 1b	   JET_SP     equ	GRP0
     85 U0096		       00 10	   JET_SP_RESET equ	RESP0
     86 U0096		       00 20	   JET_SP_HMOVE equ	HMP0
     87 U0096		       00 06	   JET_SP_COLOR equ	COLUP0
     88 U0096
     89 U0096							; Spriteend is HEIGHT_OFFSET - YPos
     90 U0096		       00 c8	   HEIGHT_OFFSET equ	200
     91 U0096
     92 U0096							; Compared with YPos
     93 U0096		       00 3e	   FLOOR_OFFSET equ	62
     94 U0096		       00 be	   CEILING_OFFSET equ	190
     95 U0096
     96 U0096							; Starting player position
     97 U0096		       00 3e	   YPosStart  equ	62
     98 U0096		       00 37	   XPosStart  equ	55
     99 U0096
    100 U0096							; Top left corner
    101 U0096							; YPosStart equ 190
    102 U0096							; XPosStart equ 28
    103 U0096
    104 U0096							; Tick (every 8 frames)
    105 U0096		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     62 U0096
     63 U0096							; Bank 1
     64  e000 ????				      seg	CodeBank1
     65  d000					      org	$D000
     66  d000					      rorg	$F000
     67  d000		       00	   BANK1      byte.b
     68  d200					      org	$d200
     69  d200					      rorg	$d200
     70  d200				   Bank1Start
     71  d200		       ad fa ff 	      lda	$fffa
     72  d203		       ea		      nop
     73  d204		       ea		      nop
     74  d205		       ea		      nop
     75  d206
     76  dffc					      org	$dffc
     77  dffc					      rorg	$fffc
     78  dffc		       00 d2		      .word.w	Bank1Start
     79  dffe		       00 d2		      .word.w	Bank1Start
     80  e000
     81  e000							; Bank 2
     82  f000 ????				      seg	CodeBank2
     83  e000					      org	$E000
     84  e000					      rorg	$F000
     85  e000		       00	   BANK2      byte.b
     86  e200					      org	$e200
     87  e200					      rorg	$f200
     88  e200				   Bank2Start
     89  e200		       ad fa ff 	      lda	$fffa
     90  e203		       ea		      nop
     91  e204		       ea		      nop
     92  e205		       ea		      nop
     93  e206
     94  effc					      org	$effc
     95  effc					      rorg	$fffc
     96  effc		       00 f2		      .word.w	Bank2Start
     97  effe		       00 f2		      .word.w	Bank2Start
     98  f000
     99  f000							; Bank 3
    100  10000 ????				       seg	CodeBank3
    101  f000					      org	$F000
    102  f000					      rorg	$F000
    103  f000		       00	   BANK3      byte.b
    104  f200					      org	$f200
    105  f200					      rorg	$f200
    106  f200				   Bank3Start
    107  f200		       ad fa ff 	      lda	$fffa
    108  f203		       ea		      nop
    109  f204		       ea		      nop
    110  f205		       ea		      nop
    111  f206		       4c 09 f2 	      jmp	Start
    112  f209
    113  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      5  f214
      6  f214							; Disable interrupt flag in processor status (it's useless anyway)
      7  f214		       58		      cli
      8  f215
      9  f215				   InitSetup
     10  f215		       a9 00		      lda	#0
     11  f217		       85 83		      sta	FrameCount
     12  f219
     13  f219							; P0 has three copies
     14  f219		       a9 13		      lda	#%00010011
     15  f21b		       85 05		      sta	EMERALD_COPIES
     16  f21d
     17  f21d		       a9 00		      lda	#$00
     18  f21f		       85 09		      sta	COLUBK
     19  f221		       a9 01		      lda	#%00000001
     20  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     21  f225
     22  f225							; Disable VDEL
     23  f225		       a9 00		      lda	#0
     24  f227		       85 25		      sta	VDELP0
     25  f229		       85 26		      sta	VDELP1
     26  f22b
     27  f22b							; Player 0
     28  f22b		       a2 cc		      ldx	#COL_EMERALD
     29  f22d		       86 07		      stx	EMERALD_SP_COLOR
     30  f22f
     31  f22f							; Player 1
     32  f22f		       a9 0f		      lda	#$0f
     33  f231		       85 06		      sta	JET_SP_COLOR
     34  f233		       a9 00		      lda	#$00
     35  f235		       85 1b		      sta	JET_SP
     36  f237
     37  f237							; Positions
     38  f237		       a9 3e		      lda	#YPosStart
     39  f239		       85 89		      sta	YPos
     40  f23b		       a9 37		      lda	#XPosStart
     41  f23d		       85 86		      sta	XPos
     42  f23f		       a9 00		      lda	#0
     43  f241		       85 87		      sta	Speed1
     44  f243		       85 88		      sta	Speed2
     45  f245		       85 8a		      sta	YPos2
     46  f247
     47  f247		       a9 00		      lda	#0
     48  f249		       85 8e		      sta	ROW_DEMO_INDEX
     49  f24b
     50  f24b							; Store 0 into RamZeroByte
     51  f24b		       a9 00		      lda	#0
     52  f24d		       85 90		      sta	RamZeroByte
     53  f24f		       a9 3f		      lda	#%00111111
     54  f251		       85 91		      sta	RamLowerSixByte
     55  f253
     56  f253							; Start with vertical sync (to reset frame)
     57  f253		       4c 7e f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 34		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 f6 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 f6 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 35 f6 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 35 f6 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a				   NIBBLE_gem_kernel_OPCODE_1
      2  f27a		       a9 c6		      lda	#%011000110
      0  f27c					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_1, ., 2
      1  f27c				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_1
      2  f27c				   .ENDA      SET	.
      3  f27c				   .LEN       SET	2
      4  f27c				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27c				  -	      echo	""
      6  f27c				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27c				  -	      err
      8  f27c					      endif
      4  f27c				   NIBBLE_gem_kernel_OPCODE_2
      5  f27c		       a9 00		      lda	#%000000000
      0  f27e					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_2, ., 2
      1  f27e				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_2
      2  f27e				   .ENDA      SET	.
      3  f27e				   .LEN       SET	2
      4  f27e				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27e				  -	      echo	""
      6  f27e				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27e				  -	      err
      8  f27e					      endif
      7  f27e
      8  f27e					      MAC	nibble_gem_kernel
      9  f27e				   .if_1
     10  f27e					      asl
     11  f27e					      bcc	.else_1
     12  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 0]
     13  f27e					      stx	[[KernelA_TEST - $100] + 0]
     14  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 1]
     15  f27e					      stx	[[KernelA_TEST - $100] + 1]
     16  f27e					      jmp	.endif_1
     17  f27e				   .else_1
     18  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 0]
     19  f27e					      stx	[[KernelA_TEST - $100] + 0]
     20  f27e					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 1]
     21  f27e					      stx	[[KernelA_TEST - $100] + 1]
     22  f27e				   .endif_1
     23  f27e					      ENDM
     24  f27e
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27e					      include	"game_frame.s"
      1  f27e							; Frame loop, including calling out to other kernels.
      2  f27e
      3  f27e							; Vertical Sync
      4  f27e				   VerticalSync subroutine
      0  f27e					      VERTICAL_SYNC
      1  f27e		       a9 0e		      lda	#%1110
      2  f280		       85 02	   .VSLP1     sta	WSYNC
      3  f282		       85 00		      sta	VSYNC
      4  f284		       4a		      lsr
      5  f285		       d0 f9		      bne	.VSLP1
      6  f287
      7  f287				   FrameStart subroutine
      0  f287					      ASSERT_RUNTIME	"_scan == #0"
      1  f287				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f287  && !(  _scan == #0  ) }
      2  f287					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f287
     10  f287				   VerticalBlank subroutine
      0  f287					      TIMER_SETUP	37
      1  f287				   .lines     SET	37
      2  f287		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f289		       85 02		      sta	WSYNC
      4  f28b		       8d 96 02 	      sta	TIM64T
     12  f28e
     13  f28e							; Scanline counter
     14  f28e		       a9 10		      lda	#ROW_COUNT
     15  f290		       85 82		      sta	LoopCount
     16  f292
     17  f292							; Frame counter
     18  f292		       e6 83		      inc	FrameCount
     19  f294
     20  f294							; Skip every 8 frames for increasing demo index
     21  f294		       a5 83		      lda	FrameCount
     22  f296		       29 07		      and	#FrameSkip
     23  f298		       c9 07		      cmp	#FrameSkip
     24  f29a		       d0 0d		      bne	.next_next_thing
     25  f29c
     26  f29c		       18		      clc
     27  f29d		       a5 8e		      lda	ROW_DEMO_INDEX
     28  f29f		       69 04		      adc	#4
     29  f2a1		       c9 68		      cmp	#[level_01_end - level_01]
     30  f2a3		       90 02		      bcc	.next_thing_local
     31  f2a5		       a9 00		      lda	#0
     32  f2a7				   .next_thing_local
     33  f2a7		       85 8e		      sta	ROW_DEMO_INDEX
     34  f2a9				   .next_next_thing
     35  f2a9		       85 02		      sta	WSYNC
     36  f2ab
     37  f2ab							; Positioning
      0  f2ab					      SLEEP	40
      1  f2ab				   .CYCLES    SET	40
      2  f2ab
      3  f2ab				  -	      IF	.CYCLES < 2
      4  f2ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ab				  -	      ERR
      6  f2ab					      ENDIF
      7  f2ab
      8  f2ab				  -	      IF	.CYCLES & 1
      9  f2ab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ab				  -	      nop	0
     11  f2ab				  -	      ELSE
     12  f2ab				  -	      bit	VSYNC
     13  f2ab				  -	      ENDIF
     14  f2ab				  -.CYCLES    SET	.CYCLES - 3
     15  f2ab					      ENDIF
     16  f2ab
     17  f2ab					      REPEAT	.CYCLES / 2
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     19  f2bf					      REPEND
     39  f2bf		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     40  f2c1		       85 02		      sta	WSYNC
     41  f2c3
     42  f2c3							; Misc
     43  f2c3		       a9 00		      lda	#00
     44  f2c5		       85 1e		      sta	EMERALD_MI_ENABLE
     45  f2c7
     46  f2c7							; Assign dervied SpriteEnd value
     47  f2c7		       18		      clc
     48  f2c8		       a9 c8		      lda	#HEIGHT_OFFSET
     49  f2ca		       e5 89		      sbc	YPos
     50  f2cc		       85 85		      sta	SpriteEnd
     51  f2ce
     52  f2ce							; Player 1
     53  f2ce		       a5 86		      lda	XPos
     54  f2d0		       a2 00		      ldx	#0
     55  f2d2		       20 04 f4 	      jsr	SetHorizPos
     56  f2d5
     57  f2d5				   frame_setup subroutine
     58  f2d5							; Kernel A or B
     59  f2d5		       a9 01		      lda	#01
     60  f2d7		       25 83		      and	FrameCount
     61  f2d9		       d0 28		      bne	frame_setup_kernel_b
     62  f2db
     63  f2db				   frame_setup_kernel_a subroutine
     64  f2db							; Load kernel into CBSRAM
     65  f2db		       20 56 f2 	      jsr	LoadKernelA
     66  f2de
     67  f2de							; Move missile
     68  f2de		       85 02		      sta	WSYNC
      0  f2e0					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2e0				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2e0
      3  f2e0				  -	      IF	.CYCLES < 2
      4  f2e0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2e0				  -	      ERR
      6  f2e0					      ENDIF
      7  f2e0
      8  f2e0				  -	      IF	.CYCLES & 1
      9  f2e0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2e0				  -	      nop	0
     11  f2e0				  -	      ELSE
     12  f2e0				  -	      bit	VSYNC
     13  f2e0				  -	      ENDIF
     14  f2e0				  -.CYCLES    SET	.CYCLES - 3
     15  f2e0					      ENDIF
     16  f2e0
     17  f2e0					      REPEAT	.CYCLES / 2
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     17  f2e1					      REPEND
     18  f2e2		       ea		      nop
     17  f2e2					      REPEND
     18  f2e3		       ea		      nop
     17  f2e3					      REPEND
     18  f2e4		       ea		      nop
     17  f2e4					      REPEND
     18  f2e5		       ea		      nop
     17  f2e5					      REPEND
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     17  f2ec					      REPEND
     18  f2ed		       ea		      nop
     19  f2ee					      REPEND
     70  f2ee		       85 13		      sta	EMERALD_MI_RESET
     71  f2f0		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     72  f2f2		       85 23		      sta	EMERALD_MI_HMOVE
     73  f2f4
     74  f2f4							; DEBUG: Set per-kernel color
     75  f2f4		       a2 cc		      ldx	#COL_EMERALD
     76  f2f6		       86 07		      stx	EMERALD_SP_COLOR
     77  f2f8
     78  f2f8							; Set reflection for Jetpack.
     79  f2f8		       a9 ff		      lda	#%11111111
     80  f2fa		       85 0c		      sta	REFP1
     81  f2fc
     82  f2fc							; Kernel: Set target of PHP instruction.
     83  f2fc		       a9 11		      lda	#RESP1
     84  f2fe		       85 95		      sta	RamKernelPhpTarget
     85  f300
     86  f300		       4c 34 f3 	      jmp	frame_setup_complete
     87  f303
     88  f303				   frame_setup_kernel_b subroutine
     89  f303							; Load kernel into CBSRAM
     90  f303		       20 68 f2 	      jsr	LoadKernelB
     91  f306
     92  f306							; Move missile
     93  f306		       85 02		      sta	WSYNC
      0  f308					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f308				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f308
      3  f308				  -	      IF	.CYCLES < 2
      4  f308				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f308				  -	      ERR
      6  f308					      ENDIF
      7  f308
      8  f308					      IF	.CYCLES & 1
      9  f308					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f308		       04 00		      nop	0
     11  f30a				  -	      ELSE
     12  f30a				  -	      bit	VSYNC
     13  f30a					      ENDIF
     14  f30a				   .CYCLES    SET	.CYCLES - 3
     15  f30a					      ENDIF
     16  f30a
     17  f30a					      REPEAT	.CYCLES / 2
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     17  f316					      REPEND
     18  f317		       ea		      nop
     17  f317					      REPEND
     18  f318		       ea		      nop
     17  f318					      REPEND
     18  f319		       ea		      nop
     17  f319					      REPEND
     18  f31a		       ea		      nop
     17  f31a					      REPEND
     18  f31b		       ea		      nop
     17  f31b					      REPEND
     18  f31c		       ea		      nop
     17  f31c					      REPEND
     18  f31d		       ea		      nop
     17  f31d					      REPEND
     18  f31e		       ea		      nop
     17  f31e					      REPEND
     18  f31f		       ea		      nop
     17  f31f					      REPEND
     18  f320		       ea		      nop
     17  f320					      REPEND
     18  f321		       ea		      nop
     19  f322					      REPEND
     95  f322		       85 13		      sta	EMERALD_MI_RESET
     96  f324		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     97  f326		       85 23		      sta	EMERALD_MI_HMOVE
     98  f328
     99  f328							; DEBUG: Set per-kernel color
    100  f328		       a2 e0		      ldx	#$e0
    101  f32a		       86 07		      stx	EMERALD_SP_COLOR
    102  f32c
    103  f32c							; Disable reflection for Jetpack.
    104  f32c		       a9 ff		      lda	#%11111111
    105  f32e		       85 0c		      sta	REFP1
    106  f330
    107  f330							; Kernel: Set target of PHP instruction.
    108  f330		       a9 1c		      lda	#GRP1
    109  f332		       85 95		      sta	RamKernelPhpTarget
    110  f334
    111  f334				   frame_setup_complete
    112  f334
    113  f334		       ad 7c f7 	      lda	shard_map
    114  f337		       a0 01		      ldy	#1	; gemini counter, starting at 1
    115  f339				   gemini_builder
    116  f339		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    117  f33b		       d0 00		      bne	.no_vd0
    118  f33d				   .no_vd0
    119  f33d
    120  f33d							; Perform kernel Nibble calculations
    121  f33d							; lda #$00
    122  f33d							; NIBBLE_START_KERNEL gem_kernel, 40
    123  f33d							;     ldx level_00
    124  f33d							;     cpx #%11000000
    125  f33d							;     NIBBLE_IF cs
    126  f33d							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%011000110
    127  f33d							;     NIBBLE_ELSE
    128  f33d							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%000000000
    129  f33d							;     NIBBLE_END_IF
    130  f33d							; NIBBLE_END_KERNEL
    131  f33d							; sta KERNEL_TEMP_A
    132  f33d
    133  f33d				   VerticalBlankEnd
    134  f33d							; Wait until the end of Vertical blank.
      0  f33d					      TIMER_WAIT
      1  f33d				   .waittimer
      2  f33d		       ad 84 02 	      lda	INTIM
      3  f340		       d0 fb		      bne	.waittimer
      4  f342		       85 02		      sta	WSYNC
      0  f344					      ASSERT_RUNTIME	"_scan == #37"
      1  f344				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f344  && !(  _scan == #37  ) }
      2  f344					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    137  f344
    138  f344							; Save stack pointer
    139  f344		       ba		      tsx
    140  f345		       86 94		      stx	RamStackBkp
    141  f347
    142  f347							; Start rendering the kernel.
    143  f347		       4c 18 f4 	      jmp	KernelBorder
    144  f34a
    145  f34a				   FrameEnd   subroutine
    146  f34a		       85 02		      sta	WSYNC
    147  f34c
    148  f34c							; Blank all background colors.
    149  f34c		       a9 00		      lda	#0
    150  f34e		       85 08		      sta	COLUPF
    151  f350		       85 0f		      sta	PF2
    152  f352		       85 0e		      sta	PF1
    153  f354		       85 1c		      sta	EMERALD_SP
    154  f356
    155  f356							; Guide lines (2x)
    156  f356		       a9 02		      lda	#SIGNAL_LINE
    157  f358		       85 09		      sta	COLUBK
    158  f35a					      REPEAT	6
    159  f35a		       85 02		      sta	WSYNC
    158  f35a					      REPEND
    159  f35c		       85 02		      sta	WSYNC
    158  f35c					      REPEND
    159  f35e		       85 02		      sta	WSYNC
    158  f35e					      REPEND
    159  f360		       85 02		      sta	WSYNC
    158  f360					      REPEND
    159  f362		       85 02		      sta	WSYNC
    158  f362					      REPEND
    159  f364		       85 02		      sta	WSYNC
    160  f366					      REPEND
    161  f366		       a9 00		      lda	#$00
    162  f368		       85 09		      sta	COLUBK
    163  f36a
    164  f36a							; Restore stack pointer
    165  f36a		       a6 94		      ldx	RamStackBkp
    166  f36c		       9a		      txs
    167  f36d
    168  f36d							; Display the rest of the blank screen.
      0  f36d					      TIMER_SETUP	25
      1  f36d				   .lines     SET	25
      2  f36d		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f36f		       85 02		      sta	WSYNC
      4  f371		       8d 96 02 	      sta	TIM64T
    170  f374		       85 02		      sta	WSYNC
      0  f376					      TIMER_WAIT
      1  f376				   .waittimer
      2  f376		       ad 84 02 	      lda	INTIM
      3  f379		       d0 fb		      bne	.waittimer
      4  f37b		       85 02		      sta	WSYNC
      0  f37d					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f37d				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f37d  && !(  _scan == (#37 + #192)  ) }
      2  f37d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    173  f37d
    174  f37d							; Overscan
    175  f37d				   Overscan   subroutine
    176  f37d		       85 01		      sta	VBLANK
      0  f37f					      TIMER_SETUP	29
      1  f37f				   .lines     SET	29
      2  f37f		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f381		       85 02		      sta	WSYNC
      4  f383		       8d 96 02 	      sta	TIM64T
    178  f386
    179  f386		       20 96 f3 	      jsr	MoveJoystick
    180  f389		       20 cd f3 	      jsr	SpeedCalculation
    181  f38c
      0  f38c					      TIMER_WAIT
      1  f38c				   .waittimer
      2  f38c		       ad 84 02 	      lda	INTIM
      3  f38f		       d0 fb		      bne	.waittimer
      4  f391		       85 02		      sta	WSYNC
      0  f393					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f393				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f393  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f393					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    184  f393
    185  f393		       4c 7e f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f396					      include	"game_input.s"
      1  f396							; Handles input checking. Called from overscan.
      2  f396
      3  f396							; Read joystick movement and apply to object 0
      4  f396				   MoveJoystick
      5  f396							; Move vertically
      6  f396							; (up and down are actually reversed since ypos starts at bottom)
      7  f396							;     ldx YPos
      8  f396		       a9 10		      lda	#%00010000	;Up?
      9  f398		       2c 80 02 	      bit	SWCHA
     10  f39b		       d0 0d		      bne	SkipMoveUp
     11  f39d
     12  f39d		       18		      clc
     13  f39e		       a5 88		      lda	Speed2
     14  f3a0		       69 0c		      adc	#12
     15  f3a2		       85 88		      sta	Speed2
     16  f3a4		       a5 87		      lda	Speed1
     17  f3a6		       69 00		      adc	#00
     18  f3a8		       85 87		      sta	Speed1
     19  f3aa
     20  f3aa				   SkipMoveUp
     21  f3aa		       a6 86		      ldx	XPos
     22  f3ac
     23  f3ac							; Only check left/right on odd frames;
     24  f3ac							; TODO make this just a fractional speed
     25  f3ac							; rather than dropping frames
     26  f3ac		       a9 01		      lda	#01
     27  f3ae		       25 83		      and	FrameCount
     28  f3b0		       d0 18		      bne	SkipMoveRight
     29  f3b2
     30  f3b2
     31  f3b2							; Move horizontally
     32  f3b2		       a9 40		      lda	#%01000000	;Left?
     33  f3b4		       2c 80 02 	      bit	SWCHA
     34  f3b7		       d0 05		      bne	SkipMoveLeft
     35  f3b9		       e0 1d		      cpx	#29
     36  f3bb		       90 01		      bcc	SkipMoveLeft
     37  f3bd		       ca		      dex
     38  f3be
     39  f3be							; Reflect
     40  f3be							;     lda #$ff
     41  f3be							;     sta REFP0
     42  f3be				   SkipMoveLeft
     43  f3be		       a9 80		      lda	#%10000000	;Right?
     44  f3c0		       2c 80 02 	      bit	SWCHA
     45  f3c3		       d0 05		      bne	SkipMoveRight
     46  f3c5		       e0 80		      cpx	#128
     47  f3c7		       b0 01		      bcs	SkipMoveRight
     48  f3c9		       e8		      inx
     49  f3ca
     50  f3ca							; Reflect
     51  f3ca							;     lda #$0
     52  f3ca							;     sta REFP0
     53  f3ca				   SkipMoveRight
     54  f3ca		       86 86		      stx	XPos
     55  f3cc		       60		      rts
     56  f3cd
     57  f3cd
     58  f3cd				   SpeedCalculation
     59  f3cd		       38		      sec
     60  f3ce		       a5 88		      lda	Speed2
     61  f3d0		       e9 07		      sbc	#7
     62  f3d2		       85 88		      sta	Speed2
     63  f3d4		       a5 87		      lda	Speed1
     64  f3d6		       e9 00		      sbc	#0
     65  f3d8		       85 87		      sta	Speed1
     66  f3da
     67  f3da		       18		      clc
     68  f3db		       a5 8a		      lda	YPos2
     69  f3dd		       65 88		      adc	Speed2
     70  f3df		       85 8a		      sta	YPos2
     71  f3e1		       a5 89		      lda	YPos
     72  f3e3		       65 87		      adc	Speed1
     73  f3e5		       85 89		      sta	YPos
     74  f3e7
     75  f3e7		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f3e9		       b0 0a		      bcs	NewThing2
     77  f3eb
     78  f3eb							; Reset to floor
     79  f3eb		       a9 3e		      lda	#FLOOR_OFFSET
     80  f3ed		       85 89		      sta	YPos
     81  f3ef		       a9 00		      lda	#0
     82  f3f1		       85 87		      sta	Speed1
     83  f3f3		       85 88		      sta	Speed2
     84  f3f5				   NewThing2
     85  f3f5
     86  f3f5		       c9 be		      cmp	#CEILING_OFFSET
     87  f3f7		       90 0a		      bcc	.next
     88  f3f9
     89  f3f9							; Reset to ceiling
     90  f3f9		       a9 be		      lda	#CEILING_OFFSET
     91  f3fb		       85 89		      sta	YPos
     92  f3fd		       a9 00		      lda	#0
     93  f3ff		       85 87		      sta	Speed1
     94  f401		       85 88		      sta	Speed2
     95  f403				   .next
     96  f403		       60		      rts
     97  f404
     98  f404
     99  f404
    100  f404							; Subroutine
    101  f404				   SetHorizPos
    102  f404		       85 02		      sta	WSYNC	; start a new line
    103  f406		       24 00		      bit	0	; waste 3 cycles
    104  f408		       38		      sec		; set carry flag
    105  f409				   DivideLoop
    106  f409		       e9 0f		      sbc	#15	; subtract 15
    107  f40b		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f40d		       49 07		      eor	#7	; calculate fine offset
    109  f40f		       0a		      asl
    110  f410		       0a		      asl
    111  f411		       0a		      asl
    112  f412		       0a		      asl
    113  f413		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f415		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f417		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f418					      include	"kernel_border.s"
      1  f418							; Visible Kernel
      2  f418
      3  f418				   KernelBorder subroutine
      4  f418		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f41a
      6  f41a							; First HMOVE
      7  f41a		       85 2a		      sta	HMOVE
      8  f41c
      9  f41c							; Border top
     10  f41c		       a9 00		      lda	#0
     11  f41e		       85 08		      sta	COLUPF
     12  f420		       85 0e		      sta	PF1
     13  f422		       85 0f		      sta	PF2
     14  f424		       a9 02		      lda	#SIGNAL_LINE
     15  f426		       85 09		      sta	COLUBK
     16  f428
     17  f428					      REPEAT	6
     18  f428		       85 02		      sta	WSYNC
     17  f428					      REPEND
     18  f42a		       85 02		      sta	WSYNC
     17  f42a					      REPEND
     18  f42c		       85 02		      sta	WSYNC
     17  f42c					      REPEND
     18  f42e		       85 02		      sta	WSYNC
     17  f42e					      REPEND
     18  f430		       85 02		      sta	WSYNC
     17  f430					      REPEND
     18  f432		       85 02		      sta	WSYNC
     19  f434					      REPEND
     20  f434
     21  f434		       a9 00		      lda	#0
     22  f436		       85 09		      sta	COLUBK
     23  f438		       85 02		      sta	WSYNC
     24  f43a
     25  f43a							; Start top border
     26  f43a				   border_top
     27  f43a							; Make the playfield solid.
     28  f43a		       a9 3f		      lda	#%00111111
     29  f43c		       85 0e		      sta	PF1
     30  f43e		       a9 ff		      lda	#%11111111
     31  f440		       85 0f		      sta	PF2
     32  f442
     33  f442		       a9 42		      lda	#COL_BG
     34  f444		       a0 00		      ldy	#0
     35  f446
     36  f446							; X_XXXX_XX
     37  f446							; Commented lines removed to save on space.
     38  f446		       85 08		      sta	COLUPF
     39  f448		       85 02		      sta	WSYNC
     40  f44a		       84 08		      sty	COLUPF
     41  f44c		       85 02		      sta	WSYNC
     42  f44e		       85 08		      sta	COLUPF
     43  f450		       85 02		      sta	WSYNC
     44  f452							; sta COLUPF
     45  f452		       85 02		      sta	WSYNC
     46  f454							; sta COLUPF
     47  f454		       85 02		      sta	WSYNC
     48  f456		       84 08		      sty	COLUPF
     49  f458		       85 02		      sta	WSYNC
     50  f45a		       85 08		      sta	COLUPF
     51  f45c
     52  f45c		       85 02		      sta	WSYNC
     53  f45e							; sta COLUPF
     54  f45e
     55  f45e				   PlayArea
     56  f45e							; PF is now the playing area
      0  f45e					      ASSERT_RUNTIME	"_scycles == #0"
      1  f45e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f45e  && !(  _scycles == #0  ) }
      2  f45e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f45e					      sleep	61
      1  f45e				   .CYCLES    SET	61
      2  f45e
      3  f45e				  -	      IF	.CYCLES < 2
      4  f45e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f45e				  -	      ERR
      6  f45e					      ENDIF
      7  f45e
      8  f45e					      IF	.CYCLES & 1
      9  f45e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f45e		       04 00		      nop	0
     11  f460				  -	      ELSE
     12  f460				  -	      bit	VSYNC
     13  f460					      ENDIF
     14  f460				   .CYCLES    SET	.CYCLES - 3
     15  f460					      ENDIF
     16  f460
     17  f460					      REPEAT	.CYCLES / 2
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     17  f467					      REPEND
     18  f468		       ea		      nop
     17  f468					      REPEND
     18  f469		       ea		      nop
     17  f469					      REPEND
     18  f46a		       ea		      nop
     17  f46a					      REPEND
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     17  f46c					      REPEND
     18  f46d		       ea		      nop
     17  f46d					      REPEND
     18  f46e		       ea		      nop
     17  f46e					      REPEND
     18  f46f		       ea		      nop
     17  f46f					      REPEND
     18  f470		       ea		      nop
     17  f470					      REPEND
     18  f471		       ea		      nop
     17  f471					      REPEND
     18  f472		       ea		      nop
     17  f472					      REPEND
     18  f473		       ea		      nop
     17  f473					      REPEND
     18  f474		       ea		      nop
     17  f474					      REPEND
     18  f475		       ea		      nop
     17  f475					      REPEND
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     17  f477					      REPEND
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     19  f47d					      REPEND
     59  f47d		       a9 00		      lda	#%00000000
     60  f47f		       85 0d		      sta	PF0
     61  f481		       a9 20		      lda	#%00100000
     62  f483		       85 0e		      sta	PF1
     63  f485		       a9 00		      lda	#%00000000
     64  f487		       85 0f		      sta	PF2
      0  f489					      ASSERT_RUNTIME	"_scycles == #0"
      1  f489				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f489  && !(  _scycles == #0  ) }
      2  f489					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f489					      sleep	7
      1  f489				   .CYCLES    SET	7
      2  f489
      3  f489				  -	      IF	.CYCLES < 2
      4  f489				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f489				  -	      ERR
      6  f489					      ENDIF
      7  f489
      8  f489					      IF	.CYCLES & 1
      9  f489					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f489		       04 00		      nop	0
     11  f48b				  -	      ELSE
     12  f48b				  -	      bit	VSYNC
     13  f48b					      ENDIF
     14  f48b				   .CYCLES    SET	.CYCLES - 3
     15  f48b					      ENDIF
     16  f48b
     17  f48b					      REPEAT	.CYCLES / 2
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     19  f48d					      REPEND
     67  f48d		       4c bf f4 	      jmp	row_start
     68  f490							; enter row on cycle 10.
     69  f490
     70  f490							; reset the background for bottom of playfield
     71  f490				   border_bottom
     72  f490							;sta WSYNC
     73  f490
     74  f490							; Form the bottom of the level frame.
     75  f490		       a9 3f		      lda	#%00111111
     76  f492		       85 0e		      sta	PF1
     77  f494		       a9 ff		      lda	#%11111111
     78  f496		       85 0f		      sta	PF2
     79  f498
     80  f498							; Clear all sprites.
     81  f498		       a9 00		      lda	#0
     82  f49a		       85 1c		      sta	EMERALD_SP
     83  f49c		       85 1b		      sta	JET_SP
     84  f49e		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f4a0
     86  f4a0		       a9 42		      lda	#COL_BG
     87  f4a2		       a0 00		      ldy	#0
     88  f4a4		       85 02		      sta	WSYNC
     89  f4a6
     90  f4a6		       84 08		      sty	COLUPF
     91  f4a8		       85 02		      sta	WSYNC
     92  f4aa
     93  f4aa		       85 08		      sta	COLUPF
     94  f4ac		       85 02		      sta	WSYNC
     95  f4ae
     96  f4ae		       85 02		      sta	WSYNC
     97  f4b0
     98  f4b0		       85 02		      sta	WSYNC
     99  f4b2
    100  f4b2		       84 08		      sty	COLUPF
    101  f4b4		       85 02		      sta	WSYNC
    102  f4b6
    103  f4b6		       85 08		      sta	COLUPF
    104  f4b8		       85 02		      sta	WSYNC
    105  f4ba		       85 02		      sta	WSYNC
    106  f4bc		       4c 4a f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4bf					      include	"kernel_row.s"
      1  f4bf							; Frame Start
      2  f4bf
      3  f4bf							; Macros for calculating sprite values (GRPx).
      4  f4bf
      5  f4bf							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4bf					      mac	kernel_load_player
      7  f4bf							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4bf					      dcp	SpriteEnd	; 5c
      9  f4bf					      ldy	#0	; 2c
     10  f4bf							; constant 6c:
     11  f4bf					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4bf					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4bf					      ldy	SpriteEnd
     14  f4bf							; 4c
     15  f4bf					      ldx	Frame0,Y
     16  f4bf					      endm
     17  f4bf
     18  f4bf							; mac jet_spritedata_calc
     19  f4bf							;
     20  f4bf							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4bf							; GRP0.
     22  f4bf					      mac	jet_spritedata_calc
     23  f4bf							; loader
     24  f4bf					      lda	#SPRITE_HEIGHT
     25  f4bf					      dcp	SpriteEnd
     26  f4bf					      ldy	SpriteEnd
     27  f4bf
     28  f4bf							; 4c
     29  f4bf							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4bf							; from Frame0 + Y must never cross a page boundary.
     31  f4bf					      lda	Frame0,Y
     32  f4bf							; 6c
     33  f4bf					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4bf					      .byte	$2c	; 4c / 0c
     35  f4bf					      sta	JET_SP	; 0c / 3c
     36  f4bf					      endm
     37  f4bf
     38  f4bf				   row_start
     39  f4bf
     40  f4bf							; [scanline 1]
     41  f4bf				   row_1
     42  f4bf							; Enter after scanline starts on row "9" and wraps
      0  f4bf					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4bf				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4bf  && !(  _scycles == #10  ) }
      2  f4bf					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4bf
      0  f4bf					      jet_spritedata_calc
      1  f4bf
      2  f4bf		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4c1		       c7 85		      dcp	SpriteEnd
      4  f4c3		       a4 85		      ldy	SpriteEnd
      5  f4c5
      6  f4c5
      7  f4c5
      8  f4c5
      9  f4c5		       b9 00 f7 	      lda	Frame0,Y
     10  f4c8
     11  f4c8		       b0 01		      .byte.b	$b0, $01
     12  f4ca		       2c		      .byte.b	$2c
     13  f4cb		       85 1b		      sta	JET_SP
     46  f4cd
     47  f4cd							; Nibble VM.
     48  f4cd							; lda KERNEL_TEMP_A
     49  f4cd							; NIBBLE_gem_kernel
     50  f4cd							; sta WSYNC
     51  f4cd
     52  f4cd							; [[[Nibble VM.]]]
      0  f4cd					      sleep	41
      1  f4cd				   .CYCLES    SET	41
      2  f4cd
      3  f4cd				  -	      IF	.CYCLES < 2
      4  f4cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4cd				  -	      ERR
      6  f4cd					      ENDIF
      7  f4cd
      8  f4cd					      IF	.CYCLES & 1
      9  f4cd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4cd		       04 00		      nop	0
     11  f4cf				  -	      ELSE
     12  f4cf				  -	      bit	VSYNC
     13  f4cf					      ENDIF
     14  f4cf				   .CYCLES    SET	.CYCLES - 3
     15  f4cf					      ENDIF
     16  f4cf
     17  f4cf					      REPEAT	.CYCLES / 2
     18  f4cf		       ea		      nop
     17  f4cf					      REPEND
     18  f4d0		       ea		      nop
     17  f4d0					      REPEND
     18  f4d1		       ea		      nop
     17  f4d1					      REPEND
     18  f4d2		       ea		      nop
     17  f4d2					      REPEND
     18  f4d3		       ea		      nop
     17  f4d3					      REPEND
     18  f4d4		       ea		      nop
     17  f4d4					      REPEND
     18  f4d5		       ea		      nop
     17  f4d5					      REPEND
     18  f4d6		       ea		      nop
     17  f4d6					      REPEND
     18  f4d7		       ea		      nop
     17  f4d7					      REPEND
     18  f4d8		       ea		      nop
     17  f4d8					      REPEND
     18  f4d9		       ea		      nop
     17  f4d9					      REPEND
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     19  f4e2					      REPEND
     54  f4e2
     55  f4e2							; Set stack pointer for PHP use from RamKernelPhpTarget.
     56  f4e2		       a6 95		      ldx	RamKernelPhpTarget
     57  f4e4		       9a		      txs
     58  f4e5
      0  f4e5					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4e5				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4e5  && !(  _scycles == #0  ) }
      2  f4e5					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     60  f4e5
     61  f4e5							; [scanline 2]
     62  f4e5				   row_2
      0  f4e5					      jet_spritedata_calc
      1  f4e5
      2  f4e5		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4e7		       c7 85		      dcp	SpriteEnd
      4  f4e9		       a4 85		      ldy	SpriteEnd
      5  f4eb
      6  f4eb
      7  f4eb
      8  f4eb
      9  f4eb		       b9 00 f7 	      lda	Frame0,Y
     10  f4ee
     11  f4ee		       b0 01		      .byte.b	$b0, $01
     12  f4f0		       2c		      .byte.b	$2c
     13  f4f1		       85 1b		      sta	JET_SP
     64  f4f3
     65  f4f3							; Black out playfield
     66  f4f3							; TODO This should be done with playfield pixels, not color.
     67  f4f3		       a9 00		      lda	#0
     68  f4f5		       85 08		      sta	COLUPF
     69  f4f7
     70  f4f7							; [[[Nibble VM.]]]
      0  f4f7					      sleep	35
      1  f4f7				   .CYCLES    SET	35
      2  f4f7
      3  f4f7				  -	      IF	.CYCLES < 2
      4  f4f7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f7				  -	      ERR
      6  f4f7					      ENDIF
      7  f4f7
      8  f4f7					      IF	.CYCLES & 1
      9  f4f7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f7		       04 00		      nop	0
     11  f4f9				  -	      ELSE
     12  f4f9				  -	      bit	VSYNC
     13  f4f9					      ENDIF
     14  f4f9				   .CYCLES    SET	.CYCLES - 3
     15  f4f9					      ENDIF
     16  f4f9
     17  f4f9					      REPEAT	.CYCLES / 2
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     17  f4fc					      REPEND
     18  f4fd		       ea		      nop
     17  f4fd					      REPEND
     18  f4fe		       ea		      nop
     17  f4fe					      REPEND
     18  f4ff		       ea		      nop
     17  f4ff					      REPEND
     18  f500		       ea		      nop
     17  f500					      REPEND
     18  f501		       ea		      nop
     17  f501					      REPEND
     18  f502		       ea		      nop
     17  f502					      REPEND
     18  f503		       ea		      nop
     17  f503					      REPEND
     18  f504		       ea		      nop
     17  f504					      REPEND
     18  f505		       ea		      nop
     17  f505					      REPEND
     18  f506		       ea		      nop
     17  f506					      REPEND
     18  f507		       ea		      nop
     17  f507					      REPEND
     18  f508		       ea		      nop
     19  f509					      REPEND
     72  f509
     73  f509		       a9 04		      lda	#4
     74  f50b		       8d 96 02 	      sta	TIM64T
     75  f50e
     76  f50e							; Load PF1 value
     77  f50e		       a9 a0		      lda	#%10100000
     78  f510		       85 92		      sta	RamPF1Value
     79  f512
     80  f512							; Enable playfield at end of scanline
     81  f512		       a9 42		      lda	#COL_BG
     82  f514		       85 08		      sta	COLUPF
     83  f516
      0  f516					      ASSERT_RUNTIME	"_scycles == #0"
      1  f516				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f516  && !(  _scycles == #0  ) }
      2  f516					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f516
     86  f516							; [scanline 3]
     87  f516				   row_3
      0  f516					      jet_spritedata_calc
      1  f516
      2  f516		       a9 09		      lda	#SPRITE_HEIGHT
      3  f518		       c7 85		      dcp	SpriteEnd
      4  f51a		       a4 85		      ldy	SpriteEnd
      5  f51c
      6  f51c
      7  f51c
      8  f51c
      9  f51c		       b9 00 f7 	      lda	Frame0,Y
     10  f51f
     11  f51f		       b0 01		      .byte.b	$b0, $01
     12  f521		       2c		      .byte.b	$2c
     13  f522		       85 1b		      sta	JET_SP
     89  f524
     90  f524							; Pre-populate graphics.
     91  f524		       a9 09		      lda	#SPRITE_HEIGHT
      0  f526					      KERNEL_LOAD_PLAYER
      1  f526
      2  f526		       c7 85		      dcp	SpriteEnd
      3  f528		       a0 00		      ldy	#0
      4  f52a
      5  f52a		       b0 01		      .byte.b	$b0, $01
      6  f52c		       2c		      .byte.b	$2c
      7  f52d		       a4 85		      ldy	SpriteEnd
      8  f52f
      9  f52f		       be 00 f7 	      ldx	Frame0,Y
     93  f532		       86 93		      stx	RamKernelGRP0
      0  f534					      KERNEL_LOAD_PLAYER
      1  f534
      2  f534		       c7 85		      dcp	SpriteEnd
      3  f536		       a0 00		      ldy	#0
      4  f538
      5  f538		       b0 01		      .byte.b	$b0, $01
      6  f53a		       2c		      .byte.b	$2c
      7  f53b		       a4 85		      ldy	SpriteEnd
      8  f53d
      9  f53d		       be 00 f7 	      ldx	Frame0,Y
     95  f540		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f543		       a5 93		      lda	RamKernelGRP0	; Load sprite 2 into A
     97  f545
      0  f545					      sleep	3
      1  f545				   .CYCLES    SET	3
      2  f545
      3  f545				  -	      IF	.CYCLES < 2
      4  f545				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f545				  -	      ERR
      6  f545					      ENDIF
      7  f545
      8  f545					      IF	.CYCLES & 1
      9  f545					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f545		       04 00		      nop	0
     11  f547				  -	      ELSE
     12  f547				  -	      bit	VSYNC
     13  f547					      ENDIF
     14  f547				   .CYCLES    SET	.CYCLES - 3
     15  f547					      ENDIF
     16  f547
     17  f547				  -	      REPEAT	.CYCLES / 2
     18  f547				  -	      nop
     19  f547					      REPEND
     99  f547
    100  f547							; [scanlines 4-5]
    101  f547							; We jump immediately into scanlines 4-5, the "gem kernel"
    102  f547		       a2 06		      ldx	#%00000110
    103  f549		       a0 66		      ldy	#%01100110
      0  f54b					      ASSERT_RUNTIME	"_scycles == #73"
      1  f54b				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f54b  && !(  _scycles == #73  ) }
      2  f54b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    105  f54b		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    106  f54e
    107  f54e							; [scanline 6]
    108  f54e
    109  f54e							; Try to avoid page crossing in jet_spritedata_calc
    110  f54e							; TODO enforce this with ASSERT_RUNTIME instead?
    111  f550		       00 00		      align	16
    112  f550
    113  f550				   row_after_kernel
    114  f550				   row_6
      0  f550					      ASSERT_RUNTIME	"_scycles == #0"
      1  f550				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f550  && !(  _scycles == #0  ) }
      2  f550					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    116  f550
    117  f550							; Cleanup from the kernel.
    118  f550		       a9 00		      lda	#0
    119  f552		       85 1e		      sta	EMERALD_MI_ENABLE
    120  f554		       85 1c		      sta	EMERALD_SP
    121  f556		       85 08		      sta	COLUPF
    122  f558
      0  f558					      jet_spritedata_calc
      1  f558
      2  f558		       a9 09		      lda	#SPRITE_HEIGHT
      3  f55a		       c7 85		      dcp	SpriteEnd
      4  f55c		       a4 85		      ldy	SpriteEnd
      5  f55e
      6  f55e
      7  f55e
      8  f55e
      9  f55e		       b9 00 f7 	      lda	Frame0,Y
     10  f561
     11  f561		       b0 01		      .byte.b	$b0, $01
     12  f563		       2c		      .byte.b	$2c
     13  f564		       85 1b		      sta	JET_SP
    124  f566
    125  f566							; Idle.
    126  f566		       85 02		      sta	WSYNC
    127  f568
    128  f568							; [scanline 7]
    129  f568				   row_7
      0  f568					      jet_spritedata_calc
      1  f568
      2  f568		       a9 09		      lda	#SPRITE_HEIGHT
      3  f56a		       c7 85		      dcp	SpriteEnd
      4  f56c		       a4 85		      ldy	SpriteEnd
      5  f56e
      6  f56e
      7  f56e
      8  f56e
      9  f56e		       b9 00 f7 	      lda	Frame0,Y
     10  f571
     11  f571		       b0 01		      .byte.b	$b0, $01
     12  f573		       2c		      .byte.b	$2c
     13  f574		       85 1b		      sta	JET_SP
    131  f576
    132  f576		       a9 42		      lda	#COL_BG
    133  f578		       85 08		      sta	COLUPF
    134  f57a
    135  f57a							; FRAMESWITCH
    136  f57a		       a9 01		      lda	#01
    137  f57c		       25 83		      and	FrameCount
    138  f57e		       d0 13		      bne	loadframe2
    139  f580
    140  f580							; Perform gem loading for Kernel A.
    141  f580
    142  f580				   loadframe1
      0  f580					      ASSERT_RUNTIME	"_scycles == #32"
      1  f580				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f580  && !(  _scycles == #32  ) }
      2  f580					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f580
    145  f580							; Emerald byte setting 1A
    146  f580							; ldx #0
    147  f580							; lda KERNEL_STORAGE_R,X
    148  f580							; sta GEM_00_W
    149  f580							; inx
    150  f580							; lda KERNEL_STORAGE_R,X
    151  f580							; sta GEM_04_W
    152  f580							; inx
    153  f580							; lda KERNEL_STORAGE_R,X
    154  f580							; sta GEM_09_W
    155  f580							; inx
    156  f580
    157  f580		       85 02		      sta	WSYNC
    158  f582
    159  f582							; [scanline 8]
      0  f582					      jet_spritedata_calc
      1  f582
      2  f582		       a9 09		      lda	#SPRITE_HEIGHT
      3  f584		       c7 85		      dcp	SpriteEnd
      4  f586		       a4 85		      ldy	SpriteEnd
      5  f588
      6  f588
      7  f588
      8  f588
      9  f588		       b9 00 f7 	      lda	Frame0,Y
     10  f58b
     11  f58b		       b0 01		      .byte.b	$b0, $01
     12  f58d		       2c		      .byte.b	$2c
     13  f58e		       85 1b		      sta	JET_SP
    161  f590
    162  f590							; Emerald byte setting 1B
    163  f590							; lda KERNEL_STORAGE_R,X
    164  f590							; sta GEM_13_W
    165  f590							; inx
    166  f590							; lda KERNEL_STORAGE_R,X
    167  f590							; sta GEM_17_W
    168  f590							; inx
    169  f590							; lda KERNEL_STORAGE_R,X
    170  f590							; sta GEM_18_W
    171  f590							; inx
    172  f590							; lda KERNEL_STORAGE_R,X
    173  f590							; sta GEM_22_W
    174  f590
    175  f590		       4c a6 f5 	      jmp	row_8_end
    176  f593
    177  f593							; Perform gem loading for Kernel B.
    178  f593
    179  f593				   loadframe2
      0  f593					      ASSERT_RUNTIME	"_scycles == #33"
      1  f593				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f593  && !(  _scycles == #33  ) }
      2  f593					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f593
    182  f593							; Emerald byte setting 2A
    183  f593							; ldx #[storage_02 - storage]
    184  f593							; lda KERNEL_STORAGE_R,X
    185  f593							; sta GEM_02_W
    186  f593							; inx
    187  f593							; lda KERNEL_STORAGE_R,X
    188  f593							; sta GEM_06_W
    189  f593							; inx
    190  f593							; lda KERNEL_STORAGE_R,X
    191  f593							; sta GEM_08_W
    192  f593							; inx
    193  f593
    194  f593		       85 02		      sta	WSYNC
    195  f595
    196  f595							; [scanline 8]
    197  f595				   row_8
      0  f595					      jet_spritedata_calc
      1  f595
      2  f595		       a9 09		      lda	#SPRITE_HEIGHT
      3  f597		       c7 85		      dcp	SpriteEnd
      4  f599		       a4 85		      ldy	SpriteEnd
      5  f59b
      6  f59b
      7  f59b
      8  f59b
      9  f59b		       b9 00 f7 	      lda	Frame0,Y
     10  f59e
     11  f59e		       b0 01		      .byte.b	$b0, $01
     12  f5a0		       2c		      .byte.b	$2c
     13  f5a1		       85 1b		      sta	JET_SP
    199  f5a3
    200  f5a3							; Emerald byte setting 2B
    201  f5a3							; lda KERNEL_STORAGE_R,X
    202  f5a3							; sta GEM_11_W
    203  f5a3							; inx
    204  f5a3							; lda KERNEL_STORAGE_R,X
    205  f5a3							; sta GEM_15_W
    206  f5a3							; inx
    207  f5a3							; lda KERNEL_STORAGE_R,X
    208  f5a3							; sta GEM_20_W
    209  f5a3							; inx
    210  f5a3							; lda KERNEL_STORAGE_R,X
    211  f5a3							; sta GEM_24_W
    212  f5a3
    213  f5a3		       4c a6 f5 	      jmp	row_8_end
    214  f5a6
    215  f5a6							; Common row 8 return.
    216  f5a6
    217  f5a6				   row_8_end
    218  f5a6							; Idle.
    219  f5a6		       85 02		      sta	WSYNC
    220  f5a8
    221  f5a8							; [scanline 8]
    222  f5a8							; Repeat loop until LoopCount < 0
    223  f5a8		       c6 82		      dec	LoopCount
    224  f5aa		       30 03		      bmi	row_end
    225  f5ac		       4c bf f4 	      jmp	row_start
    226  f5af				   row_end
    227  f5af		       4c 90 f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f5b2					      include	"kernel_gem.s"
      1  f5b2							;
      2  f5b2							; Gem Kernels
      3  f5b2							;
      4  f5b2							; Gems are displayed in alternating kernels. This chart shows
      5  f5b2							; which kernel is responsible for which gem, with missiles denoted.
      6  f5b2							;
      7  f5b2							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f5b2							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f5b2							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f5b2							;  #	 0^	 8^	  17^	    26^       gem index
     11  f5b2							;
     12  f5b2							; The middle bar indicates where the pattern reverses.
     13  f5b2							;
     14  f5b2							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f5b2							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f5b2							; requires with a single sprite. By alternating sprites each frame with an...
     17  f5b2							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f5b2							; line, except for two. These are instead rendered by the missile, which
     19  f5b2							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f5b2
     21  f5b2							; for copying
     22  f600		       00 00 00 00*	      align	256
     23  f600
     24  f600							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f600							;
     26  f600							; GEM KERNEL A
     27  f600							;
     28  f600
     29  f600				   kernel_1_start subroutine
     30  f600					      rorg	$f100
     31  f600
     32  f600							; Kernel Marker
     33  f600		       0a		      .byte.b	$A
     34  f601
     35  f601				   KernelA_early
     36  f601							; Early code to set next GRP0 image. Value is overwritten
     37  f601		       a9 ff		      lda	#$ff
     38  f603
     39  f603				   KernelA    subroutine
     40  f603							; ASSERT_RUNTIME "sp == $f9"
      0  f603					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  f603				   .KERNEL    SET	$A
      2  f603				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  f603					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     42  f603
     43  f603							; To disable VDELP0, we use the Y register %01100110, which has D0 always 0
     44  f603
     45  f603							; Write Gemini 0A into delayed sprite register
     46  f603		       84 1c		      sty	EMERALD_SP
     47  f605							; Write Player from accumulator. When writing to the other sprite, the
     48  f605							; TIA will copy Gemini 0A into visible sprite register
     49  f605		       85 1b		      sta	JET_SP
     50  f607							; Write Gemini 1A into delayed sprite register
     51  f607		       84 1c		      sty	EMERALD_SP
     52  f609
      0  f609					      sleep	4
      1  f609				   .CYCLES    SET	4
      2  f609
      3  f609				  -	      IF	.CYCLES < 2
      4  f609				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f609				  -	      ERR
      6  f609					      ENDIF
      7  f609
      8  f609				  -	      IF	.CYCLES & 1
      9  f609				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f609				  -	      nop	0
     11  f609				  -	      ELSE
     12  f609				  -	      bit	VSYNC
     13  f609				  -	      ENDIF
     14  f609				  -.CYCLES    SET	.CYCLES - 3
     15  f609					      ENDIF
     16  f609
     17  f609					      REPEAT	.CYCLES / 2
     18  f609		       ea		      nop
     17  f609					      REPEND
     18  f60a		       ea		      nop
     19  f60b					      REPEND
     54  f60b
     55  f60b							; Register config
     56  f60b		       a9 01		      lda	#$01
     57  f60d		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile
     58  f60f		       8e 26 00 	      stx.w	VDELP1	; enable delayed sprite TODO: save the extra cycle here
     59  f612
     60  f612							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f612					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  f612				   .KERNEL    SET	$A
      2  f612				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f112  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  f612					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     62  f612				   KernelA_A
     63  f612		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     64  f614				   KernelA_B
      0  f614					      sleep	3
      1  f614				   .CYCLES    SET	3
      2  f614
      3  f614				  -	      IF	.CYCLES < 2
      4  f614				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f614				  -	      ERR
      6  f614					      ENDIF
      7  f614
      8  f614					      IF	.CYCLES & 1
      9  f614					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f614		       04 00		      nop	0
     11  f616				  -	      ELSE
     12  f616				  -	      bit	VSYNC
     13  f616					      ENDIF
     14  f616				   .CYCLES    SET	.CYCLES - 3
     15  f616					      ENDIF
     16  f616
     17  f616				  -	      REPEAT	.CYCLES / 2
     18  f616				  -	      nop
     19  f616					      REPEND
     66  f616				   KernelA_C
     67  f616		       a5 92		      lda	RamPF1Value	; Load PF1 (TODO asymmetrical playfield)
     68  f618
     69  f618
     70  f618							; below has one `php` call (by default: RESET)
     71  f618				   KernelA_D
     72  f618		       84 26		      sty	VDELP1	; Gemini 1A, clear VDELP1
     73  f61a				   KernelA_E
     74  f61a		       08		      php		; Reset "medium close" NUSIZ repetition
     75  f61b				   KernelA_F
     76  f61b		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     77  f61d				   KernelA_G
     78  f61d		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     79  f61f							; above has php
     80  f61f
     81  f61f				   KernelA_H
     82  f61f		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     83  f621
     84  f621							; RST4 vvv
     85  f621				   KernelA_I
     86  f621		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     87  f623				   KernelA_J		; unchanging
     88  f623		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     89  f625				   KernelA_K
     90  f625		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     91  f627				   KernelA_L
      0  f627					      sleep	3	; free
      1  f627				   .CYCLES    SET	3
      2  f627
      3  f627				  -	      IF	.CYCLES < 2
      4  f627				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f627				  -	      ERR
      6  f627					      ENDIF
      7  f627
      8  f627					      IF	.CYCLES & 1
      9  f627					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f627		       04 00		      nop	0
     11  f629				  -	      ELSE
     12  f629				  -	      bit	VSYNC
     13  f629					      ENDIF
     14  f629				   .CYCLES    SET	.CYCLES - 3
     15  f629					      ENDIF
     16  f629
     17  f629				  -	      REPEAT	.CYCLES / 2
     18  f629				  -	      nop
     19  f629					      REPEND
     93  f629							; RST4 ^^^
     94  f629
     95  f629				   KernelA_M
     96  f629		       84 1c		      sty	EMERALD_SP	; Gemini 5A
     97  f62b				   KernelA_N
     98  f62b				   KernelA_O
      0  f62b					      sleep	2
      1  f62b				   .CYCLES    SET	2
      2  f62b
      3  f62b				  -	      IF	.CYCLES < 2
      4  f62b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62b				  -	      ERR
      6  f62b					      ENDIF
      7  f62b
      8  f62b				  -	      IF	.CYCLES & 1
      9  f62b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62b				  -	      nop	0
     11  f62b				  -	      ELSE
     12  f62b				  -	      bit	VSYNC
     13  f62b				  -	      ENDIF
     14  f62b				  -.CYCLES    SET	.CYCLES - 3
     15  f62b					      ENDIF
     16  f62b
     17  f62b					      REPEAT	.CYCLES / 2
     18  f62b		       ea		      nop
     19  f62c					      REPEND
    100  f62c
    101  f62c		       68		      pla		; reset stack pointer
    102  f62d
    103  f62d							; End visible line
      0  f62d					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  f62d				   .KERNEL    SET	$A
      2  f62d				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12d  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  f62d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    105  f62d
    106  f62d				   KernelA_branch
    107  f62d		       ad 84 02 	      lda	INTIM
    108  f630		       d0 cf		      bne	KernelA_early
    109  f632
    110  f632		       4c 50 f5 	      jmp	row_after_kernel
    111  f635
    112  f635					      rend
    113  f635				   kernel_1_end
      0  f635					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f635				   .STARTA    SET	kernel_1_start
      2  f635				   .ENDA      SET	kernel_1_end
      3  f635				   .LEN       SET	$40
      4  f635				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f635				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f635				  -	      err
      7  f635					      endif
    115  f635
    116  f635							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    117  f635							;
    118  f635							; GEM KERNEL B
    119  f635							;
    120  f635
    121  f635				   kernel_2_start subroutine
    122  f635					      rorg	$f100
    123  f635
    124  f635							; Kernel Marker
    125  f635		       0b		      .byte.b	$B
    126  f636
    127  f636				   KernelB_early
    128  f636							; Early code to set next GRP0 image. Value is overwritten
    129  f636		       a9 ff		      lda	#$ff
    130  f638
    131  f638				   KernelB    subroutine
    132  f638							; Load next Player sprite
    133  f638		       85 1b		      sta	GRP0
    134  f63a
    135  f63a		       a2 03		      ldx	#%00000011
    136  f63c		       a0 33		      ldy	#%00110011
    137  f63e
    138  f63e		       a9 02		      lda	#02
    139  f640		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable missile
    140  f642
    141  f642		       a9 c0		      lda	#%11000000
    142  f644		       84 1c		      sty	EMERALD_SP
    143  f646
    144  f646							; Playfield
    145  f646		       a9 60		      lda	#%01100000
    146  f648
    147  f648							; Php setup
    148  f648		       38		      sec
    149  f649		       2c 90 00 	      bit.w	RamZeroByte
    150  f64c							; clc
    151  f64c							; bit.w RamLowerSixByte
    152  f64c
    153  f64c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f64c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  f64c				   .KERNEL    SET	$B
      2  f64c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f117  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  f64c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    155  f64c				   KernelB_A
    156  f64c		       85 11		      sta	EMERALD_SP_RESET
    157  f64e				   KernelB_B
      0  f64e					      sleep	3
      1  f64e				   .CYCLES    SET	3
      2  f64e
      3  f64e				  -	      IF	.CYCLES < 2
      4  f64e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64e				  -	      ERR
      6  f64e					      ENDIF
      7  f64e
      8  f64e					      IF	.CYCLES & 1
      9  f64e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64e		       04 00		      nop	0
     11  f650				  -	      ELSE
     12  f650				  -	      bit	VSYNC
     13  f650					      ENDIF
     14  f650				   .CYCLES    SET	.CYCLES - 3
     15  f650					      ENDIF
     16  f650
     17  f650				  -	      REPEAT	.CYCLES / 2
     18  f650				  -	      nop
     19  f650					      REPEND
    159  f650				   KernelB_C
      0  f650					      sleep	3
      1  f650				   .CYCLES    SET	3
      2  f650
      3  f650				  -	      IF	.CYCLES < 2
      4  f650				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f650				  -	      ERR
      6  f650					      ENDIF
      7  f650
      8  f650					      IF	.CYCLES & 1
      9  f650					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f650		       04 00		      nop	0
     11  f652				  -	      ELSE
     12  f652				  -	      bit	VSYNC
     13  f652					      ENDIF
     14  f652				   .CYCLES    SET	.CYCLES - 3
     15  f652					      ENDIF
     16  f652
     17  f652				  -	      REPEAT	.CYCLES / 2
     18  f652				  -	      nop
     19  f652					      REPEND
    161  f652				   KernelB_D
    162  f652		       84 1c		      sty	EMERALD_SP
    163  f654				   KernelB_E
    164  f654		       85 11		      sta	EMERALD_SP_RESET
    165  f656				   KernelB_F
    166  f656		       84 1c		      sty	EMERALD_SP
    167  f658				   KernelB_G		; PF1
    168  f658		       85 0e		      sta	PF1
    169  f65a
    170  f65a							; below has one php load (could just be RESET)
    171  f65a				   KernelB_H
    172  f65a		       08		      php		; Gemini 3B
    173  f65b				   KernelB_I
    174  f65b		       85 11		      sta	EMERALD_SP_RESET
    175  f65d				   KernelB_J
      0  f65d					      sleep	3	; Gemini 4B
      1  f65d				   .CYCLES    SET	3
      2  f65d
      3  f65d				  -	      IF	.CYCLES < 2
      4  f65d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65d				  -	      ERR
      6  f65d					      ENDIF
      7  f65d
      8  f65d					      IF	.CYCLES & 1
      9  f65d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65d		       04 00		      nop	0
     11  f65f				  -	      ELSE
     12  f65f				  -	      bit	VSYNC
     13  f65f					      ENDIF
     14  f65f				   .CYCLES    SET	.CYCLES - 3
     15  f65f					      ENDIF
     16  f65f
     17  f65f				  -	      REPEAT	.CYCLES / 2
     18  f65f				  -	      nop
     19  f65f					      REPEND
    177  f65f				   KernelB_K
    178  f65f		       85 1e		      sta	EMERALD_MI_ENABLE
    179  f661				   KernelB_L
    180  f661		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    181  f663							; above has one PHP loa
    182  f663
    183  f663				   KernelB_M
    184  f663				   KernelB_N
      0  f663					      sleep	2
      1  f663				   .CYCLES    SET	2
      2  f663
      3  f663				  -	      IF	.CYCLES < 2
      4  f663				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f663				  -	      ERR
      6  f663					      ENDIF
      7  f663
      8  f663				  -	      IF	.CYCLES & 1
      9  f663				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f663				  -	      nop	0
     11  f663				  -	      ELSE
     12  f663				  -	      bit	VSYNC
     13  f663				  -	      ENDIF
     14  f663				  -.CYCLES    SET	.CYCLES - 3
     15  f663					      ENDIF
     16  f663
     17  f663					      REPEAT	.CYCLES / 2
     18  f663		       ea		      nop
     19  f664					      REPEND
    186  f664		       68		      pla		; reset stack pointer
    187  f665							; End visible line
      0  f665					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f665				   .KERNEL    SET	$B
      2  f665				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  f665					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    189  f665
    190  f665				   KernelB_branch
    191  f665		       ad 84 02 	      lda	INTIM
    192  f668		       d0 cc		      bne	KernelB_early
    193  f66a		       4c 50 f5 	      jmp	row_after_kernel
    194  f66d
    195  f66d					      rend
    196  f66d				   kernel_2_end
      0  f66d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f66d				   .STARTA    SET	kernel_2_start
      2  f66d				   .ENDA      SET	kernel_2_end
      3  f66d				   .LEN       SET	$40
      4  f66d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f66d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f66d				  -	      err
      7  f66d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f66d					      include	"data_sprites.s"
      1  f700		       00 00 00 00*	      align	256
      2  f700
      3  f700							; Player
      4  f700				   Frame0
      5  f700		       00		      .byte.b	#%00000000
      6  f701		       60		      .byte.b	#%01100000
      7  f702		       60		      .byte.b	#%01100000
      8  f703		       60		      .byte.b	#%01100000
      9  f704		       c0		      .byte.b	#%11000000
     10  f705		       c0		      .byte.b	#%11000000
     11  f706		       f0		      .byte.b	#%11110000
     12  f707		       c0		      .byte.b	#%11000000
     13  f708		       c0		      .byte.b	#%11000000
     14  f709		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f70a					      include	"data_levels.s"
      1  f710		       00 00 00 00*	      align	8
      2  f710							; first bit of byte 2 & 3 are unused for simplicity
      3  f710
      4  f710				   level_00
      5  f710		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f714
      7  f714				   level_01
      8  f714		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f718		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f71c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f720		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f724		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f728		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f72c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f730		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f734		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f738		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f73c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f740		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f744		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f748		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f74c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f750		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f754		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f758		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f75c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f760		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f764		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f768		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f76c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f770		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f774		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f778		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f77c				   level_01_end
     35  f77c
     36  f77c
     37  f77c				   shard_map
     38  f77c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  f77d				   shard_map_end
------- FILE main.s
    124  f77d
    125  fffc					      org	$fffc
    126  fffc		       09 f2		      .word.w	Start
    127  fffe		       09 f2		      .word.w	Start
