------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008f ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e		       00	   ROW_DEMO_INDEX byte.b
     49 U008f
     50 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51 U008f
     52 U008f		       00 10	   ROW_COUNT  equ	16
     53 U008f
     54 U008f		       00 02	   SIGNAL_LINE equ	$02
     55 U008f
     56 U008f		       11 00	   KERNEL_START equ	$1100
     57 U008f
     58 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     59 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     60 U008f
     61 U008f							; Sprites
     62 U008f
     63 U008f							; Nusiz
     64 U008f		       00 13	   THREE_COPIES equ	%00010011
     65 U008f
     66 U008f							; Frame 1 sprites
     67 U008f		       00 60	   EMR1       equ	%01100000
     68 U008f		       00 06	   EMR2       equ	%00000110
     69 U008f		       00 66	   EMR3       equ	%01100110
     70 U008f
     71 U008f							; Frame 2 sprites
     72 U008f		       00 c0	   T1	      equ	%11000000
     73 U008f		       00 0c	   T2	      equ	%00001100
     74 U008f		       00 cc	   T3	      equ	%11001100
     75 U008f
     76 U008f							; Shorthands
     77 U008f
     78 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     79 U008f		       00 85	   SET_1_0    equ	$85	; STA
     80 U008f		       00 86	   SET_0_1    equ	$86	; STX
     81 U008f		       00 84	   SET_1_1    equ	$84	; STY
     82 U008f
     83 U008f		       00 86	   SET_0_L    equ	$86	; STX
     84 U008f		       00 85	   SET_1_L    equ	$85	; STA
     85 U008f
     86 U008f		       00 85	   SET_0_R    equ	$85	; STA
     87 U008f		       00 84	   SET_1_R    equ	$84	; STY
     88 U008f
     89 U008f							; Gem enabling/disabling globally
     90 U008f
     91 U008f							; ; all off
     92 U008f							; GEM_00 equ SET_0_0
     93 U008f							; GEM_02 equ SET_0_0
     94 U008f							; GEM_04 equ SET_0_0
     95 U008f							; GEM_06 equ SET_0_0
     96 U008f							; GEM_08 equ SET_0_L
     97 U008f							; GEM_09 equ SET_0_0
     98 U008f							; GEM_11 equ SET_0_0
     99 U008f							; GEM_13 equ SET_0_0
    100 U008f							; GEM_15 equ SET_0_0
    101 U008f							; GEM_17 equ SET_0_R
    102 U008f							; GEM_18 equ SET_0_0
    103 U008f							; GEM_20 equ SET_0_0
    104 U008f							; GEM_22 equ SET_0_0
    105 U008f							; GEM_24 equ SET_0_0
    106 U008f
    107 U008f							; all on
    108 U008f		       00 84	   GEM_00     equ	SET_1_1
    109 U008f		       00 84	   GEM_02     equ	SET_1_1
    110 U008f		       00 84	   GEM_04     equ	SET_1_1
    111 U008f		       00 84	   GEM_06     equ	SET_1_1
    112 U008f		       00 85	   GEM_08     equ	SET_1_L
    113 U008f		       00 84	   GEM_09     equ	SET_1_1
    114 U008f		       00 84	   GEM_11     equ	SET_1_1
    115 U008f		       00 84	   GEM_13     equ	SET_1_1
    116 U008f		       00 84	   GEM_15     equ	SET_1_1
    117 U008f		       00 84	   GEM_17     equ	SET_1_R
    118 U008f		       00 84	   GEM_18     equ	SET_1_1
    119 U008f		       00 84	   GEM_20     equ	SET_1_1
    120 U008f		       00 84	   GEM_22     equ	SET_1_1
    121 U008f		       00 84	   GEM_24     equ	SET_1_1
    122 U008f
    123 U008f							; ; odd on
    124 U008f							; GEM_00 equ SET_1_0
    125 U008f							; GEM_02 equ SET_1_0
    126 U008f							; GEM_04 equ SET_1_0
    127 U008f							; GEM_06 equ SET_1_0
    128 U008f							; GEM_08 equ SET_1_L
    129 U008f							; GEM_09 equ SET_0_1
    130 U008f							; GEM_11 equ SET_0_1
    131 U008f							; GEM_13 equ SET_0_1
    132 U008f							; GEM_15 equ SET_0_1
    133 U008f							; GEM_17 equ SET_0_R
    134 U008f							; GEM_18 equ SET_1_0
    135 U008f							; GEM_20 equ SET_1_0
    136 U008f							; GEM_22 equ SET_1_0
    137 U008f							; GEM_24 equ SET_1_0
    138 U008f
    139 U008f							; ; even on
    140 U008f							; GEM_00 equ SET_0_1
    141 U008f							; GEM_02 equ SET_0_1
    142 U008f							; GEM_04 equ SET_0_1
    143 U008f							; GEM_06 equ SET_0_1
    144 U008f							; GEM_08 equ SET_0_L
    145 U008f							; GEM_09 equ SET_1_0
    146 U008f							; GEM_11 equ SET_1_0
    147 U008f							; GEM_13 equ SET_1_0
    148 U008f							; GEM_15 equ SET_1_0
    149 U008f							; GEM_17 equ SET_1_R
    150 U008f							; GEM_18 equ SET_0_1
    151 U008f							; GEM_20 equ SET_0_1
    152 U008f							; GEM_22 equ SET_0_1
    153 U008f							; GEM_24 equ SET_0_1
    154 U008f
    155 U008f							; Colors
    156 U008f
    157 U008f		       00 42	   COL_BG     equ	$42
    158 U008f		       00 cc	   COL_EMERALD equ	$CC
    159 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    160 U008f
    161 U008f							; HMOVE values
    162 U008f
    163 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    164 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    165 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    166 U008f
    167 U008f							; Sprite details
    168 U008f
    169 U008f		       00 09	   SPRITE_HEIGHT equ	9
    170 U008f
    171 U008f
    172 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    173 U008f		       00 1c	   EMERALD_SP equ	GRP1
    174 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    175 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    176 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    177 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    178 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    179 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    180 U008f
    181 U008f		       00 1b	   JET_SP     equ	GRP0
    182 U008f		       00 10	   JET_SP_RESET equ	RESP0
    183 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    184 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    185 U008f
    186 U008f
    187 U008f							; Offset from the sprite label to the point
    188 U008f							; at which the sprite actually starts. This is the 0-padding
    189 U008f							; FRAME_OFFSET equ 53
    190 U008f
    191 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    192 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    193 U008f
    194 U008f							; Compared with YPos
    195 U008f		       00 43	   FLOOR_OFFSET equ	67
    196 U008f		       00 bf	   CEILING_OFFSET equ	191
    197 U008f
    198 U008f							; YPos definite position
    199 U008f		       00 64	   YPosStart  equ	100
    200 U008f
    201 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    202 U008f
    203  10000 ????				       seg	Code
    204  10000 ????
    205  d000					      org	$D000
    206  d000					      rorg	$F000
    207  d000
    208  d000		       00	   BANK1      byte.b
    209  d001
    210  d200					      org	$D200
    211  d200					      rorg	$F200
    212  d200
    213  d200				   Bank1Start
    214  d200		       ad fa ff 	      lda	$FFFA
    215  d203		       ea		      nop
    216  d204		       ea		      nop
    217  d205		       ea		      nop
    218  d206
    219  d206							; Epilogue
    220  dffc					      org	$DFFC
    221  dffc					      rorg	$FFFC
    222  dffc		       00 f2		      .word.w	Bank1Start
    223  dffe		       00 f2		      .word.w	Bank1Start
    224  e000
    225  e000					      org	$E000
    226  e000					      rorg	$F000
    227  e000
    228  e000		       00	   BANK2      byte.b
    229  e001
    230  e200					      org	$E200
    231  e200					      rorg	$F200
    232  e200
    233  e200				   Bank2Start
    234  e200		       ad fa ff 	      lda	$FFFA
    235  e203		       ea		      nop
    236  e204		       ea		      nop
    237  e205		       ea		      nop
    238  e206
    239  e206							; Epilogue
    240  effc					      org	$EFFC
    241  effc					      rorg	$FFFC
    242  effc		       00 f2		      .word.w	Bank2Start
    243  effe		       00 f2		      .word.w	Bank2Start
    244  f000
    245  f000					      org	$F000
    246  f000					      rorg	$F000
    247  f000
    248  f000		       00	   BANK3      byte.b
    249  f001
    250  f200					      org	$F200
    251  f200					      rorg	$F200
    252  f200
    253  f200				   Start
    254  f200		       ad fa ff 	      lda	$FFFA
    255  f203		       ea		      nop
    256  f204		       ea		      nop
    257  f205		       ea		      nop
    258  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    260  f211		       a9 00		      lda	#0
    261  f213		       85 83		      sta	FrameCount
    262  f215
    263  f215							; P0 has three copies
    264  f215		       a9 13		      lda	#THREE_COPIES
    265  f217		       85 05		      sta	EMERALD_COPIES
    266  f219
    267  f219		       a9 00		      lda	#$00
    268  f21b		       85 09		      sta	COLUBK
    269  f21d		       a9 01		      lda	#%00000001
    270  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    271  f221
    272  f221							; Disable VDEL
    273  f221		       a9 00		      lda	#0
    274  f223		       85 25		      sta	VDELP0
    275  f225		       85 26		      sta	VDELP1
    276  f227
    277  f227
    278  f227							; Player 0
    279  f227		       a2 cc		      ldx	#COL_EMERALD
    280  f229		       86 07		      stx	EMERALD_SP_COLOR
    281  f22b
    282  f22b							; Player 1
    283  f22b		       a9 0f		      lda	#$0f
    284  f22d		       85 06		      sta	JET_SP_COLOR
    285  f22f		       a9 00		      lda	#$00
    286  f231		       85 1b		      sta	JET_SP
    287  f233
    288  f233							; Positions
    289  f233		       a9 64		      lda	#YPosStart
    290  f235		       85 89		      sta	YPos
    291  f237		       a9 37		      lda	#55
    292  f239		       85 86		      sta	XPos
    293  f23b		       a9 00		      lda	#0
    294  f23d		       85 87		      sta	Speed1
    295  f23f		       85 88		      sta	Speed2
    296  f241		       85 8a		      sta	YPos2
    297  f243
    298  f243		       a9 00		      lda	#0
    299  f245		       85 8e		      sta	ROW_DEMO_INDEX
    300  f247
    301  f247				   BeginFrame
      0  f247					      VERTICAL_SYNC
      1  f247		       a9 0e		      lda	#%1110
      2  f249		       85 02	   .VSLP1     sta	WSYNC
      3  f24b		       85 00		      sta	VSYNC
      4  f24d		       4a		      lsr
      5  f24e		       d0 f9		      bne	.VSLP1
    303  f250
      0  f250					      TIMER_SETUP	37
      1  f250				   .lines     SET	37
      2  f250		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f252		       85 02		      sta	WSYNC
      4  f254		       8d 96 02 	      sta	TIM64T
    305  f257
    306  f257							; Scanline counter
    307  f257		       a9 10		      lda	#ROW_COUNT
    308  f259		       85 82		      sta	LoopCount
    309  f25b
    310  f25b							; Frame counter
    311  f25b		       e6 83		      inc	FrameCount
    312  f25d
    313  f25d							; Now the work stuff
    314  f25d		       4c e0 f2 	      jmp	copy_frame
    315  f260
    316  f260					      MAC	emeralds_two
    317  f260				   .target    SET	{1}
    318  f260					      ldx	#%11
    319  f260					      .byte	$CB, $0	; axs
    320  f260					      ldy	map_full,X
    321  f260					      sty	[.target - storage + KERNEL_STORAGE_W]
    322  f260					      ror
    323  f260					      ror
    324  f260					      ENDM
    325  f260
    326  f260					      MAC	emeralds_two_skip
    327  f260					      ror
    328  f260					      ror
    329  f260					      ENDM
    330  f260
    331  f260					      MAC	emeralds_one
    332  f260				   .target    SET	{1}
    333  f260				   .source    SET	{2}
    334  f260					      tax
    335  f260					      and	#%1
    336  f260					      tay
    337  f260					      lda	.source,Y
    338  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    339  f260					      txa
    340  f260					      ror
    341  f260					      ENDM
    342  f260
    343  f260					      MAC	emeralds_one_skip
    344  f260					      ror
    345  f260					      ENDM
    346  f260
    347  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    348  f260							;
    349  f260							; Gems are displayed in alternating kernels. This chart shows
    350  f260							; which kernel is responsible for which dot, with missiles denoted.
    351  f260							;
    352  f260							;	 1 = kernel 1, 2 = kernel 2
    353  f260							;	 S: sprite, M: missile
    354  f260							;
    355  f260							;  1: |SS   SS   |SS	S S  M SS   SS	|
    356  f260							;  2: |  SS   SS M  S S   SS|	 SS   SS|
    357  f260							;     |1122 1122 2112 21 1221 1122 1122|
    358  f260							;     0^	 8^	   17^	     25^
    359  f260							;
    360  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    361  f260
    362  f260					      align	8
    363  f260				   storage
    364  f260							; Gem defaults kernel 1
    365  f260				   storage_00
    366  f260		       85		      .byte.b	SET_1_0
    367  f261				   storage_04
    368  f261		       87		      .byte.b	SET_0_0
    369  f262				   storage_09
    370  f262		       84		      .byte.b	SET_1_1
    371  f263				   storage_13
    372  f263		       84		      .byte.b	SET_1_1
    373  f264				   storage_17
    374  f264		       84		      .byte.b	SET_1_R
    375  f265				   storage_18
    376  f265		       87		      .byte.b	SET_0_0
    377  f266				   storage_22
    378  f266		       87		      .byte.b	SET_0_0
    379  f267
    380  f267							; Gem defaults kernel 2
    381  f267				   storage_02
    382  f267		       87		      .byte.b	SET_0_0
    383  f268				   storage_06
    384  f268		       87		      .byte.b	SET_0_0
    385  f269				   storage_08
    386  f269		       86		      .byte.b	SET_0_L
    387  f26a				   storage_11
    388  f26a		       84		      .byte.b	SET_1_1
    389  f26b				   storage_15
    390  f26b		       84		      .byte.b	SET_1_1
    391  f26c				   storage_20
    392  f26c		       87		      .byte.b	SET_0_0
    393  f26d				   storage_24
    394  f26d		       86		      .byte.b	SET_0_1
    395  f26e				   storage_end
    396  f26e
    397  f270		       00 00		      align	8
    398  f270							; first bit of byte 2 & 3 are unused for simplicity
    399  f270				   map_emeralds
    400  f270		       0a 00 00 00	      .byte.b	%1010, %0000000, %0000000, %00000000
    401  f274		       05 00 00 00	      .byte.b	%0101, %0000000, %0000000, %00000000
    402  f278		       02 40 00 00	      .byte.b	%0010, %1000000, %0000000, %00000000
    403  f27c		       01 20 00 00	      .byte.b	%0001, %0100000, %0000000, %00000000
    404  f280		       00 50 00 00	      .byte.b	%0000, %1010000, %0000000, %00000000
    405  f284		       00 28 00 00	      .byte.b	%0000, %0101000, %0000000, %00000000
    406  f288		       00 14 00 00	      .byte.b	%0000, %0010100, %0000000, %00000000
    407  f28c		       00 0a 00 00	      .byte.b	%0000, %0001010, %0000000, %00000000
    408  f290		       00 05 00 00	      .byte.b	%0000, %0000101, %0000000, %00000000
    409  f294		       00 02 40 00	      .byte.b	%0000, %0000010, %1000000, %00000000
    410  f298		       00 01 20 00	      .byte.b	%0000, %0000001, %0100000, %00000000
    411  f29c		       00 00 50 00	      .byte.b	%0000, %0000000, %1010000, %00000000
    412  f2a0		       00 00 28 00	      .byte.b	%0000, %0000000, %0101000, %00000000
    413  f2a4		       00 00 14 00	      .byte.b	%0000, %0000000, %0010100, %00000000
    414  f2a8		       00 00 0a 00	      .byte.b	%0000, %0000000, %0001010, %00000000
    415  f2ac		       00 00 05 00	      .byte.b	%0000, %0000000, %0000101, %00000000
    416  f2b0		       00 00 02 80	      .byte.b	%0000, %0000000, %0000010, %10000000
    417  f2b4		       00 00 01 40	      .byte.b	%0000, %0000000, %0000001, %01000000
    418  f2b8		       00 00 00 a0	      .byte.b	%0000, %0000000, %0000000, %10100000
    419  f2bc		       00 00 00 50	      .byte.b	%0000, %0000000, %0000000, %01010000
    420  f2c0		       00 00 00 28	      .byte.b	%0000, %0000000, %0000000, %00101000
    421  f2c4		       00 00 00 14	      .byte.b	%0000, %0000000, %0000000, %00010100
    422  f2c8		       00 00 00 0a	      .byte.b	%0000, %0000000, %0000000, %00001010
    423  f2cc		       00 00 00 05	      .byte.b	%0000, %0000000, %0000000, %00000101
    424  f2d0		       08 00 00 02	      .byte.b	%1000, %0000000, %0000000, %00000010
    425  f2d4		       04 00 00 01	      .byte.b	%0100, %0000000, %0000000, %00000001
    426  f2d8				   map_emeralds_end
    427  f2d8
    428  f2d8					      align	8
    429  f2d8				   map_full
    430  f2d8		       87		      .byte.b	SET_0_0
    431  f2d9		       86		      .byte.b	SET_0_1
    432  f2da		       85		      .byte.b	SET_1_0
    433  f2db		       84		      .byte.b	SET_1_1
    434  f2dc				   map_missle_l
    435  f2dc		       86		      .byte.b	SET_0_L
    436  f2dd		       85		      .byte.b	SET_1_L
    437  f2de				   map_missle_r
    438  f2de		       85		      .byte.b	SET_0_R
    439  f2df		       84		      .byte.b	SET_1_R
    440  f2e0
    441  f2e0
    442  f2e0				   copy_frame
    443  f2e0							; FRAMESWITCH
    444  f2e0		       a9 01		      lda	#01
    445  f2e2		       25 83		      and	FrameCount
    446  f2e4		       f0 03		      beq	CopyFrame1Kernel
    447  f2e6		       4c 72 f3 	      jmp	CopyFrame2Kernel
    448  f2e9
    449  f2e9				   CopyFrame1Kernel
    450  f2e9							; Copy: KERNEL 1
    451  f2e9		       a0 2d		      ldy	#(kernel_1_end - kernel_1_start)-1
    452  f2eb				   .copy_loop_1
    453  f2eb		       b9 5b f6 	      lda	kernel_1_start,Y
    454  f2ee		       99 00 10 	      sta	$1000,Y
    455  f2f1		       88		      dey
    456  f2f2		       d0 f7		      bne	.copy_loop_1
    457  f2f4		       ad 5b f6 	      lda	kernel_1_start
    458  f2f7		       8d 00 10 	      sta	$1000
    459  f2fa
    460  f2fa		       a6 8e		      ldx	ROW_DEMO_INDEX
    461  f2fc		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f2ff					      EMERALDS_TWO_SKIP
      1  f2ff		       6a		      ror
      2  f300		       6a		      ror
      0  f301					      EMERALDS_TWO	storage_22
      1  f301				   .target    SET	storage_22
      2  f301		       a2 03		      ldx	#%11
      3  f303		       cb 00		      .byte.b	$CB, $0
      4  f305		       bc d8 f2 	      ldy	map_full,X
      5  f308		       8c 46 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f30b		       6a		      ror
      7  f30c		       6a		      ror
      0  f30d					      EMERALDS_TWO_SKIP
      1  f30d		       6a		      ror
      2  f30e		       6a		      ror
      0  f30f					      EMERALDS_TWO	storage_18
      1  f30f				   .target    SET	storage_18
      2  f30f		       a2 03		      ldx	#%11
      3  f311		       cb 00		      .byte.b	$CB, $0
      4  f313		       bc d8 f2 	      ldy	map_full,X
      5  f316		       8c 45 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f319		       6a		      ror
      7  f31a		       6a		      ror
    466  f31b
    467  f31b		       a6 8e		      ldx	ROW_DEMO_INDEX
    468  f31d		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f320					      EMERALDS_ONE	storage_17, map_missle_r
      1  f320				   .target    SET	storage_17
      2  f320				   .source    SET	map_missle_r
      3  f320		       aa		      tax
      4  f321		       29 01		      and	#%1
      5  f323		       a8		      tay
      6  f324		       b9 de f2 	      lda	.source,Y
      7  f327		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f32a		       8a		      txa
      9  f32b		       6a		      ror
      0  f32c					      EMERALDS_TWO_SKIP
      1  f32c		       6a		      ror
      2  f32d		       6a		      ror
      0  f32e					      EMERALDS_TWO	storage_13
      1  f32e				   .target    SET	storage_13
      2  f32e		       a2 03		      ldx	#%11
      3  f330		       cb 00		      .byte.b	$CB, $0
      4  f332		       bc d8 f2 	      ldy	map_full,X
      5  f335		       8c 43 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f338		       6a		      ror
      7  f339		       6a		      ror
      0  f33a					      EMERALDS_TWO_SKIP
      1  f33a		       6a		      ror
      2  f33b		       6a		      ror
    473  f33c
    474  f33c		       a6 8e		      ldx	ROW_DEMO_INDEX
    475  f33e		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f341					      EMERALDS_TWO	storage_09
      1  f341				   .target    SET	storage_09
      2  f341		       a2 03		      ldx	#%11
      3  f343		       cb 00		      .byte.b	$CB, $0
      4  f345		       bc d8 f2 	      ldy	map_full,X
      5  f348		       8c 42 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f34b		       6a		      ror
      7  f34c		       6a		      ror
      0  f34d					      EMERALDS_ONE_SKIP
      1  f34d		       6a		      ror
      0  f34e					      EMERALDS_TWO_SKIP
      1  f34e		       6a		      ror
      2  f34f		       6a		      ror
      0  f350					      EMERALDS_TWO	storage_04
      1  f350				   .target    SET	storage_04
      2  f350		       a2 03		      ldx	#%11
      3  f352		       cb 00		      .byte.b	$CB, $0
      4  f354		       bc d8 f2 	      ldy	map_full,X
      5  f357		       8c 41 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f35a		       6a		      ror
      7  f35b		       6a		      ror
    480  f35c
    481  f35c		       a6 8e		      ldx	ROW_DEMO_INDEX
    482  f35e		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f361					      EMERALDS_TWO_SKIP
      1  f361		       6a		      ror
      2  f362		       6a		      ror
      0  f363					      EMERALDS_TWO	storage_00
      1  f363				   .target    SET	storage_00
      2  f363		       a2 03		      ldx	#%11
      3  f365		       cb 00		      .byte.b	$CB, $0
      4  f367		       bc d8 f2 	      ldy	map_full,X
      5  f36a		       8c 40 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f36d		       6a		      ror
      7  f36e		       6a		      ror
    485  f36f
    486  f36f		       4c fb f3 	      jmp	CopyFrameNext
    487  f372
    488  f372				   CopyFrame2Kernel
    489  f372							; Copy: KERNEL 2
    490  f372		       a0 2d		      ldy	#(kernel_2_end - kernel_2_start)-1
    491  f374				   .copy_loop_2
    492  f374		       b9 89 f6 	      lda	kernel_2_start,Y
    493  f377		       99 00 10 	      sta	$1000,Y
    494  f37a		       88		      dey
    495  f37b		       d0 f7		      bne	.copy_loop_2
    496  f37d		       ad 89 f6 	      lda	kernel_2_start
    497  f380		       8d 00 10 	      sta	$1000
    498  f383
    499  f383		       a6 8e		      ldx	ROW_DEMO_INDEX
    500  f385		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f388					      EMERALDS_TWO	storage_24
      1  f388				   .target    SET	storage_24
      2  f388		       a2 03		      ldx	#%11
      3  f38a		       cb 00		      .byte.b	$CB, $0
      4  f38c		       bc d8 f2 	      ldy	map_full,X
      5  f38f		       8c 4d 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f392		       6a		      ror
      7  f393		       6a		      ror
      0  f394					      EMERALDS_TWO_SKIP
      1  f394		       6a		      ror
      2  f395		       6a		      ror
      0  f396					      EMERALDS_TWO	storage_20
      1  f396				   .target    SET	storage_20
      2  f396		       a2 03		      ldx	#%11
      3  f398		       cb 00		      .byte.b	$CB, $0
      4  f39a		       bc d8 f2 	      ldy	map_full,X
      5  f39d		       8c 4c 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3a0		       6a		      ror
      7  f3a1		       6a		      ror
      0  f3a2					      EMERALDS_TWO_SKIP
      1  f3a2		       6a		      ror
      2  f3a3		       6a		      ror
    505  f3a4
    506  f3a4		       a6 8e		      ldx	ROW_DEMO_INDEX
    507  f3a6		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f3a9					      EMERALDS_ONE_SKIP
      1  f3a9		       6a		      ror
      0  f3aa					      EMERALDS_TWO	storage_15
      1  f3aa				   .target    SET	storage_15
      2  f3aa		       a2 03		      ldx	#%11
      3  f3ac		       cb 00		      .byte.b	$CB, $0
      4  f3ae		       bc d8 f2 	      ldy	map_full,X
      5  f3b1		       8c 4b 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3b4		       6a		      ror
      7  f3b5		       6a		      ror
      0  f3b6					      EMERALDS_TWO_SKIP
      1  f3b6		       6a		      ror
      2  f3b7		       6a		      ror
      0  f3b8					      EMERALDS_TWO	storage_11
      1  f3b8				   .target    SET	storage_11
      2  f3b8		       a2 03		      ldx	#%11
      3  f3ba		       cb 00		      .byte.b	$CB, $0
      4  f3bc		       bc d8 f2 	      ldy	map_full,X
      5  f3bf		       8c 4a 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3c2		       6a		      ror
      7  f3c3		       6a		      ror
    512  f3c4
    513  f3c4		       a6 8e		      ldx	ROW_DEMO_INDEX
    514  f3c6		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f3c9					      EMERALDS_TWO_SKIP
      1  f3c9		       6a		      ror
      2  f3ca		       6a		      ror
      0  f3cb					      EMERALDS_ONE	storage_08, map_missle_l
      1  f3cb				   .target    SET	storage_08
      2  f3cb				   .source    SET	map_missle_l
      3  f3cb		       aa		      tax
      4  f3cc		       29 01		      and	#%1
      5  f3ce		       a8		      tay
      6  f3cf		       b9 dc f2 	      lda	.source,Y
      7  f3d2		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f3d5		       8a		      txa
      9  f3d6		       6a		      ror
      0  f3d7					      EMERALDS_TWO	storage_06
      1  f3d7				   .target    SET	storage_06
      2  f3d7		       a2 03		      ldx	#%11
      3  f3d9		       cb 00		      .byte.b	$CB, $0
      4  f3db		       bc d8 f2 	      ldy	map_full,X
      5  f3de		       8c 48 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3e1		       6a		      ror
      7  f3e2		       6a		      ror
      0  f3e3					      EMERALDS_TWO_SKIP
      1  f3e3		       6a		      ror
      2  f3e4		       6a		      ror
    519  f3e5
    520  f3e5		       a6 8e		      ldx	ROW_DEMO_INDEX
    521  f3e7		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f3ea					      EMERALDS_TWO	storage_02
      1  f3ea				   .target    SET	storage_02
      2  f3ea		       a2 03		      ldx	#%11
      3  f3ec		       cb 00		      .byte.b	$CB, $0
      4  f3ee		       bc d8 f2 	      ldy	map_full,X
      5  f3f1		       8c 47 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3f4		       6a		      ror
      7  f3f5		       6a		      ror
      0  f3f6					      EMERALDS_TWO_SKIP
      1  f3f6		       6a		      ror
      2  f3f7		       6a		      ror
    524  f3f8
    525  f3f8		       4c fb f3 	      jmp	CopyFrameNext
    526  f3fb
    527  f3fb
    528  f3fb				   CopyFrameNext
    529  f3fb
    530  f3fb							; Frame skipping for increasing demo index
    531  f3fb		       a5 83		      lda	FrameCount
    532  f3fd		       29 07		      and	#%111
    533  f3ff		       c9 07		      cmp	#%111
    534  f401		       d0 0d		      bne	.next_next_thing
    535  f403
    536  f403		       18		      clc
    537  f404		       a5 8e		      lda	ROW_DEMO_INDEX
    538  f406		       69 04		      adc	#4
    539  f408		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
    540  f40a		       90 02		      bcc	.next_thing_local
    541  f40c		       a9 00		      lda	#0
    542  f40e				   .next_thing_local
    543  f40e		       85 8e		      sta	ROW_DEMO_INDEX
    544  f410				   .next_next_thing
    545  f410		       85 02		      sta	WSYNC
    546  f412
    547  f412							; Positioning
      0  f412					      SLEEP	40
      1  f412				   .CYCLES    SET	40
      2  f412
      3  f412				  -	      IF	.CYCLES < 2
      4  f412				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f412				  -	      ERR
      6  f412					      ENDIF
      7  f412
      8  f412				  -	      IF	.CYCLES & 1
      9  f412				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f412				  -	      nop	0
     11  f412				  -	      ELSE
     12  f412				  -	      bit	VSYNC
     13  f412				  -	      ENDIF
     14  f412				  -.CYCLES    SET	.CYCLES - 3
     15  f412					      ENDIF
     16  f412
     17  f412					      REPEAT	.CYCLES / 2
     18  f412		       ea		      nop
     17  f412					      REPEND
     18  f413		       ea		      nop
     17  f413					      REPEND
     18  f414		       ea		      nop
     17  f414					      REPEND
     18  f415		       ea		      nop
     17  f415					      REPEND
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     17  f417					      REPEND
     18  f418		       ea		      nop
     17  f418					      REPEND
     18  f419		       ea		      nop
     17  f419					      REPEND
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     17  f41c					      REPEND
     18  f41d		       ea		      nop
     17  f41d					      REPEND
     18  f41e		       ea		      nop
     17  f41e					      REPEND
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     19  f426					      REPEND
    549  f426		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    550  f428		       85 02		      sta	WSYNC
    551  f42a
    552  f42a							; Misc
    553  f42a		       a9 00		      lda	#00
    554  f42c		       85 1e		      sta	EMERALD_MI_ENABLE
    555  f42e
    556  f42e							; Assign dervied SpriteEnd value
    557  f42e		       a9 c8		      lda	#HEIGHT_OFFSET
    558  f430		       e5 89		      sbc	YPos
    559  f432		       85 85		      sta	SpriteEnd
    560  f434
    561  f434							; Move missile to starting position and fine-tune position
    562  f434							; TODO replace with an HMOVE macro
    563  f434		       85 02		      sta	WSYNC
      0  f436					      sleep	EMERALD_MI_HMOVE_S
      1  f436				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f436
      3  f436				  -	      IF	.CYCLES < 2
      4  f436				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f436				  -	      ERR
      6  f436					      ENDIF
      7  f436
      8  f436					      IF	.CYCLES & 1
      9  f436					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f436		       04 00		      nop	0
     11  f438				  -	      ELSE
     12  f438				  -	      bit	VSYNC
     13  f438					      ENDIF
     14  f438				   .CYCLES    SET	.CYCLES - 3
     15  f438					      ENDIF
     16  f438
     17  f438					      REPEAT	.CYCLES / 2
     18  f438		       ea		      nop
     17  f438					      REPEND
     18  f439		       ea		      nop
     17  f439					      REPEND
     18  f43a		       ea		      nop
     17  f43a					      REPEND
     18  f43b		       ea		      nop
     17  f43b					      REPEND
     18  f43c		       ea		      nop
     17  f43c					      REPEND
     18  f43d		       ea		      nop
     17  f43d					      REPEND
     18  f43e		       ea		      nop
     17  f43e					      REPEND
     18  f43f		       ea		      nop
     17  f43f					      REPEND
     18  f440		       ea		      nop
     17  f440					      REPEND
     18  f441		       ea		      nop
     17  f441					      REPEND
     18  f442		       ea		      nop
     17  f442					      REPEND
     18  f443		       ea		      nop
     17  f443					      REPEND
     18  f444		       ea		      nop
     17  f444					      REPEND
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     19  f44a					      REPEND
    565  f44a		       85 13		      sta	EMERALD_MI_RESET
    566  f44c
    567  f44c							; Player 1
    568  f44c		       a5 86		      lda	XPos
    569  f44e		       a2 00		      ldx	#0
    570  f450		       20 25 f7 	      jsr	SetHorizPos
    571  f453
    572  f453
    573  f453							; Choose which hmove value to use
    574  f453							; FRAMESWITCH
    575  f453		       a9 01		      lda	#01
    576  f455		       25 83		      and	FrameCount
    577  f457		       d0 07		      bne	doframe2
    578  f459
    579  f459							; frame 1
    580  f459		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    581  f45b		       85 23		      sta	EMERALD_MI_HMOVE
    582  f45d		       4c 64 f4 	      jmp	doframe2after
    583  f460
    584  f460							; frame 2
    585  f460				   doframe2
    586  f460		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    587  f462		       85 23		      sta	EMERALD_MI_HMOVE
    588  f464				   doframe2after
    589  f464
      0  f464					      TIMER_WAIT
      1  f464				   .waittimer
      2  f464		       ad 84 02 	      lda	INTIM
      3  f467		       d0 fb		      bne	.waittimer
      0  f469					      TIMER_SETUP	192
      1  f469				   .lines     SET	192
      2  f469		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f46b		       85 02		      sta	WSYNC
      4  f46d		       8d 96 02 	      sta	TIM64T
    592  f470		       85 02		      sta	WSYNC	; ???
    593  f472
    594  f472							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    595  f472
    596  f472							; Frame border top
    597  f472
    598  f472
    599  f472							; First HMOVE
    600  f472		       85 2a		      sta	HMOVE
    601  f474
    602  f474		       a9 00		      lda	#0
    603  f476		       85 08		      sta	COLUPF
    604  f478		       85 0e		      sta	PF1
    605  f47a		       85 0f		      sta	PF2
    606  f47c		       a9 02		      lda	#SIGNAL_LINE
    607  f47e		       85 09		      sta	COLUBK
    608  f480
    609  f480					      REPEAT	6
    610  f480		       85 02		      sta	WSYNC
    609  f480					      REPEND
    610  f482		       85 02		      sta	WSYNC
    609  f482					      REPEND
    610  f484		       85 02		      sta	WSYNC
    609  f484					      REPEND
    610  f486		       85 02		      sta	WSYNC
    609  f486					      REPEND
    610  f488		       85 02		      sta	WSYNC
    609  f488					      REPEND
    610  f48a		       85 02		      sta	WSYNC
    611  f48c					      REPEND
    612  f48c
    613  f48c		       a9 00		      lda	#0
    614  f48e		       85 09		      sta	COLUBK
    615  f490		       85 02		      sta	WSYNC
    616  f492
    617  f492							; Start top border
    618  f492				   border_top
    619  f492							; Make the playfield solid.
    620  f492		       a9 3f		      lda	#%00111111
    621  f494		       85 0e		      sta	PF1
    622  f496		       a9 ff		      lda	#%11111111
    623  f498		       85 0f		      sta	PF2
    624  f49a
    625  f49a		       a9 42		      lda	#COL_BG
    626  f49c		       a0 00		      ldy	#0
    627  f49e
    628  f49e		       85 08		      sta	COLUPF
    629  f4a0		       85 02		      sta	WSYNC
    630  f4a2
    631  f4a2		       84 08		      sty	COLUPF
    632  f4a4		       85 02		      sta	WSYNC
    633  f4a6
    634  f4a6		       85 08		      sta	COLUPF
    635  f4a8		       85 02		      sta	WSYNC
    636  f4aa
    637  f4aa		       85 02		      sta	WSYNC
    638  f4ac
    639  f4ac		       85 02		      sta	WSYNC
    640  f4ae
    641  f4ae		       84 08		      sty	COLUPF
    642  f4b0		       85 02		      sta	WSYNC
    643  f4b2
    644  f4b2		       85 08		      sta	COLUPF
    645  f4b4		       85 02		      sta	WSYNC
    646  f4b6
    647  f4b6		       85 02		      sta	WSYNC
    648  f4b8
    649  f4b8				   PlayArea
    650  f4b8							; PF is now the playing area
    651  f4b8		       a9 00		      lda	#%00000000
    652  f4ba		       85 0d		      sta	PF0
    653  f4bc		       a9 20		      lda	#%00100000
    654  f4be		       85 0e		      sta	PF1
    655  f4c0		       a9 00		      lda	#%00000000
    656  f4c2		       85 0f		      sta	PF2
    657  f4c4
    658  f4c4
    659  f4c4							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    660  f4c4
    661  f4c4							; frame start
    662  f4c4
    663  f4c4
    664  f4c4
    665  f4c4
    666  f4c4							; MACRO for calculating next GRPx value
    667  f4c4
    668  f4c4					      MAC	jet_spritedata_calc_nosta
    669  f4c4							; loader
    670  f4c4					      dcp	SpriteEnd
    671  f4c4
    672  f4c4							; 4c
    673  f4c4							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    674  f4c4							; 6c
    675  f4c4					      ldy	#0
    676  f4c4					      .byte	$b0, $01	;2c / 3c (taken)
    677  f4c4					      .byte	$2c	; 4c / 0c
    678  f4c4					      ldy	SpriteEnd
    679  f4c4
    680  f4c4					      ENDM
    681  f4c4
    682  f4c4					      MAC	jet_spritedata_calc
    683  f4c4							; loader
    684  f4c4					      lda	#SPRITE_HEIGHT
    685  f4c4					      dcp	SpriteEnd
    686  f4c4					      ldy	SpriteEnd
    687  f4c4
    688  f4c4							; 4c
    689  f4c4							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    690  f4c4					      lda	Frame0,Y
    691  f4c4							; 6c
    692  f4c4					      .byte	$b0, $01	;2c / 3c (taken)
    693  f4c4					      .byte	$2c	; 4c / 0c
    694  f4c4					      sta	JET_SP	; 0c / 3c
    695  f4c4
    696  f4c4					      ENDM
    697  f4c4
    698  f4c4
    699  f4c4							; Start the row with a WSYNC.
    700  f4c4				   row_start
    701  f4c4							; ~15c
      0  f4c4					      jet_spritedata_calc
      1  f4c4
      2  f4c4		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4c6		       c7 85		      dcp	SpriteEnd
      4  f4c8		       a4 85		      ldy	SpriteEnd
      5  f4ca
      6  f4ca
      7  f4ca
      8  f4ca		       b9 00 f8 	      lda	Frame0,Y
      9  f4cd
     10  f4cd		       b0 01		      .byte.b	$b0, $01
     11  f4cf		       2c		      .byte.b	$2c
     12  f4d0		       85 1b		      sta	JET_SP
     13  f4d2
    703  f4d2		       85 02		      sta	WSYNC
    704  f4d4
    705  f4d4							; [row:1]
      0  f4d4					      jet_spritedata_calc
      1  f4d4
      2  f4d4		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4d6		       c7 85		      dcp	SpriteEnd
      4  f4d8		       a4 85		      ldy	SpriteEnd
      5  f4da
      6  f4da
      7  f4da
      8  f4da		       b9 00 f8 	      lda	Frame0,Y
      9  f4dd
     10  f4dd		       b0 01		      .byte.b	$b0, $01
     11  f4df		       2c		      .byte.b	$2c
     12  f4e0		       85 1b		      sta	JET_SP
     13  f4e2
    707  f4e2
    708  f4e2		       a9 00		      lda	#0
    709  f4e4		       85 08		      sta	COLUPF
    710  f4e6
    711  f4e6							; Push jump table to the stack
    712  f4e6		       a9 f5		      lda	#>[row_after_kernel - 1]
    713  f4e8		       48		      pha
    714  f4e9		       a9 2f		      lda	#<[row_after_kernel - 1]
    715  f4eb		       48		      pha
    716  f4ec		       a9 81		      lda	#%10000001
    717  f4ee		       48		      pha
    718  f4ef		       a9 10		      lda	#>[$1100 - 1]
    719  f4f1		       48		      pha
    720  f4f2		       a9 ff		      lda	#<[$1100 - 1]
    721  f4f4		       48		      pha
    722  f4f5		       a9 81		      lda	#%10000001
    723  f4f7		       48		      pha
    724  f4f8
    725  f4f8		       85 02		      sta	WSYNC
    726  f4fa
    727  f4fa							; [row:2]
      0  f4fa					      jet_spritedata_calc
      1  f4fa
      2  f4fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4fc		       c7 85		      dcp	SpriteEnd
      4  f4fe		       a4 85		      ldy	SpriteEnd
      5  f500
      6  f500
      7  f500
      8  f500		       b9 00 f8 	      lda	Frame0,Y
      9  f503
     10  f503		       b0 01		      .byte.b	$b0, $01
     11  f505		       2c		      .byte.b	$2c
     12  f506		       85 1b		      sta	JET_SP
     13  f508
    729  f508
    730  f508
    731  f508		       a9 42		      lda	#COL_BG
    732  f50a		       85 08		      sta	COLUPF
    733  f50c
    734  f50c
    735  f50c		       a9 09		      lda	#SPRITE_HEIGHT
      0  f50e					      jet_spritedata_calc_nosta
      1  f50e
      2  f50e		       c7 85		      dcp	SpriteEnd
      3  f510
      4  f510
      5  f510
      6  f510
      7  f510		       a0 00		      ldy	#0
      8  f512		       b0 01		      .byte.b	$b0, $01
      9  f514		       2c		      .byte.b	$2c
     10  f515		       a4 85		      ldy	SpriteEnd
     11  f517
    737  f517		       b9 00 f8 	      lda	Frame0,Y
    738  f51a		       85 fa		      sta	$fa
      0  f51c					      jet_spritedata_calc_nosta
      1  f51c
      2  f51c		       c7 85		      dcp	SpriteEnd
      3  f51e
      4  f51e
      5  f51e
      6  f51e
      7  f51e		       a0 00		      ldy	#0
      8  f520		       b0 01		      .byte.b	$b0, $01
      9  f522		       2c		      .byte.b	$2c
     10  f523		       a4 85		      ldy	SpriteEnd
     11  f525
    740  f525		       b9 00 f8 	      lda	Frame0,Y
    741  f528		       85 fd		      sta	$fd
    742  f52a
      0  f52a					      sleep	6
      1  f52a				   .CYCLES    SET	6
      2  f52a
      3  f52a				  -	      IF	.CYCLES < 2
      4  f52a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f52a				  -	      ERR
      6  f52a					      ENDIF
      7  f52a
      8  f52a				  -	      IF	.CYCLES & 1
      9  f52a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f52a				  -	      nop	0
     11  f52a				  -	      ELSE
     12  f52a				  -	      bit	VSYNC
     13  f52a				  -	      ENDIF
     14  f52a				  -.CYCLES    SET	.CYCLES - 3
     15  f52a					      ENDIF
     16  f52a
     17  f52a					      REPEAT	.CYCLES / 2
     18  f52a		       ea		      nop
     17  f52a					      REPEND
     18  f52b		       ea		      nop
     17  f52b					      REPEND
     18  f52c		       ea		      nop
     19  f52d					      REPEND
    744  f52d
    745  f52d							; [row:3-4]
    746  f52d							; Jump to the copied kernel.
    747  f52d				   kernel_launch
    748  f52d		       4c 00 11 	      jmp	KERNEL_START
    749  f530
    750  f530				   row_after_kernel
    751  f530							; [row:5]
    752  f530							; Cleanup from the kernel.
    753  f530		       a9 00		      lda	#0
    754  f532		       85 1e		      sta	EMERALD_MI_ENABLE
    755  f534		       85 1c		      sta	EMERALD_SP
    756  f536		       85 08		      sta	COLUPF
    757  f538
      0  f538					      jet_spritedata_calc
      1  f538
      2  f538		       a9 09		      lda	#SPRITE_HEIGHT
      3  f53a		       c7 85		      dcp	SpriteEnd
      4  f53c		       a4 85		      ldy	SpriteEnd
      5  f53e
      6  f53e
      7  f53e
      8  f53e		       b9 00 f8 	      lda	Frame0,Y
      9  f541
     10  f541		       b0 01		      .byte.b	$b0, $01
     11  f543		       2c		      .byte.b	$2c
     12  f544		       85 1b		      sta	JET_SP
     13  f546
    759  f546
    760  f546		       85 02		      sta	WSYNC
    761  f548
    762  f548							; [row:6]
      0  f548					      jet_spritedata_calc
      1  f548
      2  f548		       a9 09		      lda	#SPRITE_HEIGHT
      3  f54a		       c7 85		      dcp	SpriteEnd
      4  f54c		       a4 85		      ldy	SpriteEnd
      5  f54e
      6  f54e
      7  f54e
      8  f54e		       b9 00 f8 	      lda	Frame0,Y
      9  f551
     10  f551		       b0 01		      .byte.b	$b0, $01
     11  f553		       2c		      .byte.b	$2c
     12  f554		       85 1b		      sta	JET_SP
     13  f556
    764  f556		       a9 42		      lda	#COL_BG
    765  f558		       85 08		      sta	COLUPF
    766  f55a
    767  f55a							; FRAMESWITCH
    768  f55a		       a9 01		      lda	#01
    769  f55c		       25 83		      and	FrameCount
    770  f55e		       d0 45		      bne	loadframe2
    771  f560
    772  f560				   loadframe1
    773  f560							; ~30c
    774  f560
    775  f560							; Emerald byte setting 1A
    776  f560		       a2 00		      ldx	#0
    777  f562		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    778  f565		       8d 0c 10 	      sta	GEM_00_W
    779  f568		       e8		      inx
    780  f569		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    781  f56c		       8d 14 10 	      sta	GEM_04_W
    782  f56f		       e8		      inx
    783  f570		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    784  f573		       8d 18 10 	      sta	GEM_09_W
    785  f576		       e8		      inx
    786  f577
    787  f577		       85 02		      sta	WSYNC
    788  f579
    789  f579							; [row:7]
      0  f579					      jet_spritedata_calc
      1  f579
      2  f579		       a9 09		      lda	#SPRITE_HEIGHT
      3  f57b		       c7 85		      dcp	SpriteEnd
      4  f57d		       a4 85		      ldy	SpriteEnd
      5  f57f
      6  f57f
      7  f57f
      8  f57f		       b9 00 f8 	      lda	Frame0,Y
      9  f582
     10  f582		       b0 01		      .byte.b	$b0, $01
     11  f584		       2c		      .byte.b	$2c
     12  f585		       85 1b		      sta	JET_SP
     13  f587
    791  f587
    792  f587							; Emerald byte setting 1B
    793  f587		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    794  f58a		       8d 1c 10 	      sta	GEM_13_W
    795  f58d		       e8		      inx
    796  f58e		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    797  f591		       8d 20 10 	      sta	GEM_17_W
    798  f594		       e8		      inx
    799  f595		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    800  f598		       8d 22 10 	      sta	GEM_18_W
    801  f59b		       e8		      inx
    802  f59c		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    803  f59f		       8d 26 10 	      sta	GEM_22_W
    804  f5a2
    805  f5a2		       4c ea f5 	      jmp	row_7_end
    806  f5a5
    807  f5a5				   loadframe2
    808  f5a5							; ~30c
    809  f5a5
    810  f5a5							; Emerald byte setting 2A
    811  f5a5		       a2 07		      ldx	#[storage_02 - storage]
    812  f5a7		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    813  f5aa		       8d 0f 10 	      sta	GEM_02_W
    814  f5ad		       e8		      inx
    815  f5ae		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    816  f5b1		       8d 16 10 	      sta	GEM_06_W
    817  f5b4		       e8		      inx
    818  f5b5		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    819  f5b8		       8d 0b 10 	      sta	GEM_08_W
    820  f5bb		       e8		      inx
    821  f5bc
    822  f5bc		       85 02		      sta	WSYNC
    823  f5be
    824  f5be							; [row:7]
      0  f5be					      jet_spritedata_calc
      1  f5be
      2  f5be		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c0		       c7 85		      dcp	SpriteEnd
      4  f5c2		       a4 85		      ldy	SpriteEnd
      5  f5c4
      6  f5c4
      7  f5c4
      8  f5c4		       b9 00 f8 	      lda	Frame0,Y
      9  f5c7
     10  f5c7		       b0 01		      .byte.b	$b0, $01
     11  f5c9		       2c		      .byte.b	$2c
     12  f5ca		       85 1b		      sta	JET_SP
     13  f5cc
    826  f5cc
    827  f5cc							; Emerald byte setting 2B
    828  f5cc		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    829  f5cf		       8d 1a 10 	      sta	GEM_11_W
    830  f5d2		       e8		      inx
    831  f5d3		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    832  f5d6		       8d 1e 10 	      sta	GEM_15_W
    833  f5d9		       e8		      inx
    834  f5da		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    835  f5dd		       8d 22 10 	      sta	GEM_20_W
    836  f5e0		       e8		      inx
    837  f5e1		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    838  f5e4		       8d 26 10 	      sta	GEM_24_W
    839  f5e7
    840  f5e7		       4c ea f5 	      jmp	row_7_end
    841  f5ea
    842  f5ea				   row_7_end
    843  f5ea		       85 02		      sta	WSYNC
    844  f5ec
    845  f5ec							; [row:8]
    846  f5ec							; Repeat loop until LoopCount < 0
    847  f5ec		       c6 82		      dec	LoopCount
    848  f5ee		       30 03		      bmi	frame_bottom
    849  f5f0		       4c c4 f4 	      jmp	row_start
    850  f5f3
    851  f5f3							; reset the background for bottom of playfield
    852  f5f3				   frame_bottom
    853  f5f3							;sta WSYNC
    854  f5f3
    855  f5f3							; Form the bottom of the level frame.
    856  f5f3		       a9 3f		      lda	#%00111111
    857  f5f5		       85 0e		      sta	PF1
    858  f5f7		       a9 ff		      lda	#%11111111
    859  f5f9		       85 0f		      sta	PF2
    860  f5fb
    861  f5fb							; Clear all sprites.
    862  f5fb		       a9 00		      lda	#0
    863  f5fd		       85 1c		      sta	EMERALD_SP
    864  f5ff		       85 1b		      sta	JET_SP
    865  f601		       85 1e		      sta	EMERALD_MI_ENABLE
    866  f603
    867  f603		       a9 42		      lda	#COL_BG
    868  f605		       a0 00		      ldy	#0
    869  f607		       85 02		      sta	WSYNC
    870  f609
    871  f609		       84 08		      sty	COLUPF
    872  f60b		       85 02		      sta	WSYNC
    873  f60d
    874  f60d		       85 08		      sta	COLUPF
    875  f60f		       85 02		      sta	WSYNC
    876  f611
    877  f611		       85 02		      sta	WSYNC
    878  f613
    879  f613		       85 02		      sta	WSYNC
    880  f615
    881  f615		       84 08		      sty	COLUPF
    882  f617		       85 02		      sta	WSYNC
    883  f619
    884  f619		       85 08		      sta	COLUPF
    885  f61b		       85 02		      sta	WSYNC
    886  f61d		       85 02		      sta	WSYNC
    887  f61f
    888  f61f							; Blank all background colors.
    889  f61f				   frame_end
    890  f61f		       a9 00		      lda	#0
    891  f621		       85 08		      sta	COLUPF
    892  f623		       85 0f		      sta	PF2
    893  f625		       85 0e		      sta	PF1
    894  f627		       85 1c		      sta	EMERALD_SP
    895  f629		       85 02		      sta	WSYNC
    896  f62b
    897  f62b							; Guide lines (2x)
    898  f62b		       a9 02		      lda	#SIGNAL_LINE
    899  f62d		       85 09		      sta	COLUBK
    900  f62f					      REPEAT	6
    901  f62f		       85 02		      sta	WSYNC
    900  f62f					      REPEND
    901  f631		       85 02		      sta	WSYNC
    900  f631					      REPEND
    901  f633		       85 02		      sta	WSYNC
    900  f633					      REPEND
    901  f635		       85 02		      sta	WSYNC
    900  f635					      REPEND
    901  f637		       85 02		      sta	WSYNC
    900  f637					      REPEND
    901  f639		       85 02		      sta	WSYNC
    902  f63b					      REPEND
    903  f63b		       a9 00		      lda	#$00
    904  f63d		       85 09		      sta	COLUBK
    905  f63f		       85 02		      sta	WSYNC
    906  f641
      0  f641					      TIMER_WAIT
      1  f641				   .waittimer
      2  f641		       ad 84 02 	      lda	INTIM
      3  f644		       d0 fb		      bne	.waittimer
      0  f646					      TIMER_SETUP	30
      1  f646				   .lines     SET	30
      2  f646		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f648		       85 02		      sta	WSYNC
      4  f64a		       8d 96 02 	      sta	TIM64T
    909  f64d
    910  f64d		       20 b7 f6 	      jsr	MoveJoystick
    911  f650		       20 ee f6 	      jsr	SpeedCalculation
    912  f653
      0  f653					      TIMER_WAIT
      1  f653				   .waittimer
      2  f653		       ad 84 02 	      lda	INTIM
      3  f656		       d0 fb		      bne	.waittimer
    914  f658		       4c 47 f2 	      jmp	BeginFrame
    915  f65b
    916  f65b
    917  f65b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    918  f65b
    919  f65b							; kernels
    920  f65b
    921  f65b
    922  f65b							; Important cycles for the kernels:
    923  f65b							; left border: 29, right border: 64
    924  f65b
    925  f65b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    926  f65b
    927  f65b							; KERNEL 1
    928  f65b
    929  f65b							; Emerald line macro (1, 2, ...)
    930  f65b
    931  f65b				   kernel_1_start
    932  f65b							; sleep first make this distinct from
    933  f65b							; other kernel for debug scenarios
      0  f65b					      sleep	6
      1  f65b				   .CYCLES    SET	6
      2  f65b
      3  f65b				  -	      IF	.CYCLES < 2
      4  f65b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65b				  -	      ERR
      6  f65b					      ENDIF
      7  f65b
      8  f65b				  -	      IF	.CYCLES & 1
      9  f65b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65b				  -	      nop	0
     11  f65b				  -	      ELSE
     12  f65b				  -	      bit	VSYNC
     13  f65b				  -	      ENDIF
     14  f65b				  -.CYCLES    SET	.CYCLES - 3
     15  f65b					      ENDIF
     16  f65b
     17  f65b					      REPEAT	.CYCLES / 2
     18  f65b		       ea		      nop
     17  f65b					      REPEND
     18  f65c		       ea		      nop
     17  f65c					      REPEND
     18  f65d		       ea		      nop
     19  f65e					      REPEND
    935  f65e		       68		      pla
    936  f65f		       85 1b		      sta	GRP0
    937  f661
    938  f661		       a9 60		      lda	#EMR1
    939  f663		       a2 06		      ldx	#EMR2
    940  f665		       a0 66		      ldy	#EMR3
    941  f667				   .gem_00
    942  f667		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    943  f669
    944  f669							; 22
    945  f669		       85 11		      sta	EMERALD_SP_RESET
    946  f66b		       85 1e		      sta	EMERALD_MI_ENABLE
      0  f66d					      sleep	3
      1  f66d				   .CYCLES    SET	3
      2  f66d
      3  f66d				  -	      IF	.CYCLES < 2
      4  f66d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f66d				  -	      ERR
      6  f66d					      ENDIF
      7  f66d
      8  f66d					      IF	.CYCLES & 1
      9  f66d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f66d		       04 00		      nop	0
     11  f66f				  -	      ELSE
     12  f66f				  -	      bit	VSYNC
     13  f66f					      ENDIF
     14  f66f				   .CYCLES    SET	.CYCLES - 3
     15  f66f					      ENDIF
     16  f66f
     17  f66f				  -	      REPEAT	.CYCLES / 2
     18  f66f				  -	      nop
     19  f66f					      REPEND
    948  f66f				   .gem_04
    949  f66f		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    950  f671		       85 11		      sta	EMERALD_SP_RESET
    951  f673				   .gem_09
    952  f673		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f675					      sleep	3
      1  f675				   .CYCLES    SET	3
      2  f675
      3  f675				  -	      IF	.CYCLES < 2
      4  f675				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f675				  -	      ERR
      6  f675					      ENDIF
      7  f675
      8  f675					      IF	.CYCLES & 1
      9  f675					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f675		       04 00		      nop	0
     11  f677				  -	      ELSE
     12  f677				  -	      bit	VSYNC
     13  f677					      ENDIF
     14  f677				   .CYCLES    SET	.CYCLES - 3
     15  f677					      ENDIF
     16  f677
     17  f677				  -	      REPEAT	.CYCLES / 2
     18  f677				  -	      nop
     19  f677					      REPEND
    954  f677				   .gem_13
    955  f677		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    956  f679		       85 11		      sta	EMERALD_SP_RESET
    957  f67b				   .gem_17
    958  f67b							; 49c (midway)
    959  f67b		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    960  f67d				   .gem_18
    961  f67d		       84 1c		      .byte.b	GEM_18, EMERALD_SP
      0  f67f					      sleep	3
      1  f67f				   .CYCLES    SET	3
      2  f67f
      3  f67f				  -	      IF	.CYCLES < 2
      4  f67f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f67f				  -	      ERR
      6  f67f					      ENDIF
      7  f67f
      8  f67f					      IF	.CYCLES & 1
      9  f67f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f67f		       04 00		      nop	0
     11  f681				  -	      ELSE
     12  f681				  -	      bit	VSYNC
     13  f681					      ENDIF
     14  f681				   .CYCLES    SET	.CYCLES - 3
     15  f681					      ENDIF
     16  f681
     17  f681				  -	      REPEAT	.CYCLES / 2
     18  f681				  -	      nop
     19  f681					      REPEND
    963  f681				   .gem_22
    964  f681		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    965  f683
    966  f683							; cycle 64 (start of right border)
      0  f683					      sleep	9
      1  f683				   .CYCLES    SET	9
      2  f683
      3  f683				  -	      IF	.CYCLES < 2
      4  f683				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f683				  -	      ERR
      6  f683					      ENDIF
      7  f683
      8  f683					      IF	.CYCLES & 1
      9  f683					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f683		       04 00		      nop	0
     11  f685				  -	      ELSE
     12  f685				  -	      bit	VSYNC
     13  f685					      ENDIF
     14  f685				   .CYCLES    SET	.CYCLES - 3
     15  f685					      ENDIF
     16  f685
     17  f685					      REPEAT	.CYCLES / 2
     18  f685		       ea		      nop
     17  f685					      REPEND
     18  f686		       ea		      nop
     17  f686					      REPEND
     18  f687		       ea		      nop
     19  f688					      REPEND
    968  f688		       60		      rts
    969  f689				   kernel_1_end
    970  f689
    971  f689		       10 0c	   GEM_00_W   equ	[$1000 + .gem_00 - kernel_1_start]
    972  f689		       10 14	   GEM_04_W   equ	[$1000 + .gem_04 - kernel_1_start]
    973  f689		       10 18	   GEM_09_W   equ	[$1000 + .gem_09 - kernel_1_start]
    974  f689		       10 1c	   GEM_13_W   equ	[$1000 + .gem_13 - kernel_1_start]
    975  f689		       10 20	   GEM_17_W   equ	[$1000 + .gem_17 - kernel_1_start]
    976  f689		       10 22	   GEM_18_W   equ	[$1000 + .gem_18 - kernel_1_start]
    977  f689		       10 26	   GEM_22_W   equ	[$1000 + .gem_22 - kernel_1_start]
    978  f689
    979  f689							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    980  f689
    981  f689							; KERNEL 2
    982  f689
    983  f689							; Emerald line macro (3, 4, ...)
    984  f689
    985  f689				   kernel_2_start
    986  f689							; don't sleep first to make this distinct from kernel 1
    987  f689		       68		      pla
    988  f68a		       85 1b		      sta	GRP0
      0  f68c					      sleep	4
      1  f68c				   .CYCLES    SET	4
      2  f68c
      3  f68c				  -	      IF	.CYCLES < 2
      4  f68c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f68c				  -	      ERR
      6  f68c					      ENDIF
      7  f68c
      8  f68c				  -	      IF	.CYCLES & 1
      9  f68c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f68c				  -	      nop	0
     11  f68c				  -	      ELSE
     12  f68c				  -	      bit	VSYNC
     13  f68c				  -	      ENDIF
     14  f68c				  -.CYCLES    SET	.CYCLES - 3
     15  f68c					      ENDIF
     16  f68c
     17  f68c					      REPEAT	.CYCLES / 2
     18  f68c		       ea		      nop
     17  f68c					      REPEND
     18  f68d		       ea		      nop
     19  f68e					      REPEND
    990  f68e
    991  f68e							; Enable missile (using excessive lda instructions)
    992  f68e		       a9 02		      lda	#02
    993  f690		       a2 0c		      ldx	#T2
    994  f692		       a0 cc		      ldy	#T3
    995  f694				   .gem_08
    996  f694		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    997  f696		       a9 c0		      lda	#T1	; movable
    998  f698				   .gem_02
    999  f698		       84 1c		      .byte.b	GEM_02, EMERALD_SP
   1000  f69a
   1001  f69a							; cycle 25
   1002  f69a		       85 11		      sta	EMERALD_SP_RESET
      0  f69c					      sleep	6
      1  f69c				   .CYCLES    SET	6
      2  f69c
      3  f69c				  -	      IF	.CYCLES < 2
      4  f69c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f69c				  -	      ERR
      6  f69c					      ENDIF
      7  f69c
      8  f69c				  -	      IF	.CYCLES & 1
      9  f69c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f69c				  -	      nop	0
     11  f69c				  -	      ELSE
     12  f69c				  -	      bit	VSYNC
     13  f69c				  -	      ENDIF
     14  f69c				  -.CYCLES    SET	.CYCLES - 3
     15  f69c					      ENDIF
     16  f69c
     17  f69c					      REPEAT	.CYCLES / 2
     18  f69c		       ea		      nop
     17  f69c					      REPEND
     18  f69d		       ea		      nop
     17  f69d					      REPEND
     18  f69e		       ea		      nop
     19  f69f					      REPEND
   1004  f69f				   .gem_06
   1005  f69f		       84 1c		      .byte.b	GEM_06, EMERALD_SP
   1006  f6a1		       85 11		      sta	EMERALD_SP_RESET
   1007  f6a3				   .gem_11
   1008  f6a3		       84 1c		      .byte.b	GEM_11, EMERALD_SP
   1009  f6a5		       86 1e		      stx	EMERALD_MI_ENABLE
   1010  f6a7				   .gem_15
   1011  f6a7		       84 1c		      .byte.b	GEM_15, EMERALD_SP
   1012  f6a9							; 49c midway
   1013  f6a9		       85 11		      sta	EMERALD_SP_RESET
   1014  f6ab							; PF2
   1015  f6ab				   .gem_20
   1016  f6ab		       84 1c		      .byte.b	GEM_20, EMERALD_SP
      0  f6ad					      sleep	3
      1  f6ad				   .CYCLES    SET	3
      2  f6ad
      3  f6ad				  -	      IF	.CYCLES < 2
      4  f6ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ad				  -	      ERR
      6  f6ad					      ENDIF
      7  f6ad
      8  f6ad					      IF	.CYCLES & 1
      9  f6ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ad		       04 00		      nop	0
     11  f6af				  -	      ELSE
     12  f6af				  -	      bit	VSYNC
     13  f6af					      ENDIF
     14  f6af				   .CYCLES    SET	.CYCLES - 3
     15  f6af					      ENDIF
     16  f6af
     17  f6af				  -	      REPEAT	.CYCLES / 2
     18  f6af				  -	      nop
     19  f6af					      REPEND
   1018  f6af				   .gem_24
   1019  f6af		       84 1c		      .byte.b	GEM_24, EMERALD_SP
      0  f6b1					      sleep	3
      1  f6b1				   .CYCLES    SET	3
      2  f6b1
      3  f6b1				  -	      IF	.CYCLES < 2
      4  f6b1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6b1				  -	      ERR
      6  f6b1					      ENDIF
      7  f6b1
      8  f6b1					      IF	.CYCLES & 1
      9  f6b1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6b1		       04 00		      nop	0
     11  f6b3				  -	      ELSE
     12  f6b3				  -	      bit	VSYNC
     13  f6b3					      ENDIF
     14  f6b3				   .CYCLES    SET	.CYCLES - 3
     15  f6b3					      ENDIF
     16  f6b3
     17  f6b3				  -	      REPEAT	.CYCLES / 2
     18  f6b3				  -	      nop
     19  f6b3					      REPEND
   1021  f6b3
   1022  f6b3							; cycle 64 (start of right border)
      0  f6b3					      sleep	6
      1  f6b3				   .CYCLES    SET	6
      2  f6b3
      3  f6b3				  -	      IF	.CYCLES < 2
      4  f6b3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6b3				  -	      ERR
      6  f6b3					      ENDIF
      7  f6b3
      8  f6b3				  -	      IF	.CYCLES & 1
      9  f6b3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6b3				  -	      nop	0
     11  f6b3				  -	      ELSE
     12  f6b3				  -	      bit	VSYNC
     13  f6b3				  -	      ENDIF
     14  f6b3				  -.CYCLES    SET	.CYCLES - 3
     15  f6b3					      ENDIF
     16  f6b3
     17  f6b3					      REPEAT	.CYCLES / 2
     18  f6b3		       ea		      nop
     17  f6b3					      REPEND
     18  f6b4		       ea		      nop
     17  f6b4					      REPEND
     18  f6b5		       ea		      nop
     19  f6b6					      REPEND
   1024  f6b6		       60		      rts
   1025  f6b7				   kernel_2_end
   1026  f6b7
   1027  f6b7		       10 0f	   GEM_02_W   equ	[$1000 + .gem_02 - kernel_2_start]
   1028  f6b7		       10 16	   GEM_06_W   equ	[$1000 + .gem_06 - kernel_2_start]
   1029  f6b7		       10 0b	   GEM_08_W   equ	[$1000 + .gem_08 - kernel_2_start]
   1030  f6b7		       10 1a	   GEM_11_W   equ	[$1000 + .gem_11 - kernel_2_start]
   1031  f6b7		       10 1e	   GEM_15_W   equ	[$1000 + .gem_15 - kernel_2_start]
   1032  f6b7		       10 22	   GEM_20_W   equ	[$1000 + .gem_20 - kernel_2_start]
   1033  f6b7		       10 26	   GEM_24_W   equ	[$1000 + .gem_24 - kernel_2_start]
   1034  f6b7
   1035  f6b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1036  f6b7
   1037  f6b7							; SUBROUTINE
   1038  f6b7							; Read joystick movement and apply to object 0
   1039  f6b7				   MoveJoystick
   1040  f6b7							; Move vertically
   1041  f6b7							; (up and down are actually reversed since ypos starts at bottom)
   1042  f6b7							;     ldx YPos
   1043  f6b7		       a9 10		      lda	#%00010000	;Up?
   1044  f6b9		       2c 80 02 	      bit	SWCHA
   1045  f6bc		       d0 0d		      bne	SkipMoveUp
   1046  f6be
   1047  f6be		       18		      clc
   1048  f6bf		       a5 88		      lda	Speed2
   1049  f6c1		       69 0c		      adc	#12
   1050  f6c3		       85 88		      sta	Speed2
   1051  f6c5		       a5 87		      lda	Speed1
   1052  f6c7		       69 00		      adc	#00
   1053  f6c9		       85 87		      sta	Speed1
   1054  f6cb
   1055  f6cb				   SkipMoveUp
   1056  f6cb		       a6 86		      ldx	XPos
   1057  f6cd
   1058  f6cd							; Only check left/right on odd frames;
   1059  f6cd							; TODO make this just a fractional speed
   1060  f6cd							; rather than dropping frames
   1061  f6cd		       a9 01		      lda	#01
   1062  f6cf		       25 83		      and	FrameCount
   1063  f6d1		       d0 18		      bne	SkipMoveRight
   1064  f6d3
   1065  f6d3
   1066  f6d3							; Move horizontally
   1067  f6d3		       a9 40		      lda	#%01000000	;Left?
   1068  f6d5		       2c 80 02 	      bit	SWCHA
   1069  f6d8		       d0 05		      bne	SkipMoveLeft
   1070  f6da		       e0 1d		      cpx	#29
   1071  f6dc		       90 01		      bcc	SkipMoveLeft
   1072  f6de		       ca		      dex
   1073  f6df
   1074  f6df							; Reflect
   1075  f6df							;     lda #$ff
   1076  f6df							;     sta REFP0
   1077  f6df				   SkipMoveLeft
   1078  f6df		       a9 80		      lda	#%10000000	;Right?
   1079  f6e1		       2c 80 02 	      bit	SWCHA
   1080  f6e4		       d0 05		      bne	SkipMoveRight
   1081  f6e6		       e0 80		      cpx	#128
   1082  f6e8		       b0 01		      bcs	SkipMoveRight
   1083  f6ea		       e8		      inx
   1084  f6eb
   1085  f6eb							; Reflect
   1086  f6eb							;     lda #$0
   1087  f6eb							;     sta REFP0
   1088  f6eb				   SkipMoveRight
   1089  f6eb		       86 86		      stx	XPos
   1090  f6ed		       60		      rts
   1091  f6ee
   1092  f6ee
   1093  f6ee							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1094  f6ee
   1095  f6ee
   1096  f6ee				   SpeedCalculation
   1097  f6ee		       38		      sec
   1098  f6ef		       a5 88		      lda	Speed2
   1099  f6f1		       e9 07		      sbc	#7
   1100  f6f3		       85 88		      sta	Speed2
   1101  f6f5		       a5 87		      lda	Speed1
   1102  f6f7		       e9 00		      sbc	#0
   1103  f6f9		       85 87		      sta	Speed1
   1104  f6fb
   1105  f6fb		       18		      clc
   1106  f6fc		       a5 8a		      lda	YPos2
   1107  f6fe		       65 88		      adc	Speed2
   1108  f700		       85 8a		      sta	YPos2
   1109  f702		       a5 89		      lda	YPos
   1110  f704		       65 87		      adc	Speed1
   1111  f706		       85 89		      sta	YPos
   1112  f708
   1113  f708		       c9 43		      cmp	#FLOOR_OFFSET
   1114  f70a		       b0 0a		      bcs	NewThing2
   1115  f70c
   1116  f70c							; Reset to floor
   1117  f70c		       a9 43		      lda	#FLOOR_OFFSET
   1118  f70e		       85 89		      sta	YPos
   1119  f710		       a9 00		      lda	#0
   1120  f712		       85 87		      sta	Speed1
   1121  f714		       85 88		      sta	Speed2
   1122  f716				   NewThing2
   1123  f716
   1124  f716		       c9 bf		      cmp	#CEILING_OFFSET
   1125  f718		       90 0a		      bcc	.next
   1126  f71a
   1127  f71a							; Reset to ceiling
   1128  f71a		       a9 bf		      lda	#CEILING_OFFSET
   1129  f71c		       85 89		      sta	YPos
   1130  f71e		       a9 00		      lda	#0
   1131  f720		       85 87		      sta	Speed1
   1132  f722		       85 88		      sta	Speed2
   1133  f724				   .next
   1134  f724
   1135  f724		       60		      rts
   1136  f725
   1137  f725
   1138  f725
   1139  f725							; Subroutine
   1140  f725				   SetHorizPos
   1141  f725		       85 02		      sta	WSYNC	; start a new line
   1142  f727		       24 00		      bit	0	; waste 3 cycles
   1143  f729		       38		      sec		; set carry flag
   1144  f72a				   DivideLoop
   1145  f72a		       e9 0f		      sbc	#15	; subtract 15
   1146  f72c		       b0 fc		      bcs	DivideLoop	; branch until negative
   1147  f72e		       49 07		      eor	#7	; calculate fine offset
   1148  f730		       0a		      asl
   1149  f731		       0a		      asl
   1150  f732		       0a		      asl
   1151  f733		       0a		      asl
   1152  f734		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
   1153  f736		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
   1154  f738		       60		      rts		; return to caller
   1155  f739
   1156  f739
   1157  f739
   1158  f800		       00 00 00 00*	      align	256
   1159  f800
   1160  f800							; Bitmap data for character "standing" position
   1161  f800							; Comical amount of 0's for now to simplify sprite rendering
   1162  f800
   1163  f800							; Y can be from:
   1164  f800							;     SPRITE_HEIGHT to (8*ROW_COUNT)
   1165  f800							; SpriteEnd: 8..128
   1166  f800							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
   1167  f800				   Frame0
   1168  f800		       00		      .byte.b	#%00000000
   1169  f801		       60		      .byte.b	#%01100000
   1170  f802		       60		      .byte.b	#%01100000
   1171  f803		       60		      .byte.b	#%01100000
   1172  f804		       c0		      .byte.b	#%11000000
   1173  f805		       c0		      .byte.b	#%11000000
   1174  f806		       f0		      .byte.b	#%11110000
   1175  f807		       c0		      .byte.b	#%11000000
   1176  f808		       c0		      .byte.b	#%11000000
   1177  f809		       00		      .byte.b	#%00000000
   1178  f80a
   1179  f80a
   1180  f80a							; Epilogue
   1181  fffc					      org	$fffc
   1182  fffc		       00 f2		      .word.w	Start
   1183  fffe		       00 f2		      .word.w	Start
