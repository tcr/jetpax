------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Stella assertions for "make debug"
      4  10000 ????				       mac	assert_runtime
      5  10000 ????			    .COND      SET	{1}
      6  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      7  10000 ????				       endm
      8  10000 ????
      9  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     13  0000 ????
     14  0000 ????						; RAM and constants
------- FILE vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"vars.s"
      1 U008f ????				      seg.u	Variables
      2 U0080					      org	$80
      3 U0080
      4 U0080		       00	   Temp       byte.b
      5 U0081
      6 U0081							; Counters
      7 U0081		       00	   RowCount   byte.b
      8 U0082		       00	   LoopCount  byte.b
      9 U0083		       00	   FrameCount byte.b
     10 U0084
     11 U0084		       00	   YP1	      byte.b
     12 U0085		       00	   SpriteEnd  byte.b
     13 U0086		       00	   XPos       byte.b		; X position of player sprite
     14 U0087
     15 U0087
     16 U0087		       00	   Speed1     byte.b
     17 U0088		       00	   Speed2     byte.b
     18 U0089
     19 U0089		       00	   YPos       byte.b		; Y position of player sprite
     20 U008a		       00	   YPos2      byte.b
     21 U008b
     22 U008b		       00	   GEM_02_TARGET byte.b
     23 U008c
     24 U008c		       00	   JMP_ADDR   byte.b
     25 U008d		       00	   JMP_ADDR_2 byte.b
     26 U008e
     27 U008e		       00	   ROW_DEMO_INDEX byte.b
     28 U008f
     29 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     30 U008f
     31 U008f		       00 10	   ROW_COUNT  equ	16
     32 U008f
     33 U008f		       00 02	   SIGNAL_LINE equ	$02
     34 U008f
     35 U008f		       f1 00	   KERNEL_START equ	$f100
     36 U008f
     37 U008f		       f0 40	   KERNEL_STORAGE_W equ	$f040	; could be max(frame_1_end, frame_2_end)
     38 U008f		       f1 40	   KERNEL_STORAGE_R equ	$f140
     39 U008f
     40 U008f							; Sprites
     41 U008f
     42 U008f							; Nusiz
     43 U008f		       00 13	   THREE_COPIES equ	%00010011
     44 U008f
     45 U008f							; Frame 1 sprites
     46 U008f		       00 60	   EMR1       equ	%01100000
     47 U008f		       00 06	   EMR2       equ	%00000110
     48 U008f		       00 66	   EMR3       equ	%01100110
     49 U008f
     50 U008f							; Frame 2 sprites
     51 U008f		       00 c0	   T1	      equ	%11000000
     52 U008f		       00 0c	   T2	      equ	%00001100
     53 U008f		       00 cc	   T3	      equ	%11001100
     54 U008f
     55 U008f							; Shorthands
     56 U008f
     57 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     58 U008f		       00 85	   SET_1_0    equ	$85	; STA
     59 U008f		       00 86	   SET_0_1    equ	$86	; STX
     60 U008f		       00 84	   SET_1_1    equ	$84	; STY
     61 U008f
     62 U008f		       00 86	   SET_0_L    equ	$86	; STX
     63 U008f		       00 85	   SET_1_L    equ	$85	; STA
     64 U008f
     65 U008f		       00 85	   SET_0_R    equ	$85	; STA
     66 U008f		       00 84	   SET_1_R    equ	$84	; STY
     67 U008f
     68 U008f							; Gem enabling/disabling globally
     69 U008f
     70 U008f							; ; all off
     71 U008f							; GEM_00 equ SET_0_0
     72 U008f							; GEM_02 equ SET_0_0
     73 U008f							; GEM_04 equ SET_0_0
     74 U008f							; GEM_06 equ SET_0_0
     75 U008f							; GEM_08 equ SET_0_L
     76 U008f							; GEM_09 equ SET_0_0
     77 U008f							; GEM_11 equ SET_0_0
     78 U008f							; GEM_13 equ SET_0_0
     79 U008f							; GEM_15 equ SET_0_0
     80 U008f							; GEM_17 equ SET_0_R
     81 U008f							; GEM_18 equ SET_0_0
     82 U008f							; GEM_20 equ SET_0_0
     83 U008f							; GEM_22 equ SET_0_0
     84 U008f							; GEM_24 equ SET_0_0
     85 U008f
     86 U008f							; all on
     87 U008f		       00 84	   GEM_00     equ	SET_1_1
     88 U008f		       00 84	   GEM_02     equ	SET_1_1
     89 U008f		       00 84	   GEM_04     equ	SET_1_1
     90 U008f		       00 84	   GEM_06     equ	SET_1_1
     91 U008f		       00 85	   GEM_08     equ	SET_1_L
     92 U008f		       00 84	   GEM_09     equ	SET_1_1
     93 U008f		       00 84	   GEM_11     equ	SET_1_1
     94 U008f		       00 84	   GEM_13     equ	SET_1_1
     95 U008f		       00 84	   GEM_15     equ	SET_1_1
     96 U008f		       00 84	   GEM_17     equ	SET_1_R
     97 U008f		       00 84	   GEM_18     equ	SET_1_1
     98 U008f		       00 84	   GEM_20     equ	SET_1_1
     99 U008f		       00 84	   GEM_22     equ	SET_1_1
    100 U008f		       00 84	   GEM_24     equ	SET_1_1
    101 U008f
    102 U008f							; ; odd on
    103 U008f							; GEM_00 equ SET_1_0
    104 U008f							; GEM_02 equ SET_1_0
    105 U008f							; GEM_04 equ SET_1_0
    106 U008f							; GEM_06 equ SET_1_0
    107 U008f							; GEM_08 equ SET_1_L
    108 U008f							; GEM_09 equ SET_0_1
    109 U008f							; GEM_11 equ SET_0_1
    110 U008f							; GEM_13 equ SET_0_1
    111 U008f							; GEM_15 equ SET_0_1
    112 U008f							; GEM_17 equ SET_0_R
    113 U008f							; GEM_18 equ SET_1_0
    114 U008f							; GEM_20 equ SET_1_0
    115 U008f							; GEM_22 equ SET_1_0
    116 U008f							; GEM_24 equ SET_1_0
    117 U008f
    118 U008f							; ; even on
    119 U008f							; GEM_00 equ SET_0_1
    120 U008f							; GEM_02 equ SET_0_1
    121 U008f							; GEM_04 equ SET_0_1
    122 U008f							; GEM_06 equ SET_0_1
    123 U008f							; GEM_08 equ SET_0_L
    124 U008f							; GEM_09 equ SET_1_0
    125 U008f							; GEM_11 equ SET_1_0
    126 U008f							; GEM_13 equ SET_1_0
    127 U008f							; GEM_15 equ SET_1_0
    128 U008f							; GEM_17 equ SET_1_R
    129 U008f							; GEM_18 equ SET_0_1
    130 U008f							; GEM_20 equ SET_0_1
    131 U008f							; GEM_22 equ SET_0_1
    132 U008f							; GEM_24 equ SET_0_1
    133 U008f
    134 U008f							; Colors
    135 U008f
    136 U008f		       00 42	   COL_BG     equ	$42
    137 U008f		       00 cc	   COL_EMERALD equ	$CC
    138 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    139 U008f
    140 U008f							; HMOVE values for missiles
    141 U008f
    142 U008f		       00 27	   KERNEL_A_MISSILE_SLEEP equ	39
    143 U008f		       00 d0	   KERNEL_A_MISSILE_HMOVE equ	$d0
    144 U008f
    145 U008f		       00 27	   KERNEL_B_MISSILE_SLEEP equ	39
    146 U008f		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
    147 U008f
    148 U008f							; Sprite details
    149 U008f
    150 U008f		       00 09	   SPRITE_HEIGHT equ	9
    151 U008f
    152 U008f
    153 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    154 U008f		       00 1c	   EMERALD_SP equ	GRP1
    155 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    156 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    157 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    158 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    159 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    160 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    161 U008f
    162 U008f		       00 1b	   JET_SP     equ	GRP0
    163 U008f		       00 10	   JET_SP_RESET equ	RESP0
    164 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    165 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    166 U008f
    167 U008f
    168 U008f							; Offset from the sprite label to the point
    169 U008f							; at which the sprite actually starts. This is the 0-padding
    170 U008f							; FRAME_OFFSET equ 53
    171 U008f
    172 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    173 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    174 U008f
    175 U008f							; Compared with YPos
    176 U008f		       00 3e	   FLOOR_OFFSET equ	62
    177 U008f		       00 be	   CEILING_OFFSET equ	190
    178 U008f
    179 U008f							; Starting player position
    180 U008f		       00 3e	   YPosStart  equ	62
    181 U008f		       00 37	   XPosStart  equ	55
    182 U008f
    183 U008f							; Top left corner
    184 U008f							; YPosStart equ 190
    185 U008f							; XPosStart equ 28
    186 U008f
    187 U008f
    188 U008f		       00 07	   FrameSkip  equ	%111
    189 U008f							; FrameSkip equ %1
------- FILE main.s
     16 U008f
     17 U008f							; Bank 1
     18  e000 ????				      seg	CodeBank1
     19  d000					      org	$D000
     20  d000					      rorg	$F000
     21  d000		       00	   BANK1      byte.b
     22  d200					      org	$d200
     23  d200					      rorg	$d200
     24  d200				   Bank1Start
     25  d200		       ad fa ff 	      lda	$fffa
     26  d203		       ea		      nop
     27  d204		       ea		      nop
     28  d205		       ea		      nop
     29  d206
     30  dffc					      org	$dffc
     31  dffc					      rorg	$fffc
     32  dffc		       00 d2		      .word.w	Bank1Start
     33  dffe		       00 d2		      .word.w	Bank1Start
     34  e000
     35  e000							; Bank 2
     36  f000 ????				      seg	CodeBank2
     37  e000					      org	$E000
     38  e000					      rorg	$F000
     39  e000		       00	   BANK2      byte.b
     40  e200					      org	$e200
     41  e200					      rorg	$f200
     42  e200				   Bank2Start
     43  e200		       ad fa ff 	      lda	$fffa
     44  e203		       ea		      nop
     45  e204		       ea		      nop
     46  e205		       ea		      nop
     47  e206
     48  effc					      org	$effc
     49  effc					      rorg	$fffc
     50  effc		       00 f2		      .word.w	Bank2Start
     51  effe		       00 f2		      .word.w	Bank2Start
     52  f000
     53  f000							; Bank 3
     54  10000 ????				       seg	CodeBank3
     55  f000					      org	$F000
     56  f000					      rorg	$F000
     57  f000		       00	   BANK3      byte.b
     58  f200					      org	$f200
     59  f200					      rorg	$f200
     60  f200				   Bank3Start
     61  f200		       ad fa ff 	      lda	$fffa
     62  f203		       ea		      nop
     63  f204		       ea		      nop
     64  f205		       ea		      nop
     65  f206		       4c 09 f2 	      jmp	Start
     66  f209
     67  f209							; Bank 3 source code
------- FILE init.s LEVEL 2 PASS 2
      0  f209					      include	"init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      5  f214
      6  f214							; just testing stuff
      7  f214
      8  f214		       a9 03		      lda	#%00000011
      9  f216		       48		      pha
     10  f217		       28		      plp
     11  f218		       08		      php
      0  f219					      ASSERT_RUNTIME	"*$ff == \00110011"
      1  f219				   .COND      SET	"*$ff == \00110011"
 ASSERT: breakif { pc== $f219  && !(  *$ff == \00110011  ) }
      2  f219					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     13  f219		       28		      plp
     14  f21a
     15  f21a				   InitSetup
     16  f21a		       a9 00		      lda	#0
     17  f21c		       85 83		      sta	FrameCount
     18  f21e
     19  f21e							; P0 has three copies
     20  f21e		       a9 13		      lda	#%00010011
     21  f220		       85 05		      sta	EMERALD_COPIES
     22  f222
     23  f222		       a9 00		      lda	#$00
     24  f224		       85 09		      sta	COLUBK
     25  f226		       a9 01		      lda	#%00000001
     26  f228		       85 0a		      sta	CTRLPF	; reflect playfield
     27  f22a
     28  f22a							; Disable VDEL
     29  f22a		       a9 00		      lda	#0
     30  f22c		       85 25		      sta	VDELP0
     31  f22e		       85 26		      sta	VDELP1
     32  f230
     33  f230
     34  f230							; Player 0
     35  f230		       a2 cc		      ldx	#COL_EMERALD
     36  f232		       86 07		      stx	EMERALD_SP_COLOR
     37  f234
     38  f234							; Player 1
     39  f234		       a9 0f		      lda	#$0f
     40  f236		       85 06		      sta	JET_SP_COLOR
     41  f238		       a9 00		      lda	#$00
     42  f23a		       85 1b		      sta	JET_SP
     43  f23c
     44  f23c							; Positions
     45  f23c		       a9 3e		      lda	#YPosStart
     46  f23e		       85 89		      sta	YPos
     47  f240		       a9 37		      lda	#XPosStart
     48  f242		       85 86		      sta	XPos
     49  f244		       a9 00		      lda	#0
     50  f246		       85 87		      sta	Speed1
     51  f248		       85 88		      sta	Speed2
     52  f24a		       85 8a		      sta	YPos2
     53  f24c
     54  f24c		       a9 00		      lda	#0
     55  f24e		       85 8e		      sta	ROW_DEMO_INDEX
     56  f250
     57  f250							; Start with vertical sync (to reset frame)
     58  f250		       4c 77 f3 	      jmp	VerticalSync
------- FILE main.s
------- FILE loader.s LEVEL 2 PASS 2
      0  f253					      include	"loader.s"
      1  f253							; Copies the gem kernel to RAM
      2  f253
      3  f253					      mac	emeralds_two
      4  f253				   .target    SET	{1}
      5  f253							; 18c ?
      6  f253					      ldx	#%11
      7  f253					      .byte	$CB, $0	; axs
      8  f253					      ldy	map_full,X
      9  f253					      sty	[.target - storage + KERNEL_STORAGE_W]
     10  f253					      ror
     11  f253					      ror
     12  f253					      endm
     13  f253
     14  f253							; mac EMERALDS_TWO_RLA
     15  f253							; ; 20c
     16  f253							; lda #%00100000 ; 2c
     17  f253							; ; fake code
     18  f253							; cmp against map
     19  f253							; adc .target if true
     20  f253
     21  f253							; ldx map
     22  f253							; ldy #%11
     23  f253
     24  f253							; lda {TARGET}
     25  f253							; STA ( {TARGET} + A ) if X & Y
     26  f253
     27  f253							; rla TEMP ; 5c
     28  f253							; sta [.target - storage + KERNEL_STORAGE_W] ;4
     29  f253							; rol TEMP ; 5c
     30  f253							; endm
     31  f253
     32  f253					      mac	emeralds_two_skip
     33  f253					      ror
     34  f253					      ror
     35  f253					      endm
     36  f253
     37  f253					      mac	emeralds_one
     38  f253				   .target    SET	{1}
     39  f253				   .source    SET	{2}
     40  f253					      tax
     41  f253					      and	#%1
     42  f253					      tay
     43  f253					      lda	.source,Y
     44  f253					      sta	[.target - storage + KERNEL_STORAGE_W]
     45  f253					      txa
     46  f253					      ror
     47  f253					      endm
     48  f253
     49  f253					      mac	emeralds_one_skip
     50  f253					      ror
     51  f253					      endm
     52  f253
     53  f253
     54  f253							; Map
     55  f253
     56  f258		       00 00 00 00*	      align	8
     57  f258				   map_full
     58  f258		       87		      .byte.b	SET_0_0	; 00
     59  f259		       86		      .byte.b	SET_0_1	; 01
     60  f25a		       85		      .byte.b	SET_1_0	; 10
     61  f25b		       84		      .byte.b	SET_1_1	; 11
     62  f25c				   map_missle_l
     63  f25c		       86		      .byte.b	SET_0_L	; 0
     64  f25d		       85		      .byte.b	SET_1_L	; 1
     65  f25e				   map_missle_r
     66  f25e		       85		      .byte.b	SET_0_R	; 0
     67  f25f		       84		      .byte.b	SET_1_R	; 1
     68  f260
     69  f260
     70  f260							; Frame Copying
     71  f260
     72  f260				   CopyFrame  subroutine
     73  f260							; FRAMESWITCH
     74  f260		       a9 01		      lda	#01
     75  f262		       25 83		      and	FrameCount
     76  f264		       f0 03		      beq	CopyFrame1Kernel
     77  f266		       4c f0 f2 	      jmp	CopyFrame2Kernel
     78  f269
     79  f269							; Copy: KERNEL 1
     80  f269				   CopyFrame1Kernel subroutine
     81  f269		       a0 2e		      ldy	#(kernel_1_end - kernel_1_start)-1
     82  f26b				   .loop
     83  f26b		       b9 00 f7 	      lda	kernel_1_start,Y
     84  f26e		       99 00 10 	      sta	$1000,Y
     85  f271		       88		      dey
     86  f272		       d0 f7		      bne	.loop
     87  f274		       ad 00 f7 	      lda	kernel_1_start
     88  f277		       8d 00 10 	      sta	$1000
     89  f27a
     90  f27a				   LoadGemState
     91  f27a		       a6 8e		      ldx	ROW_DEMO_INDEX
     92  f27c		       bd 23 f8 	      lda	level_01+3,X
      0  f27f					      EMERALDS_TWO_SKIP
      1  f27f		       6a		      ror
      2  f280		       6a		      ror
     94  f281				   BOO
      0  f281					      EMERALDS_TWO	storage_22
      1  f281				   .target    SET	storage_22
      2  f281
      3  f281		       a2 03		      ldx	#%11
      4  f283		       cb 00		      .byte.b	$CB, $0
      5  f285		       bc 58 f2 	      ldy	map_full,X
      6  f288		       8c 46 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f28b		       6a		      ror
      8  f28c		       6a		      ror
     96  f28d				   BOO_OKAY
      0  f28d					      EMERALDS_TWO_SKIP
      1  f28d		       6a		      ror
      2  f28e		       6a		      ror
      0  f28f					      EMERALDS_TWO	storage_18
      1  f28f				   .target    SET	storage_18
      2  f28f
      3  f28f		       a2 03		      ldx	#%11
      4  f291		       cb 00		      .byte.b	$CB, $0
      5  f293		       bc 58 f2 	      ldy	map_full,X
      6  f296		       8c 45 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f299		       6a		      ror
      8  f29a		       6a		      ror
     99  f29b
    100  f29b		       a6 8e		      ldx	ROW_DEMO_INDEX
    101  f29d		       bd 22 f8 	      lda	level_01+2,X
      0  f2a0					      EMERALDS_ONE	storage_17, map_missle_r
      1  f2a0				   .target    SET	storage_17
      2  f2a0				   .source    SET	map_missle_r
      3  f2a0		       aa		      tax
      4  f2a1		       29 01		      and	#%1
      5  f2a3		       a8		      tay
      6  f2a4		       b9 5e f2 	      lda	.source,Y
      7  f2a7		       8d 44 f0 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f2aa		       8a		      txa
      9  f2ab		       6a		      ror
      0  f2ac					      EMERALDS_TWO_SKIP
      1  f2ac		       6a		      ror
      2  f2ad		       6a		      ror
      0  f2ae					      EMERALDS_TWO	storage_13
      1  f2ae				   .target    SET	storage_13
      2  f2ae
      3  f2ae		       a2 03		      ldx	#%11
      4  f2b0		       cb 00		      .byte.b	$CB, $0
      5  f2b2		       bc 58 f2 	      ldy	map_full,X
      6  f2b5		       8c 43 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f2b8		       6a		      ror
      8  f2b9		       6a		      ror
      0  f2ba					      EMERALDS_TWO_SKIP
      1  f2ba		       6a		      ror
      2  f2bb		       6a		      ror
    106  f2bc
    107  f2bc		       a6 8e		      ldx	ROW_DEMO_INDEX
    108  f2be		       bd 21 f8 	      lda	level_01+1,X
      0  f2c1					      EMERALDS_TWO	storage_09
      1  f2c1				   .target    SET	storage_09
      2  f2c1
      3  f2c1		       a2 03		      ldx	#%11
      4  f2c3		       cb 00		      .byte.b	$CB, $0
      5  f2c5		       bc 58 f2 	      ldy	map_full,X
      6  f2c8		       8c 42 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f2cb		       6a		      ror
      8  f2cc		       6a		      ror
      0  f2cd					      EMERALDS_ONE_SKIP
      1  f2cd		       6a		      ror
      0  f2ce					      EMERALDS_TWO_SKIP
      1  f2ce		       6a		      ror
      2  f2cf		       6a		      ror
      0  f2d0					      EMERALDS_TWO	storage_04
      1  f2d0				   .target    SET	storage_04
      2  f2d0
      3  f2d0		       a2 03		      ldx	#%11
      4  f2d2		       cb 00		      .byte.b	$CB, $0
      5  f2d4		       bc 58 f2 	      ldy	map_full,X
      6  f2d7		       8c 41 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f2da		       6a		      ror
      8  f2db		       6a		      ror
    113  f2dc
    114  f2dc		       a6 8e		      ldx	ROW_DEMO_INDEX
    115  f2de		       bd 20 f8 	      lda	level_01+0,X
      0  f2e1					      EMERALDS_TWO_SKIP
      1  f2e1		       6a		      ror
      2  f2e2		       6a		      ror
      0  f2e3					      EMERALDS_TWO	storage_00
      1  f2e3				   .target    SET	storage_00
      2  f2e3
      3  f2e3		       a2 03		      ldx	#%11
      4  f2e5		       cb 00		      .byte.b	$CB, $0
      5  f2e7		       bc 58 f2 	      ldy	map_full,X
      6  f2ea		       8c 40 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f2ed		       6a		      ror
      8  f2ee		       6a		      ror
    118  f2ef				   LoadGemStateEnd
    119  f2ef
    120  f2ef		       60		      rts
    121  f2f0
    122  f2f0							; Copy: KERNEL 2
    123  f2f0				   CopyFrame2Kernel subroutine
    124  f2f0		       a0 2f		      ldy	#(kernel_2_end - kernel_2_start)-1
    125  f2f2				   .loop
    126  f2f2		       b9 2f f7 	      lda	kernel_2_start,Y
    127  f2f5		       99 00 10 	      sta	$1000,Y
    128  f2f8		       88		      dey
    129  f2f9		       d0 f7		      bne	.loop
    130  f2fb		       ad 2f f7 	      lda	kernel_2_start
    131  f2fe		       8d 00 10 	      sta	$1000
    132  f301
    133  f301		       a6 8e		      ldx	ROW_DEMO_INDEX
    134  f303		       bd 23 f8 	      lda	level_01+3,X
      0  f306					      EMERALDS_TWO	storage_24
      1  f306				   .target    SET	storage_24
      2  f306
      3  f306		       a2 03		      ldx	#%11
      4  f308		       cb 00		      .byte.b	$CB, $0
      5  f30a		       bc 58 f2 	      ldy	map_full,X
      6  f30d		       8c 4d f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f310		       6a		      ror
      8  f311		       6a		      ror
      0  f312					      EMERALDS_TWO_SKIP
      1  f312		       6a		      ror
      2  f313		       6a		      ror
      0  f314					      EMERALDS_TWO	storage_20
      1  f314				   .target    SET	storage_20
      2  f314
      3  f314		       a2 03		      ldx	#%11
      4  f316		       cb 00		      .byte.b	$CB, $0
      5  f318		       bc 58 f2 	      ldy	map_full,X
      6  f31b		       8c 4c f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f31e		       6a		      ror
      8  f31f		       6a		      ror
      0  f320					      EMERALDS_TWO_SKIP
      1  f320		       6a		      ror
      2  f321		       6a		      ror
    139  f322
    140  f322		       a6 8e		      ldx	ROW_DEMO_INDEX
    141  f324		       bd 22 f8 	      lda	level_01+2,X
      0  f327					      EMERALDS_ONE_SKIP
      1  f327		       6a		      ror
      0  f328					      EMERALDS_TWO	storage_15
      1  f328				   .target    SET	storage_15
      2  f328
      3  f328		       a2 03		      ldx	#%11
      4  f32a		       cb 00		      .byte.b	$CB, $0
      5  f32c		       bc 58 f2 	      ldy	map_full,X
      6  f32f		       8c 4b f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f332		       6a		      ror
      8  f333		       6a		      ror
      0  f334					      EMERALDS_TWO_SKIP
      1  f334		       6a		      ror
      2  f335		       6a		      ror
      0  f336					      EMERALDS_TWO	storage_11
      1  f336				   .target    SET	storage_11
      2  f336
      3  f336		       a2 03		      ldx	#%11
      4  f338		       cb 00		      .byte.b	$CB, $0
      5  f33a		       bc 58 f2 	      ldy	map_full,X
      6  f33d		       8c 4a f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f340		       6a		      ror
      8  f341		       6a		      ror
    146  f342
    147  f342		       a6 8e		      ldx	ROW_DEMO_INDEX
    148  f344		       bd 21 f8 	      lda	level_01+1,X
      0  f347					      EMERALDS_TWO_SKIP
      1  f347		       6a		      ror
      2  f348		       6a		      ror
      0  f349					      EMERALDS_ONE	storage_08, map_missle_l
      1  f349				   .target    SET	storage_08
      2  f349				   .source    SET	map_missle_l
      3  f349		       aa		      tax
      4  f34a		       29 01		      and	#%1
      5  f34c		       a8		      tay
      6  f34d		       b9 5c f2 	      lda	.source,Y
      7  f350		       8d 49 f0 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f353		       8a		      txa
      9  f354		       6a		      ror
      0  f355					      EMERALDS_TWO	storage_06
      1  f355				   .target    SET	storage_06
      2  f355
      3  f355		       a2 03		      ldx	#%11
      4  f357		       cb 00		      .byte.b	$CB, $0
      5  f359		       bc 58 f2 	      ldy	map_full,X
      6  f35c		       8c 48 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f35f		       6a		      ror
      8  f360		       6a		      ror
      0  f361					      EMERALDS_TWO_SKIP
      1  f361		       6a		      ror
      2  f362		       6a		      ror
    153  f363
    154  f363		       a6 8e		      ldx	ROW_DEMO_INDEX
    155  f365		       bd 20 f8 	      lda	level_01+0,X
      0  f368					      EMERALDS_TWO	storage_02
      1  f368				   .target    SET	storage_02
      2  f368
      3  f368		       a2 03		      ldx	#%11
      4  f36a		       cb 00		      .byte.b	$CB, $0
      5  f36c		       bc 58 f2 	      ldy	map_full,X
      6  f36f		       8c 47 f0 	      sty	[.target - storage + KERNEL_STORAGE_W]
      7  f372		       6a		      ror
      8  f373		       6a		      ror
      0  f374					      EMERALDS_TWO_SKIP
      1  f374		       6a		      ror
      2  f375		       6a		      ror
    158  f376
    159  f376		       60		      rts
------- FILE main.s
------- FILE frame.s LEVEL 2 PASS 2
      0  f377					      include	"frame.s"
      1  f377							; Frame loop, including calling out to other kernels.
      2  f377
      3  f377							; Vertical Sync
      4  f377				   VerticalSync subroutine
      0  f377					      VERTICAL_SYNC
      1  f377		       a9 0e		      lda	#%1110
      2  f379		       85 02	   .VSLP1     sta	WSYNC
      3  f37b		       85 00		      sta	VSYNC
      4  f37d		       4a		      lsr
      5  f37e		       d0 f9		      bne	.VSLP1
      6  f380
      7  f380				   FrameStart subroutine
      0  f380					      ASSERT_RUNTIME	"_scan == #0"
      1  f380				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f380  && !(  _scan == #0  ) }
      2  f380					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f380
     10  f380				   VerticalBlank subroutine
      0  f380					      TIMER_SETUP	37
      1  f380				   .lines     SET	37
      2  f380		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f382		       85 02		      sta	WSYNC
      4  f384		       8d 96 02 	      sta	TIM64T
     12  f387
     13  f387							; Scanline counter
     14  f387		       a9 10		      lda	#ROW_COUNT
     15  f389		       85 82		      sta	LoopCount
     16  f38b
     17  f38b							; Frame counter
     18  f38b		       e6 83		      inc	FrameCount
     19  f38d
     20  f38d							; Copy frames
     21  f38d		       20 60 f2 	      jsr	CopyFrame
     22  f390
     23  f390							; Skip every 8 frames for increasing demo index
     24  f390		       a5 83		      lda	FrameCount
     25  f392		       29 07		      and	#FrameSkip
     26  f394		       c9 07		      cmp	#FrameSkip
     27  f396		       d0 0d		      bne	.next_next_thing
     28  f398
     29  f398		       18		      clc
     30  f399		       a5 8e		      lda	ROW_DEMO_INDEX
     31  f39b		       69 04		      adc	#4
     32  f39d		       c9 68		      cmp	#[level_01_end - level_01]
     33  f39f		       90 02		      bcc	.next_thing_local
     34  f3a1		       a9 00		      lda	#0
     35  f3a3				   .next_thing_local
     36  f3a3		       85 8e		      sta	ROW_DEMO_INDEX
     37  f3a5				   .next_next_thing
     38  f3a5		       85 02		      sta	WSYNC
     39  f3a7
     40  f3a7							; Positioning
      0  f3a7					      SLEEP	40
      1  f3a7				   .CYCLES    SET	40
      2  f3a7
      3  f3a7				  -	      IF	.CYCLES < 2
      4  f3a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3a7				  -	      ERR
      6  f3a7					      ENDIF
      7  f3a7
      8  f3a7				  -	      IF	.CYCLES & 1
      9  f3a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3a7				  -	      nop	0
     11  f3a7				  -	      ELSE
     12  f3a7				  -	      bit	VSYNC
     13  f3a7				  -	      ENDIF
     14  f3a7				  -.CYCLES    SET	.CYCLES - 3
     15  f3a7					      ENDIF
     16  f3a7
     17  f3a7					      REPEAT	.CYCLES / 2
     18  f3a7		       ea		      nop
     17  f3a7					      REPEND
     18  f3a8		       ea		      nop
     17  f3a8					      REPEND
     18  f3a9		       ea		      nop
     17  f3a9					      REPEND
     18  f3aa		       ea		      nop
     17  f3aa					      REPEND
     18  f3ab		       ea		      nop
     17  f3ab					      REPEND
     18  f3ac		       ea		      nop
     17  f3ac					      REPEND
     18  f3ad		       ea		      nop
     17  f3ad					      REPEND
     18  f3ae		       ea		      nop
     17  f3ae					      REPEND
     18  f3af		       ea		      nop
     17  f3af					      REPEND
     18  f3b0		       ea		      nop
     17  f3b0					      REPEND
     18  f3b1		       ea		      nop
     17  f3b1					      REPEND
     18  f3b2		       ea		      nop
     17  f3b2					      REPEND
     18  f3b3		       ea		      nop
     17  f3b3					      REPEND
     18  f3b4		       ea		      nop
     17  f3b4					      REPEND
     18  f3b5		       ea		      nop
     17  f3b5					      REPEND
     18  f3b6		       ea		      nop
     17  f3b6					      REPEND
     18  f3b7		       ea		      nop
     17  f3b7					      REPEND
     18  f3b8		       ea		      nop
     17  f3b8					      REPEND
     18  f3b9		       ea		      nop
     17  f3b9					      REPEND
     18  f3ba		       ea		      nop
     19  f3bb					      REPEND
     42  f3bb		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     43  f3bd		       85 02		      sta	WSYNC
     44  f3bf
     45  f3bf							; Misc
     46  f3bf		       a9 00		      lda	#00
     47  f3c1		       85 1e		      sta	EMERALD_MI_ENABLE
     48  f3c3
     49  f3c3							; Assign dervied SpriteEnd value
     50  f3c3		       18		      clc
     51  f3c4		       a9 c8		      lda	#HEIGHT_OFFSET
     52  f3c6		       e5 89		      sbc	YPos
     53  f3c8		       85 85		      sta	SpriteEnd
     54  f3ca
     55  f3ca
     56  f3ca							; Player 1
     57  f3ca		       a5 86		      lda	XPos
     58  f3cc		       a2 00		      ldx	#0
     59  f3ce		       20 d1 f4 	      jsr	SetHorizPos
     60  f3d1
     61  f3d1				   PositionMissiles subroutine
     62  f3d1							; Kernel A or B
     63  f3d1		       a9 01		      lda	#01
     64  f3d3		       25 83		      and	FrameCount
     65  f3d5		       d0 1f		      bne	.kernel_b
     66  f3d7
     67  f3d7				   .kernel_a
     68  f3d7		       85 02		      sta	WSYNC
      0  f3d9					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f3d9				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f3d9
      3  f3d9				  -	      IF	.CYCLES < 2
      4  f3d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3d9				  -	      ERR
      6  f3d9					      ENDIF
      7  f3d9
      8  f3d9					      IF	.CYCLES & 1
      9  f3d9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3d9		       04 00		      nop	0
     11  f3db				  -	      ELSE
     12  f3db				  -	      bit	VSYNC
     13  f3db					      ENDIF
     14  f3db				   .CYCLES    SET	.CYCLES - 3
     15  f3db					      ENDIF
     16  f3db
     17  f3db					      REPEAT	.CYCLES / 2
     18  f3db		       ea		      nop
     17  f3db					      REPEND
     18  f3dc		       ea		      nop
     17  f3dc					      REPEND
     18  f3dd		       ea		      nop
     17  f3dd					      REPEND
     18  f3de		       ea		      nop
     17  f3de					      REPEND
     18  f3df		       ea		      nop
     17  f3df					      REPEND
     18  f3e0		       ea		      nop
     17  f3e0					      REPEND
     18  f3e1		       ea		      nop
     17  f3e1					      REPEND
     18  f3e2		       ea		      nop
     17  f3e2					      REPEND
     18  f3e3		       ea		      nop
     17  f3e3					      REPEND
     18  f3e4		       ea		      nop
     17  f3e4					      REPEND
     18  f3e5		       ea		      nop
     17  f3e5					      REPEND
     18  f3e6		       ea		      nop
     17  f3e6					      REPEND
     18  f3e7		       ea		      nop
     17  f3e7					      REPEND
     18  f3e8		       ea		      nop
     17  f3e8					      REPEND
     18  f3e9		       ea		      nop
     17  f3e9					      REPEND
     18  f3ea		       ea		      nop
     17  f3ea					      REPEND
     18  f3eb		       ea		      nop
     17  f3eb					      REPEND
     18  f3ec		       ea		      nop
     19  f3ed					      REPEND
     70  f3ed		       85 13		      sta	EMERALD_MI_RESET
     71  f3ef
     72  f3ef		       a9 d0		      lda	#KERNEL_A_MISSILE_HMOVE
     73  f3f1		       85 23		      sta	EMERALD_MI_HMOVE
     74  f3f3
     75  f3f3		       4c 12 f4 	      jmp	.complete
     76  f3f6
     77  f3f6				   .kernel_b
     78  f3f6		       85 02		      sta	WSYNC
      0  f3f8					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f3f8				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f3f8
      3  f3f8				  -	      IF	.CYCLES < 2
      4  f3f8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3f8				  -	      ERR
      6  f3f8					      ENDIF
      7  f3f8
      8  f3f8					      IF	.CYCLES & 1
      9  f3f8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3f8		       04 00		      nop	0
     11  f3fa				  -	      ELSE
     12  f3fa				  -	      bit	VSYNC
     13  f3fa					      ENDIF
     14  f3fa				   .CYCLES    SET	.CYCLES - 3
     15  f3fa					      ENDIF
     16  f3fa
     17  f3fa					      REPEAT	.CYCLES / 2
     18  f3fa		       ea		      nop
     17  f3fa					      REPEND
     18  f3fb		       ea		      nop
     17  f3fb					      REPEND
     18  f3fc		       ea		      nop
     17  f3fc					      REPEND
     18  f3fd		       ea		      nop
     17  f3fd					      REPEND
     18  f3fe		       ea		      nop
     17  f3fe					      REPEND
     18  f3ff		       ea		      nop
     17  f3ff					      REPEND
     18  f400		       ea		      nop
     17  f400					      REPEND
     18  f401		       ea		      nop
     17  f401					      REPEND
     18  f402		       ea		      nop
     17  f402					      REPEND
     18  f403		       ea		      nop
     17  f403					      REPEND
     18  f404		       ea		      nop
     17  f404					      REPEND
     18  f405		       ea		      nop
     17  f405					      REPEND
     18  f406		       ea		      nop
     17  f406					      REPEND
     18  f407		       ea		      nop
     17  f407					      REPEND
     18  f408		       ea		      nop
     17  f408					      REPEND
     18  f409		       ea		      nop
     17  f409					      REPEND
     18  f40a		       ea		      nop
     17  f40a					      REPEND
     18  f40b		       ea		      nop
     19  f40c					      REPEND
     80  f40c		       85 13		      sta	EMERALD_MI_RESET
     81  f40e
     82  f40e		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     83  f410		       85 23		      sta	EMERALD_MI_HMOVE
     84  f412
     85  f412				   .complete
     86  f412
     87  f412				   VerticalBlankEnd
     88  f412							; Wait until the end of Vertical blank.
      0  f412					      TIMER_WAIT
      1  f412				   .waittimer
      2  f412		       ad 84 02 	      lda	INTIM
      3  f415		       d0 fb		      bne	.waittimer
      4  f417		       85 02		      sta	WSYNC
      0  f419					      ASSERT_RUNTIME	"_scan == #37"
      1  f419				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f419  && !(  _scan == #37  ) }
      2  f419					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     91  f419
     92  f419							; Start rendering the kernel.
      0  f419					      TIMER_SETUP	192
      1  f419				   .lines     SET	192
      2  f419		       a9 e3		      lda	#(((.lines)*76-14)/64)
      3  f41b		       85 02		      sta	WSYNC
      4  f41d		       8d 96 02 	      sta	TIM64T
     94  f420		       4c e5 f4 	      jmp	KernelBorder
     95  f423
     96  f423				   FrameEnd   subroutine
     97  f423		       85 02		      sta	WSYNC
     98  f425
     99  f425							; Blank all background colors.
    100  f425		       a9 00		      lda	#0
    101  f427		       85 08		      sta	COLUPF
    102  f429		       85 0f		      sta	PF2
    103  f42b		       85 0e		      sta	PF1
    104  f42d		       85 1c		      sta	EMERALD_SP
    105  f42f
    106  f42f							; Guide lines (2x)
    107  f42f		       a9 02		      lda	#SIGNAL_LINE
    108  f431		       85 09		      sta	COLUBK
    109  f433					      REPEAT	6
    110  f433		       85 02		      sta	WSYNC
    109  f433					      REPEND
    110  f435		       85 02		      sta	WSYNC
    109  f435					      REPEND
    110  f437		       85 02		      sta	WSYNC
    109  f437					      REPEND
    110  f439		       85 02		      sta	WSYNC
    109  f439					      REPEND
    110  f43b		       85 02		      sta	WSYNC
    109  f43b					      REPEND
    110  f43d		       85 02		      sta	WSYNC
    111  f43f					      REPEND
    112  f43f		       a9 00		      lda	#$00
    113  f441		       85 09		      sta	COLUBK
    114  f443
    115  f443							; TODO Should a timer be necessary for ending the graphics kernel?
      0  f443					      TIMER_WAIT
      1  f443				   .waittimer
      2  f443		       ad 84 02 	      lda	INTIM
      3  f446		       d0 fb		      bne	.waittimer
      4  f448		       85 02		      sta	WSYNC
      0  f44a					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f44a				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f44a  && !(  _scan == (#37 + #192)  ) }
      2  f44a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    118  f44a
    119  f44a							; Overscan
    120  f44a				   Overscan   subroutine
    121  f44a		       85 01		      sta	VBLANK
      0  f44c					      TIMER_SETUP	29
      1  f44c				   .lines     SET	29
      2  f44c		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f44e		       85 02		      sta	WSYNC
      4  f450		       8d 96 02 	      sta	TIM64T
    123  f453
    124  f453		       20 63 f4 	      jsr	MoveJoystick
    125  f456		       20 9a f4 	      jsr	SpeedCalculation
    126  f459
      0  f459					      TIMER_WAIT
      1  f459				   .waittimer
      2  f459		       ad 84 02 	      lda	INTIM
      3  f45c		       d0 fb		      bne	.waittimer
      4  f45e		       85 02		      sta	WSYNC
      0  f460					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f460				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f460  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f460					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    129  f460
    130  f460		       4c 77 f3 	      jmp	VerticalSync
------- FILE main.s
------- FILE input.s LEVEL 2 PASS 2
      0  f463					      include	"input.s"
      1  f463							; Handles input checking. Called from overscan.
      2  f463
      3  f463							; Read joystick movement and apply to object 0
      4  f463				   MoveJoystick
      5  f463							; Move vertically
      6  f463							; (up and down are actually reversed since ypos starts at bottom)
      7  f463							;     ldx YPos
      8  f463		       a9 10		      lda	#%00010000	;Up?
      9  f465		       2c 80 02 	      bit	SWCHA
     10  f468		       d0 0d		      bne	SkipMoveUp
     11  f46a
     12  f46a		       18		      clc
     13  f46b		       a5 88		      lda	Speed2
     14  f46d		       69 0c		      adc	#12
     15  f46f		       85 88		      sta	Speed2
     16  f471		       a5 87		      lda	Speed1
     17  f473		       69 00		      adc	#00
     18  f475		       85 87		      sta	Speed1
     19  f477
     20  f477				   SkipMoveUp
     21  f477		       a6 86		      ldx	XPos
     22  f479
     23  f479							; Only check left/right on odd frames;
     24  f479							; TODO make this just a fractional speed
     25  f479							; rather than dropping frames
     26  f479		       a9 01		      lda	#01
     27  f47b		       25 83		      and	FrameCount
     28  f47d		       d0 18		      bne	SkipMoveRight
     29  f47f
     30  f47f
     31  f47f							; Move horizontally
     32  f47f		       a9 40		      lda	#%01000000	;Left?
     33  f481		       2c 80 02 	      bit	SWCHA
     34  f484		       d0 05		      bne	SkipMoveLeft
     35  f486		       e0 1d		      cpx	#29
     36  f488		       90 01		      bcc	SkipMoveLeft
     37  f48a		       ca		      dex
     38  f48b
     39  f48b							; Reflect
     40  f48b							;     lda #$ff
     41  f48b							;     sta REFP0
     42  f48b				   SkipMoveLeft
     43  f48b		       a9 80		      lda	#%10000000	;Right?
     44  f48d		       2c 80 02 	      bit	SWCHA
     45  f490		       d0 05		      bne	SkipMoveRight
     46  f492		       e0 80		      cpx	#128
     47  f494		       b0 01		      bcs	SkipMoveRight
     48  f496		       e8		      inx
     49  f497
     50  f497							; Reflect
     51  f497							;     lda #$0
     52  f497							;     sta REFP0
     53  f497				   SkipMoveRight
     54  f497		       86 86		      stx	XPos
     55  f499		       60		      rts
     56  f49a
     57  f49a
     58  f49a				   SpeedCalculation
     59  f49a		       38		      sec
     60  f49b		       a5 88		      lda	Speed2
     61  f49d		       e9 07		      sbc	#7
     62  f49f		       85 88		      sta	Speed2
     63  f4a1		       a5 87		      lda	Speed1
     64  f4a3		       e9 00		      sbc	#0
     65  f4a5		       85 87		      sta	Speed1
     66  f4a7
     67  f4a7		       18		      clc
     68  f4a8		       a5 8a		      lda	YPos2
     69  f4aa		       65 88		      adc	Speed2
     70  f4ac		       85 8a		      sta	YPos2
     71  f4ae		       a5 89		      lda	YPos
     72  f4b0		       65 87		      adc	Speed1
     73  f4b2		       85 89		      sta	YPos
     74  f4b4
     75  f4b4		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f4b6		       b0 0a		      bcs	NewThing2
     77  f4b8
     78  f4b8							; Reset to floor
     79  f4b8		       a9 3e		      lda	#FLOOR_OFFSET
     80  f4ba		       85 89		      sta	YPos
     81  f4bc		       a9 00		      lda	#0
     82  f4be		       85 87		      sta	Speed1
     83  f4c0		       85 88		      sta	Speed2
     84  f4c2				   NewThing2
     85  f4c2
     86  f4c2		       c9 be		      cmp	#CEILING_OFFSET
     87  f4c4		       90 0a		      bcc	.next
     88  f4c6
     89  f4c6							; Reset to ceiling
     90  f4c6		       a9 be		      lda	#CEILING_OFFSET
     91  f4c8		       85 89		      sta	YPos
     92  f4ca		       a9 00		      lda	#0
     93  f4cc		       85 87		      sta	Speed1
     94  f4ce		       85 88		      sta	Speed2
     95  f4d0				   .next
     96  f4d0		       60		      rts
     97  f4d1
     98  f4d1
     99  f4d1
    100  f4d1							; Subroutine
    101  f4d1				   SetHorizPos
    102  f4d1		       85 02		      sta	WSYNC	; start a new line
    103  f4d3		       24 00		      bit	0	; waste 3 cycles
    104  f4d5		       38		      sec		; set carry flag
    105  f4d6				   DivideLoop
    106  f4d6		       e9 0f		      sbc	#15	; subtract 15
    107  f4d8		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f4da		       49 07		      eor	#7	; calculate fine offset
    109  f4dc		       0a		      asl
    110  f4dd		       0a		      asl
    111  f4de		       0a		      asl
    112  f4df		       0a		      asl
    113  f4e0		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f4e2		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f4e4		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f4e5					      include	"kernel_border.s"
      1  f4e5							; Visible Kernel
      2  f4e5
      3  f4e5				   KernelBorder subroutine
      4  f4e5		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f4e7
      6  f4e7							; First HMOVE
      7  f4e7		       85 2a		      sta	HMOVE
      8  f4e9
      9  f4e9							; Border top
     10  f4e9		       a9 00		      lda	#0
     11  f4eb		       85 08		      sta	COLUPF
     12  f4ed		       85 0e		      sta	PF1
     13  f4ef		       85 0f		      sta	PF2
     14  f4f1		       a9 02		      lda	#SIGNAL_LINE
     15  f4f3		       85 09		      sta	COLUBK
     16  f4f5
     17  f4f5					      REPEAT	6
     18  f4f5		       85 02		      sta	WSYNC
     17  f4f5					      REPEND
     18  f4f7		       85 02		      sta	WSYNC
     17  f4f7					      REPEND
     18  f4f9		       85 02		      sta	WSYNC
     17  f4f9					      REPEND
     18  f4fb		       85 02		      sta	WSYNC
     17  f4fb					      REPEND
     18  f4fd		       85 02		      sta	WSYNC
     17  f4fd					      REPEND
     18  f4ff		       85 02		      sta	WSYNC
     19  f501					      REPEND
     20  f501
     21  f501		       a9 00		      lda	#0
     22  f503		       85 09		      sta	COLUBK
     23  f505		       85 02		      sta	WSYNC
     24  f507
     25  f507							; Start top border
     26  f507				   border_top
     27  f507							; Make the playfield solid.
     28  f507		       a9 3f		      lda	#%00111111
     29  f509		       85 0e		      sta	PF1
     30  f50b		       a9 ff		      lda	#%11111111
     31  f50d		       85 0f		      sta	PF2
     32  f50f
     33  f50f		       a9 42		      lda	#COL_BG
     34  f511		       a0 00		      ldy	#0
     35  f513
     36  f513							; X_XXXX_XX
     37  f513							; Commented lines removed to save on space.
     38  f513		       85 08		      sta	COLUPF
     39  f515		       85 02		      sta	WSYNC
     40  f517		       84 08		      sty	COLUPF
     41  f519		       85 02		      sta	WSYNC
     42  f51b		       85 08		      sta	COLUPF
     43  f51d		       85 02		      sta	WSYNC
     44  f51f							; sta COLUPF
     45  f51f		       85 02		      sta	WSYNC
     46  f521							; sta COLUPF
     47  f521		       85 02		      sta	WSYNC
     48  f523		       84 08		      sty	COLUPF
     49  f525		       85 02		      sta	WSYNC
     50  f527		       85 08		      sta	COLUPF
     51  f529
     52  f529		       a2 ff		      ldx	#$ff
     53  f52b		       9a		      txs
     54  f52c							; Push jump table to the stack
      0  f52c					      ASSERT_RUNTIME	"sp == $ff"
      1  f52c				   .COND      SET	"sp == $ff"
 ASSERT: breakif { pc== $f52c  && !(  sp == $ff  ) }
      2  f52c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f52c							; final rts to return point of kernel
     57  f52c		       a9 f6		      lda	#>[row_after_kernel - 1]
     58  f52e		       48		      pha		; $ff
     59  f52f		       a9 2f		      lda	#<[row_after_kernel - 1]	; exit gem kernel
     60  f531		       48		      pha		; $fe
     61  f532		       a9 00		      lda	#%0	; GRP0 B
     62  f534		       48		      pha		; $fd
     63  f535		       a9 10		      lda	#>[$1100 - 1]
     64  f537		       48		      pha		; $fc
     65  f538		       a9 ff		      lda	#<[$1100 - 1]	; repeat gem kernel once
     66  f53a		       48		      pha		; $fb
     67  f53b		       a9 00		      lda	#%0	; GRP0 A
     68  f53d		       48		      pha		; $fa
      0  f53e					      ASSERT_RUNTIME	"sp == $f9"
      1  f53e				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f53e  && !(  sp == $f9  ) }
      2  f53e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     70  f53e
     71  f53e		       85 02		      sta	WSYNC
     72  f540							; sta COLUPF
     73  f540
     74  f540				   PlayArea
     75  f540							; PF is now the playing area
      0  f540					      ASSERT_RUNTIME	"_scycles == #0"
      1  f540				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f540  && !(  _scycles == #0  ) }
      2  f540					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f540					      sleep	61
      1  f540				   .CYCLES    SET	61
      2  f540
      3  f540				  -	      IF	.CYCLES < 2
      4  f540				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f540				  -	      ERR
      6  f540					      ENDIF
      7  f540
      8  f540					      IF	.CYCLES & 1
      9  f540					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f540		       04 00		      nop	0
     11  f542				  -	      ELSE
     12  f542				  -	      bit	VSYNC
     13  f542					      ENDIF
     14  f542				   .CYCLES    SET	.CYCLES - 3
     15  f542					      ENDIF
     16  f542
     17  f542					      REPEAT	.CYCLES / 2
     18  f542		       ea		      nop
     17  f542					      REPEND
     18  f543		       ea		      nop
     17  f543					      REPEND
     18  f544		       ea		      nop
     17  f544					      REPEND
     18  f545		       ea		      nop
     17  f545					      REPEND
     18  f546		       ea		      nop
     17  f546					      REPEND
     18  f547		       ea		      nop
     17  f547					      REPEND
     18  f548		       ea		      nop
     17  f548					      REPEND
     18  f549		       ea		      nop
     17  f549					      REPEND
     18  f54a		       ea		      nop
     17  f54a					      REPEND
     18  f54b		       ea		      nop
     17  f54b					      REPEND
     18  f54c		       ea		      nop
     17  f54c					      REPEND
     18  f54d		       ea		      nop
     17  f54d					      REPEND
     18  f54e		       ea		      nop
     17  f54e					      REPEND
     18  f54f		       ea		      nop
     17  f54f					      REPEND
     18  f550		       ea		      nop
     17  f550					      REPEND
     18  f551		       ea		      nop
     17  f551					      REPEND
     18  f552		       ea		      nop
     17  f552					      REPEND
     18  f553		       ea		      nop
     17  f553					      REPEND
     18  f554		       ea		      nop
     17  f554					      REPEND
     18  f555		       ea		      nop
     17  f555					      REPEND
     18  f556		       ea		      nop
     17  f556					      REPEND
     18  f557		       ea		      nop
     17  f557					      REPEND
     18  f558		       ea		      nop
     17  f558					      REPEND
     18  f559		       ea		      nop
     17  f559					      REPEND
     18  f55a		       ea		      nop
     17  f55a					      REPEND
     18  f55b		       ea		      nop
     17  f55b					      REPEND
     18  f55c		       ea		      nop
     17  f55c					      REPEND
     18  f55d		       ea		      nop
     17  f55d					      REPEND
     18  f55e		       ea		      nop
     19  f55f					      REPEND
     78  f55f		       a9 00		      lda	#%00000000
     79  f561		       85 0d		      sta	PF0
     80  f563		       a9 20		      lda	#%00100000
     81  f565		       85 0e		      sta	PF1
     82  f567		       a9 00		      lda	#%00000000
     83  f569		       85 0f		      sta	PF2
      0  f56b					      ASSERT_RUNTIME	"_scycles == #0"
      1  f56b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f56b  && !(  _scycles == #0  ) }
      2  f56b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f56b					      sleep	7
      1  f56b				   .CYCLES    SET	7
      2  f56b
      3  f56b				  -	      IF	.CYCLES < 2
      4  f56b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f56b				  -	      ERR
      6  f56b					      ENDIF
      7  f56b
      8  f56b					      IF	.CYCLES & 1
      9  f56b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f56b		       04 00		      nop	0
     11  f56d				  -	      ELSE
     12  f56d				  -	      bit	VSYNC
     13  f56d					      ENDIF
     14  f56d				   .CYCLES    SET	.CYCLES - 3
     15  f56d					      ENDIF
     16  f56d
     17  f56d					      REPEAT	.CYCLES / 2
     18  f56d		       ea		      nop
     17  f56d					      REPEND
     18  f56e		       ea		      nop
     19  f56f					      REPEND
     86  f56f		       4c a1 f5 	      jmp	row_start
     87  f572							; enter row on cycle 10.
     88  f572
     89  f572							; reset the background for bottom of playfield
     90  f572				   border_bottom
     91  f572							;sta WSYNC
     92  f572
     93  f572							; Form the bottom of the level frame.
     94  f572		       a9 3f		      lda	#%00111111
     95  f574		       85 0e		      sta	PF1
     96  f576		       a9 ff		      lda	#%11111111
     97  f578		       85 0f		      sta	PF2
     98  f57a
     99  f57a							; Clear all sprites.
    100  f57a		       a9 00		      lda	#0
    101  f57c		       85 1c		      sta	EMERALD_SP
    102  f57e		       85 1b		      sta	JET_SP
    103  f580		       85 1e		      sta	EMERALD_MI_ENABLE
    104  f582
    105  f582		       a9 42		      lda	#COL_BG
    106  f584		       a0 00		      ldy	#0
    107  f586		       85 02		      sta	WSYNC
    108  f588
    109  f588		       84 08		      sty	COLUPF
    110  f58a		       85 02		      sta	WSYNC
    111  f58c
    112  f58c		       85 08		      sta	COLUPF
    113  f58e		       85 02		      sta	WSYNC
    114  f590
    115  f590		       85 02		      sta	WSYNC
    116  f592
    117  f592		       85 02		      sta	WSYNC
    118  f594
    119  f594		       84 08		      sty	COLUPF
    120  f596		       85 02		      sta	WSYNC
    121  f598
    122  f598		       85 08		      sta	COLUPF
    123  f59a		       85 02		      sta	WSYNC
    124  f59c		       85 02		      sta	WSYNC
    125  f59e		       4c 23 f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f5a1					      include	"kernel_row.s"
      1  f5a1							; Frame Start
      2  f5a1
      3  f5a1							; Macros for calculating sprite values (GRPx).
      4  f5a1
      5  f5a1							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f5a1					      mac	kernel_load_player
      7  f5a1							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f5a1					      dcp	SpriteEnd	; 5c
      9  f5a1					      ldy	#0	; 2c
     10  f5a1							; constant 6c:
     11  f5a1					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f5a1					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f5a1					      ldy	SpriteEnd
     14  f5a1							; 4c
     15  f5a1					      ldx	Frame0,Y
     16  f5a1					      endm
     17  f5a1
     18  f5a1							; mac jet_spritedata_calc
     19  f5a1							;
     20  f5a1							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f5a1							; GRP0.
     22  f5a1					      mac	jet_spritedata_calc
     23  f5a1							; loader
     24  f5a1					      lda	#SPRITE_HEIGHT
     25  f5a1					      dcp	SpriteEnd
     26  f5a1					      ldy	SpriteEnd
     27  f5a1
     28  f5a1							; 4c
     29  f5a1							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f5a1							; from Frame0 + Y must never cross a page boundary.
     31  f5a1					      lda	Frame0,Y
     32  f5a1							; 6c
     33  f5a1					      .byte	$b0, $01	;2c / 3c (taken)
     34  f5a1					      .byte	$2c	; 4c / 0c
     35  f5a1					      sta	JET_SP	; 0c / 3c
     36  f5a1					      endm
     37  f5a1
     38  f5a1				   row_start
     39  f5a1
     40  f5a1							; [scanline 1]
     41  f5a1				   row_1
     42  f5a1							; Enter after scanline starts on row "9" and wraps
      0  f5a1					      ASSERT_RUNTIME	"_scycles == #10"
      1  f5a1				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f5a1  && !(  _scycles == #10  ) }
      2  f5a1					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f5a1
      0  f5a1					      jet_spritedata_calc
      1  f5a1
      2  f5a1		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5a3		       c7 85		      dcp	SpriteEnd
      4  f5a5		       a4 85		      ldy	SpriteEnd
      5  f5a7
      6  f5a7
      7  f5a7
      8  f5a7
      9  f5a7		       b9 00 f8 	      lda	Frame0,Y
     10  f5aa
     11  f5aa		       b0 01		      .byte.b	$b0, $01
     12  f5ac		       2c		      .byte.b	$2c
     13  f5ad		       85 1b		      sta	JET_SP
     46  f5af
     47  f5af							; Idle.
      0  f5af					      sleep	46
      1  f5af				   .CYCLES    SET	46
      2  f5af
      3  f5af				  -	      IF	.CYCLES < 2
      4  f5af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5af				  -	      ERR
      6  f5af					      ENDIF
      7  f5af
      8  f5af				  -	      IF	.CYCLES & 1
      9  f5af				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5af				  -	      nop	0
     11  f5af				  -	      ELSE
     12  f5af				  -	      bit	VSYNC
     13  f5af				  -	      ENDIF
     14  f5af				  -.CYCLES    SET	.CYCLES - 3
     15  f5af					      ENDIF
     16  f5af
     17  f5af					      REPEAT	.CYCLES / 2
     18  f5af		       ea		      nop
     17  f5af					      REPEND
     18  f5b0		       ea		      nop
     17  f5b0					      REPEND
     18  f5b1		       ea		      nop
     17  f5b1					      REPEND
     18  f5b2		       ea		      nop
     17  f5b2					      REPEND
     18  f5b3		       ea		      nop
     17  f5b3					      REPEND
     18  f5b4		       ea		      nop
     17  f5b4					      REPEND
     18  f5b5		       ea		      nop
     17  f5b5					      REPEND
     18  f5b6		       ea		      nop
     17  f5b6					      REPEND
     18  f5b7		       ea		      nop
     17  f5b7					      REPEND
     18  f5b8		       ea		      nop
     17  f5b8					      REPEND
     18  f5b9		       ea		      nop
     17  f5b9					      REPEND
     18  f5ba		       ea		      nop
     17  f5ba					      REPEND
     18  f5bb		       ea		      nop
     17  f5bb					      REPEND
     18  f5bc		       ea		      nop
     17  f5bc					      REPEND
     18  f5bd		       ea		      nop
     17  f5bd					      REPEND
     18  f5be		       ea		      nop
     17  f5be					      REPEND
     18  f5bf		       ea		      nop
     17  f5bf					      REPEND
     18  f5c0		       ea		      nop
     17  f5c0					      REPEND
     18  f5c1		       ea		      nop
     17  f5c1					      REPEND
     18  f5c2		       ea		      nop
     17  f5c2					      REPEND
     18  f5c3		       ea		      nop
     17  f5c3					      REPEND
     18  f5c4		       ea		      nop
     17  f5c4					      REPEND
     18  f5c5		       ea		      nop
     19  f5c6					      REPEND
      0  f5c6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f5c6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f5c6  && !(  _scycles == #0  ) }
      2  f5c6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     50  f5c6
     51  f5c6							; [scanline 2]
     52  f5c6				   row_2
      0  f5c6					      jet_spritedata_calc
      1  f5c6
      2  f5c6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c8		       c7 85		      dcp	SpriteEnd
      4  f5ca		       a4 85		      ldy	SpriteEnd
      5  f5cc
      6  f5cc
      7  f5cc
      8  f5cc
      9  f5cc		       b9 00 f8 	      lda	Frame0,Y
     10  f5cf
     11  f5cf		       b0 01		      .byte.b	$b0, $01
     12  f5d1		       2c		      .byte.b	$2c
     13  f5d2		       85 1b		      sta	JET_SP
     54  f5d4
     55  f5d4							; Black out playfield
     56  f5d4							; TODO This should be done with playfield pixels, not color.
     57  f5d4		       a9 00		      lda	#0
     58  f5d6		       85 08		      sta	COLUPF
     59  f5d8
     60  f5d8							; Idle.
      0  f5d8					      sleep	51
      1  f5d8				   .CYCLES    SET	51
      2  f5d8
      3  f5d8				  -	      IF	.CYCLES < 2
      4  f5d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f5d8				  -	      ERR
      6  f5d8					      ENDIF
      7  f5d8
      8  f5d8					      IF	.CYCLES & 1
      9  f5d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f5d8		       04 00		      nop	0
     11  f5da				  -	      ELSE
     12  f5da				  -	      bit	VSYNC
     13  f5da					      ENDIF
     14  f5da				   .CYCLES    SET	.CYCLES - 3
     15  f5da					      ENDIF
     16  f5da
     17  f5da					      REPEAT	.CYCLES / 2
     18  f5da		       ea		      nop
     17  f5da					      REPEND
     18  f5db		       ea		      nop
     17  f5db					      REPEND
     18  f5dc		       ea		      nop
     17  f5dc					      REPEND
     18  f5dd		       ea		      nop
     17  f5dd					      REPEND
     18  f5de		       ea		      nop
     17  f5de					      REPEND
     18  f5df		       ea		      nop
     17  f5df					      REPEND
     18  f5e0		       ea		      nop
     17  f5e0					      REPEND
     18  f5e1		       ea		      nop
     17  f5e1					      REPEND
     18  f5e2		       ea		      nop
     17  f5e2					      REPEND
     18  f5e3		       ea		      nop
     17  f5e3					      REPEND
     18  f5e4		       ea		      nop
     17  f5e4					      REPEND
     18  f5e5		       ea		      nop
     17  f5e5					      REPEND
     18  f5e6		       ea		      nop
     17  f5e6					      REPEND
     18  f5e7		       ea		      nop
     17  f5e7					      REPEND
     18  f5e8		       ea		      nop
     17  f5e8					      REPEND
     18  f5e9		       ea		      nop
     17  f5e9					      REPEND
     18  f5ea		       ea		      nop
     17  f5ea					      REPEND
     18  f5eb		       ea		      nop
     17  f5eb					      REPEND
     18  f5ec		       ea		      nop
     17  f5ec					      REPEND
     18  f5ed		       ea		      nop
     17  f5ed					      REPEND
     18  f5ee		       ea		      nop
     17  f5ee					      REPEND
     18  f5ef		       ea		      nop
     17  f5ef					      REPEND
     18  f5f0		       ea		      nop
     17  f5f0					      REPEND
     18  f5f1		       ea		      nop
     19  f5f2					      REPEND
      0  f5f2					      ASSERT_RUNTIME	"_scycles == #0"
      1  f5f2				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f5f2  && !(  _scycles == #0  ) }
      2  f5f2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     63  f5f2
     64  f5f2							; [scanline 3]
     65  f5f2				   row_3
      0  f5f2					      jet_spritedata_calc
      1  f5f2
      2  f5f2		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5f4		       c7 85		      dcp	SpriteEnd
      4  f5f6		       a4 85		      ldy	SpriteEnd
      5  f5f8
      6  f5f8
      7  f5f8
      8  f5f8
      9  f5f8		       b9 00 f8 	      lda	Frame0,Y
     10  f5fb
     11  f5fb		       b0 01		      .byte.b	$b0, $01
     12  f5fd		       2c		      .byte.b	$2c
     13  f5fe		       85 1b		      sta	JET_SP
     67  f600
     68  f600							; Enable playfield
     69  f600		       a9 42		      lda	#COL_BG
     70  f602		       85 08		      sta	COLUPF
     71  f604
     72  f604							; Set stack pointer and populate graphics.
     73  f604		       a2 f9		      ldx	#$f9
     74  f606		       9a		      txs
     75  f607		       a9 09		      lda	#SPRITE_HEIGHT
      0  f609					      KERNEL_LOAD_PLAYER
      1  f609
      2  f609		       c7 85		      dcp	SpriteEnd
      3  f60b		       a0 00		      ldy	#0
      4  f60d
      5  f60d		       b0 01		      .byte.b	$b0, $01
      6  f60f		       2c		      .byte.b	$2c
      7  f610		       a4 85		      ldy	SpriteEnd
      8  f612
      9  f612		       be 00 f8 	      ldx	Frame0,Y
     77  f615		       86 fa		      stx	$fa
      0  f617					      KERNEL_LOAD_PLAYER
      1  f617
      2  f617		       c7 85		      dcp	SpriteEnd
      3  f619		       a0 00		      ldy	#0
      4  f61b
      5  f61b		       b0 01		      .byte.b	$b0, $01
      6  f61d		       2c		      .byte.b	$2c
      7  f61e		       a4 85		      ldy	SpriteEnd
      8  f620
      9  f620		       be 00 f8 	      ldx	Frame0,Y
     79  f623		       86 fd		      stx	$fd
     80  f625
     81  f625							; Jump immediately into scanlines 4-5: the gem kernel
      0  f625					      sleep	2
      1  f625				   .CYCLES    SET	2
      2  f625
      3  f625				  -	      IF	.CYCLES < 2
      4  f625				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f625				  -	      ERR
      6  f625					      ENDIF
      7  f625
      8  f625				  -	      IF	.CYCLES & 1
      9  f625				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f625				  -	      nop	0
     11  f625				  -	      ELSE
     12  f625				  -	      bit	VSYNC
     13  f625				  -	      ENDIF
     14  f625				  -.CYCLES    SET	.CYCLES - 3
     15  f625					      ENDIF
     16  f625
     17  f625					      REPEAT	.CYCLES / 2
     18  f625		       ea		      nop
     19  f626					      REPEND
      0  f626					      ASSERT_RUNTIME	"_scycles == #73"
      1  f626				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f626  && !(  _scycles == #73  ) }
      2  f626					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     84  f626		       4c 00 f1 	      jmp	KERNEL_START
     85  f629
     86  f629							; [scanline 6]
     87  f629
     88  f629							; Try to avoid page crossing in jet_spritedata_calc
     89  f629							; TODO enforce this with ASSERT_RUNTIME instead?
     90  f630		       00 00 00 00*	      align	16
     91  f630
     92  f630				   row_after_kernel
     93  f630				   row_6
      0  f630					      ASSERT_RUNTIME	"_scycles == #0"
      1  f630				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f630  && !(  _scycles == #0  ) }
      2  f630					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     95  f630
     96  f630							; Cleanup from the kernel.
     97  f630		       a9 00		      lda	#0
     98  f632		       85 1e		      sta	EMERALD_MI_ENABLE
     99  f634		       85 1c		      sta	EMERALD_SP
    100  f636		       85 08		      sta	COLUPF
    101  f638
      0  f638					      jet_spritedata_calc
      1  f638
      2  f638		       a9 09		      lda	#SPRITE_HEIGHT
      3  f63a		       c7 85		      dcp	SpriteEnd
      4  f63c		       a4 85		      ldy	SpriteEnd
      5  f63e
      6  f63e
      7  f63e
      8  f63e
      9  f63e		       b9 00 f8 	      lda	Frame0,Y
     10  f641
     11  f641		       b0 01		      .byte.b	$b0, $01
     12  f643		       2c		      .byte.b	$2c
     13  f644		       85 1b		      sta	JET_SP
    103  f646
    104  f646							; Idle.
    105  f646		       85 02		      sta	WSYNC
    106  f648
    107  f648							; [scanline 7]
    108  f648				   row_7
      0  f648					      jet_spritedata_calc
      1  f648
      2  f648		       a9 09		      lda	#SPRITE_HEIGHT
      3  f64a		       c7 85		      dcp	SpriteEnd
      4  f64c		       a4 85		      ldy	SpriteEnd
      5  f64e
      6  f64e
      7  f64e
      8  f64e
      9  f64e		       b9 00 f8 	      lda	Frame0,Y
     10  f651
     11  f651		       b0 01		      .byte.b	$b0, $01
     12  f653		       2c		      .byte.b	$2c
     13  f654		       85 1b		      sta	JET_SP
    110  f656
    111  f656		       a9 42		      lda	#COL_BG
    112  f658		       85 08		      sta	COLUPF
    113  f65a
    114  f65a							; FRAMESWITCH
    115  f65a		       a9 01		      lda	#01
    116  f65c		       25 83		      and	FrameCount
    117  f65e		       d0 13		      bne	loadframe2
    118  f660
    119  f660							; Perform gem loading for Kernel A.
    120  f660
    121  f660				   loadframe1
      0  f660					      ASSERT_RUNTIME	"_scycles == #32"
      1  f660				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f660  && !(  _scycles == #32  ) }
      2  f660					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    123  f660
    124  f660							; Emerald byte setting 1A
    125  f660							; ldx #0
    126  f660							; lda KERNEL_STORAGE_R,X
    127  f660							; sta GEM_00_W
    128  f660							; inx
    129  f660							; lda KERNEL_STORAGE_R,X
    130  f660							; sta GEM_04_W
    131  f660							; inx
    132  f660							; lda KERNEL_STORAGE_R,X
    133  f660							; sta GEM_09_W
    134  f660							; inx
    135  f660
    136  f660		       85 02		      sta	WSYNC
    137  f662
    138  f662							; [scanline 8]
      0  f662					      jet_spritedata_calc
      1  f662
      2  f662		       a9 09		      lda	#SPRITE_HEIGHT
      3  f664		       c7 85		      dcp	SpriteEnd
      4  f666		       a4 85		      ldy	SpriteEnd
      5  f668
      6  f668
      7  f668
      8  f668
      9  f668		       b9 00 f8 	      lda	Frame0,Y
     10  f66b
     11  f66b		       b0 01		      .byte.b	$b0, $01
     12  f66d		       2c		      .byte.b	$2c
     13  f66e		       85 1b		      sta	JET_SP
    140  f670
    141  f670							; Emerald byte setting 1B
    142  f670							; lda KERNEL_STORAGE_R,X
    143  f670							; sta GEM_13_W
    144  f670							; inx
    145  f670							; lda KERNEL_STORAGE_R,X
    146  f670							; sta GEM_17_W
    147  f670							; inx
    148  f670							; lda KERNEL_STORAGE_R,X
    149  f670							; sta GEM_18_W
    150  f670							; inx
    151  f670							; lda KERNEL_STORAGE_R,X
    152  f670							; sta GEM_22_W
    153  f670
    154  f670		       4c 86 f6 	      jmp	row_8_end
    155  f673
    156  f673							; Perform gem loading for Kernel B.
    157  f673
    158  f673				   loadframe2
      0  f673					      ASSERT_RUNTIME	"_scycles == #33"
      1  f673				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f673  && !(  _scycles == #33  ) }
      2  f673					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    160  f673
    161  f673							; Emerald byte setting 2A
    162  f673							; ldx #[storage_02 - storage]
    163  f673							; lda KERNEL_STORAGE_R,X
    164  f673							; sta GEM_02_W
    165  f673							; inx
    166  f673							; lda KERNEL_STORAGE_R,X
    167  f673							; sta GEM_06_W
    168  f673							; inx
    169  f673							; lda KERNEL_STORAGE_R,X
    170  f673							; sta GEM_08_W
    171  f673							; inx
    172  f673
    173  f673		       85 02		      sta	WSYNC
    174  f675
    175  f675							; [scanline 8]
    176  f675				   row_8
      0  f675					      jet_spritedata_calc
      1  f675
      2  f675		       a9 09		      lda	#SPRITE_HEIGHT
      3  f677		       c7 85		      dcp	SpriteEnd
      4  f679		       a4 85		      ldy	SpriteEnd
      5  f67b
      6  f67b
      7  f67b
      8  f67b
      9  f67b		       b9 00 f8 	      lda	Frame0,Y
     10  f67e
     11  f67e		       b0 01		      .byte.b	$b0, $01
     12  f680		       2c		      .byte.b	$2c
     13  f681		       85 1b		      sta	JET_SP
    178  f683
    179  f683							; Emerald byte setting 2B
    180  f683							; lda KERNEL_STORAGE_R,X
    181  f683							; sta GEM_11_W
    182  f683							; inx
    183  f683							; lda KERNEL_STORAGE_R,X
    184  f683							; sta GEM_15_W
    185  f683							; inx
    186  f683							; lda KERNEL_STORAGE_R,X
    187  f683							; sta GEM_20_W
    188  f683							; inx
    189  f683							; lda KERNEL_STORAGE_R,X
    190  f683							; sta GEM_24_W
    191  f683
    192  f683		       4c 86 f6 	      jmp	row_8_end
    193  f686
    194  f686							; Common row 8 return.
    195  f686
    196  f686				   row_8_end
    197  f686							; Idle.
    198  f686		       85 02		      sta	WSYNC
    199  f688
    200  f688							; [scanline 8]
    201  f688							; Repeat loop until LoopCount < 0
    202  f688		       c6 82		      dec	LoopCount
    203  f68a		       30 03		      bmi	row_end
    204  f68c		       4c a1 f5 	      jmp	row_start
    205  f68f				   row_end
    206  f68f		       4c 72 f5 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f692					      include	"kernel_gem.s"
      1  f692							;
      2  f692							; Gem Kernels
      3  f692							;
      4  f692							; Gems are displayed in alternating kernels. This chart shows
      5  f692							; which kernel is responsible for which gem, with missiles denoted.
      6  f692							;
      7  f692							;  1:	 |SS  SS   SS  |SS  MSS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f692							;  2:	 |  SS	SSM  SS|  SS   SS  SS|	      kernel 2
      9  f692							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f692							;  #	 0^	 8^	  17^	    26^       gem index
     11  f692							;
     12  f692							; The middle bar indicates where the pattern reverses.
     13  f692							;
     14  f692							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f692							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f692							; requires with a single sprite. By alternating sprites each frame with an...
     17  f692							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f692							; line, except for two. These are instead rendered by the missile, which
     19  f692							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f692
     21  f692							; for copying
     22  f700		       00 00 00 00*	      align	256
     23  f700
     24  f700							; KERNEL 1
     25  f700
     26  f700							; Emerald line macro (1, 2, ...)
     27  f700
     28  f700				   kernel_1_start subroutine
     29  f700					      rorg	$f100
     30  f700
     31  f700				   Kernel1    subroutine
     32  f700							; sleep first make this distinct from
     33  f700							; other kernel for debug scenarios
      0  f700					      ASSERT_RUNTIME	"sp == $f9"
      1  f700				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f700					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f700					      sleep	6
      1  f700				   .CYCLES    SET	6
      2  f700
      3  f700				  -	      IF	.CYCLES < 2
      4  f700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f700				  -	      ERR
      6  f700					      ENDIF
      7  f700
      8  f700				  -	      IF	.CYCLES & 1
      9  f700				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f700				  -	      nop	0
     11  f700				  -	      ELSE
     12  f700				  -	      bit	VSYNC
     13  f700				  -	      ENDIF
     14  f700				  -.CYCLES    SET	.CYCLES - 3
     15  f700					      ENDIF
     16  f700
     17  f700					      REPEAT	.CYCLES / 2
     18  f700		       ea		      nop
     17  f700					      REPEND
     18  f701		       ea		      nop
     17  f701					      REPEND
     18  f702		       ea		      nop
     19  f703					      REPEND
     36  f703		       68		      pla
     37  f704		       85 1b		      sta	GRP0
     38  f706
     39  f706		       a9 60		      lda	#EMR1
     40  f708		       a2 06		      ldx	#EMR2
     41  f70a		       a0 66		      ldy	#EMR3
     42  f70c				   .gem_00
     43  f70c		       84 1c		      .byte.b	GEM_00, EMERALD_SP	; moveable?
     44  f70e
     45  f70e							; Critical: 22c (start of precise timing)
     46  f70e							; [A]
     47  f70e		       85 11		      sta	EMERALD_SP_RESET	; trivial
     48  f710							; [B]
     49  f710		       85 1e		      sta	EMERALD_MI_ENABLE	; trivial ; Is this timing-critical??
     50  f712							; [C]
      0  f712					      sleep	3
      1  f712				   .CYCLES    SET	3
      2  f712
      3  f712				  -	      IF	.CYCLES < 2
      4  f712				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f712				  -	      ERR
      6  f712					      ENDIF
      7  f712
      8  f712					      IF	.CYCLES & 1
      9  f712					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f712		       04 00		      nop	0
     11  f714				  -	      ELSE
     12  f714				  -	      bit	VSYNC
     13  f714					      ENDIF
     14  f714				   .CYCLES    SET	.CYCLES - 3
     15  f714					      ENDIF
     16  f714
     17  f714				  -	      REPEAT	.CYCLES / 2
     18  f714				  -	      nop
     19  f714					      REPEND
     52  f714
     53  f714				   .gem_04
     54  f714							; [D]
     55  f714		       84 1c		      .byte.b	GEM_04, EMERALD_SP
     56  f716
     57  f716							; middle triplet; first kernel 1???
     58  f716							; [E]
     59  f716		       85 11		      sta	EMERALD_SP_RESET	; trivial
     60  f718				   .gem_09
     61  f718							; [F]
     62  f718		       84 1c		      .byte.b	GEM_09, EMERALD_SP
     63  f71a
     64  f71a							; [G]
      0  f71a					      sleep	3
      1  f71a				   .CYCLES    SET	3
      2  f71a
      3  f71a				  -	      IF	.CYCLES < 2
      4  f71a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f71a				  -	      ERR
      6  f71a					      ENDIF
      7  f71a
      8  f71a					      IF	.CYCLES & 1
      9  f71a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f71a		       04 00		      nop	0
     11  f71c				  -	      ELSE
     12  f71c				  -	      bit	VSYNC
     13  f71c					      ENDIF
     14  f71c				   .CYCLES    SET	.CYCLES - 3
     15  f71c					      ENDIF
     16  f71c
     17  f71c				  -	      REPEAT	.CYCLES / 2
     18  f71c				  -	      nop
     19  f71c					      REPEND
     66  f71c
     67  f71c				   .gem_13
     68  f71c							; [H]
     69  f71c		       84 1c		      .byte.b	GEM_13, EMERALD_SP
     70  f71e
     71  f71e							; [I]
     72  f71e		       85 11		      sta	EMERALD_SP_RESET	; trivial
     73  f720				   .gem_17
     74  f720
     75  f720							; spare; missle writes
     76  f720							; [J]
     77  f720		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE	; could htis ever possibly be
     78  f722							; moved out of the kernel, and if so, huge wins
     79  f722							; (makes next sprite a freebie too, then just dealing with 3)
     80  f722							; unique sprite values!!
     81  f722							; or at least the write of the particular OPCODE out of hte krernel ?
     82  f722							; even extreme measures...! PHP with Z register!!! muahaha
     83  f722							; dunno how to deal with the opcode length change though?
     84  f722
     85  f722							; middle triplet; third kernel 1???
     86  f722				   .gem_18
     87  f722							; [K]
     88  f722		       84 1c		      .byte.b	GEM_18, EMERALD_SP
     89  f724
     90  f724							; [L]
      0  f724					      sleep	3
      1  f724				   .CYCLES    SET	3
      2  f724
      3  f724				  -	      IF	.CYCLES < 2
      4  f724				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f724				  -	      ERR
      6  f724					      ENDIF
      7  f724
      8  f724					      IF	.CYCLES & 1
      9  f724					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f724		       04 00		      nop	0
     11  f726				  -	      ELSE
     12  f726				  -	      bit	VSYNC
     13  f726					      ENDIF
     14  f726				   .CYCLES    SET	.CYCLES - 3
     15  f726					      ENDIF
     16  f726
     17  f726				  -	      REPEAT	.CYCLES / 2
     18  f726				  -	      nop
     19  f726					      REPEND
     92  f726				   .gem_22
     93  f726							; [M]
     94  f726		       84 1c		      .byte.b	GEM_22, EMERALD_SP
     95  f728
     96  f728							; [N]
      0  f728					      sleep	3
      1  f728				   .CYCLES    SET	3
      2  f728
      3  f728				  -	      IF	.CYCLES < 2
      4  f728				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f728				  -	      ERR
      6  f728					      ENDIF
      7  f728
      8  f728					      IF	.CYCLES & 1
      9  f728					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f728		       04 00		      nop	0
     11  f72a				  -	      ELSE
     12  f72a				  -	      bit	VSYNC
     13  f72a					      ENDIF
     14  f72a				   .CYCLES    SET	.CYCLES - 3
     15  f72a					      ENDIF
     16  f72a
     17  f72a				  -	      REPEAT	.CYCLES / 2
     18  f72a				  -	      nop
     19  f72a					      REPEND
     98  f72a							; [O]
      0  f72a					      sleep	3
      1  f72a				   .CYCLES    SET	3
      2  f72a
      3  f72a				  -	      IF	.CYCLES < 2
      4  f72a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f72a				  -	      ERR
      6  f72a					      ENDIF
      7  f72a
      8  f72a					      IF	.CYCLES & 1
      9  f72a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f72a		       04 00		      nop	0
     11  f72c				  -	      ELSE
     12  f72c				  -	      bit	VSYNC
     13  f72c					      ENDIF
     14  f72c				   .CYCLES    SET	.CYCLES - 3
     15  f72c					      ENDIF
     16  f72c
     17  f72c				  -	      REPEAT	.CYCLES / 2
     18  f72c				  -	      nop
     19  f72c					      REPEND
    100  f72c							; [P]
      0  f72c					      sleep	3
      1  f72c				   .CYCLES    SET	3
      2  f72c
      3  f72c				  -	      IF	.CYCLES < 2
      4  f72c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f72c				  -	      ERR
      6  f72c					      ENDIF
      7  f72c
      8  f72c					      IF	.CYCLES & 1
      9  f72c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f72c		       04 00		      nop	0
     11  f72e				  -	      ELSE
     12  f72e				  -	      bit	VSYNC
     13  f72e					      ENDIF
     14  f72e				   .CYCLES    SET	.CYCLES - 3
     15  f72e					      ENDIF
     16  f72e
     17  f72e				  -	      REPEAT	.CYCLES / 2
     18  f72e				  -	      nop
     19  f72e					      REPEND
    102  f72e
      0  f72e					      ASSERT_RUNTIME	"_scycles == #70"
      1  f72e				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12e  && !(  _scycles == #70  ) }
      2  f72e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f72e							; 6c
    105  f72e		       60		      rts
    106  f72f
    107  f72f							; Writable offsets
    108  f72f		       f0 0c	   GEM_00_W   equ	[.gem_00 - $100]
    109  f72f		       f0 14	   GEM_04_W   equ	[.gem_04 - $100]
    110  f72f		       f0 18	   GEM_09_W   equ	[.gem_09 - $100]
    111  f72f		       f0 1c	   GEM_13_W   equ	[.gem_13 - $100]
    112  f72f		       f0 20	   GEM_17_W   equ	[.gem_17 - $100]
    113  f72f		       f0 22	   GEM_18_W   equ	[.gem_18 - $100]
    114  f72f		       f0 26	   GEM_22_W   equ	[.gem_22 - $100]
    115  f72f
    116  f72f					      rend
    117  f72f				   kernel_1_end
    118  f72f
    119  f72f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    120  f72f
    121  f72f							; KERNEL B
    122  f72f
    123  f72f							; Emerald line macro (3, 4, ...)
    124  f72f
    125  f72f				   kernel_2_start subroutine
    126  f72f					      rorg	$f100
    127  f72f
    128  f72f				   Kernel2    subroutine
      0  f72f					      ASSERT_RUNTIME	"sp == $f9"
      1  f72f				   .COND      SET	"sp == $f9"
 ASSERT: breakif { pc== $f100  && !(  sp == $f9  ) }
      2  f72f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    130  f72f							; don't sleep first to make this distinct from kernel 1
    131  f72f		       68		      pla
    132  f730		       85 1b		      sta	GRP0
      0  f732					      sleep	4
      1  f732				   .CYCLES    SET	4
      2  f732
      3  f732				  -	      IF	.CYCLES < 2
      4  f732				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f732				  -	      ERR
      6  f732					      ENDIF
      7  f732
      8  f732				  -	      IF	.CYCLES & 1
      9  f732				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f732				  -	      nop	0
     11  f732				  -	      ELSE
     12  f732				  -	      bit	VSYNC
     13  f732				  -	      ENDIF
     14  f732				  -.CYCLES    SET	.CYCLES - 3
     15  f732					      ENDIF
     16  f732
     17  f732					      REPEAT	.CYCLES / 2
     18  f732		       ea		      nop
     17  f732					      REPEND
     18  f733		       ea		      nop
     19  f734					      REPEND
    134  f734
    135  f734							; Enable missile (using excessive lda instructions)
    136  f734		       a9 02		      lda	#02
    137  f736		       a2 0c		      ldx	#T2
    138  f738		       a0 cc		      ldy	#T3
    139  f73a				   .gem_08
    140  f73a		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE	; movable
    141  f73c		       a9 c0		      lda	#T1	; movable?
    142  f73e				   .gem_02
    143  f73e							; load the first sprite
    144  f73e		       84 1c		      .byte.b	GEM_02, EMERALD_SP	; movable
    145  f740
    146  f740							; TODO preload the second sprite and
    147  f740							; have that write GEM_06
    148  f740
    149  f740							; Critical: 25c (start of precise timing)
      0  f740					      ASSERT_RUNTIME	"_scycles == #25"
      1  f740				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f111  && !(  _scycles == #25  ) }
      2  f740					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    151  f740
    152  f740							; [A]
    153  f740		       85 11		      sta	EMERALD_SP_RESET	; trivial
    154  f742							; [B]
      0  f742					      sleep	3
      1  f742				   .CYCLES    SET	3
      2  f742
      3  f742				  -	      IF	.CYCLES < 2
      4  f742				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f742				  -	      ERR
      6  f742					      ENDIF
      7  f742
      8  f742					      IF	.CYCLES & 1
      9  f742					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f742		       04 00		      nop	0
     11  f744				  -	      ELSE
     12  f744				  -	      bit	VSYNC
     13  f744					      ENDIF
     14  f744				   .CYCLES    SET	.CYCLES - 3
     15  f744					      ENDIF
     16  f744
     17  f744				  -	      REPEAT	.CYCLES / 2
     18  f744				  -	      nop
     19  f744					      REPEND
    156  f744							; [C]
      0  f744					      sleep	3
      1  f744				   .CYCLES    SET	3
      2  f744
      3  f744				  -	      IF	.CYCLES < 2
      4  f744				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f744				  -	      ERR
      6  f744					      ENDIF
      7  f744
      8  f744					      IF	.CYCLES & 1
      9  f744					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f744		       04 00		      nop	0
     11  f746				  -	      ELSE
     12  f746				  -	      bit	VSYNC
     13  f746					      ENDIF
     14  f746				   .CYCLES    SET	.CYCLES - 3
     15  f746					      ENDIF
     16  f746
     17  f746				  -	      REPEAT	.CYCLES / 2
     18  f746				  -	      nop
     19  f746					      REPEND
    158  f746
    159  f746							; end triplet; bonus VDEL write
    160  f746				   .gem_06
    161  f746							; [D]
    162  f746		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    163  f748
    164  f748							; middle triplet; write or change nusiz
    165  f748							; [E]
    166  f748		       85 11		      sta	EMERALD_SP_RESET	; trivial
    167  f74a				   .gem_11
    168  f74a							; [F]
    169  f74a		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    170  f74c
    171  f74c							; disable missle
    172  f74c							; [G]
    173  f74c		       86 1e		      stx	EMERALD_MI_ENABLE
    174  f74e							; sleep 3
    175  f74e							; ^ could this be moved, and then free the timing slot
    176  f74e							; then can do the setting of PF1 value(!)
    177  f74e
    178  f74e							; end triplet; write or reset
    179  f74e				   .gem_15
    180  f74e							; [H]
    181  f74e		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    182  f750							; 49c midway
    183  f750							; [I]
    184  f750		       85 11		      sta	EMERALD_SP_RESET	; spare
    185  f752
    186  f752				   .gem_20
    187  f752							; [J]
    188  f752		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    189  f754							; [K]
      0  f754					      sleep	3	; spare
      1  f754				   .CYCLES    SET	3
      2  f754
      3  f754				  -	      IF	.CYCLES < 2
      4  f754				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f754				  -	      ERR
      6  f754					      ENDIF
      7  f754
      8  f754					      IF	.CYCLES & 1
      9  f754					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f754		       04 00		      nop	0
     11  f756				  -	      ELSE
     12  f756				  -	      bit	VSYNC
     13  f756					      ENDIF
     14  f756				   .CYCLES    SET	.CYCLES - 3
     15  f756					      ENDIF
     16  f756
     17  f756				  -	      REPEAT	.CYCLES / 2
     18  f756				  -	      nop
     19  f756					      REPEND
    191  f756
    192  f756							; end triplet; free
    193  f756				   .gem_24
    194  f756							; [L]
    195  f756		       84 1c		      .byte.b	GEM_24, EMERALD_SP
    196  f758
    197  f758							; [M]
      0  f758					      sleep	3
      1  f758				   .CYCLES    SET	3
      2  f758
      3  f758				  -	      IF	.CYCLES < 2
      4  f758				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f758				  -	      ERR
      6  f758					      ENDIF
      7  f758
      8  f758					      IF	.CYCLES & 1
      9  f758					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f758		       04 00		      nop	0
     11  f75a				  -	      ELSE
     12  f75a				  -	      bit	VSYNC
     13  f75a					      ENDIF
     14  f75a				   .CYCLES    SET	.CYCLES - 3
     15  f75a					      ENDIF
     16  f75a
     17  f75a				  -	      REPEAT	.CYCLES / 2
     18  f75a				  -	      nop
     19  f75a					      REPEND
    199  f75a							; [N]
      0  f75a					      sleep	3
      1  f75a				   .CYCLES    SET	3
      2  f75a
      3  f75a				  -	      IF	.CYCLES < 2
      4  f75a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f75a				  -	      ERR
      6  f75a					      ENDIF
      7  f75a
      8  f75a					      IF	.CYCLES & 1
      9  f75a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f75a		       04 00		      nop	0
     11  f75c				  -	      ELSE
     12  f75c				  -	      bit	VSYNC
     13  f75c					      ENDIF
     14  f75c				   .CYCLES    SET	.CYCLES - 3
     15  f75c					      ENDIF
     16  f75c
     17  f75c				  -	      REPEAT	.CYCLES / 2
     18  f75c				  -	      nop
     19  f75c					      REPEND
    201  f75c
    202  f75c							; [O]
      0  f75c					      sleep	3
      1  f75c				   .CYCLES    SET	3
      2  f75c
      3  f75c				  -	      IF	.CYCLES < 2
      4  f75c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f75c				  -	      ERR
      6  f75c					      ENDIF
      7  f75c
      8  f75c					      IF	.CYCLES & 1
      9  f75c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f75c		       04 00		      nop	0
     11  f75e				  -	      ELSE
     12  f75e				  -	      bit	VSYNC
     13  f75e					      ENDIF
     14  f75e				   .CYCLES    SET	.CYCLES - 3
     15  f75e					      ENDIF
     16  f75e
     17  f75e				  -	      REPEAT	.CYCLES / 2
     18  f75e				  -	      nop
     19  f75e					      REPEND
    204  f75e
      0  f75e					      ASSERT_RUNTIME	"_scycles == #70"
      1  f75e				   .COND      SET	"_scycles == #70"
 ASSERT: breakif { pc== $f12f  && !(  _scycles == #70  ) }
      2  f75e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    206  f75e							; 6c
    207  f75e		       60		      rts
    208  f75f
    209  f75f							; Writable offsets
    210  f75f		       f0 0f	   GEM_02_W   equ	[.gem_02 - $100]
    211  f75f		       f0 17	   GEM_06_W   equ	[.gem_06 - $100]
    212  f75f		       f0 0b	   GEM_08_W   equ	[.gem_08 - $100]
    213  f75f		       f0 1b	   GEM_11_W   equ	[.gem_11 - $100]
    214  f75f		       f0 1f	   GEM_15_W   equ	[.gem_15 - $100]
    215  f75f		       f0 23	   GEM_20_W   equ	[.gem_20 - $100]
    216  f75f		       f0 27	   GEM_24_W   equ	[.gem_24 - $100]
    217  f75f
    218  f75f					      rend
    219  f75f				   kernel_2_end
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f75f					      include	"data_sprites.s"
      1  f800		       00 00 00 00*	      align	256
      2  f800
      3  f800							; Player
      4  f800				   Frame0
      5  f800		       00		      .byte.b	#%00000000
      6  f801		       60		      .byte.b	#%01100000
      7  f802		       60		      .byte.b	#%01100000
      8  f803		       60		      .byte.b	#%01100000
      9  f804		       c0		      .byte.b	#%11000000
     10  f805		       c0		      .byte.b	#%11000000
     11  f806		       f0		      .byte.b	#%11110000
     12  f807		       c0		      .byte.b	#%11000000
     13  f808		       c0		      .byte.b	#%11000000
     14  f809		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f80a					      include	"data_levels.s"
      1  f810		       00 00 00 00*	      align	8
      2  f810
      3  f810				   storage
      4  f810
      5  f810							; Gem defaults kernel 1
      6  f810				   storage_00
      7  f810		       85		      .byte.b	SET_1_0
      8  f811				   storage_04
      9  f811		       87		      .byte.b	SET_0_0
     10  f812				   storage_09
     11  f812		       84		      .byte.b	SET_1_1
     12  f813				   storage_13
     13  f813		       84		      .byte.b	SET_1_1
     14  f814				   storage_17
     15  f814		       84		      .byte.b	SET_1_R
     16  f815				   storage_18
     17  f815		       87		      .byte.b	SET_0_0
     18  f816				   storage_22
     19  f816		       87		      .byte.b	SET_0_0
     20  f817
     21  f817							; Gem defaults kernel 2
     22  f817				   storage_02
     23  f817		       87		      .byte.b	SET_0_0
     24  f818				   storage_06
     25  f818		       87		      .byte.b	SET_0_0
     26  f819				   storage_08
     27  f819		       86		      .byte.b	SET_0_L
     28  f81a				   storage_11
     29  f81a		       84		      .byte.b	SET_1_1
     30  f81b				   storage_15
     31  f81b		       84		      .byte.b	SET_1_1
     32  f81c				   storage_20
     33  f81c		       87		      .byte.b	SET_0_0
     34  f81d				   storage_24
     35  f81d		       86		      .byte.b	SET_0_1
     36  f81e				   storage_end
     37  f81e
     38  f820		       00 00		      align	8
     39  f820							; first bit of byte 2 & 3 are unused for simplicity
     40  f820				   level_01
     41  f820		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
     42  f824		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     43  f828		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     44  f82c		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     45  f830		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     46  f834		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     47  f838		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     48  f83c		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     49  f840		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     50  f844		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     51  f848		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     52  f84c		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     53  f850		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     54  f854		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     55  f858		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     56  f85c		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     57  f860		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     58  f864		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     59  f868		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     60  f86c		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     61  f870		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     62  f874		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     63  f878		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     64  f87c		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     65  f880		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     66  f884		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     67  f888				   level_01_end
------- FILE main.s
     77  f888
     78  fffc					      org	$fffc
     79  fffc		       09 f2		      .word.w	Start
     80  fffe		       09 f2		      .word.w	Start
