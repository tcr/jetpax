------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_var
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_var_sty
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_if
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_write_imm
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_write_var
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_write_opcode
     18  10000 ????				       endm
     19  10000 ????				       mac	nibble_else
     20  10000 ????				       endm
     21  10000 ????				       mac	nibble_end_if
     22  10000 ????				       endm
     23  10000 ????				       mac	nibble_end_kernel
     24  10000 ????				       seg	CodeBank3
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     28  10000 ????				       mac	assert_runtime
     29  10000 ????			    .COND      SET	{1}
     30  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     31  10000 ????				       endm
     32  10000 ????
     33  10000 ????
     34  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     35  10000 ????				       mac	assert_runtime_kernel
     36  10000 ????			    .KERNEL    SET	{1}
     37  10000 ????			    .COND      SET	{2}
     38  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     39  10000 ????				       endm
     40  10000 ????
     41  10000 ????						; Static assertions for size
     42  10000 ????				       mac	assert_size
     43  10000 ????			    .STARTA    SET	{1}
     44  10000 ????			    .ENDA      SET	{2}
     45  10000 ????			    .LEN       SET	{3}
     46  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     47  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     48  10000 ????				       err
     49  10000 ????				       endif
     50  10000 ????				       endm
     51  10000 ????				       mac	assert_size_exact
     52  10000 ????			    .STARTA    SET	{1}
     53  10000 ????			    .ENDA      SET	{2}
     54  10000 ????			    .LEN       SET	{3}
     55  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     56  10000 ????				       echo	""
     57  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     58  10000 ????				       err
     59  10000 ????				       endif
     60  10000 ????				       endm
     61  10000 ????
     62  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     66  0000 ????
     67  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	CompileFlags
      2 U0000 ????
      3 U0000 ????	       00 01	   ONLY_KERNEL_A =	1
      4 U0000 ????						; ONLY_KERNEL_B = 1
      5 U0000 ????
      6 U0000 ????
      7 U0000 ????				      seg.u	Defines
      8 U0000 ????
      9 U0000 ????	       00 10	   ROW_COUNT  =	16
     10 U0000 ????	       00 02	   SIGNAL_LINE =	$02
     11 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
     12 U0000 ????
     13 U0000 ????						; RAM+ memory map
     14 U0000 ????
     15 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     16 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     17 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ_ID =	CBSRAM_KERNEL_READ
     18 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     19 U0000 ????	       f1 40	   CBSRAM_KERNEL_READ_END =	[CBSRAM_KERNEL_READ + $40]
     20 U0000 ????
     21 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     22 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     23 U0000 ????
     24 U0000 ????	       f0 80	   CBSRAM_NIBBLE_WRITE =	$f080
     25 U0000 ????	       f1 80	   CBSRAM_NIBBLE_READ =	$f180
     26 U0000 ????
     27 U0000 ????
     28 U0000 ????						; NUSIZ values
     29 U0000 ????
     30 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     31 U0000 ????
     32 U0000 ????
     33 U0000 ????						; Colors
     34 U0000 ????
     35 U0000 ????	       00 42	   COL_BG     =	$42
     36 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     37 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     38 U0000 ????
     39 U0000 ????
     40 U0000 ????						; HMOVE values for missiles
     41 U0000 ????
     42 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     43 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     44 U0000 ????
     45 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     46 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     47 U0000 ????
     48 U0000 ????						; Missile values when 2A=RST
     49 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     50 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     51 U0000 ????
     52 U0000 ????
     53 U0000 ????						; Sprite details
     54 U0000 ????
     55 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     56 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     57 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     58 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     59 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     60 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     61 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     62 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     63 U0000 ????
     64 U0000 ????	       00 1b	   JET_SP     =	GRP0
     65 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     66 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     67 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     68 U0000 ????
     69 U0000 ????
     70 U0000 ????						; Game dimensionsn
     71 U0000 ????
     72 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     73 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     74 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     75 U0000 ????
     76 U0000 ????						; Compared with YPos
     77 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     78 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     79 U0000 ????
     80 U0000 ????						; Starting player position
     81 U0000 ????	       00 48	   YPosStart  =	72
     82 U0000 ????	       00 58	   XPosStart  =	88
     83 U0000 ????
     84 U0000 ????						; Top left corner
     85 U0000 ????						; YPosStart equ 190
     86 U0000 ????						; XPosStart equ 28
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00f6 ????				      seg.u	Variables
      2 U00f6 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00 00 00 00*coolest_level ds	$3f
      8 U00c0
      9 U00c0					      align	16
     10 U00c0
     11 U00c0		       00 c0	   NIBBLE_VAR_START =	.
     12 U00c0
     13 U00c0							; Nibble (16 bytes)
     14 U00c0		       00	   NibbleVar1 byte.b
     15 U00c1		       00	   NibbleVar2 byte.b
     16 U00c2		       00	   NibbleGemini1 byte.b
     17 U00c3		       00	   NibbleGemini1Reg byte.b
     18 U00c4		       00	   NibbleGemini2 byte.b
     19 U00c5		       00	   NibbleGemini2Reg byte.b
     20 U00c6		       00	   NibbleGemini3 byte.b
     21 U00c7		       00	   NibbleGemini3Reg byte.b
     22 U00c8		       00	   NibbleGemini4 byte.b
     23 U00c9		       00	   NibbleMissile byte.b
     24 U00ca		       00	   NibbleVdel1 byte.b
     25 U00cb		       00	   NibbleGrp0 byte.b
     26 U00cc		       00	   NibbleX    byte.b
     27 U00cd		       00	   NibbleY    byte.b
     28 U00ce		       00	   NibblePhp  byte.b
     29 U00cf		       00	   NibblePs   byte.b
     30 U00d0
     31 U00d0		       00 d0	   NIBBLE_VAR_END =	.
     32 U00d0
     33 U00d0					      align	16
     34 U00d0
     35 U00d0							; Misc Nibble support
     36 U00d0		       00	   RamKernelGrp0 byte.b
     37 U00d1		       00	   BuildKernelRST byte.b
     38 U00d2
     39 U00d2		       00	   Temp       byte.b
     40 U00d3		       00	   Temp2      byte.b
     41 U00d4
     42 U00d4							; Counters
     43 U00d4		       00	   LoopCount  byte.b
     44 U00d5		       00	   FrameCount byte.b
     45 U00d6
     46 U00d6		       00	   SpriteEnd  byte.b
     47 U00d7		       00	   XPos       byte.b		; X position of player sprite
     48 U00d8
     49 U00d8
     50 U00d8		       00	   Speed1     byte.b
     51 U00d9		       00	   Speed2     byte.b
     52 U00da
     53 U00da		       00	   YPos       byte.b		; Y position of player sprite
     54 U00db		       00	   YPos2      byte.b
     55 U00dc
     56 U00dc		       00	   ROW_DEMO_INDEX byte.b
     57 U00dd
     58 U00dd		       00	   RamNibbleTemp byte.b
     59 U00de		       00	   RamZeroByte byte.b
     60 U00df		       00	   RamLowerSixByte byte.b
     61 U00e0		       00	   RamFFByte  byte.b
     62 U00e1		       00	   RamStackBkp byte.b
     63 U00e2		       00	   RamPF1Value byte.b
     64 U00e3
     65 U00e3		       00	   RamRowJetpackIndex byte.b		; sprite counter
     66 U00e4
     67 U00e4		       00	   level_for_game byte.b
     68 U00e5		       00		      byte.b
     69 U00e6		       00		      byte.b
     70 U00e7		       00		      byte.b
     71 U00e8
     72 U00e8		       00	   DO_MISS_A  byte.b
     73 U00e9		       00	   DO_MISS_B  byte.b
     74 U00ea		       00	   DO_GEMS_A  byte.b
     75 U00eb		       00		      byte.b
     76 U00ec		       00		      byte.b
     77 U00ed		       00		      byte.b
     78 U00ee		       00		      byte.b
     79 U00ef		       00		      byte.b
     80 U00f0		       00	   DO_GEMS_B  byte.b
     81 U00f1		       00		      byte.b
     82 U00f2		       00		      byte.b
     83 U00f3		       00		      byte.b
     84 U00f4		       00		      byte.b
     85 U00f5		       00		      byte.b
------- FILE main.s
     70 U00f6
     71 U00f6							; Bank 1
     72  e000 ????				      seg	CodeBank1
     73  d000					      org	$D000
     74  d000					      rorg	$F000
     75  d000		       00	   BANK1      byte.b
     76  d200					      org	$d200
     77  d200					      rorg	$d200
     78  d200				   Bank1Start
     79  d200		       ad fa ff 	      lda	$fffa
     80  d203		       ea		      nop
     81  d204		       ea		      nop
     82  d205		       ea		      nop
     83  d206
     84  dffc					      org	$dffc
     85  dffc					      rorg	$fffc
     86  dffc		       00 d2		      .word.w	Bank1Start
     87  dffe		       00 d2		      .word.w	Bank1Start
     88  e000
     89  e000							; Bank 2
     90  f000 ????				      seg	CodeBank2
     91  e000					      org	$E000
     92  e000					      rorg	$F000
     93  e000		       00	   BANK2      byte.b
     94  e200					      org	$e200
     95  e200					      rorg	$f200
     96  e200				   Bank2Start
     97  e200		       ad fa ff 	      lda	$fffa
     98  e203		       ea		      nop
     99  e204		       ea		      nop
    100  e205		       ea		      nop
    101  e206
    102  effc					      org	$effc
    103  effc					      rorg	$fffc
    104  effc		       00 f2		      .word.w	Bank2Start
    105  effe		       00 f2		      .word.w	Bank2Start
    106  f000
    107  f000							; Bank 3
    108  10000 ????				       seg	CodeBank3
    109  f000					      org	$F000
    110  f000					      rorg	$F000
    111  f000		       00	   BANK3      byte.b
    112  f200					      org	$f200
    113  f200					      rorg	$f200
    114  f200				   Bank3Start
    115  f200		       ad fa ff 	      lda	$fffa
    116  f203		       ea		      nop
    117  f204		       ea		      nop
    118  f205		       ea		      nop
    119  f206		       4c 09 f2 	      jmp	Start
    120  f209
    121  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 d5		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 da		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 d7		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 d8		      sta	Speed1
     48  f243		       85 d9		      sta	Speed2
     49  f245		       85 db		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 dc		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 de		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 df		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 e0		      sta	RamFFByte
     61  f257
     62  f257							; Setup level.
     63  f257		       20 aa fa 	      jsr	game_state_setup
     64  f25a
     65  f25a							; Start with overscan (calculation start of frame)
     66  f25a		       4c 00 f4 	      jmp	Overscan
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f25d					      include	"kernel_loader.s"
      1  f25d							; Copies the gem kernels to RAM
      2  f25d
      3  f25d							; Copy Kernel A to CBSRAM
      4  f25d				   LoadKernelA subroutine
      5  f25d		       a0 37		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f25f				   .loop
      7  f25f		       b9 00 fe 	      lda	kernel_1_start,Y
      8  f262		       99 00 10 	      sta	$1000,Y
      9  f265		       88		      dey
     10  f266		       d0 f7		      bne	.loop
     11  f268		       ad 00 fe 	      lda	kernel_1_start
     12  f26b		       8d 00 10 	      sta	$1000
     13  f26e		       60		      rts
     14  f26f
     15  f26f							; Copy Kernel B to CBSRAM
     16  f26f				   LoadKernelB subroutine
     17  f26f		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f271				   .loop
     19  f271		       b9 38 fe 	      lda	kernel_2_start,Y
     20  f274		       99 00 10 	      sta	$1000,Y
     21  f277		       88		      dey
     22  f278		       d0 f7		      bne	.loop
     23  f27a		       ad 38 fe 	      lda	kernel_2_start
     24  f27d		       8d 00 10 	      sta	$1000
     25  f280		       60		      rts
------- FILE main.s
------- FILE nibble_build.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_build.s"
      1  f281					      MAC	nibble_gem_kernel_a_1_build
      2  f281					      lda	#0
      3  f281							; NIBBLE_VAR NibbleGemini4
      4  f281							; NIBBLE_VAR NibbleMissile
      5  f281							; NIBBLE_VAR NibbleVdel1
      6  f281					      ldy	#SENTINEL
      7  f281					      sty	BuildKernelRST
      8  f281					      sty	NibbleX
      9  f281					      sty	NibbleY
     10  f281							; Gemini 1A
     11  f281				   .K_1A
     12  f281					      ldy	[DO_GEMS_A + 0]
     13  f281					      jsr	KernelA_GenReset
     14  f281				   .if_1
     15  f281					      bne	.else_1
     16  f281					      sec
     17  f281					      rol
     18  f281							; Special: Encoding RST0
     19  f281							; Rewrite lda RamKernelPF1 to be #immediate
     20  f281					      ldy	#BC_LDA_IMM
     21  f281					      sty	[KernelA_B - $100]
     22  f281					      ldy	#%10100000
     23  f281					      sty	[KernelA_B - $100 + 1]
     24  f281							; Store 1A in GRP0
     25  f281					      ldy	[DO_GEMS_A + 1]
     26  f281					      sty	NibbleGrp0
     27  f281					      sty	RamKernelGrp0
     28  f281							; Gemini 1A is RESPx
     29  f281					      ldy	#EMERALD_SP_RESET
     30  f281					      sty	[KernelA_C - $100 + 1]
     31  f281							; Turn 3-cycle NOP into 4-cycle
     32  f281					      ldy	#$14
     33  f281					      sty	[KernelA_D - $100]
     34  f281					      rol
     35  f281					      jmp	.endif_1
     36  f281							; [BIT DEPTH] #1 If-End @ 1
     37  f281				   .else_1
     38  f281					      clc
     39  f281					      rol
     40  f281							; Store 0A in GRP0
     41  f281					      ldy	[DO_GEMS_A + 0]
     42  f281					      sty	NibbleGrp0
     43  f281					      sty	RamKernelGrp0
     44  f281					      ldy	[DO_GEMS_A + 1]
     45  f281					      jsr	KernelA_GenReset
     46  f281				   .if_2
     47  f281					      bne	.else_2
     48  f281					      sec
     49  f281					      rol
     50  f281							; GEM1ASWITCH
     51  f281					      jmp	.endif_2
     52  f281							; [BIT DEPTH] #2 If-End @ 2
     53  f281				   .else_2
     54  f281					      clc
     55  f281					      rol
     56  f281							; Calculate the 1A value
     57  f281					      ldy	SHARD_LUT_RF1
     58  f281					      cpy	#1
     59  f281					      .byte	$D0, #3
     60  f281					      ldy	#RESP1
     61  f281					      .byte	$2C
     62  f281					      ldy	#GRP1
     63  f281					      sty	NibbleGemini1Reg
     64  f281							; Set opcode
     65  f281					      ldx	SHARD_LUT_RF1
     66  f281					      cpx	#1
     67  f281					      ldy	#BC_STX
     68  f281					      .byte	$F0, #5
     69  f281					      ldy	[DO_GEMS_A + 1]
     70  f281					      jsr	KernelA_UpdateRegs
     71  f281					      sty	NibbleGemini1
     72  f281							; [BIT DEPTH] #2 *If-End @ 2
     73  f281							; [BIT DEPTH] #2 Else-End @ 2
     74  f281				   .endif_2
     75  f281							; [BIT DEPTH] #1 *If-End @ 1
     76  f281							; [BIT DEPTH] #2 Else-End @ 2
     77  f281				   .endif_1
     78  f281							; Stop preserving GRP0
     79  f281					      ldy	#SENTINEL
     80  f281					      sty	RamKernelGrp0
     81  f281							; NibbleX, NibbleY are upgraded if not set
     82  f281							; Gemini 2A
     83  f281				   .K_2A
     84  f281					      ldy	[DO_GEMS_A + 2]
     85  f281					      jsr	KernelA_GenReset
     86  f281				   .if_3
     87  f281					      bne	.else_3
     88  f281					      sec
     89  f281					      rol
     90  f281					      jmp	.endif_3
     91  f281							; [BIT DEPTH] #3 If-End @ 3
     92  f281				   .else_3
     93  f281					      clc
     94  f281					      rol
     95  f281							; Set opcode
     96  f281					      ldy	[DO_GEMS_A + 2]
     97  f281					      jsr	KernelA_UpdateRegs
     98  f281					      sty	NibbleGemini2
     99  f281							; Set opcode target
    100  f281					      ldy	SHARD_LUT_RF1
    101  f281					      cpy	#2
    102  f281					      .byte	$D0, #3
    103  f281					      ldy	#RESP1
    104  f281					      .byte	$2C
    105  f281					      ldy	#GRP1
    106  f281					      sty	NibbleGemini2Reg
    107  f281							; [BIT DEPTH] #3 *If-End @ 3
    108  f281							; [BIT DEPTH] #3 Else-End @ 3
    109  f281				   .endif_3
    110  f281							; Gemini 3A
    111  f281				   .K_3A
    112  f281					      ldy	[DO_GEMS_A + 3]
    113  f281					      jsr	KernelA_GenReset
    114  f281				   .if_4
    115  f281					      bne	.else_4
    116  f281					      sec
    117  f281					      rol
    118  f281					      jmp	.endif_4
    119  f281							; [BIT DEPTH] #4 If-End @ 4
    120  f281				   .else_4
    121  f281					      clc
    122  f281					      rol
    123  f281							; Set opcode
    124  f281					      ldy	[DO_GEMS_A + 3]
    125  f281					      jsr	KernelA_UpdateRegs
    126  f281					      sty	NibbleGemini3
    127  f281							; Set opcode target
    128  f281					      ldy	SHARD_LUT_RF1
    129  f281					      cpy	#3
    130  f281					      .byte	$D0, #3
    131  f281					      ldy	#RESP1
    132  f281					      .byte	$2C
    133  f281					      ldy	#GRP1
    134  f281					      sty	NibbleGemini3Reg
    135  f281							; [BIT DEPTH] #4 *If-End @ 4
    136  f281							; [BIT DEPTH] #4 Else-End @ 4
    137  f281				   .endif_4
    138  f281							; [BIT DEPTH] Final: 4 (out of 8 bits)
    139  f281					      rol
    140  f281					      rol
    141  f281					      rol
    142  f281					      rol
    143  f281					      ENDM
    144  f281
    145  f281
    146  f281
    147  f281
    148  f281					      MAC	nibble_gem_kernel_a_2_build
    149  f281					      lda	#0
    150  f281							; NIBBLE_VAR NibbleGemini1
    151  f281							; NIBBLE_VAR NibbleGemini1Reg
    152  f281							; NIBBLE_VAR NibbleGemini2
    153  f281							; NIBBLE_VAR NibbleGemini2Reg
    154  f281							; NIBBLE_VAR NibbleGemini3
    155  f281							; NIBBLE_VAR NibbleGemini3Reg
    156  f281							; VD1 default
    157  f281					      ldy	[DO_GEMS_A + 1]
    158  f281					      sty	NibbleVdel1
    159  f281							; Gemini 4A
    160  f281					      ldx	SHARD_LUT_VD1
    161  f281					      cpx	#4
    162  f281				   .if_1
    163  f281					      beq	.else_1
    164  f281					      sec
    165  f281					      rol
    166  f281							; Set PHP
    167  f281					      ldy	#VDELP1
    168  f281					      sty	NibblePhp
    169  f281							; Update VDEL1
    170  f281					      ldy	[DO_GEMS_A + 4]
    171  f281					      sty	NibbleVdel1
    172  f281					      jmp	.endif_1
    173  f281							; [BIT DEPTH] #1 If-End @ 1
    174  f281				   .else_1
    175  f281					      clc
    176  f281					      rol
    177  f281					      ldy	[DO_GEMS_A + 4]
    178  f281					      jsr	KernelA_UpdateRegs
    179  f281					      sty	NibbleGemini4
    180  f281							; Set PHP
    181  f281					      ldy	#RESP1
    182  f281					      sty	NibblePhp
    183  f281							; [BIT DEPTH] #1 *If-End @ 1
    184  f281							; [BIT DEPTH] #1 Else-End @ 1
    185  f281				   .endif_1
    186  f281							; Gemini 5A
    187  f281							; TODO eventually...?
    188  f281							; Missile
    189  f281					      ldy	DO_MISS_A
    190  f281							; FIXME Why doesn't this branch compile?
    191  f281							; bne .+4
    192  f281							; ldx #BC_NOP
    193  f281							; stx NibbleMissile
    194  f281							; VD1
    195  f281							; GRP0
    196  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    197  f281					      rol
    198  f281					      rol
    199  f281					      rol
    200  f281					      rol
    201  f281					      rol
    202  f281					      rol
    203  f281					      rol
    204  f281					      ENDM
    205  f281
    206  f281
    207  f281
    208  f281
    209  f281					      MAC	nibble_gem_kernel_b_1_build
    210  f281					      lda	#0
    211  f281							; NIBBLE_VAR NibbleGemini1
    212  f281							; NIBBLE_VAR NibbleGemini1Reg
    213  f281							; NIBBLE_VAR NibbleGemini2Reg
    214  f281							; NIBBLE_VAR NibbleGemini3Reg
    215  f281							; NIBBLE_VAR NibbleGemini4
    216  f281							; NIBBLE_VAR NibbleMissile
    217  f281							; NIBBLE_VAR NibbleVdel1
    218  f281					      ldx	#SENTINEL
    219  f281					      stx	NibbleX
    220  f281					      stx	NibbleY
    221  f281					      stx	BuildKernelRST
    222  f281							; Php target default
    223  f281					      ldy	#RESP1
    224  f281					      sty	NibblePhp
    225  f281							; Gemini 0B
    226  f281					      ldy	[DO_GEMS_B + 0]
    227  f281					      sty	NibbleGrp0
    228  f281					      sty	RamKernelGrp0
    229  f281							; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    230  f281							; Gemini 1B
    231  f281					      ldy	[DO_GEMS_B + 1]
    232  f281					      jsr	KernelA_UpdateRegs
    233  f281					      sty	NibbleGemini1
    234  f281							; Gemini 2B
    235  f281					      ldy	[DO_GEMS_B + 2]
    236  f281					      jsr	KernelB_GenPhp
    237  f281				   .if_1
    238  f281					      bne	.else_1
    239  f281					      sec
    240  f281					      rol
    241  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    242  f281							; Write to PHP in 2B
    243  f281					      ldx	#EMERALD_SP
    244  f281					      stx	NibblePhp
    245  f281							; Update Grp0
    246  f281					      ldy	BuildKernelRST
    247  f281					      sty	RamKernelGrp0
    248  f281					      rol
    249  f281					      jmp	.endif_1
    250  f281							; [BIT DEPTH] #1 If-End @ 1
    251  f281				   .else_1
    252  f281					      clc
    253  f281					      rol
    254  f281							; Gemini 3B
    255  f281					      ldy	[DO_GEMS_B + 3]
    256  f281					      jsr	KernelB_GenPhp
    257  f281				   .if_2
    258  f281					      bne	.else_2
    259  f281					      sec
    260  f281					      rol
    261  f281							; Write to PHP in 3B
    262  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    263  f281					      ldx	#EMERALD_SP
    264  f281					      stx	NibblePhp
    265  f281
    266  f281							; Update Grp0
    267  f281					      ldy	BuildKernelRST
    268  f281					      sty	RamKernelGrp0
    269  f281					      jmp	.endif_2
    270  f281							; [BIT DEPTH] #2 If-End @ 2
    271  f281				   .else_2
    272  f281					      clc
    273  f281					      rol
    274  f281							; Update 2B
    275  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    276  f281							; Update 3B
    277  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    278  f281							; [BIT DEPTH] #2 *If-End @ 2
    279  f281							; [BIT DEPTH] #2 Else-End @ 2
    280  f281				   .endif_2
    281  f281							; [BIT DEPTH] #1 *If-End @ 1
    282  f281							; [BIT DEPTH] #2 Else-End @ 2
    283  f281				   .endif_1
    284  f281							; [BIT DEPTH] Final: 2 (out of 8 bits)
    285  f281					      rol
    286  f281					      rol
    287  f281					      rol
    288  f281					      rol
    289  f281					      rol
    290  f281					      rol
    291  f281					      ENDM
    292  f281
    293  f281
    294  f281
    295  f281
    296  f281					      MAC	nibble_gem_kernel_b_2_build
    297  f281					      lda	#0
    298  f281							; NIBBLE_VAR NibbleGemini1
    299  f281							; NIBBLE_VAR NibbleGemini1Reg
    300  f281							; NIBBLE_VAR NibbleGemini2
    301  f281							; NIBBLE_VAR NibbleGemini2Reg
    302  f281							; NIBBLE_VAR NibbleGemini3
    303  f281							; NIBBLE_VAR NibbleGemini3Reg
    304  f281							; NIBBLE_VAR NibbleMissile
    305  f281							; NIBBLE_VAR NibbleVdel1
    306  f281							; Gemini 1B
    307  f281							; Write out PHP flag comparison
    308  f281					      ldy	BuildKernelRST
    309  f281					      cpy	#G01
    310  f281				   .if_1
    311  f281					      bne	.else_1
    312  f281					      sec
    313  f281					      rol
    314  f281					      jmp	.endif_1
    315  f281							; [BIT DEPTH] #1 If-End @ 1
    316  f281				   .else_1
    317  f281					      clc
    318  f281					      rol
    319  f281							; [BIT DEPTH] #1 *If-End @ 1
    320  f281							; [BIT DEPTH] #1 Else-End @ 1
    321  f281				   .endif_1
    322  f281							; Missile
    323  f281							; ldy DO_MISS_B
    324  f281							; NIBBLE_IF eq
    325  f281							; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    326  f281							; NIBBLE_ELSE
    327  f281							;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    328  f281							; NIBBLE_END_IF
    329  f281							; Gemini 4B
    330  f281					      ldy	[DO_GEMS_B + 4]
    331  f281					      jsr	KernelA_UpdateRegs
    332  f281					      sty	NibbleGemini4
    333  f281							; TODO if no PHP, rewrite previous section:
    334  f281							; NIBBLE_IF cs
    335  f281							;
    336  f281							;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    337  f281							;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    338  f281							;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    339  f281							;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    340  f281							; NIBBLE_END_IF
    341  f281							; Make adjustments for sprites.
    342  f281					      ror	NibbleGrp0
    343  f281					      ror	NibbleX
    344  f281					      ror	NibbleY
    345  f281							;
    346  f281							; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    347  f281							; GRP0
    348  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    349  f281					      rol
    350  f281					      rol
    351  f281					      rol
    352  f281					      rol
    353  f281					      rol
    354  f281					      rol
    355  f281					      rol
    356  f281					      ENDM
    357  f281
    358  f281
    359  f281
    360  f281
------- FILE main.s
------- FILE nibble_eval.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_eval.s"
      1  f281					      MAC	nibble_gem_kernel_a_1
      2  f281					      asl
      3  f281					      bcc	.else_1
      4  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
      5  f281				   .if_1
      6  f281					      rol
      7  f281					      sleep	17
      8  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 25 }
      9  f281
     10  f281					      jmp	.endif_1
     11  f281				   .else_1
     12  f281					      asl
     13  f281					      bcc	.else_2
     14  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
     15  f281				   .if_2
     16  f281					      ldx	#[ #BC_STX ]
     17  f281					      stx	[[KernelA_D_W + 0] + 0]
     18  f281					      ldx	#[ #RESP1 ]
     19  f281					      stx	[[KernelA_D_W + 1] + 0]
     20  f281					      sleep	2
     21  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     22  f281
     23  f281					      jmp	.endif_2
     24  f281				   .else_2
     25  f281					      ldx.z	NibbleGemini1
     26  f281					      stx	[[KernelA_D_W + 0] + 0]
     27  f281					      ldx.z	NibbleGemini1Reg
     28  f281					      stx	[[KernelA_D_W + 1] + 0]
     29  f281					      sleep	3
     30  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     31  f281				   .endif_2
     32  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     33  f281				   .endif_1
     34  f281					      asl
     35  f281					      bcc	.else_3
     36  f281							; parent: BuildState { index: 2, checkdepth: 2, cycles: 29 }
     37  f281				   .if_3
     38  f281					      ldx	#[ #NOP_REG ]
     39  f281					      stx	[[KernelA_E_W + 1] + 0]
     40  f281					      ldx	#[ #RESP1 ]
     41  f281					      stx	[[KernelA_G_W + 1] + 0]
     42  f281					      sleep	5
     43  f281							; then: BuildState { index: 3, checkdepth: 3, cycles: 48 }
     44  f281
     45  f281					      jmp	.endif_3
     46  f281				   .else_3
     47  f281					      ldx	#[ #RESP1 ]
     48  f281					      stx	[[KernelA_E_W + 1] + 0]
     49  f281					      ldx.z	NibbleGemini2
     50  f281					      stx	[[KernelA_G_W + 0] + 0]
     51  f281					      ldx.z	NibbleGemini2Reg
     52  f281					      stx	[[KernelA_G_W + 1] + 0]
     53  f281							; else: BuildState { index: 3, checkdepth: 3, cycles: 48 }
     54  f281				   .endif_3
     55  f281					      asl
     56  f281					      bcc	.else_4
     57  f281							; parent: BuildState { index: 3, checkdepth: 3, cycles: 52 }
     58  f281				   .if_4
     59  f281					      ldx	#[ #RESP1 ]
     60  f281					      stx	[[KernelA_H_W + 1] + 0]
     61  f281					      sleep	5
     62  f281							; then: BuildState { index: 4, checkdepth: 4, cycles: 65 }
     63  f281
     64  f281					      jmp	.endif_4
     65  f281				   .else_4
     66  f281					      ldx.z	NibbleGemini3
     67  f281					      stx	[[KernelA_H_W + 0] + 0]
     68  f281					      ldx.z	NibbleGemini3Reg
     69  f281					      stx	[[KernelA_H_W + 1] + 0]
     70  f281							; else: BuildState { index: 4, checkdepth: 4, cycles: 65 }
     71  f281				   .endif_4
     72  f281					      ENDM
     73  f281
     74  f281
     75  f281
     76  f281
     77  f281					      MAC	nibble_gem_kernel_a_2
     78  f281					      asl
     79  f281					      bcc	.else_1
     80  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
     81  f281				   .if_1
     82  f281					      ldx	#[ #BC_STA ]
     83  f281					      stx	[[KernelA_I_W + 0] + 0]
     84  f281					      ldx	#[ #EMERALD_SP_RESET ]
     85  f281					      stx	[[KernelA_I_W + 0] + 1]
     86  f281					      ldx	#[ #BC_STA ]
     87  f281					      stx	[[KernelA_J_W + 1] + 0]
     88  f281					      ldx	#[ #PF1 ]
     89  f281					      stx	[[KernelA_J_W + 1] + 1]
     90  f281					      ldx	#[ #BC_PHP ]
     91  f281					      stx	[[KernelA_K_W + 1] + 0]
     92  f281					      sleep	2
     93  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 38 }
     94  f281
     95  f281					      jmp	.endif_1
     96  f281				   .else_1
     97  f281					      ldx	#[ #BC_PHP ]
     98  f281					      stx	[[KernelA_I_W + 0] + 0]
     99  f281					      ldx	#[ #BC_STA ]
    100  f281					      stx	[[KernelA_J_W + 0] + 0]
    101  f281					      ldx	#[ #PF1 ]
    102  f281					      stx	[[KernelA_J_W + 0] + 1]
    103  f281					      ldx.z	NibbleGemini4
    104  f281					      stx	[[KernelA_K_W + 0] + 0]
    105  f281					      ldx	#[ #EMERALD_SP ]
    106  f281					      stx	[[KernelA_K_W + 1] + 0]
    107  f281					      sleep	3
    108  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 38 }
    109  f281				   .endif_1
    110  f281					      ldx.z	NibbleMissile
    111  f281					      stx	[[KernelA_F - $100] + 0]
    112  f281					      ldx.z	NibbleVdel1
    113  f281					      stx	[[KernelA_VDEL1 - $100] + 0]
    114  f281					      ldx.z	NibbleGrp0
    115  f281					      stx	[[KernelA_VDEL0 - $100] + 0]
    116  f281					      ldx	#[ #$ff ]
    117  f281					      stx	[NibblePs + 0]
    118  f281					      ENDM
    119  f281
    120  f281
    121  f281
    122  f281
    123  f281					      MAC	nibble_gem_kernel_b_1
    124  f281					      asl
    125  f281					      bcc	.else_1
    126  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
    127  f281				   .if_1
    128  f281					      ldx	#[ #BC_STY ]
    129  f281					      stx	[[KernelB_E_W + 0] + 0]
    130  f281					      ldx	#[ #EMERALD_SP_RESET ]
    131  f281					      stx	[[KernelB_E_W + 1] + 0]
    132  f281					      ldx	#[ #BC_PHP ]
    133  f281					      stx	[[KernelB_F_W + 1] + 0]
    134  f281					      ldx	#[ #BC_STA ]
    135  f281					      stx	[[KernelB_G_W + 0] + 0]
    136  f281					      ldx	#[ #PF1 ]
    137  f281					      stx	[[KernelB_G_W + 1] + 0]
    138  f281					      ldx.z	NibbleGemini3
    139  f281					      stx	[[KernelB_H_W + 0] + 0]
    140  f281					      ldx	#[ #EMERALD_SP ]
    141  f281					      stx	[[KernelB_H_W + 1] + 0]
    142  f281					      rol
    143  f281					      sleep	3
    144  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 53 }
    145  f281
    146  f281					      jmp	.endif_1
    147  f281				   .else_1
    148  f281					      asl
    149  f281					      bcc	.else_2
    150  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
    151  f281				   .if_2
    152  f281					      ldx	#[ #BC_STY ]
    153  f281					      stx	[[KernelB_E_W + 0] + 0]
    154  f281					      ldx	#[ #EMERALD_SP_RESET ]
    155  f281					      stx	[[KernelB_E_W + 1] + 0]
    156  f281					      ldx.z	NibbleGemini2
    157  f281					      stx	[[KernelB_F_W + 1] + 0]
    158  f281					      ldx	#[ #EMERALD_SP ]
    159  f281					      stx	[[KernelB_F_W + 2] + 0]
    160  f281					      ldx	#[ #BC_STA ]
    161  f281					      stx	[[KernelB_G_W + 1] + 0]
    162  f281					      ldx	#[ #PF1 ]
    163  f281					      stx	[[KernelB_G_W + 2] + 0]
    164  f281					      ldx	#[ #BC_PHP ]
    165  f281					      stx	[[KernelB_H_W + 1] + 0]
    166  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    167  f281
    168  f281					      jmp	.endif_2
    169  f281				   .else_2
    170  f281					      ldx.z	NibbleGemini2
    171  f281					      stx	[[KernelB_F_W + 0] + 0]
    172  f281					      ldx	#[ #EMERALD_SP ]
    173  f281					      stx	[[KernelB_F_W + 1] + 0]
    174  f281					      ldx.z	NibbleGemini3
    175  f281					      stx	[[KernelB_H_W + 0] + 0]
    176  f281					      ldx	#[ #EMERALD_SP ]
    177  f281					      stx	[[KernelB_H_W + 1] + 0]
    178  f281					      sleep	19
    179  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    180  f281				   .endif_2
    181  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    182  f281				   .endif_1
    183  f281					      ENDM
    184  f281
    185  f281
    186  f281
    187  f281
    188  f281					      MAC	nibble_gem_kernel_b_2
    189  f281					      ldx	#[ NibbleGemini1 ]
    190  f281					      stx	[KernelB_D_W + 0]
    191  f281					      asl
    192  f281					      bcc	.else_1
    193  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 10 }
    194  f281				   .if_1
    195  f281					      ldx	#[ #RamFFByte ]
    196  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    197  f281					      sleep	2
    198  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 20 }
    199  f281
    200  f281					      jmp	.endif_1
    201  f281				   .else_1
    202  f281					      ldx	#[ #RamPF1Value ]
    203  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    204  f281					      sleep	3
    205  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 20 }
    206  f281				   .endif_1
    207  f281					      ldx.z	NibbleGemini4
    208  f281					      stx	[KernelB_J_W + 0]
    209  f281					      ldx.z	NibbleGrp0
    210  f281					      stx	[[KernelB_VDEL0 - $100] + 0]
    211  f281					      ldx	#[ #$00 ]
    212  f281					      stx	[NibblePs + 0]
    213  f281					      ENDM
    214  f281
    215  f281
    216  f281
    217  f281
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_shard.s"
      1  f281							; conflict: 11011000 #%0011 #%1000
      2  f281							; conflict: 11011001 #%0011 #%1000
      3  f281							; conflict: 11011010 #%0011 #%1000
      4  f281							; conflict: 11011011 #%0011 #%1000
      5  f281							; conflict: 11100100 #%1000 #%0011
      6  f281							; conflict: 11100101 #%1000 #%0011
      7  f281							; conflict: 11100110 #%1000 #%0011
      8  f281							; conflict: 11100111 #%1000 #%0011
      9  f281							; conflict: 01111000 #%1000 #%0001
     10  f281							; conflict: 01111001 #%1000 #%0001
     11  f281							; conflict: 01111010 #%1000 #%0001
     12  f281							; conflict: 01111011 #%1000 #%0001
     13  f281							; conflict: 10110100 #%1000 #%0001
     14  f281							; conflict: 10110101 #%1000 #%0001
     15  f281							; conflict: 10110110 #%1000 #%0001
     16  f281							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400							; "Start" with overscan.
      2  f400				   Overscan   subroutine
      3  f400		       85 01		      sta	VBLANK
      0  f402					      TIMER_SETUP	29
      1  f402				   .lines     SET	29
      2  f402		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f404		       85 02		      sta	WSYNC
      4  f406		       8d 96 02 	      sta	TIM64T
      5  f409
      6  f409							; Read inputs.
      7  f409		       20 0a f5 	      jsr	MoveJoystick
      8  f40c							; Player physics.
      9  f40c		       20 4a f5 	      jsr	SpeedCalculation
     10  f40f							; Animation.
     11  f40f		       20 c8 fa 	      jsr	game_state_tick
     12  f412							; Load the ROM kernel into CBSRAM.
     13  f412		       20 7a f4 	      jsr	GameFrameKernelLoader
     14  f415
     15  f415							; Extract 26-bit string to full Gemini profile
     16  f415		       20 00 fa 	      jsr	GeminiPopulate
     17  f418
     18  f418							; Wait out overscan.
      0  f418					      TIMER_WAIT
      1  f418				   .waittimer
      2  f418		       ad 84 02 	      lda	INTIM
      3  f41b		       d0 fb		      bne	.waittimer
      4  f41d		       85 02		      sta	WSYNC
     20  f41f
     21  f41f							; Vertical Sync (3 lines)
     22  f41f				   VerticalSync subroutine
      0  f41f					      VERTICAL_SYNC
      1  f41f		       a9 0e		      lda	#%1110
      2  f421		       85 02	   .VSLP1     sta	WSYNC
      3  f423		       85 00		      sta	VSYNC
      4  f425		       4a		      lsr
      5  f426		       d0 f9		      bne	.VSLP1
     24  f428
     25  f428							; Start of NTSC frame.
     26  f428				   FrameStart subroutine
      0  f428					      ASSERT_RUNTIME	"_scan == #0"
      1  f428				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f428  && !(  _scan == #0  ) }
      2  f428					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     28  f428
     29  f428				   VerticalBlank subroutine
     30  f428							; Setup frame timer and increment frame counter.
      0  f428					      TIMER_SETUP	37
      1  f428				   .lines     SET	37
      2  f428		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f42a		       85 02		      sta	WSYNC
      4  f42c		       8d 96 02 	      sta	TIM64T
     32  f42f		       e6 d5		      inc	FrameCount
     33  f431
     34  f431							; Populate the Nibble kernel values for the current row.
     35  f431		       20 f5 f5 	      jsr	GameNibblePopulate
     36  f434							; Update the current kernel with precomputed Nibble data.
     37  f434		       20 a7 f7 	      jsr	GameNibbleRun
     38  f437
     39  f437							; TODO Rerun nibble populate for the "next row"
     40  f437							; jsr GeminiPopulate
     41  f437							; jsr GameNibblePopulate
     42  f437
     43  f437							; Setup frame. Jump and return
     44  f437		       4c 82 f4 	      jmp	GameFrameSetup
     45  f43a
     46  f43a				   VerticalBlankEnd
     47  f43a							; Wait until the end of Vertical blank.
      0  f43a					      TIMER_WAIT
      1  f43a				   .waittimer
      2  f43a		       ad 84 02 	      lda	INTIM
      3  f43d		       d0 fb		      bne	.waittimer
      4  f43f		       85 02		      sta	WSYNC
      0  f441					      ASSERT_RUNTIME	"_scan == #37"
      1  f441				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f441  && !(  _scan == #37  ) }
      2  f441					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     50  f441
     51  f441
     52  f441							;;;;;;;;;;;;;;;;;;;;;;;;;;
     53  f441							; Visible frame
     54  f441							;;;;;;;;;;;;;;;;;;;;;;;;;;
     55  f441
     56  f441				   GameFrameRender
     57  f441							; Start rendering the kernel.
     58  f441		       4c 06 fb 	      jmp	KernelBorder
     59  f444
     60  f444				   FrameEnd   subroutine
     61  f444		       85 02		      sta	WSYNC
     62  f446
     63  f446							; Blank all background colors.
     64  f446		       a9 00		      lda	#0
     65  f448		       85 08		      sta	COLUPF
     66  f44a		       85 0f		      sta	PF2
     67  f44c		       85 0e		      sta	PF1
     68  f44e		       85 1c		      sta	EMERALD_SP
     69  f450
     70  f450							; Guide lines (2x)
     71  f450		       a9 02		      lda	#SIGNAL_LINE
     72  f452		       85 09		      sta	COLUBK
     73  f454					      REPEAT	6
     74  f454		       85 02		      sta	WSYNC
     73  f454					      REPEND
     74  f456		       85 02		      sta	WSYNC
     73  f456					      REPEND
     74  f458		       85 02		      sta	WSYNC
     73  f458					      REPEND
     74  f45a		       85 02		      sta	WSYNC
     73  f45a					      REPEND
     74  f45c		       85 02		      sta	WSYNC
     73  f45c					      REPEND
     74  f45e		       85 02		      sta	WSYNC
     75  f460					      REPEND
     76  f460		       a9 00		      lda	#$00
     77  f462		       85 09		      sta	COLUBK
     78  f464
     79  f464							; Restore stack pointer
     80  f464		       a6 e1		      ldx	RamStackBkp
     81  f466		       9a		      txs
     82  f467
     83  f467							; Display the rest of the blank screen.
      0  f467					      TIMER_SETUP	25
      1  f467				   .lines     SET	25
      2  f467		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f469		       85 02		      sta	WSYNC
      4  f46b		       8d 96 02 	      sta	TIM64T
     85  f46e		       85 02		      sta	WSYNC
      0  f470					      TIMER_WAIT
      1  f470				   .waittimer
      2  f470		       ad 84 02 	      lda	INTIM
      3  f473		       d0 fb		      bne	.waittimer
      4  f475		       85 02		      sta	WSYNC
      0  f477					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f477				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f477  && !(  _scan == (#37 + #184)  ) }
      2  f477					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     88  f477
     89  f477							; Finish with overscan
     90  f477		       4c 00 f4 	      jmp	Overscan
     91  f47a
     92  f47a
     93  f47a							;;;;;;;;;;;;;;;;;;;;;;;;;;
     94  f47a							; Other stuff
     95  f47a							;;;;;;;;;;;;;;;;;;;;;;;;;;
     96  f47a
     97  f47a							; Load the ROM kernel into CBSRAM.
     98  f47a				   GameFrameKernelLoader subroutine
     99  f47a							; Kernel A or B
    100  f47a		       a9 01		      lda	#01
    101  f47c					      IFNCONST	ONLY_KERNEL_B
    102  f47c				  -	      IFNCONST	ONLY_KERNEL_A
    103  f47c				  -			; FIXME Kernel B disabled for test
    104  f47c				  -	      and	FrameCount
    105  f47c				  -	      bne	.kernel_b
    106  f47c					      ENDIF
    107  f47c				   .kernel_a
    108  f47c							; Load kernel A into CBSRAM
    109  f47c		       4c 5d f2 	      jmp	LoadKernelA
    110  f47f					      ENDIF
    111  f47f				   .kernel_b
    112  f47f							; Load kernel B into CBSRAM
    113  f47f		       4c 6f f2 	      jmp	LoadKernelB
    114  f482
    115  f482							; Kernel-specific frame setup.
    116  f482				   GameFrameSetup subroutine
    117  f482							; Kernel A or B reading directly from the kernel ID
    118  f482		       ad 00 f1 	      lda	CBSRAM_KERNEL_READ
    119  f485		       c9 0a		      cmp	#$0a
    120  f487		       d0 1d		      bne	.kernel_b
    121  f489
    122  f489				   .kernel_a
    123  f489							; Move missile
    124  f489		       85 02		      sta	WSYNC
      0  f48b					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f48b				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f48b
      3  f48b				  -	      IF	.CYCLES < 2
      4  f48b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f48b				  -	      ERR
      6  f48b					      ENDIF
      7  f48b
      8  f48b				  -	      IF	.CYCLES & 1
      9  f48b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f48b				  -	      nop	0
     11  f48b				  -	      ELSE
     12  f48b				  -	      bit	VSYNC
     13  f48b				  -	      ENDIF
     14  f48b				  -.CYCLES    SET	.CYCLES - 3
     15  f48b					      ENDIF
     16  f48b
     17  f48b					      REPEAT	.CYCLES / 2
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     17  f48d					      REPEND
     18  f48e		       ea		      nop
     17  f48e					      REPEND
     18  f48f		       ea		      nop
     17  f48f					      REPEND
     18  f490		       ea		      nop
     17  f490					      REPEND
     18  f491		       ea		      nop
     17  f491					      REPEND
     18  f492		       ea		      nop
     17  f492					      REPEND
     18  f493		       ea		      nop
     17  f493					      REPEND
     18  f494		       ea		      nop
     17  f494					      REPEND
     18  f495		       ea		      nop
     17  f495					      REPEND
     18  f496		       ea		      nop
     17  f496					      REPEND
     18  f497		       ea		      nop
     17  f497					      REPEND
     18  f498		       ea		      nop
     19  f499					      REPEND
    126  f499		       85 13		      sta	EMERALD_MI_RESET
    127  f49b		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    128  f49d		       85 23		      sta	EMERALD_MI_HMOVE
    129  f49f
    130  f49f							; DEBUG: Set per-kernel color
    131  f49f		       a2 cc		      ldx	#COL_EMERALD
    132  f4a1		       86 07		      stx	EMERALD_SP_COLOR
    133  f4a3
    134  f4a3		       4c f2 f4 	      jmp	.complete
    135  f4a6
    136  f4a6				   .kernel_b
    137  f4a6							; Move missile
    138  f4a6		       85 02		      sta	WSYNC
      0  f4a8					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f4a8				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f4a8
      3  f4a8				  -	      IF	.CYCLES < 2
      4  f4a8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4a8				  -	      ERR
      6  f4a8					      ENDIF
      7  f4a8
      8  f4a8					      IF	.CYCLES & 1
      9  f4a8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4a8		       04 00		      nop	0
     11  f4aa				  -	      ELSE
     12  f4aa				  -	      bit	VSYNC
     13  f4aa					      ENDIF
     14  f4aa				   .CYCLES    SET	.CYCLES - 3
     15  f4aa					      ENDIF
     16  f4aa
     17  f4aa					      REPEAT	.CYCLES / 2
     18  f4aa		       ea		      nop
     17  f4aa					      REPEND
     18  f4ab		       ea		      nop
     17  f4ab					      REPEND
     18  f4ac		       ea		      nop
     17  f4ac					      REPEND
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     17  f4af					      REPEND
     18  f4b0		       ea		      nop
     17  f4b0					      REPEND
     18  f4b1		       ea		      nop
     17  f4b1					      REPEND
     18  f4b2		       ea		      nop
     17  f4b2					      REPEND
     18  f4b3		       ea		      nop
     17  f4b3					      REPEND
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     17  f4b5					      REPEND
     18  f4b6		       ea		      nop
     17  f4b6					      REPEND
     18  f4b7		       ea		      nop
     17  f4b7					      REPEND
     18  f4b8		       ea		      nop
     17  f4b8					      REPEND
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     17  f4ba					      REPEND
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     17  f4bf					      REPEND
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     19  f4c2					      REPEND
    140  f4c2		       85 13		      sta	EMERALD_MI_RESET
    141  f4c4		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    142  f4c6		       85 23		      sta	EMERALD_MI_HMOVE
    143  f4c8
    144  f4c8							; Possibly override Missile position.
    145  f4c8							; TODO Document use of DO_MISS_B here, to check if M1 should be reset to a
    146  f4c8							; hidden position on Kernel B as a mechanism for offing the missile bit.
    147  f4c8		       a5 e9		      lda	DO_MISS_B
    148  f4ca		       d0 22		      bne	.kernel_b_continue
    149  f4cc		       85 02		      sta	WSYNC
      0  f4ce					      sleep	KERNEL_B_MISSILE_SLEEP + 8
      1  f4ce				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP + 8
      2  f4ce
      3  f4ce				  -	      IF	.CYCLES < 2
      4  f4ce				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ce				  -	      ERR
      6  f4ce					      ENDIF
      7  f4ce
      8  f4ce					      IF	.CYCLES & 1
      9  f4ce					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ce		       04 00		      nop	0
     11  f4d0				  -	      ELSE
     12  f4d0				  -	      bit	VSYNC
     13  f4d0					      ENDIF
     14  f4d0				   .CYCLES    SET	.CYCLES - 3
     15  f4d0					      ENDIF
     16  f4d0
     17  f4d0					      REPEAT	.CYCLES / 2
     18  f4d0		       ea		      nop
     17  f4d0					      REPEND
     18  f4d1		       ea		      nop
     17  f4d1					      REPEND
     18  f4d2		       ea		      nop
     17  f4d2					      REPEND
     18  f4d3		       ea		      nop
     17  f4d3					      REPEND
     18  f4d4		       ea		      nop
     17  f4d4					      REPEND
     18  f4d5		       ea		      nop
     17  f4d5					      REPEND
     18  f4d6		       ea		      nop
     17  f4d6					      REPEND
     18  f4d7		       ea		      nop
     17  f4d7					      REPEND
     18  f4d8		       ea		      nop
     17  f4d8					      REPEND
     18  f4d9		       ea		      nop
     17  f4d9					      REPEND
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     17  f4e1					      REPEND
     18  f4e2		       ea		      nop
     17  f4e2					      REPEND
     18  f4e3		       ea		      nop
     17  f4e3					      REPEND
     18  f4e4		       ea		      nop
     17  f4e4					      REPEND
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     19  f4ec					      REPEND
    151  f4ec		       85 13		      sta	EMERALD_MI_RESET
    152  f4ee
    153  f4ee				   .kernel_b_continue
    154  f4ee							; DEBUG: Set per-kernel color
    155  f4ee		       a2 e4		      ldx	#$e4
    156  f4f0							; ldx #COL_EMERALD
    157  f4f0		       86 07		      stx	EMERALD_SP_COLOR
    158  f4f2
    159  f4f2				   .complete
    160  f4f2
    161  f4f2							; General frame setup.
    162  f4f2				   FrameSetup
    163  f4f2							; Save stack pointer
    164  f4f2		       ba		      tsx
    165  f4f3		       86 e1		      stx	RamStackBkp
    166  f4f5
    167  f4f5							; Row counter
    168  f4f5		       a9 10		      lda	#ROW_COUNT
    169  f4f7		       85 d4		      sta	LoopCount
    170  f4f9
    171  f4f9							; let SpriteEnd = Frame Height - Y Position
    172  f4f9		       18		      clc
    173  f4fa		       a9 c8		      lda	#HEIGHT_OFFSET
    174  f4fc		       e5 da		      sbc	YPos
    175  f4fe		       85 d6		      sta	SpriteEnd
    176  f500
    177  f500							; Position Player 1
    178  f500		       a5 d7		      lda	XPos
    179  f502		       a2 00		      ldx	#0
    180  f504		       20 81 f5 	      jsr	SetHorizPos
    181  f507
    182  f507		       4c 3a f4 	      jmp	VerticalBlankEnd
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f50a					      include	"game_input.s"
      1  f50a							; Handles input checking. Called from overscan.
      2  f50a
      3  f50a							; Read joystick movement and apply to object 0
      4  f50a				   MoveJoystick subroutine
      5  f50a
      6  f50a							; HACK to add in resetting ability for the gems
      7  f50a		       a5 0c		      lda	INPT4	; read left port action button
      8  f50c		       29 80		      and	#%10000000	; safe to avoid any reads from D6 - D0
      9  f50e		       30 03		      bmi	.actionButtonNotPressed	; branch if action button not pressed
     10  f510		       20 aa fa 	      jsr	game_state_setup
     11  f513				   .actionButtonNotPressed
     12  f513
     13  f513							; Move vertically
     14  f513							; (up and down are actually reversed since ypos starts at bottom)
     15  f513							;     ldx YPos
     16  f513		       a9 10		      lda	#%00010000	;Up?
     17  f515		       2c 80 02 	      bit	SWCHA
     18  f518		       d0 0d		      bne	SkipMoveUp
     19  f51a
     20  f51a		       18		      clc
     21  f51b		       a5 d9		      lda	Speed2
     22  f51d		       69 0c		      adc	#12
     23  f51f		       85 d9		      sta	Speed2
     24  f521		       a5 d8		      lda	Speed1
     25  f523		       69 00		      adc	#00
     26  f525		       85 d8		      sta	Speed1
     27  f527
     28  f527				   SkipMoveUp
     29  f527		       a6 d7		      ldx	XPos
     30  f529
     31  f529							; Only check left/right on odd frames;
     32  f529							; TODO make this just a fractional speed
     33  f529							; rather than dropping frames
     34  f529		       a9 01		      lda	#01
     35  f52b		       25 d5		      and	FrameCount
     36  f52d		       d0 18		      bne	SkipMoveRight
     37  f52f
     38  f52f
     39  f52f							; Move horizontally
     40  f52f		       a9 40		      lda	#%01000000	;Left?
     41  f531		       2c 80 02 	      bit	SWCHA
     42  f534		       d0 05		      bne	SkipMoveLeft
     43  f536		       e0 1d		      cpx	#29
     44  f538		       90 01		      bcc	SkipMoveLeft
     45  f53a		       ca		      dex
     46  f53b
     47  f53b							; Reflect
     48  f53b							;     lda #$ff
     49  f53b							;     sta REFP0
     50  f53b				   SkipMoveLeft
     51  f53b		       a9 80		      lda	#%10000000	;Right?
     52  f53d		       2c 80 02 	      bit	SWCHA
     53  f540		       d0 05		      bne	SkipMoveRight
     54  f542		       e0 80		      cpx	#128
     55  f544		       b0 01		      bcs	SkipMoveRight
     56  f546		       e8		      inx
     57  f547
     58  f547							; Reflect
     59  f547							;     lda #$0
     60  f547							;     sta REFP0
     61  f547				   SkipMoveRight
     62  f547		       86 d7		      stx	XPos
     63  f549		       60		      rts
     64  f54a
     65  f54a
     66  f54a				   SpeedCalculation
     67  f54a		       38		      sec
     68  f54b		       a5 d9		      lda	Speed2
     69  f54d		       e9 07		      sbc	#7
     70  f54f		       85 d9		      sta	Speed2
     71  f551		       a5 d8		      lda	Speed1
     72  f553		       e9 00		      sbc	#0
     73  f555		       85 d8		      sta	Speed1
     74  f557
     75  f557		       18		      clc
     76  f558		       a5 db		      lda	YPos2
     77  f55a		       65 d9		      adc	Speed2
     78  f55c		       85 db		      sta	YPos2
     79  f55e		       a5 da		      lda	YPos
     80  f560		       65 d8		      adc	Speed1
     81  f562		       85 da		      sta	YPos
     82  f564
     83  f564		       c9 48		      cmp	#FLOOR_OFFSET
     84  f566		       b0 0a		      bcs	NewThing2
     85  f568
     86  f568							; Reset to floor
     87  f568		       a9 48		      lda	#FLOOR_OFFSET
     88  f56a		       85 da		      sta	YPos
     89  f56c		       a9 00		      lda	#0
     90  f56e		       85 d8		      sta	Speed1
     91  f570		       85 d9		      sta	Speed2
     92  f572				   NewThing2
     93  f572
     94  f572		       c9 c0		      cmp	#CEILING_OFFSET
     95  f574		       90 0a		      bcc	.next
     96  f576
     97  f576							; Reset to ceiling
     98  f576		       a9 c0		      lda	#CEILING_OFFSET
     99  f578		       85 da		      sta	YPos
    100  f57a		       a9 00		      lda	#0
    101  f57c		       85 d8		      sta	Speed1
    102  f57e		       85 d9		      sta	Speed2
    103  f580				   .next
    104  f580		       60		      rts
    105  f581
    106  f581
    107  f581
    108  f581							; Subroutine
    109  f581				   SetHorizPos
    110  f581		       85 02		      sta	WSYNC	; start a new line
    111  f583		       24 00		      bit	0	; waste 3 cycles
    112  f585		       38		      sec		; set carry flag
    113  f586				   DivideLoop
    114  f586		       e9 0f		      sbc	#15	; subtract 15
    115  f588		       b0 fc		      bcs	DivideLoop	; branch until negative
    116  f58a		       49 07		      eor	#7	; calculate fine offset
    117  f58c		       0a		      asl
    118  f58d		       0a		      asl
    119  f58e		       0a		      asl
    120  f58f		       0a		      asl
    121  f590		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    122  f592		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    123  f594		       60		      rts		; return to caller
------- FILE main.s
------- FILE game_nibble.s LEVEL 2 PASS 2
      0  f595					      include	"game_nibble.s"
      1  f595							; Frame loop, including calling out to other kernels.
      2  f595
      3  f595		       00 aa	   SENTINEL   =	%010101010
      4  f595
      5  f595							; Reflected for Kernel A
      6  f595		       00 00	   G00	      =	%00000000
      7  f595		       00 60	   G01	      =	%01100000
      8  f595		       00 06	   G10	      =	%00000110
      9  f595		       00 66	   G11	      =	%01100110
     10  f595
     11  f595		       00 a9	   BC_LDA_IMM =	$a9
     12  f595		       00 85	   BC_STA     =	$85
     13  f595		       00 86	   BC_STX     =	$86
     14  f595		       00 84	   BC_STY     =	$84
     15  f595		       00 08	   BC_PHP     =	$08
     16  f595		       00 04	   BC_NOP     =	$04
     17  f595
     18  f595		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
     19  f595
     20  f595				   KernelA_D_W EQM	[KernelA_D - $100]
     21  f595				   KernelA_E_W EQM	[KernelA_E - $100]
     22  f595				   KernelA_G_W EQM	[KernelA_G - $100]
     23  f595				   KernelA_H_W EQM	[KernelA_H - $100]
     24  f595				   KernelA_I_W EQM	[KernelA_I - $100]
     25  f595				   KernelA_J_W EQM	[KernelA_J - $100]
     26  f595				   KernelA_K_W EQM	[KernelA_K - $100]
     27  f595
     28  f595				   KernelB_D_W EQM	[KernelB_D - $100]
     29  f595				   KernelB_E_W EQM	[KernelB_E - $100]
     30  f595				   KernelB_F_W EQM	[KernelB_F - $100]
     31  f595				   KernelB_G_W EQM	[KernelB_G - $100]
     32  f595				   KernelB_H_W EQM	[KernelB_H - $100]
     33  f595				   KernelB_I_W EQM	[KernelB_I - $100]
     34  f595				   KernelB_J_W EQM	[KernelB_J - $100]
     35  f595				   KernelB_K_W EQM	[KernelB_K - $100]
     36  f595
     37  f595					      mac	calc_regs_and_store
     38  f595				   .OFFSET    SET	{1}
     39  f595				   .TARGET    SET	{2}
     40  f595					      ldy	[DO_GEMS_B + .OFFSET]
     41  f595					      jsr	KernelB_UpdateRegs
     42  f595					      sty	.TARGET
     43  f595					      endm
     44  f595
     45  f595							; Y=Gemini Sprite
     46  f595							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     47  f595							; processor flag Z is TRUE if this is RST.
     48  f595				   KernelA_GenReset subroutine
     49  f595		       c0 00		      cpy	#$00
     50  f597		       f0 01		      beq	.start
     51  f599		       60		      rts
     52  f59a							; Current Gemini = $00
     53  f59a				   .start
     54  f59a		       a6 d1		      ldx	BuildKernelRST
     55  f59c		       e0 aa		      cpx	#SENTINEL
     56  f59e		       d0 04		      bne	.set_else
     57  f5a0							; We have found the first (and only) RST on this line, set the marker var
     58  f5a0		       a2 ff		      ldx	#$ff
     59  f5a2		       86 d1		      stx	BuildKernelRST
     60  f5a4				   .set_else
     61  f5a4		       a2 00		      ldx	#$00
     62  f5a6		       60		      rts
     63  f5a7
     64  f5a7							; Y=Gemini Sprite
     65  f5a7							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     66  f5a7							; processor flag Z is TRUE if this is RST.
     67  f5a7				   KernelB_GenPhp subroutine
     68  f5a7		       c0 60		      cpy	#G01
     69  f5a9		       f0 05		      beq	.start
     70  f5ab		       c0 66		      cpy	#G11
     71  f5ad		       f0 01		      beq	.start
     72  f5af		       60		      rts
     73  f5b0							; Current Gemini = $00
     74  f5b0				   .start
     75  f5b0		       a6 d1		      ldx	BuildKernelRST
     76  f5b2		       e0 aa		      cpx	#SENTINEL
     77  f5b4		       d0 04		      bne	.set_else
     78  f5b6							; We have found the first (and only) RST on this line, set the marker var
     79  f5b6		       84 d1		      sty	BuildKernelRST
     80  f5b8
     81  f5b8							; Set Z flag
     82  f5b8		       a2 00		      ldx	#$00
     83  f5ba				   .set_else
     84  f5ba		       60		      rts
     85  f5bb
     86  f5bb							; Allocates build-time registers for a new Gemini sprite value.
     87  f5bb							; register Y = the storage opcode to write to the result
     88  f5bb							;
     89  f5bb							; NibbleGrp0, NibbleX, NibbleY are compared in that order.
     90  f5bb							; NibbleX, NibbleY are upgraded if not set.
     91  f5bb							; Y=Gemini Sprite
     92  f5bb				   KernelB_UpdateRegs
     93  f5bb				   KernelA_UpdateRegs subroutine
     94  f5bb
     95  f5bb							; If equal to GRP0, return nop
     96  f5bb							; FIXME GRP0 might not always be up to date (should update each entry?)
     97  f5bb							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     98  f5bb		       c4 d0		      cpy	RamKernelGrp0
     99  f5bd		       d0 03		      bne	.op_start
    100  f5bf							; TODO if this is stx + NOP value, then register doesn't have to change as
    101  f5bf							; often in GEM1ASWITCH
    102  f5bf		       a0 04		      ldy	#BC_NOP
    103  f5c1		       60		      rts
    104  f5c2
    105  f5c2				   .op_start
    106  f5c2		       c4 cc		      cpy	NibbleX
    107  f5c4		       d0 03		      bne	.op_else
    108  f5c6		       a0 86		      ldy	#BC_STX
    109  f5c8		       60		      rts
    110  f5c9				   .op_else
    111  f5c9		       c4 cd		      cpy	NibbleY
    112  f5cb		       d0 03		      bne	.op_end
    113  f5cd		       a0 84		      ldy	#BC_STY
    114  f5cf		       60		      rts
    115  f5d0				   .op_end
    116  f5d0
    117  f5d0				   .set_start
    118  f5d0		       a6 cc		      ldx	NibbleX
    119  f5d2		       e0 aa		      cpx	#SENTINEL
    120  f5d4		       d0 13		      bne	.set_else
    121  f5d6
    122  f5d6							; KA Missile opcode determination
    123  f5d6				   DBG_CHECK_MISSILE_OPCODE
    124  f5d6		       84 cc		      sty	NibbleX
    125  f5d8		       66 cc		      ror	NibbleX	; D0
    126  f5da		       66 cc		      ror	NibbleX	; D1
    127  f5dc		       a2 86		      ldx	#BC_STX
    128  f5de		       b0 02		      bcs	[. + 4]
    129  f5e0		       a2 84		      ldx	#BC_STY
    130  f5e2		       86 c9		      stx	NibbleMissile
    131  f5e4
    132  f5e4							; Set the X operator
    133  f5e4		       84 cc		      sty	NibbleX
    134  f5e6		       a0 86		      ldy	#BC_STX
    135  f5e8		       60		      rts
    136  f5e9				   .set_else
    137  f5e9		       a6 cd		      ldx	NibbleY
    138  f5eb		       e0 aa		      cpx	#SENTINEL
    139  f5ed		       d0 05		      bne	.set_end
    140  f5ef		       84 cd		      sty	NibbleY
    141  f5f1		       a0 84		      ldy	#BC_STY
    142  f5f3		       60		      rts
    143  f5f4				   .set_end
    144  f5f4							; Failed all
      0  f5f4					      ASSERT_RUNTIME	"0"
      1  f5f4				   .COND      SET	"0"
 ASSERT: breakif { pc== $f5f4  && !(  0  ) }
      2  f5f4					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    146  f5f4		       60		      rts
    147  f5f5
    148  f5f5							; Populate the Nibble kernel values for the current row.
    149  f5f5				   GameNibblePopulate subroutine
    150  f5f5		       ad 00 f1 	      lda	$f100
    151  f5f8		       85 80		      sta	DebugKernelID
    152  f5fa
    153  f5fa		       ad 18 ff 	      lda	shard_map
    154  f5fd		       a0 01		      ldy	#1	; gemini counter, starting at 1
    155  f5ff				   gemini_builder subroutine
    156  f5ff		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    157  f601		       d0 00		      bne	.no_vd0
    158  f603				   .no_vd0
    159  f603
    160  f603							; Nibble Kernel A
      0  f603					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00e6 ????				      seg.U	ignoreme
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini1
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini1Reg
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini2
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini2Reg
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini3
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini3Reg
    168 U00e6 ????						; NIBBLE_VAR NibbleGemini4
    169 U00e6 ????						; NIBBLE_VAR NibbleMissile
    170 U00e6 ????						; NIBBLE_VAR NibbleVdel1
      0 U00e6 ????				      NIBBLE_VAR	NibbleGrp0
      0 U00e6 ????				      NIBBLE_VAR	NibbleX
      0 U00e6 ????				      NIBBLE_VAR	NibbleY
    174 U00e6 ????
    175 U00e6 ????	       a0 aa		      ldy	#SENTINEL	; sentinel
    176 U00e8 ????	       84 d1		      sty	BuildKernelRST
      0 U00ea ????				      NIBBLE_VAR_STY	NibbleX
      0 U00ea ????				      NIBBLE_VAR_STY	NibbleY
    179 U00ea ????
    180 U00ea ????						; Gemini 1A
    181 U00ea ????			   .K_1A
    182 U00ea ????	       a4 ea		      ldy	[DO_GEMS_A + 0]
    183 U00ec ????	       20 95 f5 	      jsr	KernelA_GenReset
      0 U00ef ????				      NIBBLE_IF	eq
    185 U00ef ????						; Special: Encoding RST0
    186 U00ef ????						; Rewrite lda RamKernelPF1 to be #immediate
    187 U00ef ????	       a0 a9		      ldy	#BC_LDA_IMM
    188 U00f1 ????	       8c 15 f0 	      sty	[KernelA_B - $100]
    189 U00f4 ????	       a0 a0		      ldy	#%10100000
    190 U00f6 ????	       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
    191 U00f9 ????						; Store 1A in GRP0
    192 U00f9 ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
      0 U00fb ????				      NIBBLE_VAR_STY	NibbleGrp0
    194 U00fb ????	       84 d0		      sty	RamKernelGrp0
    195 U00fd ????						; Gemini 1A is RESPx
    196 U00fd ????	       a0 11		      ldy	#EMERALD_SP_RESET
    197 U00ff ????	       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
    198 U0102 ????						; Turn 3-cycle NOP into 4-cycle
    199 U0102 ????	       a0 14		      ldy	#$14	; TODO what is this
    200 U0104 ????	       8c 19 f0 	      sty	[KernelA_D - $100]
      0 U0107 ????				      NIBBLE_ELSE
    202 U0107 ????						; Store 0A in GRP0
    203 U0107 ????	       a4 ea		      ldy	[DO_GEMS_A + 0]
      0 U0109 ????				      NIBBLE_VAR_STY	NibbleGrp0
    205 U0109 ????	       84 d0		      sty	RamKernelGrp0
    206 U010b ????
    207 U010b ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
    208 U010d ????	       20 95 f5 	      jsr	KernelA_GenReset
      0 U0110 ????				      NIBBLE_IF	eq
    210 U0110 ????						; GEM1ASWITCH
      0 U0110 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 0], #BC_STX
      0 U0110 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 1], #RESP1	; RESET
      0 U0110 ????				      NIBBLE_ELSE
    214 U0110 ????						; Calculate the 1A value
    215 U0110 ????	       ac a4 fa 	      ldy	SHARD_LUT_RF1
    216 U0113 ????	       c0 01		      cpy	#1
    217 U0115 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    218 U0117 ????	       a0 11		      ldy	#RESP1
    219 U0119 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    220 U011a ????	       a0 1c		      ldy	#GRP1
      0 U011c ????				      NIBBLE_VAR_STY	NibbleGemini1Reg
    222 U011c ????
    223 U011c ????						; Set opcode
    224 U011c ????	       ae a4 fa 	      ldx	SHARD_LUT_RF1
    225 U011f ????	       e0 01		      cpx	#1
    226 U0121 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    227 U0123 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    228 U0125 ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
    229 U0127 ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
      0 U012a ????				      NIBBLE_VAR_STY	NibbleGemini1
    231 U012a ????
      0 U012a ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 0], NibbleGemini1
      0 U012a ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 1], NibbleGemini1Reg
      0 U012a ????				      NIBBLE_END_IF
      0 U012a ????				      NIBBLE_END_IF
    236 U012a ????
    237 U012a ????						; Stop preserving GRP0
    238 U012a ????	       a0 aa		      ldy	#SENTINEL
    239 U012c ????	       84 d0		      sty	RamKernelGrp0
    240 U012e ????
    241 U012e ????						; NibbleX, NibbleY are upgraded if not set
    242 U012e ????						; Gemini 2A
    243 U012e ????			   .K_2A
    244 U012e ????	       a4 ec		      ldy	[DO_GEMS_A + 2]
    245 U0130 ????	       20 95 f5 	      jsr	KernelA_GenReset
      0 U0133 ????				      NIBBLE_IF	eq
      0 U0133 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #NOP_REG	; NOP
      0 U0133 ????				      NIBBLE_WRITE_IMM	[KernelA_G_W + 1], #RESP1	; RESET
      0 U0133 ????				      NIBBLE_ELSE
    250 U0133 ????						; Set opcode
    251 U0133 ????	       a4 ec		      ldy	[DO_GEMS_A + 2]
    252 U0135 ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
      0 U0138 ????				      NIBBLE_VAR_STY	NibbleGemini2
    254 U0138 ????
    255 U0138 ????						; Set opcode target
    256 U0138 ????	       ac a4 fa 	      ldy	SHARD_LUT_RF1
    257 U013b ????	       c0 02		      cpy	#2
    258 U013d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    259 U013f ????	       a0 11		      ldy	#RESP1
    260 U0141 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    261 U0142 ????	       a0 1c		      ldy	#GRP1
      0 U0144 ????				      NIBBLE_VAR_STY	NibbleGemini2Reg
    263 U0144 ????
      0 U0144 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #RESP1
      0 U0144 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 0], NibbleGemini2
      0 U0144 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 1], NibbleGemini2Reg	; STX
      0 U0144 ????				      NIBBLE_END_IF
    268 U0144 ????
    269 U0144 ????						; Gemini 3A
    270 U0144 ????			   .K_3A
    271 U0144 ????	       a4 ed		      ldy	[DO_GEMS_A + 3]
    272 U0146 ????	       20 95 f5 	      jsr	KernelA_GenReset
      0 U0149 ????				      NIBBLE_IF	eq
      0 U0149 ????				      NIBBLE_WRITE_IMM	[KernelA_H_W + 1], #RESP1	; RESET
      0 U0149 ????				      NIBBLE_ELSE
    276 U0149 ????						; Set opcode
    277 U0149 ????	       a4 ed		      ldy	[DO_GEMS_A + 3]
    278 U014b ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
      0 U014e ????				      NIBBLE_VAR_STY	NibbleGemini3
    280 U014e ????
    281 U014e ????						; Set opcode target
    282 U014e ????	       ac a4 fa 	      ldy	SHARD_LUT_RF1
    283 U0151 ????	       c0 03		      cpy	#3
    284 U0153 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    285 U0155 ????	       a0 11		      ldy	#RESP1
    286 U0157 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    287 U0158 ????	       a0 1c		      ldy	#GRP1
      0 U015a ????				      NIBBLE_VAR_STY	NibbleGemini3Reg
    289 U015a ????
      0 U015a ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 0], NibbleGemini3
      0 U015a ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 1], NibbleGemini3Reg
      0 U015a ????				      NIBBLE_END_IF
      0 U015a ????				      NIBBLE_END_KERNEL
      1  f603					      seg	CodeBank3
    294  f603
      0  f603					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U015a ????				      seg.U	ignoreme
    296 U015a ????						; NIBBLE_VAR NibbleGemini1
    297 U015a ????						; NIBBLE_VAR NibbleGemini1Reg
    298 U015a ????						; NIBBLE_VAR NibbleGemini2
    299 U015a ????						; NIBBLE_VAR NibbleGemini2Reg
    300 U015a ????						; NIBBLE_VAR NibbleGemini3
    301 U015a ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U015a ????				      NIBBLE_VAR	NibbleGemini4
      0 U015a ????				      NIBBLE_VAR	NibbleMissile
      0 U015a ????				      NIBBLE_VAR	NibbleVdel1
      0 U015a ????				      NIBBLE_VAR	NibbleGrp0
      0 U015a ????				      NIBBLE_VAR	NibblePhp
    307 U015a ????
    308 U015a ????						; VD1 default
    309 U015a ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
      0 U015c ????				      NIBBLE_VAR_STY	NibbleVdel1
    311 U015c ????
    312 U015c ????						; Gemini 4A
    313 U015c ????	       ae a5 fa 	      ldx	SHARD_LUT_VD1
    314 U015f ????	       e0 04		      cpx	#4
      0 U0161 ????				      NIBBLE_IF	ne
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #BC_PHP
    319 U0161 ????
    320 U0161 ????						; Set PHP
    321 U0161 ????	       a0 26		      ldy	#VDELP1
      0 U0163 ????				      NIBBLE_VAR_STY	NibblePhp
    323 U0163 ????
    324 U0163 ????						; Update VDEL1
    325 U0163 ????	       a4 ee		      ldy	[DO_GEMS_A + 4]
      0 U0165 ????				      NIBBLE_VAR_STY	NibbleVdel1
      0 U0165 ????				      NIBBLE_ELSE
    328 U0165 ????	       a4 ee		      ldy	[DO_GEMS_A + 4]
    329 U0167 ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
      0 U016a ????				      NIBBLE_VAR_STY	NibbleGemini4
    331 U016a ????
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_PHP
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U016a ????				      NIBBLE_WRITE_VAR	[KernelA_K_W + 0], NibbleGemini4
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #EMERALD_SP
    336 U016a ????
    337 U016a ????						; Set PHP
    338 U016a ????	       a0 11		      ldy	#RESP1
      0 U016c ????				      NIBBLE_VAR_STY	NibblePhp
      0 U016c ????				      NIBBLE_END_IF
    341 U016c ????
    342 U016c ????						; Gemini 5A
    343 U016c ????						; TODO eventually...?
    344 U016c ????
    345 U016c ????						; Missile
    346 U016c ????	       a4 e8		      ldy	DO_MISS_A
    347 U016e ????						; FIXME Why doesn't this branch compile?
    348 U016e ????						; bne .+4
    349 U016e ????						; ldx #BC_NOP
    350 U016e ????						; stx NibbleMissile
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_F - $100], NibbleMissile
    352 U016e ????
    353 U016e ????						; VD1
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL1 - $100], NibbleVdel1
    355 U016e ????						; GRP0
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL0 - $100], NibbleGrp0
    357 U016e ????
      0 U016e ????				      NIBBLE_WRITE_IMM	NibblePs, #$ff
      0 U016e ????				      NIBBLE_END_KERNEL
      1  f603					      seg	CodeBank3
    360  f603
    361  f603							; Nibble Kernel B
      0  f603					      NIBBLE_START_KERNEL	gem_kernel_b_1, 40
      1 U016e ????				      seg.U	ignoreme
    363 U016e ????						; NIBBLE_VAR NibbleGemini1
    364 U016e ????						; NIBBLE_VAR NibbleGemini1Reg
      0 U016e ????				      NIBBLE_VAR	NibbleGemini2
    366 U016e ????						; NIBBLE_VAR NibbleGemini2Reg
      0 U016e ????				      NIBBLE_VAR	NibbleGemini3
    368 U016e ????						; NIBBLE_VAR NibbleGemini3Reg
    369 U016e ????						; NIBBLE_VAR NibbleGemini4
    370 U016e ????						; NIBBLE_VAR NibbleMissile
    371 U016e ????						; NIBBLE_VAR NibbleVdel1
      0 U016e ????				      NIBBLE_VAR	NibbleGrp0
    373 U016e ????
    374 U016e ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    375 U0170 ????	       86 cc		      stx	NibbleX
    376 U0172 ????	       86 cd		      stx	NibbleY
    377 U0174 ????	       86 d1		      stx	BuildKernelRST
    378 U0176 ????
    379 U0176 ????						; Php target default
    380 U0176 ????	       a0 11		      ldy	#RESP1
    381 U0178 ????	       84 ce		      sty	NibblePhp
    382 U017a ????
    383 U017a ????						; Gemini 0B
    384 U017a ????	       a4 f0		      ldy	[DO_GEMS_B + 0]
      0 U017c ????				      NIBBLE_VAR_STY	NibbleGrp0
    386 U017c ????	       84 d0		      sty	RamKernelGrp0
    387 U017e ????						; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    388 U017e ????
    389 U017e ????						; Gemini 1B
    390 U017e ????	       a4 f1		      ldy	[DO_GEMS_B + 1]
    391 U0180 ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
    392 U0183 ????	       84 c2		      sty	NibbleGemini1
    393 U0185 ????
    394 U0185 ????						; Gemini 2B
    395 U0185 ????	       a4 f2		      ldy	[DO_GEMS_B + 2]
    396 U0187 ????	       20 a7 f5 	      jsr	KernelB_GenPhp
      0 U018a ????				      NIBBLE_IF	eq
      0 U018a ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U018a ????			   .OFFSET    SET	3
      2 U018a ????			   .TARGET    SET	NibbleGemini3
      3 U018a ????	       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4 U018c ????	       20 bb f5 	      jsr	KernelB_UpdateRegs
      5 U018f ????	       84 c6		      sty	.TARGET
    399 U0191 ????
    400 U0191 ????						; Write to PHP in 2B
    401 U0191 ????	       a2 1c		      ldx	#EMERALD_SP
    402 U0193 ????	       86 ce		      stx	NibblePhp
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET	; 2B
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #BC_PHP
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 0], #BC_STA
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #PF1
      0 U0195 ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP	; 3B
    410 U0195 ????
    411 U0195 ????						; Update Grp0
    412 U0195 ????	       a4 d1		      ldy	BuildKernelRST
    413 U0197 ????	       84 d0		      sty	RamKernelGrp0
      0 U0199 ????				      NIBBLE_ELSE
    415 U0199 ????						; Gemini 3B
    416 U0199 ????	       a4 f3		      ldy	[DO_GEMS_B + 3]
    417 U019b ????	       20 a7 f5 	      jsr	KernelB_GenPhp
      0 U019e ????				      NIBBLE_IF	eq
    419 U019e ????						; Write to PHP in 3B
      0 U019e ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U019e ????			   .OFFSET    SET	2
      2 U019e ????			   .TARGET    SET	NibbleGemini2
      3 U019e ????	       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01a0 ????	       20 bb f5 	      jsr	KernelB_UpdateRegs
      5 U01a3 ????	       84 c4		      sty	.TARGET
    421 U01a5 ????	       a2 1c		      ldx	#EMERALD_SP
    422 U01a7 ????	       86 ce		      stx	NibblePhp
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET
      0 U01a9 ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 1], NibbleGemini2
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 2], #EMERALD_SP	; 2B
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #BC_STA
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 2], #PF1
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #BC_PHP	; 3B
    430 U01a9 ????
    431 U01a9 ????						; Update Grp0
    432 U01a9 ????	       a4 d1		      ldy	BuildKernelRST
    433 U01ab ????	       84 d0		      sty	RamKernelGrp0
      0 U01ad ????				      NIBBLE_ELSE
    435 U01ad ????						; Update 2B
      0 U01ad ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U01ad ????			   .OFFSET    SET	2
      2 U01ad ????			   .TARGET    SET	NibbleGemini2
      3 U01ad ????	       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01af ????	       20 bb f5 	      jsr	KernelB_UpdateRegs
      5 U01b2 ????	       84 c4		      sty	.TARGET
      0 U01b4 ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 0], NibbleGemini2
      0 U01b4 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #EMERALD_SP
    439 U01b4 ????
    440 U01b4 ????						; Update 3B
      0 U01b4 ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U01b4 ????			   .OFFSET    SET	3
      2 U01b4 ????			   .TARGET    SET	NibbleGemini3
      3 U01b4 ????	       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01b6 ????	       20 bb f5 	      jsr	KernelB_UpdateRegs
      5 U01b9 ????	       84 c6		      sty	.TARGET
      0 U01bb ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U01bb ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP
      0 U01bb ????				      NIBBLE_END_IF
      0 U01bb ????				      NIBBLE_END_IF
    446 U01bb ????
      0 U01bb ????				      NIBBLE_END_KERNEL
      1  f603					      seg	CodeBank3
    448  f603
    449  f603							; Nibble Kernel B
      0  f603					      NIBBLE_START_KERNEL	gem_kernel_b_2, 40
      1 U01bb ????				      seg.U	ignoreme
    451 U01bb ????						; NIBBLE_VAR NibbleGemini1
    452 U01bb ????						; NIBBLE_VAR NibbleGemini1Reg
    453 U01bb ????						; NIBBLE_VAR NibbleGemini2
    454 U01bb ????						; NIBBLE_VAR NibbleGemini2Reg
    455 U01bb ????						; NIBBLE_VAR NibbleGemini3
    456 U01bb ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U01bb ????				      NIBBLE_VAR	NibbleGemini4
    458 U01bb ????						; NIBBLE_VAR NibbleMissile
    459 U01bb ????						; NIBBLE_VAR NibbleVdel1
      0 U01bb ????				      NIBBLE_VAR	NibbleGrp0
    461 U01bb ????
    462 U01bb ????						; Gemini 1B
      0 U01bb ????				      NIBBLE_WRITE_IMM	KernelB_D_W, NibbleGemini1
    464 U01bb ????
    465 U01bb ????						; Write out PHP flag comparison
    466 U01bb ????	       a4 d1		      ldy	BuildKernelRST
    467 U01bd ????	       c0 60		      cpy	#G01
      0 U01bf ????				      NIBBLE_IF	eq
      0 U01bf ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamFFByte
      0 U01bf ????				      NIBBLE_ELSE
      0 U01bf ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamPF1Value
      0 U01bf ????				      NIBBLE_END_IF
    473 U01bf ????
    474 U01bf ????						; Missile
    475 U01bf ????						; ldy DO_MISS_B
    476 U01bf ????						; NIBBLE_IF eq ; Disabled
    477 U01bf ????						; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    478 U01bf ????						; NIBBLE_ELSE
    479 U01bf ????						;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    480 U01bf ????						; NIBBLE_END_IF
    481 U01bf ????
    482 U01bf ????						; Gemini 4B
    483 U01bf ????	       a4 f4		      ldy	[DO_GEMS_B + 4]
    484 U01c1 ????	       20 bb f5 	      jsr	KernelA_UpdateRegs
    485 U01c4 ????	       84 c8		      sty	NibbleGemini4
      0 U01c6 ????				      NIBBLE_WRITE_VAR	KernelB_J_W, NibbleGemini4
    487 U01c6 ????
    488 U01c6 ????						; TODO if no PHP, rewrite previous section:
    489 U01c6 ????						; NIBBLE_IF cs
    490 U01c6 ????						;     ; Write to PHP in reset command
    491 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    492 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    493 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    494 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    495 U01c6 ????						; NIBBLE_END_IF
    496 U01c6 ????
    497 U01c6 ????						; Make adjustments for sprites.
    498 U01c6 ????	       66 cb		      ror	NibbleGrp0
    499 U01c8 ????	       66 cc		      ror	NibbleX
    500 U01ca ????	       66 cd		      ror	NibbleY
    501 U01cc ????
    502 U01cc ????						; ; VD1
    503 U01cc ????						; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    504 U01cc ????						; GRP0
      0 U01cc ????				      NIBBLE_WRITE_VAR	[KernelB_VDEL0 - $100], NibbleGrp0
    506 U01cc ????
      0 U01cc ????				      NIBBLE_WRITE_IMM	NibblePs, #$00
    508 U01cc ????
      0 U01cc ????				      NIBBLE_END_KERNEL
      1  f603					      seg	CodeBank3
    510  f603
    511  f603							; TODO do this for all rows
    512  f603				   DBG_NIBBLE_BUILD subroutine
    513  f603		       ae 00 f1 	      ldx	$f100
    514  f606		       e0 0a		      cpx	#$a
    515  f608		       f0 03		      beq	[. + 5]
    516  f60a		       4c f7 f6 	      jmp	.kernel_b
    517  f60d				   .kernel_a
      0  f60d					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f60d		       a9 00		      lda	#0
      2  f60f
      3  f60f
      4  f60f
      5  f60f		       a0 aa		      ldy	#SENTINEL
      6  f611		       84 d1		      sty	BuildKernelRST
      7  f613		       84 cc		      sty	NibbleX
      8  f615		       84 cd		      sty	NibbleY
      9  f617
     10  f617				   .K_1A
     11  f617		       a4 ea		      ldy	[DO_GEMS_A + 0]
     12  f619		       20 95 f5 	      jsr	KernelA_GenReset
     13  f61c				   .if_1
     14  f61c		       d0 20		      bne	.else_1
     15  f61e		       38		      sec
     16  f61f		       2a		      rol
     17  f620
     18  f620
     19  f620		       a0 a9		      ldy	#BC_LDA_IMM
     20  f622		       8c 15 f0 	      sty	[KernelA_B - $100]
     21  f625		       a0 a0		      ldy	#%10100000
     22  f627		       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
     23  f62a
     24  f62a		       a4 eb		      ldy	[DO_GEMS_A + 1]
     25  f62c		       84 cb		      sty	NibbleGrp0
     26  f62e		       84 d0		      sty	RamKernelGrp0
     27  f630
     28  f630		       a0 11		      ldy	#EMERALD_SP_RESET
     29  f632		       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
     30  f635
     31  f635		       a0 14		      ldy	#$14
     32  f637		       8c 19 f0 	      sty	[KernelA_D - $100]
     33  f63a		       2a		      rol
     34  f63b		       4c 72 f6 	      jmp	.endif_1
     35  f63e
     36  f63e				   .else_1
     37  f63e		       18		      clc
     38  f63f		       2a		      rol
     39  f640
     40  f640		       a4 ea		      ldy	[DO_GEMS_A + 0]
     41  f642		       84 cb		      sty	NibbleGrp0
     42  f644		       84 d0		      sty	RamKernelGrp0
     43  f646		       a4 eb		      ldy	[DO_GEMS_A + 1]
     44  f648		       20 95 f5 	      jsr	KernelA_GenReset
     45  f64b				   .if_2
     46  f64b		       d0 05		      bne	.else_2
     47  f64d		       38		      sec
     48  f64e		       2a		      rol
     49  f64f
     50  f64f		       4c 72 f6 	      jmp	.endif_2
     51  f652
     52  f652				   .else_2
     53  f652		       18		      clc
     54  f653		       2a		      rol
     55  f654
     56  f654		       ac a4 fa 	      ldy	SHARD_LUT_RF1
     57  f657		       c0 01		      cpy	#1
     58  f659		       d0 03		      .byte.b	$D0, #3
     59  f65b		       a0 11		      ldy	#RESP1
     60  f65d		       2c		      .byte.b	$2C
     61  f65e		       a0 1c		      ldy	#GRP1
     62  f660		       84 c3		      sty	NibbleGemini1Reg
     63  f662
     64  f662		       ae a4 fa 	      ldx	SHARD_LUT_RF1
     65  f665		       e0 01		      cpx	#1
     66  f667		       a0 86		      ldy	#BC_STX
     67  f669		       f0 05		      .byte.b	$F0, #5
     68  f66b		       a4 eb		      ldy	[DO_GEMS_A + 1]
     69  f66d		       20 bb f5 	      jsr	KernelA_UpdateRegs
     70  f670		       84 c2		      sty	NibbleGemini1
     71  f672
     72  f672
     73  f672				   .endif_2
     74  f672
     75  f672
     76  f672				   .endif_1
     77  f672
     78  f672		       a0 aa		      ldy	#SENTINEL
     79  f674		       84 d0		      sty	RamKernelGrp0
     80  f676
     81  f676
     82  f676				   .K_2A
     83  f676		       a4 ec		      ldy	[DO_GEMS_A + 2]
     84  f678		       20 95 f5 	      jsr	KernelA_GenReset
     85  f67b				   .if_3
     86  f67b		       d0 05		      bne	.else_3
     87  f67d		       38		      sec
     88  f67e		       2a		      rol
     89  f67f		       4c 99 f6 	      jmp	.endif_3
     90  f682
     91  f682				   .else_3
     92  f682		       18		      clc
     93  f683		       2a		      rol
     94  f684
     95  f684		       a4 ec		      ldy	[DO_GEMS_A + 2]
     96  f686		       20 bb f5 	      jsr	KernelA_UpdateRegs
     97  f689		       84 c4		      sty	NibbleGemini2
     98  f68b
     99  f68b		       ac a4 fa 	      ldy	SHARD_LUT_RF1
    100  f68e		       c0 02		      cpy	#2
    101  f690		       d0 03		      .byte.b	$D0, #3
    102  f692		       a0 11		      ldy	#RESP1
    103  f694		       2c		      .byte.b	$2C
    104  f695		       a0 1c		      ldy	#GRP1
    105  f697		       84 c5		      sty	NibbleGemini2Reg
    106  f699
    107  f699
    108  f699				   .endif_3
    109  f699
    110  f699				   .K_3A
    111  f699		       a4 ed		      ldy	[DO_GEMS_A + 3]
    112  f69b		       20 95 f5 	      jsr	KernelA_GenReset
    113  f69e				   .if_4
    114  f69e		       d0 05		      bne	.else_4
    115  f6a0		       38		      sec
    116  f6a1		       2a		      rol
    117  f6a2		       4c bc f6 	      jmp	.endif_4
    118  f6a5
    119  f6a5				   .else_4
    120  f6a5		       18		      clc
    121  f6a6		       2a		      rol
    122  f6a7
    123  f6a7		       a4 ed		      ldy	[DO_GEMS_A + 3]
    124  f6a9		       20 bb f5 	      jsr	KernelA_UpdateRegs
    125  f6ac		       84 c6		      sty	NibbleGemini3
    126  f6ae
    127  f6ae		       ac a4 fa 	      ldy	SHARD_LUT_RF1
    128  f6b1		       c0 03		      cpy	#3
    129  f6b3		       d0 03		      .byte.b	$D0, #3
    130  f6b5		       a0 11		      ldy	#RESP1
    131  f6b7		       2c		      .byte.b	$2C
    132  f6b8		       a0 1c		      ldy	#GRP1
    133  f6ba		       84 c7		      sty	NibbleGemini3Reg
    134  f6bc
    135  f6bc
    136  f6bc				   .endif_4
    137  f6bc
    138  f6bc		       2a		      rol
    139  f6bd		       2a		      rol
    140  f6be		       2a		      rol
    141  f6bf		       2a		      rol
    519  f6c0		       85 c0		      sta	NibbleVar1
      0  f6c2					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f6c2		       a9 00		      lda	#0
      2  f6c4
      3  f6c4
      4  f6c4
      5  f6c4
      6  f6c4
      7  f6c4
      8  f6c4
      9  f6c4		       a4 eb		      ldy	[DO_GEMS_A + 1]
     10  f6c6		       84 ca		      sty	NibbleVdel1
     11  f6c8
     12  f6c8		       ae a5 fa 	      ldx	SHARD_LUT_VD1
     13  f6cb		       e0 04		      cpx	#4
     14  f6cd				   .if_1
     15  f6cd		       f0 0d		      beq	.else_1
     16  f6cf		       38		      sec
     17  f6d0		       2a		      rol
     18  f6d1
     19  f6d1		       a0 26		      ldy	#VDELP1
     20  f6d3		       84 ce		      sty	NibblePhp
     21  f6d5
     22  f6d5		       a4 ee		      ldy	[DO_GEMS_A + 4]
     23  f6d7		       84 ca		      sty	NibbleVdel1
     24  f6d9		       4c e9 f6 	      jmp	.endif_1
     25  f6dc
     26  f6dc				   .else_1
     27  f6dc		       18		      clc
     28  f6dd		       2a		      rol
     29  f6de		       a4 ee		      ldy	[DO_GEMS_A + 4]
     30  f6e0		       20 bb f5 	      jsr	KernelA_UpdateRegs
     31  f6e3		       84 c8		      sty	NibbleGemini4
     32  f6e5
     33  f6e5		       a0 11		      ldy	#RESP1
     34  f6e7		       84 ce		      sty	NibblePhp
     35  f6e9
     36  f6e9
     37  f6e9				   .endif_1
     38  f6e9
     39  f6e9
     40  f6e9
     41  f6e9		       a4 e8		      ldy	DO_MISS_A
     42  f6eb
     43  f6eb
     44  f6eb
     45  f6eb
     46  f6eb
     47  f6eb
     48  f6eb
     49  f6eb		       2a		      rol
     50  f6ec		       2a		      rol
     51  f6ed		       2a		      rol
     52  f6ee		       2a		      rol
     53  f6ef		       2a		      rol
     54  f6f0		       2a		      rol
     55  f6f1		       2a		      rol
    521  f6f2		       85 c1		      sta	NibbleVar2
    522  f6f4		       4c 88 f7 	      jmp	.next
    523  f6f7				   .kernel_b
      0  f6f7					      NIBBLE_gem_kernel_b_1_BUILD		; TODO can this be implied
      1  f6f7		       a9 00		      lda	#0
      2  f6f9
      3  f6f9
      4  f6f9
      5  f6f9
      6  f6f9
      7  f6f9
      8  f6f9
      9  f6f9		       a2 aa		      ldx	#SENTINEL
     10  f6fb		       86 cc		      stx	NibbleX
     11  f6fd		       86 cd		      stx	NibbleY
     12  f6ff		       86 d1		      stx	BuildKernelRST
     13  f701
     14  f701		       a0 11		      ldy	#RESP1
     15  f703		       84 ce		      sty	NibblePhp
     16  f705
     17  f705		       a4 f0		      ldy	[DO_GEMS_B + 0]
     18  f707		       84 cb		      sty	NibbleGrp0
     19  f709		       84 d0		      sty	RamKernelGrp0
     20  f70b
     21  f70b
     22  f70b		       a4 f1		      ldy	[DO_GEMS_B + 1]
     23  f70d		       20 bb f5 	      jsr	KernelA_UpdateRegs
     24  f710		       84 c2		      sty	NibbleGemini1
     25  f712
     26  f712		       a4 f2		      ldy	[DO_GEMS_B + 2]
     27  f714		       20 a7 f5 	      jsr	KernelB_GenPhp
     28  f717				   .if_1
     29  f717		       d0 15		      bne	.else_1
     30  f719		       38		      sec
     31  f71a		       2a		      rol
      0  f71b					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f71b				   .OFFSET    SET	3
      2  f71b				   .TARGET    SET	NibbleGemini3
      3  f71b		       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4  f71d		       20 bb f5 	      jsr	KernelB_UpdateRegs
      5  f720		       84 c6		      sty	.TARGET
     33  f722
     34  f722		       a2 1c		      ldx	#EMERALD_SP
     35  f724		       86 ce		      stx	NibblePhp
     36  f726
     37  f726		       a4 d1		      ldy	BuildKernelRST
     38  f728		       84 d0		      sty	RamKernelGrp0
     39  f72a		       2a		      rol
     40  f72b		       4c 5b f7 	      jmp	.endif_1
     41  f72e
     42  f72e				   .else_1
     43  f72e		       18		      clc
     44  f72f		       2a		      rol
     45  f730
     46  f730		       a4 f3		      ldy	[DO_GEMS_B + 3]
     47  f732		       20 a7 f5 	      jsr	KernelB_GenPhp
     48  f735				   .if_2
     49  f735		       d0 14		      bne	.else_2
     50  f737		       38		      sec
     51  f738		       2a		      rol
     52  f739
      0  f739					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f739				   .OFFSET    SET	2
      2  f739				   .TARGET    SET	NibbleGemini2
      3  f739		       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4  f73b		       20 bb f5 	      jsr	KernelB_UpdateRegs
      5  f73e		       84 c4		      sty	.TARGET
     54  f740		       a2 1c		      ldx	#EMERALD_SP
     55  f742		       86 ce		      stx	NibblePhp
     56  f744
     57  f744
     58  f744		       a4 d1		      ldy	BuildKernelRST
     59  f746		       84 d0		      sty	RamKernelGrp0
     60  f748		       4c 5b f7 	      jmp	.endif_2
     61  f74b
     62  f74b				   .else_2
     63  f74b		       18		      clc
     64  f74c		       2a		      rol
     65  f74d
      0  f74d					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f74d				   .OFFSET    SET	2
      2  f74d				   .TARGET    SET	NibbleGemini2
      3  f74d		       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4  f74f		       20 bb f5 	      jsr	KernelB_UpdateRegs
      5  f752		       84 c4		      sty	.TARGET
     67  f754
      0  f754					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f754				   .OFFSET    SET	3
      2  f754				   .TARGET    SET	NibbleGemini3
      3  f754		       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4  f756		       20 bb f5 	      jsr	KernelB_UpdateRegs
      5  f759		       84 c6		      sty	.TARGET
     69  f75b
     70  f75b
     71  f75b				   .endif_2
     72  f75b
     73  f75b
     74  f75b				   .endif_1
     75  f75b
     76  f75b		       2a		      rol
     77  f75c		       2a		      rol
     78  f75d		       2a		      rol
     79  f75e		       2a		      rol
     80  f75f		       2a		      rol
     81  f760		       2a		      rol
    525  f761		       85 c0		      sta	NibbleVar1
      0  f763					      NIBBLE_gem_kernel_b_2_BUILD		; TODO can this be implied
      1  f763		       a9 00		      lda	#0
      2  f765
      3  f765
      4  f765
      5  f765
      6  f765
      7  f765
      8  f765
      9  f765
     10  f765
     11  f765
     12  f765		       a4 d1		      ldy	BuildKernelRST
     13  f767		       c0 60		      cpy	#G01
     14  f769				   .if_1
     15  f769		       d0 05		      bne	.else_1
     16  f76b		       38		      sec
     17  f76c		       2a		      rol
     18  f76d		       4c 72 f7 	      jmp	.endif_1
     19  f770
     20  f770				   .else_1
     21  f770		       18		      clc
     22  f771		       2a		      rol
     23  f772
     24  f772
     25  f772				   .endif_1
     26  f772
     27  f772
     28  f772
     29  f772
     30  f772
     31  f772
     32  f772
     33  f772
     34  f772		       a4 f4		      ldy	[DO_GEMS_B + 4]
     35  f774		       20 bb f5 	      jsr	KernelA_UpdateRegs
     36  f777		       84 c8		      sty	NibbleGemini4
     37  f779
     38  f779
     39  f779
     40  f779
     41  f779
     42  f779
     43  f779
     44  f779
     45  f779
     46  f779		       66 cb		      ror	NibbleGrp0
     47  f77b		       66 cc		      ror	NibbleX
     48  f77d		       66 cd		      ror	NibbleY
     49  f77f
     50  f77f
     51  f77f
     52  f77f
     53  f77f		       2a		      rol
     54  f780		       2a		      rol
     55  f781		       2a		      rol
     56  f782		       2a		      rol
     57  f783		       2a		      rol
     58  f784		       2a		      rol
     59  f785		       2a		      rol
    527  f786		       85 c1		      sta	NibbleVar2
    528  f788				   .next
    529  f788
    530  f788				   NibbleZeroLoop subroutine
    531  f788							; Copy out
    532  f788		       a2 00		      ldx	#00
    533  f78a		       a0 00		      ldy	#$00
    534  f78c				   .loop
    535  f78c		       b9 c0 00 	      lda	NIBBLE_VAR_START,y
    536  f78f		       99 80 f0 	      sta	CBSRAM_NIBBLE_WRITE,y
    537  f792		       96 c0		      stx	NIBBLE_VAR_START,y
    538  f794		       c8		      iny
    539  f795		       c0 10		      cpy	#16
    540  f797		       d0 f3		      bne	.loop
    541  f799
    542  f799				   NibbleExitLoop subroutine
    543  f799							; Copy in
    544  f799		       a0 00		      ldy	#$00
    545  f79b				   .loop
    546  f79b		       b9 80 f1 	      lda	CBSRAM_NIBBLE_READ,y
    547  f79e		       99 c0 00 	      sta	NIBBLE_VAR_START,y
    548  f7a1		       c8		      iny
    549  f7a2		       c0 10		      cpy	#16
    550  f7a4		       d0 f5		      bne	.loop
    551  f7a6
    552  f7a6		       60		      rts
    553  f7a7
    554  f7a7							; TODO move this into the row kernel
    555  f7a7				   GameNibbleRun subroutine
    556  f7a7		       ae 00 f1 	      ldx	$f100
    557  f7aa		       e0 0a		      cpx	#$a
    558  f7ac		       f0 03		      beq	[. + 5]
    559  f7ae		       4c 6d f8 	      jmp	.kernel_b
    560  f7b1				   .kernel_a
    561  f7b1		       a5 c0		      lda	NibbleVar1
      0  f7b3					      NIBBLE_gem_kernel_a_1
      1  f7b3		       0a		      asl
      2  f7b4		       90 0d		      bcc	.else_1
      3  f7b6
      4  f7b6				   .if_1
      5  f7b6		       2a		      rol
      0  f7b7					      sleep	17
      1  f7b7				   .CYCLES    SET	17
      2  f7b7
      3  f7b7				  -	      IF	.CYCLES < 2
      4  f7b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7b7				  -	      ERR
      6  f7b7					      ENDIF
      7  f7b7
      8  f7b7					      IF	.CYCLES & 1
      9  f7b7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7b7		       04 00		      nop	0
     11  f7b9				  -	      ELSE
     12  f7b9				  -	      bit	VSYNC
     13  f7b9					      ENDIF
     14  f7b9				   .CYCLES    SET	.CYCLES - 3
     15  f7b9					      ENDIF
     16  f7b9
     17  f7b9					      REPEAT	.CYCLES / 2
     18  f7b9		       ea		      nop
     17  f7b9					      REPEND
     18  f7ba		       ea		      nop
     17  f7ba					      REPEND
     18  f7bb		       ea		      nop
     17  f7bb					      REPEND
     18  f7bc		       ea		      nop
     17  f7bc					      REPEND
     18  f7bd		       ea		      nop
     17  f7bd					      REPEND
     18  f7be		       ea		      nop
     17  f7be					      REPEND
     18  f7bf		       ea		      nop
     19  f7c0					      REPEND
      7  f7c0
      8  f7c0
      9  f7c0		       4c e0 f7 	      jmp	.endif_1
     10  f7c3				   .else_1
     11  f7c3		       0a		      asl
     12  f7c4		       90 0e		      bcc	.else_2
     13  f7c6
     14  f7c6				   .if_2
     15  f7c6		       a2 86		      ldx	#[ #BC_STX ]
     16  f7c8		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     17  f7cb		       a2 11		      ldx	#[ #RESP1 ]
     18  f7cd		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  f7d0					      sleep	2
      1  f7d0				   .CYCLES    SET	2
      2  f7d0
      3  f7d0				  -	      IF	.CYCLES < 2
      4  f7d0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7d0				  -	      ERR
      6  f7d0					      ENDIF
      7  f7d0
      8  f7d0				  -	      IF	.CYCLES & 1
      9  f7d0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7d0				  -	      nop	0
     11  f7d0				  -	      ELSE
     12  f7d0				  -	      bit	VSYNC
     13  f7d0				  -	      ENDIF
     14  f7d0				  -.CYCLES    SET	.CYCLES - 3
     15  f7d0					      ENDIF
     16  f7d0
     17  f7d0					      REPEAT	.CYCLES / 2
     18  f7d0		       ea		      nop
     19  f7d1					      REPEND
     20  f7d1
     21  f7d1
     22  f7d1		       4c e0 f7 	      jmp	.endif_2
     23  f7d4				   .else_2
     24  f7d4		       a6 c2		      ldx.z	NibbleGemini1
     25  f7d6		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     26  f7d9		       a6 c3		      ldx.z	NibbleGemini1Reg
     27  f7db		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  f7de					      sleep	3
      1  f7de				   .CYCLES    SET	3
      2  f7de
      3  f7de				  -	      IF	.CYCLES < 2
      4  f7de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7de				  -	      ERR
      6  f7de					      ENDIF
      7  f7de
      8  f7de					      IF	.CYCLES & 1
      9  f7de					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7de		       04 00		      nop	0
     11  f7e0				  -	      ELSE
     12  f7e0				  -	      bit	VSYNC
     13  f7e0					      ENDIF
     14  f7e0				   .CYCLES    SET	.CYCLES - 3
     15  f7e0					      ENDIF
     16  f7e0
     17  f7e0				  -	      REPEAT	.CYCLES / 2
     18  f7e0				  -	      nop
     19  f7e0					      REPEND
     29  f7e0
     30  f7e0				   .endif_2
     31  f7e0
     32  f7e0				   .endif_1
     33  f7e0		       0a		      asl
     34  f7e1		       90 10		      bcc	.else_3
     35  f7e3
     36  f7e3				   .if_3
     37  f7e3		       a2 79		      ldx	#[ #NOP_REG ]
     38  f7e5		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     39  f7e8		       a2 11		      ldx	#[ #RESP1 ]
     40  f7ea		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  f7ed					      sleep	5
      1  f7ed				   .CYCLES    SET	5
      2  f7ed
      3  f7ed				  -	      IF	.CYCLES < 2
      4  f7ed				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7ed				  -	      ERR
      6  f7ed					      ENDIF
      7  f7ed
      8  f7ed					      IF	.CYCLES & 1
      9  f7ed					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7ed		       04 00		      nop	0
     11  f7ef				  -	      ELSE
     12  f7ef				  -	      bit	VSYNC
     13  f7ef					      ENDIF
     14  f7ef				   .CYCLES    SET	.CYCLES - 3
     15  f7ef					      ENDIF
     16  f7ef
     17  f7ef					      REPEAT	.CYCLES / 2
     18  f7ef		       ea		      nop
     19  f7f0					      REPEND
     42  f7f0
     43  f7f0
     44  f7f0		       4c 02 f8 	      jmp	.endif_3
     45  f7f3				   .else_3
     46  f7f3		       a2 11		      ldx	#[ #RESP1 ]
     47  f7f5		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     48  f7f8		       a6 c4		      ldx.z	NibbleGemini2
     49  f7fa		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     50  f7fd		       a6 c5		      ldx.z	NibbleGemini2Reg
     51  f7ff		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     52  f802
     53  f802				   .endif_3
     54  f802		       0a		      asl
     55  f803		       90 0b		      bcc	.else_4
     56  f805
     57  f805				   .if_4
     58  f805		       a2 11		      ldx	#[ #RESP1 ]
     59  f807		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  f80a					      sleep	5
      1  f80a				   .CYCLES    SET	5
      2  f80a
      3  f80a				  -	      IF	.CYCLES < 2
      4  f80a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f80a				  -	      ERR
      6  f80a					      ENDIF
      7  f80a
      8  f80a					      IF	.CYCLES & 1
      9  f80a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f80a		       04 00		      nop	0
     11  f80c				  -	      ELSE
     12  f80c				  -	      bit	VSYNC
     13  f80c					      ENDIF
     14  f80c				   .CYCLES    SET	.CYCLES - 3
     15  f80c					      ENDIF
     16  f80c
     17  f80c					      REPEAT	.CYCLES / 2
     18  f80c		       ea		      nop
     19  f80d					      REPEND
     61  f80d
     62  f80d
     63  f80d		       4c 1a f8 	      jmp	.endif_4
     64  f810				   .else_4
     65  f810		       a6 c6		      ldx.z	NibbleGemini3
     66  f812		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     67  f815		       a6 c7		      ldx.z	NibbleGemini3Reg
     68  f817		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     69  f81a
     70  f81a				   .endif_4
    563  f81a		       a5 c1		      lda	NibbleVar2
      0  f81c					      NIBBLE_gem_kernel_a_2
      1  f81c		       0a		      asl
      2  f81d		       90 1d		      bcc	.else_1
      3  f81f
      4  f81f				   .if_1
      5  f81f		       a2 85		      ldx	#[ #BC_STA ]
      6  f821		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  f824		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f826		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  f829		       a2 85		      ldx	#[ #BC_STA ]
     10  f82b		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  f82e		       a2 0e		      ldx	#[ #PF1 ]
     12  f830		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  f833		       a2 08		      ldx	#[ #BC_PHP ]
     14  f835		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f838					      sleep	2
      1  f838				   .CYCLES    SET	2
      2  f838
      3  f838				  -	      IF	.CYCLES < 2
      4  f838				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f838				  -	      ERR
      6  f838					      ENDIF
      7  f838
      8  f838				  -	      IF	.CYCLES & 1
      9  f838				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f838				  -	      nop	0
     11  f838				  -	      ELSE
     12  f838				  -	      bit	VSYNC
     13  f838				  -	      ENDIF
     14  f838				  -.CYCLES    SET	.CYCLES - 3
     15  f838					      ENDIF
     16  f838
     17  f838					      REPEAT	.CYCLES / 2
     18  f838		       ea		      nop
     19  f839					      REPEND
     16  f839
     17  f839
     18  f839		       4c 57 f8 	      jmp	.endif_1
     19  f83c				   .else_1
     20  f83c		       a2 08		      ldx	#[ #BC_PHP ]
     21  f83e		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  f841		       a2 85		      ldx	#[ #BC_STA ]
     23  f843		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  f846		       a2 0e		      ldx	#[ #PF1 ]
     25  f848		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  f84b		       a6 c8		      ldx.z	NibbleGemini4
     27  f84d		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  f850		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  f852		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f855					      sleep	3
      1  f855				   .CYCLES    SET	3
      2  f855
      3  f855				  -	      IF	.CYCLES < 2
      4  f855				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f855				  -	      ERR
      6  f855					      ENDIF
      7  f855
      8  f855					      IF	.CYCLES & 1
      9  f855					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f855		       04 00		      nop	0
     11  f857				  -	      ELSE
     12  f857				  -	      bit	VSYNC
     13  f857					      ENDIF
     14  f857				   .CYCLES    SET	.CYCLES - 3
     15  f857					      ENDIF
     16  f857
     17  f857				  -	      REPEAT	.CYCLES / 2
     18  f857				  -	      nop
     19  f857					      REPEND
     31  f857
     32  f857				   .endif_1
     33  f857		       a6 c9		      ldx.z	NibbleMissile
     34  f859		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  f85c		       a6 ca		      ldx.z	NibbleVdel1
     36  f85e		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  f861		       a6 cb		      ldx.z	NibbleGrp0
     38  f863		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     39  f866		       a2 ff		      ldx	#[ #$ff ]
     40  f868		       86 cf		      stx	[NibblePs + 0]
    565  f86a		       4c 0a f9 	      jmp	.next
    566  f86d				   .kernel_b
    567  f86d		       a5 c0		      lda	NibbleVar1
      0  f86f					      NIBBLE_gem_kernel_b_1
      1  f86f		       0a		      asl
      2  f870		       90 29		      bcc	.else_1
      3  f872
      4  f872				   .if_1
      5  f872		       a2 84		      ldx	#[ #BC_STY ]
      6  f874		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
      7  f877		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f879		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
      9  f87c		       a2 08		      ldx	#[ #BC_PHP ]
     10  f87e		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     11  f881		       a2 85		      ldx	#[ #BC_STA ]
     12  f883		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     13  f886		       a2 0e		      ldx	#[ #PF1 ]
     14  f888		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     15  f88b		       a6 c6		      ldx.z	NibbleGemini3
     16  f88d		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     17  f890		       a2 1c		      ldx	#[ #EMERALD_SP ]
     18  f892		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     19  f895		       2a		      rol
      0  f896					      sleep	3
      1  f896				   .CYCLES    SET	3
      2  f896
      3  f896				  -	      IF	.CYCLES < 2
      4  f896				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f896				  -	      ERR
      6  f896					      ENDIF
      7  f896
      8  f896					      IF	.CYCLES & 1
      9  f896					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f896		       04 00		      nop	0
     11  f898				  -	      ELSE
     12  f898				  -	      bit	VSYNC
     13  f898					      ENDIF
     14  f898				   .CYCLES    SET	.CYCLES - 3
     15  f898					      ENDIF
     16  f898
     17  f898				  -	      REPEAT	.CYCLES / 2
     18  f898				  -	      nop
     19  f898					      REPEND
     21  f898
     22  f898
     23  f898		       4c e2 f8 	      jmp	.endif_1
     24  f89b				   .else_1
     25  f89b		       0a		      asl
     26  f89c		       90 26		      bcc	.else_2
     27  f89e
     28  f89e				   .if_2
     29  f89e		       a2 84		      ldx	#[ #BC_STY ]
     30  f8a0		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     31  f8a3		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
     32  f8a5		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
     33  f8a8		       a6 c4		      ldx.z	NibbleGemini2
     34  f8aa		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     35  f8ad		       a2 1c		      ldx	#[ #EMERALD_SP ]
     36  f8af		       8e 20 f0 	      stx	[[KernelB_F_W + 2] + 0]
     37  f8b2		       a2 85		      ldx	#[ #BC_STA ]
     38  f8b4		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     39  f8b7		       a2 0e		      ldx	#[ #PF1 ]
     40  f8b9		       8e 22 f0 	      stx	[[KernelB_G_W + 2] + 0]
     41  f8bc		       a2 08		      ldx	#[ #BC_PHP ]
     42  f8be		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     43  f8c1
     44  f8c1
     45  f8c1		       4c e2 f8 	      jmp	.endif_2
     46  f8c4				   .else_2
     47  f8c4		       a6 c4		      ldx.z	NibbleGemini2
     48  f8c6		       8e 1e f0 	      stx	[[KernelB_F_W + 0] + 0]
     49  f8c9		       a2 1c		      ldx	#[ #EMERALD_SP ]
     50  f8cb		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     51  f8ce		       a6 c6		      ldx.z	NibbleGemini3
     52  f8d0		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     53  f8d3		       a2 1c		      ldx	#[ #EMERALD_SP ]
     54  f8d5		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
      0  f8d8					      sleep	19
      1  f8d8				   .CYCLES    SET	19
      2  f8d8
      3  f8d8				  -	      IF	.CYCLES < 2
      4  f8d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8d8				  -	      ERR
      6  f8d8					      ENDIF
      7  f8d8
      8  f8d8					      IF	.CYCLES & 1
      9  f8d8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8d8		       04 00		      nop	0
     11  f8da				  -	      ELSE
     12  f8da				  -	      bit	VSYNC
     13  f8da					      ENDIF
     14  f8da				   .CYCLES    SET	.CYCLES - 3
     15  f8da					      ENDIF
     16  f8da
     17  f8da					      REPEAT	.CYCLES / 2
     18  f8da		       ea		      nop
     17  f8da					      REPEND
     18  f8db		       ea		      nop
     17  f8db					      REPEND
     18  f8dc		       ea		      nop
     17  f8dc					      REPEND
     18  f8dd		       ea		      nop
     17  f8dd					      REPEND
     18  f8de		       ea		      nop
     17  f8de					      REPEND
     18  f8df		       ea		      nop
     17  f8df					      REPEND
     18  f8e0		       ea		      nop
     17  f8e0					      REPEND
     18  f8e1		       ea		      nop
     19  f8e2					      REPEND
     56  f8e2
     57  f8e2				   .endif_2
     58  f8e2
     59  f8e2				   .endif_1
    569  f8e2		       a5 c1		      lda	NibbleVar2
      0  f8e4					      NIBBLE_gem_kernel_b_2
      1  f8e4		       a2 c2		      ldx	#[ NibbleGemini1 ]
      2  f8e6		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f8e9		       0a		      asl
      4  f8ea		       90 09		      bcc	.else_1
      5  f8ec
      6  f8ec				   .if_1
      7  f8ec		       a2 e0		      ldx	#[ #RamFFByte ]
      8  f8ee		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f8f1					      sleep	2
      1  f8f1				   .CYCLES    SET	2
      2  f8f1
      3  f8f1				  -	      IF	.CYCLES < 2
      4  f8f1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8f1				  -	      ERR
      6  f8f1					      ENDIF
      7  f8f1
      8  f8f1				  -	      IF	.CYCLES & 1
      9  f8f1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8f1				  -	      nop	0
     11  f8f1				  -	      ELSE
     12  f8f1				  -	      bit	VSYNC
     13  f8f1				  -	      ENDIF
     14  f8f1				  -.CYCLES    SET	.CYCLES - 3
     15  f8f1					      ENDIF
     16  f8f1
     17  f8f1					      REPEAT	.CYCLES / 2
     18  f8f1		       ea		      nop
     19  f8f2					      REPEND
     10  f8f2
     11  f8f2
     12  f8f2		       4c fc f8 	      jmp	.endif_1
     13  f8f5				   .else_1
     14  f8f5		       a2 e2		      ldx	#[ #RamPF1Value ]
     15  f8f7		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f8fa					      sleep	3
      1  f8fa				   .CYCLES    SET	3
      2  f8fa
      3  f8fa				  -	      IF	.CYCLES < 2
      4  f8fa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8fa				  -	      ERR
      6  f8fa					      ENDIF
      7  f8fa
      8  f8fa					      IF	.CYCLES & 1
      9  f8fa					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8fa		       04 00		      nop	0
     11  f8fc				  -	      ELSE
     12  f8fc				  -	      bit	VSYNC
     13  f8fc					      ENDIF
     14  f8fc				   .CYCLES    SET	.CYCLES - 3
     15  f8fc					      ENDIF
     16  f8fc
     17  f8fc				  -	      REPEAT	.CYCLES / 2
     18  f8fc				  -	      nop
     19  f8fc					      REPEND
     17  f8fc
     18  f8fc				   .endif_1
     19  f8fc		       a6 c8		      ldx.z	NibbleGemini4
     20  f8fe		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     21  f901		       a6 cb		      ldx.z	NibbleGrp0
     22  f903		       8e 07 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     23  f906		       a2 00		      ldx	#[ #$00 ]
     24  f908		       86 cf		      stx	[NibblePs + 0]
    571  f90a				   .next
    572  f90a		       60		      rts
    573  f90b
    574  f90b
    575  f90b							; Populate Gemini array from level_for_game
    576  f90b
    577  f90b					      mac	gemini_populate
    578  f90b				   .TARGET    SET	{1}
    579  f90b					      ldx	#%00000011
    580  f90b							; lda RamNibbleTemp
    581  f90b					      .byte	$cb, $00	; axs #0
    582  f90b					      ldy	GEMINI_LOOKUP,x
    583  f90b					      sty	.TARGET
    584  f90b					      endm
    585  f90b
    586  f90b					      mac	gemini_populate_missile
    587  f90b				   .TARGET    SET	{1}
    588  f90b					      ldx	#%00000001
    589  f90b							; lda RamNibbleTemp
    590  f90b					      sax	.TARGET
    591  f90b					      endm
    592  f90b
    593  fa00		       00 00 00 00*	      align	256
    594  fa00
    595  fa00				   GeminiPopulate subroutine
    596  fa00		       a5 e7		      lda	level_for_game + 3
      0  fa02					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa02				   .TARGET    SET	DO_GEMS_B + 5
      2  fa02		       a2 03		      ldx	#%00000011
      3  fa04
      4  fa04		       cb 00		      .byte.b	$cb, $00
      5  fa06		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa09		       84 f5		      sty	.TARGET
    598  fa0b		       6a		      ror
    599  fa0c		       6a		      ror
      0  fa0d					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa0d				   .TARGET    SET	DO_GEMS_A + 5
      2  fa0d		       a2 03		      ldx	#%00000011
      3  fa0f
      4  fa0f		       cb 00		      .byte.b	$cb, $00
      5  fa11		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa14		       84 ef		      sty	.TARGET
    601  fa16		       6a		      ror
    602  fa17		       6a		      ror
      0  fa18					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa18				   .TARGET    SET	DO_GEMS_B + 4
      2  fa18		       a2 03		      ldx	#%00000011
      3  fa1a
      4  fa1a		       cb 00		      .byte.b	$cb, $00
      5  fa1c		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa1f		       84 f4		      sty	.TARGET
    604  fa21		       6a		      ror
    605  fa22		       6a		      ror
      0  fa23					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa23				   .TARGET    SET	DO_GEMS_A + 4
      2  fa23		       a2 03		      ldx	#%00000011
      3  fa25
      4  fa25		       cb 00		      .byte.b	$cb, $00
      5  fa27		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa2a		       84 ee		      sty	.TARGET
    607  fa2c							; ror
    608  fa2c							; ror
    609  fa2c
    610  fa2c		       a5 e6		      lda	level_for_game + 2
      0  fa2e					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa2e				   .TARGET    SET	DO_MISS_B
      2  fa2e		       a2 01		      ldx	#%00000001
      3  fa30
      4  fa30		       87 e9		      sax	.TARGET
    612  fa32		       6a		      ror
      0  fa33					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa33				   .TARGET    SET	DO_GEMS_B + 3
      2  fa33		       a2 03		      ldx	#%00000011
      3  fa35
      4  fa35		       cb 00		      .byte.b	$cb, $00
      5  fa37		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa3a		       84 f3		      sty	.TARGET
    614  fa3c		       6a		      ror
    615  fa3d		       6a		      ror
      0  fa3e					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa3e				   .TARGET    SET	DO_GEMS_A + 3
      2  fa3e		       a2 03		      ldx	#%00000011
      3  fa40
      4  fa40		       cb 00		      .byte.b	$cb, $00
      5  fa42		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa45		       84 ed		      sty	.TARGET
    617  fa47		       6a		      ror
    618  fa48		       6a		      ror
      0  fa49					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa49				   .TARGET    SET	DO_GEMS_B + 2
      2  fa49		       a2 03		      ldx	#%00000011
      3  fa4b
      4  fa4b		       cb 00		      .byte.b	$cb, $00
      5  fa4d		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa50		       84 f2		      sty	.TARGET
    620  fa52							; ror
    621  fa52							; ror
    622  fa52							; ror
    623  fa52
    624  fa52		       a5 e5		      lda	level_for_game + 1
    625  fa54		       2a		      rol
      0  fa55					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa55				   .TARGET    SET	DO_GEMS_A + 2
      2  fa55		       a2 03		      ldx	#%00000011
      3  fa57
      4  fa57		       cb 00		      .byte.b	$cb, $00
      5  fa59		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa5c		       84 ec		      sty	.TARGET
    627  fa5e
    628  fa5e		       a5 e5		      lda	level_for_game + 1
    629  fa60		       6a		      ror
      0  fa61					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa61				   .TARGET    SET	DO_MISS_A
      2  fa61		       a2 01		      ldx	#%00000001
      3  fa63
      4  fa63		       87 e8		      sax	.TARGET
    631  fa65		       6a		      ror
      0  fa66					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa66				   .TARGET    SET	DO_GEMS_B + 1
      2  fa66		       a2 03		      ldx	#%00000011
      3  fa68
      4  fa68		       cb 00		      .byte.b	$cb, $00
      5  fa6a		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa6d		       84 f1		      sty	.TARGET
    633  fa6f		       6a		      ror
    634  fa70		       6a		      ror
      0  fa71					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  fa71				   .TARGET    SET	DO_GEMS_A + 1
      2  fa71		       a2 03		      ldx	#%00000011
      3  fa73
      4  fa73		       cb 00		      .byte.b	$cb, $00
      5  fa75		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa78		       84 eb		      sty	.TARGET
    636  fa7a		       6a		      ror
    637  fa7b		       6a		      ror
      0  fa7c					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  fa7c				   .TARGET    SET	DO_GEMS_B + 0
      2  fa7c		       a2 03		      ldx	#%00000011
      3  fa7e
      4  fa7e		       cb 00		      .byte.b	$cb, $00
      5  fa80		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa83		       84 f0		      sty	.TARGET
    639  fa85							; ror
    640  fa85							; ror
    641  fa85
    642  fa85		       a5 e4		      lda	level_for_game + 0
      0  fa87					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fa87				   .TARGET    SET	DO_GEMS_A + 0
      2  fa87		       a2 03		      ldx	#%00000011
      3  fa89
      4  fa89		       cb 00		      .byte.b	$cb, $00
      5  fa8b		       bc a0 fa 	      ldy	GEMINI_LOOKUP,x
      6  fa8e		       84 ea		      sty	.TARGET
    644  fa90							; ror
    645  fa90							; ror
    646  fa90
    647  fa90		       60		      rts
    648  fa91				   gemini_populate_end
    649  fa91
    650  faa0		       00 00 00 00*	      align	16
    651  faa0
    652  faa0				   GEMINI_LOOKUP
    653  faa0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    654  faa4
    655  faa4				   SHARD_LUT_RF1
    656  faa4		       00		      .byte.b	#0
    657  faa5				   SHARD_LUT_VD1
    658  faa5		       00		      .byte.b	#0
    659  faa6
------- FILE main.s
------- FILE game_state.s LEVEL 2 PASS 2
      0  faa6					      include	"game_state.s"
      1  faa6							; Perform a left rotation on the 32 bit number at
      2  faa6							; location VLA and store the result at location
      3  faa6							; RES. If VLA and RES are the same then the
      4  faa6							; operation is applied directly to the memory,
      5  faa6							; otherwise it is done in the accumulator.
      6  faa6							;
      7  faa6							; On exit: A = ??, X & Y are unchanged.
      8  faa6
      9  faa6							;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     10  faa6					      mac	_ror32
     11  faa6				   VLA	      EQU	{1}
     12  faa6				   RES	      EQU	{2}
     13  faa6					      IF	VLA != RES
     14  faa6					      LDA	VLA+0
     15  faa6					      ROR	A
     16  faa6					      STA	RES+0
     17  faa6					      LDA	VLA+1
     18  faa6					      ROR	A
     19  faa6					      STA	RES+1
     20  faa6					      LDA	VLA+2
     21  faa6					      ROR	A
     22  faa6					      STA	RES+2
     23  faa6					      LDA	VLA+3
     24  faa6					      ROR	A
     25  faa6					      STA	RES+3
     26  faa6					      ELSE
     27  faa6					      ROR	VLA+0
     28  faa6					      ROR	VLA+1
     29  faa6					      ROR	VLA+2
     30  faa6					      ROR	VLA+3
     31  faa6					      ENDIF
     32  faa6					      ENDM
     33  faa6							; Add two 32 bit numbers together and store the
     34  faa6							; result in another memory location. RES may be
     35  faa6							; the same as either VLA or VLB.
     36  faa6							;
     37  faa6							; On exit: A = ??, X & Y are unchanged.
     38  faa6
     39  faa6				   game_state_adder
     40  faa6		       00		      .byte.b	#$0
     41  faa7		       00		      .byte.b	#$0
     42  faa8		       00		      .byte.b	#$0
     43  faa9		       10		      .byte.b	#%10000
     44  faaa
     45  faaa					      mac	_add32
     46  faaa				   .VLA       EQU	{1}
     47  faaa				   .VLB       EQU	{2}
     48  faaa				   .RES       EQU	{3}
     49  faaa					      CLC
     50  faaa					      LDA	.VLA+3
     51  faaa					      ADC	.VLB+3
     52  faaa					      STA	.RES+3
     53  faaa					      LDA	.VLA+2
     54  faaa					      ADC	.VLB+2
     55  faaa					      STA	.RES+2
     56  faaa					      LDA	.VLA+1
     57  faaa					      ADC	.VLB+1
     58  faaa					      STA	.RES+1
     59  faaa					      LDA	.VLA+0
     60  faaa					      ADC	.VLB+0
     61  faaa					      STA	.RES+0
     62  faaa					      ENDM
     63  faaa
     64  faaa				   game_state_setup
     65  faaa							; Set up the level
     66  faaa		       a9 fb		      lda	#%11111011
     67  faac		       85 e4		      sta	[level_for_game + 0]
     68  faae		       a9 ff		      lda	#%11111111
     69  fab0		       85 e5		      sta	[level_for_game + 1]
     70  fab2		       a9 ff		      lda	#%11111111
     71  fab4		       85 e6		      sta	[level_for_game + 2]
     72  fab6		       a9 ff		      lda	#%11111111
     73  fab8		       85 e7		      sta	[level_for_game + 3]
     74  faba		       60		      rts
     75  fabb
     76  fac0		       00 00 00 00*	      align	16
     77  fac0				   game_state_mask
     78  fac0		       7f		      .byte.b	#%01111111
     79  fac1		       bf		      .byte.b	#%10111111
     80  fac2		       df		      .byte.b	#%11011111
     81  fac3		       ef		      .byte.b	#%11101111
     82  fac4		       f7		      .byte.b	#%11110111
     83  fac5		       fb		      .byte.b	#%11111011
     84  fac6		       fd		      .byte.b	#%11111101
     85  fac7		       fe		      .byte.b	#%11111110
     86  fac8
     87  fac8				   game_state_tick subroutine
     88  fac8							; jsr game_state_setup
     89  fac8
     90  fac8							; Get index [0, 25]
     91  fac8		       18		      clc
     92  fac9		       a5 d7		      lda	XPos
     93  facb		       e9 02		      sbc	#2
     94  facd		       4a		      lsr
     95  face		       4a		      lsr
     96  facf		       85 d2		      sta	Temp
     97  fad1
     98  fad1							; Load bit offset
     99  fad1		       29 07		      and	#%111
    100  fad3		       a8		      tay
    101  fad4		       b9 c0 fa 	      lda	game_state_mask,y
    102  fad7		       85 d3		      sta	Temp2
    103  fad9
    104  fad9							; Load sprite offset
    105  fad9		       a5 d2		      lda	Temp
    106  fadb		       4a		      lsr
    107  fadc		       4a		      lsr
    108  fadd		       4a		      lsr
    109  fade		       a8		      tay
    110  fadf		       a5 d3		      lda	Temp2
    111  fae1		       39 e4 00 	      and	level_for_game,y
    112  fae4		       99 e4 00 	      sta	level_for_game,y
    113  fae7		       60		      rts
    114  fae8
    115  fae8				   game_state_tick_1 subroutine
      0  fae8					      _ADD32	level_for_game, game_state_adder, level_for_game
      1  fae8		       00 e4	   .VLA       EQU	level_for_game
      2  fae8		       fa a6	   .VLB       EQU	game_state_adder
      3  fae8		       00 e4	   .RES       EQU	level_for_game
      4  fae8		       18		      CLC
      5  fae9		       a5 e7		      LDA	.VLA+3
      6  faeb		       6d a9 fa 	      ADC	.VLB+3
      7  faee		       85 e7		      STA	.RES+3
      8  faf0		       a5 e6		      LDA	.VLA+2
      9  faf2		       6d a8 fa 	      ADC	.VLB+2
     10  faf5		       85 e6		      STA	.RES+2
     11  faf7		       a5 e5		      LDA	.VLA+1
     12  faf9		       6d a7 fa 	      ADC	.VLB+1
     13  fafc		       85 e5		      STA	.RES+1
     14  fafe		       a5 e4		      LDA	.VLA+0
     15  fb00		       6d a6 fa 	      ADC	.VLB+0
     16  fb03		       85 e4		      STA	.RES+0
    117  fb05		       60		      rts
    118  fb06
    119  fb06							; game_state_tick:
    120  fb06							;     lda FrameCount
    121  fb06							;     and #%111
    122  fb06							;     bne .skiprotate
    123  fb06							;     lda level_for_game + 3
    124  fb06							;     ror
    125  fb06							; .rollall:
    126  fb06							;     _ROR32 level_for_game, level_for_game
    127  fb06
    128  fb06							;     lda #%11101111
    129  fb06							;     cmp [level_for_game + 3]
    130  fb06							;     bne .skiprotate
    131  fb06							;     jmp game_state_setup
    132  fb06							; .skiprotate:
    133  fb06							;     rts
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb06					      include	"kernel_border.s"
      1  fb06							; Visible Kernel
      2  fb06
      3  fb06				   KernelBorder subroutine
      4  fb06		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb08
      6  fb08							; First HMOVE
      7  fb08		       85 2a		      sta	HMOVE
      8  fb0a
      9  fb0a							; Border top
     10  fb0a		       a9 00		      lda	#0
     11  fb0c		       85 08		      sta	COLUPF
     12  fb0e		       85 0e		      sta	PF1
     13  fb10		       85 0f		      sta	PF2
     14  fb12		       a9 02		      lda	#SIGNAL_LINE
     15  fb14		       85 09		      sta	COLUBK
     16  fb16
     17  fb16					      REPEAT	6
     18  fb16		       85 02		      sta	WSYNC
     17  fb16					      REPEND
     18  fb18		       85 02		      sta	WSYNC
     17  fb18					      REPEND
     18  fb1a		       85 02		      sta	WSYNC
     17  fb1a					      REPEND
     18  fb1c		       85 02		      sta	WSYNC
     17  fb1c					      REPEND
     18  fb1e		       85 02		      sta	WSYNC
     17  fb1e					      REPEND
     18  fb20		       85 02		      sta	WSYNC
     19  fb22					      REPEND
     20  fb22
     21  fb22		       a9 00		      lda	#0
     22  fb24		       85 09		      sta	COLUBK
     23  fb26		       85 02		      sta	WSYNC
     24  fb28
     25  fb28							; Start top border
     26  fb28				   border_top
     27  fb28							; Make the playfield solid.
     28  fb28		       a9 3f		      lda	#%00111111
     29  fb2a		       85 0e		      sta	PF1
     30  fb2c		       a9 ff		      lda	#%11111111
     31  fb2e		       85 0f		      sta	PF2
     32  fb30
     33  fb30		       a9 42		      lda	#COL_BG
     34  fb32		       a0 00		      ldy	#0
     35  fb34
     36  fb34							; X_XXXX_XX
     37  fb34							; Commented lines removed to save on space.
     38  fb34		       85 08		      sta	COLUPF
     39  fb36		       85 02		      sta	WSYNC
     40  fb38		       84 08		      sty	COLUPF
     41  fb3a		       85 02		      sta	WSYNC
     42  fb3c		       85 08		      sta	COLUPF
     43  fb3e		       85 02		      sta	WSYNC
     44  fb40							; sta COLUPF
     45  fb40		       85 02		      sta	WSYNC
     46  fb42							; sta COLUPF
     47  fb42		       85 02		      sta	WSYNC
     48  fb44		       84 08		      sty	COLUPF
     49  fb46		       85 02		      sta	WSYNC
     50  fb48		       85 08		      sta	COLUPF
     51  fb4a
     52  fb4a		       85 02		      sta	WSYNC
     53  fb4c							; sta COLUPF
     54  fb4c
     55  fb4c				   PlayArea
     56  fb4c							; PF is now the playing area
      0  fb4c					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb4c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb4c  && !(  _scycles == #0  ) }
      2  fb4c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb4c					      sleep	61
      1  fb4c				   .CYCLES    SET	61
      2  fb4c
      3  fb4c				  -	      IF	.CYCLES < 2
      4  fb4c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb4c				  -	      ERR
      6  fb4c					      ENDIF
      7  fb4c
      8  fb4c					      IF	.CYCLES & 1
      9  fb4c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb4c		       04 00		      nop	0
     11  fb4e				  -	      ELSE
     12  fb4e				  -	      bit	VSYNC
     13  fb4e					      ENDIF
     14  fb4e				   .CYCLES    SET	.CYCLES - 3
     15  fb4e					      ENDIF
     16  fb4e
     17  fb4e					      REPEAT	.CYCLES / 2
     18  fb4e		       ea		      nop
     17  fb4e					      REPEND
     18  fb4f		       ea		      nop
     17  fb4f					      REPEND
     18  fb50		       ea		      nop
     17  fb50					      REPEND
     18  fb51		       ea		      nop
     17  fb51					      REPEND
     18  fb52		       ea		      nop
     17  fb52					      REPEND
     18  fb53		       ea		      nop
     17  fb53					      REPEND
     18  fb54		       ea		      nop
     17  fb54					      REPEND
     18  fb55		       ea		      nop
     17  fb55					      REPEND
     18  fb56		       ea		      nop
     17  fb56					      REPEND
     18  fb57		       ea		      nop
     17  fb57					      REPEND
     18  fb58		       ea		      nop
     17  fb58					      REPEND
     18  fb59		       ea		      nop
     17  fb59					      REPEND
     18  fb5a		       ea		      nop
     17  fb5a					      REPEND
     18  fb5b		       ea		      nop
     17  fb5b					      REPEND
     18  fb5c		       ea		      nop
     17  fb5c					      REPEND
     18  fb5d		       ea		      nop
     17  fb5d					      REPEND
     18  fb5e		       ea		      nop
     17  fb5e					      REPEND
     18  fb5f		       ea		      nop
     17  fb5f					      REPEND
     18  fb60		       ea		      nop
     17  fb60					      REPEND
     18  fb61		       ea		      nop
     17  fb61					      REPEND
     18  fb62		       ea		      nop
     17  fb62					      REPEND
     18  fb63		       ea		      nop
     17  fb63					      REPEND
     18  fb64		       ea		      nop
     17  fb64					      REPEND
     18  fb65		       ea		      nop
     17  fb65					      REPEND
     18  fb66		       ea		      nop
     17  fb66					      REPEND
     18  fb67		       ea		      nop
     17  fb67					      REPEND
     18  fb68		       ea		      nop
     17  fb68					      REPEND
     18  fb69		       ea		      nop
     17  fb69					      REPEND
     18  fb6a		       ea		      nop
     19  fb6b					      REPEND
     59  fb6b		       a9 00		      lda	#%00000000
     60  fb6d		       85 0d		      sta	PF0
     61  fb6f		       a9 20		      lda	#%00100000
     62  fb71		       85 0e		      sta	PF1
     63  fb73		       a9 00		      lda	#%00000000
     64  fb75		       85 0f		      sta	PF2
      0  fb77					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb77				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb77  && !(  _scycles == #0  ) }
      2  fb77					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb77					      sleep	7
      1  fb77				   .CYCLES    SET	7
      2  fb77
      3  fb77				  -	      IF	.CYCLES < 2
      4  fb77				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb77				  -	      ERR
      6  fb77					      ENDIF
      7  fb77
      8  fb77					      IF	.CYCLES & 1
      9  fb77					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb77		       04 00		      nop	0
     11  fb79				  -	      ELSE
     12  fb79				  -	      bit	VSYNC
     13  fb79					      ENDIF
     14  fb79				   .CYCLES    SET	.CYCLES - 3
     15  fb79					      ENDIF
     16  fb79
     17  fb79					      REPEAT	.CYCLES / 2
     18  fb79		       ea		      nop
     17  fb79					      REPEND
     18  fb7a		       ea		      nop
     19  fb7b					      REPEND
     67  fb7b		       4c ad fb 	      jmp	row_start
     68  fb7e							; enter row on cycle 10.
     69  fb7e
     70  fb7e							; reset the background for bottom of playfield
     71  fb7e				   border_bottom
     72  fb7e							;sta WSYNC
     73  fb7e
     74  fb7e							; Form the bottom of the level frame.
     75  fb7e		       a9 3f		      lda	#%00111111
     76  fb80		       85 0e		      sta	PF1
     77  fb82		       a9 ff		      lda	#%11111111
     78  fb84		       85 0f		      sta	PF2
     79  fb86
     80  fb86							; Clear all sprites.
     81  fb86		       a9 00		      lda	#0
     82  fb88		       85 1c		      sta	EMERALD_SP
     83  fb8a		       85 1b		      sta	JET_SP
     84  fb8c		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fb8e
     86  fb8e		       a9 42		      lda	#COL_BG
     87  fb90		       a0 00		      ldy	#0
     88  fb92		       85 02		      sta	WSYNC
     89  fb94
     90  fb94		       84 08		      sty	COLUPF
     91  fb96		       85 02		      sta	WSYNC
     92  fb98
     93  fb98		       85 08		      sta	COLUPF
     94  fb9a		       85 02		      sta	WSYNC
     95  fb9c
     96  fb9c		       85 02		      sta	WSYNC
     97  fb9e
     98  fb9e		       85 02		      sta	WSYNC
     99  fba0
    100  fba0		       84 08		      sty	COLUPF
    101  fba2		       85 02		      sta	WSYNC
    102  fba4
    103  fba4		       85 08		      sta	COLUPF
    104  fba6		       85 02		      sta	WSYNC
    105  fba8		       85 02		      sta	WSYNC
    106  fbaa		       4c 44 f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fbad					      include	"kernel_row.s"
      1  fbad							; Frame Start
      2  fbad
      3  fbad							; Macros for calculating sprite values (GRPx).
      4  fbad
      5  fbad							; mac jet_spritedata_calc
      6  fbad							;
      7  fbad							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fbad							; GRP0.
      9  fbad					      mac	jet_spritedata_calc
     10  fbad					      dec	RamRowJetpackIndex
     11  fbad					      ldy	RamRowJetpackIndex
     12  fbad					      ldx	Frame0,Y
     13  fbad					      stx	JET_SP
     14  fbad					      endm
     15  fbad
     16  fbad				   row_start
     17  fbad
     18  fbad							; [scanline 1]
     19  fbad				   row_1
     20  fbad							; Enter after scanline starts on row "9" and wraps
      0  fbad					      ASSERT_RUNTIME	"_scycles == #10"
      1  fbad				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fbad  && !(  _scycles == #10  ) }
      2  fbad					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fbad
     23  fbad							; Load sprite details
     24  fbad		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fbaf		       c5 d6		      cmp	SpriteEnd	; 5c
     26  fbb1		       a9 00		      lda	#0	; 2c
     27  fbb3							; constant 6c: if carry set, load SpriteEnd into y
     28  fbb3		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fbb5		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fbb6		       a5 d6		      lda	SpriteEnd
     31  fbb8		       69 08		      adc	#8
     32  fbba		       85 e3		      sta	RamRowJetpackIndex
     33  fbbc
     34  fbbc							; Load sprite
     35  fbbc		       c6 e3		      dec	RamRowJetpackIndex
     36  fbbe		       a4 e3		      ldy	RamRowJetpackIndex
     37  fbc0		       be 00 ff 	      ldx	Frame0,Y
     38  fbc3		       86 1b		      stx	JET_SP
     39  fbc5
     40  fbc5							; TODO assert cycle is not in visible range!
     41  fbc5
     42  fbc5							; Decrease SpriteEnd
     43  fbc5		       38		      sec
     44  fbc6		       a5 d6		      lda	SpriteEnd
     45  fbc8		       e9 08		      sbc	#8
     46  fbca		       85 d6		      sta	SpriteEnd
     47  fbcc
     48  fbcc							; FIXME Demo: modify kernel A for the next row
     49  fbcc		       a9 aa		      lda	#%010101010
     50  fbce		       85 cb		      sta	NibbleGrp0
     51  fbd0
     52  fbd0							; Idle.
     53  fbd0		       85 02		      sta	WSYNC
     54  fbd2							; sleep 33
     55  fbd2
      0  fbd2					      ASSERT_RUNTIME	"_scycles == #0"
      1  fbd2				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fbd2  && !(  _scycles == #0  ) }
      2  fbd2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     57  fbd2
     58  fbd2							; [scanline 2]
     59  fbd2				   row_2
      0  fbd2					      jet_spritedata_calc
      1  fbd2		       c6 e3		      dec	RamRowJetpackIndex
      2  fbd4		       a4 e3		      ldy	RamRowJetpackIndex
      3  fbd6		       be 00 ff 	      ldx	Frame0,Y
      4  fbd9		       86 1b		      stx	JET_SP
      0  fbdb					      sleep	5
      1  fbdb				   .CYCLES    SET	5
      2  fbdb
      3  fbdb				  -	      IF	.CYCLES < 2
      4  fbdb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fbdb				  -	      ERR
      6  fbdb					      ENDIF
      7  fbdb
      8  fbdb					      IF	.CYCLES & 1
      9  fbdb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fbdb		       04 00		      nop	0
     11  fbdd				  -	      ELSE
     12  fbdd				  -	      bit	VSYNC
     13  fbdd					      ENDIF
     14  fbdd				   .CYCLES    SET	.CYCLES - 3
     15  fbdd					      ENDIF
     16  fbdd
     17  fbdd					      REPEAT	.CYCLES / 2
     18  fbdd		       ea		      nop
     19  fbde					      REPEND
     62  fbde
     63  fbde							; Black out playfield
     64  fbde							; TODO This should be done with playfield pixels, not color.
     65  fbde		       a9 00		      lda	#0
     66  fbe0		       85 08		      sta	COLUPF
     67  fbe2
     68  fbe2							; [[[Nibble VM.]]]
      0  fbe2					      sleep	25
      1  fbe2				   .CYCLES    SET	25
      2  fbe2
      3  fbe2				  -	      IF	.CYCLES < 2
      4  fbe2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fbe2				  -	      ERR
      6  fbe2					      ENDIF
      7  fbe2
      8  fbe2					      IF	.CYCLES & 1
      9  fbe2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fbe2		       04 00		      nop	0
     11  fbe4				  -	      ELSE
     12  fbe4				  -	      bit	VSYNC
     13  fbe4					      ENDIF
     14  fbe4				   .CYCLES    SET	.CYCLES - 3
     15  fbe4					      ENDIF
     16  fbe4
     17  fbe4					      REPEAT	.CYCLES / 2
     18  fbe4		       ea		      nop
     17  fbe4					      REPEND
     18  fbe5		       ea		      nop
     17  fbe5					      REPEND
     18  fbe6		       ea		      nop
     17  fbe6					      REPEND
     18  fbe7		       ea		      nop
     17  fbe7					      REPEND
     18  fbe8		       ea		      nop
     17  fbe8					      REPEND
     18  fbe9		       ea		      nop
     17  fbe9					      REPEND
     18  fbea		       ea		      nop
     17  fbea					      REPEND
     18  fbeb		       ea		      nop
     17  fbeb					      REPEND
     18  fbec		       ea		      nop
     17  fbec					      REPEND
     18  fbed		       ea		      nop
     17  fbed					      REPEND
     18  fbee		       ea		      nop
     19  fbef					      REPEND
     70  fbef
     71  fbef							; Load PF1 value
     72  fbef		       a9 3d		      lda	#%00111101
     73  fbf1		       85 e2		      sta	RamPF1Value
     74  fbf3
     75  fbf3		       a9 04		      lda	#4
     76  fbf5		       8d 96 02 	      sta	TIM64T
     77  fbf8
     78  fbf8							; Set stack pointer for PHP use from NibblePhp.
     79  fbf8		       a6 ce		      ldx	NibblePhp
     80  fbfa		       ca		      dex
     81  fbfb		       9a		      txs
     82  fbfc
     83  fbfc							; Enable playfield at end of scanline
     84  fbfc		       a9 42		      lda	#COL_BG
     85  fbfe		       85 08		      sta	COLUPF
     86  fc00
     87  fc00							; Set overflow flag
     88  fc00		       24 cf		      bit	NibblePs
     89  fc02
      0  fc02					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc02				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc02  && !(  _scycles == #0  ) }
      2  fc02					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     91  fc02
     92  fc02							; [scanline 3]
     93  fc02				   row_3
     94  fc02							; Current row and next two rows.
     95  fc02		       a4 e3		      ldy	RamRowJetpackIndex
     96  fc04		       88		      dey
     97  fc05		       be 00 ff 	      ldx	Frame0,Y
     98  fc08		       86 1b		      stx	JET_SP
     99  fc0a		       88		      dey
    100  fc0b		       be 00 ff 	      ldx	Frame0,Y
    101  fc0e		       86 d0		      stx	RamKernelGrp0
    102  fc10		       88		      dey
    103  fc11		       be 00 ff 	      ldx	Frame0,Y
    104  fc14		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
    105  fc17		       84 e3		      sty	RamRowJetpackIndex
    106  fc19
    107  fc19							; [[[Nibble VM.]]]
    108  fc19							; Idle.
      0  fc19					      sleep	22
      1  fc19				   .CYCLES    SET	22
      2  fc19
      3  fc19				  -	      IF	.CYCLES < 2
      4  fc19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc19				  -	      ERR
      6  fc19					      ENDIF
      7  fc19
      8  fc19				  -	      IF	.CYCLES & 1
      9  fc19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc19				  -	      nop	0
     11  fc19				  -	      ELSE
     12  fc19				  -	      bit	VSYNC
     13  fc19				  -	      ENDIF
     14  fc19				  -.CYCLES    SET	.CYCLES - 3
     15  fc19					      ENDIF
     16  fc19
     17  fc19					      REPEAT	.CYCLES / 2
     18  fc19		       ea		      nop
     17  fc19					      REPEND
     18  fc1a		       ea		      nop
     17  fc1a					      REPEND
     18  fc1b		       ea		      nop
     17  fc1b					      REPEND
     18  fc1c		       ea		      nop
     17  fc1c					      REPEND
     18  fc1d		       ea		      nop
     17  fc1d					      REPEND
     18  fc1e		       ea		      nop
     17  fc1e					      REPEND
     18  fc1f		       ea		      nop
     17  fc1f					      REPEND
     18  fc20		       ea		      nop
     17  fc20					      REPEND
     18  fc21		       ea		      nop
     17  fc21					      REPEND
     18  fc22		       ea		      nop
     17  fc22					      REPEND
     18  fc23		       ea		      nop
     19  fc24					      REPEND
    110  fc24
    111  fc24							; Setup for kernel
    112  fc24		       38		      sec		; clear carry bit
    113  fc25		       a6 cc		      ldx	NibbleX
    114  fc27		       a4 cd		      ldy	NibbleY
    115  fc29
    116  fc29							; Jump immediately into scanlines 4-5 aka "kernel_gem"
    117  fc29		       a5 ca		      lda	NibbleVdel1
    118  fc2b		       85 1c		      sta	EMERALD_SP
    119  fc2d		       a5 d0		      lda	RamKernelGrp0	; Load sprite 2 into A
    120  fc2f							; [scanline 4]
    121  fc2f							; [scanline 5]
      0  fc2f					      ASSERT_RUNTIME	"_scycles == #73"
      1  fc2f				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fc2f  && !(  _scycles == #73  ) }
      2  fc2f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    123  fc2f		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    124  fc32
    125  fc32							; [scanline 6]
    126  fc32
    127  fc32				   row_after_kernel
    128  fc32				   row_6
      0  fc32					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc32				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc32  && !(  _scycles == #0  ) }
      2  fc32					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    130  fc32
    131  fc32							; Cleanup from the kernel.
    132  fc32		       a9 00		      lda	#0
    133  fc34		       85 1e		      sta	EMERALD_MI_ENABLE
    134  fc36		       85 1c		      sta	EMERALD_SP
    135  fc38		       85 08		      sta	COLUPF
    136  fc3a
    137  fc3a		       a9 20		      lda	#%00100000
    138  fc3c		       85 0e		      sta	PF1
    139  fc3e
      0  fc3e					      jet_spritedata_calc
      1  fc3e		       c6 e3		      dec	RamRowJetpackIndex
      2  fc40		       a4 e3		      ldy	RamRowJetpackIndex
      3  fc42		       be 00 ff 	      ldx	Frame0,Y
      4  fc45		       86 1b		      stx	JET_SP
    141  fc47
    142  fc47							; Idle.
    143  fc47		       85 02		      sta	WSYNC
    144  fc49
    145  fc49							; [scanline 7]
    146  fc49				   row_7
      0  fc49					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc49				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc49  && !(  _scycles == #0  ) }
      2  fc49					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    148  fc49
    149  fc49							; FIXME this should be enabled!
    150  fc49							; jet_spritedata_calc
    151  fc49
    152  fc49		       a9 42		      lda	#COL_BG
    153  fc4b		       85 08		      sta	COLUPF
    154  fc4d
    155  fc4d							; Idle.
    156  fc4d							; sleep 71
    157  fc4d
    158  fc4d							; Run Kernel.
    159  fc4d		       a5 c1		      lda	NibbleVar2
      0  fc4f					      NIBBLE_gem_kernel_a_2
      1  fc4f		       0a		      asl
      2  fc50		       90 1d		      bcc	.else_1
      3  fc52
      4  fc52				   .if_1
      5  fc52		       a2 85		      ldx	#[ #BC_STA ]
      6  fc54		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  fc57		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  fc59		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  fc5c		       a2 85		      ldx	#[ #BC_STA ]
     10  fc5e		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  fc61		       a2 0e		      ldx	#[ #PF1 ]
     12  fc63		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  fc66		       a2 08		      ldx	#[ #BC_PHP ]
     14  fc68		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fc6b					      sleep	2
      1  fc6b				   .CYCLES    SET	2
      2  fc6b
      3  fc6b				  -	      IF	.CYCLES < 2
      4  fc6b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc6b				  -	      ERR
      6  fc6b					      ENDIF
      7  fc6b
      8  fc6b				  -	      IF	.CYCLES & 1
      9  fc6b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc6b				  -	      nop	0
     11  fc6b				  -	      ELSE
     12  fc6b				  -	      bit	VSYNC
     13  fc6b				  -	      ENDIF
     14  fc6b				  -.CYCLES    SET	.CYCLES - 3
     15  fc6b					      ENDIF
     16  fc6b
     17  fc6b					      REPEAT	.CYCLES / 2
     18  fc6b		       ea		      nop
     19  fc6c					      REPEND
     16  fc6c
     17  fc6c
     18  fc6c		       4c 8a fc 	      jmp	.endif_1
     19  fc6f				   .else_1
     20  fc6f		       a2 08		      ldx	#[ #BC_PHP ]
     21  fc71		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  fc74		       a2 85		      ldx	#[ #BC_STA ]
     23  fc76		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  fc79		       a2 0e		      ldx	#[ #PF1 ]
     25  fc7b		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  fc7e		       a6 c8		      ldx.z	NibbleGemini4
     27  fc80		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  fc83		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  fc85		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fc88					      sleep	3
      1  fc88				   .CYCLES    SET	3
      2  fc88
      3  fc88				  -	      IF	.CYCLES < 2
      4  fc88				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc88				  -	      ERR
      6  fc88					      ENDIF
      7  fc88
      8  fc88					      IF	.CYCLES & 1
      9  fc88					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc88		       04 00		      nop	0
     11  fc8a				  -	      ELSE
     12  fc8a				  -	      bit	VSYNC
     13  fc8a					      ENDIF
     14  fc8a				   .CYCLES    SET	.CYCLES - 3
     15  fc8a					      ENDIF
     16  fc8a
     17  fc8a				  -	      REPEAT	.CYCLES / 2
     18  fc8a				  -	      nop
     19  fc8a					      REPEND
     31  fc8a
     32  fc8a				   .endif_1
     33  fc8a		       a6 c9		      ldx.z	NibbleMissile
     34  fc8c		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  fc8f		       a6 ca		      ldx.z	NibbleVdel1
     36  fc91		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  fc94		       a6 cb		      ldx.z	NibbleGrp0
     38  fc96		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     39  fc99		       a2 ff		      ldx	#[ #$ff ]
     40  fc9b		       86 cf		      stx	[NibblePs + 0]
      0  fc9d					      sleep	5
      1  fc9d				   .CYCLES    SET	5
      2  fc9d
      3  fc9d				  -	      IF	.CYCLES < 2
      4  fc9d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9d				  -	      ERR
      6  fc9d					      ENDIF
      7  fc9d
      8  fc9d					      IF	.CYCLES & 1
      9  fc9d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9d		       04 00		      nop	0
     11  fc9f				  -	      ELSE
     12  fc9f				  -	      bit	VSYNC
     13  fc9f					      ENDIF
     14  fc9f				   .CYCLES    SET	.CYCLES - 3
     15  fc9f					      ENDIF
     16  fc9f
     17  fc9f					      REPEAT	.CYCLES / 2
     18  fc9f		       ea		      nop
     19  fca0					      REPEND
    162  fca0
    163  fca0							; [scanline 8]
    164  fca0				   row_8
      0  fca0					      ASSERT_RUNTIME	"_scycles == #0"
      1  fca0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fca0  && !(  _scycles == #0  ) }
      2  fca0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    166  fca0
    167  fca0							; FIXME this should be enabled!
    168  fca0							; jet_spritedata_calc
    169  fca0
    170  fca0							; [NIBBLE VM]
    171  fca0		       a5 c0		      lda	NibbleVar1
      0  fca2					      NIBBLE_gem_kernel_a_1
      1  fca2		       0a		      asl
      2  fca3		       90 0d		      bcc	.else_1
      3  fca5
      4  fca5				   .if_1
      5  fca5		       2a		      rol
      0  fca6					      sleep	17
      1  fca6				   .CYCLES    SET	17
      2  fca6
      3  fca6				  -	      IF	.CYCLES < 2
      4  fca6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fca6				  -	      ERR
      6  fca6					      ENDIF
      7  fca6
      8  fca6					      IF	.CYCLES & 1
      9  fca6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fca6		       04 00		      nop	0
     11  fca8				  -	      ELSE
     12  fca8				  -	      bit	VSYNC
     13  fca8					      ENDIF
     14  fca8				   .CYCLES    SET	.CYCLES - 3
     15  fca8					      ENDIF
     16  fca8
     17  fca8					      REPEAT	.CYCLES / 2
     18  fca8		       ea		      nop
     17  fca8					      REPEND
     18  fca9		       ea		      nop
     17  fca9					      REPEND
     18  fcaa		       ea		      nop
     17  fcaa					      REPEND
     18  fcab		       ea		      nop
     17  fcab					      REPEND
     18  fcac		       ea		      nop
     17  fcac					      REPEND
     18  fcad		       ea		      nop
     17  fcad					      REPEND
     18  fcae		       ea		      nop
     19  fcaf					      REPEND
      7  fcaf
      8  fcaf
      9  fcaf		       4c cf fc 	      jmp	.endif_1
     10  fcb2				   .else_1
     11  fcb2		       0a		      asl
     12  fcb3		       90 0e		      bcc	.else_2
     13  fcb5
     14  fcb5				   .if_2
     15  fcb5		       a2 86		      ldx	#[ #BC_STX ]
     16  fcb7		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     17  fcba		       a2 11		      ldx	#[ #RESP1 ]
     18  fcbc		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  fcbf					      sleep	2
      1  fcbf				   .CYCLES    SET	2
      2  fcbf
      3  fcbf				  -	      IF	.CYCLES < 2
      4  fcbf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcbf				  -	      ERR
      6  fcbf					      ENDIF
      7  fcbf
      8  fcbf				  -	      IF	.CYCLES & 1
      9  fcbf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcbf				  -	      nop	0
     11  fcbf				  -	      ELSE
     12  fcbf				  -	      bit	VSYNC
     13  fcbf				  -	      ENDIF
     14  fcbf				  -.CYCLES    SET	.CYCLES - 3
     15  fcbf					      ENDIF
     16  fcbf
     17  fcbf					      REPEAT	.CYCLES / 2
     18  fcbf		       ea		      nop
     19  fcc0					      REPEND
     20  fcc0
     21  fcc0
     22  fcc0		       4c cf fc 	      jmp	.endif_2
     23  fcc3				   .else_2
     24  fcc3		       a6 c2		      ldx.z	NibbleGemini1
     25  fcc5		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     26  fcc8		       a6 c3		      ldx.z	NibbleGemini1Reg
     27  fcca		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  fccd					      sleep	3
      1  fccd				   .CYCLES    SET	3
      2  fccd
      3  fccd				  -	      IF	.CYCLES < 2
      4  fccd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fccd				  -	      ERR
      6  fccd					      ENDIF
      7  fccd
      8  fccd					      IF	.CYCLES & 1
      9  fccd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fccd		       04 00		      nop	0
     11  fccf				  -	      ELSE
     12  fccf				  -	      bit	VSYNC
     13  fccf					      ENDIF
     14  fccf				   .CYCLES    SET	.CYCLES - 3
     15  fccf					      ENDIF
     16  fccf
     17  fccf				  -	      REPEAT	.CYCLES / 2
     18  fccf				  -	      nop
     19  fccf					      REPEND
     29  fccf
     30  fccf				   .endif_2
     31  fccf
     32  fccf				   .endif_1
     33  fccf		       0a		      asl
     34  fcd0		       90 10		      bcc	.else_3
     35  fcd2
     36  fcd2				   .if_3
     37  fcd2		       a2 79		      ldx	#[ #NOP_REG ]
     38  fcd4		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     39  fcd7		       a2 11		      ldx	#[ #RESP1 ]
     40  fcd9		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  fcdc					      sleep	5
      1  fcdc				   .CYCLES    SET	5
      2  fcdc
      3  fcdc				  -	      IF	.CYCLES < 2
      4  fcdc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcdc				  -	      ERR
      6  fcdc					      ENDIF
      7  fcdc
      8  fcdc					      IF	.CYCLES & 1
      9  fcdc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcdc		       04 00		      nop	0
     11  fcde				  -	      ELSE
     12  fcde				  -	      bit	VSYNC
     13  fcde					      ENDIF
     14  fcde				   .CYCLES    SET	.CYCLES - 3
     15  fcde					      ENDIF
     16  fcde
     17  fcde					      REPEAT	.CYCLES / 2
     18  fcde		       ea		      nop
     19  fcdf					      REPEND
     42  fcdf
     43  fcdf
     44  fcdf		       4c f1 fc 	      jmp	.endif_3
     45  fce2				   .else_3
     46  fce2		       a2 11		      ldx	#[ #RESP1 ]
     47  fce4		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     48  fce7		       a6 c4		      ldx.z	NibbleGemini2
     49  fce9		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     50  fcec		       a6 c5		      ldx.z	NibbleGemini2Reg
     51  fcee		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     52  fcf1
     53  fcf1				   .endif_3
     54  fcf1		       0a		      asl
     55  fcf2		       90 0b		      bcc	.else_4
     56  fcf4
     57  fcf4				   .if_4
     58  fcf4		       a2 11		      ldx	#[ #RESP1 ]
     59  fcf6		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  fcf9					      sleep	5
      1  fcf9				   .CYCLES    SET	5
      2  fcf9
      3  fcf9				  -	      IF	.CYCLES < 2
      4  fcf9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcf9				  -	      ERR
      6  fcf9					      ENDIF
      7  fcf9
      8  fcf9					      IF	.CYCLES & 1
      9  fcf9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcf9		       04 00		      nop	0
     11  fcfb				  -	      ELSE
     12  fcfb				  -	      bit	VSYNC
     13  fcfb					      ENDIF
     14  fcfb				   .CYCLES    SET	.CYCLES - 3
     15  fcfb					      ENDIF
     16  fcfb
     17  fcfb					      REPEAT	.CYCLES / 2
     18  fcfb		       ea		      nop
     19  fcfc					      REPEND
     61  fcfc
     62  fcfc
     63  fcfc		       4c 09 fd 	      jmp	.endif_4
     64  fcff				   .else_4
     65  fcff		       a6 c6		      ldx.z	NibbleGemini3
     66  fd01		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     67  fd04		       a6 c7		      ldx.z	NibbleGemini3Reg
     68  fd06		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     69  fd09
     70  fd09				   .endif_4
      0  fd09					      sleep	3
      1  fd09				   .CYCLES    SET	3
      2  fd09
      3  fd09				  -	      IF	.CYCLES < 2
      4  fd09				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd09				  -	      ERR
      6  fd09					      ENDIF
      7  fd09
      8  fd09					      IF	.CYCLES & 1
      9  fd09					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd09		       04 00		      nop	0
     11  fd0b				  -	      ELSE
     12  fd0b				  -	      bit	VSYNC
     13  fd0b					      ENDIF
     14  fd0b				   .CYCLES    SET	.CYCLES - 3
     15  fd0b					      ENDIF
     16  fd0b
     17  fd0b				  -	      REPEAT	.CYCLES / 2
     18  fd0b				  -	      nop
     19  fd0b					      REPEND
    174  fd0b
    175  fd0b							; Idle.
    176  fd0b							; sleep 51
    177  fd0b							; sta WSYNC
    178  fd0b
    179  fd0b							; [scanline 8-1]
      0  fd0b					      ASSERT_RUNTIME	"_scycles == #0"
      1  fd0b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fd0b  && !(  _scycles == #0  ) }
      2  fd0b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fd0b							; Repeat loop until LoopCount < 0
    182  fd0b		       c6 d4		      dec	LoopCount
    183  fd0d		       f0 03		      beq	row_end
    184  fd0f		       4c ad fb 	      jmp	row_start
    185  fd12				   row_end
    186  fd12		       4c 7e fb 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fd15					      include	"kernel_gem.s"
      1  fd15							;
      2  fd15							; Gem Kernels
      3  fd15							;
      4  fd15							; Gems are displayed in alternating kernels. This chart shows
      5  fd15							; which kernel is responsible for which gem, with missiles denoted.
      6  fd15							;
      7  fd15							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fd15							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fd15							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fd15							;  #	 0^	 8^	  17^	    26^       gem index
     11  fd15							;
     12  fd15							; The middle bar indicates where the pattern reverses.
     13  fd15							;
     14  fd15							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fd15							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fd15							; requires with a single sprite. By alternating sprites each frame with an...
     17  fd15							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fd15							; line, except for two. These are instead rendered by the missile, which
     19  fd15							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fd15
     21  fd15							; for copying
     22  fe00		       00 00 00 00*	      align	256
     23  fe00
     24  fe00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fe00							;
     26  fe00							; GEM KERNEL A
     27  fe00							;
     28  fe00
     29  fe00				   kernel_1_start subroutine
     30  fe00					      rorg	$f100
     31  fe00
     32  fe00							; Kernel Marker
     33  fe00		       0a		      .byte.b	$A
     34  fe01
     35  fe01				   KernelA_early
      0  fe01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fe01				   .KERNEL    SET	$A
      2  fe01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fe01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fe01		       b8		      clv
     38  fe02
     39  fe02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fe02		       a9 ff		      lda	#$ff
     41  fe02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fe04
     43  fe04				   KernelA    subroutine
      0  fe04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fe04				   .KERNEL    SET	$A
      2  fe04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fe04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fe04
     46  fe04							; Write Player from accumulator. When writing to the other sprite, the
     47  fe04							; TIA will copy Gemini 0A into visible sprite register
     48  fe04		       85 1b		      sta	JET_SP
     49  fe06							; Write Gemini 1A into visible sprite register
     50  fe06		       a9 66		      lda	#%01100110
     51  fe06		       f1 07	   KernelA_VDEL0 =	. - 1
     52  fe08		       85 1c		      sta	EMERALD_SP
     53  fe0a
     54  fe0a							; Register config
     55  fe0a		       a9 08		      lda	#%00001000
     56  fe0c		       85 0c		      sta	REFP1
     57  fe0e
     58  fe0e		       a9 20		      lda	#%00100000
     59  fe10		       85 0e		      sta	PF1
     60  fe12
     61  fe12							; Reset stack pointer
     62  fe12		       68		      pla
     63  fe13
     64  fe13							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fe13					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fe13				   .KERNEL    SET	$A
      2  fe13				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f113  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fe13					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fe13				   KernelA_A
     67  fe13		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fe15
     69  fe15							; RST0 vvv
     70  fe15				   KernelA_B
     71  fe15		       a5 e2		      lda	RamPF1Value
     72  fe17				   KernelA_C
     73  fe17		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fe19				   KernelA_D
     75  fe19							; sty EMERALD_SP ; Gemini 1A
      0  fe19					      sleep	3
      1  fe19				   .CYCLES    SET	3
      2  fe19
      3  fe19				  -	      IF	.CYCLES < 2
      4  fe19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe19				  -	      ERR
      6  fe19					      ENDIF
      7  fe19
      8  fe19					      IF	.CYCLES & 1
      9  fe19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe19		       04 00		      nop	0
     11  fe1b				  -	      ELSE
     12  fe1b				  -	      bit	VSYNC
     13  fe1b					      ENDIF
     14  fe1b				   .CYCLES    SET	.CYCLES - 3
     15  fe1b					      ENDIF
     16  fe1b
     17  fe1b				  -	      REPEAT	.CYCLES / 2
     18  fe1b				  -	      nop
     19  fe1b					      REPEND
     77  fe1b							; RST0 ^^^
     78  fe1b
     79  fe1b				   KernelA_E
     80  fe1b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     81  fe1d				   KernelA_F
     82  fe1d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     83  fe1f				   KernelA_G
     84  fe1f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     85  fe21
     86  fe21				   KernelA_H
     87  fe21		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     88  fe23
      0  fe23					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fe23				   .KERNEL    SET	$A
      2  fe23				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f123  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fe23					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     90  fe23							; RST4 vvv
     91  fe23				   KernelA_I
     92  fe23		       08		      php		; Reset "medium close" NUSIZ repetition
     93  fe24				   KernelA_J		; unchanging
     94  fe24		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     95  fe26				   KernelA_K
     96  fe26		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     97  fe28							; RST4 ^^^
     98  fe28
     99  fe28				   KernelA_L
    100  fe28		       a5 de		      lda	RamZeroByte	; FIXME this doesn't belong here
    101  fe2a				   KernelA_M
    102  fe2a		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    103  fe2c				   KernelA_N
    104  fe2c		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME better place for this?
    105  fe2e				   KernelA_O
    106  fe2e		       a9 66		      lda	#%01100110
    107  fe2e		       f1 2f	   KernelA_VDEL1 =	. - 1
    108  fe30
    109  fe30							; End visible line
      0  fe30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #66"
      1  fe30				   .KERNEL    SET	$A
      2  fe30				   .COND      SET	"_scycles == #66"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #66  ) }
      3  fe30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fe30				   KernelA_branch
    112  fe30		       85 1c		      sta	EMERALD_SP	; set VDEL1
    113  fe32
    114  fe32							; Branch or return.
    115  fe32		       70 cd		      bvs	KernelA_early
      0  fe34					      sleep	2
      1  fe34				   .CYCLES    SET	2
      2  fe34
      3  fe34				  -	      IF	.CYCLES < 2
      4  fe34				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe34				  -	      ERR
      6  fe34					      ENDIF
      7  fe34
      8  fe34				  -	      IF	.CYCLES & 1
      9  fe34				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe34				  -	      nop	0
     11  fe34				  -	      ELSE
     12  fe34				  -	      bit	VSYNC
     13  fe34				  -	      ENDIF
     14  fe34				  -.CYCLES    SET	.CYCLES - 3
     15  fe34					      ENDIF
     16  fe34
     17  fe34					      REPEAT	.CYCLES / 2
     18  fe34		       ea		      nop
     19  fe35					      REPEND
    117  fe35		       4c 32 fc 	      jmp	row_after_kernel
    118  fe38
    119  fe38					      rend
    120  fe38				   kernel_1_end
      0  fe38					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fe38				   .STARTA    SET	kernel_1_start
      2  fe38				   .ENDA      SET	kernel_1_end
      3  fe38				   .LEN       SET	$40
      4  fe38				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe38				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe38				  -	      err
      7  fe38					      endif
    122  fe38
    123  fe38							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  fe38							;
    125  fe38							; GEM KERNEL B
    126  fe38							;
    127  fe38
    128  fe38				   kernel_2_start subroutine
    129  fe38					      rorg	$f100
    130  fe38
    131  fe38							; Kernel Marker
    132  fe38		       0b		      .byte.b	$B
    133  fe39
    134  fe39		       b8		      clv
    135  fe3a
    136  fe3a				   KernelB_early
    137  fe3a							; Early code to set next GRP0 image. Value is overwritten
    138  fe3a		       a9 ff		      lda	#$ff
    139  fe3a		       f1 03	   KernelB_GRP0 =	. - 1
    140  fe3c
    141  fe3c				   KernelB    subroutine
      0  fe3c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fe3c				   .KERNEL    SET	$B
      2  fe3c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fe3c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    143  fe3c
    144  fe3c							; Write Player from accumulator. When writing to the other sprite, the
    145  fe3c							; TIA will copy Gemini 0A into visible sprite register
    146  fe3c		       85 1b		      sta	JET_SP
    147  fe3e		       a9 aa		      lda	#%10101010
    148  fe3e		       f1 07	   KernelB_VDEL0 =	. - 1
    149  fe40							; Write Gemini 1A into delayed sprite register
    150  fe40		       85 1c		      sta	EMERALD_SP
    151  fe42
    152  fe42							; Reset stack
    153  fe42		       68		      pla
    154  fe43
    155  fe43							; 6c
    156  fe43		       a9 20		      lda	#%00100000
    157  fe45		       85 0e		      sta	PF1
    158  fe47
    159  fe47							; Register config
    160  fe47		       a9 ff		      lda	#$ff
    161  fe49		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    162  fe4b
    163  fe4b							; Set processor register bit for PHP sprite rendering.
      0  fe4b					      sleep	3
      1  fe4b				   .CYCLES    SET	3
      2  fe4b
      3  fe4b				  -	      IF	.CYCLES < 2
      4  fe4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe4b				  -	      ERR
      6  fe4b					      ENDIF
      7  fe4b
      8  fe4b					      IF	.CYCLES & 1
      9  fe4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe4b		       04 00		      nop	0
     11  fe4d				  -	      ELSE
     12  fe4d				  -	      bit	VSYNC
     13  fe4d					      ENDIF
     14  fe4d				   .CYCLES    SET	.CYCLES - 3
     15  fe4d					      ENDIF
     16  fe4d
     17  fe4d				  -	      REPEAT	.CYCLES / 2
     18  fe4d				  -	      nop
     19  fe4d					      REPEND
    165  fe4d
    166  fe4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fe4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fe4d				   .KERNEL    SET	$B
      2  fe4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fe4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    168  fe4d				   KernelB_A
    169  fe4d		       85 11		      sta	EMERALD_SP_RESET
    170  fe4f				   KernelB_B
    171  fe4f		       a5 e2		      lda	RamPF1Value
    172  fe51				   KernelB_C
    173  fe51		       c5 e2		      cmp	RamPF1Value
    174  fe53				   KernelB_D
    175  fe53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    176  fe55
    177  fe55							; below has one php load (could just be RESET)
    178  fe55				   KernelB_E
    179  fe55		       08		      php
    180  fe56				   KernelB_F
    181  fe56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    182  fe58				   KernelB_G
    183  fe58		       85 0e		      sta	PF1
    184  fe5a				   KernelB_H
    185  fe5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    186  fe5c							; above has one PHP load
    187  fe5c
    188  fe5c				   KernelB_I
    189  fe5c		       85 11		      sta	EMERALD_SP_RESET
    190  fe5e				   KernelB_J
    191  fe5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    192  fe60				   KernelB_K
    193  fe60		       85 1e		      sta	EMERALD_MI_ENABLE	; FIXME this can't rely on sta
    194  fe62				   KernelB_L
    195  fe62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    196  fe64
    197  fe64				   KernelB_M
      0  fe64					      sleep	3
      1  fe64				   .CYCLES    SET	3
      2  fe64
      3  fe64				  -	      IF	.CYCLES < 2
      4  fe64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe64				  -	      ERR
      6  fe64					      ENDIF
      7  fe64
      8  fe64					      IF	.CYCLES & 1
      9  fe64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe64		       04 00		      nop	0
     11  fe66				  -	      ELSE
     12  fe66				  -	      bit	VSYNC
     13  fe66					      ENDIF
     14  fe66				   .CYCLES    SET	.CYCLES - 3
     15  fe66					      ENDIF
     16  fe66
     17  fe66				  -	      REPEAT	.CYCLES / 2
     18  fe66				  -	      nop
     19  fe66					      REPEND
    199  fe66				   KernelB_N
      0  fe66					      sleep	3
      1  fe66				   .CYCLES    SET	3
      2  fe66
      3  fe66				  -	      IF	.CYCLES < 2
      4  fe66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe66				  -	      ERR
      6  fe66					      ENDIF
      7  fe66
      8  fe66					      IF	.CYCLES & 1
      9  fe66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe66		       04 00		      nop	0
     11  fe68				  -	      ELSE
     12  fe68				  -	      bit	VSYNC
     13  fe68					      ENDIF
     14  fe68				   .CYCLES    SET	.CYCLES - 3
     15  fe68					      ENDIF
     16  fe68
     17  fe68				  -	      REPEAT	.CYCLES / 2
     18  fe68				  -	      nop
     19  fe68					      REPEND
    201  fe68
    202  fe68							; End visible line
      0  fe68					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fe68				   .KERNEL    SET	$B
      2  fe68				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fe68					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    204  fe68
    205  fe68				   KernelB_branch
    206  fe68		       ad 84 02 	      lda	INTIM
    207  fe6b		       d0 cd		      bne	KernelB_early
    208  fe6d		       4c 32 fc 	      jmp	row_after_kernel
    209  fe70
    210  fe70					      rend
    211  fe70				   kernel_2_end
      0  fe70					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fe70				   .STARTA    SET	kernel_2_start
      2  fe70				   .ENDA      SET	kernel_2_end
      3  fe70				   .LEN       SET	$40
      4  fe70				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe70				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe70				  -	      err
      7  fe70					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fe70					      include	"data_sprites.s"
      1  fe70
      2  ff00		       00 00 00 00*	      align	256
      3  ff00
      4  ff00				   Frame0
      5  ff00							; 8 buffer
      6  ff00		       00		      .byte.b	#%00000000
      7  ff01		       00		      .byte.b	#%00000000
      8  ff02		       00		      .byte.b	#%00000000
      9  ff03		       00		      .byte.b	#%00000000
     10  ff04		       00		      .byte.b	#%00000000
     11  ff05		       00		      .byte.b	#%00000000
     12  ff06		       00		      .byte.b	#%00000000
     13  ff07		       00		      .byte.b	#%00000000
     14  ff08
     15  ff08							; 8 rows
     16  ff08		       60		      .byte.b	#%01100000
     17  ff09		       60		      .byte.b	#%01100000
     18  ff0a		       60		      .byte.b	#%01100000
     19  ff0b		       c0		      .byte.b	#%11000000
     20  ff0c		       c0		      .byte.b	#%11000000
     21  ff0d		       f0		      .byte.b	#%11110000
     22  ff0e		       c0		      .byte.b	#%11000000
     23  ff0f		       c0		      .byte.b	#%11000000
     24  ff10
     25  ff10							; 8 buffer
     26  ff10		       00		      .byte.b	#%00000000
     27  ff11		       00		      .byte.b	#%00000000
     28  ff12		       00		      .byte.b	#%00000000
     29  ff13		       00		      .byte.b	#%00000000
     30  ff14		       00		      .byte.b	#%00000000
     31  ff15		       00		      .byte.b	#%00000000
     32  ff16		       00		      .byte.b	#%00000000
     33  ff17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  ff18					      include	"data_levels.s"
      1  ff18					      align	8
      2  ff18
      3  ff18				   shard_map
      4  ff18		       40		      .byte.b	%01000000	; [1, 0, 0]
      5  ff19				   shard_map_end
------- FILE main.s
    136  ff19
    137  fffc					      org	$fffc
    138  fffc		       09 f2		      .word.w	Start
    139  fffe		       09 f2		      .word.w	Start
