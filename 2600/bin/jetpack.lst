------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00a7 ????				      seg.u	Variables
      2 U00a7 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   RamNibbleTemp byte.b
     31 U0090		       00	   RamNibbleVar1 byte.b
     32 U0091		       00	   RamNibbleVar2 byte.b
     33 U0092		       00	   RamZeroByte byte.b
     34 U0093		       00	   RamLowerSixByte byte.b
     35 U0094		       00	   RamStackBkp byte.b
     36 U0095
     37 U0095							; Kernel support
     38 U0095		       00	   RamPF1Value byte.b
     39 U0096		       00	   RamKernelGRP0 byte.b		; temp
     40 U0097		       00	   RamKernelPhpTarget byte.b
     41 U0098		       00	   RamKernelX byte.b
     42 U0099		       00	   RamKernelY byte.b
     43 U009a		       00	   RamKernelGemini1 byte.b
     44 U009b		       00	   RamKernelGemini1Reg byte.b
     45 U009c		       00	   RamKernelGemini2 byte.b
     46 U009d		       00	   RamKernelGemini2Reg byte.b
     47 U009e		       00	   RamKernelGemini3 byte.b
     48 U009f		       00	   RamKernelGemini3Reg byte.b
     49 U00a0		       00	   RamKernelGemini4 byte.b
     50 U00a1		       00	   RamKernelGemini4Reg byte.b
     51 U00a2		       00	   RamKernelGemini5 byte.b
     52 U00a3
     53 U00a3		       00	   BuildKernelX byte.b
     54 U00a4		       00	   BuildKernelY byte.b
     55 U00a5		       00	   BuildKernelRST byte.b
     56 U00a6		       00	   BuildKernelGrp0 byte.b
     57 U00a7
     58 U00a7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59 U00a7
     60 U00a7		       00 10	   ROW_COUNT  =	16
     61 U00a7
     62 U00a7		       00 02	   SIGNAL_LINE =	$02
     63 U00a7
     64 U00a7							; RAM+ memory map
     65 U00a7		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     66 U00a7		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     67 U00a7		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     68 U00a7
     69 U00a7		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     70 U00a7		       f1 40	   RAMP_STORAGE_R =	$f140
     71 U00a7
     72 U00a7							; NUSIZ values
     73 U00a7
     74 U00a7		       00 13	   THREE_COPIES =	%00010011
     75 U00a7
     76 U00a7							; Colors
     77 U00a7
     78 U00a7		       00 42	   COL_BG     equ	$42
     79 U00a7		       00 cc	   COL_EMERALD equ	$CC
     80 U00a7		       00 cc	   COL_EMERALD_2 equ	$CC
     81 U00a7
     82 U00a7							; HMOVE values for missiles
     83 U00a7
     84 U00a7		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     85 U00a7		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     86 U00a7
     87 U00a7		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     88 U00a7		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     89 U00a7
     90 U00a7							; Missile values when 2A=RST
     91 U00a7							; KERNEL_B_MISSILE_SLEEP equ 46
     92 U00a7							; KERNEL_B_MISSILE_HMOVE equ $20
     93 U00a7
     94 U00a7							; Sprite details
     95 U00a7
     96 U00a7		       00 09	   SPRITE_HEIGHT equ	9
     97 U00a7
     98 U00a7		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     99 U00a7		       00 1c	   EMERALD_SP equ	GRP1
    100 U00a7		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    101 U00a7		       00 11	   EMERALD_SP_RESET equ	RESP1
    102 U00a7		       00 13	   EMERALD_MI_RESET equ	RESM1
    103 U00a7		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    104 U00a7		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    105 U00a7		       00 05	   EMERALD_COPIES equ	NUSIZ1
    106 U00a7
    107 U00a7		       00 1b	   JET_SP     equ	GRP0
    108 U00a7		       00 10	   JET_SP_RESET equ	RESP0
    109 U00a7		       00 20	   JET_SP_HMOVE equ	HMP0
    110 U00a7		       00 06	   JET_SP_COLOR equ	COLUP0
    111 U00a7
    112 U00a7							; Spriteend is HEIGHT_OFFSET - YPos
    113 U00a7		       00 c8	   HEIGHT_OFFSET equ	200
    114 U00a7
    115 U00a7							; Compared with YPos
    116 U00a7		       00 3e	   FLOOR_OFFSET equ	62
    117 U00a7		       00 be	   CEILING_OFFSET equ	190
    118 U00a7
    119 U00a7							; Starting player position
    120 U00a7		       00 3e	   YPosStart  equ	62
    121 U00a7		       00 37	   XPosStart  equ	55
    122 U00a7
    123 U00a7							; Top left corner
    124 U00a7							; YPosStart equ 190
    125 U00a7							; XPosStart equ 28
    126 U00a7
    127 U00a7							; Tick (every 8 frames)
    128 U00a7		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00a7
     64 U00a7							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 83		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 89		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 86		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 87		      sta	Speed1
     48  f243		       85 88		      sta	Speed2
     49  f245		       85 8a		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8e		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 92		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 93		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c b9 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 f9 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 f9 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 f9 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 f9 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelRST
      8  f27a							; Gemini 1A
      9  f27a					      ldy	GEM0
     10  f27a					      jsr	KernelA_GenReset
     11  f27a				   .if_1
     12  f27a					      bne	.else_1
     13  f27a					      sec
     14  f27a					      rol
     15  f27a							; Special: Encoding RST0
     16  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     17  f27a					      ldy	#BC_LDA_IMM
     18  f27a					      sty	[KernelA_B - $100]
     19  f27a					      ldy	#%10100000
     20  f27a					      sty	[KernelA_B - $100 + 1]
     21  f27a							; Store 1A in GRP0
     22  f27a					      ldy	GEM1
     23  f27a					      sty	BuildKernelGrp0
     24  f27a							; Gemini 1A is RESPx
     25  f27a					      ldy	#EMERALD_SP_RESET
     26  f27a					      sty	[KernelA_C - $100 + 1]
     27  f27a							; Turn 3-cycle NOP into 4-cycle
     28  f27a					      ldy	#$14
     29  f27a					      sty	[KernelA_D - $100]
     30  f27a					      jmp	.endif_1
     31  f27a							; [BIT DEPTH] #1 If-End @ 1
     32  f27a					      rol
     33  f27a
     34  f27a				   .else_1
     35  f27a					      clc
     36  f27a					      rol
     37  f27a							; Store 0A in GRP0
     38  f27a					      ldy	GEM0
     39  f27a					      sty	BuildKernelGrp0
     40  f27a					      ldy	GEM1
     41  f27a					      jsr	KernelA_GenReset
     42  f27a				   .if_2
     43  f27a					      bne	.else_2
     44  f27a					      sec
     45  f27a					      rol
     46  f27a							; GEM1ASWITCH
     47  f27a					      jmp	.endif_2
     48  f27a							; [BIT DEPTH] #2 If-End @ 2
     49  f27a
     50  f27a				   .else_2
     51  f27a					      clc
     52  f27a					      rol
     53  f27a							; Calculate the 1A value
     54  f27a					      if	SHARD_LUT_RF1
     55  f27a					      ldy	#REFP1
     56  f27a					      else
     57  f27a							; Set opcode
     58  f27a					      ldy	GEM1
     59  f27a					      jsr	KernelA_UpdateRegs
     60  f27a					      sty	RamKernelGemini1
     61  f27a							; Set opcode target
     62  f27a					      ldy	#GRP1
     63  f27a					      endif
     64  f27a					      sty	RamKernelGemini1Reg
     65  f27a							; [BIT DEPTH] #2 *If-End @ 2
     66  f27a							; [BIT DEPTH] #2 Else-End @ 2
     67  f27a				   .endif_2
     68  f27a							; [BIT DEPTH] #1 *If-End @ 1
     69  f27a							; [BIT DEPTH] #1 Else-End @ 2
     70  f27a				   .endif_1
     71  f27a							; Gemini 2A
     72  f27a					      ldy	GEM2
     73  f27a					      jsr	KernelA_GenReset
     74  f27a				   .if_3
     75  f27a					      bne	.else_3
     76  f27a					      sec
     77  f27a					      rol
     78  f27a					      jmp	.endif_3
     79  f27a							; [BIT DEPTH] #3 If-End @ 3
     80  f27a
     81  f27a				   .else_3
     82  f27a					      clc
     83  f27a					      rol
     84  f27a							; Set opcode
     85  f27a					      ldy	GEM2
     86  f27a					      jsr	KernelA_UpdateRegs
     87  f27a					      sty	RamKernelGemini2
     88  f27a							; Set opcode target
     89  f27a					      if	SHARD_LUT_RF1 == 2
     90  f27a					      ldy	#REFP1
     91  f27a					      else
     92  f27a					      ldy	#GRP1
     93  f27a					      endif
     94  f27a					      sty	RamKernelGemini2Reg
     95  f27a							; [BIT DEPTH] #3 *If-End @ 3
     96  f27a							; [BIT DEPTH] #3 Else-End @ 3
     97  f27a				   .endif_3
     98  f27a							; Gemini 3A
     99  f27a					      ldy	GEM3
    100  f27a					      jsr	KernelA_GenReset
    101  f27a				   .if_4
    102  f27a					      bne	.else_4
    103  f27a					      sec
    104  f27a					      rol
    105  f27a					      jmp	.endif_4
    106  f27a							; [BIT DEPTH] #4 If-End @ 4
    107  f27a
    108  f27a				   .else_4
    109  f27a					      clc
    110  f27a					      rol
    111  f27a							; Set opcode
    112  f27a					      ldy	GEM3
    113  f27a					      jsr	KernelA_UpdateRegs
    114  f27a					      sty	RamKernelGemini3
    115  f27a							; Set opcode target
    116  f27a					      if	SHARD_LUT_RF1 == 3
    117  f27a					      ldy	#REFP1
    118  f27a					      else
    119  f27a					      ldy	#GRP1
    120  f27a					      endif
    121  f27a					      sty	RamKernelGemini3Reg
    122  f27a							; [BIT DEPTH] #4 *If-End @ 4
    123  f27a							; [BIT DEPTH] #4 Else-End @ 4
    124  f27a				   .endif_4
    125  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    126  f27a					      rol
    127  f27a					      rol
    128  f27a					      rol
    129  f27a					      rol
    130  f27a					      ENDM
    131  f27a
    132  f27a					      MAC	nibble_gem_kernel_a_2_build
    133  f27a					      lda	#0
    134  f27a							; Gemini 4A
    135  f27a					      ldx	#[SHARD_LUT_VD1 == 4]
    136  f27a				   .if_1
    137  f27a					      beq	.else_1
    138  f27a					      sec
    139  f27a					      rol
    140  f27a							; Set PHP
    141  f27a					      jmp	.endif_1
    142  f27a							; [BIT DEPTH] #1 If-End @ 1
    143  f27a
    144  f27a				   .else_1
    145  f27a					      clc
    146  f27a					      rol
    147  f27a							; FIXME Calculate the 4A value
    148  f27a					      ldy	GEM4
    149  f27a					      jsr	KernelA_UpdateRegs
    150  f27a					      sty	RamKernelGemini4
    151  f27a							; Set PHP
    152  f27a							; [BIT DEPTH] #1 *If-End @ 1
    153  f27a							; [BIT DEPTH] #1 Else-End @ 1
    154  f27a				   .endif_1
    155  f27a							; VD1
    156  f27a							; ldy #SHARD_VD1
    157  f27a							; sty [KernelA_VDEL1 - $100]
    158  f27a							; GRP0
    159  f27a							; ldy #SHARD_GRP0
    160  f27a							; sty [KernelA_VDEL0 - $100]
    161  f27a							; X
    162  f27a							; ldy #SHARD_X
    163  f27a							; sty RamKernelX
    164  f27a							; Y
    165  f27a							; Gemini 5A
    166  f27a							; TODO eventually...?
    167  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    168  f27a					      rol
    169  f27a					      rol
    170  f27a					      rol
    171  f27a					      rol
    172  f27a					      rol
    173  f27a					      rol
    174  f27a					      rol
    175  f27a					      ENDM
    176  f27a
    177  f27a					      MAC	nibble_gem_kernel_b_build
    178  f27a					      lda	#0
    179  f27a							; X
    180  f27a					      ldy	#%00000011
    181  f27a					      sty	RamKernelX
    182  f27a							; Y
    183  f27a					      ldy	#%00110011
    184  f27a					      sty	[KernelB_STY - $100]
    185  f27a
    186  f27a					      cpx	#$00
    187  f27a				   .if_1
    188  f27a					      bcc	.else_1
    189  f27a					      sec
    190  f27a					      rol
    191  f27a							; NIBBLE_WRITE [KernelB_H_W + 0], #BC_STA
    192  f27a							; NIBBLE_WRITE [KernelB_H_W + 1], #EMERALD_SP
    193  f27a							; NIBBLE_WRITE [KernelB_H_W + 2], #BC_PHP
    194  f27a					      jmp	.endif_1
    195  f27a							; [BIT DEPTH] #1 If-End @ 1
    196  f27a
    197  f27a				   .else_1
    198  f27a					      clc
    199  f27a					      rol
    200  f27a							; NIBBLE_WRITE [KernelB_H_W + 0], #BC_PHP
    201  f27a							; NIBBLE_WRITE [KernelB_H_W + 1], #BC_STA
    202  f27a							; NIBBLE_WRITE [KernelB_H_W + 2], #EMERALD_SP_RESET
    203  f27a							; [BIT DEPTH] #1 *If-End @ 1
    204  f27a							; [BIT DEPTH] #1 Else-End @ 1
    205  f27a				   .endif_1
    206  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    207  f27a					      rol
    208  f27a					      rol
    209  f27a					      rol
    210  f27a					      rol
    211  f27a					      rol
    212  f27a					      rol
    213  f27a					      rol
    214  f27a					      ENDM
    215  f27a
    216  f27a
    217  f27a					      MAC	nibble_gem_kernel_a_1
    218  f27a				   .if_1
    219  f27a					      asl
    220  f27a					      bcc	.else_1
    221  f27a					      jmp	.endif_1
    222  f27a				   .else_1
    223  f27a				   .if_2
    224  f27a					      asl
    225  f27a					      bcc	.else_2
    226  f27a					      ldx	#BC_STX
    227  f27a					      stx	[KernelA_D_W + 0]
    228  f27a					      ldx	#RESP1
    229  f27a					      stx	[KernelA_D_W + 1]
    230  f27a					      jmp	.endif_2
    231  f27a				   .else_2
    232  f27a					      ldx	RamKernelGemini1
    233  f27a					      stx	[KernelA_D_W + 0]
    234  f27a					      ldx	RamKernelGemini1Reg
    235  f27a					      stx	[KernelA_D_W + 1]
    236  f27a				   .endif_2
    237  f27a				   .endif_1
    238  f27a				   .if_3
    239  f27a					      asl
    240  f27a					      bcc	.else_3
    241  f27a					      ldx	#NOP_REG
    242  f27a					      stx	[KernelA_E_W + 1 + 0]
    243  f27a					      ldx	#RESP1
    244  f27a					      stx	[KernelA_G_W + 1 + 0]
    245  f27a					      jmp	.endif_3
    246  f27a				   .else_3
    247  f27a					      ldx	#RESP1
    248  f27a					      stx	[KernelA_E_W + 1 + 0]
    249  f27a					      ldx	RamKernelGemini2
    250  f27a					      stx	[KernelA_G_W + 0]
    251  f27a					      ldx	RamKernelGemini2Reg
    252  f27a					      stx	[KernelA_G_W + 1]
    253  f27a				   .endif_3
    254  f27a				   .if_4
    255  f27a					      asl
    256  f27a					      bcc	.else_4
    257  f27a					      ldx	#RESP1
    258  f27a					      stx	[KernelA_H_W + 1 + 0]
    259  f27a					      jmp	.endif_4
    260  f27a				   .else_4
    261  f27a					      ldx	RamKernelGemini3
    262  f27a					      stx	[KernelA_H_W + 0]
    263  f27a					      ldx	RamKernelGemini3Reg
    264  f27a					      stx	[KernelA_H_W + 1]
    265  f27a				   .endif_4
    266  f27a					      ENDM
    267  f27a
    268  f27a					      MAC	nibble_gem_kernel_a_2
    269  f27a				   .if_1
    270  f27a					      asl
    271  f27a					      bcc	.else_1
    272  f27a					      ldx	#BC_STA
    273  f27a					      stx	[[KernelA_I_W + 0] + 0]
    274  f27a					      ldx	#EMERALD_SP_RESET
    275  f27a					      stx	[[KernelA_I_W + 0] + 1]
    276  f27a					      ldx	#BC_STA
    277  f27a					      stx	[[KernelA_J_W + 1] + 0]
    278  f27a					      ldx	#PF1
    279  f27a					      stx	[[KernelA_J_W + 1] + 1]
    280  f27a					      ldx	#BC_PHP
    281  f27a					      stx	[[KernelA_K_W + 1] + 0]
    282  f27a					      ldx	#VDELP1
    283  f27a					      stx	[RamKernelPhpTarget + 0]
    284  f27a					      jmp	.endif_1
    285  f27a				   .else_1
    286  f27a					      ldx	#BC_PHP
    287  f27a					      stx	[[KernelA_I_W + 0] + 0]
    288  f27a					      ldx	#BC_STA
    289  f27a					      stx	[[KernelA_J_W + 0] + 0]
    290  f27a					      ldx	#PF1
    291  f27a					      stx	[[KernelA_J_W + 0] + 1]
    292  f27a					      ldx	RamKernelGemini4
    293  f27a					      stx	[KernelA_K_W + 0]
    294  f27a					      ldx	#EMERALD_SP
    295  f27a					      stx	[KernelA_K_W + 1]
    296  f27a					      ldx	#RESP1
    297  f27a					      stx	[RamKernelPhpTarget + 0]
    298  f27a				   .endif_1
    299  f27a					      ldx	[SHARD_LUT_VD1 == 4 ? GEM4 - GEM1] + GEM1
    300  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    301  f27a					      ldx	BuildKernelGrp0
    302  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    303  f27a					      ldx	BuildKernelX
    304  f27a					      stx	[RamKernelX + 0]
    305  f27a					      ldx	BuildKernelY
    306  f27a					      stx	[[KernelA_STY - $100] + 0]
    307  f27a					      ENDM
    308  f27a
    309  f27a					      MAC	nibble_gem_kernel_b
    310  f27a				   .if_1
    311  f27a					      asl
    312  f27a					      bcc	.else_1
    313  f27a					      ldx	#EMERALD_SP_RESET
    314  f27a					      stx	[RamKernelPhpTarget + 0]
    315  f27a					      jmp	.endif_1
    316  f27a				   .else_1
    317  f27a					      ldx	#EMERALD_SP
    318  f27a					      stx	[RamKernelPhpTarget + 0]
    319  f27a				   .endif_1
    320  f27a					      ENDM
    321  f27a
    322  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a		       00 aa	   SENTINEL   =	%010101010
      4  f27a
      5  f27a							; Reflected for Kernel A
      6  f27a		       00 00	   G00	      =	%00000000
      7  f27a		       00 60	   G01	      =	%01100000
      8  f27a		       00 06	   G10	      =	%00000110
      9  f27a		       00 66	   G11	      =	%01100110
     10  f27a
     11  f27a							; gems:     [g01,g10,g01,g11,g00,g00]
     12  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     13  f27a							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     14  f27a
     15  f27a							; gems:     [g00,g01,g10,g11,g00,g01]
     16  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     17  f27a							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     18  f27a
     19  f27a							; gems:     [g01,g10,g11,g00,g01,g10]
     20  f27a							; cpu:      cpu(g01,g01,false,g10,g11,false)
     21  f27a							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     22  f27a
     23  f27a							; gems:     [g10,g11,g00,g01,g10,g11]
     24  f27a							; cpu:      cpu(g10,g10,false,g11,g01,false)
     25  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     26  f27a
     27  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     28  f27a							; cpu:      cpu(g01,g01,false,g00,g11,false)
     29  f27a							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     30  f27a
     31  f27a							; gems:     [g11,g01,g01,g01,g01,g00]
     32  f27a							; cpu:      cpu(g00,g01,false,g11,g00,false)
     33  f27a							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     34  f27a
     35  f27a							; gems:     [g10,g10,g11,g00,g11,g01]
     36  f27a							; cpu:      cpu(g00,g00,false,g10,g11,false)
     37  f27a							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     38  f27a
     39  f27a							; gems:     [g11,g10,g00,g01,g00,g01]
     40  f27a							; cpu:      cpu(g11,g00,false,g10,g01,false)
     41  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     42  f27a
     43  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     44  f27a							; cpu:      cpu(g00,g01,false,g01,g11,false)
     45  f27a							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     46  f27a
     47  f27a		       00 00	   SHARD_LUT_RF1 =	0
     48  f27a		       00 04	   SHARD_LUT_VD1 =	4
     49  f27a
     50  f27a				   GEM0
     51  f27a		       60		      .byte.b	G01
     52  f27b				   GEM1
     53  f27b		       00		      .byte.b	G00
     54  f27c				   GEM2
     55  f27c		       00		      .byte.b	G00
     56  f27d				   GEM3
     57  f27d		       66		      .byte.b	G11
     58  f27e				   GEM4
     59  f27e		       60		      .byte.b	G01
     60  f27f				   GEM5
     61  f27f		       66		      .byte.b	G11
     62  f280
     63  f280							; Y=Gemini Sprite
     64  f280							; processor flag Z=is RST opcode
     65  f280				   KernelA_GenReset subroutine
     66  f280		       c0 00		      cpy	#$00
     67  f282		       f0 01		      beq	.start
     68  f284		       60		      rts
     69  f285							; Current Gemini = $00
     70  f285				   .start
     71  f285		       a6 a5		      ldx	BuildKernelRST
     72  f287		       e0 aa		      cpx	#SENTINEL
     73  f289		       d0 04		      bne	.set_else
     74  f28b							; We have found the first (and only) RST on this line, set the marker var
     75  f28b		       a2 ff		      ldx	#$ff
     76  f28d		       86 a5		      stx	BuildKernelRST
     77  f28f				   .set_else
     78  f28f		       a2 00		      ldx	#$00
     79  f291		       60		      rts
     80  f292
     81  f292							; Y=Gemini Sprite
     82  f292				   KernelA_UpdateRegs subroutine
     83  f292							; If equal to GRP0, return nop
     84  f292							; FIXME GRP0 might not always be up to date
     85  f292		       c4 a6		      cpy	BuildKernelGrp0
     86  f294		       d0 03		      bne	.set_start
     87  f296							; TODO if this is stx + NOP value, then register doesn't have to change as
     88  f296							; often in GEM1ASWITCH
     89  f296		       a0 04		      ldy	#BC_NOP
     90  f298		       60		      rts
     91  f299
     92  f299				   .set_start
     93  f299		       a6 a3		      ldx	BuildKernelX
     94  f29b		       e0 aa		      cpx	#SENTINEL
     95  f29d		       d0 04		      bne	.set_else
     96  f29f		       84 a3		      sty	BuildKernelX
     97  f2a1		       f0 08		      beq	.set_end
     98  f2a3				   .set_else
     99  f2a3		       a6 a4		      ldx	BuildKernelY
    100  f2a5		       e0 aa		      cpx	#SENTINEL
    101  f2a7		       d0 02		      bne	.set_end
    102  f2a9		       84 a4		      sty	BuildKernelY
    103  f2ab				   .set_end
    104  f2ab
    105  f2ab		       c4 a3		      cpy	BuildKernelX
    106  f2ad		       d0 03		      bne	.op_else
    107  f2af		       a0 86		      ldy	#BC_STX
    108  f2b1		       60		      rts
    109  f2b2				   .op_else
    110  f2b2		       c4 a4		      cpy	BuildKernelY
    111  f2b4		       d0 02		      bne	.op_end
    112  f2b6		       a0 84		      ldy	#BC_STY
    113  f2b8				   .op_end
    114  f2b8		       60		      rts
    115  f2b9
    116  f2b9							; Vertical Sync
    117  f2b9				   VerticalSync subroutine
      0  f2b9					      VERTICAL_SYNC
      1  f2b9		       a9 0e		      lda	#%1110
      2  f2bb		       85 02	   .VSLP1     sta	WSYNC
      3  f2bd		       85 00		      sta	VSYNC
      4  f2bf		       4a		      lsr
      5  f2c0		       d0 f9		      bne	.VSLP1
    119  f2c2
    120  f2c2				   FrameStart subroutine
      0  f2c2					      ASSERT_RUNTIME	"_scan == #0"
      1  f2c2				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2c2  && !(  _scan == #0  ) }
      2  f2c2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    122  f2c2
    123  f2c2				   VerticalBlank subroutine
      0  f2c2					      TIMER_SETUP	37
      1  f2c2				   .lines     SET	37
      2  f2c2		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2c4		       85 02		      sta	WSYNC
      4  f2c6		       8d 96 02 	      sta	TIM64T
    125  f2c9
    126  f2c9							; Scanline counter
    127  f2c9		       a9 10		      lda	#ROW_COUNT
    128  f2cb		       85 82		      sta	LoopCount
    129  f2cd
    130  f2cd							; Frame counter
    131  f2cd		       e6 83		      inc	FrameCount
    132  f2cf
    133  f2cf							; Skip every 8 frames for increasing demo index
    134  f2cf		       a5 83		      lda	FrameCount
    135  f2d1		       29 07		      and	#FrameSkip
    136  f2d3		       c9 07		      cmp	#FrameSkip
    137  f2d5		       d0 0d		      bne	.next_next_thing
    138  f2d7
    139  f2d7		       18		      clc
    140  f2d8		       a5 8e		      lda	ROW_DEMO_INDEX
    141  f2da		       69 04		      adc	#4
    142  f2dc		       c9 68		      cmp	#[level_01_end - level_01]
    143  f2de		       90 02		      bcc	.next_thing_local
    144  f2e0		       a9 00		      lda	#0
    145  f2e2				   .next_thing_local
    146  f2e2		       85 8e		      sta	ROW_DEMO_INDEX
    147  f2e4				   .next_next_thing
    148  f2e4		       85 02		      sta	WSYNC
    149  f2e6
    150  f2e6							; Positioning
      0  f2e6					      SLEEP	40
      1  f2e6				   .CYCLES    SET	40
      2  f2e6
      3  f2e6				  -	      IF	.CYCLES < 2
      4  f2e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2e6				  -	      ERR
      6  f2e6					      ENDIF
      7  f2e6
      8  f2e6				  -	      IF	.CYCLES & 1
      9  f2e6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2e6				  -	      nop	0
     11  f2e6				  -	      ELSE
     12  f2e6				  -	      bit	VSYNC
     13  f2e6				  -	      ENDIF
     14  f2e6				  -.CYCLES    SET	.CYCLES - 3
     15  f2e6					      ENDIF
     16  f2e6
     17  f2e6					      REPEAT	.CYCLES / 2
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     17  f2ec					      REPEND
     18  f2ed		       ea		      nop
     17  f2ed					      REPEND
     18  f2ee		       ea		      nop
     17  f2ee					      REPEND
     18  f2ef		       ea		      nop
     17  f2ef					      REPEND
     18  f2f0		       ea		      nop
     17  f2f0					      REPEND
     18  f2f1		       ea		      nop
     17  f2f1					      REPEND
     18  f2f2		       ea		      nop
     17  f2f2					      REPEND
     18  f2f3		       ea		      nop
     17  f2f3					      REPEND
     18  f2f4		       ea		      nop
     17  f2f4					      REPEND
     18  f2f5		       ea		      nop
     17  f2f5					      REPEND
     18  f2f6		       ea		      nop
     17  f2f6					      REPEND
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     19  f2fa					      REPEND
    152  f2fa		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    153  f2fc		       85 02		      sta	WSYNC
    154  f2fe
    155  f2fe							; Misc
    156  f2fe		       a9 00		      lda	#00
    157  f300		       85 1e		      sta	EMERALD_MI_ENABLE
    158  f302
    159  f302							; Assign dervied SpriteEnd value
    160  f302		       18		      clc
    161  f303		       a9 c8		      lda	#HEIGHT_OFFSET
    162  f305		       e5 89		      sbc	YPos
    163  f307		       85 85		      sta	SpriteEnd
    164  f309
    165  f309							; Player 1
    166  f309		       a5 86		      lda	XPos
    167  f30b		       a2 00		      ldx	#0
    168  f30d		       20 ba f6 	      jsr	SetHorizPos
    169  f310
    170  f310				   frame_setup subroutine
    171  f310							; Kernel A or B
    172  f310		       a9 01		      lda	#01
    173  f312		       25 83		      and	FrameCount
    174  f314		       d0 24		      bne	frame_setup_kernel_b
    175  f316
    176  f316				   frame_setup_kernel_a subroutine
    177  f316							; Load kernel into CBSRAM
    178  f316		       20 56 f2 	      jsr	LoadKernelA
    179  f319
    180  f319							; Move missile
    181  f319		       85 02		      sta	WSYNC
      0  f31b					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f31b				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f31b
      3  f31b				  -	      IF	.CYCLES < 2
      4  f31b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f31b				  -	      ERR
      6  f31b					      ENDIF
      7  f31b
      8  f31b				  -	      IF	.CYCLES & 1
      9  f31b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f31b				  -	      nop	0
     11  f31b				  -	      ELSE
     12  f31b				  -	      bit	VSYNC
     13  f31b				  -	      ENDIF
     14  f31b				  -.CYCLES    SET	.CYCLES - 3
     15  f31b					      ENDIF
     16  f31b
     17  f31b					      REPEAT	.CYCLES / 2
     18  f31b		       ea		      nop
     17  f31b					      REPEND
     18  f31c		       ea		      nop
     17  f31c					      REPEND
     18  f31d		       ea		      nop
     17  f31d					      REPEND
     18  f31e		       ea		      nop
     17  f31e					      REPEND
     18  f31f		       ea		      nop
     17  f31f					      REPEND
     18  f320		       ea		      nop
     17  f320					      REPEND
     18  f321		       ea		      nop
     17  f321					      REPEND
     18  f322		       ea		      nop
     17  f322					      REPEND
     18  f323		       ea		      nop
     17  f323					      REPEND
     18  f324		       ea		      nop
     17  f324					      REPEND
     18  f325		       ea		      nop
     17  f325					      REPEND
     18  f326		       ea		      nop
     17  f326					      REPEND
     18  f327		       ea		      nop
     17  f327					      REPEND
     18  f328		       ea		      nop
     19  f329					      REPEND
    183  f329		       85 13		      sta	EMERALD_MI_RESET
    184  f32b		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    185  f32d		       85 23		      sta	EMERALD_MI_HMOVE
    186  f32f
    187  f32f							; DEBUG: Set per-kernel color
    188  f32f		       a2 cc		      ldx	#COL_EMERALD
    189  f331		       86 07		      stx	EMERALD_SP_COLOR
    190  f333
    191  f333							; Set reflection for Jetpack.
    192  f333		       a9 ff		      lda	#%11111111
    193  f335		       85 0c		      sta	REFP1
    194  f337
    195  f337		       4c 67 f3 	      jmp	frame_setup_complete
    196  f33a
    197  f33a				   frame_setup_kernel_b subroutine
    198  f33a							; Load kernel into CBSRAM
    199  f33a		       20 68 f2 	      jsr	LoadKernelB
    200  f33d
    201  f33d							; Move missile
    202  f33d		       85 02		      sta	WSYNC
      0  f33f					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f33f				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f33f
      3  f33f				  -	      IF	.CYCLES < 2
      4  f33f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f33f				  -	      ERR
      6  f33f					      ENDIF
      7  f33f
      8  f33f					      IF	.CYCLES & 1
      9  f33f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f33f		       04 00		      nop	0
     11  f341				  -	      ELSE
     12  f341				  -	      bit	VSYNC
     13  f341					      ENDIF
     14  f341				   .CYCLES    SET	.CYCLES - 3
     15  f341					      ENDIF
     16  f341
     17  f341					      REPEAT	.CYCLES / 2
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     17  f348					      REPEND
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     17  f355					      REPEND
     18  f356		       ea		      nop
     17  f356					      REPEND
     18  f357		       ea		      nop
     17  f357					      REPEND
     18  f358		       ea		      nop
     19  f359					      REPEND
    204  f359		       85 13		      sta	EMERALD_MI_RESET
    205  f35b		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    206  f35d		       85 23		      sta	EMERALD_MI_HMOVE
    207  f35f
    208  f35f							; DEBUG: Set per-kernel color
    209  f35f		       a2 e0		      ldx	#$e0
    210  f361		       86 07		      stx	EMERALD_SP_COLOR
    211  f363
    212  f363							; Disable reflection for Jetpack.
    213  f363		       a9 ff		      lda	#%11111111
    214  f365		       85 0c		      sta	REFP1
    215  f367
    216  f367				   frame_setup_complete
    217  f367
    218  f367		       ad 7c fa 	      lda	shard_map
    219  f36a		       a0 01		      ldy	#1	; gemini counter, starting at 1
    220  f36c				   gemini_builder
    221  f36c		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    222  f36e		       d0 00		      bne	.no_vd0
    223  f370				   .no_vd0
    224  f370
    225  f370
    226  f370				   nibble_precompile_gem_kernel
    227  f370				   DBG_NIBBLE
    228  f370		       00 a9	   BC_LDA_IMM =	$a9
    229  f370		       00 85	   BC_STA     =	$85
    230  f370		       00 86	   BC_STX     =	$86
    231  f370		       00 84	   BC_STY     =	$84
    232  f370		       00 08	   BC_PHP     =	$08
    233  f370		       00 04	   BC_NOP     =	$04
    234  f370
    235  f370		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    236  f370
    237  f370				   KernelA_D_W EQM	[KernelA_D - $100]
    238  f370				   KernelA_E_W EQM	[KernelA_E - $100]
    239  f370				   KernelA_G_W EQM	[KernelA_G - $100]
    240  f370				   KernelA_H_W EQM	[KernelA_H - $100]
    241  f370				   KernelA_I_W EQM	[KernelA_I - $100]
    242  f370				   KernelA_J_W EQM	[KernelA_J - $100]
    243  f370				   KernelA_K_W EQM	[KernelA_K - $100]
    244  f370
    245  f370				   KernelB_H_W EQM	[KernelB_H - $100]
    246  f370
    247  f370							; Nibble Kernel A
      0  f370					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U0077 ????				      seg.U	ignoreme
    249 U0077 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    250 U0079 ????	       86 a3		      stx	BuildKernelX
    251 U007b ????	       86 a4		      stx	BuildKernelY
    252 U007d ????	       86 a5		      stx	BuildKernelRST
    253 U007f ????
    254 U007f ????						; Gemini 1A
    255 U007f ????	       ac 7a f2 	      ldy	GEM0
    256 U0082 ????	       20 80 f2 	      jsr	KernelA_GenReset
      0 U0085 ????				      NIBBLE_IF	eq
    258 U0085 ????						; Special: Encoding RST0
    259 U0085 ????						; Rewrite lda RamKernelPF1 to be #immediate
    260 U0085 ????	       a0 a9		      ldy	#BC_LDA_IMM
    261 U0087 ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    262 U008a ????	       a0 a0		      ldy	#%10100000
    263 U008c ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    264 U008f ????						; Store 1A in GRP0
    265 U008f ????	       ac 7b f2 	      ldy	GEM1
    266 U0092 ????	       84 a6		      sty	BuildKernelGrp0
    267 U0094 ????						; Gemini 1A is RESPx
    268 U0094 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    269 U0096 ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    270 U0099 ????						; Turn 3-cycle NOP into 4-cycle
    271 U0099 ????	       a0 14		      ldy	#$14	; TODO what is this
    272 U009b ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U009e ????				      NIBBLE_ELSE
    274 U009e ????						; Store 0A in GRP0
    275 U009e ????	       ac 7a f2 	      ldy	GEM0
    276 U00a1 ????	       84 a6		      sty	BuildKernelGrp0
    277 U00a3 ????
    278 U00a3 ????	       ac 7b f2 	      ldy	GEM1
    279 U00a6 ????	       20 80 f2 	      jsr	KernelA_GenReset
      0 U00a9 ????				      NIBBLE_IF	eq
    281 U00a9 ????						; GEM1ASWITCH
      0 U00a9 ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U00a9 ????				      NIBBLE_ELSE
    284 U00a9 ????						; Calculate the 1A value
    285 U00a9 ????			  -	      if	SHARD_LUT_RF1
    286 U00a9 ????			  -	      ldy	#REFP1
    287 U00a9 ????				      else
    288 U00a9 ????						; Set opcode
    289 U00a9 ????	       ac 7b f2 	      ldy	GEM1
    290 U00ac ????	       20 92 f2 	      jsr	KernelA_UpdateRegs
    291 U00af ????	       84 9a		      sty	RamKernelGemini1
    292 U00b1 ????
    293 U00b1 ????						; Set opcode target
    294 U00b1 ????	       a0 1c		      ldy	#GRP1
    295 U00b3 ????				      endif
    296 U00b3 ????	       84 9b		      sty	RamKernelGemini1Reg
    297 U00b5 ????
      0 U00b5 ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U00b5 ????				      NIBBLE_END_IF
      0 U00b5 ????				      NIBBLE_END_IF
    301 U00b5 ????
    302 U00b5 ????						; Gemini 2A
    303 U00b5 ????	       ac 7c f2 	      ldy	GEM2
    304 U00b8 ????	       20 80 f2 	      jsr	KernelA_GenReset
      0 U00bb ????				      NIBBLE_IF	eq
      0 U00bb ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U00bb ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U00bb ????				      NIBBLE_ELSE
    309 U00bb ????						; Set opcode
    310 U00bb ????	       ac 7c f2 	      ldy	GEM2
    311 U00be ????	       20 92 f2 	      jsr	KernelA_UpdateRegs
    312 U00c1 ????	       84 9c		      sty	RamKernelGemini2
    313 U00c3 ????
    314 U00c3 ????						; Set opcode target
    315 U00c3 ????			  -	      if	SHARD_LUT_RF1 == 2
    316 U00c3 ????			  -	      ldy	#REFP1
    317 U00c3 ????				      else
    318 U00c3 ????	       a0 1c		      ldy	#GRP1
    319 U00c5 ????				      endif
    320 U00c5 ????	       84 9d		      sty	RamKernelGemini2Reg
    321 U00c7 ????
      0 U00c7 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U00c7 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U00c7 ????				      NIBBLE_END_IF
    325 U00c7 ????
    326 U00c7 ????						; Gemini 3A
    327 U00c7 ????	       ac 7d f2 	      ldy	GEM3
    328 U00ca ????	       20 80 f2 	      jsr	KernelA_GenReset
      0 U00cd ????				      NIBBLE_IF	eq
      0 U00cd ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U00cd ????				      NIBBLE_ELSE
    332 U00cd ????						; Set opcode
    333 U00cd ????	       ac 7d f2 	      ldy	GEM3
    334 U00d0 ????	       20 92 f2 	      jsr	KernelA_UpdateRegs
    335 U00d3 ????	       84 9e		      sty	RamKernelGemini3
    336 U00d5 ????
    337 U00d5 ????						; Set opcode target
    338 U00d5 ????			  -	      if	SHARD_LUT_RF1 == 3
    339 U00d5 ????			  -	      ldy	#REFP1
    340 U00d5 ????				      else
    341 U00d5 ????	       a0 1c		      ldy	#GRP1
    342 U00d7 ????				      endif
    343 U00d7 ????	       84 9f		      sty	RamKernelGemini3Reg
    344 U00d9 ????
      0 U00d9 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U00d9 ????				      NIBBLE_END_IF
      0 U00d9 ????				      NIBBLE_END_KERNEL
      1  f370					      seg	CodeBank3
    348  f370
      0  f370					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U00d9 ????				      seg.U	ignoreme
    350 U00d9 ????						; Gemini 4A
    351 U00d9 ????	       a2 01		      ldx	#[SHARD_LUT_VD1 == 4]
      0 U00db ????				      NIBBLE_IF	ne
      0 U00db ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U00db ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U00db ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    356 U00db ????
    357 U00db ????						; Set PHP
      0 U00db ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
      0 U00db ????				      NIBBLE_ELSE
    360 U00db ????						; FIXME Calculate the 4A value
    361 U00db ????	       ac 7e f2 	      ldy	GEM4
    362 U00de ????	       20 92 f2 	      jsr	KernelA_UpdateRegs
    363 U00e1 ????	       84 a0		      sty	RamKernelGemini4
    364 U00e3 ????
      0 U00e3 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U00e3 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U00e3 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    368 U00e3 ????
    369 U00e3 ????						; Set PHP
      0 U00e3 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U00e3 ????				      NIBBLE_END_IF
    372 U00e3 ????
    373 U00e3 ????						; VD1
    374 U00e3 ????						; ldy #SHARD_VD1
    375 U00e3 ????						; sty [KernelA_VDEL1 - $100]
      0 U00e3 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], [SHARD_LUT_VD1 == 4 ? GEM4 - GEM1] + GEM1
    377 U00e3 ????						; GRP0
    378 U00e3 ????						; ldy #SHARD_GRP0
    379 U00e3 ????						; sty [KernelA_VDEL0 - $100]
      0 U00e3 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    381 U00e3 ????						; X
    382 U00e3 ????						; ldy #SHARD_X
    383 U00e3 ????						; sty RamKernelX
      0 U00e3 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    385 U00e3 ????						; Y
      0 U00e3 ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    387 U00e3 ????
    388 U00e3 ????						; Gemini 5A
    389 U00e3 ????						; TODO eventually...?
      0 U00e3 ????				      NIBBLE_END_KERNEL
      1  f370					      seg	CodeBank3
    391  f370
    392  f370							; Nibble Kernel B
      0  f370					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U00e3 ????				      seg.U	ignoreme
    394 U00e3 ????						; X
    395 U00e3 ????	       a0 03		      ldy	#%00000011
    396 U00e5 ????	       84 98		      sty	RamKernelX
    397 U00e7 ????						; Y
    398 U00e7 ????	       a0 33		      ldy	#%00110011
    399 U00e9 ????	       8c 11 f0 	      sty	[KernelB_STY - $100]
    400 U00ec ????
    401 U00ec ????	       e0 00		      cpx	#$00
      0 U00ee ????				      NIBBLE_IF	cs
      0 U00ee ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP_RESET
    404 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 0], #BC_STA
    405 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 1], #EMERALD_SP
    406 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 2], #BC_PHP
      0 U00ee ????				      NIBBLE_ELSE
      0 U00ee ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
    409 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 0], #BC_PHP
    410 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 1], #BC_STA
    411 U00ee ????						; NIBBLE_WRITE [KernelB_H_W + 2], #EMERALD_SP_RESET
      0 U00ee ????				      NIBBLE_END_IF
      0 U00ee ????				      NIBBLE_END_KERNEL
      1  f370					      seg	CodeBank3
    414  f370
    415  f370							; TODO do this for all rows
    416  f370				   DBG_NIBBLE_BUILD subroutine
    417  f370		       ae 00 f1 	      ldx	$f100
    418  f373		       e0 0a		      cpx	#$a
    419  f375		       f0 03		      beq	[. + 5]
    420  f377		       4c 2a f4 	      jmp	.kernel_b
    421  f37a				   .kernel_a
      0  f37a					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f37a		       a9 00		      lda	#0
      2  f37c		       a2 aa		      ldx	#SENTINEL
      3  f37e		       86 a3		      stx	BuildKernelX
      4  f380		       86 a4		      stx	BuildKernelY
      5  f382		       86 a5		      stx	BuildKernelRST
      6  f384
      7  f384		       ac 7a f2 	      ldy	GEM0
      8  f387		       20 80 f2 	      jsr	KernelA_GenReset
      9  f38a				   .if_1
     10  f38a		       d0 1f		      bne	.else_1
     11  f38c		       38		      sec
     12  f38d		       2a		      rol
     13  f38e
     14  f38e
     15  f38e		       a0 a9		      ldy	#BC_LDA_IMM
     16  f390		       8c 16 f0 	      sty	[KernelA_B - $100]
     17  f393		       a0 a0		      ldy	#%10100000
     18  f395		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     19  f398
     20  f398		       ac 7b f2 	      ldy	GEM1
     21  f39b		       84 a6		      sty	BuildKernelGrp0
     22  f39d
     23  f39d		       a0 11		      ldy	#EMERALD_SP_RESET
     24  f39f		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     25  f3a2
     26  f3a2		       a0 14		      ldy	#$14
     27  f3a4		       8c 1a f0 	      sty	[KernelA_D - $100]
     28  f3a7		       4c cd f3 	      jmp	.endif_1
     29  f3aa
     30  f3aa		       2a		      rol
     31  f3ab
     32  f3ab				   .else_1
     33  f3ab		       18		      clc
     34  f3ac		       2a		      rol
     35  f3ad
     36  f3ad		       ac 7a f2 	      ldy	GEM0
     37  f3b0		       84 a6		      sty	BuildKernelGrp0
     38  f3b2		       ac 7b f2 	      ldy	GEM1
     39  f3b5		       20 80 f2 	      jsr	KernelA_GenReset
     40  f3b8				   .if_2
     41  f3b8		       d0 05		      bne	.else_2
     42  f3ba		       38		      sec
     43  f3bb		       2a		      rol
     44  f3bc
     45  f3bc		       4c cd f3 	      jmp	.endif_2
     46  f3bf
     47  f3bf
     48  f3bf				   .else_2
     49  f3bf		       18		      clc
     50  f3c0		       2a		      rol
     51  f3c1
     52  f3c1				  -	      if	SHARD_LUT_RF1
     53  f3c1				  -	      ldy	#REFP1
     54  f3c1					      else
     55  f3c1
     56  f3c1		       ac 7b f2 	      ldy	GEM1
     57  f3c4		       20 92 f2 	      jsr	KernelA_UpdateRegs
     58  f3c7		       84 9a		      sty	RamKernelGemini1
     59  f3c9
     60  f3c9		       a0 1c		      ldy	#GRP1
     61  f3cb					      endif
     62  f3cb		       84 9b		      sty	RamKernelGemini1Reg
     63  f3cd
     64  f3cd
     65  f3cd				   .endif_2
     66  f3cd
     67  f3cd
     68  f3cd				   .endif_1
     69  f3cd
     70  f3cd		       ac 7c f2 	      ldy	GEM2
     71  f3d0		       20 80 f2 	      jsr	KernelA_GenReset
     72  f3d3				   .if_3
     73  f3d3		       d0 05		      bne	.else_3
     74  f3d5		       38		      sec
     75  f3d6		       2a		      rol
     76  f3d7		       4c e8 f3 	      jmp	.endif_3
     77  f3da
     78  f3da
     79  f3da				   .else_3
     80  f3da		       18		      clc
     81  f3db		       2a		      rol
     82  f3dc
     83  f3dc		       ac 7c f2 	      ldy	GEM2
     84  f3df		       20 92 f2 	      jsr	KernelA_UpdateRegs
     85  f3e2		       84 9c		      sty	RamKernelGemini2
     86  f3e4
     87  f3e4				  -	      if	SHARD_LUT_RF1 == 2
     88  f3e4				  -	      ldy	#REFP1
     89  f3e4					      else
     90  f3e4		       a0 1c		      ldy	#GRP1
     91  f3e6					      endif
     92  f3e6		       84 9d		      sty	RamKernelGemini2Reg
     93  f3e8
     94  f3e8
     95  f3e8				   .endif_3
     96  f3e8
     97  f3e8		       ac 7d f2 	      ldy	GEM3
     98  f3eb		       20 80 f2 	      jsr	KernelA_GenReset
     99  f3ee				   .if_4
    100  f3ee		       d0 05		      bne	.else_4
    101  f3f0		       38		      sec
    102  f3f1		       2a		      rol
    103  f3f2		       4c 03 f4 	      jmp	.endif_4
    104  f3f5
    105  f3f5
    106  f3f5				   .else_4
    107  f3f5		       18		      clc
    108  f3f6		       2a		      rol
    109  f3f7
    110  f3f7		       ac 7d f2 	      ldy	GEM3
    111  f3fa		       20 92 f2 	      jsr	KernelA_UpdateRegs
    112  f3fd		       84 9e		      sty	RamKernelGemini3
    113  f3ff
    114  f3ff				  -	      if	SHARD_LUT_RF1 == 3
    115  f3ff				  -	      ldy	#REFP1
    116  f3ff					      else
    117  f3ff		       a0 1c		      ldy	#GRP1
    118  f401					      endif
    119  f401		       84 9f		      sty	RamKernelGemini3Reg
    120  f403
    121  f403
    122  f403				   .endif_4
    123  f403
    124  f403		       2a		      rol
    125  f404		       2a		      rol
    126  f405		       2a		      rol
    127  f406		       2a		      rol
    423  f407		       85 90		      sta	RamNibbleVar1
      0  f409					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f409		       a9 00		      lda	#0
      2  f40b
      3  f40b		       a2 01		      ldx	#[SHARD_LUT_VD1 == 4]
      4  f40d				   .if_1
      5  f40d		       f0 05		      beq	.else_1
      6  f40f		       38		      sec
      7  f410		       2a		      rol
      8  f411
      9  f411		       4c 1e f4 	      jmp	.endif_1
     10  f414
     11  f414
     12  f414				   .else_1
     13  f414		       18		      clc
     14  f415		       2a		      rol
     15  f416
     16  f416		       ac 7e f2 	      ldy	GEM4
     17  f419		       20 92 f2 	      jsr	KernelA_UpdateRegs
     18  f41c		       84 a0		      sty	RamKernelGemini4
     19  f41e
     20  f41e
     21  f41e
     22  f41e				   .endif_1
     23  f41e
     24  f41e
     25  f41e
     26  f41e
     27  f41e
     28  f41e
     29  f41e
     30  f41e
     31  f41e
     32  f41e
     33  f41e
     34  f41e
     35  f41e
     36  f41e		       2a		      rol
     37  f41f		       2a		      rol
     38  f420		       2a		      rol
     39  f421		       2a		      rol
     40  f422		       2a		      rol
     41  f423		       2a		      rol
     42  f424		       2a		      rol
    425  f425		       85 91		      sta	RamNibbleVar2
    426  f427		       4c 49 f4 	      jmp	.next
    427  f42a				   .kernel_b
      0  f42a					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f42a		       a9 00		      lda	#0
      2  f42c
      3  f42c		       a0 03		      ldy	#%00000011
      4  f42e		       84 98		      sty	RamKernelX
      5  f430
      6  f430		       a0 33		      ldy	#%00110011
      7  f432		       8c 11 f0 	      sty	[KernelB_STY - $100]
      8  f435
      9  f435		       e0 00		      cpx	#$00
     10  f437				   .if_1
     11  f437		       90 05		      bcc	.else_1
     12  f439		       38		      sec
     13  f43a		       2a		      rol
     14  f43b
     15  f43b
     16  f43b
     17  f43b		       4c 40 f4 	      jmp	.endif_1
     18  f43e
     19  f43e
     20  f43e				   .else_1
     21  f43e		       18		      clc
     22  f43f		       2a		      rol
     23  f440
     24  f440
     25  f440
     26  f440
     27  f440
     28  f440				   .endif_1
     29  f440
     30  f440		       2a		      rol
     31  f441		       2a		      rol
     32  f442		       2a		      rol
     33  f443		       2a		      rol
     34  f444		       2a		      rol
     35  f445		       2a		      rol
     36  f446		       2a		      rol
    429  f447		       85 90		      sta	RamNibbleVar1
    430  f449				   .next
    431  f449
    432  f449							; TODO move this into the row kernel
    433  f449				   DBG_NIBBLE_RUN subroutine
    434  f449		       ae 00 f1 	      ldx	$f100
    435  f44c		       e0 0a		      cpx	#$a
    436  f44e		       f0 03		      beq	[. + 5]
    437  f450		       4c 02 f5 	      jmp	.kernel_b
    438  f453				   .kernel_a
    439  f453		       a5 90		      lda	RamNibbleVar1
      0  f455					      NIBBLE_gem_kernel_a_1
      1  f455				   .if_1
      2  f455		       0a		      asl
      3  f456		       90 03		      bcc	.else_1
      4  f458		       4c 75 f4 	      jmp	.endif_1
      5  f45b				   .else_1
      6  f45b				   .if_2
      7  f45b		       0a		      asl
      8  f45c		       90 0d		      bcc	.else_2
      9  f45e		       a2 86		      ldx	#BC_STX
     10  f460		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f463		       a2 11		      ldx	#RESP1
     12  f465		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f468		       4c 75 f4 	      jmp	.endif_2
     14  f46b				   .else_2
     15  f46b		       a6 9a		      ldx	RamKernelGemini1
     16  f46d		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f470		       a6 9b		      ldx	RamKernelGemini1Reg
     18  f472		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f475				   .endif_2
     20  f475				   .endif_1
     21  f475				   .if_3
     22  f475		       0a		      asl
     23  f476		       90 0d		      bcc	.else_3
     24  f478		       a2 79		      ldx	#NOP_REG
     25  f47a		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f47d		       a2 11		      ldx	#RESP1
     27  f47f		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f482		       4c 94 f4 	      jmp	.endif_3
     29  f485				   .else_3
     30  f485		       a2 11		      ldx	#RESP1
     31  f487		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f48a		       a6 9c		      ldx	RamKernelGemini2
     33  f48c		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f48f		       a6 9d		      ldx	RamKernelGemini2Reg
     35  f491		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f494				   .endif_3
     37  f494				   .if_4
     38  f494		       0a		      asl
     39  f495		       90 08		      bcc	.else_4
     40  f497		       a2 11		      ldx	#RESP1
     41  f499		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f49c		       4c a9 f4 	      jmp	.endif_4
     43  f49f				   .else_4
     44  f49f		       a6 9e		      ldx	RamKernelGemini3
     45  f4a1		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f4a4		       a6 9f		      ldx	RamKernelGemini3Reg
     47  f4a6		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f4a9				   .endif_4
    441  f4a9		       a5 91		      lda	RamNibbleVar2
      0  f4ab					      NIBBLE_gem_kernel_a_2
      1  f4ab				   .if_1
      2  f4ab		       0a		      asl
      3  f4ac		       90 20		      bcc	.else_1
      4  f4ae		       a2 85		      ldx	#BC_STA
      5  f4b0		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f4b3		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f4b5		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f4b8		       a2 85		      ldx	#BC_STA
      9  f4ba		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f4bd		       a2 0e		      ldx	#PF1
     11  f4bf		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f4c2		       a2 08		      ldx	#BC_PHP
     13  f4c4		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f4c7		       a2 26		      ldx	#VDELP1
     15  f4c9		       86 97		      stx	[RamKernelPhpTarget + 0]
     16  f4cb		       4c eb f4 	      jmp	.endif_1
     17  f4ce				   .else_1
     18  f4ce		       a2 08		      ldx	#BC_PHP
     19  f4d0		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f4d3		       a2 85		      ldx	#BC_STA
     21  f4d5		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f4d8		       a2 0e		      ldx	#PF1
     23  f4da		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f4dd		       a6 a0		      ldx	RamKernelGemini4
     25  f4df		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f4e2		       a2 1c		      ldx	#EMERALD_SP
     27  f4e4		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f4e7		       a2 11		      ldx	#RESP1
     29  f4e9		       86 97		      stx	[RamKernelPhpTarget + 0]
     30  f4eb				   .endif_1
     31  f4eb		       ae 7e f2 	      ldx	[SHARD_LUT_VD1 == 4 ? GEM4 - GEM1] + GEM1
     32  f4ee		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f4f1		       a6 a6		      ldx	BuildKernelGrp0
     34  f4f3		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f4f6		       a6 a3		      ldx	BuildKernelX
     36  f4f8		       86 98		      stx	[RamKernelX + 0]
     37  f4fa		       a6 a4		      ldx	BuildKernelY
     38  f4fc		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    443  f4ff		       4c 12 f5 	      jmp	.next
    444  f502				   .kernel_b
    445  f502		       a5 90		      lda	RamNibbleVar1
      0  f504					      NIBBLE_gem_kernel_b
      1  f504				   .if_1
      2  f504		       0a		      asl
      3  f505		       90 07		      bcc	.else_1
      4  f507		       a2 11		      ldx	#EMERALD_SP_RESET
      5  f509		       86 97		      stx	[RamKernelPhpTarget + 0]
      6  f50b		       4c 12 f5 	      jmp	.endif_1
      7  f50e				   .else_1
      8  f50e		       a2 1c		      ldx	#EMERALD_SP
      9  f510		       86 97		      stx	[RamKernelPhpTarget + 0]
     10  f512				   .endif_1
    447  f512				   .next
    448  f512
    449  f512				   VerticalBlankEnd
    450  f512							; Wait until the end of Vertical blank.
      0  f512					      TIMER_WAIT
      1  f512				   .waittimer
      2  f512		       ad 84 02 	      lda	INTIM
      3  f515		       d0 fb		      bne	.waittimer
      4  f517		       85 02		      sta	WSYNC
      0  f519					      ASSERT_RUNTIME	"_scan == #37"
      1  f519				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f519  && !(  _scan == #37  ) }
      2  f519					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    453  f519
    454  f519							; Save stack pointer
    455  f519		       ba		      tsx
    456  f51a		       86 94		      stx	RamStackBkp
    457  f51c
    458  f51c							; Start rendering the kernel.
    459  f51c		       4c ce f6 	      jmp	KernelBorder
    460  f51f
    461  f600		       00 00 00 00*	      align	256	; TODO why
    462  f600
    463  f600				   FrameEnd   subroutine
    464  f600		       85 02		      sta	WSYNC
    465  f602
    466  f602							; Blank all background colors.
    467  f602		       a9 00		      lda	#0
    468  f604		       85 08		      sta	COLUPF
    469  f606		       85 0f		      sta	PF2
    470  f608		       85 0e		      sta	PF1
    471  f60a		       85 1c		      sta	EMERALD_SP
    472  f60c
    473  f60c							; Guide lines (2x)
    474  f60c		       a9 02		      lda	#SIGNAL_LINE
    475  f60e		       85 09		      sta	COLUBK
    476  f610					      REPEAT	6
    477  f610		       85 02		      sta	WSYNC
    476  f610					      REPEND
    477  f612		       85 02		      sta	WSYNC
    476  f612					      REPEND
    477  f614		       85 02		      sta	WSYNC
    476  f614					      REPEND
    477  f616		       85 02		      sta	WSYNC
    476  f616					      REPEND
    477  f618		       85 02		      sta	WSYNC
    476  f618					      REPEND
    477  f61a		       85 02		      sta	WSYNC
    478  f61c					      REPEND
    479  f61c		       a9 00		      lda	#$00
    480  f61e		       85 09		      sta	COLUBK
    481  f620
    482  f620							; Restore stack pointer
    483  f620		       a6 94		      ldx	RamStackBkp
    484  f622		       9a		      txs
    485  f623
    486  f623							; Display the rest of the blank screen.
      0  f623					      TIMER_SETUP	25
      1  f623				   .lines     SET	25
      2  f623		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f625		       85 02		      sta	WSYNC
      4  f627		       8d 96 02 	      sta	TIM64T
    488  f62a		       85 02		      sta	WSYNC
      0  f62c					      TIMER_WAIT
      1  f62c				   .waittimer
      2  f62c		       ad 84 02 	      lda	INTIM
      3  f62f		       d0 fb		      bne	.waittimer
      4  f631		       85 02		      sta	WSYNC
      0  f633					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f633				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f633  && !(  _scan == (#37 + #192)  ) }
      2  f633					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    491  f633
    492  f633							; Overscan
    493  f633				   Overscan   subroutine
    494  f633		       85 01		      sta	VBLANK
      0  f635					      TIMER_SETUP	29
      1  f635				   .lines     SET	29
      2  f635		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f637		       85 02		      sta	WSYNC
      4  f639		       8d 96 02 	      sta	TIM64T
    496  f63c
    497  f63c		       20 4c f6 	      jsr	MoveJoystick
    498  f63f		       20 83 f6 	      jsr	SpeedCalculation
    499  f642
      0  f642					      TIMER_WAIT
      1  f642				   .waittimer
      2  f642		       ad 84 02 	      lda	INTIM
      3  f645		       d0 fb		      bne	.waittimer
      4  f647		       85 02		      sta	WSYNC
      0  f649					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f649				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f649  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f649					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    502  f649
    503  f649		       4c b9 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f64c					      include	"game_input.s"
      1  f64c							; Handles input checking. Called from overscan.
      2  f64c
      3  f64c							; Read joystick movement and apply to object 0
      4  f64c				   MoveJoystick
      5  f64c							; Move vertically
      6  f64c							; (up and down are actually reversed since ypos starts at bottom)
      7  f64c							;     ldx YPos
      8  f64c		       a9 10		      lda	#%00010000	;Up?
      9  f64e		       2c 80 02 	      bit	SWCHA
     10  f651		       d0 0d		      bne	SkipMoveUp
     11  f653
     12  f653		       18		      clc
     13  f654		       a5 88		      lda	Speed2
     14  f656		       69 0c		      adc	#12
     15  f658		       85 88		      sta	Speed2
     16  f65a		       a5 87		      lda	Speed1
     17  f65c		       69 00		      adc	#00
     18  f65e		       85 87		      sta	Speed1
     19  f660
     20  f660				   SkipMoveUp
     21  f660		       a6 86		      ldx	XPos
     22  f662
     23  f662							; Only check left/right on odd frames;
     24  f662							; TODO make this just a fractional speed
     25  f662							; rather than dropping frames
     26  f662		       a9 01		      lda	#01
     27  f664		       25 83		      and	FrameCount
     28  f666		       d0 18		      bne	SkipMoveRight
     29  f668
     30  f668
     31  f668							; Move horizontally
     32  f668		       a9 40		      lda	#%01000000	;Left?
     33  f66a		       2c 80 02 	      bit	SWCHA
     34  f66d		       d0 05		      bne	SkipMoveLeft
     35  f66f		       e0 1d		      cpx	#29
     36  f671		       90 01		      bcc	SkipMoveLeft
     37  f673		       ca		      dex
     38  f674
     39  f674							; Reflect
     40  f674							;     lda #$ff
     41  f674							;     sta REFP0
     42  f674				   SkipMoveLeft
     43  f674		       a9 80		      lda	#%10000000	;Right?
     44  f676		       2c 80 02 	      bit	SWCHA
     45  f679		       d0 05		      bne	SkipMoveRight
     46  f67b		       e0 80		      cpx	#128
     47  f67d		       b0 01		      bcs	SkipMoveRight
     48  f67f		       e8		      inx
     49  f680
     50  f680							; Reflect
     51  f680							;     lda #$0
     52  f680							;     sta REFP0
     53  f680				   SkipMoveRight
     54  f680		       86 86		      stx	XPos
     55  f682		       60		      rts
     56  f683
     57  f683
     58  f683				   SpeedCalculation
     59  f683		       38		      sec
     60  f684		       a5 88		      lda	Speed2
     61  f686		       e9 07		      sbc	#7
     62  f688		       85 88		      sta	Speed2
     63  f68a		       a5 87		      lda	Speed1
     64  f68c		       e9 00		      sbc	#0
     65  f68e		       85 87		      sta	Speed1
     66  f690
     67  f690		       18		      clc
     68  f691		       a5 8a		      lda	YPos2
     69  f693		       65 88		      adc	Speed2
     70  f695		       85 8a		      sta	YPos2
     71  f697		       a5 89		      lda	YPos
     72  f699		       65 87		      adc	Speed1
     73  f69b		       85 89		      sta	YPos
     74  f69d
     75  f69d		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f69f		       b0 0a		      bcs	NewThing2
     77  f6a1
     78  f6a1							; Reset to floor
     79  f6a1		       a9 3e		      lda	#FLOOR_OFFSET
     80  f6a3		       85 89		      sta	YPos
     81  f6a5		       a9 00		      lda	#0
     82  f6a7		       85 87		      sta	Speed1
     83  f6a9		       85 88		      sta	Speed2
     84  f6ab				   NewThing2
     85  f6ab
     86  f6ab		       c9 be		      cmp	#CEILING_OFFSET
     87  f6ad		       90 0a		      bcc	.next
     88  f6af
     89  f6af							; Reset to ceiling
     90  f6af		       a9 be		      lda	#CEILING_OFFSET
     91  f6b1		       85 89		      sta	YPos
     92  f6b3		       a9 00		      lda	#0
     93  f6b5		       85 87		      sta	Speed1
     94  f6b7		       85 88		      sta	Speed2
     95  f6b9				   .next
     96  f6b9		       60		      rts
     97  f6ba
     98  f6ba
     99  f6ba
    100  f6ba							; Subroutine
    101  f6ba				   SetHorizPos
    102  f6ba		       85 02		      sta	WSYNC	; start a new line
    103  f6bc		       24 00		      bit	0	; waste 3 cycles
    104  f6be		       38		      sec		; set carry flag
    105  f6bf				   DivideLoop
    106  f6bf		       e9 0f		      sbc	#15	; subtract 15
    107  f6c1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f6c3		       49 07		      eor	#7	; calculate fine offset
    109  f6c5		       0a		      asl
    110  f6c6		       0a		      asl
    111  f6c7		       0a		      asl
    112  f6c8		       0a		      asl
    113  f6c9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f6cb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f6cd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f6ce					      include	"kernel_border.s"
      1  f6ce							; Visible Kernel
      2  f6ce
      3  f6ce				   KernelBorder subroutine
      4  f6ce		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f6d0
      6  f6d0							; First HMOVE
      7  f6d0		       85 2a		      sta	HMOVE
      8  f6d2
      9  f6d2							; Border top
     10  f6d2		       a9 00		      lda	#0
     11  f6d4		       85 08		      sta	COLUPF
     12  f6d6		       85 0e		      sta	PF1
     13  f6d8		       85 0f		      sta	PF2
     14  f6da		       a9 02		      lda	#SIGNAL_LINE
     15  f6dc		       85 09		      sta	COLUBK
     16  f6de
     17  f6de					      REPEAT	6
     18  f6de		       85 02		      sta	WSYNC
     17  f6de					      REPEND
     18  f6e0		       85 02		      sta	WSYNC
     17  f6e0					      REPEND
     18  f6e2		       85 02		      sta	WSYNC
     17  f6e2					      REPEND
     18  f6e4		       85 02		      sta	WSYNC
     17  f6e4					      REPEND
     18  f6e6		       85 02		      sta	WSYNC
     17  f6e6					      REPEND
     18  f6e8		       85 02		      sta	WSYNC
     19  f6ea					      REPEND
     20  f6ea
     21  f6ea		       a9 00		      lda	#0
     22  f6ec		       85 09		      sta	COLUBK
     23  f6ee		       85 02		      sta	WSYNC
     24  f6f0
     25  f6f0							; Start top border
     26  f6f0				   border_top
     27  f6f0							; Make the playfield solid.
     28  f6f0		       a9 3f		      lda	#%00111111
     29  f6f2		       85 0e		      sta	PF1
     30  f6f4		       a9 ff		      lda	#%11111111
     31  f6f6		       85 0f		      sta	PF2
     32  f6f8
     33  f6f8		       a9 42		      lda	#COL_BG
     34  f6fa		       a0 00		      ldy	#0
     35  f6fc
     36  f6fc							; X_XXXX_XX
     37  f6fc							; Commented lines removed to save on space.
     38  f6fc		       85 08		      sta	COLUPF
     39  f6fe		       85 02		      sta	WSYNC
     40  f700		       84 08		      sty	COLUPF
     41  f702		       85 02		      sta	WSYNC
     42  f704		       85 08		      sta	COLUPF
     43  f706		       85 02		      sta	WSYNC
     44  f708							; sta COLUPF
     45  f708		       85 02		      sta	WSYNC
     46  f70a							; sta COLUPF
     47  f70a		       85 02		      sta	WSYNC
     48  f70c		       84 08		      sty	COLUPF
     49  f70e		       85 02		      sta	WSYNC
     50  f710		       85 08		      sta	COLUPF
     51  f712
     52  f712		       85 02		      sta	WSYNC
     53  f714							; sta COLUPF
     54  f714
     55  f714				   PlayArea
     56  f714							; PF is now the playing area
      0  f714					      ASSERT_RUNTIME	"_scycles == #0"
      1  f714				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f714  && !(  _scycles == #0  ) }
      2  f714					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f714					      sleep	61
      1  f714				   .CYCLES    SET	61
      2  f714
      3  f714				  -	      IF	.CYCLES < 2
      4  f714				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f714				  -	      ERR
      6  f714					      ENDIF
      7  f714
      8  f714					      IF	.CYCLES & 1
      9  f714					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f714		       04 00		      nop	0
     11  f716				  -	      ELSE
     12  f716				  -	      bit	VSYNC
     13  f716					      ENDIF
     14  f716				   .CYCLES    SET	.CYCLES - 3
     15  f716					      ENDIF
     16  f716
     17  f716					      REPEAT	.CYCLES / 2
     18  f716		       ea		      nop
     17  f716					      REPEND
     18  f717		       ea		      nop
     17  f717					      REPEND
     18  f718		       ea		      nop
     17  f718					      REPEND
     18  f719		       ea		      nop
     17  f719					      REPEND
     18  f71a		       ea		      nop
     17  f71a					      REPEND
     18  f71b		       ea		      nop
     17  f71b					      REPEND
     18  f71c		       ea		      nop
     17  f71c					      REPEND
     18  f71d		       ea		      nop
     17  f71d					      REPEND
     18  f71e		       ea		      nop
     17  f71e					      REPEND
     18  f71f		       ea		      nop
     17  f71f					      REPEND
     18  f720		       ea		      nop
     17  f720					      REPEND
     18  f721		       ea		      nop
     17  f721					      REPEND
     18  f722		       ea		      nop
     17  f722					      REPEND
     18  f723		       ea		      nop
     17  f723					      REPEND
     18  f724		       ea		      nop
     17  f724					      REPEND
     18  f725		       ea		      nop
     17  f725					      REPEND
     18  f726		       ea		      nop
     17  f726					      REPEND
     18  f727		       ea		      nop
     17  f727					      REPEND
     18  f728		       ea		      nop
     17  f728					      REPEND
     18  f729		       ea		      nop
     17  f729					      REPEND
     18  f72a		       ea		      nop
     17  f72a					      REPEND
     18  f72b		       ea		      nop
     17  f72b					      REPEND
     18  f72c		       ea		      nop
     17  f72c					      REPEND
     18  f72d		       ea		      nop
     17  f72d					      REPEND
     18  f72e		       ea		      nop
     17  f72e					      REPEND
     18  f72f		       ea		      nop
     17  f72f					      REPEND
     18  f730		       ea		      nop
     17  f730					      REPEND
     18  f731		       ea		      nop
     17  f731					      REPEND
     18  f732		       ea		      nop
     19  f733					      REPEND
     59  f733		       a9 00		      lda	#%00000000
     60  f735		       85 0d		      sta	PF0
     61  f737		       a9 20		      lda	#%00100000
     62  f739		       85 0e		      sta	PF1
     63  f73b		       a9 00		      lda	#%00000000
     64  f73d		       85 0f		      sta	PF2
      0  f73f					      ASSERT_RUNTIME	"_scycles == #0"
      1  f73f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f73f  && !(  _scycles == #0  ) }
      2  f73f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f73f					      sleep	7
      1  f73f				   .CYCLES    SET	7
      2  f73f
      3  f73f				  -	      IF	.CYCLES < 2
      4  f73f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f73f				  -	      ERR
      6  f73f					      ENDIF
      7  f73f
      8  f73f					      IF	.CYCLES & 1
      9  f73f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f73f		       04 00		      nop	0
     11  f741				  -	      ELSE
     12  f741				  -	      bit	VSYNC
     13  f741					      ENDIF
     14  f741				   .CYCLES    SET	.CYCLES - 3
     15  f741					      ENDIF
     16  f741
     17  f741					      REPEAT	.CYCLES / 2
     18  f741		       ea		      nop
     17  f741					      REPEND
     18  f742		       ea		      nop
     19  f743					      REPEND
     67  f743		       4c 75 f7 	      jmp	row_start
     68  f746							; enter row on cycle 10.
     69  f746
     70  f746							; reset the background for bottom of playfield
     71  f746				   border_bottom
     72  f746							;sta WSYNC
     73  f746
     74  f746							; Form the bottom of the level frame.
     75  f746		       a9 3f		      lda	#%00111111
     76  f748		       85 0e		      sta	PF1
     77  f74a		       a9 ff		      lda	#%11111111
     78  f74c		       85 0f		      sta	PF2
     79  f74e
     80  f74e							; Clear all sprites.
     81  f74e		       a9 00		      lda	#0
     82  f750		       85 1c		      sta	EMERALD_SP
     83  f752		       85 1b		      sta	JET_SP
     84  f754		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f756
     86  f756		       a9 42		      lda	#COL_BG
     87  f758		       a0 00		      ldy	#0
     88  f75a		       85 02		      sta	WSYNC
     89  f75c
     90  f75c		       84 08		      sty	COLUPF
     91  f75e		       85 02		      sta	WSYNC
     92  f760
     93  f760		       85 08		      sta	COLUPF
     94  f762		       85 02		      sta	WSYNC
     95  f764
     96  f764		       85 02		      sta	WSYNC
     97  f766
     98  f766		       85 02		      sta	WSYNC
     99  f768
    100  f768		       84 08		      sty	COLUPF
    101  f76a		       85 02		      sta	WSYNC
    102  f76c
    103  f76c		       85 08		      sta	COLUPF
    104  f76e		       85 02		      sta	WSYNC
    105  f770		       85 02		      sta	WSYNC
    106  f772		       4c 00 f6 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f775					      include	"kernel_row.s"
      1  f775							; Frame Start
      2  f775
      3  f775							; Macros for calculating sprite values (GRPx).
      4  f775
      5  f775							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f775					      mac	kernel_load_player
      7  f775							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f775					      dcp	SpriteEnd	; 5c
      9  f775					      ldy	#0	; 2c
     10  f775							; constant 6c:
     11  f775					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f775					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f775					      ldy	SpriteEnd
     14  f775							; 4c
     15  f775					      ldx	Frame0,Y
     16  f775					      endm
     17  f775
     18  f775							; mac jet_spritedata_calc
     19  f775							;
     20  f775							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f775							; GRP0.
     22  f775					      mac	jet_spritedata_calc
     23  f775							; loader
     24  f775					      lda	#SPRITE_HEIGHT
     25  f775					      dcp	SpriteEnd
     26  f775					      ldy	SpriteEnd
     27  f775
     28  f775							; 4c
     29  f775							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f775							; from Frame0 + Y must never cross a page boundary.
     31  f775					      lda	Frame0,Y
     32  f775							; 6c
     33  f775					      .byte	$b0, $01	;2c / 3c (taken)
     34  f775					      .byte	$2c	; 4c / 0c
     35  f775					      sta	JET_SP	; 0c / 3c
     36  f775					      endm
     37  f775
     38  f775				   row_start
     39  f775
     40  f775							; [scanline 1]
     41  f775				   row_1
     42  f775							; Enter after scanline starts on row "9" and wraps
      0  f775					      ASSERT_RUNTIME	"_scycles == #10"
      1  f775				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f775  && !(  _scycles == #10  ) }
      2  f775					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f775
      0  f775					      jet_spritedata_calc
      1  f775
      2  f775		       a9 09		      lda	#SPRITE_HEIGHT
      3  f777		       c7 85		      dcp	SpriteEnd
      4  f779		       a4 85		      ldy	SpriteEnd
      5  f77b
      6  f77b
      7  f77b
      8  f77b
      9  f77b		       b9 00 fa 	      lda	Frame0,Y
     10  f77e
     11  f77e		       b0 01		      .byte.b	$b0, $01
     12  f780		       2c		      .byte.b	$2c
     13  f781		       85 1b		      sta	JET_SP
     46  f783
     47  f783							; [[[Nibble VM.]]]
     48  f783		       85 02		      sta	WSYNC
     49  f785
     50  f785							; sleep 46
     51  f785
      0  f785					      ASSERT_RUNTIME	"_scycles == #0"
      1  f785				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f785  && !(  _scycles == #0  ) }
      2  f785					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f785
     54  f785							; [scanline 2]
     55  f785				   row_2
      0  f785					      jet_spritedata_calc
      1  f785
      2  f785		       a9 09		      lda	#SPRITE_HEIGHT
      3  f787		       c7 85		      dcp	SpriteEnd
      4  f789		       a4 85		      ldy	SpriteEnd
      5  f78b
      6  f78b
      7  f78b
      8  f78b
      9  f78b		       b9 00 fa 	      lda	Frame0,Y
     10  f78e
     11  f78e		       b0 01		      .byte.b	$b0, $01
     12  f790		       2c		      .byte.b	$2c
     13  f791		       85 1b		      sta	JET_SP
     57  f793
     58  f793							; Black out playfield
     59  f793							; TODO This should be done with playfield pixels, not color.
     60  f793		       a9 00		      lda	#0
     61  f795		       85 08		      sta	COLUPF
     62  f797
     63  f797							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  f797		       a6 97		      ldx	RamKernelPhpTarget
     65  f799		       9a		      txs
     66  f79a
     67  f79a							; [[[Nibble VM.]]]
      0  f79a					      sleep	30
      1  f79a				   .CYCLES    SET	30
      2  f79a
      3  f79a				  -	      IF	.CYCLES < 2
      4  f79a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f79a				  -	      ERR
      6  f79a					      ENDIF
      7  f79a
      8  f79a				  -	      IF	.CYCLES & 1
      9  f79a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f79a				  -	      nop	0
     11  f79a				  -	      ELSE
     12  f79a				  -	      bit	VSYNC
     13  f79a				  -	      ENDIF
     14  f79a				  -.CYCLES    SET	.CYCLES - 3
     15  f79a					      ENDIF
     16  f79a
     17  f79a					      REPEAT	.CYCLES / 2
     18  f79a		       ea		      nop
     17  f79a					      REPEND
     18  f79b		       ea		      nop
     17  f79b					      REPEND
     18  f79c		       ea		      nop
     17  f79c					      REPEND
     18  f79d		       ea		      nop
     17  f79d					      REPEND
     18  f79e		       ea		      nop
     17  f79e					      REPEND
     18  f79f		       ea		      nop
     17  f79f					      REPEND
     18  f7a0		       ea		      nop
     17  f7a0					      REPEND
     18  f7a1		       ea		      nop
     17  f7a1					      REPEND
     18  f7a2		       ea		      nop
     17  f7a2					      REPEND
     18  f7a3		       ea		      nop
     17  f7a3					      REPEND
     18  f7a4		       ea		      nop
     17  f7a4					      REPEND
     18  f7a5		       ea		      nop
     17  f7a5					      REPEND
     18  f7a6		       ea		      nop
     17  f7a6					      REPEND
     18  f7a7		       ea		      nop
     17  f7a7					      REPEND
     18  f7a8		       ea		      nop
     19  f7a9					      REPEND
     69  f7a9
     70  f7a9							; Load PF1 value
     71  f7a9		       a9 a0		      lda	#%10100000
     72  f7ab		       85 95		      sta	RamPF1Value
     73  f7ad
     74  f7ad		       a9 04		      lda	#4
     75  f7af		       8d 96 02 	      sta	TIM64T
     76  f7b2
     77  f7b2							; Enable playfield at end of scanline
     78  f7b2		       a9 42		      lda	#COL_BG
     79  f7b4		       85 08		      sta	COLUPF
     80  f7b6
     81  f7b6							; lda #%00001000
     82  f7b6							; sta REFP1
     83  f7b6
      0  f7b6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f7b6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f7b6  && !(  _scycles == #0  ) }
      2  f7b6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f7b6
     86  f7b6							; [scanline 3]
     87  f7b6				   row_3
      0  f7b6					      jet_spritedata_calc
      1  f7b6
      2  f7b6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f7b8		       c7 85		      dcp	SpriteEnd
      4  f7ba		       a4 85		      ldy	SpriteEnd
      5  f7bc
      6  f7bc
      7  f7bc
      8  f7bc
      9  f7bc		       b9 00 fa 	      lda	Frame0,Y
     10  f7bf
     11  f7bf		       b0 01		      .byte.b	$b0, $01
     12  f7c1		       2c		      .byte.b	$2c
     13  f7c2		       85 1b		      sta	JET_SP
     89  f7c4
     90  f7c4							; Pre-populate graphics.
     91  f7c4		       a9 09		      lda	#SPRITE_HEIGHT
      0  f7c6					      KERNEL_LOAD_PLAYER
      1  f7c6
      2  f7c6		       c7 85		      dcp	SpriteEnd
      3  f7c8		       a0 00		      ldy	#0
      4  f7ca
      5  f7ca		       b0 01		      .byte.b	$b0, $01
      6  f7cc		       2c		      .byte.b	$2c
      7  f7cd		       a4 85		      ldy	SpriteEnd
      8  f7cf
      9  f7cf		       be 00 fa 	      ldx	Frame0,Y
     93  f7d2		       86 96		      stx	RamKernelGRP0
      0  f7d4					      KERNEL_LOAD_PLAYER
      1  f7d4
      2  f7d4		       c7 85		      dcp	SpriteEnd
      3  f7d6		       a0 00		      ldy	#0
      4  f7d8
      5  f7d8		       b0 01		      .byte.b	$b0, $01
      6  f7da		       2c		      .byte.b	$2c
      7  f7db		       a4 85		      ldy	SpriteEnd
      8  f7dd
      9  f7dd		       be 00 fa 	      ldx	Frame0,Y
     95  f7e0		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f7e3		       a5 96		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  f7e5					      sleep	2
      1  f7e5				   .CYCLES    SET	2
      2  f7e5
      3  f7e5				  -	      IF	.CYCLES < 2
      4  f7e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7e5				  -	      ERR
      6  f7e5					      ENDIF
      7  f7e5
      8  f7e5				  -	      IF	.CYCLES & 1
      9  f7e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7e5				  -	      nop	0
     11  f7e5				  -	      ELSE
     12  f7e5				  -	      bit	VSYNC
     13  f7e5				  -	      ENDIF
     14  f7e5				  -.CYCLES    SET	.CYCLES - 3
     15  f7e5					      ENDIF
     16  f7e5
     17  f7e5					      REPEAT	.CYCLES / 2
     18  f7e5		       ea		      nop
     19  f7e6					      REPEND
     98  f7e6
     99  f7e6							; [scanlines 4-5]
    100  f7e6							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  f7e6		       a6 98		      ldx	RamKernelX
    102  f7e8		       38		      sec
      0  f7e9					      ASSERT_RUNTIME	"_scycles == #73"
      1  f7e9				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f7e9  && !(  _scycles == #73  ) }
      2  f7e9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f7e9		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  f7ec
    106  f7ec							; [scanline 6]
    107  f7ec
    108  f7ec							; Try to avoid page crossing in jet_spritedata_calc
    109  f7ec							; TODO enforce this with ASSERT_RUNTIME instead?
    110  f7f0		       00 00 00 00	      align	16
    111  f7f0
    112  f7f0				   row_after_kernel
    113  f7f0				   row_6
      0  f7f0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f7f0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f7f0  && !(  _scycles == #0  ) }
      2  f7f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  f7f0
    116  f7f0							; Cleanup from the kernel.
    117  f7f0		       a9 00		      lda	#0
    118  f7f2		       85 1e		      sta	EMERALD_MI_ENABLE
    119  f7f4		       85 1c		      sta	EMERALD_SP
    120  f7f6		       85 08		      sta	COLUPF
    121  f7f8		       85 26		      sta	VDELP1
    122  f7fa
      0  f7fa					      jet_spritedata_calc
      1  f7fa
      2  f7fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f7fc		       c7 85		      dcp	SpriteEnd
      4  f7fe		       a4 85		      ldy	SpriteEnd
      5  f800
      6  f800
      7  f800
      8  f800
      9  f800		       b9 00 fa 	      lda	Frame0,Y
     10  f803
     11  f803		       b0 01		      .byte.b	$b0, $01
     12  f805		       2c		      .byte.b	$2c
     13  f806		       85 1b		      sta	JET_SP
    124  f808
    125  f808							; Idle.
    126  f808		       85 02		      sta	WSYNC
    127  f80a
    128  f80a							; [scanline 7]
    129  f80a				   row_7
      0  f80a					      jet_spritedata_calc
      1  f80a
      2  f80a		       a9 09		      lda	#SPRITE_HEIGHT
      3  f80c		       c7 85		      dcp	SpriteEnd
      4  f80e		       a4 85		      ldy	SpriteEnd
      5  f810
      6  f810
      7  f810
      8  f810
      9  f810		       b9 00 fa 	      lda	Frame0,Y
     10  f813
     11  f813		       b0 01		      .byte.b	$b0, $01
     12  f815		       2c		      .byte.b	$2c
     13  f816		       85 1b		      sta	JET_SP
    131  f818
    132  f818		       a9 42		      lda	#COL_BG
    133  f81a		       85 08		      sta	COLUPF
    134  f81c
    135  f81c							; FRAMESWITCH
    136  f81c		       a9 01		      lda	#01
    137  f81e		       25 83		      and	FrameCount
    138  f820		       d0 13		      bne	loadframe2
    139  f822
    140  f822							; Perform gem loading for Kernel A.
    141  f822
    142  f822				   loadframe1
      0  f822					      ASSERT_RUNTIME	"_scycles == #32"
      1  f822				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f822  && !(  _scycles == #32  ) }
      2  f822					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f822
    145  f822							; Emerald byte setting 1A
    146  f822							; ldx #0
    147  f822							; lda KERNEL_STORAGE_R,X
    148  f822							; sta GEM_00_W
    149  f822							; inx
    150  f822							; lda KERNEL_STORAGE_R,X
    151  f822							; sta GEM_04_W
    152  f822							; inx
    153  f822							; lda KERNEL_STORAGE_R,X
    154  f822							; sta GEM_09_W
    155  f822							; inx
    156  f822
    157  f822		       85 02		      sta	WSYNC
    158  f824
    159  f824							; [scanline 8]
      0  f824					      jet_spritedata_calc
      1  f824
      2  f824		       a9 09		      lda	#SPRITE_HEIGHT
      3  f826		       c7 85		      dcp	SpriteEnd
      4  f828		       a4 85		      ldy	SpriteEnd
      5  f82a
      6  f82a
      7  f82a
      8  f82a
      9  f82a		       b9 00 fa 	      lda	Frame0,Y
     10  f82d
     11  f82d		       b0 01		      .byte.b	$b0, $01
     12  f82f		       2c		      .byte.b	$2c
     13  f830		       85 1b		      sta	JET_SP
    161  f832
    162  f832							; Emerald byte setting 1B
    163  f832							; lda KERNEL_STORAGE_R,X
    164  f832							; sta GEM_13_W
    165  f832							; inx
    166  f832							; lda KERNEL_STORAGE_R,X
    167  f832							; sta GEM_17_W
    168  f832							; inx
    169  f832							; lda KERNEL_STORAGE_R,X
    170  f832							; sta GEM_18_W
    171  f832							; inx
    172  f832							; lda KERNEL_STORAGE_R,X
    173  f832							; sta GEM_22_W
    174  f832
    175  f832		       4c 48 f8 	      jmp	row_8_end
    176  f835
    177  f835							; Perform gem loading for Kernel B.
    178  f835
    179  f835				   loadframe2
      0  f835					      ASSERT_RUNTIME	"_scycles == #33"
      1  f835				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f835  && !(  _scycles == #33  ) }
      2  f835					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f835
    182  f835							; Emerald byte setting 2A
    183  f835							; ldx #[storage_02 - storage]
    184  f835							; lda KERNEL_STORAGE_R,X
    185  f835							; sta GEM_02_W
    186  f835							; inx
    187  f835							; lda KERNEL_STORAGE_R,X
    188  f835							; sta GEM_06_W
    189  f835							; inx
    190  f835							; lda KERNEL_STORAGE_R,X
    191  f835							; sta GEM_08_W
    192  f835							; inx
    193  f835
    194  f835		       85 02		      sta	WSYNC
    195  f837
    196  f837							; [scanline 8]
    197  f837				   row_8
      0  f837					      jet_spritedata_calc
      1  f837
      2  f837		       a9 09		      lda	#SPRITE_HEIGHT
      3  f839		       c7 85		      dcp	SpriteEnd
      4  f83b		       a4 85		      ldy	SpriteEnd
      5  f83d
      6  f83d
      7  f83d
      8  f83d
      9  f83d		       b9 00 fa 	      lda	Frame0,Y
     10  f840
     11  f840		       b0 01		      .byte.b	$b0, $01
     12  f842		       2c		      .byte.b	$2c
     13  f843		       85 1b		      sta	JET_SP
    199  f845
    200  f845							; Emerald byte setting 2B
    201  f845							; lda KERNEL_STORAGE_R,X
    202  f845							; sta GEM_11_W
    203  f845							; inx
    204  f845							; lda KERNEL_STORAGE_R,X
    205  f845							; sta GEM_15_W
    206  f845							; inx
    207  f845							; lda KERNEL_STORAGE_R,X
    208  f845							; sta GEM_20_W
    209  f845							; inx
    210  f845							; lda KERNEL_STORAGE_R,X
    211  f845							; sta GEM_24_W
    212  f845
    213  f845		       4c 48 f8 	      jmp	row_8_end
    214  f848
    215  f848							; Common row 8 return.
    216  f848
    217  f848				   row_8_end
    218  f848							; Idle.
    219  f848		       85 02		      sta	WSYNC
    220  f84a
    221  f84a							; [scanline 8]
    222  f84a							; Repeat loop until LoopCount < 0
    223  f84a		       c6 82		      dec	LoopCount
    224  f84c		       30 03		      bmi	row_end
    225  f84e		       4c 75 f7 	      jmp	row_start
    226  f851				   row_end
    227  f851		       4c 46 f7 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f854					      include	"kernel_gem.s"
      1  f854							;
      2  f854							; Gem Kernels
      3  f854							;
      4  f854							; Gems are displayed in alternating kernels. This chart shows
      5  f854							; which kernel is responsible for which gem, with missiles denoted.
      6  f854							;
      7  f854							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f854							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f854							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f854							;  #	 0^	 8^	  17^	    26^       gem index
     11  f854							;
     12  f854							; The middle bar indicates where the pattern reverses.
     13  f854							;
     14  f854							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f854							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f854							; requires with a single sprite. By alternating sprites each frame with an...
     17  f854							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f854							; line, except for two. These are instead rendered by the missile, which
     19  f854							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f854
     21  f854							; for copying
     22  f900		       00 00 00 00*	      align	256
     23  f900
     24  f900							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f900							;
     26  f900							; GEM KERNEL A
     27  f900							;
     28  f900
     29  f900				   kernel_1_start subroutine
     30  f900					      rorg	$f100
     31  f900
     32  f900							; Kernel Marker
     33  f900		       0a		      .byte.b	$A
     34  f901
     35  f901				   KernelA_early
     36  f901							; Early code to set next GRP0 image. Immediate value is overwritten
     37  f901		       a9 ff		      lda	#$ff
     38  f903
     39  f903				   KernelA    subroutine
      0  f903					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  f903				   .KERNEL    SET	$A
      2  f903				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  f903					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  f903
     42  f903							; Write Gemini 0A into delayed sprite register
     43  f903		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  f903		       f1 04	   KernelA_VDEL1 =	. - 1
     45  f905		       84 1c		      sty	EMERALD_SP
     46  f907							; Write Player from accumulator. When writing to the other sprite, the
     47  f907							; TIA will copy Gemini 0A into visible sprite register
     48  f907		       85 1b		      sta	JET_SP
     49  f909							; Write Gemini 1A into visible sprite register
     50  f909		       a0 66		      ldy	#%01100110
     51  f909		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  f90b		       84 1c		      sty	EMERALD_SP
     53  f90d		       a0 06		      ldy	#%00000110	; TODO temporary?
     54  f90d		       f1 0e	   KernelA_STY =	. - 1
     55  f90f
     56  f90f							; Need D0 for VDELP1 trigger with PHP
      0  f90f					      sleep	2
      1  f90f				   .CYCLES    SET	2
      2  f90f
      3  f90f				  -	      IF	.CYCLES < 2
      4  f90f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f90f				  -	      ERR
      6  f90f					      ENDIF
      7  f90f
      8  f90f				  -	      IF	.CYCLES & 1
      9  f90f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f90f				  -	      nop	0
     11  f90f				  -	      ELSE
     12  f90f				  -	      bit	VSYNC
     13  f90f				  -	      ENDIF
     14  f90f				  -.CYCLES    SET	.CYCLES - 3
     15  f90f					      ENDIF
     16  f90f
     17  f90f					      REPEAT	.CYCLES / 2
     18  f90f		       ea		      nop
     19  f910					      REPEND
     58  f910
     59  f910							; Register config
     60  f910		       a9 08		      lda	#%00001000
     61  f912							; sta EMERALD_MI_ENABLE ; disable missile FIXME this should be uncommented!
     62  f912		       85 0c		      sta	REFP1
     63  f914
     64  f914							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f914					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  f914				   .KERNEL    SET	$A
      2  f914				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  f914					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  f914				   KernelA_A
     67  f914		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  f916
     69  f916							; vvv RST0
     70  f916				   KernelA_B
     71  f916		       a5 95		      lda	RamPF1Value
     72  f918				   KernelA_C
     73  f918		       84 26		      sty	VDELP1	; disable delayed sprite
     74  f91a				   KernelA_D
     75  f91a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  f91a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  f91a				   .CYCLES    SET	3
      2  f91a
      3  f91a				  -	      IF	.CYCLES < 2
      4  f91a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f91a				  -	      ERR
      6  f91a					      ENDIF
      7  f91a
      8  f91a					      IF	.CYCLES & 1
      9  f91a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f91a		       04 00		      nop	0
     11  f91c				  -	      ELSE
     12  f91c				  -	      bit	VSYNC
     13  f91c					      ENDIF
     14  f91c				   .CYCLES    SET	.CYCLES - 3
     15  f91c					      ENDIF
     16  f91c
     17  f91c				  -	      REPEAT	.CYCLES / 2
     18  f91c				  -	      nop
     19  f91c					      REPEND
     77  f91c				   KernelA_E
     78  f91c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     79  f91e				   KernelA_F
     80  f91e							; sty EMERALD_MI_ENABLE ; Enable the missile (if we use %0xx00110 pattern)
      0  f91e					      sleep	3	; FIXME This should be uncommented!
      1  f91e				   .CYCLES    SET	3
      2  f91e
      3  f91e				  -	      IF	.CYCLES < 2
      4  f91e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f91e				  -	      ERR
      6  f91e					      ENDIF
      7  f91e
      8  f91e					      IF	.CYCLES & 1
      9  f91e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f91e		       04 00		      nop	0
     11  f920				  -	      ELSE
     12  f920				  -	      bit	VSYNC
     13  f920					      ENDIF
     14  f920				   .CYCLES    SET	.CYCLES - 3
     15  f920					      ENDIF
     16  f920
     17  f920				  -	      REPEAT	.CYCLES / 2
     18  f920				  -	      nop
     19  f920					      REPEND
     82  f920				   KernelA_G
     83  f920		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     84  f922
     85  f922				   KernelA_H
     86  f922		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     87  f924
      0  f924					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  f924				   .KERNEL    SET	$A
      2  f924				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  f924					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     89  f924							; RST4 vvv
     90  f924				   KernelA_I
     91  f924		       08		      php		; Reset "medium close" NUSIZ repetition
     92  f925				   KernelA_J		; unchanging
     93  f925		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     94  f927				   KernelA_K
     95  f927		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     96  f929							; RST4 ^^^
     97  f929
     98  f929				   KernelA_L
      0  f929					      sleep	3	; when possible, sta VDELP0
      1  f929				   .CYCLES    SET	3
      2  f929
      3  f929				  -	      IF	.CYCLES < 2
      4  f929				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f929				  -	      ERR
      6  f929					      ENDIF
      7  f929
      8  f929					      IF	.CYCLES & 1
      9  f929					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f929		       04 00		      nop	0
     11  f92b				  -	      ELSE
     12  f92b				  -	      bit	VSYNC
     13  f92b					      ENDIF
     14  f92b				   .CYCLES    SET	.CYCLES - 3
     15  f92b					      ENDIF
     16  f92b
     17  f92b				  -	      REPEAT	.CYCLES / 2
     18  f92b				  -	      nop
     19  f92b					      REPEND
    100  f92b				   KernelA_M
    101  f92b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    102  f92d
    103  f92d				   KernelA_N
    104  f92d				   KernelA_O
      0  f92d					      sleep	2
      1  f92d				   .CYCLES    SET	2
      2  f92d
      3  f92d				  -	      IF	.CYCLES < 2
      4  f92d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f92d				  -	      ERR
      6  f92d					      ENDIF
      7  f92d
      8  f92d				  -	      IF	.CYCLES & 1
      9  f92d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f92d				  -	      nop	0
     11  f92d				  -	      ELSE
     12  f92d				  -	      bit	VSYNC
     13  f92d				  -	      ENDIF
     14  f92d				  -.CYCLES    SET	.CYCLES - 3
     15  f92d					      ENDIF
     16  f92d
     17  f92d					      REPEAT	.CYCLES / 2
     18  f92d		       ea		      nop
     19  f92e					      REPEND
    106  f92e							; reset stack pointer
    107  f92e		       68		      pla
    108  f92f
    109  f92f							; End visible line
      0  f92f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  f92f				   .KERNEL    SET	$A
      2  f92f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  f92f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  f92f
    112  f92f				   KernelA_branch
    113  f92f		       ad 84 02 	      lda	INTIM
    114  f932		       d0 cd		      bne	KernelA_early
    115  f934
    116  f934		       4c f0 f7 	      jmp	row_after_kernel
    117  f937
    118  f937					      rend
    119  f937				   kernel_1_end
      0  f937					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f937				   .STARTA    SET	kernel_1_start
      2  f937				   .ENDA      SET	kernel_1_end
      3  f937				   .LEN       SET	$40
      4  f937				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f937				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f937				  -	      err
      7  f937					      endif
    121  f937
    122  f937							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  f937							;
    124  f937							; GEM KERNEL B
    125  f937							;
    126  f937
    127  f937				   kernel_2_start subroutine
    128  f937					      rorg	$f100
    129  f937
    130  f937							; Kernel Marker
    131  f937		       0b		      .byte.b	$B
    132  f938
    133  f938				   KernelB_early
    134  f938							; Early code to set next GRP0 image. Value is overwritten
    135  f938		       a9 ff		      lda	#$ff
    136  f93a
    137  f93a				   KernelB    subroutine
      0  f93a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  f93a				   .KERNEL    SET	$B
      2  f93a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  f93a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    139  f93a
    140  f93a							; Write Gemini 0A into delayed sprite register
    141  f93a		       84 1c		      sty	EMERALD_SP
    142  f93c							; Write Player from accumulator. When writing to the other sprite, the
    143  f93c							; TIA will copy Gemini 0A into visible sprite register
    144  f93c		       85 1b		      sta	JET_SP
    145  f93e							; Write Gemini 1A into delayed sprite register
    146  f93e		       84 1c		      sty	EMERALD_SP
    147  f940
    148  f940							; Register config
    149  f940		       a9 ff		      lda	#$ff
    150  f942		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    151  f944		       8d 26 00 	      sta.w	VDELP1	; enable delayed sprite
    152  f947
    153  f947		       a0 ff		      ldy	#$ff
    154  f947		       f1 11	   KernelB_STY =	. - 1
    155  f949
    156  f949							; Clear bits in processor status register for drawing.
    157  f949		       18		      clc
    158  f94a		       24 93		      bit	RamLowerSixByte
    159  f94c
    160  f94c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f94c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  f94c				   .KERNEL    SET	$B
      2  f94c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  f94c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    162  f94c				   KernelB_A
    163  f94c		       85 11		      sta	EMERALD_SP_RESET
    164  f94e				   KernelB_B
    165  f94e				   KernelB_C
    166  f94e				   KernelB_D
    167  f94e							; Load PF1 value into accumulator
    168  f94e		       ad 95 00 	      lda.w	RamPF1Value
    169  f951							; sleep 4
    170  f951							; set D0 = 0 without using a register
    171  f951		       06 26		      asl	VDELP1
    172  f953				   KernelB_E
    173  f953		       85 11		      sta	EMERALD_SP_RESET
    174  f955				   KernelB_F
    175  f955		       84 1c		      sty	EMERALD_SP
    176  f957				   KernelB_G
    177  f957		       85 0e		      sta	PF1
    178  f959
    179  f959							; below has one php load (could just be RESET)
    180  f959				   KernelB_H
    181  f959		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    182  f95b				   KernelB_I
    183  f95b		       85 11		      sta	EMERALD_SP_RESET
    184  f95d				   KernelB_J
    185  f95d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    186  f95f				   KernelB_K
    187  f95f		       86 1e		      stx	EMERALD_MI_ENABLE
    188  f961				   KernelB_L
    189  f961		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    190  f963							; above has one PHP loa
    191  f963
    192  f963				   KernelB_M
    193  f963				   KernelB_N
      0  f963					      sleep	2
      1  f963				   .CYCLES    SET	2
      2  f963
      3  f963				  -	      IF	.CYCLES < 2
      4  f963				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f963				  -	      ERR
      6  f963					      ENDIF
      7  f963
      8  f963				  -	      IF	.CYCLES & 1
      9  f963				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f963				  -	      nop	0
     11  f963				  -	      ELSE
     12  f963				  -	      bit	VSYNC
     13  f963				  -	      ENDIF
     14  f963				  -.CYCLES    SET	.CYCLES - 3
     15  f963					      ENDIF
     16  f963
     17  f963					      REPEAT	.CYCLES / 2
     18  f963		       ea		      nop
     19  f964					      REPEND
    195  f964
    196  f964							; reset stack pointer
    197  f964		       68		      pla
    198  f965
    199  f965							; End visible line
      0  f965					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f965				   .KERNEL    SET	$B
      2  f965				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  f965					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    201  f965
    202  f965				   KernelB_branch
    203  f965		       ad 84 02 	      lda	INTIM
    204  f968		       d0 ce		      bne	KernelB_early
    205  f96a		       4c f0 f7 	      jmp	row_after_kernel
    206  f96d
    207  f96d					      rend
    208  f96d				   kernel_2_end
      0  f96d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f96d				   .STARTA    SET	kernel_2_start
      2  f96d				   .ENDA      SET	kernel_2_end
      3  f96d				   .LEN       SET	$40
      4  f96d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f96d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f96d				  -	      err
      7  f96d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f96d					      include	"data_sprites.s"
      1  fa00		       00 00 00 00*	      align	256
      2  fa00
      3  fa00							; Player
      4  fa00				   Frame0
      5  fa00		       00		      .byte.b	#%00000000
      6  fa01		       60		      .byte.b	#%01100000
      7  fa02		       60		      .byte.b	#%01100000
      8  fa03		       60		      .byte.b	#%01100000
      9  fa04		       c0		      .byte.b	#%11000000
     10  fa05		       c0		      .byte.b	#%11000000
     11  fa06		       f0		      .byte.b	#%11110000
     12  fa07		       c0		      .byte.b	#%11000000
     13  fa08		       c0		      .byte.b	#%11000000
     14  fa09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fa0a					      include	"data_levels.s"
      1  fa10		       00 00 00 00*	      align	8
      2  fa10							; first bit of byte 2 & 3 are unused for simplicity
      3  fa10
      4  fa10				   level_00
      5  fa10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fa14
      7  fa14				   level_01
      8  fa14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fa18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fa1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fa20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fa24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fa28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fa2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fa30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fa34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fa38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fa3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fa40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fa44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fa48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fa4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fa50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fa54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fa58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fa5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fa60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fa64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fa68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fa6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fa70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fa74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fa78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fa7c				   level_01_end
     35  fa7c
     36  fa7c
     37  fa7c				   shard_map
     38  fa7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fa7d				   shard_map_end
------- FILE main.s
    125  fa7d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
