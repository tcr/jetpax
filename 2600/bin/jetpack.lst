------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????
     22  10000 ????						; Perform a left rotation on the 32 bit number at
     23  10000 ????						; location VLA and store the result at location
     24  10000 ????						; RES. If VLA and RES are the same then the
     25  10000 ????						; operation is applied directly to the memory,
     26  10000 ????						; otherwise it is done in the accumulator.
     27  10000 ????						;
     28  10000 ????						; On exit: A = ??, X & Y are unchanged.
     29  10000 ????
     30  10000 ????				       mac	_rol32
     31  10000 ????			    VLA        EQU	{1}
     32  10000 ????			    RES        EQU	{2}
     33  10000 ????				       IF	VLA != RES
     34  10000 ????				       LDA	VLA+0
     35  10000 ????				       ROL	A
     36  10000 ????				       STA	RES+0
     37  10000 ????				       LDA	VLA+1
     38  10000 ????				       ROL	A
     39  10000 ????				       STA	RES+1
     40  10000 ????				       LDA	VLA+2
     41  10000 ????				       ROL	A
     42  10000 ????				       STA	RES+2
     43  10000 ????				       LDA	VLA+3
     44  10000 ????				       ROL	A
     45  10000 ????				       STA	RES+3
     46  10000 ????				       ELSE
     47  10000 ????				       ROL	VLA+0
     48  10000 ????				       ROL	VLA+1
     49  10000 ????				       ROL	VLA+2
     50  10000 ????				       ROL	VLA+3
     51  10000 ????				       ENDIF
     52  10000 ????				       ENDM
     53  10000 ????
     54  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     55  10000 ????				       mac	assert_runtime
     56  10000 ????			    .COND      SET	{1}
     57  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     58  10000 ????				       endm
     59  10000 ????
     60  10000 ????
     61  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     62  10000 ????				       mac	assert_runtime_kernel
     63  10000 ????			    .KERNEL    SET	{1}
     64  10000 ????			    .COND      SET	{2}
     65  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  10000 ????				       endm
     67  10000 ????
     68  10000 ????						; Static assertions for size
     69  10000 ????				       mac	assert_size
     70  10000 ????			    .STARTA    SET	{1}
     71  10000 ????			    .ENDA      SET	{2}
     72  10000 ????			    .LEN       SET	{3}
     73  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     74  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     75  10000 ????				       err
     76  10000 ????				       endif
     77  10000 ????				       endm
     78  10000 ????				       mac	assert_size_exact
     79  10000 ????			    .STARTA    SET	{1}
     80  10000 ????			    .ENDA      SET	{2}
     81  10000 ????			    .LEN       SET	{3}
     82  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     83  10000 ????				       echo	""
     84  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     85  10000 ????				       err
     86  10000 ????				       endif
     87  10000 ????				       endm
     88  10000 ????
     89  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     93  0000 ????
     94  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00bb ????				      seg.u	Variables
      2 U00bb ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; only for debugging
      6 U0081
      7 U0081		       00	   Temp       byte.b
      8 U0082
      9 U0082							; Counters
     10 U0082		       00	   RowCount   byte.b
     11 U0083		       00	   LoopCount  byte.b
     12 U0084		       00	   FrameCount byte.b
     13 U0085
     14 U0085		       00	   YP1	      byte.b
     15 U0086		       00	   SpriteEnd  byte.b
     16 U0087		       00	   XPos       byte.b		; X position of player sprite
     17 U0088
     18 U0088
     19 U0088		       00	   Speed1     byte.b
     20 U0089		       00	   Speed2     byte.b
     21 U008a
     22 U008a		       00	   YPos       byte.b		; Y position of player sprite
     23 U008b		       00	   YPos2      byte.b
     24 U008c
     25 U008c		       00	   GEM_02_TARGET byte.b
     26 U008d
     27 U008d		       00	   JMP_ADDR   byte.b
     28 U008e		       00	   JMP_ADDR_2 byte.b
     29 U008f
     30 U008f		       00	   ROW_DEMO_INDEX byte.b
     31 U0090
     32 U0090		       00	   RamNibbleTemp byte.b
     33 U0091		       00	   RamNibbleVar1 byte.b
     34 U0092		       00	   RamNibbleVar2 byte.b
     35 U0093		       00	   RamZeroByte byte.b
     36 U0094		       00	   RamLowerSixByte byte.b
     37 U0095		       00	   RamStackBkp byte.b
     38 U0096
     39 U0096							; Kernel support
     40 U0096		       00	   RamPF1Value byte.b
     41 U0097		       00	   RamKernelGRP0 byte.b		; temp
     42 U0098		       00	   RamKernelPhpTarget byte.b
     43 U0099		       00	   RamKernelX byte.b
     44 U009a		       00	   RamKernelY byte.b
     45 U009b		       00	   RamKernelGemini1 byte.b
     46 U009c		       00	   RamKernelGemini1Reg byte.b
     47 U009d		       00	   RamKernelGemini2 byte.b
     48 U009e		       00	   RamKernelGemini2Reg byte.b
     49 U009f		       00	   RamKernelGemini3 byte.b
     50 U00a0		       00	   RamKernelGemini3Reg byte.b
     51 U00a1		       00	   RamKernelGemini4 byte.b
     52 U00a2		       00	   RamKernelGemini4Reg byte.b
     53 U00a3		       00	   RamKernelGemini5 byte.b
     54 U00a4
     55 U00a4		       00	   BuildKernelX byte.b
     56 U00a5		       00	   BuildKernelY byte.b
     57 U00a6		       00	   BuildKernelRST byte.b
     58 U00a7		       00	   BuildKernelGrp0 byte.b
     59 U00a8		       00	   BuildKernelVdel1 byte.b
     60 U00a9
     61 U00a9		       00	   level_for_game byte.b
     62 U00aa		       00		      byte.b
     63 U00ab		       00		      byte.b
     64 U00ac		       00		      byte.b
     65 U00ad
     66 U00ad		       00	   DO_MISS_A  byte.b
     67 U00ae		       00	   DO_MISS_B  byte.b
     68 U00af		       00	   DO_GEMS_A  byte.b
     69 U00b0		       00		      byte.b
     70 U00b1		       00		      byte.b
     71 U00b2		       00		      byte.b
     72 U00b3		       00		      byte.b
     73 U00b4		       00		      byte.b
     74 U00b5		       00	   DO_GEMS_B  byte.b
     75 U00b6		       00		      byte.b
     76 U00b7		       00		      byte.b
     77 U00b8		       00		      byte.b
     78 U00b9		       00		      byte.b
     79 U00ba		       00		      byte.b
     80 U00bb
     81 U00bb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82 U00bb
     83 U00bb		       00 10	   ROW_COUNT  =	16
     84 U00bb
     85 U00bb		       00 02	   SIGNAL_LINE =	$02
     86 U00bb
     87 U00bb							; RAM+ memory map
     88 U00bb		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     89 U00bb		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     90 U00bb		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     91 U00bb
     92 U00bb		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     93 U00bb		       f1 40	   RAMP_STORAGE_R =	$f140
     94 U00bb
     95 U00bb							; NUSIZ values
     96 U00bb
     97 U00bb		       00 13	   THREE_COPIES =	%00010011
     98 U00bb
     99 U00bb							; Colors
    100 U00bb
    101 U00bb		       00 42	   COL_BG     equ	$42
    102 U00bb		       00 cc	   COL_EMERALD equ	$CC
    103 U00bb		       00 cc	   COL_EMERALD_2 equ	$CC
    104 U00bb
    105 U00bb							; HMOVE values for missiles
    106 U00bb
    107 U00bb		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
    108 U00bb		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
    109 U00bb
    110 U00bb		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
    111 U00bb		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
    112 U00bb
    113 U00bb							; Missile values when 2A=RST
    114 U00bb							; KERNEL_B_MISSILE_SLEEP equ 46
    115 U00bb							; KERNEL_B_MISSILE_HMOVE equ $20
    116 U00bb
    117 U00bb							; Sprite details
    118 U00bb
    119 U00bb		       00 09	   SPRITE_HEIGHT equ	9
    120 U00bb
    121 U00bb		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    122 U00bb		       00 1c	   EMERALD_SP equ	GRP1
    123 U00bb		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    124 U00bb		       00 11	   EMERALD_SP_RESET equ	RESP1
    125 U00bb		       00 13	   EMERALD_MI_RESET equ	RESM1
    126 U00bb		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    127 U00bb		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    128 U00bb		       00 05	   EMERALD_COPIES equ	NUSIZ1
    129 U00bb
    130 U00bb		       00 1b	   JET_SP     equ	GRP0
    131 U00bb		       00 10	   JET_SP_RESET equ	RESP0
    132 U00bb		       00 20	   JET_SP_HMOVE equ	HMP0
    133 U00bb		       00 06	   JET_SP_COLOR equ	COLUP0
    134 U00bb
    135 U00bb							; Spriteend is HEIGHT_OFFSET - YPos
    136 U00bb		       00 c8	   HEIGHT_OFFSET equ	200
    137 U00bb
    138 U00bb							; Compared with YPos
    139 U00bb		       00 3e	   FLOOR_OFFSET equ	62
    140 U00bb		       00 be	   CEILING_OFFSET equ	190
    141 U00bb
    142 U00bb							; Starting player position
    143 U00bb		       00 3e	   YPosStart  equ	62
    144 U00bb		       00 37	   XPosStart  equ	55
    145 U00bb
    146 U00bb							; Top left corner
    147 U00bb							; YPosStart equ 190
    148 U00bb							; XPosStart equ 28
    149 U00bb
    150 U00bb							; Tick (every 8 frames)
    151 U00bb		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     96 U00bb
     97 U00bb							; Bank 1
     98  e000 ????				      seg	CodeBank1
     99  d000					      org	$D000
    100  d000					      rorg	$F000
    101  d000		       00	   BANK1      byte.b
    102  d200					      org	$d200
    103  d200					      rorg	$d200
    104  d200				   Bank1Start
    105  d200		       ad fa ff 	      lda	$fffa
    106  d203		       ea		      nop
    107  d204		       ea		      nop
    108  d205		       ea		      nop
    109  d206
    110  dffc					      org	$dffc
    111  dffc					      rorg	$fffc
    112  dffc		       00 d2		      .word.w	Bank1Start
    113  dffe		       00 d2		      .word.w	Bank1Start
    114  e000
    115  e000							; Bank 2
    116  f000 ????				      seg	CodeBank2
    117  e000					      org	$E000
    118  e000					      rorg	$F000
    119  e000		       00	   BANK2      byte.b
    120  e200					      org	$e200
    121  e200					      rorg	$f200
    122  e200				   Bank2Start
    123  e200		       ad fa ff 	      lda	$fffa
    124  e203		       ea		      nop
    125  e204		       ea		      nop
    126  e205		       ea		      nop
    127  e206
    128  effc					      org	$effc
    129  effc					      rorg	$fffc
    130  effc		       00 f2		      .word.w	Bank2Start
    131  effe		       00 f2		      .word.w	Bank2Start
    132  f000
    133  f000							; Bank 3
    134  10000 ????				       seg	CodeBank3
    135  f000					      org	$F000
    136  f000					      rorg	$F000
    137  f000		       00	   BANK3      byte.b
    138  f200					      org	$f200
    139  f200					      rorg	$f200
    140  f200				   Bank3Start
    141  f200		       ad fa ff 	      lda	$fffa
    142  f203		       ea		      nop
    143  f204		       ea		      nop
    144  f205		       ea		      nop
    145  f206		       4c 09 f2 	      jmp	Start
    146  f209
    147  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 84		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 8a		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 87		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 88		      sta	Speed1
     48  f243		       85 89		      sta	Speed2
     49  f245		       85 8b		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8f		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 93		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 94		      sta	RamLowerSixByte
     59  f253
     60  f253							; Set all the bits in a silly manner
     61  f253		       a9 fe		      lda	#%11111110
     62  f255		       85 ac		      sta	[level_for_game + 3]
     63  f257		       a9 ff		      lda	#%11111111
     64  f259		       85 ab		      sta	[level_for_game + 2]
     65  f25b		       85 aa		      sta	[level_for_game + 1]
     66  f25d		       85 a9		      sta	[level_for_game + 0]
     67  f25f
     68  f25f							; Start with vertical sync (to reset frame)
     69  f25f		       4c d3 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f262					      include	"kernel_loader.s"
      1  f262							; Copies the gem kernels to RAM
      2  f262
      3  f262							; Copy Kernel A to CBSRAM
      4  f262				   LoadKernelA subroutine
      5  f262		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f264				   .loop
      7  f264		       b9 00 fb 	      lda	kernel_1_start,Y
      8  f267		       99 00 10 	      sta	$1000,Y
      9  f26a		       88		      dey
     10  f26b		       d0 f7		      bne	.loop
     11  f26d		       ad 00 fb 	      lda	kernel_1_start
     12  f270		       8d 00 10 	      sta	$1000
     13  f273		       60		      rts
     14  f274
     15  f274							; Copy Kernel B to CBSRAM
     16  f274				   LoadKernelB subroutine
     17  f274		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f276				   .loop
     19  f276		       b9 37 fb 	      lda	kernel_2_start,Y
     20  f279		       99 00 10 	      sta	$1000,Y
     21  f27c		       88		      dey
     22  f27d		       d0 f7		      bne	.loop
     23  f27f		       ad 37 fb 	      lda	kernel_2_start
     24  f282		       8d 00 10 	      sta	$1000
     25  f285		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f286					      include	"nibble.s"
      1  f286
      2  f286					      MAC	nibble_gem_kernel_a_1_build
      3  f286					      lda	#0
      4  f286					      ldx	#SENTINEL
      5  f286					      stx	BuildKernelX
      6  f286					      stx	BuildKernelY
      7  f286					      stx	BuildKernelRST
      8  f286							; Gemini 1A
      9  f286				   .K_1A
     10  f286					      ldy	[DO_GEMS_A + 0]
     11  f286					      jsr	KernelA_GenReset
     12  f286				   .if_1
     13  f286					      bne	.else_1
     14  f286					      sec
     15  f286					      rol
     16  f286							; Special: Encoding RST0
     17  f286							; Rewrite lda RamKernelPF1 to be #immediate
     18  f286					      ldy	#BC_LDA_IMM
     19  f286					      sty	[KernelA_B - $100]
     20  f286					      ldy	#%10100000
     21  f286					      sty	[KernelA_B - $100 + 1]
     22  f286							; Store 1A in GRP0
     23  f286					      ldy	[DO_GEMS_A + 1]
     24  f286					      sty	BuildKernelGrp0
     25  f286							; Gemini 1A is RESPx
     26  f286					      ldy	#EMERALD_SP_RESET
     27  f286					      sty	[KernelA_C - $100 + 1]
     28  f286							; Turn 3-cycle NOP into 4-cycle
     29  f286					      ldy	#$14
     30  f286					      sty	[KernelA_D - $100]
     31  f286					      jmp	.endif_1
     32  f286							; [BIT DEPTH] #1 If-End @ 1
     33  f286					      rol
     34  f286
     35  f286				   .else_1
     36  f286					      clc
     37  f286					      rol
     38  f286							; Store 0A in GRP0
     39  f286					      ldy	[DO_GEMS_A + 0]
     40  f286					      sty	BuildKernelGrp0
     41  f286					      ldy	[DO_GEMS_A + 1]
     42  f286					      jsr	KernelA_GenReset
     43  f286				   .if_2
     44  f286					      bne	.else_2
     45  f286					      sec
     46  f286					      rol
     47  f286							; GEM1ASWITCH
     48  f286					      jmp	.endif_2
     49  f286							; [BIT DEPTH] #2 If-End @ 2
     50  f286
     51  f286				   .else_2
     52  f286					      clc
     53  f286					      rol
     54  f286							; Calculate the 1A value
     55  f286					      ldy	SHARD_LUT_RF1
     56  f286					      cpy	#1
     57  f286					      .byte	$D0, #3
     58  f286					      ldy	#RESP1
     59  f286					      .byte	$2C
     60  f286					      ldy	#GRP1
     61  f286					      sty	RamKernelGemini1Reg
     62  f286							; Set opcode
     63  f286					      ldx	SHARD_LUT_RF1
     64  f286					      cpx	#1
     65  f286					      ldy	#BC_STX
     66  f286					      .byte	$F0, #5
     67  f286					      ldy	[DO_GEMS_A + 1]
     68  f286					      jsr	KernelA_UpdateRegs
     69  f286					      sty	RamKernelGemini1
     70  f286							; [BIT DEPTH] #2 *If-End @ 2
     71  f286							; [BIT DEPTH] #2 Else-End @ 2
     72  f286				   .endif_2
     73  f286							; [BIT DEPTH] #1 *If-End @ 1
     74  f286							; [BIT DEPTH] #1 Else-End @ 2
     75  f286				   .endif_1
     76  f286							; BuildKernelX, BuildKernelY are upgraded if not set
     77  f286							; Gemini 2A
     78  f286					      ldy	[DO_GEMS_A + 2]
     79  f286					      jsr	KernelA_GenReset
     80  f286				   .if_3
     81  f286					      bne	.else_3
     82  f286					      sec
     83  f286					      rol
     84  f286					      jmp	.endif_3
     85  f286							; [BIT DEPTH] #3 If-End @ 3
     86  f286
     87  f286				   .else_3
     88  f286					      clc
     89  f286					      rol
     90  f286							; Set opcode
     91  f286					      ldy	[DO_GEMS_A + 2]
     92  f286					      jsr	KernelA_UpdateRegs
     93  f286					      sty	RamKernelGemini2
     94  f286							; Set opcode target
     95  f286					      ldy	SHARD_LUT_RF1
     96  f286					      cpy	#2
     97  f286					      .byte	$D0, #3
     98  f286					      ldy	#RESP1
     99  f286					      .byte	$2C
    100  f286					      ldy	#GRP1
    101  f286					      sty	RamKernelGemini2Reg
    102  f286							; [BIT DEPTH] #3 *If-End @ 3
    103  f286							; [BIT DEPTH] #3 Else-End @ 3
    104  f286				   .endif_3
    105  f286							; Gemini 3A
    106  f286					      ldy	[DO_GEMS_A + 3]
    107  f286					      jsr	KernelA_GenReset
    108  f286				   .if_4
    109  f286					      bne	.else_4
    110  f286					      sec
    111  f286					      rol
    112  f286					      jmp	.endif_4
    113  f286							; [BIT DEPTH] #4 If-End @ 4
    114  f286
    115  f286				   .else_4
    116  f286					      clc
    117  f286					      rol
    118  f286							; Set opcode
    119  f286					      ldy	[DO_GEMS_A + 3]
    120  f286					      jsr	KernelA_UpdateRegs
    121  f286					      sty	RamKernelGemini3
    122  f286							; Set opcode target
    123  f286					      ldy	SHARD_LUT_RF1
    124  f286					      cpy	#3
    125  f286					      .byte	$D0, #3
    126  f286					      ldy	#RESP1
    127  f286					      .byte	$2C
    128  f286					      ldy	#GRP1
    129  f286					      sty	RamKernelGemini3Reg
    130  f286							; [BIT DEPTH] #4 *If-End @ 4
    131  f286							; [BIT DEPTH] #4 Else-End @ 4
    132  f286				   .endif_4
    133  f286							; [BIT DEPTH] Final: 4 (out of 8 bits)
    134  f286					      rol
    135  f286					      rol
    136  f286					      rol
    137  f286					      rol
    138  f286					      ENDM
    139  f286
    140  f286					      MAC	nibble_gem_kernel_a_2_build
    141  f286					      lda	#0
    142  f286							; VD1 default
    143  f286					      ldx	[DO_GEMS_A + 1]
    144  f286					      stx	BuildKernelVdel1
    145  f286							; Gemini 4A
    146  f286					      ldx	SHARD_LUT_VD1
    147  f286					      cpx	#4
    148  f286				   .if_1
    149  f286					      beq	.else_1
    150  f286					      sec
    151  f286					      rol
    152  f286							; Set PHP
    153  f286							; Update VDEL1
    154  f286					      ldx	[DO_GEMS_A + 4]
    155  f286					      stx	BuildKernelVdel1
    156  f286					      jmp	.endif_1
    157  f286							; [BIT DEPTH] #1 If-End @ 1
    158  f286
    159  f286				   .else_1
    160  f286					      clc
    161  f286					      rol
    162  f286					      ldy	[DO_GEMS_A + 4]
    163  f286					      jsr	KernelA_UpdateRegs
    164  f286					      sty	RamKernelGemini4
    165  f286							; Set PHP
    166  f286							; [BIT DEPTH] #1 *If-End @ 1
    167  f286							; [BIT DEPTH] #1 Else-End @ 1
    168  f286				   .endif_1
    169  f286							; VD1
    170  f286							; ldy #SHARD_VD1
    171  f286							; sty [KernelA_VDEL1 - $100]
    172  f286							; GRP0
    173  f286							; ldy #SHARD_GRP0
    174  f286							; sty [KernelA_VDEL0 - $100]
    175  f286							; X
    176  f286							; ldy #SHARD_X
    177  f286							; sty RamKernelX
    178  f286							; Y
    179  f286							; Gemini 5A
    180  f286							; TODO eventually...?
    181  f286							; [BIT DEPTH] Final: 1 (out of 8 bits)
    182  f286					      rol
    183  f286					      rol
    184  f286					      rol
    185  f286					      rol
    186  f286					      rol
    187  f286					      rol
    188  f286					      rol
    189  f286					      ENDM
    190  f286
    191  f286					      MAC	nibble_gem_kernel_b_build
    192  f286					      lda	#0
    193  f286							; Php target default
    194  f286					      ldx	#RESP1
    195  f286					      stx	RamKernelPhpTarget
    196  f286					      ldx	#SENTINEL
    197  f286					      stx	BuildKernelX
    198  f286					      stx	BuildKernelY
    199  f286					      stx	BuildKernelRST
    200  f286							; Gemini 0B
    201  f286					      ldy	[DO_GEMS_B + 0]
    202  f286					      sty	BuildKernelGrp0
    203  f286							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    204  f286							; Gemini 1B
    205  f286					      ldy	[DO_GEMS_B + 1]
    206  f286					      jsr	KernelA_UpdateRegs
    207  f286					      sty	RamKernelGemini1
    208  f286							; Calculate Gemini 2B
    209  f286					      ldy	[DO_GEMS_B + 2]
    210  f286					      jsr	KernelB_UpdateRegs
    211  f286					      sty	RamKernelGemini2
    212  f286							; Calculate Gemini 3B
    213  f286					      ldy	[DO_GEMS_B + 3]
    214  f286					      jsr	KernelB_UpdateRegs
    215  f286					      sty	RamKernelGemini3
    216  f286							; Gemini 2B
    217  f286				   .K_2B
    218  f286					      ldy	[DO_GEMS_B + 2]
    219  f286					      jsr	KernelB_GenPhp
    220  f286				   .if_1
    221  f286					      bne	.else_1
    222  f286					      sec
    223  f286					      rol
    224  f286							; Write to PHP in 2B
    225  f286					      jmp	.endif_1
    226  f286							; [BIT DEPTH] #1 If-End @ 1
    227  f286
    228  f286				   .else_1
    229  f286					      clc
    230  f286					      rol
    231  f286							; [BIT DEPTH] #1 *If-End @ 1
    232  f286							; [BIT DEPTH] #1 Else-End @ 1
    233  f286				   .endif_1
    234  f286							; Gemini 3B
    235  f286					      ldy	[DO_GEMS_B + 3]
    236  f286					      jsr	KernelB_GenPhp
    237  f286				   .if_2
    238  f286					      bne	.else_2
    239  f286					      sec
    240  f286					      rol
    241  f286							; Write to PHP in 3B
    242  f286					      jmp	.endif_2
    243  f286							; [BIT DEPTH] #2 If-End @ 2
    244  f286
    245  f286				   .else_2
    246  f286					      clc
    247  f286					      rol
    248  f286							; [BIT DEPTH] #2 *If-End @ 2
    249  f286							; [BIT DEPTH] #2 Else-End @ 2
    250  f286				   .endif_2
    251  f286							; Gemini 4B
    252  f286					      ldy	[DO_GEMS_B + 4]
    253  f286					      jsr	KernelA_UpdateRegs
    254  f286				   .K_4B
    255  f286					      sty	RamKernelGemini4
    256  f286							; TODO if no PHP, rewrite previous section:
    257  f286							; NIBBLE_IF cs
    258  f286							;
    259  f286							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    260  f286							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    261  f286							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    262  f286							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    263  f286							; NIBBLE_END_IF
    264  f286							; Make adjustments for sprites.
    265  f286					      ror	BuildKernelGrp0
    266  f286					      ror	BuildKernelX
    267  f286					      ror	BuildKernelY
    268  f286							;
    269  f286							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    270  f286							; GRP0
    271  f286							; X
    272  f286							; Y
    273  f286							; [BIT DEPTH] Final: 2 (out of 8 bits)
    274  f286					      rol
    275  f286					      rol
    276  f286					      rol
    277  f286					      rol
    278  f286					      rol
    279  f286					      rol
    280  f286					      ENDM
    281  f286
    282  f286
    283  f286					      MAC	nibble_gem_kernel_a_1
    284  f286				   .if_1
    285  f286					      asl
    286  f286					      bcc	.else_1
    287  f286					      jmp	.endif_1
    288  f286				   .else_1
    289  f286				   .if_2
    290  f286					      asl
    291  f286					      bcc	.else_2
    292  f286					      ldx	#BC_STX
    293  f286					      stx	[KernelA_D_W + 0]
    294  f286					      ldx	#RESP1
    295  f286					      stx	[KernelA_D_W + 1]
    296  f286					      jmp	.endif_2
    297  f286				   .else_2
    298  f286					      ldx	RamKernelGemini1
    299  f286					      stx	[KernelA_D_W + 0]
    300  f286					      ldx	RamKernelGemini1Reg
    301  f286					      stx	[KernelA_D_W + 1]
    302  f286				   .endif_2
    303  f286				   .endif_1
    304  f286				   .if_3
    305  f286					      asl
    306  f286					      bcc	.else_3
    307  f286					      ldx	#NOP_REG
    308  f286					      stx	[KernelA_E_W + 1 + 0]
    309  f286					      ldx	#RESP1
    310  f286					      stx	[KernelA_G_W + 1 + 0]
    311  f286					      jmp	.endif_3
    312  f286				   .else_3
    313  f286					      ldx	#RESP1
    314  f286					      stx	[KernelA_E_W + 1 + 0]
    315  f286					      ldx	RamKernelGemini2
    316  f286					      stx	[KernelA_G_W + 0]
    317  f286					      ldx	RamKernelGemini2Reg
    318  f286					      stx	[KernelA_G_W + 1]
    319  f286				   .endif_3
    320  f286				   .if_4
    321  f286					      asl
    322  f286					      bcc	.else_4
    323  f286					      ldx	#RESP1
    324  f286					      stx	[KernelA_H_W + 1 + 0]
    325  f286					      jmp	.endif_4
    326  f286				   .else_4
    327  f286					      ldx	RamKernelGemini3
    328  f286					      stx	[KernelA_H_W + 0]
    329  f286					      ldx	RamKernelGemini3Reg
    330  f286					      stx	[KernelA_H_W + 1]
    331  f286				   .endif_4
    332  f286					      ENDM
    333  f286
    334  f286					      MAC	nibble_gem_kernel_a_2
    335  f286				   .if_1
    336  f286					      asl
    337  f286					      bcc	.else_1
    338  f286					      ldx	#BC_STA
    339  f286					      stx	[[KernelA_I_W + 0] + 0]
    340  f286					      ldx	#EMERALD_SP_RESET
    341  f286					      stx	[[KernelA_I_W + 0] + 1]
    342  f286					      ldx	#BC_STA
    343  f286					      stx	[[KernelA_J_W + 1] + 0]
    344  f286					      ldx	#PF1
    345  f286					      stx	[[KernelA_J_W + 1] + 1]
    346  f286					      ldx	#BC_PHP
    347  f286					      stx	[[KernelA_K_W + 1] + 0]
    348  f286					      ldx	#VDELP1
    349  f286					      stx	[RamKernelPhpTarget + 0]
    350  f286					      jmp	.endif_1
    351  f286				   .else_1
    352  f286					      ldx	#BC_PHP
    353  f286					      stx	[[KernelA_I_W + 0] + 0]
    354  f286					      ldx	#BC_STA
    355  f286					      stx	[[KernelA_J_W + 0] + 0]
    356  f286					      ldx	#PF1
    357  f286					      stx	[[KernelA_J_W + 0] + 1]
    358  f286					      ldx	RamKernelGemini4
    359  f286					      stx	[KernelA_K_W + 0]
    360  f286					      ldx	#EMERALD_SP
    361  f286					      stx	[KernelA_K_W + 1]
    362  f286					      ldx	#RESP1
    363  f286					      stx	[RamKernelPhpTarget + 0]
    364  f286				   .endif_1
    365  f286					      ldx	BuildKernelVdel1
    366  f286					      stx	[[KernelA_VDEL1 - $100] + 0]
    367  f286					      ldx	BuildKernelGrp0
    368  f286					      stx	[[KernelA_VDEL0 - $100] + 0]
    369  f286					      ldx	BuildKernelX
    370  f286					      stx	[RamKernelX + 0]
    371  f286					      ldx	BuildKernelY
    372  f286					      stx	[[KernelA_STY - $100] + 0]
    373  f286					      ENDM
    374  f286
    375  f286					      MAC	nibble_gem_kernel_b
    376  f286					      ldx	RamKernelGemini1
    377  f286					      stx	[KernelB_D_W + 0]
    378  f286				   .if_1
    379  f286					      asl
    380  f286					      bcc	.else_1
    381  f286					      ldx	#EMERALD_SP
    382  f286					      stx	[RamKernelPhpTarget + 0]
    383  f286					      ldx	#BC_STY
    384  f286					      stx	[[KernelB_E_W + 0] + 0]
    385  f286					      ldx	#EMERALD_SP_RESET
    386  f286					      stx	[[KernelB_E_W + 0] + 1]
    387  f286					      ldx	#BC_PHP
    388  f286					      stx	[[KernelB_F_W + 1] + 0]
    389  f286					      ldx	#BC_STA
    390  f286					      stx	[[KernelB_G_W + 0] + 0]
    391  f286					      ldx	#PF1
    392  f286					      stx	[[KernelB_G_W + 0] + 1]
    393  f286					      ldx	RamKernelGemini3
    394  f286					      stx	[[KernelB_H_W + 0] + 0]
    395  f286					      ldx	#EMERALD_SP
    396  f286					      stx	[[KernelB_H_W + 0] + 1]
    397  f286					      jmp	.endif_1
    398  f286				   .else_1
    399  f286					      ldx	RamKernelGemini2
    400  f286					      stx	[KernelB_F_W + 0]
    401  f286					      ldx	#EMERALD_SP
    402  f286					      stx	[KernelB_F_W + 1]
    403  f286				   .endif_1
    404  f286				   .if_2
    405  f286					      asl
    406  f286					      bcc	.else_2
    407  f286					      ldx	#EMERALD_SP
    408  f286					      stx	[RamKernelPhpTarget + 0]
    409  f286					      ldx	#BC_STY
    410  f286					      stx	[[KernelB_E_W + 0] + 0]
    411  f286					      ldx	#EMERALD_SP_RESET
    412  f286					      stx	[[KernelB_E_W + 0] + 1]
    413  f286					      ldx	RamKernelGemini2
    414  f286					      stx	[[KernelB_F_W + 1] + 0]
    415  f286					      ldx	#EMERALD_SP
    416  f286					      stx	[[KernelB_F_W + 1] + 1]
    417  f286					      ldx	#BC_STA
    418  f286					      stx	[[KernelB_G_W + 1] + 0]
    419  f286					      ldx	#PF1
    420  f286					      stx	[[KernelB_G_W + 1] + 1]
    421  f286					      ldx	#BC_PHP
    422  f286					      stx	[[KernelB_H_W + 1] + 0]
    423  f286					      jmp	.endif_2
    424  f286				   .else_2
    425  f286					      ldx	RamKernelGemini3
    426  f286					      stx	[KernelA_H_W + 0]
    427  f286					      ldx	#EMERALD_SP
    428  f286					      stx	[KernelA_H_W + 1]
    429  f286				   .endif_2
    430  f286					      ldx	RamKernelGemini4
    431  f286					      stx	[KernelB_J_W + 0]
    432  f286					      ldx	BuildKernelGrp0
    433  f286					      stx	[[KernelB_VDEL0 - $100] + 0]
    434  f286					      ldx	BuildKernelX
    435  f286					      stx	[RamKernelX + 0]
    436  f286					      ldx	BuildKernelY
    437  f286					      stx	[[KernelB_STY - $100] + 0]
    438  f286					      ENDM
    439  f286
    440  f286
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f286					      include	"game_frame.s"
      1  f286							; Frame loop, including calling out to other kernels.
      2  f286
      3  f286		       00 aa	   SENTINEL   =	%010101010
      4  f286
      5  f286							; Reflected for Kernel A
      6  f286		       00 00	   G00	      =	%00000000
      7  f286		       00 60	   G01	      =	%01100000
      8  f286		       00 06	   G10	      =	%00000110
      9  f286		       00 66	   G11	      =	%01100110
     10  f286
     11  f286							; Reflected for Kernel A
     12  f286		       00 00	   G00	      =	%00000000
     13  f286		       00 60	   G01	      =	%01100000
     14  f286		       00 06	   G10	      =	%00000110
     15  f286		       00 66	   G11	      =	%01100110
     16  f286
     17  f286
     18  f286							; gems:     [g01,g10,g01,g11,g00,g00]
     19  f286							; cpu:      cpu(g01,g00,false,g10,g11,false)
     20  f286							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     21  f286
     22  f286							; gems:     [g00,g01,g10,g11,g00,g01]
     23  f286							; cpu:      cpu(g01,g00,false,g10,g11,false)
     24  f286							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     25  f286
     26  f286							; gems:     [g01,g10,g11,g00,g01,g10]
     27  f286							; cpu:      cpu(g01,g01,false,g10,g11,false)
     28  f286							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     29  f286
     30  f286							; gems:     [g10,g11,g00,g01,g10,g11]
     31  f286							; cpu:      cpu(g10,g10,false,g11,g01,false)
     32  f286							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     33  f286
     34  f286							; gems:     [g01,g00,g00,g11,g01,g11]
     35  f286							; cpu:      cpu(g01,g01,false,g00,g11,false)
     36  f286							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     37  f286
     38  f286							; gems:     [g11,g01,g01,g01,g01,g00]
     39  f286							; cpu:      cpu(g00,g01,false,g11,g00,false)
     40  f286							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     41  f286
     42  f286							; gems:     [g10,g10,g11,g00,g11,g01]
     43  f286							; cpu:      cpu(g00,g00,false,g10,g11,false)
     44  f286							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     45  f286
     46  f286							; gems:     [g01,g00,g00,g11,g01,g11]
     47  f286							; cpu:      cpu(g00,g01,false,g01,g11,false)
     48  f286							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     49  f286
     50  f286							; gems:     [g11,g10,g00,g01,g00,g01]
     51  f286							; cpu:      cpu(g11,g00,false,g10,g01,false)
     52  f286							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     53  f286
     54  f286							; Y=Gemini Sprite
     55  f286							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     56  f286							; processor flag Z is TRUE if this is RST.
     57  f286				   KernelA_GenReset subroutine
     58  f286		       c0 00		      cpy	#$00
     59  f288		       f0 01		      beq	.start
     60  f28a		       60		      rts
     61  f28b							; Current Gemini = $00
     62  f28b				   .start
     63  f28b		       a6 a6		      ldx	BuildKernelRST
     64  f28d		       e0 aa		      cpx	#SENTINEL
     65  f28f		       d0 04		      bne	.set_else
     66  f291							; We have found the first (and only) RST on this line, set the marker var
     67  f291		       a2 ff		      ldx	#$ff
     68  f293		       86 a6		      stx	BuildKernelRST
     69  f295				   .set_else
     70  f295		       a2 00		      ldx	#$00
     71  f297		       60		      rts
     72  f298
     73  f298							; Y=Gemini Sprite
     74  f298							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     75  f298							; processor flag Z is TRUE if this is RST.
     76  f298				   KernelB_GenPhp subroutine
     77  f298		       c0 06		      cpy	#G10
     78  f29a		       f0 05		      beq	.start
     79  f29c		       c0 66		      cpy	#G11
     80  f29e		       f0 01		      beq	.start
     81  f2a0		       60		      rts
     82  f2a1							; Current Gemini = $00
     83  f2a1				   .start
     84  f2a1		       a6 a6		      ldx	BuildKernelRST
     85  f2a3		       e0 aa		      cpx	#SENTINEL
     86  f2a5		       d0 06		      bne	.set_else
     87  f2a7							; We have found the first (and only) RST on this line, set the marker var
     88  f2a7		       a2 ff		      ldx	#$ff
     89  f2a9		       86 a6		      stx	BuildKernelRST
     90  f2ab		       a2 00		      ldx	#$00
     91  f2ad				   .set_else
     92  f2ad		       60		      rts
     93  f2ae
     94  f2ae							; Allocates build-time registers for a new Gemini sprite value.
     95  f2ae							; register Y = the storage opcode to write to the result
     96  f2ae							;
     97  f2ae							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     98  f2ae							; BuildKernelX, BuildKernelY are upgraded if not set.
     99  f2ae							; Y=Gemini Sprite
    100  f2ae				   KernelB_UpdateRegs
    101  f2ae				   KernelA_UpdateRegs subroutine
    102  f2ae
    103  f2ae							; If equal to GRP0, return nop
    104  f2ae							; FIXME GRP0 might not always be up to date (should update each entry?)
    105  f2ae							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    106  f2ae							; cpy BuildKernelGrp0
    107  f2ae							; bne .set_start
    108  f2ae							; ; TODO if this is stx + NOP value, then register doesn't have to change as
    109  f2ae							; ; often in GEM1ASWITCH
    110  f2ae							; ldy #BC_NOP
    111  f2ae							; rts
    112  f2ae
    113  f2ae		       c4 a4		      cpy	BuildKernelX
    114  f2b0		       d0 03		      bne	.op_else
    115  f2b2		       a0 86		      ldy	#BC_STX
    116  f2b4		       60		      rts
    117  f2b5				   .op_else
    118  f2b5		       c4 a5		      cpy	BuildKernelY
    119  f2b7		       d0 03		      bne	.op_end
    120  f2b9		       a0 84		      ldy	#BC_STY
    121  f2bb		       60		      rts
    122  f2bc				   .op_end
    123  f2bc
    124  f2bc				   .set_start
    125  f2bc		       a6 a4		      ldx	BuildKernelX
    126  f2be		       e0 aa		      cpx	#SENTINEL
    127  f2c0		       d0 05		      bne	.set_else
    128  f2c2		       84 a4		      sty	BuildKernelX
    129  f2c4		       a0 86		      ldy	#BC_STX
    130  f2c6		       60		      rts
    131  f2c7				   .set_else
    132  f2c7		       a6 a5		      ldx	BuildKernelY
    133  f2c9		       e0 aa		      cpx	#SENTINEL
    134  f2cb		       d0 05		      bne	.set_end
    135  f2cd		       84 a5		      sty	BuildKernelY
    136  f2cf		       a0 84		      ldy	#BC_STY
    137  f2d1		       60		      rts
    138  f2d2				   .set_end
    139  f2d2							; Failed all
      0  f2d2					      ASSERT_RUNTIME	"0"
      1  f2d2				   .COND      SET	"0"
 ASSERT: breakif { pc== $f2d2  && !(  0  ) }
      2  f2d2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    141  f2d2		       60		      rts
    142  f2d3
    143  f2d3							; Vertical Sync
    144  f2d3				   VerticalSync subroutine
      0  f2d3					      VERTICAL_SYNC
      1  f2d3		       a9 0e		      lda	#%1110
      2  f2d5		       85 02	   .VSLP1     sta	WSYNC
      3  f2d7		       85 00		      sta	VSYNC
      4  f2d9		       4a		      lsr
      5  f2da		       d0 f9		      bne	.VSLP1
    146  f2dc
    147  f2dc				   FrameStart subroutine
      0  f2dc					      ASSERT_RUNTIME	"_scan == #0"
      1  f2dc				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2dc  && !(  _scan == #0  ) }
      2  f2dc					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    149  f2dc
    150  f2dc				   VerticalBlank subroutine
      0  f2dc					      TIMER_SETUP	37
      1  f2dc				   .lines     SET	37
      2  f2dc		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2de		       85 02		      sta	WSYNC
      4  f2e0		       8d 96 02 	      sta	TIM64T
    152  f2e3
    153  f2e3							; Scanline counter
    154  f2e3		       a9 10		      lda	#ROW_COUNT
    155  f2e5		       85 83		      sta	LoopCount
    156  f2e7
    157  f2e7							; Frame counter
    158  f2e7		       e6 84		      inc	FrameCount
    159  f2e9
    160  f2e9							; Skip every 8 frames for increasing demo index
    161  f2e9		       a5 84		      lda	FrameCount
    162  f2eb		       29 07		      and	#FrameSkip
    163  f2ed		       c9 07		      cmp	#FrameSkip
    164  f2ef		       d0 0d		      bne	.next_next_thing
    165  f2f1
    166  f2f1		       18		      clc
    167  f2f2		       a5 8f		      lda	ROW_DEMO_INDEX
    168  f2f4		       69 04		      adc	#4
    169  f2f6		       c9 68		      cmp	#[level_01_end - level_01]
    170  f2f8		       90 02		      bcc	.next_thing_local
    171  f2fa		       a9 00		      lda	#0
    172  f2fc				   .next_thing_local
    173  f2fc		       85 8f		      sta	ROW_DEMO_INDEX
    174  f2fe				   .next_next_thing
    175  f2fe		       85 02		      sta	WSYNC
    176  f300
    177  f300							; Positioning
      0  f300					      SLEEP	40
      1  f300				   .CYCLES    SET	40
      2  f300
      3  f300				  -	      IF	.CYCLES < 2
      4  f300				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f300				  -	      ERR
      6  f300					      ENDIF
      7  f300
      8  f300				  -	      IF	.CYCLES & 1
      9  f300				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f300				  -	      nop	0
     11  f300				  -	      ELSE
     12  f300				  -	      bit	VSYNC
     13  f300				  -	      ENDIF
     14  f300				  -.CYCLES    SET	.CYCLES - 3
     15  f300					      ENDIF
     16  f300
     17  f300					      REPEAT	.CYCLES / 2
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     19  f314					      REPEND
    179  f314		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    180  f316		       85 02		      sta	WSYNC
    181  f318
    182  f318							; Misc
    183  f318		       a9 00		      lda	#00
    184  f31a		       85 1e		      sta	EMERALD_MI_ENABLE
    185  f31c
    186  f31c							; Assign dervied SpriteEnd value
    187  f31c		       18		      clc
    188  f31d		       a9 c8		      lda	#HEIGHT_OFFSET
    189  f31f		       e5 8a		      sbc	YPos
    190  f321		       85 86		      sta	SpriteEnd
    191  f323
    192  f323							; Player 1
    193  f323		       a5 87		      lda	XPos
    194  f325		       a2 00		      ldx	#0
    195  f327		       20 44 f9 	      jsr	SetHorizPos
    196  f32a
    197  f32a							; Extract 26-bit string to full Gemini profile
    198  f32a		       20 00 f8 	      jsr	gemini_populate
    199  f32d
    200  f32d				   frame_setup subroutine
    201  f32d							; Kernel A or B
    202  f32d		       a9 01		      lda	#01
    203  f32f		       25 84		      and	FrameCount
    204  f331		       d0 24		      bne	frame_setup_kernel_b
    205  f333
    206  f333				   frame_setup_kernel_a subroutine
    207  f333							; Load kernel into CBSRAM
    208  f333		       20 62 f2 	      jsr	LoadKernelA
    209  f336
    210  f336							; Move missile
    211  f336		       85 02		      sta	WSYNC
      0  f338					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f338				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f338
      3  f338				  -	      IF	.CYCLES < 2
      4  f338				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f338				  -	      ERR
      6  f338					      ENDIF
      7  f338
      8  f338				  -	      IF	.CYCLES & 1
      9  f338				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f338				  -	      nop	0
     11  f338				  -	      ELSE
     12  f338				  -	      bit	VSYNC
     13  f338				  -	      ENDIF
     14  f338				  -.CYCLES    SET	.CYCLES - 3
     15  f338					      ENDIF
     16  f338
     17  f338					      REPEAT	.CYCLES / 2
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     19  f346					      REPEND
    213  f346		       85 13		      sta	EMERALD_MI_RESET
    214  f348		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    215  f34a		       85 23		      sta	EMERALD_MI_HMOVE
    216  f34c
    217  f34c							; DEBUG: Set per-kernel color
    218  f34c		       a2 cc		      ldx	#COL_EMERALD
    219  f34e		       86 07		      stx	EMERALD_SP_COLOR
    220  f350
    221  f350							; Set reflection for Jetpack.
    222  f350		       a9 ff		      lda	#%11111111
    223  f352		       85 0c		      sta	REFP1
    224  f354
    225  f354		       4c 84 f3 	      jmp	frame_setup_complete
    226  f357
    227  f357				   frame_setup_kernel_b subroutine
    228  f357							; Load kernel into CBSRAM
    229  f357		       20 74 f2 	      jsr	LoadKernelB
    230  f35a
    231  f35a							; Move missile
    232  f35a		       85 02		      sta	WSYNC
      0  f35c					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f35c				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f35c
      3  f35c				  -	      IF	.CYCLES < 2
      4  f35c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f35c				  -	      ERR
      6  f35c					      ENDIF
      7  f35c
      8  f35c					      IF	.CYCLES & 1
      9  f35c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f35c		       04 00		      nop	0
     11  f35e				  -	      ELSE
     12  f35e				  -	      bit	VSYNC
     13  f35e					      ENDIF
     14  f35e				   .CYCLES    SET	.CYCLES - 3
     15  f35e					      ENDIF
     16  f35e
     17  f35e					      REPEAT	.CYCLES / 2
     18  f35e		       ea		      nop
     17  f35e					      REPEND
     18  f35f		       ea		      nop
     17  f35f					      REPEND
     18  f360		       ea		      nop
     17  f360					      REPEND
     18  f361		       ea		      nop
     17  f361					      REPEND
     18  f362		       ea		      nop
     17  f362					      REPEND
     18  f363		       ea		      nop
     17  f363					      REPEND
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     17  f369					      REPEND
     18  f36a		       ea		      nop
     17  f36a					      REPEND
     18  f36b		       ea		      nop
     17  f36b					      REPEND
     18  f36c		       ea		      nop
     17  f36c					      REPEND
     18  f36d		       ea		      nop
     17  f36d					      REPEND
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     17  f36f					      REPEND
     18  f370		       ea		      nop
     17  f370					      REPEND
     18  f371		       ea		      nop
     17  f371					      REPEND
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     19  f376					      REPEND
    234  f376		       85 13		      sta	EMERALD_MI_RESET
    235  f378		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    236  f37a		       85 23		      sta	EMERALD_MI_HMOVE
    237  f37c
    238  f37c							; DEBUG: Set per-kernel color
    239  f37c		       a2 e0		      ldx	#$e0
    240  f37e							; ldx #COL_EMERALD
    241  f37e		       86 07		      stx	EMERALD_SP_COLOR
    242  f380
    243  f380							; Disable reflection for Jetpack.
    244  f380		       a9 ff		      lda	#%11111111
    245  f382		       85 0c		      sta	REFP1
    246  f384
    247  f384				   frame_setup_complete
    248  f384		       ad 00 f1 	      lda	$f100
    249  f387		       85 80		      sta	DebugKernelID
    250  f389
    251  f389		       ad 7c fc 	      lda	shard_map
    252  f38c		       a0 01		      ldy	#1	; gemini counter, starting at 1
    253  f38e				   gemini_builder
    254  f38e		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    255  f390		       d0 00		      bne	.no_vd0
    256  f392				   .no_vd0
    257  f392
    258  f392
    259  f392				   nibble_precompile_gem_kernel
    260  f392				   DBG_NIBBLE
    261  f392		       00 a9	   BC_LDA_IMM =	$a9
    262  f392		       00 85	   BC_STA     =	$85
    263  f392		       00 86	   BC_STX     =	$86
    264  f392		       00 84	   BC_STY     =	$84
    265  f392		       00 08	   BC_PHP     =	$08
    266  f392		       00 04	   BC_NOP     =	$04
    267  f392
    268  f392		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    269  f392
    270  f392				   KernelA_D_W EQM	[KernelA_D - $100]
    271  f392				   KernelA_E_W EQM	[KernelA_E - $100]
    272  f392				   KernelA_G_W EQM	[KernelA_G - $100]
    273  f392				   KernelA_H_W EQM	[KernelA_H - $100]
    274  f392				   KernelA_I_W EQM	[KernelA_I - $100]
    275  f392				   KernelA_J_W EQM	[KernelA_J - $100]
    276  f392				   KernelA_K_W EQM	[KernelA_K - $100]
    277  f392
    278  f392				   KernelB_D_W EQM	[KernelB_D - $100]
    279  f392				   KernelB_E_W EQM	[KernelB_E - $100]
    280  f392				   KernelB_F_W EQM	[KernelB_F - $100]
    281  f392				   KernelB_G_W EQM	[KernelB_G - $100]
    282  f392				   KernelB_H_W EQM	[KernelB_H - $100]
    283  f392				   KernelB_I_W EQM	[KernelB_I - $100]
    284  f392				   KernelB_J_W EQM	[KernelB_J - $100]
    285  f392				   KernelB_K_W EQM	[KernelB_K - $100]
    286  f392
    287  f392							; Nibble Kernel A
      0  f392					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00d0 ????				      seg.U	ignoreme
    289 U00d0 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    290 U00d2 ????	       86 a4		      stx	BuildKernelX
    291 U00d4 ????	       86 a5		      stx	BuildKernelY
    292 U00d6 ????	       86 a6		      stx	BuildKernelRST
    293 U00d8 ????
    294 U00d8 ????						; Gemini 1A
    295 U00d8 ????			   .K_1A
    296 U00d8 ????	       a4 af		      ldy	[DO_GEMS_A + 0]
    297 U00da ????	       20 86 f2 	      jsr	KernelA_GenReset
      0 U00dd ????				      NIBBLE_IF	eq
    299 U00dd ????						; Special: Encoding RST0
    300 U00dd ????						; Rewrite lda RamKernelPF1 to be #immediate
    301 U00dd ????	       a0 a9		      ldy	#BC_LDA_IMM
    302 U00df ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    303 U00e2 ????	       a0 a0		      ldy	#%10100000
    304 U00e4 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    305 U00e7 ????						; Store 1A in GRP0
    306 U00e7 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    307 U00e9 ????	       84 a7		      sty	BuildKernelGrp0
    308 U00eb ????						; Gemini 1A is RESPx
    309 U00eb ????	       a0 11		      ldy	#EMERALD_SP_RESET
    310 U00ed ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    311 U00f0 ????						; Turn 3-cycle NOP into 4-cycle
    312 U00f0 ????	       a0 14		      ldy	#$14	; TODO what is this
    313 U00f2 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U00f5 ????				      NIBBLE_ELSE
    315 U00f5 ????						; Store 0A in GRP0
    316 U00f5 ????	       a4 af		      ldy	[DO_GEMS_A + 0]
    317 U00f7 ????	       84 a7		      sty	BuildKernelGrp0
    318 U00f9 ????
    319 U00f9 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    320 U00fb ????	       20 86 f2 	      jsr	KernelA_GenReset
      0 U00fe ????				      NIBBLE_IF	eq
    322 U00fe ????						; GEM1ASWITCH
      0 U00fe ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U00fe ????				      NIBBLE_ELSE
    325 U00fe ????						; Calculate the 1A value
    326 U00fe ????	       ac d4 f8 	      ldy	SHARD_LUT_RF1
    327 U0101 ????	       c0 01		      cpy	#1
    328 U0103 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    329 U0105 ????	       a0 11		      ldy	#RESP1
    330 U0107 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    331 U0108 ????	       a0 1c		      ldy	#GRP1
    332 U010a ????	       84 9c		      sty	RamKernelGemini1Reg
    333 U010c ????
    334 U010c ????						; Set opcode
    335 U010c ????	       ae d4 f8 	      ldx	SHARD_LUT_RF1
    336 U010f ????	       e0 01		      cpx	#1
    337 U0111 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    338 U0113 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    339 U0115 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    340 U0117 ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    341 U011a ????	       84 9b		      sty	RamKernelGemini1
    342 U011c ????
      0 U011c ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U011c ????				      NIBBLE_END_IF
      0 U011c ????				      NIBBLE_END_IF
    346 U011c ????
    347 U011c ????						; BuildKernelX, BuildKernelY are upgraded if not set
    348 U011c ????						; Gemini 2A
    349 U011c ????	       a4 b1		      ldy	[DO_GEMS_A + 2]
    350 U011e ????	       20 86 f2 	      jsr	KernelA_GenReset
      0 U0121 ????				      NIBBLE_IF	eq
      0 U0121 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0121 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0121 ????				      NIBBLE_ELSE
    355 U0121 ????						; Set opcode
    356 U0121 ????	       a4 b1		      ldy	[DO_GEMS_A + 2]
    357 U0123 ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    358 U0126 ????	       84 9d		      sty	RamKernelGemini2
    359 U0128 ????
    360 U0128 ????						; Set opcode target
    361 U0128 ????	       ac d4 f8 	      ldy	SHARD_LUT_RF1
    362 U012b ????	       c0 02		      cpy	#2
    363 U012d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    364 U012f ????	       a0 11		      ldy	#RESP1
    365 U0131 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    366 U0132 ????	       a0 1c		      ldy	#GRP1
    367 U0134 ????	       84 9e		      sty	RamKernelGemini2Reg
    368 U0136 ????
      0 U0136 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0136 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0136 ????				      NIBBLE_END_IF
    372 U0136 ????
    373 U0136 ????						; Gemini 3A
    374 U0136 ????	       a4 b2		      ldy	[DO_GEMS_A + 3]
    375 U0138 ????	       20 86 f2 	      jsr	KernelA_GenReset
      0 U013b ????				      NIBBLE_IF	eq
      0 U013b ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U013b ????				      NIBBLE_ELSE
    379 U013b ????						; Set opcode
    380 U013b ????	       a4 b2		      ldy	[DO_GEMS_A + 3]
    381 U013d ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    382 U0140 ????	       84 9f		      sty	RamKernelGemini3
    383 U0142 ????
    384 U0142 ????						; Set opcode target
    385 U0142 ????	       ac d4 f8 	      ldy	SHARD_LUT_RF1
    386 U0145 ????	       c0 03		      cpy	#3
    387 U0147 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    388 U0149 ????	       a0 11		      ldy	#RESP1
    389 U014b ????	       2c		      .byte.b	$2C	; .bit (ABS)
    390 U014c ????	       a0 1c		      ldy	#GRP1
    391 U014e ????	       84 a0		      sty	RamKernelGemini3Reg
    392 U0150 ????
      0 U0150 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0150 ????				      NIBBLE_END_IF
      0 U0150 ????				      NIBBLE_END_KERNEL
      1  f392					      seg	CodeBank3
    396  f392
      0  f392					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0150 ????				      seg.U	ignoreme
    398 U0150 ????						; VD1 default
    399 U0150 ????	       a6 b0		      ldx	[DO_GEMS_A + 1]
    400 U0152 ????	       86 a8		      stx	BuildKernelVdel1
    401 U0154 ????
    402 U0154 ????						; Gemini 4A
    403 U0154 ????	       ae d5 f8 	      ldx	SHARD_LUT_VD1
    404 U0157 ????	       e0 04		      cpx	#4
      0 U0159 ????				      NIBBLE_IF	ne
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    409 U0159 ????
    410 U0159 ????						; Set PHP
      0 U0159 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    412 U0159 ????
    413 U0159 ????						; Update VDEL1
    414 U0159 ????	       a6 b3		      ldx	[DO_GEMS_A + 4]
    415 U015b ????	       86 a8		      stx	BuildKernelVdel1
      0 U015d ????				      NIBBLE_ELSE
    417 U015d ????	       a4 b3		      ldy	[DO_GEMS_A + 4]
    418 U015f ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    419 U0162 ????	       84 a1		      sty	RamKernelGemini4
    420 U0164 ????
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U0164 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    424 U0164 ????
    425 U0164 ????						; Set PHP
      0 U0164 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U0164 ????				      NIBBLE_END_IF
    428 U0164 ????
    429 U0164 ????						; VD1
    430 U0164 ????						; ldy #SHARD_VD1
    431 U0164 ????						; sty [KernelA_VDEL1 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    433 U0164 ????						; GRP0
    434 U0164 ????						; ldy #SHARD_GRP0
    435 U0164 ????						; sty [KernelA_VDEL0 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    437 U0164 ????						; X
    438 U0164 ????						; ldy #SHARD_X
    439 U0164 ????						; sty RamKernelX
      0 U0164 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    441 U0164 ????						; Y
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    443 U0164 ????
    444 U0164 ????						; Gemini 5A
    445 U0164 ????						; TODO eventually...?
      0 U0164 ????				      NIBBLE_END_KERNEL
      1  f392					      seg	CodeBank3
    447  f392
    448  f392							; Nibble Kernel B
      0  f392					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U0164 ????				      seg.U	ignoreme
    450 U0164 ????						; Php target default
    451 U0164 ????	       a2 11		      ldx	#RESP1
    452 U0166 ????	       86 98		      stx	RamKernelPhpTarget
    453 U0168 ????
    454 U0168 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    455 U016a ????	       86 a4		      stx	BuildKernelX
    456 U016c ????	       86 a5		      stx	BuildKernelY
    457 U016e ????	       86 a6		      stx	BuildKernelRST
    458 U0170 ????
    459 U0170 ????						; Gemini 0B
    460 U0170 ????	       a4 b5		      ldy	[DO_GEMS_B + 0]
    461 U0172 ????	       84 a7		      sty	BuildKernelGrp0
    462 U0174 ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    463 U0174 ????
    464 U0174 ????						; Gemini 1B
    465 U0174 ????	       a4 b6		      ldy	[DO_GEMS_B + 1]
    466 U0176 ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    467 U0179 ????	       84 9b		      sty	RamKernelGemini1
      0 U017b ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    469 U017b ????
    470 U017b ????						; Calculate Gemini 2B
    471 U017b ????	       a4 b7		      ldy	[DO_GEMS_B + 2]
    472 U017d ????	       20 ae f2 	      jsr	KernelB_UpdateRegs
    473 U0180 ????	       84 9d		      sty	RamKernelGemini2
    474 U0182 ????						; Calculate Gemini 3B
    475 U0182 ????	       a4 b8		      ldy	[DO_GEMS_B + 3]
    476 U0184 ????	       20 ae f2 	      jsr	KernelB_UpdateRegs
    477 U0187 ????	       84 9f		      sty	RamKernelGemini3
    478 U0189 ????
    479 U0189 ????						; Gemini 2B
    480 U0189 ????			   .K_2B
    481 U0189 ????	       a4 b7		      ldy	[DO_GEMS_B + 2]
    482 U018b ????	       20 98 f2 	      jsr	KernelB_GenPhp
      0 U018e ????				      NIBBLE_IF	eq
    484 U018e ????						; Write to PHP in 2B
      0 U018e ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U018e ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U018e ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
      0 U018e ????				      NIBBLE_ELSE
      0 U018e ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
      0 U018e ????				      NIBBLE_END_IF
    493 U018e ????
    494 U018e ????						; Gemini 3B
    495 U018e ????	       a4 b8		      ldy	[DO_GEMS_B + 3]
    496 U0190 ????	       20 98 f2 	      jsr	KernelB_GenPhp
      0 U0193 ????				      NIBBLE_IF	eq
    498 U0193 ????						; Write to PHP in 3B
      0 U0193 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
      0 U0193 ????				      NIBBLE_ELSE
      0 U0193 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, #EMERALD_SP
      0 U0193 ????				      NIBBLE_END_IF
    507 U0193 ????
    508 U0193 ????						; Gemini 4B
    509 U0193 ????	       a4 b9		      ldy	[DO_GEMS_B + 4]
    510 U0195 ????	       20 ae f2 	      jsr	KernelA_UpdateRegs
    511 U0198 ????			   .K_4B
    512 U0198 ????	       84 a1		      sty	RamKernelGemini4
      0 U019a ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    514 U019a ????
    515 U019a ????						; TODO if no PHP, rewrite previous section:
    516 U019a ????						; NIBBLE_IF cs
    517 U019a ????						;     ; Write to PHP in reset command
    518 U019a ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    519 U019a ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    520 U019a ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    521 U019a ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    522 U019a ????						; NIBBLE_END_IF
    523 U019a ????
    524 U019a ????						; Make adjustments for sprites.
    525 U019a ????	       66 a7		      ror	BuildKernelGrp0
    526 U019c ????	       66 a4		      ror	BuildKernelX
    527 U019e ????	       66 a5		      ror	BuildKernelY
    528 U01a0 ????
    529 U01a0 ????						; ; VD1
    530 U01a0 ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    531 U01a0 ????						; GRP0
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    533 U01a0 ????						; X
      0 U01a0 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    535 U01a0 ????						; Y
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_STY - $100], BuildKernelY
    537 U01a0 ????
      0 U01a0 ????				      NIBBLE_END_KERNEL
      1  f392					      seg	CodeBank3
    539  f392
    540  f392							; TODO do this for all rows
    541  f392				   DBG_NIBBLE_BUILD subroutine
    542  f392		       ae 00 f1 	      ldx	$f100
    543  f395		       e0 0a		      cpx	#$a
    544  f397		       f0 03		      beq	[. + 5]
    545  f399		       4c 74 f4 	      jmp	.kernel_b
    546  f39c				   .kernel_a
      0  f39c					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f39c		       a9 00		      lda	#0
      2  f39e		       a2 aa		      ldx	#SENTINEL
      3  f3a0		       86 a4		      stx	BuildKernelX
      4  f3a2		       86 a5		      stx	BuildKernelY
      5  f3a4		       86 a6		      stx	BuildKernelRST
      6  f3a6
      7  f3a6				   .K_1A
      8  f3a6		       a4 af		      ldy	[DO_GEMS_A + 0]
      9  f3a8		       20 86 f2 	      jsr	KernelA_GenReset
     10  f3ab				   .if_1
     11  f3ab		       d0 1e		      bne	.else_1
     12  f3ad		       38		      sec
     13  f3ae		       2a		      rol
     14  f3af
     15  f3af
     16  f3af		       a0 a9		      ldy	#BC_LDA_IMM
     17  f3b1		       8c 16 f0 	      sty	[KernelA_B - $100]
     18  f3b4		       a0 a0		      ldy	#%10100000
     19  f3b6		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     20  f3b9
     21  f3b9		       a4 b0		      ldy	[DO_GEMS_A + 1]
     22  f3bb		       84 a7		      sty	BuildKernelGrp0
     23  f3bd
     24  f3bd		       a0 11		      ldy	#EMERALD_SP_RESET
     25  f3bf		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     26  f3c2
     27  f3c2		       a0 14		      ldy	#$14
     28  f3c4		       8c 1a f0 	      sty	[KernelA_D - $100]
     29  f3c7		       4c fd f3 	      jmp	.endif_1
     30  f3ca
     31  f3ca		       2a		      rol
     32  f3cb
     33  f3cb				   .else_1
     34  f3cb		       18		      clc
     35  f3cc		       2a		      rol
     36  f3cd
     37  f3cd		       a4 af		      ldy	[DO_GEMS_A + 0]
     38  f3cf		       84 a7		      sty	BuildKernelGrp0
     39  f3d1		       a4 b0		      ldy	[DO_GEMS_A + 1]
     40  f3d3		       20 86 f2 	      jsr	KernelA_GenReset
     41  f3d6				   .if_2
     42  f3d6		       d0 05		      bne	.else_2
     43  f3d8		       38		      sec
     44  f3d9		       2a		      rol
     45  f3da
     46  f3da		       4c fd f3 	      jmp	.endif_2
     47  f3dd
     48  f3dd
     49  f3dd				   .else_2
     50  f3dd		       18		      clc
     51  f3de		       2a		      rol
     52  f3df
     53  f3df		       ac d4 f8 	      ldy	SHARD_LUT_RF1
     54  f3e2		       c0 01		      cpy	#1
     55  f3e4		       d0 03		      .byte.b	$D0, #3
     56  f3e6		       a0 11		      ldy	#RESP1
     57  f3e8		       2c		      .byte.b	$2C
     58  f3e9		       a0 1c		      ldy	#GRP1
     59  f3eb		       84 9c		      sty	RamKernelGemini1Reg
     60  f3ed
     61  f3ed		       ae d4 f8 	      ldx	SHARD_LUT_RF1
     62  f3f0		       e0 01		      cpx	#1
     63  f3f2		       a0 86		      ldy	#BC_STX
     64  f3f4		       f0 05		      .byte.b	$F0, #5
     65  f3f6		       a4 b0		      ldy	[DO_GEMS_A + 1]
     66  f3f8		       20 ae f2 	      jsr	KernelA_UpdateRegs
     67  f3fb		       84 9b		      sty	RamKernelGemini1
     68  f3fd
     69  f3fd
     70  f3fd				   .endif_2
     71  f3fd
     72  f3fd
     73  f3fd				   .endif_1
     74  f3fd
     75  f3fd
     76  f3fd		       a4 b1		      ldy	[DO_GEMS_A + 2]
     77  f3ff		       20 86 f2 	      jsr	KernelA_GenReset
     78  f402				   .if_3
     79  f402		       d0 05		      bne	.else_3
     80  f404		       38		      sec
     81  f405		       2a		      rol
     82  f406		       4c 20 f4 	      jmp	.endif_3
     83  f409
     84  f409
     85  f409				   .else_3
     86  f409		       18		      clc
     87  f40a		       2a		      rol
     88  f40b
     89  f40b		       a4 b1		      ldy	[DO_GEMS_A + 2]
     90  f40d		       20 ae f2 	      jsr	KernelA_UpdateRegs
     91  f410		       84 9d		      sty	RamKernelGemini2
     92  f412
     93  f412		       ac d4 f8 	      ldy	SHARD_LUT_RF1
     94  f415		       c0 02		      cpy	#2
     95  f417		       d0 03		      .byte.b	$D0, #3
     96  f419		       a0 11		      ldy	#RESP1
     97  f41b		       2c		      .byte.b	$2C
     98  f41c		       a0 1c		      ldy	#GRP1
     99  f41e		       84 9e		      sty	RamKernelGemini2Reg
    100  f420
    101  f420
    102  f420				   .endif_3
    103  f420
    104  f420		       a4 b2		      ldy	[DO_GEMS_A + 3]
    105  f422		       20 86 f2 	      jsr	KernelA_GenReset
    106  f425				   .if_4
    107  f425		       d0 05		      bne	.else_4
    108  f427		       38		      sec
    109  f428		       2a		      rol
    110  f429		       4c 43 f4 	      jmp	.endif_4
    111  f42c
    112  f42c
    113  f42c				   .else_4
    114  f42c		       18		      clc
    115  f42d		       2a		      rol
    116  f42e
    117  f42e		       a4 b2		      ldy	[DO_GEMS_A + 3]
    118  f430		       20 ae f2 	      jsr	KernelA_UpdateRegs
    119  f433		       84 9f		      sty	RamKernelGemini3
    120  f435
    121  f435		       ac d4 f8 	      ldy	SHARD_LUT_RF1
    122  f438		       c0 03		      cpy	#3
    123  f43a		       d0 03		      .byte.b	$D0, #3
    124  f43c		       a0 11		      ldy	#RESP1
    125  f43e		       2c		      .byte.b	$2C
    126  f43f		       a0 1c		      ldy	#GRP1
    127  f441		       84 a0		      sty	RamKernelGemini3Reg
    128  f443
    129  f443
    130  f443				   .endif_4
    131  f443
    132  f443		       2a		      rol
    133  f444		       2a		      rol
    134  f445		       2a		      rol
    135  f446		       2a		      rol
    548  f447		       85 91		      sta	RamNibbleVar1
      0  f449					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f449		       a9 00		      lda	#0
      2  f44b
      3  f44b		       a6 b0		      ldx	[DO_GEMS_A + 1]
      4  f44d		       86 a8		      stx	BuildKernelVdel1
      5  f44f
      6  f44f		       ae d5 f8 	      ldx	SHARD_LUT_VD1
      7  f452		       e0 04		      cpx	#4
      8  f454				   .if_1
      9  f454		       f0 09		      beq	.else_1
     10  f456		       38		      sec
     11  f457		       2a		      rol
     12  f458
     13  f458
     14  f458		       a6 b3		      ldx	[DO_GEMS_A + 4]
     15  f45a		       86 a8		      stx	BuildKernelVdel1
     16  f45c		       4c 68 f4 	      jmp	.endif_1
     17  f45f
     18  f45f
     19  f45f				   .else_1
     20  f45f		       18		      clc
     21  f460		       2a		      rol
     22  f461		       a4 b3		      ldy	[DO_GEMS_A + 4]
     23  f463		       20 ae f2 	      jsr	KernelA_UpdateRegs
     24  f466		       84 a1		      sty	RamKernelGemini4
     25  f468
     26  f468
     27  f468
     28  f468				   .endif_1
     29  f468
     30  f468
     31  f468
     32  f468
     33  f468
     34  f468
     35  f468
     36  f468
     37  f468
     38  f468
     39  f468
     40  f468
     41  f468
     42  f468		       2a		      rol
     43  f469		       2a		      rol
     44  f46a		       2a		      rol
     45  f46b		       2a		      rol
     46  f46c		       2a		      rol
     47  f46d		       2a		      rol
     48  f46e		       2a		      rol
    550  f46f		       85 92		      sta	RamNibbleVar2
    551  f471		       4c cc f4 	      jmp	.next
    552  f474				   .kernel_b
      0  f474					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f474		       a9 00		      lda	#0
      2  f476
      3  f476		       a2 11		      ldx	#RESP1
      4  f478		       86 98		      stx	RamKernelPhpTarget
      5  f47a		       a2 aa		      ldx	#SENTINEL
      6  f47c		       86 a4		      stx	BuildKernelX
      7  f47e		       86 a5		      stx	BuildKernelY
      8  f480		       86 a6		      stx	BuildKernelRST
      9  f482
     10  f482		       a4 b5		      ldy	[DO_GEMS_B + 0]
     11  f484		       84 a7		      sty	BuildKernelGrp0
     12  f486
     13  f486
     14  f486		       a4 b6		      ldy	[DO_GEMS_B + 1]
     15  f488		       20 ae f2 	      jsr	KernelA_UpdateRegs
     16  f48b		       84 9b		      sty	RamKernelGemini1
     17  f48d
     18  f48d		       a4 b7		      ldy	[DO_GEMS_B + 2]
     19  f48f		       20 ae f2 	      jsr	KernelB_UpdateRegs
     20  f492		       84 9d		      sty	RamKernelGemini2
     21  f494
     22  f494		       a4 b8		      ldy	[DO_GEMS_B + 3]
     23  f496		       20 ae f2 	      jsr	KernelB_UpdateRegs
     24  f499		       84 9f		      sty	RamKernelGemini3
     25  f49b
     26  f49b				   .K_2B
     27  f49b		       a4 b7		      ldy	[DO_GEMS_B + 2]
     28  f49d		       20 98 f2 	      jsr	KernelB_GenPhp
     29  f4a0				   .if_1
     30  f4a0		       d0 05		      bne	.else_1
     31  f4a2		       38		      sec
     32  f4a3		       2a		      rol
     33  f4a4
     34  f4a4		       4c a9 f4 	      jmp	.endif_1
     35  f4a7
     36  f4a7
     37  f4a7				   .else_1
     38  f4a7		       18		      clc
     39  f4a8		       2a		      rol
     40  f4a9
     41  f4a9
     42  f4a9				   .endif_1
     43  f4a9
     44  f4a9		       a4 b8		      ldy	[DO_GEMS_B + 3]
     45  f4ab		       20 98 f2 	      jsr	KernelB_GenPhp
     46  f4ae				   .if_2
     47  f4ae		       d0 05		      bne	.else_2
     48  f4b0		       38		      sec
     49  f4b1		       2a		      rol
     50  f4b2
     51  f4b2		       4c b7 f4 	      jmp	.endif_2
     52  f4b5
     53  f4b5
     54  f4b5				   .else_2
     55  f4b5		       18		      clc
     56  f4b6		       2a		      rol
     57  f4b7
     58  f4b7
     59  f4b7				   .endif_2
     60  f4b7
     61  f4b7		       a4 b9		      ldy	[DO_GEMS_B + 4]
     62  f4b9		       20 ae f2 	      jsr	KernelA_UpdateRegs
     63  f4bc				   .K_4B
     64  f4bc		       84 a1		      sty	RamKernelGemini4
     65  f4be
     66  f4be
     67  f4be
     68  f4be
     69  f4be
     70  f4be
     71  f4be
     72  f4be
     73  f4be
     74  f4be		       66 a7		      ror	BuildKernelGrp0
     75  f4c0		       66 a4		      ror	BuildKernelX
     76  f4c2		       66 a5		      ror	BuildKernelY
     77  f4c4
     78  f4c4
     79  f4c4
     80  f4c4
     81  f4c4
     82  f4c4
     83  f4c4		       2a		      rol
     84  f4c5		       2a		      rol
     85  f4c6		       2a		      rol
     86  f4c7		       2a		      rol
     87  f4c8		       2a		      rol
     88  f4c9		       2a		      rol
    554  f4ca		       85 91		      sta	RamNibbleVar1
    555  f4cc				   .next
    556  f4cc
    557  f4cc							; TODO move this into the row kernel
    558  f4cc				   DBG_NIBBLE_RUN subroutine
    559  f4cc		       ae 00 f1 	      ldx	$f100
    560  f4cf		       e0 0a		      cpx	#$a
    561  f4d1		       f0 03		      beq	[. + 5]
    562  f4d3		       4c 84 f5 	      jmp	.kernel_b
    563  f4d6				   .kernel_a
    564  f4d6		       a5 91		      lda	RamNibbleVar1
      0  f4d8					      NIBBLE_gem_kernel_a_1
      1  f4d8				   .if_1
      2  f4d8		       0a		      asl
      3  f4d9		       90 03		      bcc	.else_1
      4  f4db		       4c f8 f4 	      jmp	.endif_1
      5  f4de				   .else_1
      6  f4de				   .if_2
      7  f4de		       0a		      asl
      8  f4df		       90 0d		      bcc	.else_2
      9  f4e1		       a2 86		      ldx	#BC_STX
     10  f4e3		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f4e6		       a2 11		      ldx	#RESP1
     12  f4e8		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f4eb		       4c f8 f4 	      jmp	.endif_2
     14  f4ee				   .else_2
     15  f4ee		       a6 9b		      ldx	RamKernelGemini1
     16  f4f0		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f4f3		       a6 9c		      ldx	RamKernelGemini1Reg
     18  f4f5		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f4f8				   .endif_2
     20  f4f8				   .endif_1
     21  f4f8				   .if_3
     22  f4f8		       0a		      asl
     23  f4f9		       90 0d		      bcc	.else_3
     24  f4fb		       a2 79		      ldx	#NOP_REG
     25  f4fd		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f500		       a2 11		      ldx	#RESP1
     27  f502		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f505		       4c 17 f5 	      jmp	.endif_3
     29  f508				   .else_3
     30  f508		       a2 11		      ldx	#RESP1
     31  f50a		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f50d		       a6 9d		      ldx	RamKernelGemini2
     33  f50f		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f512		       a6 9e		      ldx	RamKernelGemini2Reg
     35  f514		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f517				   .endif_3
     37  f517				   .if_4
     38  f517		       0a		      asl
     39  f518		       90 08		      bcc	.else_4
     40  f51a		       a2 11		      ldx	#RESP1
     41  f51c		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f51f		       4c 2c f5 	      jmp	.endif_4
     43  f522				   .else_4
     44  f522		       a6 9f		      ldx	RamKernelGemini3
     45  f524		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f527		       a6 a0		      ldx	RamKernelGemini3Reg
     47  f529		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f52c				   .endif_4
    566  f52c		       a5 92		      lda	RamNibbleVar2
      0  f52e					      NIBBLE_gem_kernel_a_2
      1  f52e				   .if_1
      2  f52e		       0a		      asl
      3  f52f		       90 20		      bcc	.else_1
      4  f531		       a2 85		      ldx	#BC_STA
      5  f533		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f536		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f538		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f53b		       a2 85		      ldx	#BC_STA
      9  f53d		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f540		       a2 0e		      ldx	#PF1
     11  f542		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f545		       a2 08		      ldx	#BC_PHP
     13  f547		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f54a		       a2 26		      ldx	#VDELP1
     15  f54c		       86 98		      stx	[RamKernelPhpTarget + 0]
     16  f54e		       4c 6e f5 	      jmp	.endif_1
     17  f551				   .else_1
     18  f551		       a2 08		      ldx	#BC_PHP
     19  f553		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f556		       a2 85		      ldx	#BC_STA
     21  f558		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f55b		       a2 0e		      ldx	#PF1
     23  f55d		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f560		       a6 a1		      ldx	RamKernelGemini4
     25  f562		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f565		       a2 1c		      ldx	#EMERALD_SP
     27  f567		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f56a		       a2 11		      ldx	#RESP1
     29  f56c		       86 98		      stx	[RamKernelPhpTarget + 0]
     30  f56e				   .endif_1
     31  f56e		       a6 a8		      ldx	BuildKernelVdel1
     32  f570		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f573		       a6 a7		      ldx	BuildKernelGrp0
     34  f575		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f578		       a6 a4		      ldx	BuildKernelX
     36  f57a		       86 99		      stx	[RamKernelX + 0]
     37  f57c		       a6 a5		      ldx	BuildKernelY
     38  f57e		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    568  f581		       4c 0c f6 	      jmp	.next
    569  f584				   .kernel_b
    570  f584		       a5 91		      lda	RamNibbleVar1
      0  f586					      NIBBLE_gem_kernel_b
      1  f586		       a6 9b		      ldx	RamKernelGemini1
      2  f588		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f58b				   .if_1
      4  f58b		       0a		      asl
      5  f58c		       90 2a		      bcc	.else_1
      6  f58e		       a2 1c		      ldx	#EMERALD_SP
      7  f590		       86 98		      stx	[RamKernelPhpTarget + 0]
      8  f592		       a2 84		      ldx	#BC_STY
      9  f594		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f597		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f599		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f59c		       a2 08		      ldx	#BC_PHP
     13  f59e		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f5a1		       a2 85		      ldx	#BC_STA
     15  f5a3		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f5a6		       a2 0e		      ldx	#PF1
     17  f5a8		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f5ab		       a6 9f		      ldx	RamKernelGemini3
     19  f5ad		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f5b0		       a2 1c		      ldx	#EMERALD_SP
     21  f5b2		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f5b5		       4c c2 f5 	      jmp	.endif_1
     23  f5b8				   .else_1
     24  f5b8		       a6 9d		      ldx	RamKernelGemini2
     25  f5ba		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f5bd		       a2 1c		      ldx	#EMERALD_SP
     27  f5bf		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f5c2				   .endif_1
     29  f5c2				   .if_2
     30  f5c2		       0a		      asl
     31  f5c3		       90 2a		      bcc	.else_2
     32  f5c5		       a2 1c		      ldx	#EMERALD_SP
     33  f5c7		       86 98		      stx	[RamKernelPhpTarget + 0]
     34  f5c9		       a2 84		      ldx	#BC_STY
     35  f5cb		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f5ce		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f5d0		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f5d3		       a6 9d		      ldx	RamKernelGemini2
     39  f5d5		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f5d8		       a2 1c		      ldx	#EMERALD_SP
     41  f5da		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f5dd		       a2 85		      ldx	#BC_STA
     43  f5df		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f5e2		       a2 0e		      ldx	#PF1
     45  f5e4		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f5e7		       a2 08		      ldx	#BC_PHP
     47  f5e9		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f5ec		       4c f9 f5 	      jmp	.endif_2
     49  f5ef				   .else_2
     50  f5ef		       a6 9f		      ldx	RamKernelGemini3
     51  f5f1		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     52  f5f4		       a2 1c		      ldx	#EMERALD_SP
     53  f5f6		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     54  f5f9				   .endif_2
     55  f5f9		       a6 a1		      ldx	RamKernelGemini4
     56  f5fb		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     57  f5fe		       a6 a7		      ldx	BuildKernelGrp0
     58  f600		       8e 08 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     59  f603		       a6 a4		      ldx	BuildKernelX
     60  f605		       86 99		      stx	[RamKernelX + 0]
     61  f607		       a6 a5		      ldx	BuildKernelY
     62  f609		       8e 11 f0 	      stx	[[KernelB_STY - $100] + 0]
    572  f60c				   .next
    573  f60c
    574  f60c				   VerticalBlankEnd
    575  f60c							; Wait until the end of Vertical blank.
      0  f60c					      TIMER_WAIT
      1  f60c				   .waittimer
      2  f60c		       ad 84 02 	      lda	INTIM
      3  f60f		       d0 fb		      bne	.waittimer
      4  f611		       85 02		      sta	WSYNC
      0  f613					      ASSERT_RUNTIME	"_scan == #37"
      1  f613				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f613  && !(  _scan == #37  ) }
      2  f613					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    578  f613
    579  f613							; Save stack pointer
    580  f613		       ba		      tsx
    581  f614		       86 95		      stx	RamStackBkp
    582  f616
    583  f616							; Start rendering the kernel.
    584  f616		       4c 58 f9 	      jmp	KernelBorder
    585  f619
    586  f700		       00 00 00 00*	      align	256	; TODO why
    587  f700
    588  f700				   FrameEnd   subroutine
    589  f700		       85 02		      sta	WSYNC
    590  f702
    591  f702							; Blank all background colors.
    592  f702		       a9 00		      lda	#0
    593  f704		       85 08		      sta	COLUPF
    594  f706		       85 0f		      sta	PF2
    595  f708		       85 0e		      sta	PF1
    596  f70a		       85 1c		      sta	EMERALD_SP
    597  f70c
    598  f70c							; Guide lines (2x)
    599  f70c		       a9 02		      lda	#SIGNAL_LINE
    600  f70e		       85 09		      sta	COLUBK
    601  f710					      REPEAT	6
    602  f710		       85 02		      sta	WSYNC
    601  f710					      REPEND
    602  f712		       85 02		      sta	WSYNC
    601  f712					      REPEND
    602  f714		       85 02		      sta	WSYNC
    601  f714					      REPEND
    602  f716		       85 02		      sta	WSYNC
    601  f716					      REPEND
    602  f718		       85 02		      sta	WSYNC
    601  f718					      REPEND
    602  f71a		       85 02		      sta	WSYNC
    603  f71c					      REPEND
    604  f71c		       a9 00		      lda	#$00
    605  f71e		       85 09		      sta	COLUBK
    606  f720
    607  f720							; Restore stack pointer
    608  f720		       a6 95		      ldx	RamStackBkp
    609  f722		       9a		      txs
    610  f723
    611  f723							; Display the rest of the blank screen.
      0  f723					      TIMER_SETUP	25
      1  f723				   .lines     SET	25
      2  f723		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f725		       85 02		      sta	WSYNC
      4  f727		       8d 96 02 	      sta	TIM64T
    613  f72a		       85 02		      sta	WSYNC
      0  f72c					      TIMER_WAIT
      1  f72c				   .waittimer
      2  f72c		       ad 84 02 	      lda	INTIM
      3  f72f		       d0 fb		      bne	.waittimer
      4  f731		       85 02		      sta	WSYNC
      0  f733					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f733				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f733  && !(  _scan == (#37 + #192)  ) }
      2  f733					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    616  f733
    617  f733							; Overscan
    618  f733				   Overscan   subroutine
    619  f733		       85 01		      sta	VBLANK
      0  f735					      TIMER_SETUP	29
      1  f735				   .lines     SET	29
      2  f735		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f737		       85 02		      sta	WSYNC
      4  f739		       8d 96 02 	      sta	TIM64T
    621  f73c
    622  f73c		       20 d6 f8 	      jsr	MoveJoystick
    623  f73f		       20 0d f9 	      jsr	SpeedCalculation
    624  f742
    625  f742							; Calculate GemAnimation.
    626  f742							; TODO DIVIDE BY A THING
    627  f742		       a5 84		      lda	FrameCount
    628  f744		       29 07		      and	#%111
    629  f746		       d0 0b		      bne	.skiprotate
    630  f748		       a5 ac		      lda	level_for_game + 3
    631  f74a		       2a		      rol
      0  f74b					      _ROL32	level_for_game, level_for_game
      1  f74b		       00 a9	   VLA	      EQU	level_for_game
      2  f74b		       00 a9	   RES	      EQU	level_for_game
      3  f74b				  -	      IF	VLA != RES
      4  f74b				  -	      LDA	VLA+0
      5  f74b				  -	      ROL	A
      6  f74b				  -	      STA	RES+0
      7  f74b				  -	      LDA	VLA+1
      8  f74b				  -	      ROL	A
      9  f74b				  -	      STA	RES+1
     10  f74b				  -	      LDA	VLA+2
     11  f74b				  -	      ROL	A
     12  f74b				  -	      STA	RES+2
     13  f74b				  -	      LDA	VLA+3
     14  f74b				  -	      ROL	A
     15  f74b				  -	      STA	RES+3
     16  f74b					      ELSE
     17  f74b		       26 a9		      ROL	VLA+0
     18  f74d		       26 aa		      ROL	VLA+1
     19  f74f		       26 ab		      ROL	VLA+2
     20  f751		       26 ac		      ROL	VLA+3
     21  f753					      ENDIF
    633  f753				   .skiprotate
    634  f753
      0  f753					      TIMER_WAIT
      1  f753				   .waittimer
      2  f753		       ad 84 02 	      lda	INTIM
      3  f756		       d0 fb		      bne	.waittimer
      4  f758		       85 02		      sta	WSYNC
      0  f75a					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f75a				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f75a  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f75a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    637  f75a
    638  f75a		       4c d3 f2 	      jmp	VerticalSync
    639  f75d
    640  f75d
    641  f75d
    642  f800		       00 00 00 00*	      align	256
    643  f800
    644  f800					      mac	gemini_populate
    645  f800				   .TARGET    SET	{1}
    646  f800					      lda	RamNibbleTemp
    647  f800					      and	#%00000011
    648  f800					      tay
    649  f800					      lda	GEMINI_LOOKUP,y
    650  f800					      sta	.TARGET
    651  f800					      endm
    652  f800
    653  f800					      mac	gemini_populate_missile
    654  f800				   .TARGET    SET	{1}
    655  f800					      txa
    656  f800					      and	#%00000001
    657  f800					      sta	.TARGET
    658  f800					      endm
    659  f800
    660  f800				   gemini_populate
    661  f800		       a6 ac		      ldx	level_for_game + 3
    662  f802		       86 90		      stx	RamNibbleTemp
      0  f804					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  f804				   .TARGET    SET	DO_GEMS_B + 5
      2  f804		       a5 90		      lda	RamNibbleTemp
      3  f806		       29 03		      and	#%00000011
      4  f808		       a8		      tay
      5  f809		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f80c		       85 ba		      sta	.TARGET
    664  f80e		       66 90		      ror	RamNibbleTemp
    665  f810		       66 90		      ror	RamNibbleTemp
      0  f812					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  f812				   .TARGET    SET	DO_GEMS_A + 5
      2  f812		       a5 90		      lda	RamNibbleTemp
      3  f814		       29 03		      and	#%00000011
      4  f816		       a8		      tay
      5  f817		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f81a		       85 b4		      sta	.TARGET
    667  f81c		       66 90		      ror	RamNibbleTemp
    668  f81e		       66 90		      ror	RamNibbleTemp
      0  f820					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  f820				   .TARGET    SET	DO_GEMS_B + 4
      2  f820		       a5 90		      lda	RamNibbleTemp
      3  f822		       29 03		      and	#%00000011
      4  f824		       a8		      tay
      5  f825		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f828		       85 b9		      sta	.TARGET
    670  f82a		       66 90		      ror	RamNibbleTemp
    671  f82c		       66 90		      ror	RamNibbleTemp
      0  f82e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  f82e				   .TARGET    SET	DO_GEMS_A + 4
      2  f82e		       a5 90		      lda	RamNibbleTemp
      3  f830		       29 03		      and	#%00000011
      4  f832		       a8		      tay
      5  f833		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f836		       85 b3		      sta	.TARGET
    673  f838		       66 90		      ror	RamNibbleTemp
    674  f83a		       66 90		      ror	RamNibbleTemp
    675  f83c
    676  f83c		       a6 ab		      ldx	level_for_game + 2
    677  f83e		       86 90		      stx	RamNibbleTemp
      0  f840					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  f840				   .TARGET    SET	DO_MISS_B
      2  f840		       8a		      txa
      3  f841		       29 01		      and	#%00000001
      4  f843		       85 ae		      sta	.TARGET
    679  f845		       66 90		      ror	RamNibbleTemp
      0  f847					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  f847				   .TARGET    SET	DO_GEMS_B + 3
      2  f847		       a5 90		      lda	RamNibbleTemp
      3  f849		       29 03		      and	#%00000011
      4  f84b		       a8		      tay
      5  f84c		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f84f		       85 b8		      sta	.TARGET
    681  f851		       66 90		      ror	RamNibbleTemp
    682  f853		       66 90		      ror	RamNibbleTemp
      0  f855					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  f855				   .TARGET    SET	DO_GEMS_A + 3
      2  f855		       a5 90		      lda	RamNibbleTemp
      3  f857		       29 03		      and	#%00000011
      4  f859		       a8		      tay
      5  f85a		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f85d		       85 b2		      sta	.TARGET
    684  f85f		       66 90		      ror	RamNibbleTemp
    685  f861		       66 90		      ror	RamNibbleTemp
      0  f863					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  f863				   .TARGET    SET	DO_GEMS_B + 2
      2  f863		       a5 90		      lda	RamNibbleTemp
      3  f865		       29 03		      and	#%00000011
      4  f867		       a8		      tay
      5  f868		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f86b		       85 b7		      sta	.TARGET
    687  f86d		       66 90		      ror	RamNibbleTemp
    688  f86f		       66 90		      ror	RamNibbleTemp
    689  f871
    690  f871		       a6 aa		      ldx	level_for_game + 1
    691  f873		       86 90		      stx	RamNibbleTemp
      0  f875					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  f875				   .TARGET    SET	DO_GEMS_A + 2
      2  f875		       a5 90		      lda	RamNibbleTemp
      3  f877		       29 03		      and	#%00000011
      4  f879		       a8		      tay
      5  f87a		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f87d		       85 b1		      sta	.TARGET
    693  f87f		       66 90		      ror	RamNibbleTemp
    694  f881		       66 90		      ror	RamNibbleTemp
      0  f883					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  f883				   .TARGET    SET	DO_MISS_A
      2  f883		       8a		      txa
      3  f884		       29 01		      and	#%00000001
      4  f886		       85 ad		      sta	.TARGET
    696  f888		       66 90		      ror	RamNibbleTemp
      0  f88a					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  f88a				   .TARGET    SET	DO_GEMS_B + 1
      2  f88a		       a5 90		      lda	RamNibbleTemp
      3  f88c		       29 03		      and	#%00000011
      4  f88e		       a8		      tay
      5  f88f		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f892		       85 b6		      sta	.TARGET
    698  f894		       66 90		      ror	RamNibbleTemp
    699  f896		       66 90		      ror	RamNibbleTemp
      0  f898					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  f898				   .TARGET    SET	DO_GEMS_A + 1
      2  f898		       a5 90		      lda	RamNibbleTemp
      3  f89a		       29 03		      and	#%00000011
      4  f89c		       a8		      tay
      5  f89d		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8a0		       85 b0		      sta	.TARGET
    701  f8a2		       66 90		      ror	RamNibbleTemp
    702  f8a4		       66 90		      ror	RamNibbleTemp
    703  f8a6
    704  f8a6		       a6 a9		      ldx	level_for_game + 0
    705  f8a8		       86 90		      stx	RamNibbleTemp
      0  f8aa					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  f8aa				   .TARGET    SET	DO_GEMS_B + 0
      2  f8aa		       a5 90		      lda	RamNibbleTemp
      3  f8ac		       29 03		      and	#%00000011
      4  f8ae		       a8		      tay
      5  f8af		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8b2		       85 b5		      sta	.TARGET
    707  f8b4		       66 90		      ror	RamNibbleTemp
    708  f8b6		       66 90		      ror	RamNibbleTemp
      0  f8b8					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  f8b8				   .TARGET    SET	DO_GEMS_A + 0
      2  f8b8		       a5 90		      lda	RamNibbleTemp
      3  f8ba		       29 03		      and	#%00000011
      4  f8bc		       a8		      tay
      5  f8bd		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8c0		       85 af		      sta	.TARGET
    710  f8c2		       66 90		      ror	RamNibbleTemp
    711  f8c4		       66 90		      ror	RamNibbleTemp
    712  f8c6
    713  f8c6		       60		      rts
    714  f8c7				   gemini_populate_end
    715  f8c7
    716  f8d0		       00 00 00 00*	      align	16
    717  f8d0
    718  f8d0				   GEMINI_LOOKUP
    719  f8d0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    720  f8d4
    721  f8d4				   SHARD_LUT_RF1
    722  f8d4		       00		      .byte.b	#0
    723  f8d5				   SHARD_LUT_VD1
    724  f8d5		       00		      .byte.b	#0
    725  f8d6
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f8d6					      include	"game_input.s"
      1  f8d6							; Handles input checking. Called from overscan.
      2  f8d6
      3  f8d6							; Read joystick movement and apply to object 0
      4  f8d6				   MoveJoystick
      5  f8d6							; Move vertically
      6  f8d6							; (up and down are actually reversed since ypos starts at bottom)
      7  f8d6							;     ldx YPos
      8  f8d6		       a9 10		      lda	#%00010000	;Up?
      9  f8d8		       2c 80 02 	      bit	SWCHA
     10  f8db		       d0 0d		      bne	SkipMoveUp
     11  f8dd
     12  f8dd		       18		      clc
     13  f8de		       a5 89		      lda	Speed2
     14  f8e0		       69 0c		      adc	#12
     15  f8e2		       85 89		      sta	Speed2
     16  f8e4		       a5 88		      lda	Speed1
     17  f8e6		       69 00		      adc	#00
     18  f8e8		       85 88		      sta	Speed1
     19  f8ea
     20  f8ea				   SkipMoveUp
     21  f8ea		       a6 87		      ldx	XPos
     22  f8ec
     23  f8ec							; Only check left/right on odd frames;
     24  f8ec							; TODO make this just a fractional speed
     25  f8ec							; rather than dropping frames
     26  f8ec		       a9 01		      lda	#01
     27  f8ee		       25 84		      and	FrameCount
     28  f8f0		       d0 18		      bne	SkipMoveRight
     29  f8f2
     30  f8f2
     31  f8f2							; Move horizontally
     32  f8f2		       a9 40		      lda	#%01000000	;Left?
     33  f8f4		       2c 80 02 	      bit	SWCHA
     34  f8f7		       d0 05		      bne	SkipMoveLeft
     35  f8f9		       e0 1d		      cpx	#29
     36  f8fb		       90 01		      bcc	SkipMoveLeft
     37  f8fd		       ca		      dex
     38  f8fe
     39  f8fe							; Reflect
     40  f8fe							;     lda #$ff
     41  f8fe							;     sta REFP0
     42  f8fe				   SkipMoveLeft
     43  f8fe		       a9 80		      lda	#%10000000	;Right?
     44  f900		       2c 80 02 	      bit	SWCHA
     45  f903		       d0 05		      bne	SkipMoveRight
     46  f905		       e0 80		      cpx	#128
     47  f907		       b0 01		      bcs	SkipMoveRight
     48  f909		       e8		      inx
     49  f90a
     50  f90a							; Reflect
     51  f90a							;     lda #$0
     52  f90a							;     sta REFP0
     53  f90a				   SkipMoveRight
     54  f90a		       86 87		      stx	XPos
     55  f90c		       60		      rts
     56  f90d
     57  f90d
     58  f90d				   SpeedCalculation
     59  f90d		       38		      sec
     60  f90e		       a5 89		      lda	Speed2
     61  f910		       e9 07		      sbc	#7
     62  f912		       85 89		      sta	Speed2
     63  f914		       a5 88		      lda	Speed1
     64  f916		       e9 00		      sbc	#0
     65  f918		       85 88		      sta	Speed1
     66  f91a
     67  f91a		       18		      clc
     68  f91b		       a5 8b		      lda	YPos2
     69  f91d		       65 89		      adc	Speed2
     70  f91f		       85 8b		      sta	YPos2
     71  f921		       a5 8a		      lda	YPos
     72  f923		       65 88		      adc	Speed1
     73  f925		       85 8a		      sta	YPos
     74  f927
     75  f927		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f929		       b0 0a		      bcs	NewThing2
     77  f92b
     78  f92b							; Reset to floor
     79  f92b		       a9 3e		      lda	#FLOOR_OFFSET
     80  f92d		       85 8a		      sta	YPos
     81  f92f		       a9 00		      lda	#0
     82  f931		       85 88		      sta	Speed1
     83  f933		       85 89		      sta	Speed2
     84  f935				   NewThing2
     85  f935
     86  f935		       c9 be		      cmp	#CEILING_OFFSET
     87  f937		       90 0a		      bcc	.next
     88  f939
     89  f939							; Reset to ceiling
     90  f939		       a9 be		      lda	#CEILING_OFFSET
     91  f93b		       85 8a		      sta	YPos
     92  f93d		       a9 00		      lda	#0
     93  f93f		       85 88		      sta	Speed1
     94  f941		       85 89		      sta	Speed2
     95  f943				   .next
     96  f943		       60		      rts
     97  f944
     98  f944
     99  f944
    100  f944							; Subroutine
    101  f944				   SetHorizPos
    102  f944		       85 02		      sta	WSYNC	; start a new line
    103  f946		       24 00		      bit	0	; waste 3 cycles
    104  f948		       38		      sec		; set carry flag
    105  f949				   DivideLoop
    106  f949		       e9 0f		      sbc	#15	; subtract 15
    107  f94b		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f94d		       49 07		      eor	#7	; calculate fine offset
    109  f94f		       0a		      asl
    110  f950		       0a		      asl
    111  f951		       0a		      asl
    112  f952		       0a		      asl
    113  f953		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f955		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f957		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f958					      include	"kernel_border.s"
      1  f958							; Visible Kernel
      2  f958
      3  f958				   KernelBorder subroutine
      4  f958		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f95a
      6  f95a							; First HMOVE
      7  f95a		       85 2a		      sta	HMOVE
      8  f95c
      9  f95c							; Border top
     10  f95c		       a9 00		      lda	#0
     11  f95e		       85 08		      sta	COLUPF
     12  f960		       85 0e		      sta	PF1
     13  f962		       85 0f		      sta	PF2
     14  f964		       a9 02		      lda	#SIGNAL_LINE
     15  f966		       85 09		      sta	COLUBK
     16  f968
     17  f968					      REPEAT	6
     18  f968		       85 02		      sta	WSYNC
     17  f968					      REPEND
     18  f96a		       85 02		      sta	WSYNC
     17  f96a					      REPEND
     18  f96c		       85 02		      sta	WSYNC
     17  f96c					      REPEND
     18  f96e		       85 02		      sta	WSYNC
     17  f96e					      REPEND
     18  f970		       85 02		      sta	WSYNC
     17  f970					      REPEND
     18  f972		       85 02		      sta	WSYNC
     19  f974					      REPEND
     20  f974
     21  f974		       a9 00		      lda	#0
     22  f976		       85 09		      sta	COLUBK
     23  f978		       85 02		      sta	WSYNC
     24  f97a
     25  f97a							; Start top border
     26  f97a				   border_top
     27  f97a							; Make the playfield solid.
     28  f97a		       a9 3f		      lda	#%00111111
     29  f97c		       85 0e		      sta	PF1
     30  f97e		       a9 ff		      lda	#%11111111
     31  f980		       85 0f		      sta	PF2
     32  f982
     33  f982		       a9 42		      lda	#COL_BG
     34  f984		       a0 00		      ldy	#0
     35  f986
     36  f986							; X_XXXX_XX
     37  f986							; Commented lines removed to save on space.
     38  f986		       85 08		      sta	COLUPF
     39  f988		       85 02		      sta	WSYNC
     40  f98a		       84 08		      sty	COLUPF
     41  f98c		       85 02		      sta	WSYNC
     42  f98e		       85 08		      sta	COLUPF
     43  f990		       85 02		      sta	WSYNC
     44  f992							; sta COLUPF
     45  f992		       85 02		      sta	WSYNC
     46  f994							; sta COLUPF
     47  f994		       85 02		      sta	WSYNC
     48  f996		       84 08		      sty	COLUPF
     49  f998		       85 02		      sta	WSYNC
     50  f99a		       85 08		      sta	COLUPF
     51  f99c
     52  f99c		       85 02		      sta	WSYNC
     53  f99e							; sta COLUPF
     54  f99e
     55  f99e				   PlayArea
     56  f99e							; PF is now the playing area
      0  f99e					      ASSERT_RUNTIME	"_scycles == #0"
      1  f99e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f99e  && !(  _scycles == #0  ) }
      2  f99e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f99e					      sleep	61
      1  f99e				   .CYCLES    SET	61
      2  f99e
      3  f99e				  -	      IF	.CYCLES < 2
      4  f99e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f99e				  -	      ERR
      6  f99e					      ENDIF
      7  f99e
      8  f99e					      IF	.CYCLES & 1
      9  f99e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f99e		       04 00		      nop	0
     11  f9a0				  -	      ELSE
     12  f9a0				  -	      bit	VSYNC
     13  f9a0					      ENDIF
     14  f9a0				   .CYCLES    SET	.CYCLES - 3
     15  f9a0					      ENDIF
     16  f9a0
     17  f9a0					      REPEAT	.CYCLES / 2
     18  f9a0		       ea		      nop
     17  f9a0					      REPEND
     18  f9a1		       ea		      nop
     17  f9a1					      REPEND
     18  f9a2		       ea		      nop
     17  f9a2					      REPEND
     18  f9a3		       ea		      nop
     17  f9a3					      REPEND
     18  f9a4		       ea		      nop
     17  f9a4					      REPEND
     18  f9a5		       ea		      nop
     17  f9a5					      REPEND
     18  f9a6		       ea		      nop
     17  f9a6					      REPEND
     18  f9a7		       ea		      nop
     17  f9a7					      REPEND
     18  f9a8		       ea		      nop
     17  f9a8					      REPEND
     18  f9a9		       ea		      nop
     17  f9a9					      REPEND
     18  f9aa		       ea		      nop
     17  f9aa					      REPEND
     18  f9ab		       ea		      nop
     17  f9ab					      REPEND
     18  f9ac		       ea		      nop
     17  f9ac					      REPEND
     18  f9ad		       ea		      nop
     17  f9ad					      REPEND
     18  f9ae		       ea		      nop
     17  f9ae					      REPEND
     18  f9af		       ea		      nop
     17  f9af					      REPEND
     18  f9b0		       ea		      nop
     17  f9b0					      REPEND
     18  f9b1		       ea		      nop
     17  f9b1					      REPEND
     18  f9b2		       ea		      nop
     17  f9b2					      REPEND
     18  f9b3		       ea		      nop
     17  f9b3					      REPEND
     18  f9b4		       ea		      nop
     17  f9b4					      REPEND
     18  f9b5		       ea		      nop
     17  f9b5					      REPEND
     18  f9b6		       ea		      nop
     17  f9b6					      REPEND
     18  f9b7		       ea		      nop
     17  f9b7					      REPEND
     18  f9b8		       ea		      nop
     17  f9b8					      REPEND
     18  f9b9		       ea		      nop
     17  f9b9					      REPEND
     18  f9ba		       ea		      nop
     17  f9ba					      REPEND
     18  f9bb		       ea		      nop
     17  f9bb					      REPEND
     18  f9bc		       ea		      nop
     19  f9bd					      REPEND
     59  f9bd		       a9 00		      lda	#%00000000
     60  f9bf		       85 0d		      sta	PF0
     61  f9c1		       a9 20		      lda	#%00100000
     62  f9c3		       85 0e		      sta	PF1
     63  f9c5		       a9 00		      lda	#%00000000
     64  f9c7		       85 0f		      sta	PF2
      0  f9c9					      ASSERT_RUNTIME	"_scycles == #0"
      1  f9c9				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f9c9  && !(  _scycles == #0  ) }
      2  f9c9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f9c9					      sleep	7
      1  f9c9				   .CYCLES    SET	7
      2  f9c9
      3  f9c9				  -	      IF	.CYCLES < 2
      4  f9c9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f9c9				  -	      ERR
      6  f9c9					      ENDIF
      7  f9c9
      8  f9c9					      IF	.CYCLES & 1
      9  f9c9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f9c9		       04 00		      nop	0
     11  f9cb				  -	      ELSE
     12  f9cb				  -	      bit	VSYNC
     13  f9cb					      ENDIF
     14  f9cb				   .CYCLES    SET	.CYCLES - 3
     15  f9cb					      ENDIF
     16  f9cb
     17  f9cb					      REPEAT	.CYCLES / 2
     18  f9cb		       ea		      nop
     17  f9cb					      REPEND
     18  f9cc		       ea		      nop
     19  f9cd					      REPEND
     67  f9cd		       4c ff f9 	      jmp	row_start
     68  f9d0							; enter row on cycle 10.
     69  f9d0
     70  f9d0							; reset the background for bottom of playfield
     71  f9d0				   border_bottom
     72  f9d0							;sta WSYNC
     73  f9d0
     74  f9d0							; Form the bottom of the level frame.
     75  f9d0		       a9 3f		      lda	#%00111111
     76  f9d2		       85 0e		      sta	PF1
     77  f9d4		       a9 ff		      lda	#%11111111
     78  f9d6		       85 0f		      sta	PF2
     79  f9d8
     80  f9d8							; Clear all sprites.
     81  f9d8		       a9 00		      lda	#0
     82  f9da		       85 1c		      sta	EMERALD_SP
     83  f9dc		       85 1b		      sta	JET_SP
     84  f9de		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f9e0
     86  f9e0		       a9 42		      lda	#COL_BG
     87  f9e2		       a0 00		      ldy	#0
     88  f9e4		       85 02		      sta	WSYNC
     89  f9e6
     90  f9e6		       84 08		      sty	COLUPF
     91  f9e8		       85 02		      sta	WSYNC
     92  f9ea
     93  f9ea		       85 08		      sta	COLUPF
     94  f9ec		       85 02		      sta	WSYNC
     95  f9ee
     96  f9ee		       85 02		      sta	WSYNC
     97  f9f0
     98  f9f0		       85 02		      sta	WSYNC
     99  f9f2
    100  f9f2		       84 08		      sty	COLUPF
    101  f9f4		       85 02		      sta	WSYNC
    102  f9f6
    103  f9f6		       85 08		      sta	COLUPF
    104  f9f8		       85 02		      sta	WSYNC
    105  f9fa		       85 02		      sta	WSYNC
    106  f9fc		       4c 00 f7 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f9ff					      include	"kernel_row.s"
      1  f9ff							; Frame Start
      2  f9ff
      3  f9ff							; Macros for calculating sprite values (GRPx).
      4  f9ff
      5  f9ff							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f9ff					      mac	kernel_load_player
      7  f9ff							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f9ff					      dcp	SpriteEnd	; 5c
      9  f9ff					      ldy	#0	; 2c
     10  f9ff							; constant 6c:
     11  f9ff					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f9ff					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f9ff					      ldy	SpriteEnd
     14  f9ff							; 4c
     15  f9ff					      ldx	Frame0,Y
     16  f9ff					      endm
     17  f9ff
     18  f9ff							; mac jet_spritedata_calc
     19  f9ff							;
     20  f9ff							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f9ff							; GRP0.
     22  f9ff					      mac	jet_spritedata_calc
     23  f9ff							; loader
     24  f9ff					      lda	#SPRITE_HEIGHT
     25  f9ff					      dcp	SpriteEnd
     26  f9ff					      ldy	SpriteEnd
     27  f9ff
     28  f9ff							; 4c
     29  f9ff							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f9ff							; from Frame0 + Y must never cross a page boundary.
     31  f9ff					      lda	Frame0,Y
     32  f9ff							; 6c
     33  f9ff					      .byte	$b0, $01	;2c / 3c (taken)
     34  f9ff					      .byte	$2c	; 4c / 0c
     35  f9ff					      sta	JET_SP	; 0c / 3c
     36  f9ff					      endm
     37  f9ff
     38  f9ff				   row_start
     39  f9ff
     40  f9ff							; [scanline 1]
     41  f9ff				   row_1
     42  f9ff							; Enter after scanline starts on row "9" and wraps
      0  f9ff					      ASSERT_RUNTIME	"_scycles == #10"
      1  f9ff				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f9ff  && !(  _scycles == #10  ) }
      2  f9ff					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f9ff
      0  f9ff					      jet_spritedata_calc
      1  f9ff
      2  f9ff		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa01		       c7 86		      dcp	SpriteEnd
      4  fa03		       a4 86		      ldy	SpriteEnd
      5  fa05
      6  fa05
      7  fa05
      8  fa05
      9  fa05		       b9 00 fc 	      lda	Frame0,Y
     10  fa08
     11  fa08		       b0 01		      .byte.b	$b0, $01
     12  fa0a		       2c		      .byte.b	$2c
     13  fa0b		       85 1b		      sta	JET_SP
     46  fa0d
     47  fa0d							; [[[Nibble VM.]]]
     48  fa0d		       85 02		      sta	WSYNC
     49  fa0f
     50  fa0f							; sleep 46
     51  fa0f
      0  fa0f					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa0f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa0f  && !(  _scycles == #0  ) }
      2  fa0f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  fa0f
     54  fa0f							; [scanline 2]
     55  fa0f				   row_2
      0  fa0f					      jet_spritedata_calc
      1  fa0f
      2  fa0f		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa11		       c7 86		      dcp	SpriteEnd
      4  fa13		       a4 86		      ldy	SpriteEnd
      5  fa15
      6  fa15
      7  fa15
      8  fa15
      9  fa15		       b9 00 fc 	      lda	Frame0,Y
     10  fa18
     11  fa18		       b0 01		      .byte.b	$b0, $01
     12  fa1a		       2c		      .byte.b	$2c
     13  fa1b		       85 1b		      sta	JET_SP
     57  fa1d
     58  fa1d							; Black out playfield
     59  fa1d							; TODO This should be done with playfield pixels, not color.
     60  fa1d		       a9 00		      lda	#0
     61  fa1f		       85 08		      sta	COLUPF
     62  fa21
     63  fa21							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  fa21		       a6 98		      ldx	RamKernelPhpTarget
     65  fa23		       9a		      txs
     66  fa24
     67  fa24							; [[[Nibble VM.]]]
      0  fa24					      sleep	30
      1  fa24				   .CYCLES    SET	30
      2  fa24
      3  fa24				  -	      IF	.CYCLES < 2
      4  fa24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa24				  -	      ERR
      6  fa24					      ENDIF
      7  fa24
      8  fa24				  -	      IF	.CYCLES & 1
      9  fa24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa24				  -	      nop	0
     11  fa24				  -	      ELSE
     12  fa24				  -	      bit	VSYNC
     13  fa24				  -	      ENDIF
     14  fa24				  -.CYCLES    SET	.CYCLES - 3
     15  fa24					      ENDIF
     16  fa24
     17  fa24					      REPEAT	.CYCLES / 2
     18  fa24		       ea		      nop
     17  fa24					      REPEND
     18  fa25		       ea		      nop
     17  fa25					      REPEND
     18  fa26		       ea		      nop
     17  fa26					      REPEND
     18  fa27		       ea		      nop
     17  fa27					      REPEND
     18  fa28		       ea		      nop
     17  fa28					      REPEND
     18  fa29		       ea		      nop
     17  fa29					      REPEND
     18  fa2a		       ea		      nop
     17  fa2a					      REPEND
     18  fa2b		       ea		      nop
     17  fa2b					      REPEND
     18  fa2c		       ea		      nop
     17  fa2c					      REPEND
     18  fa2d		       ea		      nop
     17  fa2d					      REPEND
     18  fa2e		       ea		      nop
     17  fa2e					      REPEND
     18  fa2f		       ea		      nop
     17  fa2f					      REPEND
     18  fa30		       ea		      nop
     17  fa30					      REPEND
     18  fa31		       ea		      nop
     17  fa31					      REPEND
     18  fa32		       ea		      nop
     19  fa33					      REPEND
     69  fa33
     70  fa33							; Load PF1 value
     71  fa33		       a9 a0		      lda	#%10100000
     72  fa35		       85 96		      sta	RamPF1Value
     73  fa37
     74  fa37		       a9 04		      lda	#4
     75  fa39		       8d 96 02 	      sta	TIM64T
     76  fa3c
     77  fa3c							; Enable playfield at end of scanline
     78  fa3c		       a9 42		      lda	#COL_BG
     79  fa3e		       85 08		      sta	COLUPF
     80  fa40
     81  fa40							; lda #%00001000
     82  fa40							; sta REFP1
     83  fa40
      0  fa40					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa40				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa40  && !(  _scycles == #0  ) }
      2  fa40					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  fa40
     86  fa40							; [scanline 3]
     87  fa40				   row_3
      0  fa40					      jet_spritedata_calc
      1  fa40
      2  fa40		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa42		       c7 86		      dcp	SpriteEnd
      4  fa44		       a4 86		      ldy	SpriteEnd
      5  fa46
      6  fa46
      7  fa46
      8  fa46
      9  fa46		       b9 00 fc 	      lda	Frame0,Y
     10  fa49
     11  fa49		       b0 01		      .byte.b	$b0, $01
     12  fa4b		       2c		      .byte.b	$2c
     13  fa4c		       85 1b		      sta	JET_SP
     89  fa4e
     90  fa4e							; Pre-populate graphics.
     91  fa4e		       a9 09		      lda	#SPRITE_HEIGHT
      0  fa50					      KERNEL_LOAD_PLAYER
      1  fa50
      2  fa50		       c7 86		      dcp	SpriteEnd
      3  fa52		       a0 00		      ldy	#0
      4  fa54
      5  fa54		       b0 01		      .byte.b	$b0, $01
      6  fa56		       2c		      .byte.b	$2c
      7  fa57		       a4 86		      ldy	SpriteEnd
      8  fa59
      9  fa59		       be 00 fc 	      ldx	Frame0,Y
     93  fa5c		       86 97		      stx	RamKernelGRP0
      0  fa5e					      KERNEL_LOAD_PLAYER
      1  fa5e
      2  fa5e		       c7 86		      dcp	SpriteEnd
      3  fa60		       a0 00		      ldy	#0
      4  fa62
      5  fa62		       b0 01		      .byte.b	$b0, $01
      6  fa64		       2c		      .byte.b	$2c
      7  fa65		       a4 86		      ldy	SpriteEnd
      8  fa67
      9  fa67		       be 00 fc 	      ldx	Frame0,Y
     95  fa6a		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  fa6d		       a5 97		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  fa6f					      sleep	2
      1  fa6f				   .CYCLES    SET	2
      2  fa6f
      3  fa6f				  -	      IF	.CYCLES < 2
      4  fa6f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa6f				  -	      ERR
      6  fa6f					      ENDIF
      7  fa6f
      8  fa6f				  -	      IF	.CYCLES & 1
      9  fa6f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa6f				  -	      nop	0
     11  fa6f				  -	      ELSE
     12  fa6f				  -	      bit	VSYNC
     13  fa6f				  -	      ENDIF
     14  fa6f				  -.CYCLES    SET	.CYCLES - 3
     15  fa6f					      ENDIF
     16  fa6f
     17  fa6f					      REPEAT	.CYCLES / 2
     18  fa6f		       ea		      nop
     19  fa70					      REPEND
     98  fa70
     99  fa70							; [scanlines 4-5]
    100  fa70							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  fa70		       a6 99		      ldx	RamKernelX
    102  fa72		       38		      sec
      0  fa73					      ASSERT_RUNTIME	"_scycles == #73"
      1  fa73				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fa73  && !(  _scycles == #73  ) }
      2  fa73					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  fa73		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  fa76
    106  fa76							; [scanline 6]
    107  fa76
    108  fa76							; Try to avoid page crossing in jet_spritedata_calc
    109  fa76							; TODO enforce this with ASSERT_RUNTIME instead?
    110  fa80		       00 00 00 00*	      align	16
    111  fa80
    112  fa80				   row_after_kernel
    113  fa80				   row_6
      0  fa80					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa80				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa80  && !(  _scycles == #0  ) }
      2  fa80					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  fa80
    116  fa80							; Cleanup from the kernel.
    117  fa80		       a9 00		      lda	#0
    118  fa82		       85 1e		      sta	EMERALD_MI_ENABLE
    119  fa84		       85 1c		      sta	EMERALD_SP
    120  fa86		       85 08		      sta	COLUPF
    121  fa88		       85 26		      sta	VDELP1
    122  fa8a
      0  fa8a					      jet_spritedata_calc
      1  fa8a
      2  fa8a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa8c		       c7 86		      dcp	SpriteEnd
      4  fa8e		       a4 86		      ldy	SpriteEnd
      5  fa90
      6  fa90
      7  fa90
      8  fa90
      9  fa90		       b9 00 fc 	      lda	Frame0,Y
     10  fa93
     11  fa93		       b0 01		      .byte.b	$b0, $01
     12  fa95		       2c		      .byte.b	$2c
     13  fa96		       85 1b		      sta	JET_SP
    124  fa98
    125  fa98							; Idle.
    126  fa98		       85 02		      sta	WSYNC
    127  fa9a
    128  fa9a							; [scanline 7]
    129  fa9a				   row_7
      0  fa9a					      jet_spritedata_calc
      1  fa9a
      2  fa9a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa9c		       c7 86		      dcp	SpriteEnd
      4  fa9e		       a4 86		      ldy	SpriteEnd
      5  faa0
      6  faa0
      7  faa0
      8  faa0
      9  faa0		       b9 00 fc 	      lda	Frame0,Y
     10  faa3
     11  faa3		       b0 01		      .byte.b	$b0, $01
     12  faa5		       2c		      .byte.b	$2c
     13  faa6		       85 1b		      sta	JET_SP
    131  faa8
    132  faa8		       a9 42		      lda	#COL_BG
    133  faaa		       85 08		      sta	COLUPF
    134  faac
    135  faac							; FRAMESWITCH
    136  faac		       a9 01		      lda	#01
    137  faae		       25 84		      and	FrameCount
    138  fab0		       d0 13		      bne	loadframe2
    139  fab2
    140  fab2							; Perform gem loading for Kernel A.
    141  fab2
    142  fab2				   loadframe1
      0  fab2					      ASSERT_RUNTIME	"_scycles == #32"
      1  fab2				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $fab2  && !(  _scycles == #32  ) }
      2  fab2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  fab2
    145  fab2							; Emerald byte setting 1A
    146  fab2							; ldx #0
    147  fab2							; lda KERNEL_STORAGE_R,X
    148  fab2							; sta GEM_00_W
    149  fab2							; inx
    150  fab2							; lda KERNEL_STORAGE_R,X
    151  fab2							; sta GEM_04_W
    152  fab2							; inx
    153  fab2							; lda KERNEL_STORAGE_R,X
    154  fab2							; sta GEM_09_W
    155  fab2							; inx
    156  fab2
    157  fab2		       85 02		      sta	WSYNC
    158  fab4
    159  fab4							; [scanline 8]
      0  fab4					      jet_spritedata_calc
      1  fab4
      2  fab4		       a9 09		      lda	#SPRITE_HEIGHT
      3  fab6		       c7 86		      dcp	SpriteEnd
      4  fab8		       a4 86		      ldy	SpriteEnd
      5  faba
      6  faba
      7  faba
      8  faba
      9  faba		       b9 00 fc 	      lda	Frame0,Y
     10  fabd
     11  fabd		       b0 01		      .byte.b	$b0, $01
     12  fabf		       2c		      .byte.b	$2c
     13  fac0		       85 1b		      sta	JET_SP
    161  fac2
    162  fac2							; Emerald byte setting 1B
    163  fac2							; lda KERNEL_STORAGE_R,X
    164  fac2							; sta GEM_13_W
    165  fac2							; inx
    166  fac2							; lda KERNEL_STORAGE_R,X
    167  fac2							; sta GEM_17_W
    168  fac2							; inx
    169  fac2							; lda KERNEL_STORAGE_R,X
    170  fac2							; sta GEM_18_W
    171  fac2							; inx
    172  fac2							; lda KERNEL_STORAGE_R,X
    173  fac2							; sta GEM_22_W
    174  fac2
    175  fac2		       4c d8 fa 	      jmp	row_8_end
    176  fac5
    177  fac5							; Perform gem loading for Kernel B.
    178  fac5
    179  fac5				   loadframe2
      0  fac5					      ASSERT_RUNTIME	"_scycles == #33"
      1  fac5				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $fac5  && !(  _scycles == #33  ) }
      2  fac5					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fac5
    182  fac5							; Emerald byte setting 2A
    183  fac5							; ldx #[storage_02 - storage]
    184  fac5							; lda KERNEL_STORAGE_R,X
    185  fac5							; sta GEM_02_W
    186  fac5							; inx
    187  fac5							; lda KERNEL_STORAGE_R,X
    188  fac5							; sta GEM_06_W
    189  fac5							; inx
    190  fac5							; lda KERNEL_STORAGE_R,X
    191  fac5							; sta GEM_08_W
    192  fac5							; inx
    193  fac5
    194  fac5		       85 02		      sta	WSYNC
    195  fac7
    196  fac7							; [scanline 8]
    197  fac7				   row_8
      0  fac7					      jet_spritedata_calc
      1  fac7
      2  fac7		       a9 09		      lda	#SPRITE_HEIGHT
      3  fac9		       c7 86		      dcp	SpriteEnd
      4  facb		       a4 86		      ldy	SpriteEnd
      5  facd
      6  facd
      7  facd
      8  facd
      9  facd		       b9 00 fc 	      lda	Frame0,Y
     10  fad0
     11  fad0		       b0 01		      .byte.b	$b0, $01
     12  fad2		       2c		      .byte.b	$2c
     13  fad3		       85 1b		      sta	JET_SP
    199  fad5
    200  fad5							; Emerald byte setting 2B
    201  fad5							; lda KERNEL_STORAGE_R,X
    202  fad5							; sta GEM_11_W
    203  fad5							; inx
    204  fad5							; lda KERNEL_STORAGE_R,X
    205  fad5							; sta GEM_15_W
    206  fad5							; inx
    207  fad5							; lda KERNEL_STORAGE_R,X
    208  fad5							; sta GEM_20_W
    209  fad5							; inx
    210  fad5							; lda KERNEL_STORAGE_R,X
    211  fad5							; sta GEM_24_W
    212  fad5
    213  fad5		       4c d8 fa 	      jmp	row_8_end
    214  fad8
    215  fad8							; Common row 8 return.
    216  fad8
    217  fad8				   row_8_end
    218  fad8							; Idle.
    219  fad8		       85 02		      sta	WSYNC
    220  fada
    221  fada							; [scanline 8]
    222  fada							; Repeat loop until LoopCount < 0
    223  fada		       c6 83		      dec	LoopCount
    224  fadc		       30 03		      bmi	row_end
    225  fade		       4c ff f9 	      jmp	row_start
    226  fae1				   row_end
    227  fae1		       4c d0 f9 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fae4					      include	"kernel_gem.s"
      1  fae4							;
      2  fae4							; Gem Kernels
      3  fae4							;
      4  fae4							; Gems are displayed in alternating kernels. This chart shows
      5  fae4							; which kernel is responsible for which gem, with missiles denoted.
      6  fae4							;
      7  fae4							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fae4							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fae4							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fae4							;  #	 0^	 8^	  17^	    26^       gem index
     11  fae4							;
     12  fae4							; The middle bar indicates where the pattern reverses.
     13  fae4							;
     14  fae4							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fae4							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fae4							; requires with a single sprite. By alternating sprites each frame with an...
     17  fae4							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fae4							; line, except for two. These are instead rendered by the missile, which
     19  fae4							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fae4
     21  fae4							; for copying
     22  fb00		       00 00 00 00*	      align	256
     23  fb00
     24  fb00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fb00							;
     26  fb00							; GEM KERNEL A
     27  fb00							;
     28  fb00
     29  fb00				   kernel_1_start subroutine
     30  fb00					      rorg	$f100
     31  fb00
     32  fb00							; Kernel Marker
     33  fb00		       0a		      .byte.b	$A
     34  fb01
     35  fb01				   KernelA_early
     36  fb01							; Early code to set next GRP0 image. Immediate value is overwritten
     37  fb01		       a9 ff		      lda	#$ff
     38  fb03
     39  fb03				   KernelA    subroutine
      0  fb03					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fb03				   .KERNEL    SET	$A
      2  fb03				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fb03					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  fb03
     42  fb03							; Write Gemini 0A into delayed sprite register
     43  fb03		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  fb03		       f1 04	   KernelA_VDEL1 =	. - 1
     45  fb05		       84 1c		      sty	EMERALD_SP
     46  fb07							; Write Player from accumulator. When writing to the other sprite, the
     47  fb07							; TIA will copy Gemini 0A into visible sprite register
     48  fb07		       85 1b		      sta	JET_SP
     49  fb09							; Write Gemini 1A into visible sprite register
     50  fb09		       a0 66		      ldy	#%01100110
     51  fb09		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  fb0b		       84 1c		      sty	EMERALD_SP
     53  fb0d		       a0 06		      ldy	#%00000110
     54  fb0d		       f1 0e	   KernelA_STY =	. - 1
     55  fb0f
     56  fb0f							; Need D0 for VDELP1 trigger with PHP
      0  fb0f					      sleep	2
      1  fb0f				   .CYCLES    SET	2
      2  fb0f
      3  fb0f				  -	      IF	.CYCLES < 2
      4  fb0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb0f				  -	      ERR
      6  fb0f					      ENDIF
      7  fb0f
      8  fb0f				  -	      IF	.CYCLES & 1
      9  fb0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb0f				  -	      nop	0
     11  fb0f				  -	      ELSE
     12  fb0f				  -	      bit	VSYNC
     13  fb0f				  -	      ENDIF
     14  fb0f				  -.CYCLES    SET	.CYCLES - 3
     15  fb0f					      ENDIF
     16  fb0f
     17  fb0f					      REPEAT	.CYCLES / 2
     18  fb0f		       ea		      nop
     19  fb10					      REPEND
     58  fb10
     59  fb10							; Register config
     60  fb10		       a9 08		      lda	#%00001000
     61  fb12		       85 0c		      sta	REFP1
     62  fb14
     63  fb14							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fb14					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fb14				   .KERNEL    SET	$A
      2  fb14				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fb14					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     65  fb14				   KernelA_A
     66  fb14		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     67  fb16
     68  fb16							; vvv RST0
     69  fb16				   KernelA_B
     70  fb16		       a5 96		      lda	RamPF1Value
     71  fb18				   KernelA_C
     72  fb18		       84 26		      sty	VDELP1	; disable delayed sprite
     73  fb1a				   KernelA_D
     74  fb1a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  fb1a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  fb1a				   .CYCLES    SET	3
      2  fb1a
      3  fb1a				  -	      IF	.CYCLES < 2
      4  fb1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb1a				  -	      ERR
      6  fb1a					      ENDIF
      7  fb1a
      8  fb1a					      IF	.CYCLES & 1
      9  fb1a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb1a		       04 00		      nop	0
     11  fb1c				  -	      ELSE
     12  fb1c				  -	      bit	VSYNC
     13  fb1c					      ENDIF
     14  fb1c				   .CYCLES    SET	.CYCLES - 3
     15  fb1c					      ENDIF
     16  fb1c
     17  fb1c				  -	      REPEAT	.CYCLES / 2
     18  fb1c				  -	      nop
     19  fb1c					      REPEND
     76  fb1c				   KernelA_E
     77  fb1c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     78  fb1e				   KernelA_F
     79  fb1e		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     80  fb20							; sleep 3 ; FIXME This should be a "sleep 3" and the missile enabled should be moved
     81  fb20				   KernelA_G
     82  fb20		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     83  fb22
     84  fb22				   KernelA_H
     85  fb22		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     86  fb24
      0  fb24					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fb24				   .KERNEL    SET	$A
      2  fb24				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fb24					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     88  fb24							; RST4 vvv
     89  fb24				   KernelA_I
     90  fb24		       08		      php		; Reset "medium close" NUSIZ repetition
     91  fb25				   KernelA_J		; unchanging
     92  fb25		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     93  fb27				   KernelA_K
     94  fb27		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     95  fb29							; RST4 ^^^
     96  fb29
     97  fb29				   KernelA_L
     98  fb29		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME this should be in prelude
     99  fb2b				   KernelA_M
    100  fb2b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    101  fb2d
    102  fb2d				   KernelA_N
    103  fb2d				   KernelA_O
      0  fb2d					      sleep	2
      1  fb2d				   .CYCLES    SET	2
      2  fb2d
      3  fb2d				  -	      IF	.CYCLES < 2
      4  fb2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb2d				  -	      ERR
      6  fb2d					      ENDIF
      7  fb2d
      8  fb2d				  -	      IF	.CYCLES & 1
      9  fb2d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb2d				  -	      nop	0
     11  fb2d				  -	      ELSE
     12  fb2d				  -	      bit	VSYNC
     13  fb2d				  -	      ENDIF
     14  fb2d				  -.CYCLES    SET	.CYCLES - 3
     15  fb2d					      ENDIF
     16  fb2d
     17  fb2d					      REPEAT	.CYCLES / 2
     18  fb2d		       ea		      nop
     19  fb2e					      REPEND
    105  fb2e							; reset stack pointer
    106  fb2e		       68		      pla
    107  fb2f
    108  fb2f							; End visible line
      0  fb2f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fb2f				   .KERNEL    SET	$A
      2  fb2f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fb2f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    110  fb2f
    111  fb2f				   KernelA_branch
    112  fb2f		       ad 84 02 	      lda	INTIM
    113  fb32		       d0 cd		      bne	KernelA_early
    114  fb34
    115  fb34		       4c 80 fa 	      jmp	row_after_kernel
    116  fb37
    117  fb37					      rend
    118  fb37				   kernel_1_end
      0  fb37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fb37				   .STARTA    SET	kernel_1_start
      2  fb37				   .ENDA      SET	kernel_1_end
      3  fb37				   .LEN       SET	$40
      4  fb37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fb37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fb37				  -	      err
      7  fb37					      endif
    120  fb37
    121  fb37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  fb37							;
    123  fb37							; GEM KERNEL B
    124  fb37							;
    125  fb37
    126  fb37				   kernel_2_start subroutine
    127  fb37					      rorg	$f100
    128  fb37
    129  fb37							; Kernel Marker
    130  fb37		       0b		      .byte.b	$B
    131  fb38
    132  fb38				   KernelB_early
    133  fb38							; Early code to set next GRP0 image. Value is overwritten
    134  fb38		       a9 ff		      lda	#$ff
    135  fb3a
    136  fb3a				   KernelB    subroutine
      0  fb3a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fb3a				   .KERNEL    SET	$B
      2  fb3a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fb3a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    138  fb3a
    139  fb3a							; Write Gemini 0A into delayed sprite register
    140  fb3a		       84 1c		      sty	EMERALD_SP
    141  fb3c							; Write Player from accumulator. When writing to the other sprite, the
    142  fb3c							; TIA will copy Gemini 0A into visible sprite register
    143  fb3c		       85 1b		      sta	JET_SP
    144  fb3e		       a0 aa		      ldy	#%10101010
    145  fb3e		       f1 08	   KernelB_VDEL0 =	. - 1
    146  fb40							; Write Gemini 1A into delayed sprite register
    147  fb40		       84 1c		      sty	EMERALD_SP
      0  fb42					      sleep	2
      1  fb42				   .CYCLES    SET	2
      2  fb42
      3  fb42				  -	      IF	.CYCLES < 2
      4  fb42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb42				  -	      ERR
      6  fb42					      ENDIF
      7  fb42
      8  fb42				  -	      IF	.CYCLES & 1
      9  fb42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb42				  -	      nop	0
     11  fb42				  -	      ELSE
     12  fb42				  -	      bit	VSYNC
     13  fb42				  -	      ENDIF
     14  fb42				  -.CYCLES    SET	.CYCLES - 3
     15  fb42					      ENDIF
     16  fb42
     17  fb42					      REPEAT	.CYCLES / 2
     18  fb42		       ea		      nop
     19  fb43					      REPEND
    149  fb43
    150  fb43							; Register config
    151  fb43		       a9 ff		      lda	#$ff
    152  fb45		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    153  fb47
    154  fb47		       a0 ff		      ldy	#$ff
    155  fb47		       f1 11	   KernelB_STY =	. - 1
    156  fb49
    157  fb49							; Load PF1 value into accumulator
    158  fb49		       a5 96		      lda	RamPF1Value
    159  fb4b
    160  fb4b							; Clear bits in processor status register for drawing.
    161  fb4b							; clc
    162  fb4b							; bit RamLowerSixByte
    163  fb4b		       38		      sec
    164  fb4c
    165  fb4c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fb4c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fb4c				   .KERNEL    SET	$B
      2  fb4c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fb4c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    167  fb4c				   KernelB_A
    168  fb4c		       85 11		      sta	EMERALD_SP_RESET
    169  fb4e				   KernelB_B
    170  fb4e		       24 93		      bit	RamZeroByte
    171  fb50				   KernelB_C
      0  fb50					      sleep	3
      1  fb50				   .CYCLES    SET	3
      2  fb50
      3  fb50				  -	      IF	.CYCLES < 2
      4  fb50				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb50				  -	      ERR
      6  fb50					      ENDIF
      7  fb50
      8  fb50					      IF	.CYCLES & 1
      9  fb50					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb50		       04 00		      nop	0
     11  fb52				  -	      ELSE
     12  fb52				  -	      bit	VSYNC
     13  fb52					      ENDIF
     14  fb52				   .CYCLES    SET	.CYCLES - 3
     15  fb52					      ENDIF
     16  fb52
     17  fb52				  -	      REPEAT	.CYCLES / 2
     18  fb52				  -	      nop
     19  fb52					      REPEND
    173  fb52				   KernelB_D
    174  fb52		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    175  fb54
    176  fb54							; below has one php load (could just be RESET)
    177  fb54				   KernelB_E
    178  fb54		       08		      php
    179  fb55				   KernelB_F
    180  fb55		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    181  fb57				   KernelB_G
    182  fb57		       85 0e		      sta	PF1
    183  fb59				   KernelB_H
    184  fb59		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    185  fb5b							; above has one PHP load
    186  fb5b
    187  fb5b				   KernelB_I
    188  fb5b		       85 11		      sta	EMERALD_SP_RESET
    189  fb5d				   KernelB_J
    190  fb5d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    191  fb5f				   KernelB_K
    192  fb5f		       86 1e		      stx	EMERALD_MI_ENABLE
    193  fb61				   KernelB_L
    194  fb61		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    195  fb63
    196  fb63				   KernelB_M
    197  fb63				   KernelB_N
      0  fb63					      sleep	2
      1  fb63				   .CYCLES    SET	2
      2  fb63
      3  fb63				  -	      IF	.CYCLES < 2
      4  fb63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb63				  -	      ERR
      6  fb63					      ENDIF
      7  fb63
      8  fb63				  -	      IF	.CYCLES & 1
      9  fb63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb63				  -	      nop	0
     11  fb63				  -	      ELSE
     12  fb63				  -	      bit	VSYNC
     13  fb63				  -	      ENDIF
     14  fb63				  -.CYCLES    SET	.CYCLES - 3
     15  fb63					      ENDIF
     16  fb63
     17  fb63					      REPEAT	.CYCLES / 2
     18  fb63		       ea		      nop
     19  fb64					      REPEND
    199  fb64
    200  fb64							; reset stack pointer
    201  fb64		       68		      pla
    202  fb65
    203  fb65							; End visible line
      0  fb65					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fb65				   .KERNEL    SET	$B
      2  fb65				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fb65					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    205  fb65
    206  fb65				   KernelB_branch
    207  fb65		       ad 84 02 	      lda	INTIM
    208  fb68		       d0 ce		      bne	KernelB_early
    209  fb6a		       4c 80 fa 	      jmp	row_after_kernel
    210  fb6d
    211  fb6d					      rend
    212  fb6d				   kernel_2_end
      0  fb6d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fb6d				   .STARTA    SET	kernel_2_start
      2  fb6d				   .ENDA      SET	kernel_2_end
      3  fb6d				   .LEN       SET	$40
      4  fb6d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fb6d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fb6d				  -	      err
      7  fb6d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fb6d					      include	"data_sprites.s"
      1  fc00		       00 00 00 00*	      align	256
      2  fc00
      3  fc00							; Player
      4  fc00				   Frame0
      5  fc00		       00		      .byte.b	#%00000000
      6  fc01		       60		      .byte.b	#%01100000
      7  fc02		       60		      .byte.b	#%01100000
      8  fc03		       60		      .byte.b	#%01100000
      9  fc04		       c0		      .byte.b	#%11000000
     10  fc05		       c0		      .byte.b	#%11000000
     11  fc06		       f0		      .byte.b	#%11110000
     12  fc07		       c0		      .byte.b	#%11000000
     13  fc08		       c0		      .byte.b	#%11000000
     14  fc09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fc0a					      include	"data_levels.s"
      1  fc10		       00 00 00 00*	      align	8
      2  fc10							; first bit of byte 2 & 3 are unused for simplicity
      3  fc10
      4  fc10				   level_00
      5  fc10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fc14
      7  fc14				   level_01
      8  fc14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fc18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fc1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fc20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fc24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fc28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fc2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fc30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fc34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fc38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fc3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fc40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fc44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fc48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fc4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fc50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fc54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fc58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fc5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fc60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fc64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fc68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fc6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fc70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fc74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fc78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fc7c				   level_01_end
     35  fc7c
     36  fc7c
     37  fc7c				   shard_map
     38  fc7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fc7d				   shard_map_end
------- FILE main.s
    158  fc7d
    159  fffc					      org	$fffc
    160  fffc		       09 f2		      .word.w	Start
    161  fffe		       09 f2		      .word.w	Start
