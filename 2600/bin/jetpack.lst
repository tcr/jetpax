------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008f ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e		       00	   ROW_DEMO_INDEX byte.b
     49 U008f
     50 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51 U008f
     52 U008f		       00 10	   ROW_COUNT  equ	16
     53 U008f
     54 U008f		       00 02	   SIGNAL_LINE equ	$02
     55 U008f
     56 U008f		       11 00	   KERNEL_START equ	$1100
     57 U008f
     58 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     59 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     60 U008f
     61 U008f							; Sprites
     62 U008f
     63 U008f							; Nusiz
     64 U008f		       00 13	   THREE_COPIES equ	%00010011
     65 U008f
     66 U008f							; Frame 1 sprites
     67 U008f		       00 60	   EMR1       equ	%01100000
     68 U008f		       00 06	   EMR2       equ	%00000110
     69 U008f		       00 66	   EMR3       equ	%01100110
     70 U008f
     71 U008f							; Frame 2 sprites
     72 U008f		       00 c0	   T1	      equ	%11000000
     73 U008f		       00 0c	   T2	      equ	%00001100
     74 U008f		       00 cc	   T3	      equ	%11001100
     75 U008f
     76 U008f							; Shorthands
     77 U008f
     78 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     79 U008f		       00 85	   SET_1_0    equ	$85	; STA
     80 U008f		       00 86	   SET_0_1    equ	$86	; STX
     81 U008f		       00 84	   SET_1_1    equ	$84	; STY
     82 U008f
     83 U008f		       00 86	   SET_0_L    equ	$86	; STX
     84 U008f		       00 85	   SET_1_L    equ	$85	; STA
     85 U008f
     86 U008f		       00 85	   SET_0_R    equ	$85	; STA
     87 U008f		       00 84	   SET_1_R    equ	$84	; STY
     88 U008f
     89 U008f							; Gem enabling/disabling globally
     90 U008f
     91 U008f							; ; all off
     92 U008f							; GEM_00 equ SET_0_0
     93 U008f							; GEM_02 equ SET_0_0
     94 U008f							; GEM_04 equ SET_0_0
     95 U008f							; GEM_06 equ SET_0_0
     96 U008f							; GEM_08 equ SET_0_L
     97 U008f							; GEM_09 equ SET_0_0
     98 U008f							; GEM_11 equ SET_0_0
     99 U008f							; GEM_13 equ SET_0_0
    100 U008f							; GEM_15 equ SET_0_0
    101 U008f							; GEM_17 equ SET_0_R
    102 U008f							; GEM_18 equ SET_0_0
    103 U008f							; GEM_20 equ SET_0_0
    104 U008f							; GEM_22 equ SET_0_0
    105 U008f							; GEM_24 equ SET_0_0
    106 U008f
    107 U008f							; all on
    108 U008f		       00 84	   GEM_00     equ	SET_1_1
    109 U008f		       00 84	   GEM_02     equ	SET_1_1
    110 U008f		       00 84	   GEM_04     equ	SET_1_1
    111 U008f		       00 84	   GEM_06     equ	SET_1_1
    112 U008f		       00 85	   GEM_08     equ	SET_1_L
    113 U008f		       00 84	   GEM_09     equ	SET_1_1
    114 U008f		       00 84	   GEM_11     equ	SET_1_1
    115 U008f		       00 84	   GEM_13     equ	SET_1_1
    116 U008f		       00 84	   GEM_15     equ	SET_1_1
    117 U008f		       00 84	   GEM_17     equ	SET_1_R
    118 U008f		       00 84	   GEM_18     equ	SET_1_1
    119 U008f		       00 84	   GEM_20     equ	SET_1_1
    120 U008f		       00 84	   GEM_22     equ	SET_1_1
    121 U008f		       00 84	   GEM_24     equ	SET_1_1
    122 U008f
    123 U008f							; ; odd on
    124 U008f							; GEM_00 equ SET_1_0
    125 U008f							; GEM_02 equ SET_1_0
    126 U008f							; GEM_04 equ SET_1_0
    127 U008f							; GEM_06 equ SET_1_0
    128 U008f							; GEM_08 equ SET_1_L
    129 U008f							; GEM_09 equ SET_0_1
    130 U008f							; GEM_11 equ SET_0_1
    131 U008f							; GEM_13 equ SET_0_1
    132 U008f							; GEM_15 equ SET_0_1
    133 U008f							; GEM_17 equ SET_0_R
    134 U008f							; GEM_18 equ SET_1_0
    135 U008f							; GEM_20 equ SET_1_0
    136 U008f							; GEM_22 equ SET_1_0
    137 U008f							; GEM_24 equ SET_1_0
    138 U008f
    139 U008f							; ; even on
    140 U008f							; GEM_00 equ SET_0_1
    141 U008f							; GEM_02 equ SET_0_1
    142 U008f							; GEM_04 equ SET_0_1
    143 U008f							; GEM_06 equ SET_0_1
    144 U008f							; GEM_08 equ SET_0_L
    145 U008f							; GEM_09 equ SET_1_0
    146 U008f							; GEM_11 equ SET_1_0
    147 U008f							; GEM_13 equ SET_1_0
    148 U008f							; GEM_15 equ SET_1_0
    149 U008f							; GEM_17 equ SET_1_R
    150 U008f							; GEM_18 equ SET_0_1
    151 U008f							; GEM_20 equ SET_0_1
    152 U008f							; GEM_22 equ SET_0_1
    153 U008f							; GEM_24 equ SET_0_1
    154 U008f
    155 U008f							; Colors
    156 U008f
    157 U008f		       00 42	   COL_BG     equ	$42
    158 U008f		       00 cc	   COL_EMERALD equ	$CC
    159 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    160 U008f
    161 U008f							; HMOVE values
    162 U008f
    163 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    164 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    165 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    166 U008f
    167 U008f							; Sprite details
    168 U008f
    169 U008f		       00 09	   SPRITE_HEIGHT equ	9
    170 U008f
    171 U008f
    172 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    173 U008f		       00 1c	   EMERALD_SP equ	GRP1
    174 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    175 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    176 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    177 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    178 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    179 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    180 U008f
    181 U008f		       00 1b	   JET_SP     equ	GRP0
    182 U008f		       00 10	   JET_SP_RESET equ	RESP0
    183 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    184 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    185 U008f
    186 U008f
    187 U008f							; Offset from the sprite label to the point
    188 U008f							; at which the sprite actually starts. This is the 0-padding
    189 U008f							; FRAME_OFFSET equ 53
    190 U008f
    191 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    192 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    193 U008f
    194 U008f							; Compared with YPos
    195 U008f		       00 43	   FLOOR_OFFSET equ	67
    196 U008f		       00 bf	   CEILING_OFFSET equ	191
    197 U008f
    198 U008f							; YPos definite position
    199 U008f		       00 64	   YPosStart  equ	100
    200 U008f
    201 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    202 U008f
    203  10000 ????				       seg	Code
    204  10000 ????
    205  d000					      org	$D000
    206  d000					      rorg	$F000
    207  d000
    208  d000		       00	   BANK1      byte.b
    209  d001
    210  d200					      org	$D200
    211  d200					      rorg	$F200
    212  d200
    213  d200				   Bank1Start
    214  d200		       ad fa ff 	      lda	$FFFA
    215  d203		       ea		      nop
    216  d204		       ea		      nop
    217  d205		       ea		      nop
    218  d206
    219  d206							; Epilogue
    220  dffc					      org	$DFFC
    221  dffc					      rorg	$FFFC
    222  dffc		       00 f2		      .word.w	Bank1Start
    223  dffe		       00 f2		      .word.w	Bank1Start
    224  e000
    225  e000					      org	$E000
    226  e000					      rorg	$F000
    227  e000
    228  e000		       00	   BANK2      byte.b
    229  e001
    230  e200					      org	$E200
    231  e200					      rorg	$F200
    232  e200
    233  e200				   Bank2Start
    234  e200		       ad fa ff 	      lda	$FFFA
    235  e203		       ea		      nop
    236  e204		       ea		      nop
    237  e205		       ea		      nop
    238  e206
    239  e206							; Epilogue
    240  effc					      org	$EFFC
    241  effc					      rorg	$FFFC
    242  effc		       00 f2		      .word.w	Bank2Start
    243  effe		       00 f2		      .word.w	Bank2Start
    244  f000
    245  f000					      org	$F000
    246  f000					      rorg	$F000
    247  f000
    248  f000		       00	   BANK3      byte.b
    249  f001
    250  f200					      org	$F200
    251  f200					      rorg	$F200
    252  f200
    253  f200				   Start
    254  f200		       ad fa ff 	      lda	$FFFA
    255  f203		       ea		      nop
    256  f204		       ea		      nop
    257  f205		       ea		      nop
    258  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    260  f211		       a9 00		      lda	#0
    261  f213		       85 83		      sta	FrameCount
    262  f215
    263  f215							; P0 has three copies
    264  f215		       a9 13		      lda	#%00010011
    265  f217		       85 05		      sta	EMERALD_COPIES
    266  f219
    267  f219		       a9 00		      lda	#$00
    268  f21b		       85 09		      sta	COLUBK
    269  f21d		       a9 01		      lda	#%00000001
    270  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    271  f221
    272  f221							; Disable VDEL
    273  f221		       a9 00		      lda	#0
    274  f223		       85 25		      sta	VDELP0
    275  f225		       85 26		      sta	VDELP1
    276  f227
    277  f227
    278  f227							; Player 0
    279  f227		       a2 cc		      ldx	#COL_EMERALD
    280  f229		       86 07		      stx	EMERALD_SP_COLOR
    281  f22b
    282  f22b							; Player 1
    283  f22b		       a9 0f		      lda	#$0f
    284  f22d		       85 06		      sta	JET_SP_COLOR
    285  f22f		       a9 00		      lda	#$00
    286  f231		       85 1b		      sta	JET_SP
    287  f233
    288  f233							; Positions
    289  f233		       a9 64		      lda	#YPosStart
    290  f235		       85 89		      sta	YPos
    291  f237		       a9 37		      lda	#55
    292  f239		       85 86		      sta	XPos
    293  f23b		       a9 00		      lda	#0
    294  f23d		       85 87		      sta	Speed1
    295  f23f		       85 88		      sta	Speed2
    296  f241		       85 8a		      sta	YPos2
    297  f243
    298  f243		       a9 00		      lda	#0
    299  f245		       85 8e		      sta	ROW_DEMO_INDEX
    300  f247
    301  f247				   BeginFrame
      0  f247					      VERTICAL_SYNC
      1  f247		       a9 0e		      lda	#%1110
      2  f249		       85 02	   .VSLP1     sta	WSYNC
      3  f24b		       85 00		      sta	VSYNC
      4  f24d		       4a		      lsr
      5  f24e		       d0 f9		      bne	.VSLP1
    303  f250
      0  f250					      TIMER_SETUP	37
      1  f250				   .lines     SET	37
      2  f250		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f252		       85 02		      sta	WSYNC
      4  f254		       8d 96 02 	      sta	TIM64T
    305  f257
    306  f257							; Scanline counter
    307  f257		       a9 10		      lda	#ROW_COUNT
    308  f259		       85 82		      sta	LoopCount
    309  f25b
    310  f25b							; Frame counter
    311  f25b		       e6 83		      inc	FrameCount
    312  f25d
    313  f25d							; Now the work stuff
    314  f25d		       4c e8 f2 	      jmp	copy_frame
    315  f260
    316  f260					      MAC	emeralds_two
    317  f260				   .target    SET	{1}
    318  f260					      ldx	#%11
    319  f260					      .byte	$CB, $0	; axs
    320  f260					      ldy	map_full,X
    321  f260					      sty	[.target - storage + KERNEL_STORAGE_W]
    322  f260					      ror
    323  f260					      ror
    324  f260					      ENDM
    325  f260
    326  f260					      MAC	emeralds_two_skip
    327  f260					      ror
    328  f260					      ror
    329  f260					      ENDM
    330  f260
    331  f260					      MAC	emeralds_one
    332  f260				   .target    SET	{1}
    333  f260				   .source    SET	{2}
    334  f260					      tax
    335  f260					      and	#%1
    336  f260					      tay
    337  f260					      lda	.source,Y
    338  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    339  f260					      txa
    340  f260					      ror
    341  f260					      ENDM
    342  f260
    343  f260					      MAC	emeralds_one_skip
    344  f260					      ror
    345  f260					      ENDM
    346  f260
    347  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    348  f260							;
    349  f260							; Gems are displayed in alternating kernels. This chart shows
    350  f260							; which kernel is responsible for which dot, with missiles denoted.
    351  f260							;
    352  f260							;	 1 = kernel 1, 2 = kernel 2
    353  f260							;	 S: sprite, M: missile
    354  f260							;
    355  f260							;  1: |SS   SS   |SS	S S  M SS   SS	|
    356  f260							;  2: |  SS   SS M  S S   SS|	 SS   SS|
    357  f260							;     |1122 1122 2112 21 1221 1122 1122|
    358  f260							;     0^	 8^	   17^	     25^
    359  f260							;
    360  f260							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    361  f260
    362  f260					      align	8
    363  f260				   storage
    364  f260							; Gem defaults kernel 1
    365  f260				   storage_00
    366  f260		       85		      .byte.b	SET_1_0
    367  f261				   storage_04
    368  f261		       87		      .byte.b	SET_0_0
    369  f262				   storage_09
    370  f262		       84		      .byte.b	SET_1_1
    371  f263				   storage_13
    372  f263		       84		      .byte.b	SET_1_1
    373  f264				   storage_17
    374  f264		       84		      .byte.b	SET_1_R
    375  f265				   storage_18
    376  f265		       87		      .byte.b	SET_0_0
    377  f266				   storage_22
    378  f266		       87		      .byte.b	SET_0_0
    379  f267
    380  f267							; Gem defaults kernel 2
    381  f267				   storage_02
    382  f267		       87		      .byte.b	SET_0_0
    383  f268				   storage_06
    384  f268		       87		      .byte.b	SET_0_0
    385  f269				   storage_08
    386  f269		       86		      .byte.b	SET_0_L
    387  f26a				   storage_11
    388  f26a		       84		      .byte.b	SET_1_1
    389  f26b				   storage_15
    390  f26b		       84		      .byte.b	SET_1_1
    391  f26c				   storage_20
    392  f26c		       87		      .byte.b	SET_0_0
    393  f26d				   storage_24
    394  f26d		       86		      .byte.b	SET_0_1
    395  f26e				   storage_end
    396  f26e
    397  f270		       00 00		      align	8
    398  f270							; first bit of byte 2 & 3 are unused for simplicity
    399  f270		       00 01 04 00	      .byte.b	%0000, %000001, %0000100, %00000000
    400  f274				   map_emeralds
    401  f274		       0a 00 00 00	      .byte.b	%1010, %0000000, %0000000, %00000000
    402  f278		       05 00 00 00	      .byte.b	%0101, %0000000, %0000000, %00000000
    403  f27c		       02 40 00 00	      .byte.b	%0010, %1000000, %0000000, %00000000
    404  f280		       01 20 00 00	      .byte.b	%0001, %0100000, %0000000, %00000000
    405  f284		       00 50 00 00	      .byte.b	%0000, %1010000, %0000000, %00000000
    406  f288		       00 28 00 00	      .byte.b	%0000, %0101000, %0000000, %00000000
    407  f28c		       00 14 00 00	      .byte.b	%0000, %0010100, %0000000, %00000000
    408  f290		       00 0a 00 00	      .byte.b	%0000, %0001010, %0000000, %00000000
    409  f294		       00 05 00 00	      .byte.b	%0000, %0000101, %0000000, %00000000
    410  f298		       00 02 40 00	      .byte.b	%0000, %0000010, %1000000, %00000000
    411  f29c		       00 01 20 00	      .byte.b	%0000, %0000001, %0100000, %00000000
    412  f2a0		       00 00 50 00	      .byte.b	%0000, %0000000, %1010000, %00000000
    413  f2a4		       00 00 28 00	      .byte.b	%0000, %0000000, %0101000, %00000000
    414  f2a8		       00 00 14 00	      .byte.b	%0000, %0000000, %0010100, %00000000
    415  f2ac		       00 00 0a 00	      .byte.b	%0000, %0000000, %0001010, %00000000
    416  f2b0		       00 00 05 00	      .byte.b	%0000, %0000000, %0000101, %00000000
    417  f2b4		       00 00 02 80	      .byte.b	%0000, %0000000, %0000010, %10000000
    418  f2b8		       00 00 01 40	      .byte.b	%0000, %0000000, %0000001, %01000000
    419  f2bc		       00 00 00 a0	      .byte.b	%0000, %0000000, %0000000, %10100000
    420  f2c0		       00 00 00 50	      .byte.b	%0000, %0000000, %0000000, %01010000
    421  f2c4		       00 00 00 28	      .byte.b	%0000, %0000000, %0000000, %00101000
    422  f2c8		       00 00 00 14	      .byte.b	%0000, %0000000, %0000000, %00010100
    423  f2cc		       00 00 00 0a	      .byte.b	%0000, %0000000, %0000000, %00001010
    424  f2d0		       00 00 00 05	      .byte.b	%0000, %0000000, %0000000, %00000101
    425  f2d4		       08 00 00 02	      .byte.b	%1000, %0000000, %0000000, %00000010
    426  f2d8		       04 00 00 01	      .byte.b	%0100, %0000000, %0000000, %00000001
    427  f2dc				   map_emeralds_end
    428  f2dc
    429  f2e0		       00 00 00 00	      align	8
    430  f2e0				   map_full
    431  f2e0		       87		      .byte.b	SET_0_0
    432  f2e1		       86		      .byte.b	SET_0_1
    433  f2e2		       85		      .byte.b	SET_1_0
    434  f2e3		       84		      .byte.b	SET_1_1
    435  f2e4				   map_missle_l
    436  f2e4		       86		      .byte.b	SET_0_L
    437  f2e5		       85		      .byte.b	SET_1_L
    438  f2e6				   map_missle_r
    439  f2e6		       85		      .byte.b	SET_0_R
    440  f2e7		       84		      .byte.b	SET_1_R
    441  f2e8
    442  f2e8
    443  f2e8				   copy_frame
    444  f2e8							; FRAMESWITCH
    445  f2e8		       a9 01		      lda	#01
    446  f2ea		       25 83		      and	FrameCount
    447  f2ec		       f0 03		      beq	CopyFrame1Kernel
    448  f2ee		       4c 7a f3 	      jmp	CopyFrame2Kernel
    449  f2f1
    450  f2f1				   CopyFrame1Kernel
    451  f2f1							; Copy: KERNEL 1
    452  f2f1		       a0 2d		      ldy	#(kernel_1_end - kernel_1_start)-1
    453  f2f3				   .copy_loop_1
    454  f2f3		       b9 63 f6 	      lda	kernel_1_start,Y
    455  f2f6		       99 00 10 	      sta	$1000,Y
    456  f2f9		       88		      dey
    457  f2fa		       d0 f7		      bne	.copy_loop_1
    458  f2fc		       ad 63 f6 	      lda	kernel_1_start
    459  f2ff		       8d 00 10 	      sta	$1000
    460  f302
    461  f302		       a6 8e		      ldx	ROW_DEMO_INDEX
    462  f304		       bd 77 f2 	      lda	map_emeralds+3,X
      0  f307					      EMERALDS_TWO_SKIP
      1  f307		       6a		      ror
      2  f308		       6a		      ror
      0  f309					      EMERALDS_TWO	storage_22
      1  f309				   .target    SET	storage_22
      2  f309		       a2 03		      ldx	#%11
      3  f30b		       cb 00		      .byte.b	$CB, $0
      4  f30d		       bc e0 f2 	      ldy	map_full,X
      5  f310		       8c 46 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f313		       6a		      ror
      7  f314		       6a		      ror
      0  f315					      EMERALDS_TWO_SKIP
      1  f315		       6a		      ror
      2  f316		       6a		      ror
      0  f317					      EMERALDS_TWO	storage_18
      1  f317				   .target    SET	storage_18
      2  f317		       a2 03		      ldx	#%11
      3  f319		       cb 00		      .byte.b	$CB, $0
      4  f31b		       bc e0 f2 	      ldy	map_full,X
      5  f31e		       8c 45 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f321		       6a		      ror
      7  f322		       6a		      ror
    467  f323
    468  f323		       a6 8e		      ldx	ROW_DEMO_INDEX
    469  f325		       bd 76 f2 	      lda	map_emeralds+2,X
      0  f328					      EMERALDS_ONE	storage_17, map_missle_r
      1  f328				   .target    SET	storage_17
      2  f328				   .source    SET	map_missle_r
      3  f328		       aa		      tax
      4  f329		       29 01		      and	#%1
      5  f32b		       a8		      tay
      6  f32c		       b9 e6 f2 	      lda	.source,Y
      7  f32f		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f332		       8a		      txa
      9  f333		       6a		      ror
      0  f334					      EMERALDS_TWO_SKIP
      1  f334		       6a		      ror
      2  f335		       6a		      ror
      0  f336					      EMERALDS_TWO	storage_13
      1  f336				   .target    SET	storage_13
      2  f336		       a2 03		      ldx	#%11
      3  f338		       cb 00		      .byte.b	$CB, $0
      4  f33a		       bc e0 f2 	      ldy	map_full,X
      5  f33d		       8c 43 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f340		       6a		      ror
      7  f341		       6a		      ror
      0  f342					      EMERALDS_TWO_SKIP
      1  f342		       6a		      ror
      2  f343		       6a		      ror
    474  f344
    475  f344		       a6 8e		      ldx	ROW_DEMO_INDEX
    476  f346		       bd 75 f2 	      lda	map_emeralds+1,X
      0  f349					      EMERALDS_TWO	storage_09
      1  f349				   .target    SET	storage_09
      2  f349		       a2 03		      ldx	#%11
      3  f34b		       cb 00		      .byte.b	$CB, $0
      4  f34d		       bc e0 f2 	      ldy	map_full,X
      5  f350		       8c 42 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f353		       6a		      ror
      7  f354		       6a		      ror
      0  f355					      EMERALDS_ONE_SKIP
      1  f355		       6a		      ror
      0  f356					      EMERALDS_TWO_SKIP
      1  f356		       6a		      ror
      2  f357		       6a		      ror
      0  f358					      EMERALDS_TWO	storage_04
      1  f358				   .target    SET	storage_04
      2  f358		       a2 03		      ldx	#%11
      3  f35a		       cb 00		      .byte.b	$CB, $0
      4  f35c		       bc e0 f2 	      ldy	map_full,X
      5  f35f		       8c 41 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f362		       6a		      ror
      7  f363		       6a		      ror
    481  f364
    482  f364		       a6 8e		      ldx	ROW_DEMO_INDEX
    483  f366		       bd 74 f2 	      lda	map_emeralds+0,X
      0  f369					      EMERALDS_TWO_SKIP
      1  f369		       6a		      ror
      2  f36a		       6a		      ror
      0  f36b					      EMERALDS_TWO	storage_00
      1  f36b				   .target    SET	storage_00
      2  f36b		       a2 03		      ldx	#%11
      3  f36d		       cb 00		      .byte.b	$CB, $0
      4  f36f		       bc e0 f2 	      ldy	map_full,X
      5  f372		       8c 40 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f375		       6a		      ror
      7  f376		       6a		      ror
    486  f377
    487  f377		       4c 03 f4 	      jmp	CopyFrameNext
    488  f37a
    489  f37a				   CopyFrame2Kernel
    490  f37a							; Copy: KERNEL 2
    491  f37a		       a0 2d		      ldy	#(kernel_2_end - kernel_2_start)-1
    492  f37c				   .copy_loop_2
    493  f37c		       b9 91 f6 	      lda	kernel_2_start,Y
    494  f37f		       99 00 10 	      sta	$1000,Y
    495  f382		       88		      dey
    496  f383		       d0 f7		      bne	.copy_loop_2
    497  f385		       ad 91 f6 	      lda	kernel_2_start
    498  f388		       8d 00 10 	      sta	$1000
    499  f38b
    500  f38b		       a6 8e		      ldx	ROW_DEMO_INDEX
    501  f38d		       bd 77 f2 	      lda	map_emeralds+3,X
      0  f390					      EMERALDS_TWO	storage_24
      1  f390				   .target    SET	storage_24
      2  f390		       a2 03		      ldx	#%11
      3  f392		       cb 00		      .byte.b	$CB, $0
      4  f394		       bc e0 f2 	      ldy	map_full,X
      5  f397		       8c 4d 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f39a		       6a		      ror
      7  f39b		       6a		      ror
      0  f39c					      EMERALDS_TWO_SKIP
      1  f39c		       6a		      ror
      2  f39d		       6a		      ror
      0  f39e					      EMERALDS_TWO	storage_20
      1  f39e				   .target    SET	storage_20
      2  f39e		       a2 03		      ldx	#%11
      3  f3a0		       cb 00		      .byte.b	$CB, $0
      4  f3a2		       bc e0 f2 	      ldy	map_full,X
      5  f3a5		       8c 4c 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3a8		       6a		      ror
      7  f3a9		       6a		      ror
      0  f3aa					      EMERALDS_TWO_SKIP
      1  f3aa		       6a		      ror
      2  f3ab		       6a		      ror
    506  f3ac
    507  f3ac		       a6 8e		      ldx	ROW_DEMO_INDEX
    508  f3ae		       bd 76 f2 	      lda	map_emeralds+2,X
      0  f3b1					      EMERALDS_ONE_SKIP
      1  f3b1		       6a		      ror
      0  f3b2					      EMERALDS_TWO	storage_15
      1  f3b2				   .target    SET	storage_15
      2  f3b2		       a2 03		      ldx	#%11
      3  f3b4		       cb 00		      .byte.b	$CB, $0
      4  f3b6		       bc e0 f2 	      ldy	map_full,X
      5  f3b9		       8c 4b 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3bc		       6a		      ror
      7  f3bd		       6a		      ror
      0  f3be					      EMERALDS_TWO_SKIP
      1  f3be		       6a		      ror
      2  f3bf		       6a		      ror
      0  f3c0					      EMERALDS_TWO	storage_11
      1  f3c0				   .target    SET	storage_11
      2  f3c0		       a2 03		      ldx	#%11
      3  f3c2		       cb 00		      .byte.b	$CB, $0
      4  f3c4		       bc e0 f2 	      ldy	map_full,X
      5  f3c7		       8c 4a 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3ca		       6a		      ror
      7  f3cb		       6a		      ror
    513  f3cc
    514  f3cc		       a6 8e		      ldx	ROW_DEMO_INDEX
    515  f3ce		       bd 75 f2 	      lda	map_emeralds+1,X
      0  f3d1					      EMERALDS_TWO_SKIP
      1  f3d1		       6a		      ror
      2  f3d2		       6a		      ror
      0  f3d3					      EMERALDS_ONE	storage_08, map_missle_l
      1  f3d3				   .target    SET	storage_08
      2  f3d3				   .source    SET	map_missle_l
      3  f3d3		       aa		      tax
      4  f3d4		       29 01		      and	#%1
      5  f3d6		       a8		      tay
      6  f3d7		       b9 e4 f2 	      lda	.source,Y
      7  f3da		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f3dd		       8a		      txa
      9  f3de		       6a		      ror
      0  f3df					      EMERALDS_TWO	storage_06
      1  f3df				   .target    SET	storage_06
      2  f3df		       a2 03		      ldx	#%11
      3  f3e1		       cb 00		      .byte.b	$CB, $0
      4  f3e3		       bc e0 f2 	      ldy	map_full,X
      5  f3e6		       8c 48 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3e9		       6a		      ror
      7  f3ea		       6a		      ror
      0  f3eb					      EMERALDS_TWO_SKIP
      1  f3eb		       6a		      ror
      2  f3ec		       6a		      ror
    520  f3ed
    521  f3ed		       a6 8e		      ldx	ROW_DEMO_INDEX
    522  f3ef		       bd 74 f2 	      lda	map_emeralds+0,X
      0  f3f2					      EMERALDS_TWO	storage_02
      1  f3f2				   .target    SET	storage_02
      2  f3f2		       a2 03		      ldx	#%11
      3  f3f4		       cb 00		      .byte.b	$CB, $0
      4  f3f6		       bc e0 f2 	      ldy	map_full,X
      5  f3f9		       8c 47 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f3fc		       6a		      ror
      7  f3fd		       6a		      ror
      0  f3fe					      EMERALDS_TWO_SKIP
      1  f3fe		       6a		      ror
      2  f3ff		       6a		      ror
    525  f400
    526  f400		       4c 03 f4 	      jmp	CopyFrameNext
    527  f403
    528  f403
    529  f403				   CopyFrameNext
    530  f403
    531  f403							; Frame skipping for increasing demo index
    532  f403		       a5 83		      lda	FrameCount
    533  f405		       29 07		      and	#%111
    534  f407		       c9 07		      cmp	#%111
    535  f409		       d0 0d		      bne	.next_next_thing
    536  f40b
    537  f40b		       18		      clc
    538  f40c		       a5 8e		      lda	ROW_DEMO_INDEX
    539  f40e		       69 04		      adc	#4
    540  f410		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
    541  f412		       90 02		      bcc	.next_thing_local
    542  f414		       a9 00		      lda	#0
    543  f416				   .next_thing_local
    544  f416		       85 8e		      sta	ROW_DEMO_INDEX
    545  f418				   .next_next_thing
    546  f418		       85 02		      sta	WSYNC
    547  f41a
    548  f41a							; Positioning
      0  f41a					      SLEEP	40
      1  f41a				   .CYCLES    SET	40
      2  f41a
      3  f41a				  -	      IF	.CYCLES < 2
      4  f41a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f41a				  -	      ERR
      6  f41a					      ENDIF
      7  f41a
      8  f41a				  -	      IF	.CYCLES & 1
      9  f41a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f41a				  -	      nop	0
     11  f41a				  -	      ELSE
     12  f41a				  -	      bit	VSYNC
     13  f41a				  -	      ENDIF
     14  f41a				  -.CYCLES    SET	.CYCLES - 3
     15  f41a					      ENDIF
     16  f41a
     17  f41a					      REPEAT	.CYCLES / 2
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     17  f41c					      REPEND
     18  f41d		       ea		      nop
     17  f41d					      REPEND
     18  f41e		       ea		      nop
     17  f41e					      REPEND
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     17  f425					      REPEND
     18  f426		       ea		      nop
     17  f426					      REPEND
     18  f427		       ea		      nop
     17  f427					      REPEND
     18  f428		       ea		      nop
     17  f428					      REPEND
     18  f429		       ea		      nop
     17  f429					      REPEND
     18  f42a		       ea		      nop
     17  f42a					      REPEND
     18  f42b		       ea		      nop
     17  f42b					      REPEND
     18  f42c		       ea		      nop
     17  f42c					      REPEND
     18  f42d		       ea		      nop
     19  f42e					      REPEND
    550  f42e		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    551  f430		       85 02		      sta	WSYNC
    552  f432
    553  f432							; Misc
    554  f432		       a9 00		      lda	#00
    555  f434		       85 1e		      sta	EMERALD_MI_ENABLE
    556  f436
    557  f436							; Assign dervied SpriteEnd value
    558  f436		       a9 c8		      lda	#HEIGHT_OFFSET
    559  f438		       e5 89		      sbc	YPos
    560  f43a		       85 85		      sta	SpriteEnd
    561  f43c
    562  f43c							; Move missile to starting position and fine-tune position
    563  f43c							; TODO replace with an HMOVE macro
    564  f43c		       85 02		      sta	WSYNC
      0  f43e					      sleep	EMERALD_MI_HMOVE_S
      1  f43e				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f43e
      3  f43e				  -	      IF	.CYCLES < 2
      4  f43e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f43e				  -	      ERR
      6  f43e					      ENDIF
      7  f43e
      8  f43e					      IF	.CYCLES & 1
      9  f43e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f43e		       04 00		      nop	0
     11  f440				  -	      ELSE
     12  f440				  -	      bit	VSYNC
     13  f440					      ENDIF
     14  f440				   .CYCLES    SET	.CYCLES - 3
     15  f440					      ENDIF
     16  f440
     17  f440					      REPEAT	.CYCLES / 2
     18  f440		       ea		      nop
     17  f440					      REPEND
     18  f441		       ea		      nop
     17  f441					      REPEND
     18  f442		       ea		      nop
     17  f442					      REPEND
     18  f443		       ea		      nop
     17  f443					      REPEND
     18  f444		       ea		      nop
     17  f444					      REPEND
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     17  f44b					      REPEND
     18  f44c		       ea		      nop
     17  f44c					      REPEND
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     19  f452					      REPEND
    566  f452		       85 13		      sta	EMERALD_MI_RESET
    567  f454
    568  f454							; Player 1
    569  f454		       a5 86		      lda	XPos
    570  f456		       a2 00		      ldx	#0
    571  f458		       20 2d f7 	      jsr	SetHorizPos
    572  f45b
    573  f45b
    574  f45b							; Choose which hmove value to use
    575  f45b							; FRAMESWITCH
    576  f45b		       a9 01		      lda	#01
    577  f45d		       25 83		      and	FrameCount
    578  f45f		       d0 07		      bne	doframe2
    579  f461
    580  f461							; frame 1
    581  f461		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    582  f463		       85 23		      sta	EMERALD_MI_HMOVE
    583  f465		       4c 6c f4 	      jmp	doframe2after
    584  f468
    585  f468							; frame 2
    586  f468				   doframe2
    587  f468		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    588  f46a		       85 23		      sta	EMERALD_MI_HMOVE
    589  f46c				   doframe2after
    590  f46c
      0  f46c					      TIMER_WAIT
      1  f46c				   .waittimer
      2  f46c		       ad 84 02 	      lda	INTIM
      3  f46f		       d0 fb		      bne	.waittimer
      0  f471					      TIMER_SETUP	192
      1  f471				   .lines     SET	192
      2  f471		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f473		       85 02		      sta	WSYNC
      4  f475		       8d 96 02 	      sta	TIM64T
    593  f478		       85 02		      sta	WSYNC	; ???
    594  f47a
    595  f47a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    596  f47a
    597  f47a							; Frame border top
    598  f47a
    599  f47a
    600  f47a							; First HMOVE
    601  f47a		       85 2a		      sta	HMOVE
    602  f47c
    603  f47c		       a9 00		      lda	#0
    604  f47e		       85 08		      sta	COLUPF
    605  f480		       85 0e		      sta	PF1
    606  f482		       85 0f		      sta	PF2
    607  f484		       a9 02		      lda	#SIGNAL_LINE
    608  f486		       85 09		      sta	COLUBK
    609  f488
    610  f488					      REPEAT	6
    611  f488		       85 02		      sta	WSYNC
    610  f488					      REPEND
    611  f48a		       85 02		      sta	WSYNC
    610  f48a					      REPEND
    611  f48c		       85 02		      sta	WSYNC
    610  f48c					      REPEND
    611  f48e		       85 02		      sta	WSYNC
    610  f48e					      REPEND
    611  f490		       85 02		      sta	WSYNC
    610  f490					      REPEND
    611  f492		       85 02		      sta	WSYNC
    612  f494					      REPEND
    613  f494
    614  f494		       a9 00		      lda	#0
    615  f496		       85 09		      sta	COLUBK
    616  f498		       85 02		      sta	WSYNC
    617  f49a
    618  f49a							; Start top border
    619  f49a				   border_top
    620  f49a							; Make the playfield solid.
    621  f49a		       a9 3f		      lda	#%00111111
    622  f49c		       85 0e		      sta	PF1
    623  f49e		       a9 ff		      lda	#%11111111
    624  f4a0		       85 0f		      sta	PF2
    625  f4a2
    626  f4a2		       a9 42		      lda	#COL_BG
    627  f4a4		       a0 00		      ldy	#0
    628  f4a6
    629  f4a6		       85 08		      sta	COLUPF
    630  f4a8		       85 02		      sta	WSYNC
    631  f4aa
    632  f4aa		       84 08		      sty	COLUPF
    633  f4ac		       85 02		      sta	WSYNC
    634  f4ae
    635  f4ae		       85 08		      sta	COLUPF
    636  f4b0		       85 02		      sta	WSYNC
    637  f4b2
    638  f4b2		       85 02		      sta	WSYNC
    639  f4b4
    640  f4b4		       85 02		      sta	WSYNC
    641  f4b6
    642  f4b6		       84 08		      sty	COLUPF
    643  f4b8		       85 02		      sta	WSYNC
    644  f4ba
    645  f4ba		       85 08		      sta	COLUPF
    646  f4bc		       85 02		      sta	WSYNC
    647  f4be
    648  f4be		       85 02		      sta	WSYNC
    649  f4c0
    650  f4c0				   PlayArea
    651  f4c0							; PF is now the playing area
    652  f4c0		       a9 00		      lda	#%00000000
    653  f4c2		       85 0d		      sta	PF0
    654  f4c4		       a9 20		      lda	#%00100000
    655  f4c6		       85 0e		      sta	PF1
    656  f4c8		       a9 00		      lda	#%00000000
    657  f4ca		       85 0f		      sta	PF2
    658  f4cc
    659  f4cc
    660  f4cc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    661  f4cc
    662  f4cc							; frame start
    663  f4cc
    664  f4cc
    665  f4cc
    666  f4cc
    667  f4cc							; MACRO for calculating next GRPx value
    668  f4cc
    669  f4cc					      MAC	jet_spritedata_calc_nosta
    670  f4cc							; loader
    671  f4cc					      dcp	SpriteEnd
    672  f4cc
    673  f4cc							; 4c
    674  f4cc							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    675  f4cc							; 6c
    676  f4cc					      ldy	#0
    677  f4cc					      .byte	$b0, $01	;2c / 3c (taken)
    678  f4cc					      .byte	$2c	; 4c / 0c
    679  f4cc					      ldy	SpriteEnd
    680  f4cc
    681  f4cc					      ENDM
    682  f4cc
    683  f4cc					      MAC	jet_spritedata_calc
    684  f4cc							; loader
    685  f4cc					      lda	#SPRITE_HEIGHT
    686  f4cc					      dcp	SpriteEnd
    687  f4cc					      ldy	SpriteEnd
    688  f4cc
    689  f4cc							; 4c
    690  f4cc							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    691  f4cc					      lda	Frame0,Y
    692  f4cc							; 6c
    693  f4cc					      .byte	$b0, $01	;2c / 3c (taken)
    694  f4cc					      .byte	$2c	; 4c / 0c
    695  f4cc					      sta	JET_SP	; 0c / 3c
    696  f4cc
    697  f4cc					      ENDM
    698  f4cc
    699  f4cc
    700  f4cc							; Start the row with a WSYNC.
    701  f4cc				   row_start
    702  f4cc							; ~15c
      0  f4cc					      jet_spritedata_calc
      1  f4cc
      2  f4cc		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ce		       c7 85		      dcp	SpriteEnd
      4  f4d0		       a4 85		      ldy	SpriteEnd
      5  f4d2
      6  f4d2
      7  f4d2
      8  f4d2		       b9 00 f8 	      lda	Frame0,Y
      9  f4d5
     10  f4d5		       b0 01		      .byte.b	$b0, $01
     11  f4d7		       2c		      .byte.b	$2c
     12  f4d8		       85 1b		      sta	JET_SP
     13  f4da
    704  f4da		       85 02		      sta	WSYNC
    705  f4dc
    706  f4dc							; [row:1]
      0  f4dc					      jet_spritedata_calc
      1  f4dc
      2  f4dc		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4de		       c7 85		      dcp	SpriteEnd
      4  f4e0		       a4 85		      ldy	SpriteEnd
      5  f4e2
      6  f4e2
      7  f4e2
      8  f4e2		       b9 00 f8 	      lda	Frame0,Y
      9  f4e5
     10  f4e5		       b0 01		      .byte.b	$b0, $01
     11  f4e7		       2c		      .byte.b	$2c
     12  f4e8		       85 1b		      sta	JET_SP
     13  f4ea
    708  f4ea
    709  f4ea		       a9 00		      lda	#0
    710  f4ec		       85 08		      sta	COLUPF
    711  f4ee
    712  f4ee							; Push jump table to the stack
    713  f4ee		       a9 f5		      lda	#>[row_after_kernel - 1]
    714  f4f0		       48		      pha
    715  f4f1		       a9 37		      lda	#<[row_after_kernel - 1]
    716  f4f3		       48		      pha
    717  f4f4		       a9 81		      lda	#%10000001
    718  f4f6		       48		      pha
    719  f4f7		       a9 10		      lda	#>[$1100 - 1]
    720  f4f9		       48		      pha
    721  f4fa		       a9 ff		      lda	#<[$1100 - 1]
    722  f4fc		       48		      pha
    723  f4fd		       a9 81		      lda	#%10000001
    724  f4ff		       48		      pha
    725  f500
    726  f500		       85 02		      sta	WSYNC
    727  f502
    728  f502							; [row:2]
      0  f502					      jet_spritedata_calc
      1  f502
      2  f502		       a9 09		      lda	#SPRITE_HEIGHT
      3  f504		       c7 85		      dcp	SpriteEnd
      4  f506		       a4 85		      ldy	SpriteEnd
      5  f508
      6  f508
      7  f508
      8  f508		       b9 00 f8 	      lda	Frame0,Y
      9  f50b
     10  f50b		       b0 01		      .byte.b	$b0, $01
     11  f50d		       2c		      .byte.b	$2c
     12  f50e		       85 1b		      sta	JET_SP
     13  f510
    730  f510
    731  f510
    732  f510		       a9 42		      lda	#COL_BG
    733  f512		       85 08		      sta	COLUPF
    734  f514
    735  f514
    736  f514		       a9 09		      lda	#SPRITE_HEIGHT
      0  f516					      jet_spritedata_calc_nosta
      1  f516
      2  f516		       c7 85		      dcp	SpriteEnd
      3  f518
      4  f518
      5  f518
      6  f518
      7  f518		       a0 00		      ldy	#0
      8  f51a		       b0 01		      .byte.b	$b0, $01
      9  f51c		       2c		      .byte.b	$2c
     10  f51d		       a4 85		      ldy	SpriteEnd
     11  f51f
    738  f51f		       b9 00 f8 	      lda	Frame0,Y
    739  f522		       85 fa		      sta	$fa
      0  f524					      jet_spritedata_calc_nosta
      1  f524
      2  f524		       c7 85		      dcp	SpriteEnd
      3  f526
      4  f526
      5  f526
      6  f526
      7  f526		       a0 00		      ldy	#0
      8  f528		       b0 01		      .byte.b	$b0, $01
      9  f52a		       2c		      .byte.b	$2c
     10  f52b		       a4 85		      ldy	SpriteEnd
     11  f52d
    741  f52d		       b9 00 f8 	      lda	Frame0,Y
    742  f530		       85 fd		      sta	$fd
    743  f532
      0  f532					      sleep	6
      1  f532				   .CYCLES    SET	6
      2  f532
      3  f532				  -	      IF	.CYCLES < 2
      4  f532				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f532				  -	      ERR
      6  f532					      ENDIF
      7  f532
      8  f532				  -	      IF	.CYCLES & 1
      9  f532				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f532				  -	      nop	0
     11  f532				  -	      ELSE
     12  f532				  -	      bit	VSYNC
     13  f532				  -	      ENDIF
     14  f532				  -.CYCLES    SET	.CYCLES - 3
     15  f532					      ENDIF
     16  f532
     17  f532					      REPEAT	.CYCLES / 2
     18  f532		       ea		      nop
     17  f532					      REPEND
     18  f533		       ea		      nop
     17  f533					      REPEND
     18  f534		       ea		      nop
     19  f535					      REPEND
    745  f535
    746  f535							; [row:3-4]
    747  f535							; Jump to the copied kernel.
    748  f535				   kernel_launch
    749  f535		       4c 00 11 	      jmp	KERNEL_START
    750  f538
    751  f538				   row_after_kernel
    752  f538							; [row:5]
    753  f538							; Cleanup from the kernel.
    754  f538		       a9 00		      lda	#0
    755  f53a		       85 1e		      sta	EMERALD_MI_ENABLE
    756  f53c		       85 1c		      sta	EMERALD_SP
    757  f53e		       85 08		      sta	COLUPF
    758  f540
      0  f540					      jet_spritedata_calc
      1  f540
      2  f540		       a9 09		      lda	#SPRITE_HEIGHT
      3  f542		       c7 85		      dcp	SpriteEnd
      4  f544		       a4 85		      ldy	SpriteEnd
      5  f546
      6  f546
      7  f546
      8  f546		       b9 00 f8 	      lda	Frame0,Y
      9  f549
     10  f549		       b0 01		      .byte.b	$b0, $01
     11  f54b		       2c		      .byte.b	$2c
     12  f54c		       85 1b		      sta	JET_SP
     13  f54e
    760  f54e
    761  f54e		       85 02		      sta	WSYNC
    762  f550
    763  f550							; [row:6]
      0  f550					      jet_spritedata_calc
      1  f550
      2  f550		       a9 09		      lda	#SPRITE_HEIGHT
      3  f552		       c7 85		      dcp	SpriteEnd
      4  f554		       a4 85		      ldy	SpriteEnd
      5  f556
      6  f556
      7  f556
      8  f556		       b9 00 f8 	      lda	Frame0,Y
      9  f559
     10  f559		       b0 01		      .byte.b	$b0, $01
     11  f55b		       2c		      .byte.b	$2c
     12  f55c		       85 1b		      sta	JET_SP
     13  f55e
    765  f55e		       a9 42		      lda	#COL_BG
    766  f560		       85 08		      sta	COLUPF
    767  f562
    768  f562							; FRAMESWITCH
    769  f562		       a9 01		      lda	#01
    770  f564		       25 83		      and	FrameCount
    771  f566		       d0 45		      bne	loadframe2
    772  f568
    773  f568				   loadframe1
    774  f568							; ~30c
    775  f568
    776  f568							; Emerald byte setting 1A
    777  f568		       a2 00		      ldx	#0
    778  f56a		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    779  f56d		       8d 0c 10 	      sta	GEM_00_W
    780  f570		       e8		      inx
    781  f571		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    782  f574		       8d 14 10 	      sta	GEM_04_W
    783  f577		       e8		      inx
    784  f578		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    785  f57b		       8d 18 10 	      sta	GEM_09_W
    786  f57e		       e8		      inx
    787  f57f
    788  f57f		       85 02		      sta	WSYNC
    789  f581
    790  f581							; [row:7]
      0  f581					      jet_spritedata_calc
      1  f581
      2  f581		       a9 09		      lda	#SPRITE_HEIGHT
      3  f583		       c7 85		      dcp	SpriteEnd
      4  f585		       a4 85		      ldy	SpriteEnd
      5  f587
      6  f587
      7  f587
      8  f587		       b9 00 f8 	      lda	Frame0,Y
      9  f58a
     10  f58a		       b0 01		      .byte.b	$b0, $01
     11  f58c		       2c		      .byte.b	$2c
     12  f58d		       85 1b		      sta	JET_SP
     13  f58f
    792  f58f
    793  f58f							; Emerald byte setting 1B
    794  f58f		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    795  f592		       8d 1c 10 	      sta	GEM_13_W
    796  f595		       e8		      inx
    797  f596		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    798  f599		       8d 20 10 	      sta	GEM_17_W
    799  f59c		       e8		      inx
    800  f59d		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    801  f5a0		       8d 22 10 	      sta	GEM_18_W
    802  f5a3		       e8		      inx
    803  f5a4		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    804  f5a7		       8d 26 10 	      sta	GEM_22_W
    805  f5aa
    806  f5aa		       4c f2 f5 	      jmp	row_7_end
    807  f5ad
    808  f5ad				   loadframe2
    809  f5ad							; ~30c
    810  f5ad
    811  f5ad							; Emerald byte setting 2A
    812  f5ad		       a2 07		      ldx	#[storage_02 - storage]
    813  f5af		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    814  f5b2		       8d 0f 10 	      sta	GEM_02_W
    815  f5b5		       e8		      inx
    816  f5b6		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    817  f5b9		       8d 16 10 	      sta	GEM_06_W
    818  f5bc		       e8		      inx
    819  f5bd		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    820  f5c0		       8d 0b 10 	      sta	GEM_08_W
    821  f5c3		       e8		      inx
    822  f5c4
    823  f5c4		       85 02		      sta	WSYNC
    824  f5c6
    825  f5c6							; [row:7]
      0  f5c6					      jet_spritedata_calc
      1  f5c6
      2  f5c6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c8		       c7 85		      dcp	SpriteEnd
      4  f5ca		       a4 85		      ldy	SpriteEnd
      5  f5cc
      6  f5cc
      7  f5cc
      8  f5cc		       b9 00 f8 	      lda	Frame0,Y
      9  f5cf
     10  f5cf		       b0 01		      .byte.b	$b0, $01
     11  f5d1		       2c		      .byte.b	$2c
     12  f5d2		       85 1b		      sta	JET_SP
     13  f5d4
    827  f5d4
    828  f5d4							; Emerald byte setting 2B
    829  f5d4		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    830  f5d7		       8d 1a 10 	      sta	GEM_11_W
    831  f5da		       e8		      inx
    832  f5db		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    833  f5de		       8d 1e 10 	      sta	GEM_15_W
    834  f5e1		       e8		      inx
    835  f5e2		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    836  f5e5		       8d 22 10 	      sta	GEM_20_W
    837  f5e8		       e8		      inx
    838  f5e9		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    839  f5ec		       8d 26 10 	      sta	GEM_24_W
    840  f5ef
    841  f5ef		       4c f2 f5 	      jmp	row_7_end
    842  f5f2
    843  f5f2				   row_7_end
    844  f5f2		       85 02		      sta	WSYNC
    845  f5f4
    846  f5f4							; [row:8]
    847  f5f4							; Repeat loop until LoopCount < 0
    848  f5f4		       c6 82		      dec	LoopCount
    849  f5f6		       30 03		      bmi	frame_bottom
    850  f5f8		       4c cc f4 	      jmp	row_start
    851  f5fb
    852  f5fb							; reset the background for bottom of playfield
    853  f5fb				   frame_bottom
    854  f5fb							;sta WSYNC
    855  f5fb
    856  f5fb							; Form the bottom of the level frame.
    857  f5fb		       a9 3f		      lda	#%00111111
    858  f5fd		       85 0e		      sta	PF1
    859  f5ff		       a9 ff		      lda	#%11111111
    860  f601		       85 0f		      sta	PF2
    861  f603
    862  f603							; Clear all sprites.
    863  f603		       a9 00		      lda	#0
    864  f605		       85 1c		      sta	EMERALD_SP
    865  f607		       85 1b		      sta	JET_SP
    866  f609		       85 1e		      sta	EMERALD_MI_ENABLE
    867  f60b
    868  f60b		       a9 42		      lda	#COL_BG
    869  f60d		       a0 00		      ldy	#0
    870  f60f		       85 02		      sta	WSYNC
    871  f611
    872  f611		       84 08		      sty	COLUPF
    873  f613		       85 02		      sta	WSYNC
    874  f615
    875  f615		       85 08		      sta	COLUPF
    876  f617		       85 02		      sta	WSYNC
    877  f619
    878  f619		       85 02		      sta	WSYNC
    879  f61b
    880  f61b		       85 02		      sta	WSYNC
    881  f61d
    882  f61d		       84 08		      sty	COLUPF
    883  f61f		       85 02		      sta	WSYNC
    884  f621
    885  f621		       85 08		      sta	COLUPF
    886  f623		       85 02		      sta	WSYNC
    887  f625		       85 02		      sta	WSYNC
    888  f627
    889  f627							; Blank all background colors.
    890  f627				   frame_end
    891  f627		       a9 00		      lda	#0
    892  f629		       85 08		      sta	COLUPF
    893  f62b		       85 0f		      sta	PF2
    894  f62d		       85 0e		      sta	PF1
    895  f62f		       85 1c		      sta	EMERALD_SP
    896  f631		       85 02		      sta	WSYNC
    897  f633
    898  f633							; Guide lines (2x)
    899  f633		       a9 02		      lda	#SIGNAL_LINE
    900  f635		       85 09		      sta	COLUBK
    901  f637					      REPEAT	6
    902  f637		       85 02		      sta	WSYNC
    901  f637					      REPEND
    902  f639		       85 02		      sta	WSYNC
    901  f639					      REPEND
    902  f63b		       85 02		      sta	WSYNC
    901  f63b					      REPEND
    902  f63d		       85 02		      sta	WSYNC
    901  f63d					      REPEND
    902  f63f		       85 02		      sta	WSYNC
    901  f63f					      REPEND
    902  f641		       85 02		      sta	WSYNC
    903  f643					      REPEND
    904  f643		       a9 00		      lda	#$00
    905  f645		       85 09		      sta	COLUBK
    906  f647		       85 02		      sta	WSYNC
    907  f649
      0  f649					      TIMER_WAIT
      1  f649				   .waittimer
      2  f649		       ad 84 02 	      lda	INTIM
      3  f64c		       d0 fb		      bne	.waittimer
      0  f64e					      TIMER_SETUP	30
      1  f64e				   .lines     SET	30
      2  f64e		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f650		       85 02		      sta	WSYNC
      4  f652		       8d 96 02 	      sta	TIM64T
    910  f655
    911  f655		       20 bf f6 	      jsr	MoveJoystick
    912  f658		       20 f6 f6 	      jsr	SpeedCalculation
    913  f65b
      0  f65b					      TIMER_WAIT
      1  f65b				   .waittimer
      2  f65b		       ad 84 02 	      lda	INTIM
      3  f65e		       d0 fb		      bne	.waittimer
    915  f660		       4c 47 f2 	      jmp	BeginFrame
    916  f663
    917  f663
    918  f663							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    919  f663
    920  f663							; kernels
    921  f663
    922  f663
    923  f663							; Important cycles for the kernels:
    924  f663							; left border: 29, right border: 64
    925  f663
    926  f663							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    927  f663
    928  f663							; KERNEL 1
    929  f663
    930  f663							; Emerald line macro (1, 2, ...)
    931  f663
    932  f663				   kernel_1_start
    933  f663							; sleep first make this distinct from
    934  f663							; other kernel for debug scenarios
      0  f663					      sleep	6
      1  f663				   .CYCLES    SET	6
      2  f663
      3  f663				  -	      IF	.CYCLES < 2
      4  f663				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f663				  -	      ERR
      6  f663					      ENDIF
      7  f663
      8  f663				  -	      IF	.CYCLES & 1
      9  f663				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f663				  -	      nop	0
     11  f663				  -	      ELSE
     12  f663				  -	      bit	VSYNC
     13  f663				  -	      ENDIF
     14  f663				  -.CYCLES    SET	.CYCLES - 3
     15  f663					      ENDIF
     16  f663
     17  f663					      REPEAT	.CYCLES / 2
     18  f663		       ea		      nop
     17  f663					      REPEND
     18  f664		       ea		      nop
     17  f664					      REPEND
     18  f665		       ea		      nop
     19  f666					      REPEND
    936  f666		       68		      pla
    937  f667		       85 1b		      sta	GRP0
    938  f669
    939  f669		       a9 60		      lda	#EMR1
    940  f66b		       a2 06		      ldx	#EMR2
    941  f66d		       a0 66		      ldy	#EMR3
    942  f66f				   .gem_00
    943  f66f		       84 1c		      .byte.b	GEM_00, EMERALD_SP	; moveable?
    944  f671
    945  f671							; Critical: 22c (start of precise timing)
    946  f671		       85 11		      sta	EMERALD_SP_RESET	; trivial
    947  f673		       85 1e		      sta	EMERALD_MI_ENABLE	; trivial ; Is this timing-critical??
      0  f675					      sleep	3
      1  f675				   .CYCLES    SET	3
      2  f675
      3  f675				  -	      IF	.CYCLES < 2
      4  f675				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f675				  -	      ERR
      6  f675					      ENDIF
      7  f675
      8  f675					      IF	.CYCLES & 1
      9  f675					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f675		       04 00		      nop	0
     11  f677				  -	      ELSE
     12  f677				  -	      bit	VSYNC
     13  f677					      ENDIF
     14  f677				   .CYCLES    SET	.CYCLES - 3
     15  f677					      ENDIF
     16  f677
     17  f677				  -	      REPEAT	.CYCLES / 2
     18  f677				  -	      nop
     19  f677					      REPEND
    949  f677
    950  f677							; TODO bonus VDEL sprite
    951  f677				   .gem_04
    952  f677		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    953  f679
    954  f679							; middle triplet; first kernel 1???
    955  f679		       85 11		      sta	EMERALD_SP_RESET	; trivial
    956  f67b				   .gem_09
    957  f67b		       84 1c		      .byte.b	GEM_09, EMERALD_SP
    958  f67d
    959  f67d							; TODO PF1 load
      0  f67d					      sleep	3
      1  f67d				   .CYCLES    SET	3
      2  f67d
      3  f67d				  -	      IF	.CYCLES < 2
      4  f67d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f67d				  -	      ERR
      6  f67d					      ENDIF
      7  f67d
      8  f67d					      IF	.CYCLES & 1
      9  f67d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f67d		       04 00		      nop	0
     11  f67f				  -	      ELSE
     12  f67f				  -	      bit	VSYNC
     13  f67f					      ENDIF
     14  f67f				   .CYCLES    SET	.CYCLES - 3
     15  f67f					      ENDIF
     16  f67f
     17  f67f				  -	      REPEAT	.CYCLES / 2
     18  f67f				  -	      nop
     19  f67f					      REPEND
    961  f67f
    962  f67f							; end triplet; second kernel 1???
    963  f67f				   .gem_13
    964  f67f		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    965  f681
    966  f681							; reset
    967  f681		       85 11		      sta	EMERALD_SP_RESET	; trivial
    968  f683				   .gem_17
    969  f683
    970  f683							; spare; missle writes
    971  f683							; 49c
    972  f683		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE	; could htis ever possibly be
    973  f685							; moved out of the kernel, and if so, huge wins
    974  f685							; (makes next sprite a freebie too, then just dealing with 3)
    975  f685							; unique sprite values!!
    976  f685							; or at least the write of the particular OPCODE out of hte krernel ?
    977  f685							; even extreme measures...! PHP with Z register!!! muahaha
    978  f685							; dunno how to deal with the opcode length change though?
    979  f685
    980  f685							; middle triplet; third kernel 1???
    981  f685				   .gem_18
    982  f685		       84 1c		      .byte.b	GEM_18, EMERALD_SP
    983  f687
    984  f687							; end triplet; free
      0  f687					      sleep	3
      1  f687				   .CYCLES    SET	3
      2  f687
      3  f687				  -	      IF	.CYCLES < 2
      4  f687				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f687				  -	      ERR
      6  f687					      ENDIF
      7  f687
      8  f687					      IF	.CYCLES & 1
      9  f687					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f687		       04 00		      nop	0
     11  f689				  -	      ELSE
     12  f689				  -	      bit	VSYNC
     13  f689					      ENDIF
     14  f689				   .CYCLES    SET	.CYCLES - 3
     15  f689					      ENDIF
     16  f689
     17  f689				  -	      REPEAT	.CYCLES / 2
     18  f689				  -	      nop
     19  f689					      REPEND
    986  f689				   .gem_22
    987  f689		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    988  f68b							; Critical End: 64c (cycle follows start of right border)
    989  f68b
      0  f68b					      sleep	9
      1  f68b				   .CYCLES    SET	9
      2  f68b
      3  f68b				  -	      IF	.CYCLES < 2
      4  f68b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f68b				  -	      ERR
      6  f68b					      ENDIF
      7  f68b
      8  f68b					      IF	.CYCLES & 1
      9  f68b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f68b		       04 00		      nop	0
     11  f68d				  -	      ELSE
     12  f68d				  -	      bit	VSYNC
     13  f68d					      ENDIF
     14  f68d				   .CYCLES    SET	.CYCLES - 3
     15  f68d					      ENDIF
     16  f68d
     17  f68d					      REPEAT	.CYCLES / 2
     18  f68d		       ea		      nop
     17  f68d					      REPEND
     18  f68e		       ea		      nop
     17  f68e					      REPEND
     18  f68f		       ea		      nop
     19  f690					      REPEND
    991  f690		       60		      rts
    992  f691				   kernel_1_end
    993  f691
    994  f691		       10 0c	   GEM_00_W   equ	[$1000 + .gem_00 - kernel_1_start]
    995  f691		       10 14	   GEM_04_W   equ	[$1000 + .gem_04 - kernel_1_start]
    996  f691		       10 18	   GEM_09_W   equ	[$1000 + .gem_09 - kernel_1_start]
    997  f691		       10 1c	   GEM_13_W   equ	[$1000 + .gem_13 - kernel_1_start]
    998  f691		       10 20	   GEM_17_W   equ	[$1000 + .gem_17 - kernel_1_start]
    999  f691		       10 22	   GEM_18_W   equ	[$1000 + .gem_18 - kernel_1_start]
   1000  f691		       10 26	   GEM_22_W   equ	[$1000 + .gem_22 - kernel_1_start]
   1001  f691
   1002  f691							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1003  f691
   1004  f691							; KERNEL 2
   1005  f691
   1006  f691							; Emerald line macro (3, 4, ...)
   1007  f691
   1008  f691				   kernel_2_start
   1009  f691							; don't sleep first to make this distinct from kernel 1
   1010  f691		       68		      pla
   1011  f692		       85 1b		      sta	GRP0
      0  f694					      sleep	4
      1  f694				   .CYCLES    SET	4
      2  f694
      3  f694				  -	      IF	.CYCLES < 2
      4  f694				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f694				  -	      ERR
      6  f694					      ENDIF
      7  f694
      8  f694				  -	      IF	.CYCLES & 1
      9  f694				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f694				  -	      nop	0
     11  f694				  -	      ELSE
     12  f694				  -	      bit	VSYNC
     13  f694				  -	      ENDIF
     14  f694				  -.CYCLES    SET	.CYCLES - 3
     15  f694					      ENDIF
     16  f694
     17  f694					      REPEAT	.CYCLES / 2
     18  f694		       ea		      nop
     17  f694					      REPEND
     18  f695		       ea		      nop
     19  f696					      REPEND
   1013  f696
   1014  f696							; Enable missile (using excessive lda instructions)
   1015  f696		       a9 02		      lda	#02
   1016  f698		       a2 0c		      ldx	#T2
   1017  f69a		       a0 cc		      ldy	#T3
   1018  f69c				   .gem_08
   1019  f69c		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE	; movable
   1020  f69e		       a9 c0		      lda	#T1	; movable?
   1021  f6a0				   .gem_02
   1022  f6a0							; load the first sprite
   1023  f6a0		       84 1c		      .byte.b	GEM_02, EMERALD_SP	; movable
   1024  f6a2
   1025  f6a2							; TODO preload the second sprite and
   1026  f6a2							; have that write GEM_06
   1027  f6a2
   1028  f6a2							; Critical: 25c (start of precise timing)
   1029  f6a2		       85 11		      sta	EMERALD_SP_RESET	; trivial
   1030  f6a4
   1031  f6a4							; already set middle triplet
   1032  f6a4							;ldx #%00010010
   1033  f6a4							;stx.w NUSIZ1
      0  f6a4					      sleep	6
      1  f6a4				   .CYCLES    SET	6
      2  f6a4
      3  f6a4				  -	      IF	.CYCLES < 2
      4  f6a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6a4				  -	      ERR
      6  f6a4					      ENDIF
      7  f6a4
      8  f6a4				  -	      IF	.CYCLES & 1
      9  f6a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6a4				  -	      nop	0
     11  f6a4				  -	      ELSE
     12  f6a4				  -	      bit	VSYNC
     13  f6a4				  -	      ENDIF
     14  f6a4				  -.CYCLES    SET	.CYCLES - 3
     15  f6a4					      ENDIF
     16  f6a4
     17  f6a4					      REPEAT	.CYCLES / 2
     18  f6a4		       ea		      nop
     17  f6a4					      REPEND
     18  f6a5		       ea		      nop
     17  f6a5					      REPEND
     18  f6a6		       ea		      nop
     19  f6a7					      REPEND
   1035  f6a7
   1036  f6a7							; end triplet; bonus VDEL write
   1037  f6a7				   .gem_06
   1038  f6a7		       84 1c		      .byte.b	GEM_06, EMERALD_SP
   1039  f6a9
   1040  f6a9							; middle triplet; write or change nusiz
   1041  f6a9		       85 11		      sta	EMERALD_SP_RESET	; trivial
   1042  f6ab				   .gem_11
   1043  f6ab		       84 1c		      .byte.b	GEM_11, EMERALD_SP
   1044  f6ad
   1045  f6ad							; disable missle
   1046  f6ad							;stx EMERALD_MI_ENABLE
      0  f6ad					      sleep	3
      1  f6ad				   .CYCLES    SET	3
      2  f6ad
      3  f6ad				  -	      IF	.CYCLES < 2
      4  f6ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6ad				  -	      ERR
      6  f6ad					      ENDIF
      7  f6ad
      8  f6ad					      IF	.CYCLES & 1
      9  f6ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6ad		       04 00		      nop	0
     11  f6af				  -	      ELSE
     12  f6af				  -	      bit	VSYNC
     13  f6af					      ENDIF
     14  f6af				   .CYCLES    SET	.CYCLES - 3
     15  f6af					      ENDIF
     16  f6af
     17  f6af				  -	      REPEAT	.CYCLES / 2
     18  f6af				  -	      nop
     19  f6af					      REPEND
   1048  f6af							; ^ could this be moved, and then free the timing slot
   1049  f6af							; then can do the setting of PF1 value(!)
   1050  f6af
   1051  f6af							; end triplet; write or reset
   1052  f6af				   .gem_15
   1053  f6af		       84 1c		      .byte.b	GEM_15, EMERALD_SP
   1054  f6b1							; 49c midway
   1055  f6b1		       85 11		      sta	EMERALD_SP_RESET	; spare
   1056  f6b3							; PF2
   1057  f6b3
   1058  f6b3							; middle triplet; write or change nusiz
   1059  f6b3				   .gem_20
   1060  f6b3		       84 1c		      .byte.b	GEM_20, EMERALD_SP
      0  f6b5					      sleep	3	; spare
      1  f6b5				   .CYCLES    SET	3
      2  f6b5
      3  f6b5				  -	      IF	.CYCLES < 2
      4  f6b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6b5				  -	      ERR
      6  f6b5					      ENDIF
      7  f6b5
      8  f6b5					      IF	.CYCLES & 1
      9  f6b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6b5		       04 00		      nop	0
     11  f6b7				  -	      ELSE
     12  f6b7				  -	      bit	VSYNC
     13  f6b7					      ENDIF
     14  f6b7				   .CYCLES    SET	.CYCLES - 3
     15  f6b7					      ENDIF
     16  f6b7
     17  f6b7				  -	      REPEAT	.CYCLES / 2
     18  f6b7				  -	      nop
     19  f6b7					      REPEND
   1062  f6b7
   1063  f6b7							; end triplet; free
   1064  f6b7				   .gem_24
   1065  f6b7		       84 1c		      .byte.b	GEM_24, EMERALD_SP
   1066  f6b9							; Critical End: 61c (just before gem 24 render)
   1067  f6b9
   1068  f6b9							; ldx #%0001001
   1069  f6b9							; stx.w NUSIZ1
      0  f6b9					      sleep	9
      1  f6b9				   .CYCLES    SET	9
      2  f6b9
      3  f6b9				  -	      IF	.CYCLES < 2
      4  f6b9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6b9				  -	      ERR
      6  f6b9					      ENDIF
      7  f6b9
      8  f6b9					      IF	.CYCLES & 1
      9  f6b9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6b9		       04 00		      nop	0
     11  f6bb				  -	      ELSE
     12  f6bb				  -	      bit	VSYNC
     13  f6bb					      ENDIF
     14  f6bb				   .CYCLES    SET	.CYCLES - 3
     15  f6bb					      ENDIF
     16  f6bb
     17  f6bb					      REPEAT	.CYCLES / 2
     18  f6bb		       ea		      nop
     17  f6bb					      REPEND
     18  f6bc		       ea		      nop
     17  f6bc					      REPEND
     18  f6bd		       ea		      nop
     19  f6be					      REPEND
   1071  f6be		       60		      rts
   1072  f6bf				   kernel_2_end
   1073  f6bf
   1074  f6bf		       10 0f	   GEM_02_W   equ	[$1000 + .gem_02 - kernel_2_start]
   1075  f6bf		       10 16	   GEM_06_W   equ	[$1000 + .gem_06 - kernel_2_start]
   1076  f6bf		       10 0b	   GEM_08_W   equ	[$1000 + .gem_08 - kernel_2_start]
   1077  f6bf		       10 1a	   GEM_11_W   equ	[$1000 + .gem_11 - kernel_2_start]
   1078  f6bf		       10 1e	   GEM_15_W   equ	[$1000 + .gem_15 - kernel_2_start]
   1079  f6bf		       10 22	   GEM_20_W   equ	[$1000 + .gem_20 - kernel_2_start]
   1080  f6bf		       10 26	   GEM_24_W   equ	[$1000 + .gem_24 - kernel_2_start]
   1081  f6bf
   1082  f6bf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1083  f6bf
   1084  f6bf							; SUBROUTINE
   1085  f6bf							; Read joystick movement and apply to object 0
   1086  f6bf				   MoveJoystick
   1087  f6bf							; Move vertically
   1088  f6bf							; (up and down are actually reversed since ypos starts at bottom)
   1089  f6bf							;     ldx YPos
   1090  f6bf		       a9 10		      lda	#%00010000	;Up?
   1091  f6c1		       2c 80 02 	      bit	SWCHA
   1092  f6c4		       d0 0d		      bne	SkipMoveUp
   1093  f6c6
   1094  f6c6		       18		      clc
   1095  f6c7		       a5 88		      lda	Speed2
   1096  f6c9		       69 0c		      adc	#12
   1097  f6cb		       85 88		      sta	Speed2
   1098  f6cd		       a5 87		      lda	Speed1
   1099  f6cf		       69 00		      adc	#00
   1100  f6d1		       85 87		      sta	Speed1
   1101  f6d3
   1102  f6d3				   SkipMoveUp
   1103  f6d3		       a6 86		      ldx	XPos
   1104  f6d5
   1105  f6d5							; Only check left/right on odd frames;
   1106  f6d5							; TODO make this just a fractional speed
   1107  f6d5							; rather than dropping frames
   1108  f6d5		       a9 01		      lda	#01
   1109  f6d7		       25 83		      and	FrameCount
   1110  f6d9		       d0 18		      bne	SkipMoveRight
   1111  f6db
   1112  f6db
   1113  f6db							; Move horizontally
   1114  f6db		       a9 40		      lda	#%01000000	;Left?
   1115  f6dd		       2c 80 02 	      bit	SWCHA
   1116  f6e0		       d0 05		      bne	SkipMoveLeft
   1117  f6e2		       e0 1d		      cpx	#29
   1118  f6e4		       90 01		      bcc	SkipMoveLeft
   1119  f6e6		       ca		      dex
   1120  f6e7
   1121  f6e7							; Reflect
   1122  f6e7							;     lda #$ff
   1123  f6e7							;     sta REFP0
   1124  f6e7				   SkipMoveLeft
   1125  f6e7		       a9 80		      lda	#%10000000	;Right?
   1126  f6e9		       2c 80 02 	      bit	SWCHA
   1127  f6ec		       d0 05		      bne	SkipMoveRight
   1128  f6ee		       e0 80		      cpx	#128
   1129  f6f0		       b0 01		      bcs	SkipMoveRight
   1130  f6f2		       e8		      inx
   1131  f6f3
   1132  f6f3							; Reflect
   1133  f6f3							;     lda #$0
   1134  f6f3							;     sta REFP0
   1135  f6f3				   SkipMoveRight
   1136  f6f3		       86 86		      stx	XPos
   1137  f6f5		       60		      rts
   1138  f6f6
   1139  f6f6
   1140  f6f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1141  f6f6
   1142  f6f6
   1143  f6f6				   SpeedCalculation
   1144  f6f6		       38		      sec
   1145  f6f7		       a5 88		      lda	Speed2
   1146  f6f9		       e9 07		      sbc	#7
   1147  f6fb		       85 88		      sta	Speed2
   1148  f6fd		       a5 87		      lda	Speed1
   1149  f6ff		       e9 00		      sbc	#0
   1150  f701		       85 87		      sta	Speed1
   1151  f703
   1152  f703		       18		      clc
   1153  f704		       a5 8a		      lda	YPos2
   1154  f706		       65 88		      adc	Speed2
   1155  f708		       85 8a		      sta	YPos2
   1156  f70a		       a5 89		      lda	YPos
   1157  f70c		       65 87		      adc	Speed1
   1158  f70e		       85 89		      sta	YPos
   1159  f710
   1160  f710		       c9 43		      cmp	#FLOOR_OFFSET
   1161  f712		       b0 0a		      bcs	NewThing2
   1162  f714
   1163  f714							; Reset to floor
   1164  f714		       a9 43		      lda	#FLOOR_OFFSET
   1165  f716		       85 89		      sta	YPos
   1166  f718		       a9 00		      lda	#0
   1167  f71a		       85 87		      sta	Speed1
   1168  f71c		       85 88		      sta	Speed2
   1169  f71e				   NewThing2
   1170  f71e
   1171  f71e		       c9 bf		      cmp	#CEILING_OFFSET
   1172  f720		       90 0a		      bcc	.next
   1173  f722
   1174  f722							; Reset to ceiling
   1175  f722		       a9 bf		      lda	#CEILING_OFFSET
   1176  f724		       85 89		      sta	YPos
   1177  f726		       a9 00		      lda	#0
   1178  f728		       85 87		      sta	Speed1
   1179  f72a		       85 88		      sta	Speed2
   1180  f72c				   .next
   1181  f72c
   1182  f72c		       60		      rts
   1183  f72d
   1184  f72d
   1185  f72d
   1186  f72d							; Subroutine
   1187  f72d				   SetHorizPos
   1188  f72d		       85 02		      sta	WSYNC	; start a new line
   1189  f72f		       24 00		      bit	0	; waste 3 cycles
   1190  f731		       38		      sec		; set carry flag
   1191  f732				   DivideLoop
   1192  f732		       e9 0f		      sbc	#15	; subtract 15
   1193  f734		       b0 fc		      bcs	DivideLoop	; branch until negative
   1194  f736		       49 07		      eor	#7	; calculate fine offset
   1195  f738		       0a		      asl
   1196  f739		       0a		      asl
   1197  f73a		       0a		      asl
   1198  f73b		       0a		      asl
   1199  f73c		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
   1200  f73e		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
   1201  f740		       60		      rts		; return to caller
   1202  f741
   1203  f741
   1204  f741
   1205  f800		       00 00 00 00*	      align	256
   1206  f800
   1207  f800							; Bitmap data for character "standing" position
   1208  f800							; Comical amount of 0's for now to simplify sprite rendering
   1209  f800
   1210  f800							; Y can be from:
   1211  f800							;     SPRITE_HEIGHT to (8*ROW_COUNT)
   1212  f800							; SpriteEnd: 8..128
   1213  f800							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
   1214  f800				   Frame0
   1215  f800		       00		      .byte.b	#%00000000
   1216  f801		       60		      .byte.b	#%01100000
   1217  f802		       60		      .byte.b	#%01100000
   1218  f803		       60		      .byte.b	#%01100000
   1219  f804		       c0		      .byte.b	#%11000000
   1220  f805		       c0		      .byte.b	#%11000000
   1221  f806		       f0		      .byte.b	#%11110000
   1222  f807		       c0		      .byte.b	#%11000000
   1223  f808		       c0		      .byte.b	#%11000000
   1224  f809		       00		      .byte.b	#%00000000
   1225  f80a
   1226  f80a
   1227  f80a							; Epilogue
   1228  fffc					      org	$fffc
   1229  fffc		       00 f2		      .word.w	Start
   1230  fffe		       00 f2		      .word.w	Start
