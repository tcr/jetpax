------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	CompileFlags
      2 U0000 ????
      3 U0000 ????	       00 01	   ONLY_KERNEL_A =	1
      4 U0000 ????						; ONLY_KERNEL_B = 1
      5 U0000 ????
      6 U0000 ????
      7 U0000 ????				      seg.u	Defines
      8 U0000 ????
      9 U0000 ????	       00 10	   ROW_COUNT  =	16
     10 U0000 ????	       00 02	   SIGNAL_LINE =	$02
     11 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
     12 U0000 ????
     13 U0000 ????						; RAM+ memory map
     14 U0000 ????
     15 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     16 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     17 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ_ID =	CBSRAM_KERNEL_READ
     18 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     19 U0000 ????
     20 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     21 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     22 U0000 ????
     23 U0000 ????
     24 U0000 ????						; NUSIZ values
     25 U0000 ????
     26 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     27 U0000 ????
     28 U0000 ????
     29 U0000 ????						; Colors
     30 U0000 ????
     31 U0000 ????	       00 42	   COL_BG     =	$42
     32 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     33 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     34 U0000 ????
     35 U0000 ????
     36 U0000 ????						; HMOVE values for missiles
     37 U0000 ????
     38 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     39 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     40 U0000 ????
     41 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     42 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     43 U0000 ????
     44 U0000 ????						; Missile values when 2A=RST
     45 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     46 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     47 U0000 ????
     48 U0000 ????
     49 U0000 ????						; Sprite details
     50 U0000 ????
     51 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     52 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     53 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     54 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     55 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     56 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     57 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     58 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     59 U0000 ????
     60 U0000 ????	       00 1b	   JET_SP     =	GRP0
     61 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     62 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     63 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     64 U0000 ????
     65 U0000 ????
     66 U0000 ????						; Game dimensionsn
     67 U0000 ????
     68 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     69 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     70 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     71 U0000 ????
     72 U0000 ????						; Compared with YPos
     73 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     74 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     75 U0000 ????
     76 U0000 ????						; Starting player position
     77 U0000 ????	       00 48	   YPosStart  =	72
     78 U0000 ????	       00 58	   XPosStart  =	88
     79 U0000 ????
     80 U0000 ????						; Top left corner
     81 U0000 ????						; YPosStart equ 190
     82 U0000 ????						; XPosStart equ 28
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00f9 ????				      seg.u	Variables
      2 U00f9 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00 00 00 00*coolest_level ds	$3f
      8 U00c0
      9 U00c0		       00	   Temp       byte.b
     10 U00c1		       00	   Temp2      byte.b
     11 U00c2
     12 U00c2							; Counters
     13 U00c2		       00	   LoopCount  byte.b
     14 U00c3		       00	   FrameCount byte.b
     15 U00c4
     16 U00c4		       00	   SpriteEnd  byte.b
     17 U00c5		       00	   XPos       byte.b		; X position of player sprite
     18 U00c6
     19 U00c6
     20 U00c6		       00	   Speed1     byte.b
     21 U00c7		       00	   Speed2     byte.b
     22 U00c8
     23 U00c8		       00	   YPos       byte.b		; Y position of player sprite
     24 U00c9		       00	   YPos2      byte.b
     25 U00ca
     26 U00ca		       00	   ROW_DEMO_INDEX byte.b
     27 U00cb
     28 U00cb		       00	   RamNibbleTemp byte.b
     29 U00cc		       00	   RamNibbleVar1 byte.b
     30 U00cd		       00	   RamNibbleVar2 byte.b
     31 U00ce		       00	   RamZeroByte byte.b
     32 U00cf		       00	   RamLowerSixByte byte.b
     33 U00d0		       00	   RamFFByte  byte.b
     34 U00d1		       00	   RamStackBkp byte.b
     35 U00d2
     36 U00d2		       00	   RamRowJetpackIndex byte.b		; sprite counter
     37 U00d3
     38 U00d3							; Kernel support
     39 U00d3		       00	   RamPSByte  byte.b
     40 U00d4		       00	   RamPF1Value byte.b
     41 U00d5		       00	   RamKernelGRP0 byte.b		; temp
     42 U00d6		       00	   RamKernelPhpTarget byte.b
     43 U00d7		       00	   RamKernelGrp0 byte.b
     44 U00d8
     45 U00d8		       00	   RamKernelGemini1 byte.b
     46 U00d9		       00	   RamKernelGemini1Reg byte.b
     47 U00da		       00	   RamKernelGemini2 byte.b
     48 U00db		       00	   RamKernelGemini2Reg byte.b
     49 U00dc		       00	   RamKernelGemini3 byte.b
     50 U00dd		       00	   RamKernelGemini3Reg byte.b
     51 U00de		       00	   RamKernelGemini4 byte.b
     52 U00df		       00	   RamKernelGemini4Reg byte.b
     53 U00e0		       00	   RamKernelGemini5 byte.b
     54 U00e1
     55 U00e1		       00	   BuildKernelX byte.b
     56 U00e2		       00	   BuildKernelY byte.b
     57 U00e3		       00	   BuildKernelRST byte.b
     58 U00e4		       00	   BuildKernelGrp0 byte.b
     59 U00e5		       00	   BuildKernelVdel1 byte.b
     60 U00e6		       00	   BuildKernelMissile byte.b
     61 U00e7
     62 U00e7		       00	   level_for_game byte.b
     63 U00e8		       00		      byte.b
     64 U00e9		       00		      byte.b
     65 U00ea		       00		      byte.b
     66 U00eb
     67 U00eb		       00	   DO_MISS_A  byte.b
     68 U00ec		       00	   DO_MISS_B  byte.b
     69 U00ed		       00	   DO_GEMS_A  byte.b
     70 U00ee		       00		      byte.b
     71 U00ef		       00		      byte.b
     72 U00f0		       00		      byte.b
     73 U00f1		       00		      byte.b
     74 U00f2		       00		      byte.b
     75 U00f3		       00	   DO_GEMS_B  byte.b
     76 U00f4		       00		      byte.b
     77 U00f5		       00		      byte.b
     78 U00f6		       00		      byte.b
     79 U00f7		       00		      byte.b
     80 U00f8		       00		      byte.b
------- FILE main.s
     64 U00f9
     65 U00f9							; Bank 1
     66  e000 ????				      seg	CodeBank1
     67  d000					      org	$D000
     68  d000					      rorg	$F000
     69  d000		       00	   BANK1      byte.b
     70  d200					      org	$d200
     71  d200					      rorg	$d200
     72  d200				   Bank1Start
     73  d200		       ad fa ff 	      lda	$fffa
     74  d203		       ea		      nop
     75  d204		       ea		      nop
     76  d205		       ea		      nop
     77  d206
     78  dffc					      org	$dffc
     79  dffc					      rorg	$fffc
     80  dffc		       00 d2		      .word.w	Bank1Start
     81  dffe		       00 d2		      .word.w	Bank1Start
     82  e000
     83  e000							; Bank 2
     84  f000 ????				      seg	CodeBank2
     85  e000					      org	$E000
     86  e000					      rorg	$F000
     87  e000		       00	   BANK2      byte.b
     88  e200					      org	$e200
     89  e200					      rorg	$f200
     90  e200				   Bank2Start
     91  e200		       ad fa ff 	      lda	$fffa
     92  e203		       ea		      nop
     93  e204		       ea		      nop
     94  e205		       ea		      nop
     95  e206
     96  effc					      org	$effc
     97  effc					      rorg	$fffc
     98  effc		       00 f2		      .word.w	Bank2Start
     99  effe		       00 f2		      .word.w	Bank2Start
    100  f000
    101  f000							; Bank 3
    102  10000 ????				       seg	CodeBank3
    103  f000					      org	$F000
    104  f000					      rorg	$F000
    105  f000		       00	   BANK3      byte.b
    106  f200					      org	$f200
    107  f200					      rorg	$f200
    108  f200				   Bank3Start
    109  f200		       ad fa ff 	      lda	$fffa
    110  f203		       ea		      nop
    111  f204		       ea		      nop
    112  f205		       ea		      nop
    113  f206		       4c 09 f2 	      jmp	Start
    114  f209
    115  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 c3		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 c8		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 c5		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 c6		      sta	Speed1
     48  f243		       85 c7		      sta	Speed2
     49  f245		       85 c9		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 ca		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 ce		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 cf		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 d0		      sta	RamFFByte
     61  f257
     62  f257							; Setup level.
     63  f257		       20 da fa 	      jsr	game_state_setup
     64  f25a
     65  f25a							; Start with vertical sync (to reset frame)
     66  f25a		       4c 00 f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f25d					      include	"kernel_loader.s"
      1  f25d							; Copies the gem kernels to RAM
      2  f25d
      3  f25d							; Copy Kernel A to CBSRAM
      4  f25d				   LoadKernelA subroutine
      5  f25d		       a0 37		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f25f				   .loop
      7  f25f		       b9 00 fd 	      lda	kernel_1_start,Y
      8  f262		       99 00 10 	      sta	$1000,Y
      9  f265		       88		      dey
     10  f266		       d0 f7		      bne	.loop
     11  f268		       ad 00 fd 	      lda	kernel_1_start
     12  f26b		       8d 00 10 	      sta	$1000
     13  f26e		       60		      rts
     14  f26f
     15  f26f							; Copy Kernel B to CBSRAM
     16  f26f				   LoadKernelB subroutine
     17  f26f		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f271				   .loop
     19  f271		       b9 38 fd 	      lda	kernel_2_start,Y
     20  f274		       99 00 10 	      sta	$1000,Y
     21  f277		       88		      dey
     22  f278		       d0 f7		      bne	.loop
     23  f27a		       ad 38 fd 	      lda	kernel_2_start
     24  f27d		       8d 00 10 	      sta	$1000
     25  f280		       60		      rts
------- FILE main.s
------- FILE nibble_build.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_build.s"
      1  f281					      MAC	nibble_gem_kernel_a_1_build
      2  f281					      lda	#0
      3  f281					      ldx	#SENTINEL
      4  f281					      stx	BuildKernelX
      5  f281					      stx	BuildKernelY
      6  f281					      stx	BuildKernelRST
      7  f281							; Gemini 1A
      8  f281				   .K_1A
      9  f281					      ldy	[DO_GEMS_A + 0]
     10  f281					      jsr	KernelA_GenReset
     11  f281				   .if_1
     12  f281					      bne	.else_1
     13  f281					      sec
     14  f281					      rol
     15  f281							; Special: Encoding RST0
     16  f281							; Rewrite lda RamKernelPF1 to be #immediate
     17  f281					      ldy	#BC_LDA_IMM
     18  f281					      sty	[KernelA_B - $100]
     19  f281					      ldy	#%10100000
     20  f281					      sty	[KernelA_B - $100 + 1]
     21  f281							; Store 1A in GRP0
     22  f281					      ldy	[DO_GEMS_A + 1]
     23  f281					      sty	BuildKernelGrp0
     24  f281					      sty	RamKernelGrp0
     25  f281							; Gemini 1A is RESPx
     26  f281					      ldy	#EMERALD_SP_RESET
     27  f281					      sty	[KernelA_C - $100 + 1]
     28  f281							; Turn 3-cycle NOP into 4-cycle
     29  f281					      ldy	#$14
     30  f281					      sty	[KernelA_D - $100]
     31  f281					      rol
     32  f281
     33  f281					      jmp	.endif_1
     34  f281							; [BIT DEPTH] #1 If-End @ 1
     35  f281				   .else_1
     36  f281					      clc
     37  f281					      rol
     38  f281							; Store 0A in GRP0
     39  f281					      ldy	[DO_GEMS_A + 0]
     40  f281					      sty	BuildKernelGrp0
     41  f281					      sty	RamKernelGrp0
     42  f281					      ldy	[DO_GEMS_A + 1]
     43  f281					      jsr	KernelA_GenReset
     44  f281				   .if_2
     45  f281					      bne	.else_2
     46  f281					      sec
     47  f281					      rol
     48  f281							; GEM1ASWITCH
     49  f281
     50  f281					      jmp	.endif_2
     51  f281							; [BIT DEPTH] #2 If-End @ 2
     52  f281				   .else_2
     53  f281					      clc
     54  f281					      rol
     55  f281							; Calculate the 1A value
     56  f281					      ldy	SHARD_LUT_RF1
     57  f281					      cpy	#1
     58  f281					      .byte	$D0, #3
     59  f281					      ldy	#RESP1
     60  f281					      .byte	$2C
     61  f281					      ldy	#GRP1
     62  f281					      sty	RamKernelGemini1Reg
     63  f281							; Set opcode
     64  f281					      ldx	SHARD_LUT_RF1
     65  f281					      cpx	#1
     66  f281					      ldy	#BC_STX
     67  f281					      .byte	$F0, #5
     68  f281					      ldy	[DO_GEMS_A + 1]
     69  f281					      jsr	KernelA_UpdateRegs
     70  f281					      sty	RamKernelGemini1
     71  f281							; [BIT DEPTH] #2 *If-End @ 2
     72  f281							; [BIT DEPTH] #2 Else-End @ 2
     73  f281				   .endif_2
     74  f281							; [BIT DEPTH] #1 *If-End @ 1
     75  f281							; [BIT DEPTH] #2 Else-End @ 2
     76  f281				   .endif_1
     77  f281							; Stop preserving GRP0
     78  f281					      ldy	#SENTINEL
     79  f281					      sty	RamKernelGrp0
     80  f281							; BuildKernelX, BuildKernelY are upgraded if not set
     81  f281							; Gemini 2A
     82  f281				   .K_2A
     83  f281					      ldy	[DO_GEMS_A + 2]
     84  f281					      jsr	KernelA_GenReset
     85  f281				   .if_3
     86  f281					      bne	.else_3
     87  f281					      sec
     88  f281					      rol
     89  f281
     90  f281					      jmp	.endif_3
     91  f281							; [BIT DEPTH] #3 If-End @ 3
     92  f281				   .else_3
     93  f281					      clc
     94  f281					      rol
     95  f281							; Set opcode
     96  f281					      ldy	[DO_GEMS_A + 2]
     97  f281					      jsr	KernelA_UpdateRegs
     98  f281					      sty	RamKernelGemini2
     99  f281							; Set opcode target
    100  f281					      ldy	SHARD_LUT_RF1
    101  f281					      cpy	#2
    102  f281					      .byte	$D0, #3
    103  f281					      ldy	#RESP1
    104  f281					      .byte	$2C
    105  f281					      ldy	#GRP1
    106  f281					      sty	RamKernelGemini2Reg
    107  f281							; [BIT DEPTH] #3 *If-End @ 3
    108  f281							; [BIT DEPTH] #3 Else-End @ 3
    109  f281				   .endif_3
    110  f281							; Gemini 3A
    111  f281				   .K_3A
    112  f281					      ldy	[DO_GEMS_A + 3]
    113  f281					      jsr	KernelA_GenReset
    114  f281				   .if_4
    115  f281					      bne	.else_4
    116  f281					      sec
    117  f281					      rol
    118  f281
    119  f281					      jmp	.endif_4
    120  f281							; [BIT DEPTH] #4 If-End @ 4
    121  f281				   .else_4
    122  f281					      clc
    123  f281					      rol
    124  f281							; Set opcode
    125  f281					      ldy	[DO_GEMS_A + 3]
    126  f281					      jsr	KernelA_UpdateRegs
    127  f281					      sty	RamKernelGemini3
    128  f281							; Set opcode target
    129  f281					      ldy	SHARD_LUT_RF1
    130  f281					      cpy	#3
    131  f281					      .byte	$D0, #3
    132  f281					      ldy	#RESP1
    133  f281					      .byte	$2C
    134  f281					      ldy	#GRP1
    135  f281					      sty	RamKernelGemini3Reg
    136  f281							; [BIT DEPTH] #4 *If-End @ 4
    137  f281							; [BIT DEPTH] #4 Else-End @ 4
    138  f281				   .endif_4
    139  f281							; [BIT DEPTH] Final: 4 (out of 8 bits)
    140  f281					      rol
    141  f281					      rol
    142  f281					      rol
    143  f281					      rol
    144  f281					      ENDM
    145  f281
    146  f281
    147  f281
    148  f281
    149  f281					      MAC	nibble_gem_kernel_a_2_build
    150  f281					      lda	#0
    151  f281							; RAM:
    152  f281							; RamKernelX
    153  f281							; RamKernelY
    154  f281							; RamPSByte
    155  f281							; BuildKernelVdel1
    156  f281							; RamKernelGrp0
    157  f281							; RamKernelGemini1
    158  f281							; RamKernelGemini1Reg
    159  f281							; RamKernelGemini2
    160  f281							; RamKernelGemini2Reg
    161  f281							; RamKernelGemini3
    162  f281							; RamKernelGemini3Reg
    163  f281							; RamKernelGemini4
    164  f281							; VD1 default
    165  f281					      ldx	[DO_GEMS_A + 1]
    166  f281					      stx	BuildKernelVdel1
    167  f281							; Gemini 4A
    168  f281					      ldx	SHARD_LUT_VD1
    169  f281					      cpx	#4
    170  f281				   .if_1
    171  f281					      beq	.else_1
    172  f281					      sec
    173  f281					      rol
    174  f281							; Set PHP
    175  f281					      ldx	#VDELP1
    176  f281					      stx	RamKernelPhpTarget
    177  f281							; Update VDEL1
    178  f281					      ldx	[DO_GEMS_A + 4]
    179  f281					      stx	BuildKernelVdel1
    180  f281
    181  f281					      jmp	.endif_1
    182  f281							; [BIT DEPTH] #1 If-End @ 1
    183  f281				   .else_1
    184  f281					      clc
    185  f281					      rol
    186  f281					      ldy	[DO_GEMS_A + 4]
    187  f281					      jsr	KernelA_UpdateRegs
    188  f281					      sty	RamKernelGemini4
    189  f281							; Set PHP
    190  f281					      ldx	#RESP1
    191  f281					      stx	RamKernelPhpTarget
    192  f281							; [BIT DEPTH] #1 *If-End @ 1
    193  f281							; [BIT DEPTH] #1 Else-End @ 1
    194  f281				   .endif_1
    195  f281							; Gemini 5A
    196  f281							; TODO eventually...?
    197  f281							; Missile
    198  f281					      ldy	DO_MISS_A
    199  f281							; FIXME Why doesn't this branch compile?
    200  f281							; bne .+4
    201  f281							; ldx #BC_NOP
    202  f281							; stx BuildKernelMissile
    203  f281							; VD1
    204  f281							; GRP0
    205  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    206  f281					      rol
    207  f281					      rol
    208  f281					      rol
    209  f281					      rol
    210  f281					      rol
    211  f281					      rol
    212  f281					      rol
    213  f281					      ENDM
    214  f281
    215  f281
    216  f281
    217  f281
    218  f281					      MAC	nibble_gem_kernel_b_1_build
    219  f281					      lda	#0
    220  f281							; RAM:
    221  f281							; RamKernelX
    222  f281							; RamKernelY
    223  f281							; RamPSByte
    224  f281							; RamKernelGrp0
    225  f281							; RamKernelGemini1
    226  f281							; RamKernelGemini2
    227  f281							; RamKernelGemini3
    228  f281							; RamKernelGemini4
    229  f281					      ldx	#SENTINEL
    230  f281					      stx	BuildKernelX
    231  f281					      stx	BuildKernelY
    232  f281					      stx	BuildKernelRST
    233  f281							; Php target default
    234  f281					      ldx	#RESP1
    235  f281					      stx	RamKernelPhpTarget
    236  f281							; Gemini 0B
    237  f281					      ldy	[DO_GEMS_B + 0]
    238  f281					      sty	BuildKernelGrp0
    239  f281					      sty	RamKernelGrp0
    240  f281							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    241  f281							; Gemini 1B
    242  f281					      ldy	[DO_GEMS_B + 1]
    243  f281					      jsr	KernelA_UpdateRegs
    244  f281					      sty	RamKernelGemini1
    245  f281							; Gemini 2B
    246  f281					      ldy	[DO_GEMS_B + 2]
    247  f281					      jsr	KernelB_GenPhp
    248  f281				   .if_1
    249  f281					      bne	.else_1
    250  f281					      sec
    251  f281					      rol
    252  f281					      CALC_REGS_AND_STORE	3, RamKernelGemini3
    253  f281							; Write to PHP in 2B
    254  f281					      ldx	#EMERALD_SP
    255  f281					      stx	RamKernelPhpTarget
    256  f281							; Update Grp0
    257  f281					      ldy	BuildKernelRST
    258  f281					      sty	RamKernelGrp0
    259  f281
    260  f281							; Update 3B
    261  f281					      CALC_REGS_AND_STORE	3, RamKernelGemini3
    262  f281					      rol
    263  f281
    264  f281					      jmp	.endif_1
    265  f281							; [BIT DEPTH] #1 If-End @ 1
    266  f281				   .else_1
    267  f281					      clc
    268  f281					      rol
    269  f281							; Update 2B
    270  f281					      CALC_REGS_AND_STORE	2, RamKernelGemini2
    271  f281							; Gemini 3B
    272  f281					      ldy	[DO_GEMS_B + 3]
    273  f281					      jsr	KernelB_GenPhp
    274  f281				   .if_2
    275  f281					      bne	.else_2
    276  f281					      sec
    277  f281					      rol
    278  f281							; Write to PHP in 3B
    279  f281					      CALC_REGS_AND_STORE	2, RamKernelGemini2
    280  f281					      ldx	#EMERALD_SP
    281  f281					      stx	RamKernelPhpTarget
    282  f281
    283  f281							; Update Grp0
    284  f281					      ldy	BuildKernelRST
    285  f281					      sty	RamKernelGrp0
    286  f281
    287  f281					      jmp	.endif_2
    288  f281							; [BIT DEPTH] #2 If-End @ 2
    289  f281				   .else_2
    290  f281					      clc
    291  f281					      rol
    292  f281							; Update 3B
    293  f281					      CALC_REGS_AND_STORE	3, RamKernelGemini3
    294  f281							; [BIT DEPTH] #2 *If-End @ 2
    295  f281							; [BIT DEPTH] #2 Else-End @ 2
    296  f281				   .endif_2
    297  f281							; [BIT DEPTH] #1 *If-End @ 1
    298  f281							; [BIT DEPTH] #2 Else-End @ 2
    299  f281				   .endif_1
    300  f281							; [BIT DEPTH] Final: 2 (out of 8 bits)
    301  f281					      rol
    302  f281					      rol
    303  f281					      rol
    304  f281					      rol
    305  f281					      rol
    306  f281					      rol
    307  f281					      ENDM
    308  f281
    309  f281
    310  f281
    311  f281
    312  f281					      MAC	nibble_gem_kernel_b_2_build
    313  f281					      lda	#0
    314  f281							; Gemini 1B
    315  f281							; Write out PHP flag comparison
    316  f281					      ldy	BuildKernelRST
    317  f281					      cpy	#G01
    318  f281				   .if_1
    319  f281					      bne	.else_1
    320  f281					      sec
    321  f281					      rol
    322  f281
    323  f281					      jmp	.endif_1
    324  f281							; [BIT DEPTH] #1 If-End @ 1
    325  f281				   .else_1
    326  f281					      clc
    327  f281					      rol
    328  f281							; [BIT DEPTH] #1 *If-End @ 1
    329  f281							; [BIT DEPTH] #1 Else-End @ 1
    330  f281				   .endif_1
    331  f281							; Missile
    332  f281							; ldy DO_MISS_B
    333  f281							; NIBBLE_IF eq
    334  f281							; NIBBLE_WRITE [KernelB_K - $100], #BC_STA
    335  f281							; NIBBLE_ELSE
    336  f281							;     NIBBLE_WRITE [KernelB_K - $100], BuildKernelMissile
    337  f281							; NIBBLE_END_IF
    338  f281							; Gemini 4B
    339  f281					      ldy	[DO_GEMS_B + 4]
    340  f281					      jsr	KernelA_UpdateRegs
    341  f281					      sty	RamKernelGemini4
    342  f281							; TODO if no PHP, rewrite previous section:
    343  f281							; NIBBLE_IF cs
    344  f281							;
    345  f281							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    346  f281							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    347  f281							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    348  f281							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    349  f281							; NIBBLE_END_IF
    350  f281							; Make adjustments for sprites.
    351  f281					      ror	BuildKernelGrp0
    352  f281					      ror	BuildKernelX
    353  f281					      ror	BuildKernelY
    354  f281							;
    355  f281							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    356  f281							; GRP0
    357  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    358  f281					      rol
    359  f281					      rol
    360  f281					      rol
    361  f281					      rol
    362  f281					      rol
    363  f281					      rol
    364  f281					      rol
    365  f281					      ENDM
    366  f281
    367  f281
    368  f281
    369  f281
------- FILE main.s
------- FILE nibble_eval.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_eval.s"
      1  f281					      MAC	nibble_gem_kernel_a_1
      2  f281				   .if_1
      3  f281					      asl
      4  f281					      bcc	.else_1
      5  f281					      rol
      6  f281					      sleep	10
      7  f281					      jmp	.endif_1
      8  f281				   .else_1
      9  f281				   .if_2
     10  f281					      asl
     11  f281					      bcc	.else_2
     12  f281					      ldx	#BC_STX
     13  f281					      stx	[KernelA_D_W + 0]
     14  f281					      ldx	#RESP1
     15  f281					      stx	[KernelA_D_W + 1]
     16  f281
     17  f281					      jmp	.endif_2
     18  f281				   .else_2
     19  f281					      ldx	RamKernelGemini1
     20  f281					      stx	[KernelA_D_W + 0]
     21  f281					      ldx	RamKernelGemini1Reg
     22  f281					      stx	[KernelA_D_W + 1]
     23  f281							; [BIT DEPTH] #2 *If-End @ 2
     24  f281							; [BIT DEPTH] #2 Else-End @ 2
     25  f281					      sleep	2
     26  f281				   .endif_2
     27  f281							; [BIT DEPTH] #1 *If-End @ 1
     28  f281							; [BIT DEPTH] #2 Else-End @ 2
     29  f281				   .endif_1
     30  f281				   .if_3
     31  f281					      asl
     32  f281					      bcc	.else_3
     33  f281					      ldx	#NOP_REG
     34  f281					      stx	[KernelA_E_W + 1 + 0]
     35  f281					      ldx	#RESP1
     36  f281					      stx	[KernelA_G_W + 1 + 0]
     37  f281					      sleep	4
     38  f281					      jmp	.endif_3
     39  f281				   .else_3
     40  f281					      ldx	#RESP1
     41  f281					      stx	[KernelA_E_W + 1 + 0]
     42  f281					      ldx	RamKernelGemini2
     43  f281					      stx	[KernelA_G_W + 0]
     44  f281					      ldx	RamKernelGemini2Reg
     45  f281					      stx	[KernelA_G_W + 1]
     46  f281							; [BIT DEPTH] #3 *If-End @ 3
     47  f281							; [BIT DEPTH] #3 Else-End @ 3
     48  f281				   .endif_3
     49  f281				   .if_4
     50  f281					      asl
     51  f281					      bcc	.else_4
     52  f281					      ldx	#RESP1
     53  f281					      stx	[KernelA_H_W + 1 + 0]
     54  f281					      sleep	4
     55  f281					      jmp	.endif_4
     56  f281				   .else_4
     57  f281					      ldx	RamKernelGemini3
     58  f281					      stx	[KernelA_H_W + 0]
     59  f281					      ldx	RamKernelGemini3Reg
     60  f281					      stx	[KernelA_H_W + 1]
     61  f281							; [BIT DEPTH] #4 *If-End @ 4
     62  f281							; [BIT DEPTH] #4 Else-End @ 4
     63  f281				   .endif_4
     64  f281					      ENDM
     65  f281
     66  f281
     67  f281
     68  f281
     69  f281					      MAC	nibble_gem_kernel_a_2
     70  f281				   .if_1
     71  f281					      asl
     72  f281					      bcc	.else_1
     73  f281					      ldx	#BC_STA
     74  f281					      stx	[[KernelA_I_W + 0] + 0]
     75  f281					      ldx	#EMERALD_SP_RESET
     76  f281					      stx	[[KernelA_I_W + 0] + 1]
     77  f281					      ldx	#BC_STA
     78  f281					      stx	[[KernelA_J_W + 1] + 0]
     79  f281					      ldx	#PF1
     80  f281					      stx	[[KernelA_J_W + 1] + 1]
     81  f281					      ldx	#BC_PHP
     82  f281					      stx	[[KernelA_K_W + 1] + 0]
     83  f281
     84  f281					      jmp	.endif_1
     85  f281				   .else_1
     86  f281					      ldx	#BC_PHP
     87  f281					      stx	[[KernelA_I_W + 0] + 0]
     88  f281					      ldx	#BC_STA
     89  f281					      stx	[[KernelA_J_W + 0] + 0]
     90  f281					      ldx	#PF1
     91  f281					      stx	[[KernelA_J_W + 0] + 1]
     92  f281					      ldx	RamKernelGemini4
     93  f281					      stx	[KernelA_K_W + 0]
     94  f281					      ldx	#EMERALD_SP
     95  f281					      stx	[KernelA_K_W + 1]
     96  f281							; [BIT DEPTH] #1 *If-End @ 1
     97  f281							; [BIT DEPTH] #1 Else-End @ 1
     98  f281					      sleep	2
     99  f281				   .endif_1
    100  f281					      ldx	BuildKernelMissile
    101  f281					      stx	[[KernelA_F - $100] + 0]
    102  f281					      ldx	BuildKernelVdel1
    103  f281					      stx	[[KernelA_VDEL1 - $100] + 0]
    104  f281					      ldx	BuildKernelGrp0
    105  f281					      stx	[[KernelA_VDEL0 - $100] + 0]
    106  f281					      ldx	#$ff
    107  f281					      stx	[RamPSByte + 0]
    108  f281					      ENDM
    109  f281
    110  f281
    111  f281
    112  f281
    113  f281					      MAC	nibble_gem_kernel_b_1
    114  f281				   .if_1
    115  f281					      asl
    116  f281					      bcc	.else_1
    117  f281					      ldx	#BC_STY
    118  f281					      stx	[[KernelB_E_W + 0] + 0]
    119  f281					      ldx	#EMERALD_SP_RESET
    120  f281					      stx	[[KernelB_E_W + 0] + 1]
    121  f281					      ldx	#BC_PHP
    122  f281					      stx	[[KernelB_F_W + 1] + 0]
    123  f281					      ldx	#BC_STA
    124  f281					      stx	[[KernelB_G_W + 0] + 0]
    125  f281					      ldx	#PF1
    126  f281					      stx	[[KernelB_G_W + 0] + 1]
    127  f281					      ldx	RamKernelGemini3
    128  f281					      stx	[[KernelB_H_W + 0] + 0]
    129  f281					      ldx	#EMERALD_SP
    130  f281					      stx	[[KernelB_H_W + 0] + 1]
    131  f281					      ldx	RamKernelGemini3
    132  f281					      stx	[KernelB_H_W + 0]
    133  f281					      ldx	#EMERALD_SP
    134  f281					      stx	[KernelB_H_W + 1]
    135  f281					      rol
    136  f281
    137  f281					      jmp	.endif_1
    138  f281				   .else_1
    139  f281					      ldx	RamKernelGemini2
    140  f281					      stx	[KernelB_F_W + 0]
    141  f281					      ldx	#EMERALD_SP
    142  f281					      stx	[KernelB_F_W + 1]
    143  f281				   .if_2
    144  f281					      asl
    145  f281					      bcc	.else_2
    146  f281					      ldx	#BC_STY
    147  f281					      stx	[[KernelB_E_W + 0] + 0]
    148  f281					      ldx	#EMERALD_SP_RESET
    149  f281					      stx	[[KernelB_E_W + 0] + 1]
    150  f281					      ldx	RamKernelGemini2
    151  f281					      stx	[[KernelB_F_W + 1] + 0]
    152  f281					      ldx	#EMERALD_SP
    153  f281					      stx	[[KernelB_F_W + 1] + 1]
    154  f281					      ldx	#BC_STA
    155  f281					      stx	[[KernelB_G_W + 1] + 0]
    156  f281					      ldx	#PF1
    157  f281					      stx	[[KernelB_G_W + 1] + 1]
    158  f281					      ldx	#BC_PHP
    159  f281					      stx	[[KernelB_H_W + 1] + 0]
    160  f281
    161  f281					      jmp	.endif_2
    162  f281				   .else_2
    163  f281					      ldx	RamKernelGemini3
    164  f281					      stx	[KernelB_H_W + 0]
    165  f281					      ldx	#EMERALD_SP
    166  f281					      stx	[KernelB_H_W + 1]
    167  f281							; [BIT DEPTH] #2 *If-End @ 2
    168  f281							; [BIT DEPTH] #2 Else-End @ 2
    169  f281					      sleep	32
    170  f281				   .endif_2
    171  f281							; [BIT DEPTH] #1 *If-End @ 1
    172  f281							; [BIT DEPTH] #2 Else-End @ 2
    173  f281					      sleep	2
    174  f281				   .endif_1
    175  f281					      ENDM
    176  f281
    177  f281
    178  f281
    179  f281
    180  f281					      MAC	nibble_gem_kernel_b_2
    181  f281					      ldx	RamKernelGemini1
    182  f281					      stx	[KernelB_D_W + 0]
    183  f281				   .if_1
    184  f281					      asl
    185  f281					      bcc	.else_1
    186  f281					      ldx	#RamFFByte
    187  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    188  f281
    189  f281					      jmp	.endif_1
    190  f281				   .else_1
    191  f281					      ldx	#RamPF1Value
    192  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    193  f281							; [BIT DEPTH] #1 *If-End @ 1
    194  f281							; [BIT DEPTH] #1 Else-End @ 1
    195  f281					      sleep	2
    196  f281				   .endif_1
    197  f281					      ldx	RamKernelGemini4
    198  f281					      stx	[KernelB_J_W + 0]
    199  f281					      ldx	BuildKernelGrp0
    200  f281					      stx	[[KernelB_VDEL0 - $100] + 0]
    201  f281					      ldx	#$00
    202  f281					      stx	[RamPSByte + 0]
    203  f281					      ENDM
    204  f281
    205  f281
    206  f281
    207  f281
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_shard.s"
      1  f281							; conflict: 11011000 #%0011 #%1000
      2  f281							; conflict: 11011001 #%0011 #%1000
      3  f281							; conflict: 11011010 #%0011 #%1000
      4  f281							; conflict: 11011011 #%0011 #%1000
      5  f281							; conflict: 11100100 #%1000 #%0011
      6  f281							; conflict: 11100101 #%1000 #%0011
      7  f281							; conflict: 11100110 #%1000 #%0011
      8  f281							; conflict: 11100111 #%1000 #%0011
      9  f281							; conflict: 01111000 #%1000 #%0001
     10  f281							; conflict: 01111001 #%1000 #%0001
     11  f281							; conflict: 01111010 #%1000 #%0001
     12  f281							; conflict: 01111011 #%1000 #%0001
     13  f281							; conflict: 10110100 #%1000 #%0001
     14  f281							; conflict: 10110101 #%1000 #%0001
     15  f281							; conflict: 10110110 #%1000 #%0001
     16  f281							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400
      2  f400							; Vertical Sync
      3  f400				   VerticalSync subroutine
      0  f400					      VERTICAL_SYNC
      1  f400		       a9 0e		      lda	#%1110
      2  f402		       85 02	   .VSLP1     sta	WSYNC
      3  f404		       85 00		      sta	VSYNC
      4  f406		       4a		      lsr
      5  f407		       d0 f9		      bne	.VSLP1
      5  f409
      6  f409				   FrameStart subroutine
      7  f409							; FIXME we can't skip this: ASSERT_RUNTIME "_scan == #0"
      8  f409
      9  f409				   VerticalBlank subroutine
      0  f409					      TIMER_SETUP	37
      1  f409				   .lines     SET	37
      2  f409		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f40b		       85 02		      sta	WSYNC
      4  f40d		       8d 96 02 	      sta	TIM64T
     11  f410
     12  f410							; Scanline counter
     13  f410		       a9 10		      lda	#ROW_COUNT
     14  f412		       85 c2		      sta	LoopCount
     15  f414
     16  f414							; Frame counter
     17  f414		       e6 c3		      inc	FrameCount
     18  f416
     19  f416							; Positioning
      0  f416					      SLEEP	40
      1  f416				   .CYCLES    SET	40
      2  f416
      3  f416				  -	      IF	.CYCLES < 2
      4  f416				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f416				  -	      ERR
      6  f416					      ENDIF
      7  f416
      8  f416				  -	      IF	.CYCLES & 1
      9  f416				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f416				  -	      nop	0
     11  f416				  -	      ELSE
     12  f416				  -	      bit	VSYNC
     13  f416				  -	      ENDIF
     14  f416				  -.CYCLES    SET	.CYCLES - 3
     15  f416					      ENDIF
     16  f416
     17  f416					      REPEAT	.CYCLES / 2
     18  f416		       ea		      nop
     17  f416					      REPEND
     18  f417		       ea		      nop
     17  f417					      REPEND
     18  f418		       ea		      nop
     17  f418					      REPEND
     18  f419		       ea		      nop
     17  f419					      REPEND
     18  f41a		       ea		      nop
     17  f41a					      REPEND
     18  f41b		       ea		      nop
     17  f41b					      REPEND
     18  f41c		       ea		      nop
     17  f41c					      REPEND
     18  f41d		       ea		      nop
     17  f41d					      REPEND
     18  f41e		       ea		      nop
     17  f41e					      REPEND
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     17  f425					      REPEND
     18  f426		       ea		      nop
     17  f426					      REPEND
     18  f427		       ea		      nop
     17  f427					      REPEND
     18  f428		       ea		      nop
     17  f428					      REPEND
     18  f429		       ea		      nop
     19  f42a					      REPEND
     21  f42a		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     22  f42c		       85 02		      sta	WSYNC
     23  f42e
     24  f42e							; Misc
     25  f42e		       a9 00		      lda	#00
     26  f430		       85 1e		      sta	EMERALD_MI_ENABLE
     27  f432
     28  f432							; Assign dervied SpriteEnd value
     29  f432		       18		      clc
     30  f433		       a9 c8		      lda	#HEIGHT_OFFSET
     31  f435		       e5 c8		      sbc	YPos
     32  f437		       85 c4		      sta	SpriteEnd
     33  f439
     34  f439							; Player 1
     35  f439		       a5 c5		      lda	XPos
     36  f43b		       a2 00		      ldx	#0
     37  f43d		       20 99 f5 	      jsr	SetHorizPos
     38  f440
     39  f440							; Load the kernel into CBSRAM.
     40  f440				   game_frame_kernel_loader subroutine
     41  f440							; Kernel A or B
     42  f440		       a9 01		      lda	#01
     43  f442					      IFNCONST	ONLY_KERNEL_B
     44  f442				  -	      IFNCONST	ONLY_KERNEL_A
     45  f442				  -			; FIXME disabled for test
     46  f442				  -	      and	FrameCount
     47  f442				  -	      bne	.kernel_b
     48  f442					      ENDIF
     49  f442				   .kernel_a
     50  f442							; Load kernel A into CBSRAM
     51  f442		       20 5d f2 	      jsr	LoadKernelA
     52  f445		       4c 4b f4 	      jmp	.complete
     53  f448					      ENDIF
     54  f448				   .kernel_b
     55  f448							; Load kernel B into CBSRAM
     56  f448		       20 6f f2 	      jsr	LoadKernelB
     57  f44b				   .complete
     58  f44b
     59  f44b							; Populate the kernel with gemini changes.
     60  f44b				   game_frame_populate subroutine
     61  f44b							; Extract 26-bit string to full Gemini profile
     62  f44b		       20 00 fa 	      jsr	gemini_populate
     63  f44e							; Run nibble populate.
     64  f44e		       20 0d f6 	      jsr	game_nibble_populate
     65  f451
     66  f451							; Complete frame setup.
     67  f451				   game_frame_setup subroutine
     68  f451							; Kernel A or B reading directly from the kernel ID
     69  f451		       ad 00 f1 	      lda	CBSRAM_KERNEL_READ
     70  f454		       c9 0a		      cmp	#$0a
     71  f456		       d0 1d		      bne	.kernel_b
     72  f458
     73  f458				   .kernel_a
     74  f458							; Move missile
     75  f458		       85 02		      sta	WSYNC
      0  f45a					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f45a				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f45a
      3  f45a				  -	      IF	.CYCLES < 2
      4  f45a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f45a				  -	      ERR
      6  f45a					      ENDIF
      7  f45a
      8  f45a				  -	      IF	.CYCLES & 1
      9  f45a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f45a				  -	      nop	0
     11  f45a				  -	      ELSE
     12  f45a				  -	      bit	VSYNC
     13  f45a				  -	      ENDIF
     14  f45a				  -.CYCLES    SET	.CYCLES - 3
     15  f45a					      ENDIF
     16  f45a
     17  f45a					      REPEAT	.CYCLES / 2
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     19  f468					      REPEND
     77  f468		       85 13		      sta	EMERALD_MI_RESET
     78  f46a		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     79  f46c		       85 23		      sta	EMERALD_MI_HMOVE
     80  f46e
     81  f46e							; DEBUG: Set per-kernel color
     82  f46e		       a2 cc		      ldx	#COL_EMERALD
     83  f470		       86 07		      stx	EMERALD_SP_COLOR
     84  f472
     85  f472		       4c c6 f4 	      jmp	.complete
     86  f475
     87  f475				   .kernel_b
     88  f475							; Move missile
     89  f475		       85 02		      sta	WSYNC
      0  f477					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f477				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f477
      3  f477				  -	      IF	.CYCLES < 2
      4  f477				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f477				  -	      ERR
      6  f477					      ENDIF
      7  f477
      8  f477					      IF	.CYCLES & 1
      9  f477					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f477		       04 00		      nop	0
     11  f479				  -	      ELSE
     12  f479				  -	      bit	VSYNC
     13  f479					      ENDIF
     14  f479				   .CYCLES    SET	.CYCLES - 3
     15  f479					      ENDIF
     16  f479
     17  f479					      REPEAT	.CYCLES / 2
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     17  f47c					      REPEND
     18  f47d		       ea		      nop
     17  f47d					      REPEND
     18  f47e		       ea		      nop
     17  f47e					      REPEND
     18  f47f		       ea		      nop
     17  f47f					      REPEND
     18  f480		       ea		      nop
     17  f480					      REPEND
     18  f481		       ea		      nop
     17  f481					      REPEND
     18  f482		       ea		      nop
     17  f482					      REPEND
     18  f483		       ea		      nop
     17  f483					      REPEND
     18  f484		       ea		      nop
     17  f484					      REPEND
     18  f485		       ea		      nop
     17  f485					      REPEND
     18  f486		       ea		      nop
     17  f486					      REPEND
     18  f487		       ea		      nop
     17  f487					      REPEND
     18  f488		       ea		      nop
     17  f488					      REPEND
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     17  f48a					      REPEND
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     17  f48d					      REPEND
     18  f48e		       ea		      nop
     17  f48e					      REPEND
     18  f48f		       ea		      nop
     17  f48f					      REPEND
     18  f490		       ea		      nop
     19  f491					      REPEND
     91  f491		       85 13		      sta	EMERALD_MI_RESET
     92  f493		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     93  f495		       85 23		      sta	EMERALD_MI_HMOVE
     94  f497
     95  f497		       a5 ec		      lda	DO_MISS_B
     96  f499		       d0 25		      bne	.kernel_b_continue
     97  f49b		       85 02		      sta	WSYNC
      0  f49d					      sleep	KERNEL_B_MISSILE_SLEEP + 8
      1  f49d				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP + 8
      2  f49d
      3  f49d				  -	      IF	.CYCLES < 2
      4  f49d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f49d				  -	      ERR
      6  f49d					      ENDIF
      7  f49d
      8  f49d					      IF	.CYCLES & 1
      9  f49d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f49d		       04 00		      nop	0
     11  f49f				  -	      ELSE
     12  f49f				  -	      bit	VSYNC
     13  f49f					      ENDIF
     14  f49f				   .CYCLES    SET	.CYCLES - 3
     15  f49f					      ENDIF
     16  f49f
     17  f49f					      REPEAT	.CYCLES / 2
     18  f49f		       ea		      nop
     17  f49f					      REPEND
     18  f4a0		       ea		      nop
     17  f4a0					      REPEND
     18  f4a1		       ea		      nop
     17  f4a1					      REPEND
     18  f4a2		       ea		      nop
     17  f4a2					      REPEND
     18  f4a3		       ea		      nop
     17  f4a3					      REPEND
     18  f4a4		       ea		      nop
     17  f4a4					      REPEND
     18  f4a5		       ea		      nop
     17  f4a5					      REPEND
     18  f4a6		       ea		      nop
     17  f4a6					      REPEND
     18  f4a7		       ea		      nop
     17  f4a7					      REPEND
     18  f4a8		       ea		      nop
     17  f4a8					      REPEND
     18  f4a9		       ea		      nop
     17  f4a9					      REPEND
     18  f4aa		       ea		      nop
     17  f4aa					      REPEND
     18  f4ab		       ea		      nop
     17  f4ab					      REPEND
     18  f4ac		       ea		      nop
     17  f4ac					      REPEND
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     17  f4af					      REPEND
     18  f4b0		       ea		      nop
     17  f4b0					      REPEND
     18  f4b1		       ea		      nop
     17  f4b1					      REPEND
     18  f4b2		       ea		      nop
     17  f4b2					      REPEND
     18  f4b3		       ea		      nop
     17  f4b3					      REPEND
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     17  f4b5					      REPEND
     18  f4b6		       ea		      nop
     17  f4b6					      REPEND
     18  f4b7		       ea		      nop
     17  f4b7					      REPEND
     18  f4b8		       ea		      nop
     17  f4b8					      REPEND
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     19  f4bb					      REPEND
     99  f4bb		       85 13		      sta	EMERALD_MI_RESET
    100  f4bd		       4c c2 f4 	      jmp	.kernel_b_continue_2
    101  f4c0
    102  f4c0				   .kernel_b_continue
    103  f4c0		       85 02		      sta	WSYNC
    104  f4c2				   .kernel_b_continue_2
    105  f4c2							; DEBUG: Set per-kernel color
    106  f4c2		       a2 e4		      ldx	#$e4
    107  f4c4							; ldx #COL_EMERALD
    108  f4c4		       86 07		      stx	EMERALD_SP_COLOR
    109  f4c6
    110  f4c6				   .complete
    111  f4c6
    112  f4c6				   VerticalBlankEnd
    113  f4c6							; Wait until the end of Vertical blank.
      0  f4c6					      TIMER_WAIT
      1  f4c6				   .waittimer
      2  f4c6		       ad 84 02 	      lda	INTIM
      3  f4c9		       d0 fb		      bne	.waittimer
      4  f4cb		       85 02		      sta	WSYNC
      0  f4cd					      ASSERT_RUNTIME	"_scan == #37"
      1  f4cd				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f4cd  && !(  _scan == #37  ) }
      2  f4cd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    116  f4cd
    117  f4cd							; Save stack pointer
    118  f4cd		       ba		      tsx
    119  f4ce		       86 d1		      stx	RamStackBkp
    120  f4d0
    121  f4d0							; Start rendering the kernel.
    122  f4d0		       4c 36 fb 	      jmp	KernelBorder
    123  f4d3
    124  f4d3				   FrameEnd   subroutine
    125  f4d3		       85 02		      sta	WSYNC
    126  f4d5
    127  f4d5							; Blank all background colors.
    128  f4d5		       a9 00		      lda	#0
    129  f4d7		       85 08		      sta	COLUPF
    130  f4d9		       85 0f		      sta	PF2
    131  f4db		       85 0e		      sta	PF1
    132  f4dd		       85 1c		      sta	EMERALD_SP
    133  f4df
    134  f4df							; Guide lines (2x)
    135  f4df		       a9 02		      lda	#SIGNAL_LINE
    136  f4e1		       85 09		      sta	COLUBK
    137  f4e3					      REPEAT	6
    138  f4e3		       85 02		      sta	WSYNC
    137  f4e3					      REPEND
    138  f4e5		       85 02		      sta	WSYNC
    137  f4e5					      REPEND
    138  f4e7		       85 02		      sta	WSYNC
    137  f4e7					      REPEND
    138  f4e9		       85 02		      sta	WSYNC
    137  f4e9					      REPEND
    138  f4eb		       85 02		      sta	WSYNC
    137  f4eb					      REPEND
    138  f4ed		       85 02		      sta	WSYNC
    139  f4ef					      REPEND
    140  f4ef		       a9 00		      lda	#$00
    141  f4f1		       85 09		      sta	COLUBK
    142  f4f3
    143  f4f3							; Restore stack pointer
    144  f4f3		       a6 d1		      ldx	RamStackBkp
    145  f4f5		       9a		      txs
    146  f4f6
    147  f4f6							; Display the rest of the blank screen.
      0  f4f6					      TIMER_SETUP	25
      1  f4f6				   .lines     SET	25
      2  f4f6		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f4f8		       85 02		      sta	WSYNC
      4  f4fa		       8d 96 02 	      sta	TIM64T
    149  f4fd		       85 02		      sta	WSYNC
      0  f4ff					      TIMER_WAIT
      1  f4ff				   .waittimer
      2  f4ff		       ad 84 02 	      lda	INTIM
      3  f502		       d0 fb		      bne	.waittimer
      4  f504		       85 02		      sta	WSYNC
      0  f506					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f506				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f506  && !(  _scan == (#37 + #184)  ) }
      2  f506					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    152  f506
    153  f506							; Overscan
    154  f506				   Overscan   subroutine
    155  f506		       85 01		      sta	VBLANK
      0  f508					      TIMER_SETUP	29
      1  f508				   .lines     SET	29
      2  f508		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f50a		       85 02		      sta	WSYNC
      4  f50c		       8d 96 02 	      sta	TIM64T
    157  f50f
    158  f50f		       20 22 f5 	      jsr	MoveJoystick
    159  f512		       20 62 f5 	      jsr	SpeedCalculation
    160  f515		       20 f8 fa 	      jsr	game_state_tick
    161  f518
      0  f518					      TIMER_WAIT
      1  f518				   .waittimer
      2  f518		       ad 84 02 	      lda	INTIM
      3  f51b		       d0 fb		      bne	.waittimer
      4  f51d		       85 02		      sta	WSYNC
      0  f51f					      ASSERT_RUNTIME	"_scan == (#37 + #184 + #29)"
      1  f51f				   .COND      SET	"_scan == (#37 + #184 + #29)"
 ASSERT: breakif { pc== $f51f  && !(  _scan == (#37 + #184 + #29)  ) }
      2  f51f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    164  f51f
    165  f51f		       4c 00 f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f522					      include	"game_input.s"
      1  f522							; Handles input checking. Called from overscan.
      2  f522
      3  f522							; Read joystick movement and apply to object 0
      4  f522				   MoveJoystick subroutine
      5  f522
      6  f522							; HACK to add in resetting ability for the gems
      7  f522		       a5 0c		      lda	INPT4	; read left port action button
      8  f524		       29 80		      and	#%10000000	; safe to avoid any reads from D6 - D0
      9  f526		       30 03		      bmi	.actionButtonNotPressed	; branch if action button not pressed
     10  f528		       20 da fa 	      jsr	game_state_setup
     11  f52b				   .actionButtonNotPressed
     12  f52b
     13  f52b							; Move vertically
     14  f52b							; (up and down are actually reversed since ypos starts at bottom)
     15  f52b							;     ldx YPos
     16  f52b		       a9 10		      lda	#%00010000	;Up?
     17  f52d		       2c 80 02 	      bit	SWCHA
     18  f530		       d0 0d		      bne	SkipMoveUp
     19  f532
     20  f532		       18		      clc
     21  f533		       a5 c7		      lda	Speed2
     22  f535		       69 0c		      adc	#12
     23  f537		       85 c7		      sta	Speed2
     24  f539		       a5 c6		      lda	Speed1
     25  f53b		       69 00		      adc	#00
     26  f53d		       85 c6		      sta	Speed1
     27  f53f
     28  f53f				   SkipMoveUp
     29  f53f		       a6 c5		      ldx	XPos
     30  f541
     31  f541							; Only check left/right on odd frames;
     32  f541							; TODO make this just a fractional speed
     33  f541							; rather than dropping frames
     34  f541		       a9 01		      lda	#01
     35  f543		       25 c3		      and	FrameCount
     36  f545		       d0 18		      bne	SkipMoveRight
     37  f547
     38  f547
     39  f547							; Move horizontally
     40  f547		       a9 40		      lda	#%01000000	;Left?
     41  f549		       2c 80 02 	      bit	SWCHA
     42  f54c		       d0 05		      bne	SkipMoveLeft
     43  f54e		       e0 1d		      cpx	#29
     44  f550		       90 01		      bcc	SkipMoveLeft
     45  f552		       ca		      dex
     46  f553
     47  f553							; Reflect
     48  f553							;     lda #$ff
     49  f553							;     sta REFP0
     50  f553				   SkipMoveLeft
     51  f553		       a9 80		      lda	#%10000000	;Right?
     52  f555		       2c 80 02 	      bit	SWCHA
     53  f558		       d0 05		      bne	SkipMoveRight
     54  f55a		       e0 80		      cpx	#128
     55  f55c		       b0 01		      bcs	SkipMoveRight
     56  f55e		       e8		      inx
     57  f55f
     58  f55f							; Reflect
     59  f55f							;     lda #$0
     60  f55f							;     sta REFP0
     61  f55f				   SkipMoveRight
     62  f55f		       86 c5		      stx	XPos
     63  f561		       60		      rts
     64  f562
     65  f562
     66  f562				   SpeedCalculation
     67  f562		       38		      sec
     68  f563		       a5 c7		      lda	Speed2
     69  f565		       e9 07		      sbc	#7
     70  f567		       85 c7		      sta	Speed2
     71  f569		       a5 c6		      lda	Speed1
     72  f56b		       e9 00		      sbc	#0
     73  f56d		       85 c6		      sta	Speed1
     74  f56f
     75  f56f		       18		      clc
     76  f570		       a5 c9		      lda	YPos2
     77  f572		       65 c7		      adc	Speed2
     78  f574		       85 c9		      sta	YPos2
     79  f576		       a5 c8		      lda	YPos
     80  f578		       65 c6		      adc	Speed1
     81  f57a		       85 c8		      sta	YPos
     82  f57c
     83  f57c		       c9 48		      cmp	#FLOOR_OFFSET
     84  f57e		       b0 0a		      bcs	NewThing2
     85  f580
     86  f580							; Reset to floor
     87  f580		       a9 48		      lda	#FLOOR_OFFSET
     88  f582		       85 c8		      sta	YPos
     89  f584		       a9 00		      lda	#0
     90  f586		       85 c6		      sta	Speed1
     91  f588		       85 c7		      sta	Speed2
     92  f58a				   NewThing2
     93  f58a
     94  f58a		       c9 c0		      cmp	#CEILING_OFFSET
     95  f58c		       90 0a		      bcc	.next
     96  f58e
     97  f58e							; Reset to ceiling
     98  f58e		       a9 c0		      lda	#CEILING_OFFSET
     99  f590		       85 c8		      sta	YPos
    100  f592		       a9 00		      lda	#0
    101  f594		       85 c6		      sta	Speed1
    102  f596		       85 c7		      sta	Speed2
    103  f598				   .next
    104  f598		       60		      rts
    105  f599
    106  f599
    107  f599
    108  f599							; Subroutine
    109  f599				   SetHorizPos
    110  f599		       85 02		      sta	WSYNC	; start a new line
    111  f59b		       24 00		      bit	0	; waste 3 cycles
    112  f59d		       38		      sec		; set carry flag
    113  f59e				   DivideLoop
    114  f59e		       e9 0f		      sbc	#15	; subtract 15
    115  f5a0		       b0 fc		      bcs	DivideLoop	; branch until negative
    116  f5a2		       49 07		      eor	#7	; calculate fine offset
    117  f5a4		       0a		      asl
    118  f5a5		       0a		      asl
    119  f5a6		       0a		      asl
    120  f5a7		       0a		      asl
    121  f5a8		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    122  f5aa		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    123  f5ac		       60		      rts		; return to caller
------- FILE main.s
------- FILE game_nibble.s LEVEL 2 PASS 2
      0  f5ad					      include	"game_nibble.s"
      1  f5ad							; Frame loop, including calling out to other kernels.
      2  f5ad
      3  f5ad		       00 aa	   SENTINEL   =	%010101010
      4  f5ad
      5  f5ad							; Reflected for Kernel A
      6  f5ad		       00 00	   G00	      =	%00000000
      7  f5ad		       00 60	   G01	      =	%01100000
      8  f5ad		       00 06	   G10	      =	%00000110
      9  f5ad		       00 66	   G11	      =	%01100110
     10  f5ad
     11  f5ad		       00 a9	   BC_LDA_IMM =	$a9
     12  f5ad		       00 85	   BC_STA     =	$85
     13  f5ad		       00 86	   BC_STX     =	$86
     14  f5ad		       00 84	   BC_STY     =	$84
     15  f5ad		       00 08	   BC_PHP     =	$08
     16  f5ad		       00 04	   BC_NOP     =	$04
     17  f5ad
     18  f5ad		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
     19  f5ad
     20  f5ad				   KernelA_D_W EQM	[KernelA_D - $100]
     21  f5ad				   KernelA_E_W EQM	[KernelA_E - $100]
     22  f5ad				   KernelA_G_W EQM	[KernelA_G - $100]
     23  f5ad				   KernelA_H_W EQM	[KernelA_H - $100]
     24  f5ad				   KernelA_I_W EQM	[KernelA_I - $100]
     25  f5ad				   KernelA_J_W EQM	[KernelA_J - $100]
     26  f5ad				   KernelA_K_W EQM	[KernelA_K - $100]
     27  f5ad
     28  f5ad				   KernelB_D_W EQM	[KernelB_D - $100]
     29  f5ad				   KernelB_E_W EQM	[KernelB_E - $100]
     30  f5ad				   KernelB_F_W EQM	[KernelB_F - $100]
     31  f5ad				   KernelB_G_W EQM	[KernelB_G - $100]
     32  f5ad				   KernelB_H_W EQM	[KernelB_H - $100]
     33  f5ad				   KernelB_I_W EQM	[KernelB_I - $100]
     34  f5ad				   KernelB_J_W EQM	[KernelB_J - $100]
     35  f5ad				   KernelB_K_W EQM	[KernelB_K - $100]
     36  f5ad
     37  f5ad					      mac	calc_regs_and_store
     38  f5ad				   .OFFSET    SET	{1}
     39  f5ad				   .TARGET    SET	{2}
     40  f5ad					      ldy	[DO_GEMS_B + .OFFSET]
     41  f5ad					      jsr	KernelB_UpdateRegs
     42  f5ad					      sty	.TARGET
     43  f5ad					      endm
     44  f5ad
     45  f5ad							; Y=Gemini Sprite
     46  f5ad							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     47  f5ad							; processor flag Z is TRUE if this is RST.
     48  f5ad				   KernelA_GenReset subroutine
     49  f5ad		       c0 00		      cpy	#$00
     50  f5af		       f0 01		      beq	.start
     51  f5b1		       60		      rts
     52  f5b2							; Current Gemini = $00
     53  f5b2				   .start
     54  f5b2		       a6 e3		      ldx	BuildKernelRST
     55  f5b4		       e0 aa		      cpx	#SENTINEL
     56  f5b6		       d0 04		      bne	.set_else
     57  f5b8							; We have found the first (and only) RST on this line, set the marker var
     58  f5b8		       a2 ff		      ldx	#$ff
     59  f5ba		       86 e3		      stx	BuildKernelRST
     60  f5bc				   .set_else
     61  f5bc		       a2 00		      ldx	#$00
     62  f5be		       60		      rts
     63  f5bf
     64  f5bf							; Y=Gemini Sprite
     65  f5bf							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     66  f5bf							; processor flag Z is TRUE if this is RST.
     67  f5bf				   KernelB_GenPhp subroutine
     68  f5bf		       c0 60		      cpy	#G01
     69  f5c1		       f0 05		      beq	.start
     70  f5c3		       c0 66		      cpy	#G11
     71  f5c5		       f0 01		      beq	.start
     72  f5c7		       60		      rts
     73  f5c8							; Current Gemini = $00
     74  f5c8				   .start
     75  f5c8		       a6 e3		      ldx	BuildKernelRST
     76  f5ca		       e0 aa		      cpx	#SENTINEL
     77  f5cc		       d0 04		      bne	.set_else
     78  f5ce							; We have found the first (and only) RST on this line, set the marker var
     79  f5ce		       84 e3		      sty	BuildKernelRST
     80  f5d0
     81  f5d0							; Set Z flag
     82  f5d0		       a2 00		      ldx	#$00
     83  f5d2				   .set_else
     84  f5d2		       60		      rts
     85  f5d3
     86  f5d3							; Allocates build-time registers for a new Gemini sprite value.
     87  f5d3							; register Y = the storage opcode to write to the result
     88  f5d3							;
     89  f5d3							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     90  f5d3							; BuildKernelX, BuildKernelY are upgraded if not set.
     91  f5d3							; Y=Gemini Sprite
     92  f5d3				   KernelB_UpdateRegs
     93  f5d3				   KernelA_UpdateRegs subroutine
     94  f5d3
     95  f5d3							; If equal to GRP0, return nop
     96  f5d3							; FIXME GRP0 might not always be up to date (should update each entry?)
     97  f5d3							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     98  f5d3		       c4 d7		      cpy	RamKernelGrp0
     99  f5d5		       d0 03		      bne	.op_start
    100  f5d7							; TODO if this is stx + NOP value, then register doesn't have to change as
    101  f5d7							; often in GEM1ASWITCH
    102  f5d7		       a0 04		      ldy	#BC_NOP
    103  f5d9		       60		      rts
    104  f5da
    105  f5da				   .op_start
    106  f5da		       c4 e1		      cpy	BuildKernelX
    107  f5dc		       d0 03		      bne	.op_else
    108  f5de		       a0 86		      ldy	#BC_STX
    109  f5e0		       60		      rts
    110  f5e1				   .op_else
    111  f5e1		       c4 e2		      cpy	BuildKernelY
    112  f5e3		       d0 03		      bne	.op_end
    113  f5e5		       a0 84		      ldy	#BC_STY
    114  f5e7		       60		      rts
    115  f5e8				   .op_end
    116  f5e8
    117  f5e8				   .set_start
    118  f5e8		       a6 e1		      ldx	BuildKernelX
    119  f5ea		       e0 aa		      cpx	#SENTINEL
    120  f5ec		       d0 13		      bne	.set_else
    121  f5ee
    122  f5ee							; KA Missile opcode determination
    123  f5ee				   DBG_CHECK_MISSILE_OPCODE
    124  f5ee		       84 e1		      sty	BuildKernelX
    125  f5f0		       66 e1		      ror	BuildKernelX	; D0
    126  f5f2		       66 e1		      ror	BuildKernelX	; D1
    127  f5f4		       a2 86		      ldx	#BC_STX
    128  f5f6		       b0 02		      bcs	[. + 4]
    129  f5f8		       a2 84		      ldx	#BC_STY
    130  f5fa		       86 e6		      stx	BuildKernelMissile
    131  f5fc
    132  f5fc							; Set the X operator
    133  f5fc		       84 e1		      sty	BuildKernelX
    134  f5fe		       a0 86		      ldy	#BC_STX
    135  f600		       60		      rts
    136  f601				   .set_else
    137  f601		       a6 e2		      ldx	BuildKernelY
    138  f603		       e0 aa		      cpx	#SENTINEL
    139  f605		       d0 05		      bne	.set_end
    140  f607		       84 e2		      sty	BuildKernelY
    141  f609		       a0 84		      ldy	#BC_STY
    142  f60b		       60		      rts
    143  f60c				   .set_end
    144  f60c							; Failed all
      0  f60c					      ASSERT_RUNTIME	"0"
      1  f60c				   .COND      SET	"0"
 ASSERT: breakif { pc== $f60c  && !(  0  ) }
      2  f60c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    146  f60c		       60		      rts
    147  f60d
    148  f60d
    149  f60d				   game_nibble_populate
    150  f60d		       ad 00 f1 	      lda	$f100
    151  f610		       85 80		      sta	DebugKernelID
    152  f612
    153  f612		       ad 18 fe 	      lda	shard_map
    154  f615		       a0 01		      ldy	#1	; gemini counter, starting at 1
    155  f617				   gemini_builder
    156  f617		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    157  f619		       d0 00		      bne	.no_vd0
    158  f61b				   .no_vd0
    159  f61b
    160  f61b							; Nibble Kernel A
      0  f61b					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U010d ????				      seg.U	ignoreme
    162 U010d ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    163 U010f ????	       86 e1		      stx	BuildKernelX
    164 U0111 ????	       86 e2		      stx	BuildKernelY
    165 U0113 ????	       86 e3		      stx	BuildKernelRST
    166 U0115 ????
    167 U0115 ????						; Gemini 1A
    168 U0115 ????			   .K_1A
    169 U0115 ????	       a4 ed		      ldy	[DO_GEMS_A + 0]
    170 U0117 ????	       20 ad f5 	      jsr	KernelA_GenReset
      0 U011a ????				      NIBBLE_IF	eq
    172 U011a ????						; Special: Encoding RST0
    173 U011a ????						; Rewrite lda RamKernelPF1 to be #immediate
    174 U011a ????	       a0 a9		      ldy	#BC_LDA_IMM
    175 U011c ????	       8c 15 f0 	      sty	[KernelA_B - $100]
    176 U011f ????	       a0 a0		      ldy	#%10100000
    177 U0121 ????	       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
    178 U0124 ????						; Store 1A in GRP0
    179 U0124 ????	       a4 ee		      ldy	[DO_GEMS_A + 1]
    180 U0126 ????	       84 e4		      sty	BuildKernelGrp0
    181 U0128 ????	       84 d7		      sty	RamKernelGrp0
    182 U012a ????						; Gemini 1A is RESPx
    183 U012a ????	       a0 11		      ldy	#EMERALD_SP_RESET
    184 U012c ????	       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
    185 U012f ????						; Turn 3-cycle NOP into 4-cycle
    186 U012f ????	       a0 14		      ldy	#$14	; TODO what is this
    187 U0131 ????	       8c 19 f0 	      sty	[KernelA_D - $100]
      0 U0134 ????				      NIBBLE_ELSE
    189 U0134 ????						; Store 0A in GRP0
    190 U0134 ????	       a4 ed		      ldy	[DO_GEMS_A + 0]
    191 U0136 ????	       84 e4		      sty	BuildKernelGrp0
    192 U0138 ????	       84 d7		      sty	RamKernelGrp0
    193 U013a ????
    194 U013a ????	       a4 ee		      ldy	[DO_GEMS_A + 1]
    195 U013c ????	       20 ad f5 	      jsr	KernelA_GenReset
      0 U013f ????				      NIBBLE_IF	eq
    197 U013f ????						; GEM1ASWITCH
      0 U013f ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U013f ????				      NIBBLE_ELSE
    200 U013f ????						; Calculate the 1A value
    201 U013f ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    202 U0142 ????	       c0 01		      cpy	#1
    203 U0144 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    204 U0146 ????	       a0 11		      ldy	#RESP1
    205 U0148 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    206 U0149 ????	       a0 1c		      ldy	#GRP1
    207 U014b ????	       84 d9		      sty	RamKernelGemini1Reg
    208 U014d ????
    209 U014d ????						; Set opcode
    210 U014d ????	       ae d4 fa 	      ldx	SHARD_LUT_RF1
    211 U0150 ????	       e0 01		      cpx	#1
    212 U0152 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    213 U0154 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    214 U0156 ????	       a4 ee		      ldy	[DO_GEMS_A + 1]
    215 U0158 ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    216 U015b ????	       84 d8		      sty	RamKernelGemini1
    217 U015d ????
      0 U015d ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U015d ????				      NIBBLE_END_IF
      0 U015d ????				      NIBBLE_END_IF
    221 U015d ????
    222 U015d ????						; Stop preserving GRP0
    223 U015d ????	       a0 aa		      ldy	#SENTINEL
    224 U015f ????	       84 d7		      sty	RamKernelGrp0
    225 U0161 ????
    226 U0161 ????						; BuildKernelX, BuildKernelY are upgraded if not set
    227 U0161 ????						; Gemini 2A
    228 U0161 ????			   .K_2A
    229 U0161 ????	       a4 ef		      ldy	[DO_GEMS_A + 2]
    230 U0163 ????	       20 ad f5 	      jsr	KernelA_GenReset
      0 U0166 ????				      NIBBLE_IF	eq
      0 U0166 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0166 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0166 ????				      NIBBLE_ELSE
    235 U0166 ????						; Set opcode
    236 U0166 ????	       a4 ef		      ldy	[DO_GEMS_A + 2]
    237 U0168 ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    238 U016b ????	       84 da		      sty	RamKernelGemini2
    239 U016d ????
    240 U016d ????						; Set opcode target
    241 U016d ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    242 U0170 ????	       c0 02		      cpy	#2
    243 U0172 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    244 U0174 ????	       a0 11		      ldy	#RESP1
    245 U0176 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    246 U0177 ????	       a0 1c		      ldy	#GRP1
    247 U0179 ????	       84 db		      sty	RamKernelGemini2Reg
    248 U017b ????
      0 U017b ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U017b ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U017b ????				      NIBBLE_END_IF
    252 U017b ????
    253 U017b ????						; Gemini 3A
    254 U017b ????			   .K_3A
    255 U017b ????	       a4 f0		      ldy	[DO_GEMS_A + 3]
    256 U017d ????	       20 ad f5 	      jsr	KernelA_GenReset
      0 U0180 ????				      NIBBLE_IF	eq
      0 U0180 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0180 ????				      NIBBLE_ELSE
    260 U0180 ????						; Set opcode
    261 U0180 ????	       a4 f0		      ldy	[DO_GEMS_A + 3]
    262 U0182 ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    263 U0185 ????	       84 dc		      sty	RamKernelGemini3
    264 U0187 ????
    265 U0187 ????						; Set opcode target
    266 U0187 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    267 U018a ????	       c0 03		      cpy	#3
    268 U018c ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    269 U018e ????	       a0 11		      ldy	#RESP1
    270 U0190 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    271 U0191 ????	       a0 1c		      ldy	#GRP1
    272 U0193 ????	       84 dd		      sty	RamKernelGemini3Reg
    273 U0195 ????
      0 U0195 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0195 ????				      NIBBLE_END_IF
      0 U0195 ????				      NIBBLE_END_KERNEL
      1  f61b					      seg	CodeBank3
    277  f61b
      0  f61b					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0195 ????				      seg.U	ignoreme
    279 U0195 ????						; RAM:
    280 U0195 ????						; RamKernelX
    281 U0195 ????						; RamKernelY
    282 U0195 ????						; RamPSByte
    283 U0195 ????						; BuildKernelVdel1
    284 U0195 ????						; RamKernelGrp0
    285 U0195 ????						; RamKernelGemini1
    286 U0195 ????						; RamKernelGemini1Reg
    287 U0195 ????						; RamKernelGemini2
    288 U0195 ????						; RamKernelGemini2Reg
    289 U0195 ????						; RamKernelGemini3
    290 U0195 ????						; RamKernelGemini3Reg
    291 U0195 ????						; RamKernelGemini4
    292 U0195 ????
    293 U0195 ????						; VD1 default
    294 U0195 ????	       a6 ee		      ldx	[DO_GEMS_A + 1]
    295 U0197 ????	       86 e5		      stx	BuildKernelVdel1
    296 U0199 ????
    297 U0199 ????						; Gemini 4A
    298 U0199 ????	       ae d5 fa 	      ldx	SHARD_LUT_VD1
    299 U019c ????	       e0 04		      cpx	#4
      0 U019e ????				      NIBBLE_IF	ne
      0 U019e ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U019e ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U019e ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    304 U019e ????
    305 U019e ????						; Set PHP
    306 U019e ????	       a2 26		      ldx	#VDELP1
    307 U01a0 ????	       86 d6		      stx	RamKernelPhpTarget
    308 U01a2 ????
    309 U01a2 ????						; Update VDEL1
    310 U01a2 ????	       a6 f1		      ldx	[DO_GEMS_A + 4]
    311 U01a4 ????	       86 e5		      stx	BuildKernelVdel1
      0 U01a6 ????				      NIBBLE_ELSE
    313 U01a6 ????	       a4 f1		      ldy	[DO_GEMS_A + 4]
    314 U01a8 ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    315 U01ab ????	       84 de		      sty	RamKernelGemini4
    316 U01ad ????
      0 U01ad ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U01ad ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U01ad ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    320 U01ad ????
    321 U01ad ????						; Set PHP
    322 U01ad ????	       a2 11		      ldx	#RESP1
    323 U01af ????	       86 d6		      stx	RamKernelPhpTarget
      0 U01b1 ????				      NIBBLE_END_IF
    325 U01b1 ????
    326 U01b1 ????						; Gemini 5A
    327 U01b1 ????						; TODO eventually...?
    328 U01b1 ????
    329 U01b1 ????						; Missile
    330 U01b1 ????	       a4 eb		      ldy	DO_MISS_A
    331 U01b3 ????						; FIXME Why doesn't this branch compile?
    332 U01b3 ????						; bne .+4
    333 U01b3 ????						; ldx #BC_NOP
    334 U01b3 ????						; stx BuildKernelMissile
      0 U01b3 ????				      NIBBLE_WRITE	[KernelA_F - $100], BuildKernelMissile
    336 U01b3 ????
    337 U01b3 ????						; VD1
      0 U01b3 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    339 U01b3 ????						; GRP0
      0 U01b3 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    341 U01b3 ????
      0 U01b3 ????				      NIBBLE_WRITE	RamPSByte, #$ff
      0 U01b3 ????				      NIBBLE_END_KERNEL
      1  f61b					      seg	CodeBank3
    344  f61b
    345  f61b							; Nibble Kernel B
      0  f61b					      NIBBLE_START_KERNEL	gem_kernel_b_1, 40
      1 U01b3 ????				      seg.U	ignoreme
    347 U01b3 ????						; RAM:
    348 U01b3 ????						; RamKernelX
    349 U01b3 ????						; RamKernelY
    350 U01b3 ????						; RamPSByte
    351 U01b3 ????						; RamKernelGrp0
    352 U01b3 ????						; RamKernelGemini1
    353 U01b3 ????						; RamKernelGemini2
    354 U01b3 ????						; RamKernelGemini3
    355 U01b3 ????						; RamKernelGemini4
    356 U01b3 ????
    357 U01b3 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    358 U01b5 ????	       86 e1		      stx	BuildKernelX
    359 U01b7 ????	       86 e2		      stx	BuildKernelY
    360 U01b9 ????	       86 e3		      stx	BuildKernelRST
    361 U01bb ????
    362 U01bb ????						; Php target default
    363 U01bb ????	       a2 11		      ldx	#RESP1
    364 U01bd ????	       86 d6		      stx	RamKernelPhpTarget
    365 U01bf ????
    366 U01bf ????						; Gemini 0B
    367 U01bf ????	       a4 f3		      ldy	[DO_GEMS_B + 0]
    368 U01c1 ????	       84 e4		      sty	BuildKernelGrp0
    369 U01c3 ????	       84 d7		      sty	RamKernelGrp0
    370 U01c5 ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    371 U01c5 ????
    372 U01c5 ????						; Gemini 1B
    373 U01c5 ????	       a4 f4		      ldy	[DO_GEMS_B + 1]
    374 U01c7 ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    375 U01ca ????	       84 d8		      sty	RamKernelGemini1
    376 U01cc ????
    377 U01cc ????						; Gemini 2B
    378 U01cc ????	       a4 f5		      ldy	[DO_GEMS_B + 2]
    379 U01ce ????	       20 bf f5 	      jsr	KernelB_GenPhp
      0 U01d1 ????				      NIBBLE_IF	eq
      0 U01d1 ????				      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1 U01d1 ????			   .OFFSET    SET	3
      2 U01d1 ????			   .TARGET    SET	RamKernelGemini3
      3 U01d1 ????	       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01d3 ????	       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5 U01d6 ????	       84 dc		      sty	.TARGET
    382 U01d8 ????
    383 U01d8 ????						; Write to PHP in 2B
    384 U01d8 ????	       a2 1c		      ldx	#EMERALD_SP
    385 U01da ????	       86 d6		      stx	RamKernelPhpTarget
      0 U01dc ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U01dc ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U01dc ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U01dc ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
    390 U01dc ????
    391 U01dc ????						; Update Grp0
    392 U01dc ????	       a4 e3		      ldy	BuildKernelRST
    393 U01de ????	       84 d7		      sty	RamKernelGrp0
    394 U01e0 ????
    395 U01e0 ????						; Update 3B
      0 U01e0 ????				      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1 U01e0 ????			   .OFFSET    SET	3
      2 U01e0 ????			   .TARGET    SET	RamKernelGemini3
      3 U01e0 ????	       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01e2 ????	       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5 U01e5 ????	       84 dc		      sty	.TARGET
      0 U01e7 ????				      NIBBLE_WRITE	KernelB_H_W, RamKernelGemini3, #EMERALD_SP
      0 U01e7 ????				      NIBBLE_ELSE
    399 U01e7 ????						; Update 2B
      0 U01e7 ????				      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1 U01e7 ????			   .OFFSET    SET	2
      2 U01e7 ????			   .TARGET    SET	RamKernelGemini2
      3 U01e7 ????	       a4 f5		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01e9 ????	       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5 U01ec ????	       84 da		      sty	.TARGET
      0 U01ee ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
    402 U01ee ????
    403 U01ee ????						; Gemini 3B
    404 U01ee ????	       a4 f6		      ldy	[DO_GEMS_B + 3]
    405 U01f0 ????	       20 bf f5 	      jsr	KernelB_GenPhp
      0 U01f3 ????				      NIBBLE_IF	eq
    407 U01f3 ????						; Write to PHP in 3B
      0 U01f3 ????				      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1 U01f3 ????			   .OFFSET    SET	2
      2 U01f3 ????			   .TARGET    SET	RamKernelGemini2
      3 U01f3 ????	       a4 f5		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01f5 ????	       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5 U01f8 ????	       84 da		      sty	.TARGET
    409 U01fa ????	       a2 1c		      ldx	#EMERALD_SP
    410 U01fc ????	       86 d6		      stx	RamKernelPhpTarget
      0 U01fe ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U01fe ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U01fe ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U01fe ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
    415 U01fe ????
    416 U01fe ????						; Update Grp0
    417 U01fe ????	       a4 e3		      ldy	BuildKernelRST
    418 U0200 ????	       84 d7		      sty	RamKernelGrp0
      0 U0202 ????				      NIBBLE_ELSE
    420 U0202 ????						; Update 3B
      0 U0202 ????				      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1 U0202 ????			   .OFFSET    SET	3
      2 U0202 ????			   .TARGET    SET	RamKernelGemini3
      3 U0202 ????	       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4 U0204 ????	       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5 U0207 ????	       84 dc		      sty	.TARGET
      0 U0209 ????				      NIBBLE_WRITE	KernelB_H_W, RamKernelGemini3, #EMERALD_SP
      0 U0209 ????				      NIBBLE_END_IF
      0 U0209 ????				      NIBBLE_END_IF
    425 U0209 ????
      0 U0209 ????				      NIBBLE_END_KERNEL
      1  f61b					      seg	CodeBank3
    427  f61b
    428  f61b							; Nibble Kernel B
      0  f61b					      NIBBLE_START_KERNEL	gem_kernel_b_2, 40
      1 U0209 ????				      seg.U	ignoreme
    430 U0209 ????						; Gemini 1B
      0 U0209 ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    432 U0209 ????
    433 U0209 ????						; Write out PHP flag comparison
    434 U0209 ????	       a4 e3		      ldy	BuildKernelRST
    435 U020b ????	       c0 60		      cpy	#G01
      0 U020d ????				      NIBBLE_IF	eq
      0 U020d ????				      NIBBLE_WRITE	[KernelB_C - $100 + 1], #RamFFByte
      0 U020d ????				      NIBBLE_ELSE
      0 U020d ????				      NIBBLE_WRITE	[KernelB_C - $100 + 1], #RamPF1Value
      0 U020d ????				      NIBBLE_END_IF
    441 U020d ????
    442 U020d ????						; Missile
    443 U020d ????						; ldy DO_MISS_B
    444 U020d ????						; NIBBLE_IF eq ; Disabled
    445 U020d ????						; NIBBLE_WRITE [KernelB_K - $100], #BC_STA
    446 U020d ????						; NIBBLE_ELSE
    447 U020d ????						;     NIBBLE_WRITE [KernelB_K - $100], BuildKernelMissile
    448 U020d ????						; NIBBLE_END_IF
    449 U020d ????
    450 U020d ????						; Gemini 4B
    451 U020d ????	       a4 f7		      ldy	[DO_GEMS_B + 4]
    452 U020f ????	       20 d3 f5 	      jsr	KernelA_UpdateRegs
    453 U0212 ????	       84 de		      sty	RamKernelGemini4
      0 U0214 ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    455 U0214 ????
    456 U0214 ????						; TODO if no PHP, rewrite previous section:
    457 U0214 ????						; NIBBLE_IF cs
    458 U0214 ????						;     ; Write to PHP in reset command
    459 U0214 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    460 U0214 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    461 U0214 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    462 U0214 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    463 U0214 ????						; NIBBLE_END_IF
    464 U0214 ????
    465 U0214 ????						; Make adjustments for sprites.
    466 U0214 ????	       66 e4		      ror	BuildKernelGrp0
    467 U0216 ????	       66 e1		      ror	BuildKernelX
    468 U0218 ????	       66 e2		      ror	BuildKernelY
    469 U021a ????
    470 U021a ????						; ; VD1
    471 U021a ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    472 U021a ????						; GRP0
      0 U021a ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    474 U021a ????
      0 U021a ????				      NIBBLE_WRITE	RamPSByte, #$00
    476 U021a ????
      0 U021a ????				      NIBBLE_END_KERNEL
      1  f61b					      seg	CodeBank3
    478  f61b
    479  f61b							; TODO do this for all rows
    480  f61b				   DBG_NIBBLE_BUILD subroutine
    481  f61b		       ae 00 f1 	      ldx	$f100
    482  f61e		       e0 0a		      cpx	#$a
    483  f620		       f0 03		      beq	[. + 5]
    484  f622		       4c 0f f7 	      jmp	.kernel_b
    485  f625				   .kernel_a
      0  f625					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f625		       a9 00		      lda	#0
      2  f627		       a2 aa		      ldx	#SENTINEL
      3  f629		       86 e1		      stx	BuildKernelX
      4  f62b		       86 e2		      stx	BuildKernelY
      5  f62d		       86 e3		      stx	BuildKernelRST
      6  f62f
      7  f62f				   .K_1A
      8  f62f		       a4 ed		      ldy	[DO_GEMS_A + 0]
      9  f631		       20 ad f5 	      jsr	KernelA_GenReset
     10  f634				   .if_1
     11  f634		       d0 20		      bne	.else_1
     12  f636		       38		      sec
     13  f637		       2a		      rol
     14  f638
     15  f638
     16  f638		       a0 a9		      ldy	#BC_LDA_IMM
     17  f63a		       8c 15 f0 	      sty	[KernelA_B - $100]
     18  f63d		       a0 a0		      ldy	#%10100000
     19  f63f		       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
     20  f642
     21  f642		       a4 ee		      ldy	[DO_GEMS_A + 1]
     22  f644		       84 e4		      sty	BuildKernelGrp0
     23  f646		       84 d7		      sty	RamKernelGrp0
     24  f648
     25  f648		       a0 11		      ldy	#EMERALD_SP_RESET
     26  f64a		       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
     27  f64d
     28  f64d		       a0 14		      ldy	#$14
     29  f64f		       8c 19 f0 	      sty	[KernelA_D - $100]
     30  f652		       2a		      rol
     31  f653
     32  f653		       4c 8a f6 	      jmp	.endif_1
     33  f656
     34  f656				   .else_1
     35  f656		       18		      clc
     36  f657		       2a		      rol
     37  f658
     38  f658		       a4 ed		      ldy	[DO_GEMS_A + 0]
     39  f65a		       84 e4		      sty	BuildKernelGrp0
     40  f65c		       84 d7		      sty	RamKernelGrp0
     41  f65e		       a4 ee		      ldy	[DO_GEMS_A + 1]
     42  f660		       20 ad f5 	      jsr	KernelA_GenReset
     43  f663				   .if_2
     44  f663		       d0 05		      bne	.else_2
     45  f665		       38		      sec
     46  f666		       2a		      rol
     47  f667
     48  f667
     49  f667		       4c 8a f6 	      jmp	.endif_2
     50  f66a
     51  f66a				   .else_2
     52  f66a		       18		      clc
     53  f66b		       2a		      rol
     54  f66c
     55  f66c		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     56  f66f		       c0 01		      cpy	#1
     57  f671		       d0 03		      .byte.b	$D0, #3
     58  f673		       a0 11		      ldy	#RESP1
     59  f675		       2c		      .byte.b	$2C
     60  f676		       a0 1c		      ldy	#GRP1
     61  f678		       84 d9		      sty	RamKernelGemini1Reg
     62  f67a
     63  f67a		       ae d4 fa 	      ldx	SHARD_LUT_RF1
     64  f67d		       e0 01		      cpx	#1
     65  f67f		       a0 86		      ldy	#BC_STX
     66  f681		       f0 05		      .byte.b	$F0, #5
     67  f683		       a4 ee		      ldy	[DO_GEMS_A + 1]
     68  f685		       20 d3 f5 	      jsr	KernelA_UpdateRegs
     69  f688		       84 d8		      sty	RamKernelGemini1
     70  f68a
     71  f68a
     72  f68a				   .endif_2
     73  f68a
     74  f68a
     75  f68a				   .endif_1
     76  f68a
     77  f68a		       a0 aa		      ldy	#SENTINEL
     78  f68c		       84 d7		      sty	RamKernelGrp0
     79  f68e
     80  f68e
     81  f68e				   .K_2A
     82  f68e		       a4 ef		      ldy	[DO_GEMS_A + 2]
     83  f690		       20 ad f5 	      jsr	KernelA_GenReset
     84  f693				   .if_3
     85  f693		       d0 05		      bne	.else_3
     86  f695		       38		      sec
     87  f696		       2a		      rol
     88  f697
     89  f697		       4c b1 f6 	      jmp	.endif_3
     90  f69a
     91  f69a				   .else_3
     92  f69a		       18		      clc
     93  f69b		       2a		      rol
     94  f69c
     95  f69c		       a4 ef		      ldy	[DO_GEMS_A + 2]
     96  f69e		       20 d3 f5 	      jsr	KernelA_UpdateRegs
     97  f6a1		       84 da		      sty	RamKernelGemini2
     98  f6a3
     99  f6a3		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    100  f6a6		       c0 02		      cpy	#2
    101  f6a8		       d0 03		      .byte.b	$D0, #3
    102  f6aa		       a0 11		      ldy	#RESP1
    103  f6ac		       2c		      .byte.b	$2C
    104  f6ad		       a0 1c		      ldy	#GRP1
    105  f6af		       84 db		      sty	RamKernelGemini2Reg
    106  f6b1
    107  f6b1
    108  f6b1				   .endif_3
    109  f6b1
    110  f6b1				   .K_3A
    111  f6b1		       a4 f0		      ldy	[DO_GEMS_A + 3]
    112  f6b3		       20 ad f5 	      jsr	KernelA_GenReset
    113  f6b6				   .if_4
    114  f6b6		       d0 05		      bne	.else_4
    115  f6b8		       38		      sec
    116  f6b9		       2a		      rol
    117  f6ba
    118  f6ba		       4c d4 f6 	      jmp	.endif_4
    119  f6bd
    120  f6bd				   .else_4
    121  f6bd		       18		      clc
    122  f6be		       2a		      rol
    123  f6bf
    124  f6bf		       a4 f0		      ldy	[DO_GEMS_A + 3]
    125  f6c1		       20 d3 f5 	      jsr	KernelA_UpdateRegs
    126  f6c4		       84 dc		      sty	RamKernelGemini3
    127  f6c6
    128  f6c6		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    129  f6c9		       c0 03		      cpy	#3
    130  f6cb		       d0 03		      .byte.b	$D0, #3
    131  f6cd		       a0 11		      ldy	#RESP1
    132  f6cf		       2c		      .byte.b	$2C
    133  f6d0		       a0 1c		      ldy	#GRP1
    134  f6d2		       84 dd		      sty	RamKernelGemini3Reg
    135  f6d4
    136  f6d4
    137  f6d4				   .endif_4
    138  f6d4
    139  f6d4		       2a		      rol
    140  f6d5		       2a		      rol
    141  f6d6		       2a		      rol
    142  f6d7		       2a		      rol
    487  f6d8		       85 cc		      sta	RamNibbleVar1
      0  f6da					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f6da		       a9 00		      lda	#0
      2  f6dc
      3  f6dc
      4  f6dc
      5  f6dc
      6  f6dc
      7  f6dc
      8  f6dc
      9  f6dc
     10  f6dc
     11  f6dc
     12  f6dc
     13  f6dc
     14  f6dc
     15  f6dc
     16  f6dc		       a6 ee		      ldx	[DO_GEMS_A + 1]
     17  f6de		       86 e5		      stx	BuildKernelVdel1
     18  f6e0
     19  f6e0		       ae d5 fa 	      ldx	SHARD_LUT_VD1
     20  f6e3		       e0 04		      cpx	#4
     21  f6e5				   .if_1
     22  f6e5		       f0 0d		      beq	.else_1
     23  f6e7		       38		      sec
     24  f6e8		       2a		      rol
     25  f6e9
     26  f6e9		       a2 26		      ldx	#VDELP1
     27  f6eb		       86 d6		      stx	RamKernelPhpTarget
     28  f6ed
     29  f6ed		       a6 f1		      ldx	[DO_GEMS_A + 4]
     30  f6ef		       86 e5		      stx	BuildKernelVdel1
     31  f6f1
     32  f6f1		       4c 01 f7 	      jmp	.endif_1
     33  f6f4
     34  f6f4				   .else_1
     35  f6f4		       18		      clc
     36  f6f5		       2a		      rol
     37  f6f6		       a4 f1		      ldy	[DO_GEMS_A + 4]
     38  f6f8		       20 d3 f5 	      jsr	KernelA_UpdateRegs
     39  f6fb		       84 de		      sty	RamKernelGemini4
     40  f6fd
     41  f6fd		       a2 11		      ldx	#RESP1
     42  f6ff		       86 d6		      stx	RamKernelPhpTarget
     43  f701
     44  f701
     45  f701				   .endif_1
     46  f701
     47  f701
     48  f701
     49  f701		       a4 eb		      ldy	DO_MISS_A
     50  f703
     51  f703
     52  f703
     53  f703
     54  f703
     55  f703
     56  f703
     57  f703		       2a		      rol
     58  f704		       2a		      rol
     59  f705		       2a		      rol
     60  f706		       2a		      rol
     61  f707		       2a		      rol
     62  f708		       2a		      rol
     63  f709		       2a		      rol
    489  f70a		       85 cd		      sta	RamNibbleVar2
    490  f70c		       4c a7 f7 	      jmp	.next
    491  f70f				   .kernel_b
      0  f70f					      NIBBLE_gem_kernel_b_1_BUILD		; TODO can this be implied
      1  f70f		       a9 00		      lda	#0
      2  f711
      3  f711
      4  f711
      5  f711
      6  f711
      7  f711
      8  f711
      9  f711
     10  f711
     11  f711		       a2 aa		      ldx	#SENTINEL
     12  f713		       86 e1		      stx	BuildKernelX
     13  f715		       86 e2		      stx	BuildKernelY
     14  f717		       86 e3		      stx	BuildKernelRST
     15  f719
     16  f719		       a2 11		      ldx	#RESP1
     17  f71b		       86 d6		      stx	RamKernelPhpTarget
     18  f71d
     19  f71d		       a4 f3		      ldy	[DO_GEMS_B + 0]
     20  f71f		       84 e4		      sty	BuildKernelGrp0
     21  f721		       84 d7		      sty	RamKernelGrp0
     22  f723
     23  f723
     24  f723		       a4 f4		      ldy	[DO_GEMS_B + 1]
     25  f725		       20 d3 f5 	      jsr	KernelA_UpdateRegs
     26  f728		       84 d8		      sty	RamKernelGemini1
     27  f72a
     28  f72a		       a4 f5		      ldy	[DO_GEMS_B + 2]
     29  f72c		       20 bf f5 	      jsr	KernelB_GenPhp
     30  f72f				   .if_1
     31  f72f		       d0 1c		      bne	.else_1
     32  f731		       38		      sec
     33  f732		       2a		      rol
      0  f733					      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1  f733				   .OFFSET    SET	3
      2  f733				   .TARGET    SET	RamKernelGemini3
      3  f733		       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4  f735		       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5  f738		       84 dc		      sty	.TARGET
     35  f73a
     36  f73a		       a2 1c		      ldx	#EMERALD_SP
     37  f73c		       86 d6		      stx	RamKernelPhpTarget
     38  f73e
     39  f73e		       a4 e3		      ldy	BuildKernelRST
     40  f740		       84 d7		      sty	RamKernelGrp0
     41  f742
     42  f742
      0  f742					      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1  f742				   .OFFSET    SET	3
      2  f742				   .TARGET    SET	RamKernelGemini3
      3  f742		       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4  f744		       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5  f747		       84 dc		      sty	.TARGET
     44  f749		       2a		      rol
     45  f74a
     46  f74a		       4c 7a f7 	      jmp	.endif_1
     47  f74d
     48  f74d				   .else_1
     49  f74d		       18		      clc
     50  f74e		       2a		      rol
     51  f74f
      0  f74f					      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1  f74f				   .OFFSET    SET	2
      2  f74f				   .TARGET    SET	RamKernelGemini2
      3  f74f		       a4 f5		      ldy	[DO_GEMS_B + .OFFSET]
      4  f751		       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5  f754		       84 da		      sty	.TARGET
     53  f756
     54  f756		       a4 f6		      ldy	[DO_GEMS_B + 3]
     55  f758		       20 bf f5 	      jsr	KernelB_GenPhp
     56  f75b				   .if_2
     57  f75b		       d0 14		      bne	.else_2
     58  f75d		       38		      sec
     59  f75e		       2a		      rol
     60  f75f
      0  f75f					      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1  f75f				   .OFFSET    SET	2
      2  f75f				   .TARGET    SET	RamKernelGemini2
      3  f75f		       a4 f5		      ldy	[DO_GEMS_B + .OFFSET]
      4  f761		       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5  f764		       84 da		      sty	.TARGET
     62  f766		       a2 1c		      ldx	#EMERALD_SP
     63  f768		       86 d6		      stx	RamKernelPhpTarget
     64  f76a
     65  f76a
     66  f76a		       a4 e3		      ldy	BuildKernelRST
     67  f76c		       84 d7		      sty	RamKernelGrp0
     68  f76e
     69  f76e		       4c 7a f7 	      jmp	.endif_2
     70  f771
     71  f771				   .else_2
     72  f771		       18		      clc
     73  f772		       2a		      rol
     74  f773
      0  f773					      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1  f773				   .OFFSET    SET	3
      2  f773				   .TARGET    SET	RamKernelGemini3
      3  f773		       a4 f6		      ldy	[DO_GEMS_B + .OFFSET]
      4  f775		       20 d3 f5 	      jsr	KernelB_UpdateRegs
      5  f778		       84 dc		      sty	.TARGET
     76  f77a
     77  f77a
     78  f77a				   .endif_2
     79  f77a
     80  f77a
     81  f77a				   .endif_1
     82  f77a
     83  f77a		       2a		      rol
     84  f77b		       2a		      rol
     85  f77c		       2a		      rol
     86  f77d		       2a		      rol
     87  f77e		       2a		      rol
     88  f77f		       2a		      rol
    493  f780		       85 cc		      sta	RamNibbleVar1
      0  f782					      NIBBLE_gem_kernel_b_2_BUILD		; TODO can this be implied
      1  f782		       a9 00		      lda	#0
      2  f784
      3  f784
      4  f784		       a4 e3		      ldy	BuildKernelRST
      5  f786		       c0 60		      cpy	#G01
      6  f788				   .if_1
      7  f788		       d0 05		      bne	.else_1
      8  f78a		       38		      sec
      9  f78b		       2a		      rol
     10  f78c
     11  f78c		       4c 91 f7 	      jmp	.endif_1
     12  f78f
     13  f78f				   .else_1
     14  f78f		       18		      clc
     15  f790		       2a		      rol
     16  f791
     17  f791
     18  f791				   .endif_1
     19  f791
     20  f791
     21  f791
     22  f791
     23  f791
     24  f791
     25  f791
     26  f791
     27  f791		       a4 f7		      ldy	[DO_GEMS_B + 4]
     28  f793		       20 d3 f5 	      jsr	KernelA_UpdateRegs
     29  f796		       84 de		      sty	RamKernelGemini4
     30  f798
     31  f798
     32  f798
     33  f798
     34  f798
     35  f798
     36  f798
     37  f798
     38  f798
     39  f798		       66 e4		      ror	BuildKernelGrp0
     40  f79a		       66 e1		      ror	BuildKernelX
     41  f79c		       66 e2		      ror	BuildKernelY
     42  f79e
     43  f79e
     44  f79e
     45  f79e
     46  f79e		       2a		      rol
     47  f79f		       2a		      rol
     48  f7a0		       2a		      rol
     49  f7a1		       2a		      rol
     50  f7a2		       2a		      rol
     51  f7a3		       2a		      rol
     52  f7a4		       2a		      rol
    495  f7a5		       85 cd		      sta	RamNibbleVar2
    496  f7a7				   .next
    497  f7a7
    498  f7a7							; TODO move this into the row kernel
    499  f7a7				   DBG_NIBBLE_RUN subroutine
    500  f7a7		       ae 00 f1 	      ldx	$f100
    501  f7aa		       e0 0a		      cpx	#$a
    502  f7ac		       f0 03		      beq	[. + 5]
    503  f7ae		       4c 63 f8 	      jmp	.kernel_b
    504  f7b1				   .kernel_a
    505  f7b1		       a5 cc		      lda	RamNibbleVar1
      0  f7b3					      NIBBLE_gem_kernel_a_1
      1  f7b3				   .if_1
      2  f7b3		       0a		      asl
      3  f7b4		       90 09		      bcc	.else_1
      4  f7b6		       2a		      rol
      0  f7b7					      sleep	10
      1  f7b7				   .CYCLES    SET	10
      2  f7b7
      3  f7b7				  -	      IF	.CYCLES < 2
      4  f7b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7b7				  -	      ERR
      6  f7b7					      ENDIF
      7  f7b7
      8  f7b7				  -	      IF	.CYCLES & 1
      9  f7b7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7b7				  -	      nop	0
     11  f7b7				  -	      ELSE
     12  f7b7				  -	      bit	VSYNC
     13  f7b7				  -	      ENDIF
     14  f7b7				  -.CYCLES    SET	.CYCLES - 3
     15  f7b7					      ENDIF
     16  f7b7
     17  f7b7					      REPEAT	.CYCLES / 2
     18  f7b7		       ea		      nop
     17  f7b7					      REPEND
     18  f7b8		       ea		      nop
     17  f7b8					      REPEND
     18  f7b9		       ea		      nop
     17  f7b9					      REPEND
     18  f7ba		       ea		      nop
     17  f7ba					      REPEND
     18  f7bb		       ea		      nop
     19  f7bc					      REPEND
      6  f7bc		       4c da f7 	      jmp	.endif_1
      7  f7bf				   .else_1
      8  f7bf				   .if_2
      9  f7bf		       0a		      asl
     10  f7c0		       90 0d		      bcc	.else_2
     11  f7c2		       a2 86		      ldx	#BC_STX
     12  f7c4		       8e 19 f0 	      stx	[KernelA_D_W + 0]
     13  f7c7		       a2 11		      ldx	#RESP1
     14  f7c9		       8e 1a f0 	      stx	[KernelA_D_W + 1]
     15  f7cc
     16  f7cc		       4c da f7 	      jmp	.endif_2
     17  f7cf				   .else_2
     18  f7cf		       a6 d8		      ldx	RamKernelGemini1
     19  f7d1		       8e 19 f0 	      stx	[KernelA_D_W + 0]
     20  f7d4		       a6 d9		      ldx	RamKernelGemini1Reg
     21  f7d6		       8e 1a f0 	      stx	[KernelA_D_W + 1]
     22  f7d9
     23  f7d9
      0  f7d9					      sleep	2
      1  f7d9				   .CYCLES    SET	2
      2  f7d9
      3  f7d9				  -	      IF	.CYCLES < 2
      4  f7d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7d9				  -	      ERR
      6  f7d9					      ENDIF
      7  f7d9
      8  f7d9				  -	      IF	.CYCLES & 1
      9  f7d9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7d9				  -	      nop	0
     11  f7d9				  -	      ELSE
     12  f7d9				  -	      bit	VSYNC
     13  f7d9				  -	      ENDIF
     14  f7d9				  -.CYCLES    SET	.CYCLES - 3
     15  f7d9					      ENDIF
     16  f7d9
     17  f7d9					      REPEAT	.CYCLES / 2
     18  f7d9		       ea		      nop
     19  f7da					      REPEND
     25  f7da				   .endif_2
     26  f7da
     27  f7da
     28  f7da				   .endif_1
     29  f7da				   .if_3
     30  f7da		       0a		      asl
     31  f7db		       90 0f		      bcc	.else_3
     32  f7dd		       a2 79		      ldx	#NOP_REG
     33  f7df		       8e 1c f0 	      stx	[KernelA_E_W + 1 + 0]
     34  f7e2		       a2 11		      ldx	#RESP1
     35  f7e4		       8e 20 f0 	      stx	[KernelA_G_W + 1 + 0]
      0  f7e7					      sleep	4
      1  f7e7				   .CYCLES    SET	4
      2  f7e7
      3  f7e7				  -	      IF	.CYCLES < 2
      4  f7e7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7e7				  -	      ERR
      6  f7e7					      ENDIF
      7  f7e7
      8  f7e7				  -	      IF	.CYCLES & 1
      9  f7e7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7e7				  -	      nop	0
     11  f7e7				  -	      ELSE
     12  f7e7				  -	      bit	VSYNC
     13  f7e7				  -	      ENDIF
     14  f7e7				  -.CYCLES    SET	.CYCLES - 3
     15  f7e7					      ENDIF
     16  f7e7
     17  f7e7					      REPEAT	.CYCLES / 2
     18  f7e7		       ea		      nop
     17  f7e7					      REPEND
     18  f7e8		       ea		      nop
     19  f7e9					      REPEND
     37  f7e9		       4c fb f7 	      jmp	.endif_3
     38  f7ec				   .else_3
     39  f7ec		       a2 11		      ldx	#RESP1
     40  f7ee		       8e 1c f0 	      stx	[KernelA_E_W + 1 + 0]
     41  f7f1		       a6 da		      ldx	RamKernelGemini2
     42  f7f3		       8e 1f f0 	      stx	[KernelA_G_W + 0]
     43  f7f6		       a6 db		      ldx	RamKernelGemini2Reg
     44  f7f8		       8e 20 f0 	      stx	[KernelA_G_W + 1]
     45  f7fb
     46  f7fb
     47  f7fb				   .endif_3
     48  f7fb				   .if_4
     49  f7fb		       0a		      asl
     50  f7fc		       90 0a		      bcc	.else_4
     51  f7fe		       a2 11		      ldx	#RESP1
     52  f800		       8e 22 f0 	      stx	[KernelA_H_W + 1 + 0]
      0  f803					      sleep	4
      1  f803				   .CYCLES    SET	4
      2  f803
      3  f803				  -	      IF	.CYCLES < 2
      4  f803				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f803				  -	      ERR
      6  f803					      ENDIF
      7  f803
      8  f803				  -	      IF	.CYCLES & 1
      9  f803				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f803				  -	      nop	0
     11  f803				  -	      ELSE
     12  f803				  -	      bit	VSYNC
     13  f803				  -	      ENDIF
     14  f803				  -.CYCLES    SET	.CYCLES - 3
     15  f803					      ENDIF
     16  f803
     17  f803					      REPEAT	.CYCLES / 2
     18  f803		       ea		      nop
     17  f803					      REPEND
     18  f804		       ea		      nop
     19  f805					      REPEND
     54  f805		       4c 12 f8 	      jmp	.endif_4
     55  f808				   .else_4
     56  f808		       a6 dc		      ldx	RamKernelGemini3
     57  f80a		       8e 21 f0 	      stx	[KernelA_H_W + 0]
     58  f80d		       a6 dd		      ldx	RamKernelGemini3Reg
     59  f80f		       8e 22 f0 	      stx	[KernelA_H_W + 1]
     60  f812
     61  f812
     62  f812				   .endif_4
    507  f812		       a5 cd		      lda	RamNibbleVar2
      0  f814					      NIBBLE_gem_kernel_a_2
      1  f814				   .if_1
      2  f814		       0a		      asl
      3  f815		       90 1c		      bcc	.else_1
      4  f817		       a2 85		      ldx	#BC_STA
      5  f819		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f81c		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f81e		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f821		       a2 85		      ldx	#BC_STA
      9  f823		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f826		       a2 0e		      ldx	#PF1
     11  f828		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f82b		       a2 08		      ldx	#BC_PHP
     13  f82d		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f830
     15  f830		       4c 4d f8 	      jmp	.endif_1
     16  f833				   .else_1
     17  f833		       a2 08		      ldx	#BC_PHP
     18  f835		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     19  f838		       a2 85		      ldx	#BC_STA
     20  f83a		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     21  f83d		       a2 0e		      ldx	#PF1
     22  f83f		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     23  f842		       a6 de		      ldx	RamKernelGemini4
     24  f844		       8e 26 f0 	      stx	[KernelA_K_W + 0]
     25  f847		       a2 1c		      ldx	#EMERALD_SP
     26  f849		       8e 27 f0 	      stx	[KernelA_K_W + 1]
     27  f84c
     28  f84c
      0  f84c					      sleep	2
      1  f84c				   .CYCLES    SET	2
      2  f84c
      3  f84c				  -	      IF	.CYCLES < 2
      4  f84c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f84c				  -	      ERR
      6  f84c					      ENDIF
      7  f84c
      8  f84c				  -	      IF	.CYCLES & 1
      9  f84c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f84c				  -	      nop	0
     11  f84c				  -	      ELSE
     12  f84c				  -	      bit	VSYNC
     13  f84c				  -	      ENDIF
     14  f84c				  -.CYCLES    SET	.CYCLES - 3
     15  f84c					      ENDIF
     16  f84c
     17  f84c					      REPEAT	.CYCLES / 2
     18  f84c		       ea		      nop
     19  f84d					      REPEND
     30  f84d				   .endif_1
     31  f84d		       a6 e6		      ldx	BuildKernelMissile
     32  f84f		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     33  f852		       a6 e5		      ldx	BuildKernelVdel1
     34  f854		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     35  f857		       a6 e4		      ldx	BuildKernelGrp0
     36  f859		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     37  f85c		       a2 ff		      ldx	#$ff
     38  f85e		       86 d3		      stx	[RamPSByte + 0]
    509  f860		       4c 0d f9 	      jmp	.next
    510  f863				   .kernel_b
    511  f863		       a5 cc		      lda	RamNibbleVar1
      0  f865					      NIBBLE_gem_kernel_b_1
      1  f865				   .if_1
      2  f865		       0a		      asl
      3  f866		       90 31		      bcc	.else_1
      4  f868		       a2 84		      ldx	#BC_STY
      5  f86a		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
      6  f86d		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f86f		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
      8  f872		       a2 08		      ldx	#BC_PHP
      9  f874		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     10  f877		       a2 85		      ldx	#BC_STA
     11  f879		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     12  f87c		       a2 0e		      ldx	#PF1
     13  f87e		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     14  f881		       a6 dc		      ldx	RamKernelGemini3
     15  f883		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     16  f886		       a2 1c		      ldx	#EMERALD_SP
     17  f888		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     18  f88b		       a6 dc		      ldx	RamKernelGemini3
     19  f88d		       8e 22 f0 	      stx	[KernelB_H_W + 0]
     20  f890		       a2 1c		      ldx	#EMERALD_SP
     21  f892		       8e 23 f0 	      stx	[KernelB_H_W + 1]
     22  f895		       2a		      rol
     23  f896
     24  f896		       4c e7 f8 	      jmp	.endif_1
     25  f899				   .else_1
     26  f899		       a6 da		      ldx	RamKernelGemini2
     27  f89b		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     28  f89e		       a2 1c		      ldx	#EMERALD_SP
     29  f8a0		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     30  f8a3				   .if_2
     31  f8a3		       0a		      asl
     32  f8a4		       90 26		      bcc	.else_2
     33  f8a6		       a2 84		      ldx	#BC_STY
     34  f8a8		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     35  f8ab		       a2 11		      ldx	#EMERALD_SP_RESET
     36  f8ad		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     37  f8b0		       a6 da		      ldx	RamKernelGemini2
     38  f8b2		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     39  f8b5		       a2 1c		      ldx	#EMERALD_SP
     40  f8b7		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     41  f8ba		       a2 85		      ldx	#BC_STA
     42  f8bc		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     43  f8bf		       a2 0e		      ldx	#PF1
     44  f8c1		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     45  f8c4		       a2 08		      ldx	#BC_PHP
     46  f8c6		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     47  f8c9
     48  f8c9		       4c e6 f8 	      jmp	.endif_2
     49  f8cc				   .else_2
     50  f8cc		       a6 dc		      ldx	RamKernelGemini3
     51  f8ce		       8e 22 f0 	      stx	[KernelB_H_W + 0]
     52  f8d1		       a2 1c		      ldx	#EMERALD_SP
     53  f8d3		       8e 23 f0 	      stx	[KernelB_H_W + 1]
     54  f8d6
     55  f8d6
      0  f8d6					      sleep	32
      1  f8d6				   .CYCLES    SET	32
      2  f8d6
      3  f8d6				  -	      IF	.CYCLES < 2
      4  f8d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8d6				  -	      ERR
      6  f8d6					      ENDIF
      7  f8d6
      8  f8d6				  -	      IF	.CYCLES & 1
      9  f8d6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8d6				  -	      nop	0
     11  f8d6				  -	      ELSE
     12  f8d6				  -	      bit	VSYNC
     13  f8d6				  -	      ENDIF
     14  f8d6				  -.CYCLES    SET	.CYCLES - 3
     15  f8d6					      ENDIF
     16  f8d6
     17  f8d6					      REPEAT	.CYCLES / 2
     18  f8d6		       ea		      nop
     17  f8d6					      REPEND
     18  f8d7		       ea		      nop
     17  f8d7					      REPEND
     18  f8d8		       ea		      nop
     17  f8d8					      REPEND
     18  f8d9		       ea		      nop
     17  f8d9					      REPEND
     18  f8da		       ea		      nop
     17  f8da					      REPEND
     18  f8db		       ea		      nop
     17  f8db					      REPEND
     18  f8dc		       ea		      nop
     17  f8dc					      REPEND
     18  f8dd		       ea		      nop
     17  f8dd					      REPEND
     18  f8de		       ea		      nop
     17  f8de					      REPEND
     18  f8df		       ea		      nop
     17  f8df					      REPEND
     18  f8e0		       ea		      nop
     17  f8e0					      REPEND
     18  f8e1		       ea		      nop
     17  f8e1					      REPEND
     18  f8e2		       ea		      nop
     17  f8e2					      REPEND
     18  f8e3		       ea		      nop
     17  f8e3					      REPEND
     18  f8e4		       ea		      nop
     17  f8e4					      REPEND
     18  f8e5		       ea		      nop
     19  f8e6					      REPEND
     57  f8e6				   .endif_2
     58  f8e6
     59  f8e6
      0  f8e6					      sleep	2
      1  f8e6				   .CYCLES    SET	2
      2  f8e6
      3  f8e6				  -	      IF	.CYCLES < 2
      4  f8e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8e6				  -	      ERR
      6  f8e6					      ENDIF
      7  f8e6
      8  f8e6				  -	      IF	.CYCLES & 1
      9  f8e6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8e6				  -	      nop	0
     11  f8e6				  -	      ELSE
     12  f8e6				  -	      bit	VSYNC
     13  f8e6				  -	      ENDIF
     14  f8e6				  -.CYCLES    SET	.CYCLES - 3
     15  f8e6					      ENDIF
     16  f8e6
     17  f8e6					      REPEAT	.CYCLES / 2
     18  f8e6		       ea		      nop
     19  f8e7					      REPEND
     61  f8e7				   .endif_1
    513  f8e7		       a5 cd		      lda	RamNibbleVar2
      0  f8e9					      NIBBLE_gem_kernel_b_2
      1  f8e9		       a6 d8		      ldx	RamKernelGemini1
      2  f8eb		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f8ee				   .if_1
      4  f8ee		       0a		      asl
      5  f8ef		       90 08		      bcc	.else_1
      6  f8f1		       a2 d0		      ldx	#RamFFByte
      7  f8f3		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      8  f8f6
      9  f8f6		       4c ff f8 	      jmp	.endif_1
     10  f8f9				   .else_1
     11  f8f9		       a2 d4		      ldx	#RamPF1Value
     12  f8fb		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
     13  f8fe
     14  f8fe
      0  f8fe					      sleep	2
      1  f8fe				   .CYCLES    SET	2
      2  f8fe
      3  f8fe				  -	      IF	.CYCLES < 2
      4  f8fe				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8fe				  -	      ERR
      6  f8fe					      ENDIF
      7  f8fe
      8  f8fe				  -	      IF	.CYCLES & 1
      9  f8fe				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8fe				  -	      nop	0
     11  f8fe				  -	      ELSE
     12  f8fe				  -	      bit	VSYNC
     13  f8fe				  -	      ENDIF
     14  f8fe				  -.CYCLES    SET	.CYCLES - 3
     15  f8fe					      ENDIF
     16  f8fe
     17  f8fe					      REPEAT	.CYCLES / 2
     18  f8fe		       ea		      nop
     19  f8ff					      REPEND
     16  f8ff				   .endif_1
     17  f8ff		       a6 de		      ldx	RamKernelGemini4
     18  f901		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     19  f904		       a6 e4		      ldx	BuildKernelGrp0
     20  f906		       8e 07 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     21  f909		       a2 00		      ldx	#$00
     22  f90b		       86 d3		      stx	[RamPSByte + 0]
    515  f90d				   .next
    516  f90d		       60		      rts
    517  f90e
    518  f90e
    519  f90e							; Populate Gemini array from level_for_game
    520  f90e
    521  f90e					      mac	gemini_populate
    522  f90e				   .TARGET    SET	{1}
    523  f90e					      lda	RamNibbleTemp
    524  f90e					      and	#%00000011
    525  f90e					      tay
    526  f90e					      lda	GEMINI_LOOKUP,y
    527  f90e					      sta	.TARGET
    528  f90e					      endm
    529  f90e
    530  f90e					      mac	gemini_populate_missile
    531  f90e				   .TARGET    SET	{1}
    532  f90e					      lda	RamNibbleTemp
    533  f90e					      and	#%00000001
    534  f90e					      sta	.TARGET
    535  f90e					      endm
    536  f90e
    537  fa00		       00 00 00 00*	      align	256
    538  fa00
    539  fa00				   gemini_populate
    540  fa00		       a6 ea		      ldx	level_for_game + 3
    541  fa02		       86 cb		      stx	RamNibbleTemp
      0  fa04					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa04				   .TARGET    SET	DO_GEMS_B + 5
      2  fa04		       a5 cb		      lda	RamNibbleTemp
      3  fa06		       29 03		      and	#%00000011
      4  fa08		       a8		      tay
      5  fa09		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa0c		       85 f8		      sta	.TARGET
    543  fa0e		       66 cb		      ror	RamNibbleTemp
    544  fa10		       66 cb		      ror	RamNibbleTemp
      0  fa12					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa12				   .TARGET    SET	DO_GEMS_A + 5
      2  fa12		       a5 cb		      lda	RamNibbleTemp
      3  fa14		       29 03		      and	#%00000011
      4  fa16		       a8		      tay
      5  fa17		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa1a		       85 f2		      sta	.TARGET
    546  fa1c		       66 cb		      ror	RamNibbleTemp
    547  fa1e		       66 cb		      ror	RamNibbleTemp
      0  fa20					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa20				   .TARGET    SET	DO_GEMS_B + 4
      2  fa20		       a5 cb		      lda	RamNibbleTemp
      3  fa22		       29 03		      and	#%00000011
      4  fa24		       a8		      tay
      5  fa25		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa28		       85 f7		      sta	.TARGET
    549  fa2a		       66 cb		      ror	RamNibbleTemp
    550  fa2c		       66 cb		      ror	RamNibbleTemp
      0  fa2e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa2e				   .TARGET    SET	DO_GEMS_A + 4
      2  fa2e		       a5 cb		      lda	RamNibbleTemp
      3  fa30		       29 03		      and	#%00000011
      4  fa32		       a8		      tay
      5  fa33		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa36		       85 f1		      sta	.TARGET
    552  fa38		       66 cb		      ror	RamNibbleTemp
    553  fa3a		       66 cb		      ror	RamNibbleTemp
    554  fa3c
    555  fa3c		       a6 e9		      ldx	level_for_game + 2
    556  fa3e		       86 cb		      stx	RamNibbleTemp
      0  fa40					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa40				   .TARGET    SET	DO_MISS_B
      2  fa40		       a5 cb		      lda	RamNibbleTemp
      3  fa42		       29 01		      and	#%00000001
      4  fa44		       85 ec		      sta	.TARGET
    558  fa46		       66 cb		      ror	RamNibbleTemp
      0  fa48					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa48				   .TARGET    SET	DO_GEMS_B + 3
      2  fa48		       a5 cb		      lda	RamNibbleTemp
      3  fa4a		       29 03		      and	#%00000011
      4  fa4c		       a8		      tay
      5  fa4d		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa50		       85 f6		      sta	.TARGET
    560  fa52		       66 cb		      ror	RamNibbleTemp
    561  fa54		       66 cb		      ror	RamNibbleTemp
      0  fa56					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa56				   .TARGET    SET	DO_GEMS_A + 3
      2  fa56		       a5 cb		      lda	RamNibbleTemp
      3  fa58		       29 03		      and	#%00000011
      4  fa5a		       a8		      tay
      5  fa5b		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa5e		       85 f0		      sta	.TARGET
    563  fa60		       66 cb		      ror	RamNibbleTemp
    564  fa62		       66 cb		      ror	RamNibbleTemp
      0  fa64					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa64				   .TARGET    SET	DO_GEMS_B + 2
      2  fa64		       a5 cb		      lda	RamNibbleTemp
      3  fa66		       29 03		      and	#%00000011
      4  fa68		       a8		      tay
      5  fa69		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa6c		       85 f5		      sta	.TARGET
    566  fa6e		       66 cb		      ror	RamNibbleTemp
    567  fa70		       66 cb		      ror	RamNibbleTemp
    568  fa72
    569  fa72		       66 cb		      ror	RamNibbleTemp
    570  fa74		       a6 e8		      ldx	level_for_game + 1
    571  fa76		       86 cb		      stx	RamNibbleTemp
    572  fa78		       26 cb		      rol	RamNibbleTemp
      0  fa7a					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa7a				   .TARGET    SET	DO_GEMS_A + 2
      2  fa7a		       a5 cb		      lda	RamNibbleTemp
      3  fa7c		       29 03		      and	#%00000011
      4  fa7e		       a8		      tay
      5  fa7f		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa82		       85 ef		      sta	.TARGET
    574  fa84
    575  fa84		       a6 e8		      ldx	level_for_game + 1
    576  fa86		       86 cb		      stx	RamNibbleTemp
    577  fa88		       66 cb		      ror	RamNibbleTemp
      0  fa8a					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa8a				   .TARGET    SET	DO_MISS_A
      2  fa8a		       a5 cb		      lda	RamNibbleTemp
      3  fa8c		       29 01		      and	#%00000001
      4  fa8e		       85 eb		      sta	.TARGET
    579  fa90		       66 cb		      ror	RamNibbleTemp
      0  fa92					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa92				   .TARGET    SET	DO_GEMS_B + 1
      2  fa92		       a5 cb		      lda	RamNibbleTemp
      3  fa94		       29 03		      and	#%00000011
      4  fa96		       a8		      tay
      5  fa97		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa9a		       85 f4		      sta	.TARGET
    581  fa9c		       66 cb		      ror	RamNibbleTemp
    582  fa9e		       66 cb		      ror	RamNibbleTemp
      0  faa0					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  faa0				   .TARGET    SET	DO_GEMS_A + 1
      2  faa0		       a5 cb		      lda	RamNibbleTemp
      3  faa2		       29 03		      and	#%00000011
      4  faa4		       a8		      tay
      5  faa5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  faa8		       85 ee		      sta	.TARGET
    584  faaa		       66 cb		      ror	RamNibbleTemp
    585  faac		       66 cb		      ror	RamNibbleTemp
      0  faae					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  faae				   .TARGET    SET	DO_GEMS_B + 0
      2  faae		       a5 cb		      lda	RamNibbleTemp
      3  fab0		       29 03		      and	#%00000011
      4  fab2		       a8		      tay
      5  fab3		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fab6		       85 f3		      sta	.TARGET
    587  fab8		       66 cb		      ror	RamNibbleTemp
    588  faba		       66 cb		      ror	RamNibbleTemp
    589  fabc
    590  fabc		       a6 e7		      ldx	level_for_game + 0
    591  fabe		       86 cb		      stx	RamNibbleTemp
      0  fac0					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fac0				   .TARGET    SET	DO_GEMS_A + 0
      2  fac0		       a5 cb		      lda	RamNibbleTemp
      3  fac2		       29 03		      and	#%00000011
      4  fac4		       a8		      tay
      5  fac5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fac8		       85 ed		      sta	.TARGET
    593  faca		       66 cb		      ror	RamNibbleTemp
    594  facc		       66 cb		      ror	RamNibbleTemp
    595  face
    596  face		       60		      rts
    597  facf				   gemini_populate_end
    598  facf
    599  fad0		       00		      align	16
    600  fad0
    601  fad0				   GEMINI_LOOKUP
    602  fad0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    603  fad4
    604  fad4				   SHARD_LUT_RF1
    605  fad4		       00		      .byte.b	#0
    606  fad5				   SHARD_LUT_VD1
    607  fad5		       00		      .byte.b	#0
    608  fad6
------- FILE main.s
------- FILE game_state.s LEVEL 2 PASS 2
      0  fad6					      include	"game_state.s"
      1  fad6							; Perform a left rotation on the 32 bit number at
      2  fad6							; location VLA and store the result at location
      3  fad6							; RES. If VLA and RES are the same then the
      4  fad6							; operation is applied directly to the memory,
      5  fad6							; otherwise it is done in the accumulator.
      6  fad6							;
      7  fad6							; On exit: A = ??, X & Y are unchanged.
      8  fad6
      9  fad6							;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     10  fad6					      mac	_ror32
     11  fad6				   VLA	      EQU	{1}
     12  fad6				   RES	      EQU	{2}
     13  fad6					      IF	VLA != RES
     14  fad6					      LDA	VLA+0
     15  fad6					      ROR	A
     16  fad6					      STA	RES+0
     17  fad6					      LDA	VLA+1
     18  fad6					      ROR	A
     19  fad6					      STA	RES+1
     20  fad6					      LDA	VLA+2
     21  fad6					      ROR	A
     22  fad6					      STA	RES+2
     23  fad6					      LDA	VLA+3
     24  fad6					      ROR	A
     25  fad6					      STA	RES+3
     26  fad6					      ELSE
     27  fad6					      ROR	VLA+0
     28  fad6					      ROR	VLA+1
     29  fad6					      ROR	VLA+2
     30  fad6					      ROR	VLA+3
     31  fad6					      ENDIF
     32  fad6					      ENDM
     33  fad6							; Add two 32 bit numbers together and store the
     34  fad6							; result in another memory location. RES may be
     35  fad6							; the same as either VLA or VLB.
     36  fad6							;
     37  fad6							; On exit: A = ??, X & Y are unchanged.
     38  fad6
     39  fad6				   game_state_adder
     40  fad6		       00		      .byte.b	#$0
     41  fad7		       00		      .byte.b	#$0
     42  fad8		       00		      .byte.b	#$0
     43  fad9		       10		      .byte.b	#%10000
     44  fada
     45  fada					      mac	_add32
     46  fada				   .VLA       EQU	{1}
     47  fada				   .VLB       EQU	{2}
     48  fada				   .RES       EQU	{3}
     49  fada					      CLC
     50  fada					      LDA	.VLA+3
     51  fada					      ADC	.VLB+3
     52  fada					      STA	.RES+3
     53  fada					      LDA	.VLA+2
     54  fada					      ADC	.VLB+2
     55  fada					      STA	.RES+2
     56  fada					      LDA	.VLA+1
     57  fada					      ADC	.VLB+1
     58  fada					      STA	.RES+1
     59  fada					      LDA	.VLA+0
     60  fada					      ADC	.VLB+0
     61  fada					      STA	.RES+0
     62  fada					      ENDM
     63  fada
     64  fada				   game_state_setup
     65  fada							; Set up the level
     66  fada		       a9 fb		      lda	#%11111011
     67  fadc		       85 e7		      sta	[level_for_game + 0]
     68  fade		       a9 ff		      lda	#%11111111
     69  fae0		       85 e8		      sta	[level_for_game + 1]
     70  fae2		       a9 ff		      lda	#%11111111
     71  fae4		       85 e9		      sta	[level_for_game + 2]
     72  fae6		       a9 ff		      lda	#%11111111
     73  fae8		       85 ea		      sta	[level_for_game + 3]
     74  faea		       60		      rts
     75  faeb
     76  faf0		       00 00 00 00*	      align	16
     77  faf0				   game_state_mask
     78  faf0		       7f		      .byte.b	#%01111111
     79  faf1		       bf		      .byte.b	#%10111111
     80  faf2		       df		      .byte.b	#%11011111
     81  faf3		       ef		      .byte.b	#%11101111
     82  faf4		       f7		      .byte.b	#%11110111
     83  faf5		       fb		      .byte.b	#%11111011
     84  faf6		       fd		      .byte.b	#%11111101
     85  faf7		       fe		      .byte.b	#%11111110
     86  faf8
     87  faf8				   game_state_tick subroutine
     88  faf8							; jsr game_state_setup
     89  faf8
     90  faf8							; Get index [0, 25]
     91  faf8		       18		      clc
     92  faf9		       a5 c5		      lda	XPos
     93  fafb		       e9 02		      sbc	#2
     94  fafd		       4a		      lsr
     95  fafe		       4a		      lsr
     96  faff		       85 c0		      sta	Temp
     97  fb01
     98  fb01							; Load bit offset
     99  fb01		       29 07		      and	#%111
    100  fb03		       a8		      tay
    101  fb04		       b9 f0 fa 	      lda	game_state_mask,y
    102  fb07		       85 c1		      sta	Temp2
    103  fb09
    104  fb09							; Load sprite offset
    105  fb09		       a5 c0		      lda	Temp
    106  fb0b		       4a		      lsr
    107  fb0c		       4a		      lsr
    108  fb0d		       4a		      lsr
    109  fb0e		       a8		      tay
    110  fb0f		       a5 c1		      lda	Temp2
    111  fb11		       39 e7 00 	      and	level_for_game,y
    112  fb14		       99 e7 00 	      sta	level_for_game,y
    113  fb17		       60		      rts
    114  fb18
    115  fb18				   game_state_tick_1 subroutine
      0  fb18					      _ADD32	level_for_game, game_state_adder, level_for_game
      1  fb18		       00 e7	   .VLA       EQU	level_for_game
      2  fb18		       fa d6	   .VLB       EQU	game_state_adder
      3  fb18		       00 e7	   .RES       EQU	level_for_game
      4  fb18		       18		      CLC
      5  fb19		       a5 ea		      LDA	.VLA+3
      6  fb1b		       6d d9 fa 	      ADC	.VLB+3
      7  fb1e		       85 ea		      STA	.RES+3
      8  fb20		       a5 e9		      LDA	.VLA+2
      9  fb22		       6d d8 fa 	      ADC	.VLB+2
     10  fb25		       85 e9		      STA	.RES+2
     11  fb27		       a5 e8		      LDA	.VLA+1
     12  fb29		       6d d7 fa 	      ADC	.VLB+1
     13  fb2c		       85 e8		      STA	.RES+1
     14  fb2e		       a5 e7		      LDA	.VLA+0
     15  fb30		       6d d6 fa 	      ADC	.VLB+0
     16  fb33		       85 e7		      STA	.RES+0
    117  fb35		       60		      rts
    118  fb36
    119  fb36							; game_state_tick:
    120  fb36							;     lda FrameCount
    121  fb36							;     and #%111
    122  fb36							;     bne .skiprotate
    123  fb36							;     lda level_for_game + 3
    124  fb36							;     ror
    125  fb36							; .rollall:
    126  fb36							;     _ROR32 level_for_game, level_for_game
    127  fb36
    128  fb36							;     lda #%11101111
    129  fb36							;     cmp [level_for_game + 3]
    130  fb36							;     bne .skiprotate
    131  fb36							;     jmp game_state_setup
    132  fb36							; .skiprotate:
    133  fb36							;     rts
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb36					      include	"kernel_border.s"
      1  fb36							; Visible Kernel
      2  fb36
      3  fb36				   KernelBorder subroutine
      4  fb36		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb38
      6  fb38							; First HMOVE
      7  fb38		       85 2a		      sta	HMOVE
      8  fb3a
      9  fb3a							; Border top
     10  fb3a		       a9 00		      lda	#0
     11  fb3c		       85 08		      sta	COLUPF
     12  fb3e		       85 0e		      sta	PF1
     13  fb40		       85 0f		      sta	PF2
     14  fb42		       a9 02		      lda	#SIGNAL_LINE
     15  fb44		       85 09		      sta	COLUBK
     16  fb46
     17  fb46					      REPEAT	6
     18  fb46		       85 02		      sta	WSYNC
     17  fb46					      REPEND
     18  fb48		       85 02		      sta	WSYNC
     17  fb48					      REPEND
     18  fb4a		       85 02		      sta	WSYNC
     17  fb4a					      REPEND
     18  fb4c		       85 02		      sta	WSYNC
     17  fb4c					      REPEND
     18  fb4e		       85 02		      sta	WSYNC
     17  fb4e					      REPEND
     18  fb50		       85 02		      sta	WSYNC
     19  fb52					      REPEND
     20  fb52
     21  fb52		       a9 00		      lda	#0
     22  fb54		       85 09		      sta	COLUBK
     23  fb56		       85 02		      sta	WSYNC
     24  fb58
     25  fb58							; Start top border
     26  fb58				   border_top
     27  fb58							; Make the playfield solid.
     28  fb58		       a9 3f		      lda	#%00111111
     29  fb5a		       85 0e		      sta	PF1
     30  fb5c		       a9 ff		      lda	#%11111111
     31  fb5e		       85 0f		      sta	PF2
     32  fb60
     33  fb60		       a9 42		      lda	#COL_BG
     34  fb62		       a0 00		      ldy	#0
     35  fb64
     36  fb64							; X_XXXX_XX
     37  fb64							; Commented lines removed to save on space.
     38  fb64		       85 08		      sta	COLUPF
     39  fb66		       85 02		      sta	WSYNC
     40  fb68		       84 08		      sty	COLUPF
     41  fb6a		       85 02		      sta	WSYNC
     42  fb6c		       85 08		      sta	COLUPF
     43  fb6e		       85 02		      sta	WSYNC
     44  fb70							; sta COLUPF
     45  fb70		       85 02		      sta	WSYNC
     46  fb72							; sta COLUPF
     47  fb72		       85 02		      sta	WSYNC
     48  fb74		       84 08		      sty	COLUPF
     49  fb76		       85 02		      sta	WSYNC
     50  fb78		       85 08		      sta	COLUPF
     51  fb7a
     52  fb7a		       85 02		      sta	WSYNC
     53  fb7c							; sta COLUPF
     54  fb7c
     55  fb7c				   PlayArea
     56  fb7c							; PF is now the playing area
      0  fb7c					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb7c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb7c  && !(  _scycles == #0  ) }
      2  fb7c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb7c					      sleep	61
      1  fb7c				   .CYCLES    SET	61
      2  fb7c
      3  fb7c				  -	      IF	.CYCLES < 2
      4  fb7c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb7c				  -	      ERR
      6  fb7c					      ENDIF
      7  fb7c
      8  fb7c					      IF	.CYCLES & 1
      9  fb7c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb7c		       04 00		      nop	0
     11  fb7e				  -	      ELSE
     12  fb7e				  -	      bit	VSYNC
     13  fb7e					      ENDIF
     14  fb7e				   .CYCLES    SET	.CYCLES - 3
     15  fb7e					      ENDIF
     16  fb7e
     17  fb7e					      REPEAT	.CYCLES / 2
     18  fb7e		       ea		      nop
     17  fb7e					      REPEND
     18  fb7f		       ea		      nop
     17  fb7f					      REPEND
     18  fb80		       ea		      nop
     17  fb80					      REPEND
     18  fb81		       ea		      nop
     17  fb81					      REPEND
     18  fb82		       ea		      nop
     17  fb82					      REPEND
     18  fb83		       ea		      nop
     17  fb83					      REPEND
     18  fb84		       ea		      nop
     17  fb84					      REPEND
     18  fb85		       ea		      nop
     17  fb85					      REPEND
     18  fb86		       ea		      nop
     17  fb86					      REPEND
     18  fb87		       ea		      nop
     17  fb87					      REPEND
     18  fb88		       ea		      nop
     17  fb88					      REPEND
     18  fb89		       ea		      nop
     17  fb89					      REPEND
     18  fb8a		       ea		      nop
     17  fb8a					      REPEND
     18  fb8b		       ea		      nop
     17  fb8b					      REPEND
     18  fb8c		       ea		      nop
     17  fb8c					      REPEND
     18  fb8d		       ea		      nop
     17  fb8d					      REPEND
     18  fb8e		       ea		      nop
     17  fb8e					      REPEND
     18  fb8f		       ea		      nop
     17  fb8f					      REPEND
     18  fb90		       ea		      nop
     17  fb90					      REPEND
     18  fb91		       ea		      nop
     17  fb91					      REPEND
     18  fb92		       ea		      nop
     17  fb92					      REPEND
     18  fb93		       ea		      nop
     17  fb93					      REPEND
     18  fb94		       ea		      nop
     17  fb94					      REPEND
     18  fb95		       ea		      nop
     17  fb95					      REPEND
     18  fb96		       ea		      nop
     17  fb96					      REPEND
     18  fb97		       ea		      nop
     17  fb97					      REPEND
     18  fb98		       ea		      nop
     17  fb98					      REPEND
     18  fb99		       ea		      nop
     17  fb99					      REPEND
     18  fb9a		       ea		      nop
     19  fb9b					      REPEND
     59  fb9b		       a9 00		      lda	#%00000000
     60  fb9d		       85 0d		      sta	PF0
     61  fb9f		       a9 20		      lda	#%00100000
     62  fba1		       85 0e		      sta	PF1
     63  fba3		       a9 00		      lda	#%00000000
     64  fba5		       85 0f		      sta	PF2
      0  fba7					      ASSERT_RUNTIME	"_scycles == #0"
      1  fba7				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fba7  && !(  _scycles == #0  ) }
      2  fba7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fba7					      sleep	7
      1  fba7				   .CYCLES    SET	7
      2  fba7
      3  fba7				  -	      IF	.CYCLES < 2
      4  fba7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fba7				  -	      ERR
      6  fba7					      ENDIF
      7  fba7
      8  fba7					      IF	.CYCLES & 1
      9  fba7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fba7		       04 00		      nop	0
     11  fba9				  -	      ELSE
     12  fba9				  -	      bit	VSYNC
     13  fba9					      ENDIF
     14  fba9				   .CYCLES    SET	.CYCLES - 3
     15  fba9					      ENDIF
     16  fba9
     17  fba9					      REPEAT	.CYCLES / 2
     18  fba9		       ea		      nop
     17  fba9					      REPEND
     18  fbaa		       ea		      nop
     19  fbab					      REPEND
     67  fbab		       4c dd fb 	      jmp	row_start
     68  fbae							; enter row on cycle 10.
     69  fbae
     70  fbae							; reset the background for bottom of playfield
     71  fbae				   border_bottom
     72  fbae							;sta WSYNC
     73  fbae
     74  fbae							; Form the bottom of the level frame.
     75  fbae		       a9 3f		      lda	#%00111111
     76  fbb0		       85 0e		      sta	PF1
     77  fbb2		       a9 ff		      lda	#%11111111
     78  fbb4		       85 0f		      sta	PF2
     79  fbb6
     80  fbb6							; Clear all sprites.
     81  fbb6		       a9 00		      lda	#0
     82  fbb8		       85 1c		      sta	EMERALD_SP
     83  fbba		       85 1b		      sta	JET_SP
     84  fbbc		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fbbe
     86  fbbe		       a9 42		      lda	#COL_BG
     87  fbc0		       a0 00		      ldy	#0
     88  fbc2		       85 02		      sta	WSYNC
     89  fbc4
     90  fbc4		       84 08		      sty	COLUPF
     91  fbc6		       85 02		      sta	WSYNC
     92  fbc8
     93  fbc8		       85 08		      sta	COLUPF
     94  fbca		       85 02		      sta	WSYNC
     95  fbcc
     96  fbcc		       85 02		      sta	WSYNC
     97  fbce
     98  fbce		       85 02		      sta	WSYNC
     99  fbd0
    100  fbd0		       84 08		      sty	COLUPF
    101  fbd2		       85 02		      sta	WSYNC
    102  fbd4
    103  fbd4		       85 08		      sta	COLUPF
    104  fbd6		       85 02		      sta	WSYNC
    105  fbd8		       85 02		      sta	WSYNC
    106  fbda		       4c d3 f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fbdd					      include	"kernel_row.s"
      1  fbdd							; Frame Start
      2  fbdd
      3  fbdd							; Macros for calculating sprite values (GRPx).
      4  fbdd
      5  fbdd							; mac jet_spritedata_calc
      6  fbdd							;
      7  fbdd							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fbdd							; GRP0.
      9  fbdd					      mac	jet_spritedata_calc
     10  fbdd					      dec	RamRowJetpackIndex
     11  fbdd					      ldy	RamRowJetpackIndex
     12  fbdd					      ldx	Frame0,Y
     13  fbdd					      stx	JET_SP
     14  fbdd					      endm
     15  fbdd
     16  fbdd				   row_start
     17  fbdd
     18  fbdd							; [scanline 1]
     19  fbdd				   row_1
     20  fbdd							; Enter after scanline starts on row "9" and wraps
      0  fbdd					      ASSERT_RUNTIME	"_scycles == #10"
      1  fbdd				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fbdd  && !(  _scycles == #10  ) }
      2  fbdd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fbdd
     23  fbdd							; Load sprite details
     24  fbdd		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fbdf		       c5 c4		      cmp	SpriteEnd	; 5c
     26  fbe1		       a9 00		      lda	#0	; 2c
     27  fbe3							; constant 6c: if carry set, load SpriteEnd into y
     28  fbe3		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fbe5		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fbe6		       a5 c4		      lda	SpriteEnd
     31  fbe8		       69 08		      adc	#8
     32  fbea		       85 d2		      sta	RamRowJetpackIndex
     33  fbec
     34  fbec							; Load sprite
     35  fbec		       c6 d2		      dec	RamRowJetpackIndex
     36  fbee		       a4 d2		      ldy	RamRowJetpackIndex
     37  fbf0		       be 00 fe 	      ldx	Frame0,Y
     38  fbf3		       86 1b		      stx	JET_SP
     39  fbf5
     40  fbf5							; TODO assert cycle is not in visible range!
     41  fbf5
     42  fbf5							; FIXME Demo: modify kernel A in next row
     43  fbf5		       a9 aa		      lda	#%010101010
     44  fbf7		       85 e4		      sta	BuildKernelGrp0
     45  fbf9
     46  fbf9							; Idle.
     47  fbf9		       85 02		      sta	WSYNC
     48  fbfb							; sleep 33
     49  fbfb
      0  fbfb					      ASSERT_RUNTIME	"_scycles == #0"
      1  fbfb				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fbfb  && !(  _scycles == #0  ) }
      2  fbfb					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     51  fbfb
     52  fbfb							; [scanline 2]
     53  fbfb				   row_2
      0  fbfb					      jet_spritedata_calc
      1  fbfb		       c6 d2		      dec	RamRowJetpackIndex
      2  fbfd		       a4 d2		      ldy	RamRowJetpackIndex
      3  fbff		       be 00 fe 	      ldx	Frame0,Y
      4  fc02		       86 1b		      stx	JET_SP
      0  fc04					      sleep	5
      1  fc04				   .CYCLES    SET	5
      2  fc04
      3  fc04				  -	      IF	.CYCLES < 2
      4  fc04				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc04				  -	      ERR
      6  fc04					      ENDIF
      7  fc04
      8  fc04					      IF	.CYCLES & 1
      9  fc04					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc04		       04 00		      nop	0
     11  fc06				  -	      ELSE
     12  fc06				  -	      bit	VSYNC
     13  fc06					      ENDIF
     14  fc06				   .CYCLES    SET	.CYCLES - 3
     15  fc06					      ENDIF
     16  fc06
     17  fc06					      REPEAT	.CYCLES / 2
     18  fc06		       ea		      nop
     19  fc07					      REPEND
     56  fc07
     57  fc07							; Black out playfield
     58  fc07							; TODO This should be done with playfield pixels, not color.
     59  fc07		       a9 00		      lda	#0
     60  fc09		       85 08		      sta	COLUPF
     61  fc0b
     62  fc0b							; [[[Nibble VM.]]]
      0  fc0b					      sleep	25
      1  fc0b				   .CYCLES    SET	25
      2  fc0b
      3  fc0b				  -	      IF	.CYCLES < 2
      4  fc0b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc0b				  -	      ERR
      6  fc0b					      ENDIF
      7  fc0b
      8  fc0b					      IF	.CYCLES & 1
      9  fc0b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc0b		       04 00		      nop	0
     11  fc0d				  -	      ELSE
     12  fc0d				  -	      bit	VSYNC
     13  fc0d					      ENDIF
     14  fc0d				   .CYCLES    SET	.CYCLES - 3
     15  fc0d					      ENDIF
     16  fc0d
     17  fc0d					      REPEAT	.CYCLES / 2
     18  fc0d		       ea		      nop
     17  fc0d					      REPEND
     18  fc0e		       ea		      nop
     17  fc0e					      REPEND
     18  fc0f		       ea		      nop
     17  fc0f					      REPEND
     18  fc10		       ea		      nop
     17  fc10					      REPEND
     18  fc11		       ea		      nop
     17  fc11					      REPEND
     18  fc12		       ea		      nop
     17  fc12					      REPEND
     18  fc13		       ea		      nop
     17  fc13					      REPEND
     18  fc14		       ea		      nop
     17  fc14					      REPEND
     18  fc15		       ea		      nop
     17  fc15					      REPEND
     18  fc16		       ea		      nop
     17  fc16					      REPEND
     18  fc17		       ea		      nop
     19  fc18					      REPEND
     64  fc18
     65  fc18							; Load PF1 value
     66  fc18		       a9 3d		      lda	#%00111101
     67  fc1a		       85 d4		      sta	RamPF1Value
     68  fc1c
     69  fc1c		       a9 04		      lda	#4
     70  fc1e		       8d 96 02 	      sta	TIM64T
     71  fc21
     72  fc21							; Set stack pointer for PHP use from RamKernelPhpTarget.
     73  fc21		       a6 d6		      ldx	RamKernelPhpTarget
     74  fc23		       ca		      dex
     75  fc24		       9a		      txs
     76  fc25
     77  fc25							; Enable playfield at end of scanline
     78  fc25		       a9 42		      lda	#COL_BG
     79  fc27		       85 08		      sta	COLUPF
     80  fc29
     81  fc29							; Set overflow flag
     82  fc29		       24 d3		      bit	RamPSByte
     83  fc2b
      0  fc2b					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc2b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc2b  && !(  _scycles == #0  ) }
      2  fc2b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  fc2b
     86  fc2b							; [scanline 3]
     87  fc2b				   row_3
     88  fc2b							; Current row and next two rows.
     89  fc2b		       a4 d2		      ldy	RamRowJetpackIndex
     90  fc2d		       88		      dey
     91  fc2e		       be 00 fe 	      ldx	Frame0,Y
     92  fc31		       86 1b		      stx	JET_SP
     93  fc33		       88		      dey
     94  fc34		       be 00 fe 	      ldx	Frame0,Y
     95  fc37		       86 d5		      stx	RamKernelGRP0
     96  fc39		       88		      dey
     97  fc3a		       be 00 fe 	      ldx	Frame0,Y
     98  fc3d		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
     99  fc40		       84 d2		      sty	RamRowJetpackIndex
    100  fc42
    101  fc42							; [[[Nibble VM.]]]
    102  fc42							; Idle.
      0  fc42					      sleep	22
      1  fc42				   .CYCLES    SET	22
      2  fc42
      3  fc42				  -	      IF	.CYCLES < 2
      4  fc42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc42				  -	      ERR
      6  fc42					      ENDIF
      7  fc42
      8  fc42				  -	      IF	.CYCLES & 1
      9  fc42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc42				  -	      nop	0
     11  fc42				  -	      ELSE
     12  fc42				  -	      bit	VSYNC
     13  fc42				  -	      ENDIF
     14  fc42				  -.CYCLES    SET	.CYCLES - 3
     15  fc42					      ENDIF
     16  fc42
     17  fc42					      REPEAT	.CYCLES / 2
     18  fc42		       ea		      nop
     17  fc42					      REPEND
     18  fc43		       ea		      nop
     17  fc43					      REPEND
     18  fc44		       ea		      nop
     17  fc44					      REPEND
     18  fc45		       ea		      nop
     17  fc45					      REPEND
     18  fc46		       ea		      nop
     17  fc46					      REPEND
     18  fc47		       ea		      nop
     17  fc47					      REPEND
     18  fc48		       ea		      nop
     17  fc48					      REPEND
     18  fc49		       ea		      nop
     17  fc49					      REPEND
     18  fc4a		       ea		      nop
     17  fc4a					      REPEND
     18  fc4b		       ea		      nop
     17  fc4b					      REPEND
     18  fc4c		       ea		      nop
     19  fc4d					      REPEND
    104  fc4d
    105  fc4d							; Setup for kernel
    106  fc4d		       38		      sec		; clear carry bit
    107  fc4e		       a6 e1		      ldx	BuildKernelX
    108  fc50		       a4 e2		      ldy	BuildKernelY
    109  fc52
    110  fc52							; Jump immediately into scanlines 4-5 aka "kernel_gem"
    111  fc52		       a5 e5		      lda	BuildKernelVdel1
    112  fc54		       85 1c		      sta	EMERALD_SP
    113  fc56		       a5 d5		      lda	RamKernelGRP0	; Load sprite 2 into A
    114  fc58							; [scanline 4]
    115  fc58							; [scanline 5]
      0  fc58					      ASSERT_RUNTIME	"_scycles == #73"
      1  fc58				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fc58  && !(  _scycles == #73  ) }
      2  fc58					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    117  fc58		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    118  fc5b
    119  fc5b							; [scanline 6]
    120  fc5b
    121  fc5b				   row_after_kernel
    122  fc5b				   row_6
      0  fc5b					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc5b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc5b  && !(  _scycles == #0  ) }
      2  fc5b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    124  fc5b
    125  fc5b							; Cleanup from the kernel.
    126  fc5b		       a9 00		      lda	#0
    127  fc5d		       85 1e		      sta	EMERALD_MI_ENABLE
    128  fc5f		       85 1c		      sta	EMERALD_SP
    129  fc61		       85 08		      sta	COLUPF
    130  fc63
    131  fc63		       a9 20		      lda	#%00100000
    132  fc65		       85 0e		      sta	PF1
    133  fc67
      0  fc67					      jet_spritedata_calc
      1  fc67		       c6 d2		      dec	RamRowJetpackIndex
      2  fc69		       a4 d2		      ldy	RamRowJetpackIndex
      3  fc6b		       be 00 fe 	      ldx	Frame0,Y
      4  fc6e		       86 1b		      stx	JET_SP
    135  fc70
    136  fc70							; Idle.
    137  fc70		       85 02		      sta	WSYNC
    138  fc72
    139  fc72							; [scanline 7]
    140  fc72				   row_7
      0  fc72					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc72				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc72  && !(  _scycles == #0  ) }
      2  fc72					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    142  fc72
    143  fc72							; FIXME this should be enabled!
    144  fc72							; jet_spritedata_calc
    145  fc72
    146  fc72		       a9 42		      lda	#COL_BG
    147  fc74		       85 08		      sta	COLUPF
    148  fc76
    149  fc76							; Idle.
    150  fc76							; sleep 71
    151  fc76
    152  fc76							; Run Kernel.
    153  fc76		       a5 cd		      lda	RamNibbleVar2
      0  fc78					      NIBBLE_gem_kernel_a_2
      1  fc78				   .if_1
      2  fc78		       0a		      asl
      3  fc79		       90 1c		      bcc	.else_1
      4  fc7b		       a2 85		      ldx	#BC_STA
      5  fc7d		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  fc80		       a2 11		      ldx	#EMERALD_SP_RESET
      7  fc82		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  fc85		       a2 85		      ldx	#BC_STA
      9  fc87		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  fc8a		       a2 0e		      ldx	#PF1
     11  fc8c		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  fc8f		       a2 08		      ldx	#BC_PHP
     13  fc91		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  fc94
     15  fc94		       4c b1 fc 	      jmp	.endif_1
     16  fc97				   .else_1
     17  fc97		       a2 08		      ldx	#BC_PHP
     18  fc99		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     19  fc9c		       a2 85		      ldx	#BC_STA
     20  fc9e		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     21  fca1		       a2 0e		      ldx	#PF1
     22  fca3		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     23  fca6		       a6 de		      ldx	RamKernelGemini4
     24  fca8		       8e 26 f0 	      stx	[KernelA_K_W + 0]
     25  fcab		       a2 1c		      ldx	#EMERALD_SP
     26  fcad		       8e 27 f0 	      stx	[KernelA_K_W + 1]
     27  fcb0
     28  fcb0
      0  fcb0					      sleep	2
      1  fcb0				   .CYCLES    SET	2
      2  fcb0
      3  fcb0				  -	      IF	.CYCLES < 2
      4  fcb0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcb0				  -	      ERR
      6  fcb0					      ENDIF
      7  fcb0
      8  fcb0				  -	      IF	.CYCLES & 1
      9  fcb0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcb0				  -	      nop	0
     11  fcb0				  -	      ELSE
     12  fcb0				  -	      bit	VSYNC
     13  fcb0				  -	      ENDIF
     14  fcb0				  -.CYCLES    SET	.CYCLES - 3
     15  fcb0					      ENDIF
     16  fcb0
     17  fcb0					      REPEAT	.CYCLES / 2
     18  fcb0		       ea		      nop
     19  fcb1					      REPEND
     30  fcb1				   .endif_1
     31  fcb1		       a6 e6		      ldx	BuildKernelMissile
     32  fcb3		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     33  fcb6		       a6 e5		      ldx	BuildKernelVdel1
     34  fcb8		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     35  fcbb		       a6 e4		      ldx	BuildKernelGrp0
     36  fcbd		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     37  fcc0		       a2 ff		      ldx	#$ff
     38  fcc2		       86 d3		      stx	[RamPSByte + 0]
      0  fcc4					      sleep	5
      1  fcc4				   .CYCLES    SET	5
      2  fcc4
      3  fcc4				  -	      IF	.CYCLES < 2
      4  fcc4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcc4				  -	      ERR
      6  fcc4					      ENDIF
      7  fcc4
      8  fcc4					      IF	.CYCLES & 1
      9  fcc4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcc4		       04 00		      nop	0
     11  fcc6				  -	      ELSE
     12  fcc6				  -	      bit	VSYNC
     13  fcc6					      ENDIF
     14  fcc6				   .CYCLES    SET	.CYCLES - 3
     15  fcc6					      ENDIF
     16  fcc6
     17  fcc6					      REPEAT	.CYCLES / 2
     18  fcc6		       ea		      nop
     19  fcc7					      REPEND
    156  fcc7
    157  fcc7							; [scanline 8]
    158  fcc7				   row_8
      0  fcc7					      ASSERT_RUNTIME	"_scycles == #0"
      1  fcc7				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fcc7  && !(  _scycles == #0  ) }
      2  fcc7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    160  fcc7
      0  fcc7					      jet_spritedata_calc
      1  fcc7		       c6 d2		      dec	RamRowJetpackIndex
      2  fcc9		       a4 d2		      ldy	RamRowJetpackIndex
      3  fccb		       be 00 fe 	      ldx	Frame0,Y
      4  fcce		       86 1b		      stx	JET_SP
    162  fcd0
    163  fcd0							; Decrease SpriteEnd
    164  fcd0		       38		      sec
    165  fcd1		       a5 c4		      lda	SpriteEnd
    166  fcd3		       e9 08		      sbc	#8
    167  fcd5		       85 c4		      sta	SpriteEnd
    168  fcd7
    169  fcd7							; [NIBBLE VM]
    170  fcd7							; lda RamNibbleVar1
    171  fcd7							; NIBBLE_gem_kernel_a_1
    172  fcd7							; sleep 2
    173  fcd7
    174  fcd7							; Idle.
    175  fcd7							; sleep 51
    176  fcd7		       85 02		      sta	WSYNC
    177  fcd9
    178  fcd9							; [scanline 8-1]
      0  fcd9					      ASSERT_RUNTIME	"_scycles == #0"
      1  fcd9				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fcd9  && !(  _scycles == #0  ) }
      2  fcd9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    180  fcd9							; Repeat loop until LoopCount < 0
    181  fcd9		       c6 c2		      dec	LoopCount
    182  fcdb		       f0 03		      beq	row_end
    183  fcdd		       4c dd fb 	      jmp	row_start
    184  fce0				   row_end
    185  fce0		       4c ae fb 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fce3					      include	"kernel_gem.s"
      1  fce3							;
      2  fce3							; Gem Kernels
      3  fce3							;
      4  fce3							; Gems are displayed in alternating kernels. This chart shows
      5  fce3							; which kernel is responsible for which gem, with missiles denoted.
      6  fce3							;
      7  fce3							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fce3							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fce3							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fce3							;  #	 0^	 8^	  17^	    26^       gem index
     11  fce3							;
     12  fce3							; The middle bar indicates where the pattern reverses.
     13  fce3							;
     14  fce3							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fce3							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fce3							; requires with a single sprite. By alternating sprites each frame with an...
     17  fce3							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fce3							; line, except for two. These are instead rendered by the missile, which
     19  fce3							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fce3
     21  fce3							; for copying
     22  fd00		       00 00 00 00*	      align	256
     23  fd00
     24  fd00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fd00							;
     26  fd00							; GEM KERNEL A
     27  fd00							;
     28  fd00
     29  fd00				   kernel_1_start subroutine
     30  fd00					      rorg	$f100
     31  fd00
     32  fd00							; Kernel Marker
     33  fd00		       0a		      .byte.b	$A
     34  fd01
     35  fd01				   KernelA_early
      0  fd01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fd01				   .KERNEL    SET	$A
      2  fd01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fd01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fd01		       b8		      clv
     38  fd02
     39  fd02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fd02		       a9 ff		      lda	#$ff
     41  fd02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fd04
     43  fd04				   KernelA    subroutine
      0  fd04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fd04				   .KERNEL    SET	$A
      2  fd04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fd04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fd04
     46  fd04							; Write Player from accumulator. When writing to the other sprite, the
     47  fd04							; TIA will copy Gemini 0A into visible sprite register
     48  fd04		       85 1b		      sta	JET_SP
     49  fd06							; Write Gemini 1A into visible sprite register
     50  fd06		       a9 66		      lda	#%01100110
     51  fd06		       f1 07	   KernelA_VDEL0 =	. - 1
     52  fd08		       85 1c		      sta	EMERALD_SP
     53  fd0a
     54  fd0a							; Register config
     55  fd0a		       a9 08		      lda	#%00001000
     56  fd0c		       85 0c		      sta	REFP1
     57  fd0e
     58  fd0e		       a9 20		      lda	#%00100000
     59  fd10		       85 0e		      sta	PF1
     60  fd12
     61  fd12							; Reset stack pointer
     62  fd12		       68		      pla
     63  fd13
     64  fd13							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fd13					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fd13				   .KERNEL    SET	$A
      2  fd13				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f113  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fd13					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fd13				   KernelA_A
     67  fd13		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fd15
     69  fd15							; RST0 vvv
     70  fd15				   KernelA_B
     71  fd15		       a5 d4		      lda	RamPF1Value
     72  fd17				   KernelA_C
     73  fd17		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fd19				   KernelA_D
     75  fd19							; sty EMERALD_SP ; Gemini 1A
      0  fd19					      sleep	3
      1  fd19				   .CYCLES    SET	3
      2  fd19
      3  fd19				  -	      IF	.CYCLES < 2
      4  fd19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd19				  -	      ERR
      6  fd19					      ENDIF
      7  fd19
      8  fd19					      IF	.CYCLES & 1
      9  fd19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd19		       04 00		      nop	0
     11  fd1b				  -	      ELSE
     12  fd1b				  -	      bit	VSYNC
     13  fd1b					      ENDIF
     14  fd1b				   .CYCLES    SET	.CYCLES - 3
     15  fd1b					      ENDIF
     16  fd1b
     17  fd1b				  -	      REPEAT	.CYCLES / 2
     18  fd1b				  -	      nop
     19  fd1b					      REPEND
     77  fd1b							; RST0 ^^^
     78  fd1b
     79  fd1b				   KernelA_E
     80  fd1b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     81  fd1d				   KernelA_F
     82  fd1d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     83  fd1f				   KernelA_G
     84  fd1f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     85  fd21
     86  fd21				   KernelA_H
     87  fd21		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     88  fd23
      0  fd23					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fd23				   .KERNEL    SET	$A
      2  fd23				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f123  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fd23					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     90  fd23							; RST4 vvv
     91  fd23				   KernelA_I
     92  fd23		       08		      php		; Reset "medium close" NUSIZ repetition
     93  fd24				   KernelA_J		; unchanging
     94  fd24		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     95  fd26				   KernelA_K
     96  fd26		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     97  fd28							; RST4 ^^^
     98  fd28
     99  fd28				   KernelA_L
    100  fd28		       a5 ce		      lda	RamZeroByte	; FIXME this doesn't belong here
    101  fd2a				   KernelA_M
    102  fd2a		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    103  fd2c				   KernelA_N
    104  fd2c		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME better place for this?
    105  fd2e				   KernelA_O
    106  fd2e		       a9 66		      lda	#%01100110
    107  fd2e		       f1 2f	   KernelA_VDEL1 =	. - 1
    108  fd30
    109  fd30							; End visible line
      0  fd30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #66"
      1  fd30				   .KERNEL    SET	$A
      2  fd30				   .COND      SET	"_scycles == #66"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #66  ) }
      3  fd30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fd30				   KernelA_branch
    112  fd30		       85 1c		      sta	EMERALD_SP	; set VDEL1
    113  fd32
    114  fd32							; Branch or return.
    115  fd32		       70 cd		      bvs	KernelA_early
      0  fd34					      sleep	2
      1  fd34				   .CYCLES    SET	2
      2  fd34
      3  fd34				  -	      IF	.CYCLES < 2
      4  fd34				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd34				  -	      ERR
      6  fd34					      ENDIF
      7  fd34
      8  fd34				  -	      IF	.CYCLES & 1
      9  fd34				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd34				  -	      nop	0
     11  fd34				  -	      ELSE
     12  fd34				  -	      bit	VSYNC
     13  fd34				  -	      ENDIF
     14  fd34				  -.CYCLES    SET	.CYCLES - 3
     15  fd34					      ENDIF
     16  fd34
     17  fd34					      REPEAT	.CYCLES / 2
     18  fd34		       ea		      nop
     19  fd35					      REPEND
    117  fd35		       4c 5b fc 	      jmp	row_after_kernel
    118  fd38
    119  fd38					      rend
    120  fd38				   kernel_1_end
      0  fd38					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fd38				   .STARTA    SET	kernel_1_start
      2  fd38				   .ENDA      SET	kernel_1_end
      3  fd38				   .LEN       SET	$40
      4  fd38				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd38				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd38				  -	      err
      7  fd38					      endif
    122  fd38
    123  fd38							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  fd38							;
    125  fd38							; GEM KERNEL B
    126  fd38							;
    127  fd38
    128  fd38				   kernel_2_start subroutine
    129  fd38					      rorg	$f100
    130  fd38
    131  fd38							; Kernel Marker
    132  fd38		       0b		      .byte.b	$B
    133  fd39
    134  fd39		       b8		      clv
    135  fd3a
    136  fd3a				   KernelB_early
    137  fd3a							; Early code to set next GRP0 image. Value is overwritten
    138  fd3a		       a9 ff		      lda	#$ff
    139  fd3a		       f1 03	   KernelB_GRP0 =	. - 1
    140  fd3c
    141  fd3c				   KernelB    subroutine
      0  fd3c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fd3c				   .KERNEL    SET	$B
      2  fd3c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fd3c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    143  fd3c
    144  fd3c							; Write Player from accumulator. When writing to the other sprite, the
    145  fd3c							; TIA will copy Gemini 0A into visible sprite register
    146  fd3c		       85 1b		      sta	JET_SP
    147  fd3e		       a9 aa		      lda	#%10101010
    148  fd3e		       f1 07	   KernelB_VDEL0 =	. - 1
    149  fd40							; Write Gemini 1A into delayed sprite register
    150  fd40		       85 1c		      sta	EMERALD_SP
    151  fd42
    152  fd42							; Reset stack
    153  fd42		       68		      pla
    154  fd43
    155  fd43							; 6c
    156  fd43		       a9 20		      lda	#%00100000
    157  fd45		       85 0e		      sta	PF1
    158  fd47
    159  fd47							; Register config
    160  fd47		       a9 ff		      lda	#$ff
    161  fd49		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    162  fd4b
    163  fd4b							; Set processor register bit for PHP sprite rendering.
      0  fd4b					      sleep	3
      1  fd4b				   .CYCLES    SET	3
      2  fd4b
      3  fd4b				  -	      IF	.CYCLES < 2
      4  fd4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd4b				  -	      ERR
      6  fd4b					      ENDIF
      7  fd4b
      8  fd4b					      IF	.CYCLES & 1
      9  fd4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd4b		       04 00		      nop	0
     11  fd4d				  -	      ELSE
     12  fd4d				  -	      bit	VSYNC
     13  fd4d					      ENDIF
     14  fd4d				   .CYCLES    SET	.CYCLES - 3
     15  fd4d					      ENDIF
     16  fd4d
     17  fd4d				  -	      REPEAT	.CYCLES / 2
     18  fd4d				  -	      nop
     19  fd4d					      REPEND
    165  fd4d
    166  fd4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fd4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fd4d				   .KERNEL    SET	$B
      2  fd4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fd4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    168  fd4d				   KernelB_A
    169  fd4d		       85 11		      sta	EMERALD_SP_RESET
    170  fd4f				   KernelB_B
    171  fd4f		       a5 d4		      lda	RamPF1Value
    172  fd51				   KernelB_C
    173  fd51		       c5 d4		      cmp	RamPF1Value
    174  fd53				   KernelB_D
    175  fd53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    176  fd55
    177  fd55							; below has one php load (could just be RESET)
    178  fd55				   KernelB_E
    179  fd55		       08		      php
    180  fd56				   KernelB_F
    181  fd56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    182  fd58				   KernelB_G
    183  fd58		       85 0e		      sta	PF1
    184  fd5a				   KernelB_H
    185  fd5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    186  fd5c							; above has one PHP load
    187  fd5c
    188  fd5c				   KernelB_I
    189  fd5c		       85 11		      sta	EMERALD_SP_RESET
    190  fd5e				   KernelB_J
    191  fd5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    192  fd60				   KernelB_K
    193  fd60		       85 1e		      sta	EMERALD_MI_ENABLE	; FIXME this can't rely on sta
    194  fd62				   KernelB_L
    195  fd62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    196  fd64
    197  fd64				   KernelB_M
      0  fd64					      sleep	3
      1  fd64				   .CYCLES    SET	3
      2  fd64
      3  fd64				  -	      IF	.CYCLES < 2
      4  fd64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd64				  -	      ERR
      6  fd64					      ENDIF
      7  fd64
      8  fd64					      IF	.CYCLES & 1
      9  fd64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd64		       04 00		      nop	0
     11  fd66				  -	      ELSE
     12  fd66				  -	      bit	VSYNC
     13  fd66					      ENDIF
     14  fd66				   .CYCLES    SET	.CYCLES - 3
     15  fd66					      ENDIF
     16  fd66
     17  fd66				  -	      REPEAT	.CYCLES / 2
     18  fd66				  -	      nop
     19  fd66					      REPEND
    199  fd66				   KernelB_N
      0  fd66					      sleep	3
      1  fd66				   .CYCLES    SET	3
      2  fd66
      3  fd66				  -	      IF	.CYCLES < 2
      4  fd66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd66				  -	      ERR
      6  fd66					      ENDIF
      7  fd66
      8  fd66					      IF	.CYCLES & 1
      9  fd66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd66		       04 00		      nop	0
     11  fd68				  -	      ELSE
     12  fd68				  -	      bit	VSYNC
     13  fd68					      ENDIF
     14  fd68				   .CYCLES    SET	.CYCLES - 3
     15  fd68					      ENDIF
     16  fd68
     17  fd68				  -	      REPEAT	.CYCLES / 2
     18  fd68				  -	      nop
     19  fd68					      REPEND
    201  fd68
    202  fd68							; End visible line
      0  fd68					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fd68				   .KERNEL    SET	$B
      2  fd68				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fd68					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    204  fd68
    205  fd68				   KernelB_branch
    206  fd68		       ad 84 02 	      lda	INTIM
    207  fd6b		       d0 cd		      bne	KernelB_early
    208  fd6d		       4c 5b fc 	      jmp	row_after_kernel
    209  fd70
    210  fd70					      rend
    211  fd70				   kernel_2_end
      0  fd70					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fd70				   .STARTA    SET	kernel_2_start
      2  fd70				   .ENDA      SET	kernel_2_end
      3  fd70				   .LEN       SET	$40
      4  fd70				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd70				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd70				  -	      err
      7  fd70					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fd70					      include	"data_sprites.s"
      1  fd70
      2  fe00		       00 00 00 00*	      align	256
      3  fe00
      4  fe00				   Frame0
      5  fe00							; 8 buffer
      6  fe00		       00		      .byte.b	#%00000000
      7  fe01		       00		      .byte.b	#%00000000
      8  fe02		       00		      .byte.b	#%00000000
      9  fe03		       00		      .byte.b	#%00000000
     10  fe04		       00		      .byte.b	#%00000000
     11  fe05		       00		      .byte.b	#%00000000
     12  fe06		       00		      .byte.b	#%00000000
     13  fe07		       00		      .byte.b	#%00000000
     14  fe08
     15  fe08							; 8 rows
     16  fe08		       60		      .byte.b	#%01100000
     17  fe09		       60		      .byte.b	#%01100000
     18  fe0a		       60		      .byte.b	#%01100000
     19  fe0b		       c0		      .byte.b	#%11000000
     20  fe0c		       c0		      .byte.b	#%11000000
     21  fe0d		       f0		      .byte.b	#%11110000
     22  fe0e		       c0		      .byte.b	#%11000000
     23  fe0f		       c0		      .byte.b	#%11000000
     24  fe10
     25  fe10							; 8 buffer
     26  fe10		       00		      .byte.b	#%00000000
     27  fe11		       00		      .byte.b	#%00000000
     28  fe12		       00		      .byte.b	#%00000000
     29  fe13		       00		      .byte.b	#%00000000
     30  fe14		       00		      .byte.b	#%00000000
     31  fe15		       00		      .byte.b	#%00000000
     32  fe16		       00		      .byte.b	#%00000000
     33  fe17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fe18					      include	"data_levels.s"
      1  fe18					      align	8
      2  fe18
      3  fe18				   shard_map
      4  fe18		       40		      .byte.b	%01000000	; [1, 0, 0]
      5  fe19				   shard_map_end
------- FILE main.s
    130  fe19
    131  fffc					      org	$fffc
    132  fffc		       09 f2		      .word.w	Start
    133  fffe		       09 f2		      .word.w	Start
