------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008e ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     49 U008e
     50 U008e		       00 10	   ROW_COUNT  equ	16
     51 U008e
     52 U008e							; Sprites
     53 U008e
     54 U008e							; Nusiz
     55 U008e		       00 13	   THREE_COPIES equ	%00010011
     56 U008e
     57 U008e							; Frame 1 sprites
     58 U008e		       00 60	   EMR1       equ	%01100000
     59 U008e		       00 06	   EMR2       equ	%00000110
     60 U008e		       00 66	   EMR3       equ	%01100110
     61 U008e
     62 U008e							; Frame 2 sprites
     63 U008e		       00 c0	   T1	      equ	%11000000
     64 U008e		       00 0c	   T2	      equ	%00001100
     65 U008e		       00 cc	   T3	      equ	%11001100
     66 U008e
     67 U008e							; Shorthands
     68 U008e
     69 U008e		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     70 U008e		       00 85	   SET_1_0    equ	$85	; STA
     71 U008e		       00 86	   SET_0_1    equ	$86	; STX
     72 U008e		       00 84	   SET_1_1    equ	$84	; STY
     73 U008e
     74 U008e		       00 86	   SET_0_L    equ	$86	; STX
     75 U008e		       00 85	   SET_1_L    equ	$85	; STY
     76 U008e
     77 U008e		       00 85	   SET_0_R    equ	$85	; STA
     78 U008e		       00 84	   SET_1_R    equ	$84	; STY
     79 U008e
     80 U008e							; Gem enabling/disabling globally
     81 U008e
     82 U008e							; ; all off
     83 U008e							; GEM_00 equ SET_0_0
     84 U008e							; GEM_02 equ SET_0_0
     85 U008e							; GEM_04 equ SET_0_0
     86 U008e							; GEM_06 equ SET_0_0
     87 U008e							; GEM_08 equ SET_0_L
     88 U008e							; GEM_09 equ SET_0_0
     89 U008e							; GEM_11 equ SET_0_0
     90 U008e							; GEM_13 equ SET_0_0
     91 U008e							; GEM_15 equ SET_0_0
     92 U008e							; GEM_17 equ SET_0_R
     93 U008e							; GEM_18 equ SET_0_0
     94 U008e							; GEM_20 equ SET_0_0
     95 U008e							; GEM_22 equ SET_0_0
     96 U008e							; GEM_24 equ SET_0_0
     97 U008e
     98 U008e							; all on
     99 U008e		       00 84	   GEM_00     equ	SET_1_1
    100 U008e		       00 84	   GEM_02     equ	SET_1_1
    101 U008e		       00 84	   GEM_04     equ	SET_1_1
    102 U008e		       00 84	   GEM_06     equ	SET_1_1
    103 U008e		       00 85	   GEM_08     equ	SET_1_L
    104 U008e		       00 84	   GEM_09     equ	SET_1_1
    105 U008e		       00 84	   GEM_11     equ	SET_1_1
    106 U008e		       00 84	   GEM_13     equ	SET_1_1
    107 U008e		       00 84	   GEM_15     equ	SET_1_1
    108 U008e		       00 84	   GEM_17     equ	SET_1_R
    109 U008e		       00 84	   GEM_18     equ	SET_1_1
    110 U008e		       00 84	   GEM_20     equ	SET_1_1
    111 U008e		       00 84	   GEM_22     equ	SET_1_1
    112 U008e		       00 84	   GEM_24     equ	SET_1_1
    113 U008e
    114 U008e							; ; odd on
    115 U008e							; GEM_00 equ SET_1_0
    116 U008e							; GEM_02 equ SET_1_0
    117 U008e							; GEM_04 equ SET_1_0
    118 U008e							; GEM_06 equ SET_1_0
    119 U008e							; GEM_08 equ SET_1_L
    120 U008e							; GEM_09 equ SET_0_1
    121 U008e							; GEM_11 equ SET_0_1
    122 U008e							; GEM_13 equ SET_0_1
    123 U008e							; GEM_15 equ SET_0_1
    124 U008e							; GEM_17 equ SET_0_R
    125 U008e							; GEM_18 equ SET_1_0
    126 U008e							; GEM_20 equ SET_1_0
    127 U008e							; GEM_22 equ SET_1_0
    128 U008e							; GEM_24 equ SET_1_0
    129 U008e
    130 U008e							; ; even on
    131 U008e							; GEM_00 equ SET_0_1
    132 U008e							; GEM_02 equ SET_0_1
    133 U008e							; GEM_04 equ SET_0_1
    134 U008e							; GEM_06 equ SET_0_1
    135 U008e							; GEM_08 equ SET_0_L
    136 U008e							; GEM_09 equ SET_1_0
    137 U008e							; GEM_11 equ SET_1_0
    138 U008e							; GEM_13 equ SET_1_0
    139 U008e							; GEM_15 equ SET_1_0
    140 U008e							; GEM_17 equ SET_1_R
    141 U008e							; GEM_18 equ SET_0_1
    142 U008e							; GEM_20 equ SET_0_1
    143 U008e							; GEM_22 equ SET_0_1
    144 U008e							; GEM_24 equ SET_0_1
    145 U008e
    146 U008e							; Colors
    147 U008e
    148 U008e		       00 42	   COL_BG     equ	$42
    149 U008e		       00 cc	   COL_EMERALD equ	$CC
    150 U008e		       00 cc	   COL_EMERALD_2 equ	$CC
    151 U008e
    152 U008e							; HMOVE values
    153 U008e
    154 U008e		       00 27	   EMERALD_MI_HMOVE_S equ	39
    155 U008e		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    156 U008e		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    157 U008e
    158 U008e							; Sprite details
    159 U008e
    160 U008e		       00 09	   SPRITE_HEIGHT equ	9
    161 U008e
    162 U008e
    163 U008e		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    164 U008e		       00 1c	   EMERALD_SP equ	GRP1
    165 U008e		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    166 U008e		       00 11	   EMERALD_SP_RESET equ	RESP1
    167 U008e		       00 13	   EMERALD_MI_RESET equ	RESM1
    168 U008e		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    169 U008e		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    170 U008e		       00 05	   EMERALD_COPIES equ	NUSIZ1
    171 U008e
    172 U008e		       00 1b	   JET_SP     equ	GRP0
    173 U008e		       00 10	   JET_SP_RESET equ	RESP0
    174 U008e		       00 20	   JET_SP_HMOVE equ	HMP0
    175 U008e		       00 06	   JET_SP_COLOR equ	COLUP0
    176 U008e
    177 U008e
    178 U008e							; Offset from the sprite label to the point
    179 U008e							; at which the sprite actually starts. This is the 0-padding
    180 U008e							; FRAME_OFFSET equ 53
    181 U008e
    182 U008e							; Spriteend is HEIGHT_OFFSET - YPos
    183 U008e		       00 c8	   HEIGHT_OFFSET equ	200
    184 U008e
    185 U008e							; Compared with YPos
    186 U008e		       00 32	   FLOOR_OFFSET equ	50
    187 U008e
    188 U008e							; YPos definite position
    189 U008e		       00 64	   YPosStart  equ	100
    190 U008e
    191 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    192 U008e
    193  10000 ????				       seg	Code
    194  10000 ????
    195  d000					      org	$D000
    196  d000					      rorg	$F000
    197  d000
    198  d000		       00	   BANK1      byte.b
    199  d001
    200  d200					      org	$D200
    201  d200					      rorg	$F200
    202  d200
    203  d200				   Bank1Start
    204  d200		       ad fa ff 	      lda	$FFFA
    205  d203		       ea		      nop
    206  d204		       ea		      nop
    207  d205		       ea		      nop
    208  d206
    209  d206							; Epilogue
    210  dffc					      org	$DFFC
    211  dffc					      rorg	$FFFC
    212  dffc		       00 f2		      .word.w	Bank1Start
    213  dffe		       00 f2		      .word.w	Bank1Start
    214  e000
    215  e000					      org	$E000
    216  e000					      rorg	$F000
    217  e000
    218  e000		       00	   BANK2      byte.b
    219  e001
    220  e200					      org	$E200
    221  e200					      rorg	$F200
    222  e200
    223  e200				   Bank2Start
    224  e200		       ad fa ff 	      lda	$FFFA
    225  e203		       ea		      nop
    226  e204		       ea		      nop
    227  e205		       ea		      nop
    228  e206
    229  e206							; Epilogue
    230  effc					      org	$EFFC
    231  effc					      rorg	$FFFC
    232  effc		       00 f2		      .word.w	Bank2Start
    233  effe		       00 f2		      .word.w	Bank2Start
    234  f000
    235  f000					      org	$F000
    236  f000					      rorg	$F000
    237  f000
    238  f000		       00	   BANK3      byte.b
    239  f001
    240  f200					      org	$F200
    241  f200					      rorg	$F200
    242  f200
    243  f200				   Start
    244  f200		       ad fa ff 	      lda	$FFFA
    245  f203		       ea		      nop
    246  f204		       ea		      nop
    247  f205		       ea		      nop
    248  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    250  f211		       a9 00		      lda	#0
    251  f213		       85 83		      sta	FrameCount
    252  f215
    253  f215							; P0 has three copies
    254  f215		       a9 13		      lda	#THREE_COPIES
    255  f217		       85 05		      sta	EMERALD_COPIES
    256  f219
    257  f219		       a9 02		      lda	#$02
    258  f21b		       85 09		      sta	COLUBK
    259  f21d		       a9 01		      lda	#%00000001
    260  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    261  f221
    262  f221							; Disable VDEL
    263  f221		       a9 00		      lda	#0
    264  f223		       85 25		      sta	VDELP0
    265  f225		       85 26		      sta	VDELP1
    266  f227
    267  f227
    268  f227							; Player 0
    269  f227		       a2 cc		      ldx	#COL_EMERALD
    270  f229		       86 07		      stx	EMERALD_SP_COLOR
    271  f22b
    272  f22b							; Player 1
    273  f22b		       a9 98		      lda	#$98
    274  f22d		       85 06		      sta	JET_SP_COLOR
    275  f22f		       a9 00		      lda	#$00
    276  f231		       85 1b		      sta	JET_SP
    277  f233
    278  f233							; Positions
    279  f233		       a9 64		      lda	#YPosStart
    280  f235		       85 89		      sta	YPos
    281  f237		       a9 37		      lda	#55
    282  f239		       85 86		      sta	XPos
    283  f23b		       a9 00		      lda	#0
    284  f23d		       85 87		      sta	Speed1
    285  f23f		       85 88		      sta	Speed2
    286  f241		       85 8a		      sta	YPos2
    287  f243
    288  f243				   BeginFrame
      0  f243					      VERTICAL_SYNC
      1  f243		       a9 0e		      lda	#%1110
      2  f245		       85 02	   .VSLP1     sta	WSYNC
      3  f247		       85 00		      sta	VSYNC
      4  f249		       4a		      lsr
      5  f24a		       d0 f9		      bne	.VSLP1
    290  f24c
      0  f24c					      TIMER_SETUP	37
      1  f24c				   .lines     SET	37
      2  f24c		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f24e		       85 02		      sta	WSYNC
      4  f250		       8d 96 02 	      sta	TIM64T
    292  f253
    293  f253							; Scanline counter
    294  f253		       a9 10		      lda	#ROW_COUNT
    295  f255		       85 82		      sta	LoopCount
    296  f257
    297  f257							; Frame counter
    298  f257		       e6 83		      inc	FrameCount
    299  f259
    300  f259							; Now the work stuff
    301  f259
    302  f259							; FRAMESWITCH
    303  f259		       a9 01		      lda	#01
    304  f25b		       25 83		      and	FrameCount
    305  f25d		       d0 14		      bne	CopyFrame2Kernel
    306  f25f				   CopyFrame1Kernel
    307  f25f
    308  f25f							; Copy: FRAME 1
    309  f25f		       a0 2c		      ldy	#(frame_1_end - frame_1_start)-1
    310  f261				   .copy_loop
    311  f261		       b9 31 f4 	      lda	frame_1_start,Y
    312  f264		       99 00 10 	      sta	$1000,Y
    313  f267		       88		      dey
    314  f268		       d0 f7		      bne	.copy_loop
    315  f26a		       ad 31 f4 	      lda	frame_1_start
    316  f26d		       8d 00 10 	      sta	$1000
    317  f270		       4c 87 f2 	      jmp	CopyFrameNext
    318  f273
    319  f273				   CopyFrame2Kernel
    320  f273
    321  f273							; Copy: FRAME 2
    322  f273		       a0 2c		      ldy	#(frame_2_end - frame_2_start)-1
    323  f275				   .copy_loop2
    324  f275		       b9 5e f4 	      lda	frame_2_start,Y
    325  f278		       99 00 10 	      sta	$1000,Y
    326  f27b		       88		      dey
    327  f27c		       d0 f7		      bne	.copy_loop2
    328  f27e		       ad 5e f4 	      lda	frame_2_start
    329  f281		       8d 00 10 	      sta	$1000
    330  f284		       4c 87 f2 	      jmp	CopyFrameNext
    331  f287
    332  f287				   CopyFrameNext
    333  f287							; Positioning
    334  f287		       85 02		      sta	WSYNC
      0  f289					      SLEEP	40
      1  f289				   .CYCLES    SET	40
      2  f289
      3  f289				  -	      IF	.CYCLES < 2
      4  f289				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f289				  -	      ERR
      6  f289					      ENDIF
      7  f289
      8  f289				  -	      IF	.CYCLES & 1
      9  f289				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f289				  -	      nop	0
     11  f289				  -	      ELSE
     12  f289				  -	      bit	VSYNC
     13  f289				  -	      ENDIF
     14  f289				  -.CYCLES    SET	.CYCLES - 3
     15  f289					      ENDIF
     16  f289
     17  f289					      REPEAT	.CYCLES / 2
     18  f289		       ea		      nop
     17  f289					      REPEND
     18  f28a		       ea		      nop
     17  f28a					      REPEND
     18  f28b		       ea		      nop
     17  f28b					      REPEND
     18  f28c		       ea		      nop
     17  f28c					      REPEND
     18  f28d		       ea		      nop
     17  f28d					      REPEND
     18  f28e		       ea		      nop
     17  f28e					      REPEND
     18  f28f		       ea		      nop
     17  f28f					      REPEND
     18  f290		       ea		      nop
     17  f290					      REPEND
     18  f291		       ea		      nop
     17  f291					      REPEND
     18  f292		       ea		      nop
     17  f292					      REPEND
     18  f293		       ea		      nop
     17  f293					      REPEND
     18  f294		       ea		      nop
     17  f294					      REPEND
     18  f295		       ea		      nop
     17  f295					      REPEND
     18  f296		       ea		      nop
     17  f296					      REPEND
     18  f297		       ea		      nop
     17  f297					      REPEND
     18  f298		       ea		      nop
     17  f298					      REPEND
     18  f299		       ea		      nop
     17  f299					      REPEND
     18  f29a		       ea		      nop
     17  f29a					      REPEND
     18  f29b		       ea		      nop
     17  f29b					      REPEND
     18  f29c		       ea		      nop
     19  f29d					      REPEND
    336  f29d		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    337  f29f		       85 02		      sta	WSYNC
    338  f2a1
    339  f2a1							; Misc
    340  f2a1		       a9 00		      lda	#00
    341  f2a3		       85 1e		      sta	EMERALD_MI_ENABLE
    342  f2a5
    343  f2a5							; Assign dervied SpriteEnd value
    344  f2a5		       a9 c8		      lda	#HEIGHT_OFFSET
    345  f2a7		       e5 89		      sbc	YPos
    346  f2a9		       85 85		      sta	SpriteEnd
    347  f2ab
    348  f2ab							; Move missile to starting position and fine-tune position
    349  f2ab							; TODO replace with an HMOVE macro
    350  f2ab		       85 02		      sta	WSYNC
      0  f2ad					      sleep	EMERALD_MI_HMOVE_S
      1  f2ad				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f2ad
      3  f2ad				  -	      IF	.CYCLES < 2
      4  f2ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ad				  -	      ERR
      6  f2ad					      ENDIF
      7  f2ad
      8  f2ad					      IF	.CYCLES & 1
      9  f2ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ad		       04 00		      nop	0
     11  f2af				  -	      ELSE
     12  f2af				  -	      bit	VSYNC
     13  f2af					      ENDIF
     14  f2af				   .CYCLES    SET	.CYCLES - 3
     15  f2af					      ENDIF
     16  f2af
     17  f2af					      REPEAT	.CYCLES / 2
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     19  f2c1					      REPEND
    352  f2c1		       85 13		      sta	EMERALD_MI_RESET
    353  f2c3
    354  f2c3							; Player 1
    355  f2c3		       a5 86		      lda	XPos
    356  f2c5		       a2 00		      ldx	#0
    357  f2c7		       20 eb f4 	      jsr	SetHorizPos
    358  f2ca
    359  f2ca
    360  f2ca							; Choose which hmove value to use
    361  f2ca							; FRAMESWITCH
    362  f2ca		       a9 01		      lda	#01
    363  f2cc		       25 83		      and	FrameCount
    364  f2ce		       d0 07		      bne	doframe2
    365  f2d0
    366  f2d0							; frame 1
    367  f2d0		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    368  f2d2		       85 23		      sta	EMERALD_MI_HMOVE
    369  f2d4		       4c db f2 	      jmp	doframe2after
    370  f2d7
    371  f2d7							; frame 2
    372  f2d7				   doframe2
    373  f2d7		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    374  f2d9		       85 23		      sta	EMERALD_MI_HMOVE
    375  f2db				   doframe2after
    376  f2db
      0  f2db					      TIMER_WAIT
      1  f2db				   .waittimer
      2  f2db		       ad 84 02 	      lda	INTIM
      3  f2de		       d0 fb		      bne	.waittimer
      0  f2e0					      TIMER_SETUP	192
      1  f2e0				   .lines     SET	192
      2  f2e0		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f2e2		       85 02		      sta	WSYNC
      4  f2e4		       8d 96 02 	      sta	TIM64T
    379  f2e7
    380  f2e7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    381  f2e7
    382  f2e7							; Frame border top
    383  f2e7
    384  f2e7							; Start top border
    385  f2e7				   frame_top
    386  f2e7		       a9 42		      lda	#COL_BG
    387  f2e9		       85 08		      sta	COLUPF
    388  f2eb							; Make the playfield solid.
    389  f2eb		       a9 3f		      lda	#%00111111
    390  f2ed		       85 0e		      sta	PF1
    391  f2ef		       a9 ff		      lda	#%11111111
    392  f2f1		       85 0f		      sta	PF2
    393  f2f3		       85 02		      sta	WSYNC
    394  f2f5
    395  f2f5		       85 2a		      sta	HMOVE
    396  f2f7		       85 2b		      sta	HMCLR
    397  f2f9		       85 02		      sta	WSYNC
    398  f2fb
    399  f2fb		       85 02		      sta	WSYNC
    400  f2fd		       85 02		      sta	WSYNC
    401  f2ff		       85 02		      sta	WSYNC
    402  f301		       85 02		      sta	WSYNC
    403  f303		       85 02		      sta	WSYNC
    404  f305		       85 02		      sta	WSYNC
    405  f307
    406  f307				   PlayArea
    407  f307							; PF is now the playing area
    408  f307		       a9 00		      lda	#%00000000
    409  f309		       85 0d		      sta	PF0
    410  f30b		       a9 20		      lda	#%00100000
    411  f30d		       85 0e		      sta	PF1
    412  f30f		       a9 00		      lda	#%00000000
    413  f311		       85 0f		      sta	PF2
    414  f313
    415  f313
    416  f313							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    417  f313
    418  f313							; frame start
    419  f313
    420  f313
    421  f313
    422  f313
    423  f313							; MACRO for calculating next GRPx value
    424  f313
    425  f313					      MAC	jet_spritedata_calc
    426  f313					      lda	#SPRITE_HEIGHT
    427  f313					      dcp	SpriteEnd
    428  f313					      ldy	SpriteEnd
    429  f313
    430  f313							; 4c
    431  f313							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    432  f313					      lda	Frame0,Y
    433  f313							; 6c
    434  f313					      .byte	$b0, $01	;2c / 3c (taken)
    435  f313					      .byte	$2c	; 4c / 0c
    436  f313					      sta	JET_SP	; 0c / 3c
    437  f313
    438  f313					      ENDM
    439  f313
    440  f313
    441  f313							; Start the frame with a WSYNC.
    442  f313				   frame_start
    443  f313		       85 02		      sta	WSYNC
    444  f315
    445  f315							; [row:1]
      0  f315					      jet_spritedata_calc
      1  f315		       a9 09		      lda	#SPRITE_HEIGHT
      2  f317		       c7 85		      dcp	SpriteEnd
      3  f319		       a4 85		      ldy	SpriteEnd
      4  f31b
      5  f31b
      6  f31b
      7  f31b		       b9 00 f5 	      lda	Frame0,Y
      8  f31e
      9  f31e		       b0 01		      .byte.b	$b0, $01
     10  f320		       2c		      .byte.b	$2c
     11  f321		       85 1b		      sta	JET_SP
     12  f323
    447  f323
    448  f323							; Push jump table to the stack
    449  f323		       a9 f3		      lda	#>[frame_row_start - 1]
    450  f325		       48		      pha
    451  f326		       a9 5b		      lda	#<[frame_row_start - 1]
    452  f328		       48		      pha
    453  f329		       a9 10		      lda	#>[$1100 - 1]
    454  f32b		       48		      pha
    455  f32c		       a9 ff		      lda	#<[$1100 - 1]
    456  f32e		       48		      pha
    457  f32f		       85 02		      sta	WSYNC
    458  f331
    459  f331							; [row:2]
      0  f331					      jet_spritedata_calc
      1  f331		       a9 09		      lda	#SPRITE_HEIGHT
      2  f333		       c7 85		      dcp	SpriteEnd
      3  f335		       a4 85		      ldy	SpriteEnd
      4  f337
      5  f337
      6  f337
      7  f337		       b9 00 f5 	      lda	Frame0,Y
      8  f33a
      9  f33a		       b0 01		      .byte.b	$b0, $01
     10  f33c		       2c		      .byte.b	$2c
     11  f33d		       85 1b		      sta	JET_SP
     12  f33f
    461  f33f
    462  f33f							; Prepare for the kernel.
    463  f33f							; TODO this has to be EXACT
      0  f33f					      sleep	48
      1  f33f				   .CYCLES    SET	48
      2  f33f
      3  f33f				  -	      IF	.CYCLES < 2
      4  f33f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f33f				  -	      ERR
      6  f33f					      ENDIF
      7  f33f
      8  f33f				  -	      IF	.CYCLES & 1
      9  f33f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f33f				  -	      nop	0
     11  f33f				  -	      ELSE
     12  f33f				  -	      bit	VSYNC
     13  f33f				  -	      ENDIF
     14  f33f				  -.CYCLES    SET	.CYCLES - 3
     15  f33f					      ENDIF
     16  f33f
     17  f33f					      REPEAT	.CYCLES / 2
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     17  f346					      REPEND
     18  f347		       ea		      nop
     17  f347					      REPEND
     18  f348		       ea		      nop
     17  f348					      REPEND
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     17  f355					      REPEND
     18  f356		       ea		      nop
     19  f357					      REPEND
    465  f357		       c6 85		      dec	SpriteEnd
    466  f359
    467  f359							; [row:3-4]
    468  f359							; Jump to the copied kernel.
    469  f359		       4c 00 11 	      jmp	$1100
    470  f35c
    471  f35c				   frame_row_start subroutine
    472  f35c							; [row:5]
    473  f35c							; Cleanup from the kernel.
    474  f35c		       a9 00		      lda	#0
    475  f35e		       85 1e		      sta	EMERALD_MI_ENABLE
    476  f360		       85 1c		      sta	EMERALD_SP
    477  f362
    478  f362		       85 02		      sta	WSYNC
    479  f364
    480  f364							; [row:6]
      0  f364					      jet_spritedata_calc
      1  f364		       a9 09		      lda	#SPRITE_HEIGHT
      2  f366		       c7 85		      dcp	SpriteEnd
      3  f368		       a4 85		      ldy	SpriteEnd
      4  f36a
      5  f36a
      6  f36a
      7  f36a		       b9 00 f5 	      lda	Frame0,Y
      8  f36d
      9  f36d		       b0 01		      .byte.b	$b0, $01
     10  f36f		       2c		      .byte.b	$2c
     11  f370		       85 1b		      sta	JET_SP
     12  f372
    482  f372
    483  f372							; FRAMESWITCH
    484  f372		       a9 01		      lda	#01
    485  f374		       25 83		      and	FrameCount
    486  f376		       d0 1b		      bne	loadframe2
    487  f378				   loadframe1
    488  f378							; Emerald byte setting
    489  f378		       a9 84		      lda	#SET_1_1
    490  f37a		       85 8b		      sta	GEM_02_TARGET
    491  f37c		       a9 84		      lda	#SET_1_1
    492  f37e		       85 8b		      sta	GEM_02_TARGET
    493  f380		       a9 84		      lda	#SET_1_1
    494  f382		       85 8b		      sta	GEM_02_TARGET
    495  f384		       a9 85		      lda	#SET_1_L
    496  f386		       85 8b		      sta	GEM_02_TARGET
    497  f388		       a9 84		      lda	#SET_1_1
    498  f38a		       85 8b		      sta	GEM_02_TARGET
    499  f38c		       a9 84		      lda	#SET_1_1
    500  f38e		       85 8b		      sta	GEM_02_TARGET
    501  f390
    502  f390		       4c b2 f3 	      jmp	loadframeafter
    503  f393
    504  f393				   loadframe2
    505  f393							; Emerald byte setting
    506  f393		       a9 84		      lda	#SET_1_1
    507  f395		       85 8b		      sta	GEM_02_TARGET
    508  f397		       a9 84		      lda	#SET_1_1
    509  f399		       85 8b		      sta	GEM_02_TARGET
    510  f39b		       a9 84		      lda	#SET_1_R
    511  f39d		       85 8b		      sta	GEM_02_TARGET
    512  f39f		       a9 84		      lda	#SET_1_1
    513  f3a1		       85 8b		      sta	GEM_02_TARGET
    514  f3a3		       a9 84		      lda	#SET_1_1
    515  f3a5		       85 8b		      sta	GEM_02_TARGET
    516  f3a7		       a9 84		      lda	#SET_1_1
    517  f3a9		       85 8b		      sta	GEM_02_TARGET
    518  f3ab		       a9 84		      lda	#SET_1_1
    519  f3ad		       85 8b		      sta	GEM_02_TARGET
    520  f3af
    521  f3af		       4c b2 f3 	      jmp	loadframeafter
    522  f3b2
    523  f3b2				   loadframeafter
    524  f3b2		       85 02		      sta	WSYNC
    525  f3b4
    526  f3b4							; [row:7]
      0  f3b4					      jet_spritedata_calc
      1  f3b4		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3b6		       c7 85		      dcp	SpriteEnd
      3  f3b8		       a4 85		      ldy	SpriteEnd
      4  f3ba
      5  f3ba
      6  f3ba
      7  f3ba		       b9 00 f5 	      lda	Frame0,Y
      8  f3bd
      9  f3bd		       b0 01		      .byte.b	$b0, $01
     10  f3bf		       2c		      .byte.b	$2c
     11  f3c0		       85 1b		      sta	JET_SP
     12  f3c2
    528  f3c2		       85 02		      sta	WSYNC
    529  f3c4
    530  f3c4							; [row:8]
      0  f3c4					      jet_spritedata_calc
      1  f3c4		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3c6		       c7 85		      dcp	SpriteEnd
      3  f3c8		       a4 85		      ldy	SpriteEnd
      4  f3ca
      5  f3ca
      6  f3ca
      7  f3ca		       b9 00 f5 	      lda	Frame0,Y
      8  f3cd
      9  f3cd		       b0 01		      .byte.b	$b0, $01
     10  f3cf		       2c		      .byte.b	$2c
     11  f3d0		       85 1b		      sta	JET_SP
     12  f3d2
    532  f3d2		       85 02		      sta	WSYNC
    533  f3d4
    534  f3d4							; [row:9]
      0  f3d4					      jet_spritedata_calc
      1  f3d4		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3d6		       c7 85		      dcp	SpriteEnd
      3  f3d8		       a4 85		      ldy	SpriteEnd
      4  f3da
      5  f3da
      6  f3da
      7  f3da		       b9 00 f5 	      lda	Frame0,Y
      8  f3dd
      9  f3dd		       b0 01		      .byte.b	$b0, $01
     10  f3df		       2c		      .byte.b	$2c
     11  f3e0		       85 1b		      sta	JET_SP
     12  f3e2
    536  f3e2
    537  f3e2							; next line, repeat until <0
    538  f3e2							; This performs a long jump to frame_start.
    539  f3e2		       c6 82		      dec	LoopCount
    540  f3e4		       30 03		      bmi	frame_bottom
    541  f3e6		       4c 13 f3 	      jmp	frame_start
    542  f3e9
    543  f3e9							; reset the background for bottom of playfield
    544  f3e9				   frame_bottom
    545  f3e9		       85 02		      sta	WSYNC
    546  f3eb
    547  f3eb							; Make the playfield solid.
    548  f3eb		       a9 3f		      lda	#%00111111
    549  f3ed		       85 0e		      sta	PF1
    550  f3ef		       a9 ff		      lda	#%11111111
    551  f3f1		       85 0f		      sta	PF2
    552  f3f3
    553  f3f3							; Clear all sprites.
    554  f3f3		       a9 00		      lda	#0
    555  f3f5		       85 1c		      sta	EMERALD_SP
    556  f3f7		       85 1b		      sta	JET_SP
    557  f3f9		       85 1e		      sta	EMERALD_MI_ENABLE
    558  f3fb
    559  f3fb							; Skip eight lines.
    560  f3fb		       85 02		      sta	WSYNC
    561  f3fd		       85 02		      sta	WSYNC
    562  f3ff		       85 02		      sta	WSYNC
    563  f401		       85 02		      sta	WSYNC
    564  f403		       85 02		      sta	WSYNC
    565  f405		       85 02		      sta	WSYNC
    566  f407		       85 02		      sta	WSYNC
    567  f409		       85 02		      sta	WSYNC
    568  f40b
    569  f40b							; Blank all background colors.
    570  f40b		       a9 02		      lda	#$02
    571  f40d		       85 09		      sta	COLUBK
    572  f40f		       a9 00		      lda	#0
    573  f411		       85 08		      sta	COLUPF
    574  f413
    575  f413				   frame_end
    576  f413							; End
    577  f413		       a9 00		      lda	#0
    578  f415		       85 1c		      sta	EMERALD_SP
    579  f417
      0  f417					      TIMER_WAIT
      1  f417				   .waittimer
      2  f417		       ad 84 02 	      lda	INTIM
      3  f41a		       d0 fb		      bne	.waittimer
      0  f41c					      TIMER_SETUP	30
      1  f41c				   .lines     SET	30
      2  f41c		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f41e		       85 02		      sta	WSYNC
      4  f420		       8d 96 02 	      sta	TIM64T
    582  f423
    583  f423		       20 8b f4 	      jsr	MoveJoystick
    584  f426		       20 c2 f4 	      jsr	SpeedCalculation
    585  f429
      0  f429					      TIMER_WAIT
      1  f429				   .waittimer
      2  f429		       ad 84 02 	      lda	INTIM
      3  f42c		       d0 fb		      bne	.waittimer
    587  f42e		       4c 43 f2 	      jmp	BeginFrame
    588  f431
    589  f431
    590  f431							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    591  f431
    592  f431							; kernels
    593  f431
    594  f431
    595  f431							; Important cycles for the kernels:
    596  f431							; left border: 29, right border: 64
    597  f431
    598  f431							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    599  f431
    600  f431							; FRAME 1
    601  f431
    602  f431							; Emerald line macro
    603  f431
    604  f431							; rorg $1100
    605  f431
    606  f431
    607  f431							; Start new line
    608  f431				   frame_1_start
    609  f431		       c6 85		      dec	SpriteEnd
      0  f433					      sleep	8
      1  f433				   .CYCLES    SET	8
      2  f433
      3  f433				  -	      IF	.CYCLES < 2
      4  f433				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f433				  -	      ERR
      6  f433					      ENDIF
      7  f433
      8  f433				  -	      IF	.CYCLES & 1
      9  f433				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f433				  -	      nop	0
     11  f433				  -	      ELSE
     12  f433				  -	      bit	VSYNC
     13  f433				  -	      ENDIF
     14  f433				  -.CYCLES    SET	.CYCLES - 3
     15  f433					      ENDIF
     16  f433
     17  f433					      REPEAT	.CYCLES / 2
     18  f433		       ea		      nop
     17  f433					      REPEND
     18  f434		       ea		      nop
     17  f434					      REPEND
     18  f435		       ea		      nop
     17  f435					      REPEND
     18  f436		       ea		      nop
     19  f437					      REPEND
    611  f437
    612  f437		       a9 60		      lda	#EMR1
    613  f439		       a2 06		      ldx	#EMR2
    614  f43b		       a0 66		      ldy	#EMR3
    615  f43d		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    616  f43f
    617  f43f							; 22
    618  f43f		       85 11		      sta	EMERALD_SP_RESET
      0  f441					      sleep	6
      1  f441				   .CYCLES    SET	6
      2  f441
      3  f441				  -	      IF	.CYCLES < 2
      4  f441				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f441				  -	      ERR
      6  f441					      ENDIF
      7  f441
      8  f441				  -	      IF	.CYCLES & 1
      9  f441				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f441				  -	      nop	0
     11  f441				  -	      ELSE
     12  f441				  -	      bit	VSYNC
     13  f441				  -	      ENDIF
     14  f441				  -.CYCLES    SET	.CYCLES - 3
     15  f441					      ENDIF
     16  f441
     17  f441					      REPEAT	.CYCLES / 2
     18  f441		       ea		      nop
     17  f441					      REPEND
     18  f442		       ea		      nop
     17  f442					      REPEND
     18  f443		       ea		      nop
     19  f444					      REPEND
    620  f444		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    621  f446		       85 11		      sta	EMERALD_SP_RESET
    622  f448		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f44a					      sleep	3
      1  f44a				   .CYCLES    SET	3
      2  f44a
      3  f44a				  -	      IF	.CYCLES < 2
      4  f44a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f44a				  -	      ERR
      6  f44a					      ENDIF
      7  f44a
      8  f44a					      IF	.CYCLES & 1
      9  f44a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f44a		       04 00		      nop	0
     11  f44c				  -	      ELSE
     12  f44c				  -	      bit	VSYNC
     13  f44c					      ENDIF
     14  f44c				   .CYCLES    SET	.CYCLES - 3
     15  f44c					      ENDIF
     16  f44c
     17  f44c				  -	      REPEAT	.CYCLES / 2
     18  f44c				  -	      nop
     19  f44c					      REPEND
    624  f44c		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    625  f44e		       85 11		      sta	EMERALD_SP_RESET
    626  f450		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    627  f452		       84 1c		      .byte.b	GEM_18, EMERALD_SP
      0  f454					      sleep	3
      1  f454				   .CYCLES    SET	3
      2  f454
      3  f454				  -	      IF	.CYCLES < 2
      4  f454				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f454				  -	      ERR
      6  f454					      ENDIF
      7  f454
      8  f454					      IF	.CYCLES & 1
      9  f454					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f454		       04 00		      nop	0
     11  f456				  -	      ELSE
     12  f456				  -	      bit	VSYNC
     13  f456					      ENDIF
     14  f456				   .CYCLES    SET	.CYCLES - 3
     15  f456					      ENDIF
     16  f456
     17  f456				  -	      REPEAT	.CYCLES / 2
     18  f456				  -	      nop
     19  f456					      REPEND
    629  f456		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    630  f458		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    631  f45a
    632  f45a							; cycle 64 (start of right border)
      0  f45a					      sleep	6
      1  f45a				   .CYCLES    SET	6
      2  f45a
      3  f45a				  -	      IF	.CYCLES < 2
      4  f45a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f45a				  -	      ERR
      6  f45a					      ENDIF
      7  f45a
      8  f45a				  -	      IF	.CYCLES & 1
      9  f45a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f45a				  -	      nop	0
     11  f45a				  -	      ELSE
     12  f45a				  -	      bit	VSYNC
     13  f45a				  -	      ENDIF
     14  f45a				  -.CYCLES    SET	.CYCLES - 3
     15  f45a					      ENDIF
     16  f45a
     17  f45a					      REPEAT	.CYCLES / 2
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     19  f45d					      REPEND
    634  f45d		       60		      rts
    635  f45e				   frame_1_end
    636  f45e
    637  f45e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    638  f45e
    639  f45e							; FRAME 2
    640  f45e
    641  f45e				   frame_2_start
    642  f45e
    643  f45e							; Enable missile (using excessive lda instructions)
    644  f45e		       a9 02		      lda	#02
    645  f460		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    646  f462
    647  f462		       c6 85		      dec	SpriteEnd
      0  f464					      sleep	8
      1  f464				   .CYCLES    SET	8
      2  f464
      3  f464				  -	      IF	.CYCLES < 2
      4  f464				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f464				  -	      ERR
      6  f464					      ENDIF
      7  f464
      8  f464				  -	      IF	.CYCLES & 1
      9  f464				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f464				  -	      nop	0
     11  f464				  -	      ELSE
     12  f464				  -	      bit	VSYNC
     13  f464				  -	      ENDIF
     14  f464				  -.CYCLES    SET	.CYCLES - 3
     15  f464					      ENDIF
     16  f464
     17  f464					      REPEAT	.CYCLES / 2
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     19  f468					      REPEND
    649  f468							; ldy SpriteEnd
    650  f468							; lda Frame0,Y
    651  f468							; sta JET_SP
    652  f468
    653  f468							; moved: lda #T1
    654  f468		       a2 0c		      ldx	#T2
    655  f46a		       a0 cc		      ldy	#T3
    656  f46c		       84 1c		      .byte.b	GEM_02, EMERALD_SP
    657  f46e
    658  f46e							; cycle 25
    659  f46e		       85 11		      sta	EMERALD_SP_RESET
    660  f470		       a9 c0		      lda	#T1	; movable
      0  f472					      sleep	4
      1  f472				   .CYCLES    SET	4
      2  f472
      3  f472				  -	      IF	.CYCLES < 2
      4  f472				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f472				  -	      ERR
      6  f472					      ENDIF
      7  f472
      8  f472				  -	      IF	.CYCLES & 1
      9  f472				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f472				  -	      nop	0
     11  f472				  -	      ELSE
     12  f472				  -	      bit	VSYNC
     13  f472				  -	      ENDIF
     14  f472				  -.CYCLES    SET	.CYCLES - 3
     15  f472					      ENDIF
     16  f472
     17  f472					      REPEAT	.CYCLES / 2
     18  f472		       ea		      nop
     17  f472					      REPEND
     18  f473		       ea		      nop
     19  f474					      REPEND
    662  f474		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    663  f476		       85 11		      sta	EMERALD_SP_RESET
    664  f478		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    665  f47a							; stx EMERALD_MI_ENABLE ; stx disables it
      0  f47a					      sleep	3
      1  f47a				   .CYCLES    SET	3
      2  f47a
      3  f47a				  -	      IF	.CYCLES < 2
      4  f47a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f47a				  -	      ERR
      6  f47a					      ENDIF
      7  f47a
      8  f47a					      IF	.CYCLES & 1
      9  f47a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f47a		       04 00		      nop	0
     11  f47c				  -	      ELSE
     12  f47c				  -	      bit	VSYNC
     13  f47c					      ENDIF
     14  f47c				   .CYCLES    SET	.CYCLES - 3
     15  f47c					      ENDIF
     16  f47c
     17  f47c				  -	      REPEAT	.CYCLES / 2
     18  f47c				  -	      nop
     19  f47c					      REPEND
    667  f47c		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    668  f47e		       85 11		      sta	EMERALD_SP_RESET
    669  f480		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    670  f482		       84 1c		      .byte.b	GEM_24, EMERALD_SP
      0  f484					      sleep	6
      1  f484				   .CYCLES    SET	6
      2  f484
      3  f484				  -	      IF	.CYCLES < 2
      4  f484				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f484				  -	      ERR
      6  f484					      ENDIF
      7  f484
      8  f484				  -	      IF	.CYCLES & 1
      9  f484				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f484				  -	      nop	0
     11  f484				  -	      ELSE
     12  f484				  -	      bit	VSYNC
     13  f484				  -	      ENDIF
     14  f484				  -.CYCLES    SET	.CYCLES - 3
     15  f484					      ENDIF
     16  f484
     17  f484					      REPEAT	.CYCLES / 2
     18  f484		       ea		      nop
     17  f484					      REPEND
     18  f485		       ea		      nop
     17  f485					      REPEND
     18  f486		       ea		      nop
     19  f487					      REPEND
    672  f487
    673  f487							; cycle 64 (start of right border)
      0  f487					      sleep	6
      1  f487				   .CYCLES    SET	6
      2  f487
      3  f487				  -	      IF	.CYCLES < 2
      4  f487				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f487				  -	      ERR
      6  f487					      ENDIF
      7  f487
      8  f487				  -	      IF	.CYCLES & 1
      9  f487				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f487				  -	      nop	0
     11  f487				  -	      ELSE
     12  f487				  -	      bit	VSYNC
     13  f487				  -	      ENDIF
     14  f487				  -.CYCLES    SET	.CYCLES - 3
     15  f487					      ENDIF
     16  f487
     17  f487					      REPEAT	.CYCLES / 2
     18  f487		       ea		      nop
     17  f487					      REPEND
     18  f488		       ea		      nop
     17  f488					      REPEND
     18  f489		       ea		      nop
     19  f48a					      REPEND
    675  f48a		       60		      rts
    676  f48b				   frame_2_end
    677  f48b
    678  f48b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    679  f48b
    680  f48b							; SUBROUTINE
    681  f48b							; Read joystick movement and apply to object 0
    682  f48b				   MoveJoystick
    683  f48b							; Move vertically
    684  f48b							; (up and down are actually reversed since ypos starts at bottom)
    685  f48b							;     ldx YPos
    686  f48b		       a9 10		      lda	#%00010000	;Up?
    687  f48d		       2c 80 02 	      bit	SWCHA
    688  f490		       d0 0d		      bne	SkipMoveUp
    689  f492
    690  f492		       18		      clc
    691  f493		       a5 88		      lda	Speed2
    692  f495		       69 0c		      adc	#12
    693  f497		       85 88		      sta	Speed2
    694  f499		       a5 87		      lda	Speed1
    695  f49b		       69 00		      adc	#00
    696  f49d		       85 87		      sta	Speed1
    697  f49f
    698  f49f				   SkipMoveUp
    699  f49f		       a6 86		      ldx	XPos
    700  f4a1
    701  f4a1							; Only check left/right on odd frames;
    702  f4a1							; TODO make this just a fractional speed
    703  f4a1							; rather than dropping frames
    704  f4a1		       a9 01		      lda	#01
    705  f4a3		       25 83		      and	FrameCount
    706  f4a5		       d0 18		      bne	SkipMoveRight
    707  f4a7
    708  f4a7
    709  f4a7							; Move horizontally
    710  f4a7		       a9 40		      lda	#%01000000	;Left?
    711  f4a9		       2c 80 02 	      bit	SWCHA
    712  f4ac		       d0 05		      bne	SkipMoveLeft
    713  f4ae		       e0 1d		      cpx	#29
    714  f4b0		       90 01		      bcc	SkipMoveLeft
    715  f4b2		       ca		      dex
    716  f4b3
    717  f4b3							; Reflect
    718  f4b3							;     lda #$ff
    719  f4b3							;     sta REFP0
    720  f4b3				   SkipMoveLeft
    721  f4b3		       a9 80		      lda	#%10000000	;Right?
    722  f4b5		       2c 80 02 	      bit	SWCHA
    723  f4b8		       d0 05		      bne	SkipMoveRight
    724  f4ba		       e0 80		      cpx	#128
    725  f4bc		       b0 01		      bcs	SkipMoveRight
    726  f4be		       e8		      inx
    727  f4bf
    728  f4bf							; Reflect
    729  f4bf							;     lda #$0
    730  f4bf							;     sta REFP0
    731  f4bf				   SkipMoveRight
    732  f4bf		       86 86		      stx	XPos
    733  f4c1		       60		      rts
    734  f4c2
    735  f4c2
    736  f4c2							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    737  f4c2
    738  f4c2
    739  f4c2				   SpeedCalculation
    740  f4c2		       38		      sec
    741  f4c3		       a5 88		      lda	Speed2
    742  f4c5		       e9 07		      sbc	#7
    743  f4c7		       85 88		      sta	Speed2
    744  f4c9		       a5 87		      lda	Speed1
    745  f4cb		       e9 00		      sbc	#0
    746  f4cd		       85 87		      sta	Speed1
    747  f4cf
    748  f4cf		       18		      clc
    749  f4d0		       a5 8a		      lda	YPos2
    750  f4d2		       65 88		      adc	Speed2
    751  f4d4		       85 8a		      sta	YPos2
    752  f4d6		       a5 89		      lda	YPos
    753  f4d8		       65 87		      adc	Speed1
    754  f4da		       85 89		      sta	YPos
    755  f4dc
    756  f4dc		       c9 32		      cmp	#FLOOR_OFFSET
    757  f4de		       b0 0a		      bcs	NewThing2
    758  f4e0
    759  f4e0							; Reset everything?
    760  f4e0		       a9 32		      lda	#FLOOR_OFFSET
    761  f4e2		       85 89		      sta	YPos
    762  f4e4		       a9 00		      lda	#0
    763  f4e6		       85 87		      sta	Speed1
    764  f4e8		       85 88		      sta	Speed2
    765  f4ea				   NewThing2
    766  f4ea		       60		      rts
    767  f4eb
    768  f4eb
    769  f4eb
    770  f4eb							; Subroutine
    771  f4eb				   SetHorizPos
    772  f4eb		       85 02		      sta	WSYNC	; start a new line
    773  f4ed		       24 00		      bit	0	; waste 3 cycles
    774  f4ef		       38		      sec		; set carry flag
    775  f4f0				   DivideLoop
    776  f4f0		       e9 0f		      sbc	#15	; subtract 15
    777  f4f2		       b0 fc		      bcs	DivideLoop	; branch until negative
    778  f4f4		       49 07		      eor	#7	; calculate fine offset
    779  f4f6		       0a		      asl
    780  f4f7		       0a		      asl
    781  f4f8		       0a		      asl
    782  f4f9		       0a		      asl
    783  f4fa		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    784  f4fc		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    785  f4fe		       60		      rts		; return to caller
    786  f4ff
    787  f4ff
    788  f4ff
    789  f500		       00		      align	256
    790  f500
    791  f500							; Bitmap data for character "standing" position
    792  f500							; Comical amount of 0's for now to simplify sprite rendering
    793  f500
    794  f500							; Y can be from:
    795  f500							;     SPRITE_HEIGHT to (8*ROW_COUNT)
    796  f500							; SpriteEnd: 8..128
    797  f500							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
    798  f500				   Frame0
    799  f500		       00		      .byte.b	#%00000000
    800  f501		       60		      .byte.b	#%01100000
    801  f502		       60		      .byte.b	#%01100000
    802  f503		       60		      .byte.b	#%01100000
    803  f504		       c0		      .byte.b	#%11000000
    804  f505		       c0		      .byte.b	#%11000000
    805  f506		       f0		      .byte.b	#%11110000
    806  f507		       c0		      .byte.b	#%11000000
    807  f508		       c0		      .byte.b	#%11000000
    808  f509		       00		      .byte.b	#%00000000
    809  f50a
    810  f50a
    811  f50a							; Epilogue
    812  fffc					      org	$fffc
    813  fffc		       00 f2		      .word.w	Start
    814  fffe		       00 f2		      .word.w	Start
