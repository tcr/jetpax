------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       endm
      6  10000 ????				       mac	nibble_if
      7  10000 ????				       ror
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       endm
     19  10000 ????
     20  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     21  10000 ????				       mac	assert_runtime
     22  10000 ????			    .COND      SET	{1}
     23  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     24  10000 ????				       endm
     25  10000 ????
     26  10000 ????						; Static assertions for size
     27  10000 ????				       mac	assert_size
     28  10000 ????			    .STARTA    SET	{1}
     29  10000 ????			    .ENDA      SET	{2}
     30  10000 ????			    .LEN       SET	{3}
     31  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     32  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     33  10000 ????				       err
     34  10000 ????				       endif
     35  10000 ????				       endm
     36  10000 ????				       mac	assert_size_exact
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     41  10000 ????				       echo	""
     42  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     43  10000 ????				       err
     44  10000 ????				       endif
     45  10000 ????				       endm
     46  10000 ????
     47  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     51  0000 ????
     52  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U0094 ????				      seg.u	Variables
      2 U0094 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   KERNEL_TEMP_A byte.b
     31 U0090
     32 U0090		       00	   RamCurrentKernel byte.b
     33 U0091
     34 U0091		       00	   RamPF1Value byte.b
     35 U0092		       00	   RamKernelGRP0 byte.b
     36 U0093		       00	   RamKernelGRP0_temp byte.b
     37 U0094
     38 U0094							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     39 U0094
     40 U0094		       00 10	   ROW_COUNT  =	16
     41 U0094
     42 U0094		       00 02	   SIGNAL_LINE =	$02
     43 U0094
     44 U0094							; RAM+ memory map
     45 U0094
     46 U0094		       f0 00	   RAMP_KERNEL_W =	$f000
     47 U0094		       f1 00	   RAMP_KERNEL_R =	$f100
     48 U0094		       f1 04	   CBSRAM_KERNEL_ENTRY =	[RAMP_KERNEL_R + 4]
     49 U0094
     50 U0094		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     51 U0094		       f1 40	   RAMP_STORAGE_R =	$f140
     52 U0094
     53 U0094							; NUSIZ values
     54 U0094
     55 U0094		       00 13	   THREE_COPIES =	%00010011
     56 U0094
     57 U0094							; Colors
     58 U0094
     59 U0094		       00 42	   COL_BG     equ	$42
     60 U0094		       00 cc	   COL_EMERALD equ	$CC
     61 U0094		       00 cc	   COL_EMERALD_2 equ	$CC
     62 U0094
     63 U0094							; HMOVE values for missiles
     64 U0094
     65 U0094		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     66 U0094		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     67 U0094
     68 U0094		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     69 U0094		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     70 U0094
     71 U0094							; Sprite details
     72 U0094
     73 U0094		       00 09	   SPRITE_HEIGHT equ	9
     74 U0094
     75 U0094		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     76 U0094		       00 1c	   EMERALD_SP equ	GRP1
     77 U0094		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     78 U0094		       00 11	   EMERALD_SP_RESET equ	RESP1
     79 U0094		       00 13	   EMERALD_MI_RESET equ	RESM1
     80 U0094		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     81 U0094		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     82 U0094		       00 05	   EMERALD_COPIES equ	NUSIZ1
     83 U0094
     84 U0094		       00 1b	   JET_SP     equ	GRP0
     85 U0094		       00 10	   JET_SP_RESET equ	RESP0
     86 U0094		       00 20	   JET_SP_HMOVE equ	HMP0
     87 U0094		       00 06	   JET_SP_COLOR equ	COLUP0
     88 U0094
     89 U0094							; Spriteend is HEIGHT_OFFSET - YPos
     90 U0094		       00 c8	   HEIGHT_OFFSET equ	200
     91 U0094
     92 U0094							; Compared with YPos
     93 U0094		       00 3e	   FLOOR_OFFSET equ	62
     94 U0094		       00 be	   CEILING_OFFSET equ	190
     95 U0094
     96 U0094							; Starting player position
     97 U0094		       00 3e	   YPosStart  equ	62
     98 U0094		       00 37	   XPosStart  equ	55
     99 U0094
    100 U0094							; Top left corner
    101 U0094							; YPosStart equ 190
    102 U0094							; XPosStart equ 28
    103 U0094
    104 U0094							; Tick (every 8 frames)
    105 U0094		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     54 U0094
     55 U0094							; Bank 1
     56  e000 ????				      seg	CodeBank1
     57  d000					      org	$D000
     58  d000					      rorg	$F000
     59  d000		       00	   BANK1      byte.b
     60  d200					      org	$d200
     61  d200					      rorg	$d200
     62  d200				   Bank1Start
     63  d200		       ad fa ff 	      lda	$fffa
     64  d203		       ea		      nop
     65  d204		       ea		      nop
     66  d205		       ea		      nop
     67  d206
     68  dffc					      org	$dffc
     69  dffc					      rorg	$fffc
     70  dffc		       00 d2		      .word.w	Bank1Start
     71  dffe		       00 d2		      .word.w	Bank1Start
     72  e000
     73  e000							; Bank 2
     74  f000 ????				      seg	CodeBank2
     75  e000					      org	$E000
     76  e000					      rorg	$F000
     77  e000		       00	   BANK2      byte.b
     78  e200					      org	$e200
     79  e200					      rorg	$f200
     80  e200				   Bank2Start
     81  e200		       ad fa ff 	      lda	$fffa
     82  e203		       ea		      nop
     83  e204		       ea		      nop
     84  e205		       ea		      nop
     85  e206
     86  effc					      org	$effc
     87  effc					      rorg	$fffc
     88  effc		       00 f2		      .word.w	Bank2Start
     89  effe		       00 f2		      .word.w	Bank2Start
     90  f000
     91  f000							; Bank 3
     92  10000 ????				       seg	CodeBank3
     93  f000					      org	$F000
     94  f000					      rorg	$F000
     95  f000		       00	   BANK3      byte.b
     96  f200					      org	$f200
     97  f200					      rorg	$f200
     98  f200				   Bank3Start
     99  f200		       ad fa ff 	      lda	$fffa
    100  f203		       ea		      nop
    101  f204		       ea		      nop
    102  f205		       ea		      nop
    103  f206		       4c 09 f2 	      jmp	Start
    104  f209
    105  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      5  f214
      6  f214				   InitSetup
      7  f214		       a9 00		      lda	#0
      8  f216		       85 83		      sta	FrameCount
      9  f218
     10  f218							; P0 has three copies
     11  f218		       a9 13		      lda	#%00010011
     12  f21a		       85 05		      sta	EMERALD_COPIES
     13  f21c
     14  f21c		       a9 00		      lda	#$00
     15  f21e		       85 09		      sta	COLUBK
     16  f220		       a9 01		      lda	#%00000001
     17  f222		       85 0a		      sta	CTRLPF	; reflect playfield
     18  f224
     19  f224							; Disable VDEL
     20  f224		       a9 00		      lda	#0
     21  f226		       85 25		      sta	VDELP0
     22  f228		       85 26		      sta	VDELP1
     23  f22a
     24  f22a
     25  f22a							; Player 0
     26  f22a		       a2 cc		      ldx	#COL_EMERALD
     27  f22c		       86 07		      stx	EMERALD_SP_COLOR
     28  f22e
     29  f22e							; Player 1
     30  f22e		       a9 0f		      lda	#$0f
     31  f230		       85 06		      sta	JET_SP_COLOR
     32  f232		       a9 00		      lda	#$00
     33  f234		       85 1b		      sta	JET_SP
     34  f236
     35  f236							; Positions
     36  f236		       a9 3e		      lda	#YPosStart
     37  f238		       85 89		      sta	YPos
     38  f23a		       a9 37		      lda	#XPosStart
     39  f23c		       85 86		      sta	XPos
     40  f23e		       a9 00		      lda	#0
     41  f240		       85 87		      sta	Speed1
     42  f242		       85 88		      sta	Speed2
     43  f244		       85 8a		      sta	YPos2
     44  f246
     45  f246		       a9 00		      lda	#0
     46  f248		       85 8e		      sta	ROW_DEMO_INDEX
     47  f24a
     48  f24a							; Start with vertical sync (to reset frame)
     49  f24a		       4c 7d f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f24d					      include	"kernel_loader.s"
      1  f24d							; Copies the gem kernels to RAM
      2  f24d
      3  f24d							; Copy Kernel A to CBSRAM
      4  f24d				   LoadKernelA subroutine
      5  f24d		       a9 01		      lda	#01
      6  f24f		       85 90		      sta	RamCurrentKernel
      7  f251		       a0 33		      ldy	#(kernel_1_end - kernel_1_start)-1
      8  f253				   .loop
      9  f253		       b9 00 f6 	      lda	kernel_1_start,Y
     10  f256		       99 00 10 	      sta	$1000,Y
     11  f259		       88		      dey
     12  f25a		       d0 f7		      bne	.loop
     13  f25c		       ad 00 f6 	      lda	kernel_1_start
     14  f25f		       8d 00 10 	      sta	$1000
     15  f262		       60		      rts
     16  f263
     17  f263							; Copy Kernel B to CBSRAM
     18  f263				   LoadKernelB subroutine
     19  f263		       a9 02		      lda	#02
     20  f265		       85 90		      sta	RamCurrentKernel
     21  f267		       a0 34		      ldy	#(kernel_2_end - kernel_2_start)-1
     22  f269				   .loop
     23  f269		       b9 34 f6 	      lda	kernel_2_start,Y
     24  f26c		       99 00 10 	      sta	$1000,Y
     25  f26f		       88		      dey
     26  f270		       d0 f7		      bne	.loop
     27  f272		       ad 34 f6 	      lda	kernel_2_start
     28  f275		       8d 00 10 	      sta	$1000
     29  f278		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f279					      include	"nibble.s"
      1  f279				   NIBBLE_gem_kernel_OPCODE_1
      2  f279		       a9 c6		      lda	#%011000110
      0  f27b					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_1, ., 2
      1  f27b				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_1
      2  f27b				   .ENDA      SET	.
      3  f27b				   .LEN       SET	2
      4  f27b				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27b				  -	      echo	""
      6  f27b				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27b				  -	      err
      8  f27b					      endif
      4  f27b				   NIBBLE_gem_kernel_OPCODE_2
      5  f27b		       a9 00		      lda	#%000000000
      0  f27d					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_2, ., 2
      1  f27d				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_2
      2  f27d				   .ENDA      SET	.
      3  f27d				   .LEN       SET	2
      4  f27d				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f27d				  -	      echo	""
      6  f27d				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f27d				  -	      err
      8  f27d					      endif
      7  f27d
      8  f27d					      MAC	nibble_gem_kernel
      9  f27d				   .if_1
     10  f27d					      asl
     11  f27d					      bcc	.else_1
     12  f27d					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 0]
     13  f27d					      stx	[[KernelA_TEST - $100] + 0]
     14  f27d					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 1]
     15  f27d					      stx	[[KernelA_TEST - $100] + 1]
     16  f27d					      jmp	.endif_1
     17  f27d				   .else_1
     18  f27d					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 0]
     19  f27d					      stx	[[KernelA_TEST - $100] + 0]
     20  f27d					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 1]
     21  f27d					      stx	[[KernelA_TEST - $100] + 1]
     22  f27d				   .endif_1
     23  f27d					      ENDM
     24  f27d
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27d					      include	"game_frame.s"
      1  f27d							; Frame loop, including calling out to other kernels.
      2  f27d
      3  f27d							; Vertical Sync
      4  f27d				   VerticalSync subroutine
      0  f27d					      VERTICAL_SYNC
      1  f27d		       a9 0e		      lda	#%1110
      2  f27f		       85 02	   .VSLP1     sta	WSYNC
      3  f281		       85 00		      sta	VSYNC
      4  f283		       4a		      lsr
      5  f284		       d0 f9		      bne	.VSLP1
      6  f286
      7  f286				   FrameStart subroutine
      0  f286					      ASSERT_RUNTIME	"_scan == #0"
      1  f286				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f286  && !(  _scan == #0  ) }
      2  f286					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f286
     10  f286				   VerticalBlank subroutine
      0  f286					      TIMER_SETUP	37
      1  f286				   .lines     SET	37
      2  f286		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f288		       85 02		      sta	WSYNC
      4  f28a		       8d 96 02 	      sta	TIM64T
     12  f28d
     13  f28d							; Scanline counter
     14  f28d		       a9 10		      lda	#ROW_COUNT
     15  f28f		       85 82		      sta	LoopCount
     16  f291
     17  f291							; Frame counter
     18  f291		       e6 83		      inc	FrameCount
     19  f293
     20  f293							; Skip every 8 frames for increasing demo index
     21  f293		       a5 83		      lda	FrameCount
     22  f295		       29 07		      and	#FrameSkip
     23  f297		       c9 07		      cmp	#FrameSkip
     24  f299		       d0 0d		      bne	.next_next_thing
     25  f29b
     26  f29b		       18		      clc
     27  f29c		       a5 8e		      lda	ROW_DEMO_INDEX
     28  f29e		       69 04		      adc	#4
     29  f2a0		       c9 68		      cmp	#[level_01_end - level_01]
     30  f2a2		       90 02		      bcc	.next_thing_local
     31  f2a4		       a9 00		      lda	#0
     32  f2a6				   .next_thing_local
     33  f2a6		       85 8e		      sta	ROW_DEMO_INDEX
     34  f2a8				   .next_next_thing
     35  f2a8		       85 02		      sta	WSYNC
     36  f2aa
     37  f2aa							; Positioning
      0  f2aa					      SLEEP	40
      1  f2aa				   .CYCLES    SET	40
      2  f2aa
      3  f2aa				  -	      IF	.CYCLES < 2
      4  f2aa				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2aa				  -	      ERR
      6  f2aa					      ENDIF
      7  f2aa
      8  f2aa				  -	      IF	.CYCLES & 1
      9  f2aa				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2aa				  -	      nop	0
     11  f2aa				  -	      ELSE
     12  f2aa				  -	      bit	VSYNC
     13  f2aa				  -	      ENDIF
     14  f2aa				  -.CYCLES    SET	.CYCLES - 3
     15  f2aa					      ENDIF
     16  f2aa
     17  f2aa					      REPEAT	.CYCLES / 2
     18  f2aa		       ea		      nop
     17  f2aa					      REPEND
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     19  f2be					      REPEND
     39  f2be		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     40  f2c0		       85 02		      sta	WSYNC
     41  f2c2
     42  f2c2							; Misc
     43  f2c2		       a9 00		      lda	#00
     44  f2c4		       85 1e		      sta	EMERALD_MI_ENABLE
     45  f2c6
     46  f2c6							; Assign dervied SpriteEnd value
     47  f2c6		       18		      clc
     48  f2c7		       a9 c8		      lda	#HEIGHT_OFFSET
     49  f2c9		       e5 89		      sbc	YPos
     50  f2cb		       85 85		      sta	SpriteEnd
     51  f2cd
     52  f2cd
     53  f2cd							; Player 1
     54  f2cd		       a5 86		      lda	XPos
     55  f2cf		       a2 00		      ldx	#0
     56  f2d1		       20 f3 f3 	      jsr	SetHorizPos
     57  f2d4
     58  f2d4				   frame_setup subroutine
     59  f2d4							; Kernel A or B
     60  f2d4		       a9 01		      lda	#01
     61  f2d6		       25 83		      and	FrameCount
     62  f2d8		       d0 24		      bne	frame_setup_kernel_b
     63  f2da
     64  f2da				   frame_setup_kernel_a subroutine
     65  f2da							; Load kernel into CBSRAM
     66  f2da		       20 4d f2 	      jsr	LoadKernelA
     67  f2dd
     68  f2dd							; Move missile
     69  f2dd		       85 02		      sta	WSYNC
      0  f2df					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2df				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2df
      3  f2df				  -	      IF	.CYCLES < 2
      4  f2df				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2df				  -	      ERR
      6  f2df					      ENDIF
      7  f2df
      8  f2df				  -	      IF	.CYCLES & 1
      9  f2df				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2df				  -	      nop	0
     11  f2df				  -	      ELSE
     12  f2df				  -	      bit	VSYNC
     13  f2df				  -	      ENDIF
     14  f2df				  -.CYCLES    SET	.CYCLES - 3
     15  f2df					      ENDIF
     16  f2df
     17  f2df					      REPEAT	.CYCLES / 2
     18  f2df		       ea		      nop
     17  f2df					      REPEND
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     17  f2e1					      REPEND
     18  f2e2		       ea		      nop
     17  f2e2					      REPEND
     18  f2e3		       ea		      nop
     17  f2e3					      REPEND
     18  f2e4		       ea		      nop
     17  f2e4					      REPEND
     18  f2e5		       ea		      nop
     17  f2e5					      REPEND
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     17  f2e9					      REPEND
     18  f2ea		       ea		      nop
     17  f2ea					      REPEND
     18  f2eb		       ea		      nop
     17  f2eb					      REPEND
     18  f2ec		       ea		      nop
     19  f2ed					      REPEND
     71  f2ed		       85 13		      sta	EMERALD_MI_RESET
     72  f2ef		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     73  f2f1		       85 23		      sta	EMERALD_MI_HMOVE
     74  f2f3
     75  f2f3							; DEBUG: Set per-kernel color
     76  f2f3		       a2 cc		      ldx	#COL_EMERALD
     77  f2f5		       86 07		      stx	EMERALD_SP_COLOR
     78  f2f7
     79  f2f7							; HACK this doesn't belong here
     80  f2f7		       a9 ff		      lda	#%11111111
     81  f2f9		       85 0c		      sta	REFP1
     82  f2fb
     83  f2fb		       4c 2b f3 	      jmp	frame_setup_complete
     84  f2fe
     85  f2fe				   frame_setup_kernel_b subroutine
     86  f2fe							; Load kernel into CBSRAM
     87  f2fe		       20 63 f2 	      jsr	LoadKernelB
     88  f301
     89  f301							; Move missile
     90  f301		       85 02		      sta	WSYNC
      0  f303					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f303				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f303
      3  f303				  -	      IF	.CYCLES < 2
      4  f303				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f303				  -	      ERR
      6  f303					      ENDIF
      7  f303
      8  f303					      IF	.CYCLES & 1
      9  f303					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f303		       04 00		      nop	0
     11  f305				  -	      ELSE
     12  f305				  -	      bit	VSYNC
     13  f305					      ENDIF
     14  f305				   .CYCLES    SET	.CYCLES - 3
     15  f305					      ENDIF
     16  f305
     17  f305					      REPEAT	.CYCLES / 2
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     17  f316					      REPEND
     18  f317		       ea		      nop
     17  f317					      REPEND
     18  f318		       ea		      nop
     17  f318					      REPEND
     18  f319		       ea		      nop
     17  f319					      REPEND
     18  f31a		       ea		      nop
     17  f31a					      REPEND
     18  f31b		       ea		      nop
     17  f31b					      REPEND
     18  f31c		       ea		      nop
     19  f31d					      REPEND
     92  f31d		       85 13		      sta	EMERALD_MI_RESET
     93  f31f		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     94  f321		       85 23		      sta	EMERALD_MI_HMOVE
     95  f323
     96  f323							; DEBUG: Set per-kernel color
     97  f323		       a2 e0		      ldx	#$e0
     98  f325		       86 07		      stx	EMERALD_SP_COLOR
     99  f327
    100  f327		       a9 00		      lda	#0
    101  f329		       85 0c		      sta	REFP1
    102  f32b
    103  f32b				   frame_setup_complete
    104  f32b
    105  f32b		       ad 7c f7 	      lda	shard_map
    106  f32e		       a0 01		      ldy	#1	; gemini counter, starting at 1
    107  f330				   gemini_builder
    108  f330		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    109  f332		       d0 00		      bne	.no_vd0
    110  f334				   .no_vd0
    111  f334
    112  f334							; Perform kernel Nibble calculations
    113  f334							; lda #$00
    114  f334							; NIBBLE_START_KERNEL gem_kernel, 40
    115  f334							;     ldx level_00
    116  f334							;     cpx #%11000000
    117  f334							;     NIBBLE_IF cs
    118  f334							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%011000110
    119  f334							;     NIBBLE_ELSE
    120  f334							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%000000000
    121  f334							;     NIBBLE_END_IF
    122  f334							; NIBBLE_END_KERNEL
    123  f334							; sta KERNEL_TEMP_A
    124  f334
    125  f334				   VerticalBlankEnd
    126  f334							; Wait until the end of Vertical blank.
      0  f334					      TIMER_WAIT
      1  f334				   .waittimer
      2  f334		       ad 84 02 	      lda	INTIM
      3  f337		       d0 fb		      bne	.waittimer
      4  f339		       85 02		      sta	WSYNC
      0  f33b					      ASSERT_RUNTIME	"_scan == #37"
      1  f33b				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f33b  && !(  _scan == #37  ) }
      2  f33b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    129  f33b
    130  f33b							; Start rendering the kernel.
      0  f33b					      TIMER_SETUP	192
      1  f33b				   .lines     SET	192
      2  f33b		       a9 e3		      lda	#(((.lines)*76-14)/64)
      3  f33d		       85 02		      sta	WSYNC
      4  f33f		       8d 96 02 	      sta	TIM64T
    132  f342		       4c 07 f4 	      jmp	KernelBorder
    133  f345
    134  f345				   FrameEnd   subroutine
    135  f345		       85 02		      sta	WSYNC
    136  f347
    137  f347							; Blank all background colors.
    138  f347		       a9 00		      lda	#0
    139  f349		       85 08		      sta	COLUPF
    140  f34b		       85 0f		      sta	PF2
    141  f34d		       85 0e		      sta	PF1
    142  f34f		       85 1c		      sta	EMERALD_SP
    143  f351
    144  f351							; Guide lines (2x)
    145  f351		       a9 02		      lda	#SIGNAL_LINE
    146  f353		       85 09		      sta	COLUBK
    147  f355					      REPEAT	6
    148  f355		       85 02		      sta	WSYNC
    147  f355					      REPEND
    148  f357		       85 02		      sta	WSYNC
    147  f357					      REPEND
    148  f359		       85 02		      sta	WSYNC
    147  f359					      REPEND
    148  f35b		       85 02		      sta	WSYNC
    147  f35b					      REPEND
    148  f35d		       85 02		      sta	WSYNC
    147  f35d					      REPEND
    148  f35f		       85 02		      sta	WSYNC
    149  f361					      REPEND
    150  f361		       a9 00		      lda	#$00
    151  f363		       85 09		      sta	COLUBK
    152  f365
    153  f365							; TODO Should a timer be necessary for ending the graphics kernel?
      0  f365					      TIMER_WAIT
      1  f365				   .waittimer
      2  f365		       ad 84 02 	      lda	INTIM
      3  f368		       d0 fb		      bne	.waittimer
      4  f36a		       85 02		      sta	WSYNC
      0  f36c					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f36c				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f36c  && !(  _scan == (#37 + #192)  ) }
      2  f36c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    156  f36c
    157  f36c							; Overscan
    158  f36c				   Overscan   subroutine
    159  f36c		       85 01		      sta	VBLANK
      0  f36e					      TIMER_SETUP	29
      1  f36e				   .lines     SET	29
      2  f36e		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f370		       85 02		      sta	WSYNC
      4  f372		       8d 96 02 	      sta	TIM64T
    161  f375
    162  f375		       20 85 f3 	      jsr	MoveJoystick
    163  f378		       20 bc f3 	      jsr	SpeedCalculation
    164  f37b
      0  f37b					      TIMER_WAIT
      1  f37b				   .waittimer
      2  f37b		       ad 84 02 	      lda	INTIM
      3  f37e		       d0 fb		      bne	.waittimer
      4  f380		       85 02		      sta	WSYNC
      0  f382					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f382				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f382  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f382					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    167  f382
    168  f382		       4c 7d f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f385					      include	"game_input.s"
      1  f385							; Handles input checking. Called from overscan.
      2  f385
      3  f385							; Read joystick movement and apply to object 0
      4  f385				   MoveJoystick
      5  f385							; Move vertically
      6  f385							; (up and down are actually reversed since ypos starts at bottom)
      7  f385							;     ldx YPos
      8  f385		       a9 10		      lda	#%00010000	;Up?
      9  f387		       2c 80 02 	      bit	SWCHA
     10  f38a		       d0 0d		      bne	SkipMoveUp
     11  f38c
     12  f38c		       18		      clc
     13  f38d		       a5 88		      lda	Speed2
     14  f38f		       69 0c		      adc	#12
     15  f391		       85 88		      sta	Speed2
     16  f393		       a5 87		      lda	Speed1
     17  f395		       69 00		      adc	#00
     18  f397		       85 87		      sta	Speed1
     19  f399
     20  f399				   SkipMoveUp
     21  f399		       a6 86		      ldx	XPos
     22  f39b
     23  f39b							; Only check left/right on odd frames;
     24  f39b							; TODO make this just a fractional speed
     25  f39b							; rather than dropping frames
     26  f39b		       a9 01		      lda	#01
     27  f39d		       25 83		      and	FrameCount
     28  f39f		       d0 18		      bne	SkipMoveRight
     29  f3a1
     30  f3a1
     31  f3a1							; Move horizontally
     32  f3a1		       a9 40		      lda	#%01000000	;Left?
     33  f3a3		       2c 80 02 	      bit	SWCHA
     34  f3a6		       d0 05		      bne	SkipMoveLeft
     35  f3a8		       e0 1d		      cpx	#29
     36  f3aa		       90 01		      bcc	SkipMoveLeft
     37  f3ac		       ca		      dex
     38  f3ad
     39  f3ad							; Reflect
     40  f3ad							;     lda #$ff
     41  f3ad							;     sta REFP0
     42  f3ad				   SkipMoveLeft
     43  f3ad		       a9 80		      lda	#%10000000	;Right?
     44  f3af		       2c 80 02 	      bit	SWCHA
     45  f3b2		       d0 05		      bne	SkipMoveRight
     46  f3b4		       e0 80		      cpx	#128
     47  f3b6		       b0 01		      bcs	SkipMoveRight
     48  f3b8		       e8		      inx
     49  f3b9
     50  f3b9							; Reflect
     51  f3b9							;     lda #$0
     52  f3b9							;     sta REFP0
     53  f3b9				   SkipMoveRight
     54  f3b9		       86 86		      stx	XPos
     55  f3bb		       60		      rts
     56  f3bc
     57  f3bc
     58  f3bc				   SpeedCalculation
     59  f3bc		       38		      sec
     60  f3bd		       a5 88		      lda	Speed2
     61  f3bf		       e9 07		      sbc	#7
     62  f3c1		       85 88		      sta	Speed2
     63  f3c3		       a5 87		      lda	Speed1
     64  f3c5		       e9 00		      sbc	#0
     65  f3c7		       85 87		      sta	Speed1
     66  f3c9
     67  f3c9		       18		      clc
     68  f3ca		       a5 8a		      lda	YPos2
     69  f3cc		       65 88		      adc	Speed2
     70  f3ce		       85 8a		      sta	YPos2
     71  f3d0		       a5 89		      lda	YPos
     72  f3d2		       65 87		      adc	Speed1
     73  f3d4		       85 89		      sta	YPos
     74  f3d6
     75  f3d6		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f3d8		       b0 0a		      bcs	NewThing2
     77  f3da
     78  f3da							; Reset to floor
     79  f3da		       a9 3e		      lda	#FLOOR_OFFSET
     80  f3dc		       85 89		      sta	YPos
     81  f3de		       a9 00		      lda	#0
     82  f3e0		       85 87		      sta	Speed1
     83  f3e2		       85 88		      sta	Speed2
     84  f3e4				   NewThing2
     85  f3e4
     86  f3e4		       c9 be		      cmp	#CEILING_OFFSET
     87  f3e6		       90 0a		      bcc	.next
     88  f3e8
     89  f3e8							; Reset to ceiling
     90  f3e8		       a9 be		      lda	#CEILING_OFFSET
     91  f3ea		       85 89		      sta	YPos
     92  f3ec		       a9 00		      lda	#0
     93  f3ee		       85 87		      sta	Speed1
     94  f3f0		       85 88		      sta	Speed2
     95  f3f2				   .next
     96  f3f2		       60		      rts
     97  f3f3
     98  f3f3
     99  f3f3
    100  f3f3							; Subroutine
    101  f3f3				   SetHorizPos
    102  f3f3		       85 02		      sta	WSYNC	; start a new line
    103  f3f5		       24 00		      bit	0	; waste 3 cycles
    104  f3f7		       38		      sec		; set carry flag
    105  f3f8				   DivideLoop
    106  f3f8		       e9 0f		      sbc	#15	; subtract 15
    107  f3fa		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f3fc		       49 07		      eor	#7	; calculate fine offset
    109  f3fe		       0a		      asl
    110  f3ff		       0a		      asl
    111  f400		       0a		      asl
    112  f401		       0a		      asl
    113  f402		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f404		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f406		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f407					      include	"kernel_border.s"
      1  f407							; Visible Kernel
      2  f407
      3  f407				   KernelBorder subroutine
      4  f407		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f409
      6  f409							; First HMOVE
      7  f409		       85 2a		      sta	HMOVE
      8  f40b
      9  f40b							; Border top
     10  f40b		       a9 00		      lda	#0
     11  f40d		       85 08		      sta	COLUPF
     12  f40f		       85 0e		      sta	PF1
     13  f411		       85 0f		      sta	PF2
     14  f413		       a9 02		      lda	#SIGNAL_LINE
     15  f415		       85 09		      sta	COLUBK
     16  f417
     17  f417					      REPEAT	6
     18  f417		       85 02		      sta	WSYNC
     17  f417					      REPEND
     18  f419		       85 02		      sta	WSYNC
     17  f419					      REPEND
     18  f41b		       85 02		      sta	WSYNC
     17  f41b					      REPEND
     18  f41d		       85 02		      sta	WSYNC
     17  f41d					      REPEND
     18  f41f		       85 02		      sta	WSYNC
     17  f41f					      REPEND
     18  f421		       85 02		      sta	WSYNC
     19  f423					      REPEND
     20  f423
     21  f423		       a9 00		      lda	#0
     22  f425		       85 09		      sta	COLUBK
     23  f427		       85 02		      sta	WSYNC
     24  f429
     25  f429							; Start top border
     26  f429				   border_top
     27  f429							; Make the playfield solid.
     28  f429		       a9 3f		      lda	#%00111111
     29  f42b		       85 0e		      sta	PF1
     30  f42d		       a9 ff		      lda	#%11111111
     31  f42f		       85 0f		      sta	PF2
     32  f431
     33  f431		       a9 42		      lda	#COL_BG
     34  f433		       a0 00		      ldy	#0
     35  f435
     36  f435							; X_XXXX_XX
     37  f435							; Commented lines removed to save on space.
     38  f435		       85 08		      sta	COLUPF
     39  f437		       85 02		      sta	WSYNC
     40  f439		       84 08		      sty	COLUPF
     41  f43b		       85 02		      sta	WSYNC
     42  f43d		       85 08		      sta	COLUPF
     43  f43f		       85 02		      sta	WSYNC
     44  f441							; sta COLUPF
     45  f441		       85 02		      sta	WSYNC
     46  f443							; sta COLUPF
     47  f443		       85 02		      sta	WSYNC
     48  f445		       84 08		      sty	COLUPF
     49  f447		       85 02		      sta	WSYNC
     50  f449		       85 08		      sta	COLUPF
     51  f44b
     52  f44b		       a2 ff		      ldx	#$ff
     53  f44d		       9a		      txs
     54  f44e							; Push jump table to the stack
      0  f44e					      ASSERT_RUNTIME	"sp == $ff"
      1  f44e				   .COND      SET	"sp == $ff"
 ASSERT: breakif { pc== $f44e  && !(  sp == $ff  ) }
      2  f44e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f44e							; final rts to return point of kernel
     57  f44e		       a9 f5		      lda	#>[row_after_kernel - 1]
     58  f450		       48		      pha		; $ff
     59  f451		       a9 4f		      lda	#<[row_after_kernel - 1]	; exit gem kernel
     60  f453		       48		      pha		; $fe
     61  f454		       a9 f1		      lda	#>[CBSRAM_KERNEL_ENTRY - 1]
     62  f456		       48		      pha		; $fd
     63  f457		       a9 03		      lda	#<[CBSRAM_KERNEL_ENTRY - 1]	; repeat gem kernel once
     64  f459		       48		      pha		; $fc
      0  f45a					      ASSERT_RUNTIME	"sp == $fb"
      1  f45a				   .COND      SET	"sp == $fb"
 ASSERT: breakif { pc== $f45a  && !(  sp == $fb  ) }
      2  f45a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     66  f45a
     67  f45a		       85 02		      sta	WSYNC
     68  f45c							; sta COLUPF
     69  f45c
     70  f45c				   PlayArea
     71  f45c							; PF is now the playing area
      0  f45c					      ASSERT_RUNTIME	"_scycles == #0"
      1  f45c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f45c  && !(  _scycles == #0  ) }
      2  f45c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f45c					      sleep	61
      1  f45c				   .CYCLES    SET	61
      2  f45c
      3  f45c				  -	      IF	.CYCLES < 2
      4  f45c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f45c				  -	      ERR
      6  f45c					      ENDIF
      7  f45c
      8  f45c					      IF	.CYCLES & 1
      9  f45c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f45c		       04 00		      nop	0
     11  f45e				  -	      ELSE
     12  f45e				  -	      bit	VSYNC
     13  f45e					      ENDIF
     14  f45e				   .CYCLES    SET	.CYCLES - 3
     15  f45e					      ENDIF
     16  f45e
     17  f45e					      REPEAT	.CYCLES / 2
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     17  f467					      REPEND
     18  f468		       ea		      nop
     17  f468					      REPEND
     18  f469		       ea		      nop
     17  f469					      REPEND
     18  f46a		       ea		      nop
     17  f46a					      REPEND
     18  f46b		       ea		      nop
     17  f46b					      REPEND
     18  f46c		       ea		      nop
     17  f46c					      REPEND
     18  f46d		       ea		      nop
     17  f46d					      REPEND
     18  f46e		       ea		      nop
     17  f46e					      REPEND
     18  f46f		       ea		      nop
     17  f46f					      REPEND
     18  f470		       ea		      nop
     17  f470					      REPEND
     18  f471		       ea		      nop
     17  f471					      REPEND
     18  f472		       ea		      nop
     17  f472					      REPEND
     18  f473		       ea		      nop
     17  f473					      REPEND
     18  f474		       ea		      nop
     17  f474					      REPEND
     18  f475		       ea		      nop
     17  f475					      REPEND
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     17  f477					      REPEND
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     19  f47b					      REPEND
     74  f47b		       a9 00		      lda	#%00000000
     75  f47d		       85 0d		      sta	PF0
     76  f47f		       a9 20		      lda	#%00100000
     77  f481		       85 0e		      sta	PF1
     78  f483		       a9 00		      lda	#%00000000
     79  f485		       85 0f		      sta	PF2
      0  f487					      ASSERT_RUNTIME	"_scycles == #0"
      1  f487				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f487  && !(  _scycles == #0  ) }
      2  f487					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f487					      sleep	7
      1  f487				   .CYCLES    SET	7
      2  f487
      3  f487				  -	      IF	.CYCLES < 2
      4  f487				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f487				  -	      ERR
      6  f487					      ENDIF
      7  f487
      8  f487					      IF	.CYCLES & 1
      9  f487					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f487		       04 00		      nop	0
     11  f489				  -	      ELSE
     12  f489				  -	      bit	VSYNC
     13  f489					      ENDIF
     14  f489				   .CYCLES    SET	.CYCLES - 3
     15  f489					      ENDIF
     16  f489
     17  f489					      REPEAT	.CYCLES / 2
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     19  f48b					      REPEND
     82  f48b		       4c bd f4 	      jmp	row_start
     83  f48e							; enter row on cycle 10.
     84  f48e
     85  f48e							; reset the background for bottom of playfield
     86  f48e				   border_bottom
     87  f48e							;sta WSYNC
     88  f48e
     89  f48e							; Form the bottom of the level frame.
     90  f48e		       a9 3f		      lda	#%00111111
     91  f490		       85 0e		      sta	PF1
     92  f492		       a9 ff		      lda	#%11111111
     93  f494		       85 0f		      sta	PF2
     94  f496
     95  f496							; Clear all sprites.
     96  f496		       a9 00		      lda	#0
     97  f498		       85 1c		      sta	EMERALD_SP
     98  f49a		       85 1b		      sta	JET_SP
     99  f49c		       85 1e		      sta	EMERALD_MI_ENABLE
    100  f49e
    101  f49e		       a9 42		      lda	#COL_BG
    102  f4a0		       a0 00		      ldy	#0
    103  f4a2		       85 02		      sta	WSYNC
    104  f4a4
    105  f4a4		       84 08		      sty	COLUPF
    106  f4a6		       85 02		      sta	WSYNC
    107  f4a8
    108  f4a8		       85 08		      sta	COLUPF
    109  f4aa		       85 02		      sta	WSYNC
    110  f4ac
    111  f4ac		       85 02		      sta	WSYNC
    112  f4ae
    113  f4ae		       85 02		      sta	WSYNC
    114  f4b0
    115  f4b0		       84 08		      sty	COLUPF
    116  f4b2		       85 02		      sta	WSYNC
    117  f4b4
    118  f4b4		       85 08		      sta	COLUPF
    119  f4b6		       85 02		      sta	WSYNC
    120  f4b8		       85 02		      sta	WSYNC
    121  f4ba		       4c 45 f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4bd					      include	"kernel_row.s"
      1  f4bd							; Frame Start
      2  f4bd
      3  f4bd							; Macros for calculating sprite values (GRPx).
      4  f4bd
      5  f4bd							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4bd					      mac	kernel_load_player
      7  f4bd							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4bd					      dcp	SpriteEnd	; 5c
      9  f4bd					      ldy	#0	; 2c
     10  f4bd							; constant 6c:
     11  f4bd					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4bd					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4bd					      ldy	SpriteEnd
     14  f4bd							; 4c
     15  f4bd					      ldx	Frame0,Y
     16  f4bd					      endm
     17  f4bd
     18  f4bd							; mac jet_spritedata_calc
     19  f4bd							;
     20  f4bd							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4bd							; GRP0.
     22  f4bd					      mac	jet_spritedata_calc
     23  f4bd							; loader
     24  f4bd					      lda	#SPRITE_HEIGHT
     25  f4bd					      dcp	SpriteEnd
     26  f4bd					      ldy	SpriteEnd
     27  f4bd
     28  f4bd							; 4c
     29  f4bd							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4bd							; from Frame0 + Y must never cross a page boundary.
     31  f4bd					      lda	Frame0,Y
     32  f4bd							; 6c
     33  f4bd					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4bd					      .byte	$2c	; 4c / 0c
     35  f4bd					      sta	JET_SP	; 0c / 3c
     36  f4bd					      endm
     37  f4bd
     38  f4bd				   row_start
     39  f4bd
     40  f4bd							; [scanline 1]
     41  f4bd				   row_1
     42  f4bd							; Enter after scanline starts on row "9" and wraps
      0  f4bd					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4bd				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4bd  && !(  _scycles == #10  ) }
      2  f4bd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4bd
      0  f4bd					      jet_spritedata_calc
      1  f4bd
      2  f4bd		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4bf		       c7 85		      dcp	SpriteEnd
      4  f4c1		       a4 85		      ldy	SpriteEnd
      5  f4c3
      6  f4c3
      7  f4c3
      8  f4c3
      9  f4c3		       b9 00 f7 	      lda	Frame0,Y
     10  f4c6
     11  f4c6		       b0 01		      .byte.b	$b0, $01
     12  f4c8		       2c		      .byte.b	$2c
     13  f4c9		       85 1b		      sta	JET_SP
     46  f4cb
     47  f4cb							; Nibble VM.
     48  f4cb							; lda KERNEL_TEMP_A
     49  f4cb							; NIBBLE_gem_kernel
     50  f4cb							; sta WSYNC
     51  f4cb
     52  f4cb							; Nibble VM.
      0  f4cb					      sleep	46
      1  f4cb				   .CYCLES    SET	46
      2  f4cb
      3  f4cb				  -	      IF	.CYCLES < 2
      4  f4cb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4cb				  -	      ERR
      6  f4cb					      ENDIF
      7  f4cb
      8  f4cb				  -	      IF	.CYCLES & 1
      9  f4cb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4cb				  -	      nop	0
     11  f4cb				  -	      ELSE
     12  f4cb				  -	      bit	VSYNC
     13  f4cb				  -	      ENDIF
     14  f4cb				  -.CYCLES    SET	.CYCLES - 3
     15  f4cb					      ENDIF
     16  f4cb
     17  f4cb					      REPEAT	.CYCLES / 2
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     17  f4cd					      REPEND
     18  f4ce		       ea		      nop
     17  f4ce					      REPEND
     18  f4cf		       ea		      nop
     17  f4cf					      REPEND
     18  f4d0		       ea		      nop
     17  f4d0					      REPEND
     18  f4d1		       ea		      nop
     17  f4d1					      REPEND
     18  f4d2		       ea		      nop
     17  f4d2					      REPEND
     18  f4d3		       ea		      nop
     17  f4d3					      REPEND
     18  f4d4		       ea		      nop
     17  f4d4					      REPEND
     18  f4d5		       ea		      nop
     17  f4d5					      REPEND
     18  f4d6		       ea		      nop
     17  f4d6					      REPEND
     18  f4d7		       ea		      nop
     17  f4d7					      REPEND
     18  f4d8		       ea		      nop
     17  f4d8					      REPEND
     18  f4d9		       ea		      nop
     17  f4d9					      REPEND
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     19  f4e2					      REPEND
     54  f4e2
      0  f4e2					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4e2				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4e2  && !(  _scycles == #0  ) }
      2  f4e2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f4e2
     57  f4e2							; [scanline 2]
     58  f4e2				   row_2
      0  f4e2					      jet_spritedata_calc
      1  f4e2
      2  f4e2		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4e4		       c7 85		      dcp	SpriteEnd
      4  f4e6		       a4 85		      ldy	SpriteEnd
      5  f4e8
      6  f4e8
      7  f4e8
      8  f4e8
      9  f4e8		       b9 00 f7 	      lda	Frame0,Y
     10  f4eb
     11  f4eb		       b0 01		      .byte.b	$b0, $01
     12  f4ed		       2c		      .byte.b	$2c
     13  f4ee		       85 1b		      sta	JET_SP
     60  f4f0
     61  f4f0							; Black out playfield
     62  f4f0							; TODO This should be done with playfield pixels, not color.
     63  f4f0		       a9 00		      lda	#0
     64  f4f2		       85 08		      sta	COLUPF
     65  f4f4
     66  f4f4							; Nibble VM.
      0  f4f4					      sleep	41
      1  f4f4				   .CYCLES    SET	41
      2  f4f4
      3  f4f4				  -	      IF	.CYCLES < 2
      4  f4f4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4f4				  -	      ERR
      6  f4f4					      ENDIF
      7  f4f4
      8  f4f4					      IF	.CYCLES & 1
      9  f4f4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4f4		       04 00		      nop	0
     11  f4f6				  -	      ELSE
     12  f4f6				  -	      bit	VSYNC
     13  f4f6					      ENDIF
     14  f4f6				   .CYCLES    SET	.CYCLES - 3
     15  f4f6					      ENDIF
     16  f4f6
     17  f4f6					      REPEAT	.CYCLES / 2
     18  f4f6		       ea		      nop
     17  f4f6					      REPEND
     18  f4f7		       ea		      nop
     17  f4f7					      REPEND
     18  f4f8		       ea		      nop
     17  f4f8					      REPEND
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     17  f4fc					      REPEND
     18  f4fd		       ea		      nop
     17  f4fd					      REPEND
     18  f4fe		       ea		      nop
     17  f4fe					      REPEND
     18  f4ff		       ea		      nop
     17  f4ff					      REPEND
     18  f500		       ea		      nop
     17  f500					      REPEND
     18  f501		       ea		      nop
     17  f501					      REPEND
     18  f502		       ea		      nop
     17  f502					      REPEND
     18  f503		       ea		      nop
     17  f503					      REPEND
     18  f504		       ea		      nop
     17  f504					      REPEND
     18  f505		       ea		      nop
     17  f505					      REPEND
     18  f506		       ea		      nop
     17  f506					      REPEND
     18  f507		       ea		      nop
     17  f507					      REPEND
     18  f508		       ea		      nop
     19  f509					      REPEND
     68  f509
     69  f509							; Load PF1 value
     70  f509		       a9 a0		      lda	#%10100000
     71  f50b		       85 91		      sta	RamPF1Value
     72  f50d
     73  f50d							; Enable playfield at end of scanline
     74  f50d		       a9 42		      lda	#COL_BG
     75  f50f		       85 08		      sta	COLUPF
     76  f511
      0  f511					      ASSERT_RUNTIME	"_scycles == #0"
      1  f511				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f511  && !(  _scycles == #0  ) }
      2  f511					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     78  f511
     79  f511							; [scanline 3]
     80  f511				   row_3
      0  f511					      jet_spritedata_calc
      1  f511
      2  f511		       a9 09		      lda	#SPRITE_HEIGHT
      3  f513		       c7 85		      dcp	SpriteEnd
      4  f515		       a4 85		      ldy	SpriteEnd
      5  f517
      6  f517
      7  f517
      8  f517
      9  f517		       b9 00 f7 	      lda	Frame0,Y
     10  f51a
     11  f51a		       b0 01		      .byte.b	$b0, $01
     12  f51c		       2c		      .byte.b	$2c
     13  f51d		       85 1b		      sta	JET_SP
     82  f51f
     83  f51f							; Set stack pointer.
     84  f51f		       a2 fb		      ldx	#$fb
     85  f521		       9a		      txs
     86  f522							; Pre-populate graphics.
     87  f522							; REFACTOR remove use of the _temp variable?
     88  f522		       a9 09		      lda	#SPRITE_HEIGHT
      0  f524					      KERNEL_LOAD_PLAYER
      1  f524
      2  f524		       c7 85		      dcp	SpriteEnd
      3  f526		       a0 00		      ldy	#0
      4  f528
      5  f528		       b0 01		      .byte.b	$b0, $01
      6  f52a		       2c		      .byte.b	$2c
      7  f52b		       a4 85		      ldy	SpriteEnd
      8  f52d
      9  f52d		       be 00 f7 	      ldx	Frame0,Y
     90  f530		       86 93		      stx	RamKernelGRP0_temp
      0  f532					      KERNEL_LOAD_PLAYER
      1  f532
      2  f532		       c7 85		      dcp	SpriteEnd
      3  f534		       a0 00		      ldy	#0
      4  f536
      5  f536		       b0 01		      .byte.b	$b0, $01
      6  f538		       2c		      .byte.b	$2c
      7  f539		       a4 85		      ldy	SpriteEnd
      8  f53b
      9  f53b		       be 00 f7 	      ldx	Frame0,Y
     92  f53e		       86 92		      stx	RamKernelGRP0
     93  f540		       a5 93		      lda	RamKernelGRP0_temp	; Load sprite 2 into A
     94  f542
     95  f542							; [scanlines 4-5]
     96  f542							; We jump immediately into scanlines 4-5, the "gem kernel"
     97  f542		       a2 06		      ldx	#%00000110
     98  f544		       a0 66		      ldy	#%01100110
      0  f546					      ASSERT_RUNTIME	"_scycles == #73"
      1  f546				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f546  && !(  _scycles == #73  ) }
      2  f546					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    100  f546		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    101  f549
    102  f549							; [scanline 6]
    103  f549
    104  f549							; Try to avoid page crossing in jet_spritedata_calc
    105  f549							; TODO enforce this with ASSERT_RUNTIME instead?
    106  f550		       00 00 00 00*	      align	16
    107  f550
    108  f550				   row_after_kernel
    109  f550				   row_6
      0  f550					      ASSERT_RUNTIME	"_scycles == #0"
      1  f550				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f550  && !(  _scycles == #0  ) }
      2  f550					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    111  f550
    112  f550							; Cleanup from the kernel.
    113  f550		       a9 00		      lda	#0
    114  f552		       85 1e		      sta	EMERALD_MI_ENABLE
    115  f554		       85 1c		      sta	EMERALD_SP
    116  f556		       85 08		      sta	COLUPF
    117  f558
      0  f558					      jet_spritedata_calc
      1  f558
      2  f558		       a9 09		      lda	#SPRITE_HEIGHT
      3  f55a		       c7 85		      dcp	SpriteEnd
      4  f55c		       a4 85		      ldy	SpriteEnd
      5  f55e
      6  f55e
      7  f55e
      8  f55e
      9  f55e		       b9 00 f7 	      lda	Frame0,Y
     10  f561
     11  f561		       b0 01		      .byte.b	$b0, $01
     12  f563		       2c		      .byte.b	$2c
     13  f564		       85 1b		      sta	JET_SP
    119  f566
    120  f566							; Idle.
    121  f566		       85 02		      sta	WSYNC
    122  f568
    123  f568							; [scanline 7]
    124  f568				   row_7
      0  f568					      jet_spritedata_calc
      1  f568
      2  f568		       a9 09		      lda	#SPRITE_HEIGHT
      3  f56a		       c7 85		      dcp	SpriteEnd
      4  f56c		       a4 85		      ldy	SpriteEnd
      5  f56e
      6  f56e
      7  f56e
      8  f56e
      9  f56e		       b9 00 f7 	      lda	Frame0,Y
     10  f571
     11  f571		       b0 01		      .byte.b	$b0, $01
     12  f573		       2c		      .byte.b	$2c
     13  f574		       85 1b		      sta	JET_SP
    126  f576
    127  f576		       a9 42		      lda	#COL_BG
    128  f578		       85 08		      sta	COLUPF
    129  f57a
    130  f57a							; FRAMESWITCH
    131  f57a		       a9 01		      lda	#01
    132  f57c		       25 83		      and	FrameCount
    133  f57e		       d0 13		      bne	loadframe2
    134  f580
    135  f580							; Perform gem loading for Kernel A.
    136  f580
    137  f580				   loadframe1
      0  f580					      ASSERT_RUNTIME	"_scycles == #32"
      1  f580				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f580  && !(  _scycles == #32  ) }
      2  f580					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    139  f580
    140  f580							; Emerald byte setting 1A
    141  f580							; ldx #0
    142  f580							; lda KERNEL_STORAGE_R,X
    143  f580							; sta GEM_00_W
    144  f580							; inx
    145  f580							; lda KERNEL_STORAGE_R,X
    146  f580							; sta GEM_04_W
    147  f580							; inx
    148  f580							; lda KERNEL_STORAGE_R,X
    149  f580							; sta GEM_09_W
    150  f580							; inx
    151  f580
    152  f580		       85 02		      sta	WSYNC
    153  f582
    154  f582							; [scanline 8]
      0  f582					      jet_spritedata_calc
      1  f582
      2  f582		       a9 09		      lda	#SPRITE_HEIGHT
      3  f584		       c7 85		      dcp	SpriteEnd
      4  f586		       a4 85		      ldy	SpriteEnd
      5  f588
      6  f588
      7  f588
      8  f588
      9  f588		       b9 00 f7 	      lda	Frame0,Y
     10  f58b
     11  f58b		       b0 01		      .byte.b	$b0, $01
     12  f58d		       2c		      .byte.b	$2c
     13  f58e		       85 1b		      sta	JET_SP
    156  f590
    157  f590							; Emerald byte setting 1B
    158  f590							; lda KERNEL_STORAGE_R,X
    159  f590							; sta GEM_13_W
    160  f590							; inx
    161  f590							; lda KERNEL_STORAGE_R,X
    162  f590							; sta GEM_17_W
    163  f590							; inx
    164  f590							; lda KERNEL_STORAGE_R,X
    165  f590							; sta GEM_18_W
    166  f590							; inx
    167  f590							; lda KERNEL_STORAGE_R,X
    168  f590							; sta GEM_22_W
    169  f590
    170  f590		       4c a6 f5 	      jmp	row_8_end
    171  f593
    172  f593							; Perform gem loading for Kernel B.
    173  f593
    174  f593				   loadframe2
      0  f593					      ASSERT_RUNTIME	"_scycles == #33"
      1  f593				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f593  && !(  _scycles == #33  ) }
      2  f593					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    176  f593
    177  f593							; Emerald byte setting 2A
    178  f593							; ldx #[storage_02 - storage]
    179  f593							; lda KERNEL_STORAGE_R,X
    180  f593							; sta GEM_02_W
    181  f593							; inx
    182  f593							; lda KERNEL_STORAGE_R,X
    183  f593							; sta GEM_06_W
    184  f593							; inx
    185  f593							; lda KERNEL_STORAGE_R,X
    186  f593							; sta GEM_08_W
    187  f593							; inx
    188  f593
    189  f593		       85 02		      sta	WSYNC
    190  f595
    191  f595							; [scanline 8]
    192  f595				   row_8
      0  f595					      jet_spritedata_calc
      1  f595
      2  f595		       a9 09		      lda	#SPRITE_HEIGHT
      3  f597		       c7 85		      dcp	SpriteEnd
      4  f599		       a4 85		      ldy	SpriteEnd
      5  f59b
      6  f59b
      7  f59b
      8  f59b
      9  f59b		       b9 00 f7 	      lda	Frame0,Y
     10  f59e
     11  f59e		       b0 01		      .byte.b	$b0, $01
     12  f5a0		       2c		      .byte.b	$2c
     13  f5a1		       85 1b		      sta	JET_SP
    194  f5a3
    195  f5a3							; Emerald byte setting 2B
    196  f5a3							; lda KERNEL_STORAGE_R,X
    197  f5a3							; sta GEM_11_W
    198  f5a3							; inx
    199  f5a3							; lda KERNEL_STORAGE_R,X
    200  f5a3							; sta GEM_15_W
    201  f5a3							; inx
    202  f5a3							; lda KERNEL_STORAGE_R,X
    203  f5a3							; sta GEM_20_W
    204  f5a3							; inx
    205  f5a3							; lda KERNEL_STORAGE_R,X
    206  f5a3							; sta GEM_24_W
    207  f5a3
    208  f5a3		       4c a6 f5 	      jmp	row_8_end
    209  f5a6
    210  f5a6							; Common row 8 return.
    211  f5a6
    212  f5a6				   row_8_end
    213  f5a6							; Idle.
    214  f5a6		       85 02		      sta	WSYNC
    215  f5a8
    216  f5a8							; [scanline 8]
    217  f5a8							; Repeat loop until LoopCount < 0
    218  f5a8		       c6 82		      dec	LoopCount
    219  f5aa		       30 03		      bmi	row_end
    220  f5ac		       4c bd f4 	      jmp	row_start
    221  f5af				   row_end
    222  f5af		       4c 8e f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f5b2					      include	"kernel_gem.s"
      1  f5b2							;
      2  f5b2							; Gem Kernels
      3  f5b2							;
      4  f5b2							; Gems are displayed in alternating kernels. This chart shows
      5  f5b2							; which kernel is responsible for which gem, with missiles denoted.
      6  f5b2							;
      7  f5b2							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f5b2							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f5b2							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f5b2							;  #	 0^	 8^	  17^	    26^       gem index
     11  f5b2							;
     12  f5b2							; The middle bar indicates where the pattern reverses.
     13  f5b2							;
     14  f5b2							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f5b2							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f5b2							; requires with a single sprite. By alternating sprites each frame with an...
     17  f5b2							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f5b2							; line, except for two. These are instead rendered by the missile, which
     19  f5b2							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f5b2
     21  f5b2							; for copying
     22  f600		       00 00 00 00*	      align	256
     23  f600
     24  f600							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f600							;
     26  f600							; GEM KERNEL A
     27  f600							;
     28  f600
     29  f600				   kernel_1_start subroutine
     30  f600					      rorg	$f100
     31  f600
     32  f600		       01 01 01 01	      .byte.b	$01, $01, $01, $01
     33  f604
     34  f604				   Kernel1    subroutine
     35  f604							; ASSERT_RUNTIME "sp == $f9"
     36  f604							; ASSERT_RUNTIME "RamCurrentKernel != #1 || _scycles == #22"
     37  f604
     38  f604							; To disable VDELP0, we use the Y register %01100110, which has D0 always 0
     39  f604
     40  f604							; Write Gemini 0A into delayed sprite register
     41  f604		       84 1c		      sty	EMERALD_SP
     42  f606							; Write Player from accumulator. When writing to the other sprite, the
     43  f606							; TIA will copy Gemini 0A into visible sprite register
     44  f606		       85 1b		      sta	JET_SP
     45  f608							; Write Gemini 1A into delayed sprite register
     46  f608		       84 1c		      sty	EMERALD_SP
     47  f60a
      0  f60a					      sleep	4
      1  f60a				   .CYCLES    SET	4
      2  f60a
      3  f60a				  -	      IF	.CYCLES < 2
      4  f60a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f60a				  -	      ERR
      6  f60a					      ENDIF
      7  f60a
      8  f60a				  -	      IF	.CYCLES & 1
      9  f60a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f60a				  -	      nop	0
     11  f60a				  -	      ELSE
     12  f60a				  -	      bit	VSYNC
     13  f60a				  -	      ENDIF
     14  f60a				  -.CYCLES    SET	.CYCLES - 3
     15  f60a					      ENDIF
     16  f60a
     17  f60a					      REPEAT	.CYCLES / 2
     18  f60a		       ea		      nop
     17  f60a					      REPEND
     18  f60b		       ea		      nop
     19  f60c					      REPEND
     49  f60c
     50  f60c							; Register config
     51  f60c		       a9 01		      lda	#$01
     52  f60e		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile
     53  f610		       8e 26 00 	      stx.w	VDELP1	; enable delayed sprite TODO: save the extra cycle here
     54  f613
     55  f613							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f613					      ASSERT_RUNTIME	"RamCurrentKernel != #1 || _scycles == #22"
      1  f613				   .COND      SET	"RamCurrentKernel != #1 || _scycles == #22"
 ASSERT: breakif { pc== $f113  && !(  RamCurrentKernel != #1 || _scycles == #22  ) }
      2  f613					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     57  f613				   KernelA_A
     58  f613		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     59  f615				   KernelA_B
      0  f615					      sleep	3
      1  f615				   .CYCLES    SET	3
      2  f615
      3  f615				  -	      IF	.CYCLES < 2
      4  f615				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f615				  -	      ERR
      6  f615					      ENDIF
      7  f615
      8  f615					      IF	.CYCLES & 1
      9  f615					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f615		       04 00		      nop	0
     11  f617				  -	      ELSE
     12  f617				  -	      bit	VSYNC
     13  f617					      ENDIF
     14  f617				   .CYCLES    SET	.CYCLES - 3
     15  f617					      ENDIF
     16  f617
     17  f617				  -	      REPEAT	.CYCLES / 2
     18  f617				  -	      nop
     19  f617					      REPEND
     61  f617				   KernelA_C
     62  f617		       a5 91		      lda	RamPF1Value	; Load PF1 (TODO asymmetrical playfield)
     63  f619
     64  f619
     65  f619							; below has one `php` call (by default: RESET)
     66  f619				   KernelA_D
     67  f619		       84 26		      sty	VDELP1	; Gemini 1A, clear VDELP1
     68  f61b				   KernelA_E
     69  f61b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     70  f61d				   KernelA_F
     71  f61d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     72  f61f				   KernelA_G
     73  f61f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     74  f621							; above has php
     75  f621
     76  f621				   KernelA_H
     77  f621		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     78  f623
     79  f623							; RST4 vvv
     80  f623				   KernelA_I
     81  f623		       86 11		      stx	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     82  f625				   KernelA_J		; unchanging
     83  f625		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     84  f627				   KernelA_K
     85  f627		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     86  f629				   KernelA_L
      0  f629					      sleep	3	; free
      1  f629				   .CYCLES    SET	3
      2  f629
      3  f629				  -	      IF	.CYCLES < 2
      4  f629				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f629				  -	      ERR
      6  f629					      ENDIF
      7  f629
      8  f629					      IF	.CYCLES & 1
      9  f629					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f629		       04 00		      nop	0
     11  f62b				  -	      ELSE
     12  f62b				  -	      bit	VSYNC
     13  f62b					      ENDIF
     14  f62b				   .CYCLES    SET	.CYCLES - 3
     15  f62b					      ENDIF
     16  f62b
     17  f62b				  -	      REPEAT	.CYCLES / 2
     18  f62b				  -	      nop
     19  f62b					      REPEND
     88  f62b							; RST4 ^^^
     89  f62b
     90  f62b				   KernelA_M
     91  f62b		       84 1c		      sty	EMERALD_SP	; Gemini 5A
     92  f62d				   KernelA_N
      0  f62d					      sleep	3
      1  f62d				   .CYCLES    SET	3
      2  f62d
      3  f62d				  -	      IF	.CYCLES < 2
      4  f62d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62d				  -	      ERR
      6  f62d					      ENDIF
      7  f62d
      8  f62d					      IF	.CYCLES & 1
      9  f62d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62d		       04 00		      nop	0
     11  f62f				  -	      ELSE
     12  f62f				  -	      bit	VSYNC
     13  f62f					      ENDIF
     14  f62f				   .CYCLES    SET	.CYCLES - 3
     15  f62f					      ENDIF
     16  f62f
     17  f62f				  -	      REPEAT	.CYCLES / 2
     18  f62f				  -	      nop
     19  f62f					      REPEND
     94  f62f				   KernelA_O
      0  f62f					      sleep	3
      1  f62f				   .CYCLES    SET	3
      2  f62f
      3  f62f				  -	      IF	.CYCLES < 2
      4  f62f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62f				  -	      ERR
      6  f62f					      ENDIF
      7  f62f
      8  f62f					      IF	.CYCLES & 1
      9  f62f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62f		       04 00		      nop	0
     11  f631				  -	      ELSE
     12  f631				  -	      bit	VSYNC
     13  f631					      ENDIF
     14  f631				   .CYCLES    SET	.CYCLES - 3
     15  f631					      ENDIF
     16  f631
     17  f631				  -	      REPEAT	.CYCLES / 2
     18  f631				  -	      nop
     19  f631					      REPEND
     96  f631				   KernelA_P
     97  f631		       a5 92		      lda	RamKernelGRP0
     98  f633
     99  f633							; TODO load next line's GRP1
    100  f633
    101  f633							; 6c
      0  f633					      ASSERT_RUNTIME	"RamCurrentKernel != #1 || _scycles == #70"
      1  f633				   .COND      SET	"RamCurrentKernel != #1 || _scycles == #70"
 ASSERT: breakif { pc== $f133  && !(  RamCurrentKernel != #1 || _scycles == #70  ) }
      2  f633					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    103  f633		       60		      rts
    104  f634
    105  f634					      rend
    106  f634				   kernel_1_end
      0  f634					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f634				   .STARTA    SET	kernel_1_start
      2  f634				   .ENDA      SET	kernel_1_end
      3  f634				   .LEN       SET	$40
      4  f634				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f634				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f634				  -	      err
      7  f634					      endif
    108  f634
    109  f634							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    110  f634							;
    111  f634							; GEM KERNEL B
    112  f634							;
    113  f634
    114  f634				   kernel_2_start subroutine
    115  f634					      rorg	$f100
    116  f634
    117  f634		       02 02 02 02	      .byte.b	$02, $02, $02, $02
    118  f638
    119  f638				   Kernel2    subroutine
    120  f638							; Assert: M1 is at position #61
    121  f638
    122  f638							; don't sleep first to make this distinct from Kernel A in debugger, lol
    123  f638
    124  f638							; Load next Player sprite
    125  f638		       85 1b		      sta	GRP0
    126  f63a
      0  f63a					      sleep	8
      1  f63a				   .CYCLES    SET	8
      2  f63a
      3  f63a				  -	      IF	.CYCLES < 2
      4  f63a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f63a				  -	      ERR
      6  f63a					      ENDIF
      7  f63a
      8  f63a				  -	      IF	.CYCLES & 1
      9  f63a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f63a				  -	      nop	0
     11  f63a				  -	      ELSE
     12  f63a				  -	      bit	VSYNC
     13  f63a				  -	      ENDIF
     14  f63a				  -.CYCLES    SET	.CYCLES - 3
     15  f63a					      ENDIF
     16  f63a
     17  f63a					      REPEAT	.CYCLES / 2
     18  f63a		       ea		      nop
     17  f63a					      REPEND
     18  f63b		       ea		      nop
     17  f63b					      REPEND
     18  f63c		       ea		      nop
     17  f63c					      REPEND
     18  f63d		       ea		      nop
     19  f63e					      REPEND
    128  f63e
    129  f63e
    130  f63e		       a2 0c		      ldx	#%00001100
    131  f640		       a0 cc		      ldy	#%11001100
    132  f642
    133  f642		       a9 02		      lda	#02
    134  f644		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable missile
    135  f646
    136  f646		       a9 c0		      lda	#%11000000
    137  f648		       84 1c		      sty	EMERALD_SP
    138  f64a
    139  f64a							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f64a					      ASSERT_RUNTIME	"RamCurrentKernel != #2 || _scycles == #25"
      1  f64a				   .COND      SET	"RamCurrentKernel != #2 || _scycles == #25"
 ASSERT: breakif { pc== $f116  && !(  RamCurrentKernel != #2 || _scycles == #25  ) }
      2  f64a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    141  f64a				   KernelB_A
    142  f64a		       85 11		      sta	EMERALD_SP_RESET
    143  f64c				   KernelB_B
      0  f64c					      sleep	3
      1  f64c				   .CYCLES    SET	3
      2  f64c
      3  f64c				  -	      IF	.CYCLES < 2
      4  f64c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64c				  -	      ERR
      6  f64c					      ENDIF
      7  f64c
      8  f64c					      IF	.CYCLES & 1
      9  f64c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64c		       04 00		      nop	0
     11  f64e				  -	      ELSE
     12  f64e				  -	      bit	VSYNC
     13  f64e					      ENDIF
     14  f64e				   .CYCLES    SET	.CYCLES - 3
     15  f64e					      ENDIF
     16  f64e
     17  f64e				  -	      REPEAT	.CYCLES / 2
     18  f64e				  -	      nop
     19  f64e					      REPEND
    145  f64e				   KernelB_C
      0  f64e					      sleep	3
      1  f64e				   .CYCLES    SET	3
      2  f64e
      3  f64e				  -	      IF	.CYCLES < 2
      4  f64e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64e				  -	      ERR
      6  f64e					      ENDIF
      7  f64e
      8  f64e					      IF	.CYCLES & 1
      9  f64e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64e		       04 00		      nop	0
     11  f650				  -	      ELSE
     12  f650				  -	      bit	VSYNC
     13  f650					      ENDIF
     14  f650				   .CYCLES    SET	.CYCLES - 3
     15  f650					      ENDIF
     16  f650
     17  f650				  -	      REPEAT	.CYCLES / 2
     18  f650				  -	      nop
     19  f650					      REPEND
    147  f650				   KernelB_D
    148  f650		       84 1c		      sty	EMERALD_SP
    149  f652				   KernelB_E
    150  f652		       85 11		      sta	EMERALD_SP_RESET
    151  f654				   KernelB_F
    152  f654		       84 1c		      sty	EMERALD_SP
    153  f656				   KernelB_G		; PF1
      0  f656					      sleep	3
      1  f656				   .CYCLES    SET	3
      2  f656
      3  f656				  -	      IF	.CYCLES < 2
      4  f656				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f656				  -	      ERR
      6  f656					      ENDIF
      7  f656
      8  f656					      IF	.CYCLES & 1
      9  f656					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f656		       04 00		      nop	0
     11  f658				  -	      ELSE
     12  f658				  -	      bit	VSYNC
     13  f658					      ENDIF
     14  f658				   .CYCLES    SET	.CYCLES - 3
     15  f658					      ENDIF
     16  f658
     17  f658				  -	      REPEAT	.CYCLES / 2
     18  f658				  -	      nop
     19  f658					      REPEND
    155  f658
    156  f658							; below has one php load (RESET?)
    157  f658				   KernelB_H
    158  f658		       84 1c		      sty	EMERALD_SP	; Gemini 3B
    159  f65a				   KernelB_I
    160  f65a		       85 11		      sta	EMERALD_SP_RESET
    161  f65c				   KernelB_J
    162  f65c		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    163  f65e				   KernelB_K
    164  f65e		       85 1e		      sta	EMERALD_MI_ENABLE
    165  f660				   KernelB_L
    166  f660		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    167  f662							; above has one PHP loa
    168  f662
    169  f662				   KernelB_M
      0  f662					      sleep	3
      1  f662				   .CYCLES    SET	3
      2  f662
      3  f662				  -	      IF	.CYCLES < 2
      4  f662				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f662				  -	      ERR
      6  f662					      ENDIF
      7  f662
      8  f662					      IF	.CYCLES & 1
      9  f662					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f662		       04 00		      nop	0
     11  f664				  -	      ELSE
     12  f664				  -	      bit	VSYNC
     13  f664					      ENDIF
     14  f664				   .CYCLES    SET	.CYCLES - 3
     15  f664					      ENDIF
     16  f664
     17  f664				  -	      REPEAT	.CYCLES / 2
     18  f664				  -	      nop
     19  f664					      REPEND
    171  f664				   KernelB_N
      0  f664					      sleep	3
      1  f664				   .CYCLES    SET	3
      2  f664
      3  f664				  -	      IF	.CYCLES < 2
      4  f664				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f664				  -	      ERR
      6  f664					      ENDIF
      7  f664
      8  f664					      IF	.CYCLES & 1
      9  f664					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f664		       04 00		      nop	0
     11  f666				  -	      ELSE
     12  f666				  -	      bit	VSYNC
     13  f666					      ENDIF
     14  f666				   .CYCLES    SET	.CYCLES - 3
     15  f666					      ENDIF
     16  f666
     17  f666				  -	      REPEAT	.CYCLES / 2
     18  f666				  -	      nop
     19  f666					      REPEND
    173  f666				   KernelB_O
    174  f666		       a5 92		      lda	RamKernelGRP0
    175  f668
    176  f668							; 6c
      0  f668					      ASSERT_RUNTIME	"RamCurrentKernel != #2 || _scycles == #70"
      1  f668				   .COND      SET	"RamCurrentKernel != #2 || _scycles == #70"
 ASSERT: breakif { pc== $f134  && !(  RamCurrentKernel != #2 || _scycles == #70  ) }
      2  f668					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    178  f668		       60		      rts
    179  f669
    180  f669					      rend
    181  f669				   kernel_2_end
      0  f669					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f669				   .STARTA    SET	kernel_2_start
      2  f669				   .ENDA      SET	kernel_2_end
      3  f669				   .LEN       SET	$40
      4  f669				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f669				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f669				  -	      err
      7  f669					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f669					      include	"data_sprites.s"
      1  f700		       00 00 00 00*	      align	256
      2  f700
      3  f700							; Player
      4  f700				   Frame0
      5  f700		       00		      .byte.b	#%00000000
      6  f701		       60		      .byte.b	#%01100000
      7  f702		       60		      .byte.b	#%01100000
      8  f703		       60		      .byte.b	#%01100000
      9  f704		       c0		      .byte.b	#%11000000
     10  f705		       c0		      .byte.b	#%11000000
     11  f706		       f0		      .byte.b	#%11110000
     12  f707		       c0		      .byte.b	#%11000000
     13  f708		       c0		      .byte.b	#%11000000
     14  f709		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f70a					      include	"data_levels.s"
      1  f710		       00 00 00 00*	      align	8
      2  f710							; first bit of byte 2 & 3 are unused for simplicity
      3  f710
      4  f710				   level_00
      5  f710		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f714
      7  f714				   level_01
      8  f714		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f718		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f71c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f720		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f724		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f728		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f72c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f730		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f734		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f738		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f73c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f740		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f744		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f748		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f74c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f750		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f754		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f758		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f75c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f760		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f764		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f768		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f76c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f770		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f774		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f778		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f77c				   level_01_end
     35  f77c
     36  f77c
     37  f77c				   shard_map
     38  f77c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  f77d				   shard_map_end
------- FILE main.s
    116  f77d
    117  fffc					      org	$fffc
    118  fffc		       09 f2		      .word.w	Start
    119  fffe		       09 f2		      .word.w	Start
