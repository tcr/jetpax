------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       NIBBLE_gem_kernel_BUILD		; todo make generic?
      6  10000 ????				       seg.U	ignoreme	; comment out rest of code
      7  10000 ????				       endm
      8  10000 ????				       mac	nibble_if
      9  10000 ????				       endm
     10  10000 ????				       mac	nibble_write
     11  10000 ????				       endm
     12  10000 ????				       mac	nibble_write_opcode
     13  10000 ????				       endm
     14  10000 ????				       mac	nibble_else
     15  10000 ????				       endm
     16  10000 ????				       mac	nibble_end_if
     17  10000 ????				       endm
     18  10000 ????				       mac	nibble_end_kernel
     19  10000 ????				       seg	CodeBank3
     20  10000 ????				       endm
     21  10000 ????
     22  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     23  10000 ????				       mac	assert_runtime
     24  10000 ????			    .COND      SET	{1}
     25  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     26  10000 ????				       endm
     27  10000 ????
     28  10000 ????
     29  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     30  10000 ????				       mac	assert_runtime_kernel
     31  10000 ????			    .KERNEL    SET	{1}
     32  10000 ????			    .COND      SET	{2}
     33  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     34  10000 ????				       endm
     35  10000 ????
     36  10000 ????						; Static assertions for size
     37  10000 ????				       mac	assert_size
     38  10000 ????			    .STARTA    SET	{1}
     39  10000 ????			    .ENDA      SET	{2}
     40  10000 ????			    .LEN       SET	{3}
     41  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     42  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     43  10000 ????				       err
     44  10000 ????				       endif
     45  10000 ????				       endm
     46  10000 ????				       mac	assert_size_exact
     47  10000 ????			    .STARTA    SET	{1}
     48  10000 ????			    .ENDA      SET	{2}
     49  10000 ????			    .LEN       SET	{3}
     50  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     51  10000 ????				       echo	""
     52  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     53  10000 ????				       err
     54  10000 ????				       endif
     55  10000 ????				       endm
     56  10000 ????
     57  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     61  0000 ????
     62  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U0099 ????				      seg.u	Variables
      2 U0099 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   RamNibbleTemp byte.b
     31 U0090		       00	   RamNibbleVar1 byte.b
     32 U0091		       00	   RamZeroByte byte.b
     33 U0092		       00	   RamLowerSixByte byte.b
     34 U0093		       00	   RamPF1Value byte.b
     35 U0094		       00	   RamKernelGRP0 byte.b		; temp
     36 U0095		       00	   RamStackBkp byte.b
     37 U0096		       00	   RamKernelPhpTarget byte.b
     38 U0097		       00	   RamKernelX byte.b
     39 U0098		       00	   RamKernelY byte.b
     40 U0099
     41 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     42 U0099
     43 U0099		       00 10	   ROW_COUNT  =	16
     44 U0099
     45 U0099		       00 02	   SIGNAL_LINE =	$02
     46 U0099
     47 U0099							; RAM+ memory map
     48 U0099		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     49 U0099		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     50 U0099		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     51 U0099
     52 U0099		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     53 U0099		       f1 40	   RAMP_STORAGE_R =	$f140
     54 U0099
     55 U0099							; NUSIZ values
     56 U0099
     57 U0099		       00 13	   THREE_COPIES =	%00010011
     58 U0099
     59 U0099							; Colors
     60 U0099
     61 U0099		       00 42	   COL_BG     equ	$42
     62 U0099		       00 cc	   COL_EMERALD equ	$CC
     63 U0099		       00 cc	   COL_EMERALD_2 equ	$CC
     64 U0099
     65 U0099							; HMOVE values for missiles
     66 U0099
     67 U0099		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     68 U0099		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     69 U0099
     70 U0099		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     71 U0099		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     72 U0099
     73 U0099							; Sprite details
     74 U0099
     75 U0099		       00 09	   SPRITE_HEIGHT equ	9
     76 U0099
     77 U0099		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     78 U0099		       00 1c	   EMERALD_SP equ	GRP1
     79 U0099		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     80 U0099		       00 11	   EMERALD_SP_RESET equ	RESP1
     81 U0099		       00 13	   EMERALD_MI_RESET equ	RESM1
     82 U0099		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     83 U0099		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     84 U0099		       00 05	   EMERALD_COPIES equ	NUSIZ1
     85 U0099
     86 U0099		       00 1b	   JET_SP     equ	GRP0
     87 U0099		       00 10	   JET_SP_RESET equ	RESP0
     88 U0099		       00 20	   JET_SP_HMOVE equ	HMP0
     89 U0099		       00 06	   JET_SP_COLOR equ	COLUP0
     90 U0099
     91 U0099							; Spriteend is HEIGHT_OFFSET - YPos
     92 U0099		       00 c8	   HEIGHT_OFFSET equ	200
     93 U0099
     94 U0099							; Compared with YPos
     95 U0099		       00 3e	   FLOOR_OFFSET equ	62
     96 U0099		       00 be	   CEILING_OFFSET equ	190
     97 U0099
     98 U0099							; Starting player position
     99 U0099		       00 3e	   YPosStart  equ	62
    100 U0099		       00 37	   XPosStart  equ	55
    101 U0099
    102 U0099							; Top left corner
    103 U0099							; YPosStart equ 190
    104 U0099							; XPosStart equ 28
    105 U0099
    106 U0099							; Tick (every 8 frames)
    107 U0099		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     64 U0099
     65 U0099							; Bank 1
     66  e000 ????				      seg	CodeBank1
     67  d000					      org	$D000
     68  d000					      rorg	$F000
     69  d000		       00	   BANK1      byte.b
     70  d200					      org	$d200
     71  d200					      rorg	$d200
     72  d200				   Bank1Start
     73  d200		       ad fa ff 	      lda	$fffa
     74  d203		       ea		      nop
     75  d204		       ea		      nop
     76  d205		       ea		      nop
     77  d206
     78  dffc					      org	$dffc
     79  dffc					      rorg	$fffc
     80  dffc		       00 d2		      .word.w	Bank1Start
     81  dffe		       00 d2		      .word.w	Bank1Start
     82  e000
     83  e000							; Bank 2
     84  f000 ????				      seg	CodeBank2
     85  e000					      org	$E000
     86  e000					      rorg	$F000
     87  e000		       00	   BANK2      byte.b
     88  e200					      org	$e200
     89  e200					      rorg	$f200
     90  e200				   Bank2Start
     91  e200		       ad fa ff 	      lda	$fffa
     92  e203		       ea		      nop
     93  e204		       ea		      nop
     94  e205		       ea		      nop
     95  e206
     96  effc					      org	$effc
     97  effc					      rorg	$fffc
     98  effc		       00 f2		      .word.w	Bank2Start
     99  effe		       00 f2		      .word.w	Bank2Start
    100  f000
    101  f000							; Bank 3
    102  10000 ????				       seg	CodeBank3
    103  f000					      org	$F000
    104  f000					      rorg	$F000
    105  f000		       00	   BANK3      byte.b
    106  f200					      org	$f200
    107  f200					      rorg	$f200
    108  f200				   Bank3Start
    109  f200		       ad fa ff 	      lda	$fffa
    110  f203		       ea		      nop
    111  f204		       ea		      nop
    112  f205		       ea		      nop
    113  f206		       4c 09 f2 	      jmp	Start
    114  f209
    115  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 83		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 89		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 86		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 87		      sta	Speed1
     48  f243		       85 88		      sta	Speed2
     49  f245		       85 8a		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8e		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 91		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 92		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c 7a f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 34		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 f7 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 f7 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 32		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 35 f7 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 35 f7 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_build
      3  f27a					      lda	#0
      4  f27a					      ldx	$f100
      5  f27a					      cpx	#$b
      6  f27a				   .if_1
      7  f27a					      rol
      8  f27a					      bcc	.else_1
      9  f27a							; Kernel B
     10  f27a					      cpx	#$00
     11  f27a				   .if_2
     12  f27a					      rol
     13  f27a					      bcc	.else_2
     14  f27a					      jmp	.endif_2
     15  f27a				   .else_2
     16  f27a				   .endif_2
     17  f27a					      jmp	.endif_1
     18  f27a				   .else_1
     19  f27a							; Kernel A
     20  f27a							; NIBBLE_WRITE RamKernelPhpTarget, #RESP1
     21  f27a					      cpx	#$00
     22  f27a				   .if_3
     23  f27a					      rol
     24  f27a					      bcc	.else_3
     25  f27a							; NIBBLE_WRITE RamKernelPhpTarget, #EMERALD_SP_RESET
     26  f27a					      jmp	.endif_3
     27  f27a				   .else_3
     28  f27a							; NIBBLE_WRITE RamKernelPhpTarget, #RESP1
     29  f27a				   .endif_3
     30  f27a				   .endif_1
     31  f27a					      ENDM
     32  f27a
     33  f27a					      MAC	nibble_gem_kernel
     34  f27a				   .if_1
     35  f27a					      asl
     36  f27a					      bcc	.else_1
     37  f27a				   .if_2
     38  f27a					      asl
     39  f27a					      bcc	.else_2
     40  f27a					      ldx	#EMERALD_SP_RESET
     41  f27a					      stx	RamKernelPhpTarget
     42  f27a					      ldx	#BC_STA
     43  f27a					      stx	[KernelB_H_W + 0]
     44  f27a					      ldx	#EMERALD_SP
     45  f27a					      stx	[KernelB_H_W + 1]
     46  f27a					      ldx	#BC_PHP
     47  f27a					      stx	[KernelB_H_W + 2]
     48  f27a					      jmp	.endif_2
     49  f27a				   .else_2
     50  f27a					      ldx	#EMERALD_SP
     51  f27a					      stx	RamKernelPhpTarget
     52  f27a					      ldx	#BC_PHP
     53  f27a					      stx	[KernelB_H_W + 0]
     54  f27a					      ldx	#BC_STA
     55  f27a					      stx	[KernelB_H_W + 1]
     56  f27a					      ldx	#EMERALD_SP_RESET
     57  f27a					      stx	[KernelB_H_W + 2]
     58  f27a				   .endif_2
     59  f27a					      jmp	.endif_1
     60  f27a				   .else_1
     61  f27a				   .if_3
     62  f27a					      asl
     63  f27a					      bcc	.else_3
     64  f27a					      ldx	#BC_STX
     65  f27a					      stx	[KernelA_D + 0]
     66  f27a					      ldx	#GRP1
     67  f27a					      stx	[KernelA_D + 0]
     68  f27a					      jmp	.endif_3
     69  f27a				   .else_3
     70  f27a					      ldx	#BC_STY
     71  f27a					      stx	[KernelA_D + 0]
     72  f27a					      ldx	#GRP1
     73  f27a					      stx	[KernelA_D + 0]
     74  f27a				   .endif_3
     75  f27a				   .endif_1
     76  f27a					      ENDM
     77  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a							; Vertical Sync
      4  f27a				   VerticalSync subroutine
      0  f27a					      VERTICAL_SYNC
      1  f27a		       a9 0e		      lda	#%1110
      2  f27c		       85 02	   .VSLP1     sta	WSYNC
      3  f27e		       85 00		      sta	VSYNC
      4  f280		       4a		      lsr
      5  f281		       d0 f9		      bne	.VSLP1
      6  f283
      7  f283				   FrameStart subroutine
      0  f283					      ASSERT_RUNTIME	"_scan == #0"
      1  f283				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f283  && !(  _scan == #0  ) }
      2  f283					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f283
     10  f283				   VerticalBlank subroutine
      0  f283					      TIMER_SETUP	37
      1  f283				   .lines     SET	37
      2  f283		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f285		       85 02		      sta	WSYNC
      4  f287		       8d 96 02 	      sta	TIM64T
     12  f28a
     13  f28a							; Scanline counter
     14  f28a		       a9 10		      lda	#ROW_COUNT
     15  f28c		       85 82		      sta	LoopCount
     16  f28e
     17  f28e							; Frame counter
     18  f28e		       e6 83		      inc	FrameCount
     19  f290
     20  f290							; Skip every 8 frames for increasing demo index
     21  f290		       a5 83		      lda	FrameCount
     22  f292		       29 07		      and	#FrameSkip
     23  f294		       c9 07		      cmp	#FrameSkip
     24  f296		       d0 0d		      bne	.next_next_thing
     25  f298
     26  f298		       18		      clc
     27  f299		       a5 8e		      lda	ROW_DEMO_INDEX
     28  f29b		       69 04		      adc	#4
     29  f29d		       c9 68		      cmp	#[level_01_end - level_01]
     30  f29f		       90 02		      bcc	.next_thing_local
     31  f2a1		       a9 00		      lda	#0
     32  f2a3				   .next_thing_local
     33  f2a3		       85 8e		      sta	ROW_DEMO_INDEX
     34  f2a5				   .next_next_thing
     35  f2a5		       85 02		      sta	WSYNC
     36  f2a7
     37  f2a7							; Positioning
      0  f2a7					      SLEEP	40
      1  f2a7				   .CYCLES    SET	40
      2  f2a7
      3  f2a7				  -	      IF	.CYCLES < 2
      4  f2a7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a7				  -	      ERR
      6  f2a7					      ENDIF
      7  f2a7
      8  f2a7				  -	      IF	.CYCLES & 1
      9  f2a7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a7				  -	      nop	0
     11  f2a7				  -	      ELSE
     12  f2a7				  -	      bit	VSYNC
     13  f2a7				  -	      ENDIF
     14  f2a7				  -.CYCLES    SET	.CYCLES - 3
     15  f2a7					      ENDIF
     16  f2a7
     17  f2a7					      REPEAT	.CYCLES / 2
     18  f2a7		       ea		      nop
     17  f2a7					      REPEND
     18  f2a8		       ea		      nop
     17  f2a8					      REPEND
     18  f2a9		       ea		      nop
     17  f2a9					      REPEND
     18  f2aa		       ea		      nop
     17  f2aa					      REPEND
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     19  f2bb					      REPEND
     39  f2bb		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     40  f2bd		       85 02		      sta	WSYNC
     41  f2bf
     42  f2bf							; Misc
     43  f2bf		       a9 00		      lda	#00
     44  f2c1		       85 1e		      sta	EMERALD_MI_ENABLE
     45  f2c3
     46  f2c3							; Assign dervied SpriteEnd value
     47  f2c3		       18		      clc
     48  f2c4		       a9 c8		      lda	#HEIGHT_OFFSET
     49  f2c6		       e5 89		      sbc	YPos
     50  f2c8		       85 85		      sta	SpriteEnd
     51  f2ca
     52  f2ca							; Player 1
     53  f2ca		       a5 86		      lda	XPos
     54  f2cc		       a2 00		      ldx	#0
     55  f2ce		       20 2d f4 	      jsr	SetHorizPos
     56  f2d1
     57  f2d1				   frame_setup subroutine
     58  f2d1							; Kernel A or B
     59  f2d1		       a9 01		      lda	#01
     60  f2d3		       25 83		      and	FrameCount
     61  f2d5		       d0 2c		      bne	frame_setup_kernel_b
     62  f2d7
     63  f2d7				   frame_setup_kernel_a subroutine
     64  f2d7							; Load kernel into CBSRAM
     65  f2d7		       20 56 f2 	      jsr	LoadKernelA
     66  f2da
     67  f2da							; Move missile
     68  f2da		       85 02		      sta	WSYNC
      0  f2dc					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2dc				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2dc
      3  f2dc				  -	      IF	.CYCLES < 2
      4  f2dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2dc				  -	      ERR
      6  f2dc					      ENDIF
      7  f2dc
      8  f2dc				  -	      IF	.CYCLES & 1
      9  f2dc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2dc				  -	      nop	0
     11  f2dc				  -	      ELSE
     12  f2dc				  -	      bit	VSYNC
     13  f2dc				  -	      ENDIF
     14  f2dc				  -.CYCLES    SET	.CYCLES - 3
     15  f2dc					      ENDIF
     16  f2dc
     17  f2dc					      REPEAT	.CYCLES / 2
     18  f2dc		       ea		      nop
     17  f2dc					      REPEND
     18  f2dd		       ea		      nop
     17  f2dd					      REPEND
     18  f2de		       ea		      nop
     17  f2de					      REPEND
     18  f2df		       ea		      nop
     17  f2df					      REPEND
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     17  f2e1					      REPEND
     18  f2e2		       ea		      nop
     17  f2e2					      REPEND
     18  f2e3		       ea		      nop
     17  f2e3					      REPEND
     18  f2e4		       ea		      nop
     17  f2e4					      REPEND
     18  f2e5		       ea		      nop
     17  f2e5					      REPEND
     18  f2e6		       ea		      nop
     17  f2e6					      REPEND
     18  f2e7		       ea		      nop
     17  f2e7					      REPEND
     18  f2e8		       ea		      nop
     17  f2e8					      REPEND
     18  f2e9		       ea		      nop
     19  f2ea					      REPEND
     70  f2ea		       85 13		      sta	EMERALD_MI_RESET
     71  f2ec		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     72  f2ee		       85 23		      sta	EMERALD_MI_HMOVE
     73  f2f0
     74  f2f0							; DEBUG: Set per-kernel color
     75  f2f0		       a2 cc		      ldx	#COL_EMERALD
     76  f2f2		       86 07		      stx	EMERALD_SP_COLOR
     77  f2f4
     78  f2f4							; Set reflection for Jetpack.
     79  f2f4		       a9 ff		      lda	#%11111111
     80  f2f6		       85 0c		      sta	REFP1
     81  f2f8
     82  f2f8							; Kernel: Set X register.
     83  f2f8		       a9 06		      lda	#%00000110
     84  f2fa		       85 97		      sta	RamKernelX
     85  f2fc		       a9 66		      lda	#%01100110
     86  f2fe		       85 98		      sta	RamKernelY
     87  f300
     88  f300		       4c 38 f3 	      jmp	frame_setup_complete
     89  f303
     90  f303				   frame_setup_kernel_b subroutine
     91  f303							; Load kernel into CBSRAM
     92  f303		       20 68 f2 	      jsr	LoadKernelB
     93  f306
     94  f306							; Move missile
     95  f306		       85 02		      sta	WSYNC
      0  f308					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f308				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f308
      3  f308				  -	      IF	.CYCLES < 2
      4  f308				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f308				  -	      ERR
      6  f308					      ENDIF
      7  f308
      8  f308					      IF	.CYCLES & 1
      9  f308					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f308		       04 00		      nop	0
     11  f30a				  -	      ELSE
     12  f30a				  -	      bit	VSYNC
     13  f30a					      ENDIF
     14  f30a				   .CYCLES    SET	.CYCLES - 3
     15  f30a					      ENDIF
     16  f30a
     17  f30a					      REPEAT	.CYCLES / 2
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     17  f316					      REPEND
     18  f317		       ea		      nop
     17  f317					      REPEND
     18  f318		       ea		      nop
     17  f318					      REPEND
     18  f319		       ea		      nop
     17  f319					      REPEND
     18  f31a		       ea		      nop
     17  f31a					      REPEND
     18  f31b		       ea		      nop
     17  f31b					      REPEND
     18  f31c		       ea		      nop
     17  f31c					      REPEND
     18  f31d		       ea		      nop
     17  f31d					      REPEND
     18  f31e		       ea		      nop
     17  f31e					      REPEND
     18  f31f		       ea		      nop
     17  f31f					      REPEND
     18  f320		       ea		      nop
     17  f320					      REPEND
     18  f321		       ea		      nop
     19  f322					      REPEND
     97  f322		       85 13		      sta	EMERALD_MI_RESET
     98  f324		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     99  f326		       85 23		      sta	EMERALD_MI_HMOVE
    100  f328
    101  f328							; DEBUG: Set per-kernel color
    102  f328		       a2 e0		      ldx	#$e0
    103  f32a		       86 07		      stx	EMERALD_SP_COLOR
    104  f32c
    105  f32c							; Disable reflection for Jetpack.
    106  f32c		       a9 ff		      lda	#%11111111
    107  f32e		       85 0c		      sta	REFP1
    108  f330
    109  f330							; Kernel: Set X register.
    110  f330		       a9 03		      lda	#%00000011
    111  f332		       85 97		      sta	RamKernelX
    112  f334		       a9 33		      lda	#%00110011
    113  f336		       85 98		      sta	RamKernelY
    114  f338
    115  f338				   frame_setup_complete
    116  f338
    117  f338		       ad 7c f8 	      lda	shard_map
    118  f33b		       a0 01		      ldy	#1	; gemini counter, starting at 1
    119  f33d				   gemini_builder
    120  f33d		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    121  f33f		       d0 00		      bne	.no_vd0
    122  f341				   .no_vd0
    123  f341
    124  f341				   nibble_precompile_gem_kernel
    125  f341				   DBG_NIBBLE
    126  f341		       00 85	   BC_STA     =	$85
    127  f341		       00 86	   BC_STX     =	$86
    128  f341		       00 84	   BC_STY     =	$84
    129  f341		       00 08	   BC_PHP     =	$08
    130  f341
    131  f341				   KernelB_H_W EQM	[KernelB_H - $100]
    132  f341
    133  f341							; Perform kernel Nibble calculations
      0  f341					      NIBBLE_START_KERNEL	gem_kernel, 40
      0  f341					      NIBBLE_gem_kernel_BUILD
      1  f341		       a9 00		      lda	#0
      2  f343		       ae 00 f1 	      ldx	$f100
      3  f346		       e0 0b		      cpx	#$b
      4  f348				   .if_1
      5  f348		       2a		      rol
      6  f349		       90 0b		      bcc	.else_1
      7  f34b
      8  f34b		       e0 00		      cpx	#$00
      9  f34d				   .if_2
     10  f34d		       2a		      rol
     11  f34e		       90 03		      bcc	.else_2
     12  f350		       4c 53 f3 	      jmp	.endif_2
     13  f353				   .else_2
     14  f353				   .endif_2
     15  f353		       4c 5e f3 	      jmp	.endif_1
     16  f356				   .else_1
     17  f356
     18  f356
     19  f356		       e0 00		      cpx	#$00
     20  f358				   .if_3
     21  f358		       2a		      rol
     22  f359		       90 03		      bcc	.else_3
     23  f35b
     24  f35b		       4c 5e f3 	      jmp	.endif_3
     25  f35e				   .else_3
     26  f35e
     27  f35e				   .endif_3
     28  f35e				   .endif_1
      2 U0009 ????				      seg.U	ignoreme
    135 U0009 ????	       ae 00 f1 	      ldx	$f100
    136 U000c ????	       e0 0b		      cpx	#$b
      0 U000e ????				      NIBBLE_IF	cs
    138 U000e ????						; Kernel B
    139 U000e ????	       e0 00		      cpx	#$00
      0 U0010 ????				      NIBBLE_IF	cs
      0 U0010 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP_RESET
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 0], #BC_STA
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #EMERALD_SP
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 2], #BC_PHP
      0 U0010 ????				      NIBBLE_ELSE
      0 U0010 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 0], #BC_PHP
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_STA
      0 U0010 ????				      NIBBLE_WRITE	[KernelB_H_W + 2], #EMERALD_SP_RESET
      0 U0010 ????				      NIBBLE_END_IF
      0 U0010 ????				      NIBBLE_ELSE
    152 U0010 ????						; Kernel A
    153 U0010 ????						; NIBBLE_WRITE RamKernelPhpTarget, #RESP1
    154 U0010 ????
    155 U0010 ????	       e0 00		      cpx	#$00
      0 U0012 ????				      NIBBLE_IF	cs
    157 U0012 ????						; NIBBLE_WRITE RamKernelPhpTarget, #EMERALD_SP_RESET
      0 U0012 ????				      NIBBLE_WRITE	[KernelA_D + 0], #BC_STX, #GRP1
      0 U0012 ????				      NIBBLE_ELSE
    160 U0012 ????						; NIBBLE_WRITE RamKernelPhpTarget, #RESP1
      0 U0012 ????				      NIBBLE_WRITE	[KernelA_D + 0], #BC_STY, #GRP1
      0 U0012 ????				      NIBBLE_END_IF
    163 U0012 ????
      0 U0012 ????				      NIBBLE_END_IF
      0 U0012 ????				      NIBBLE_END_KERNEL
      1  f35e					      seg	CodeBank3
    166  f35e		       2a		      rol
    167  f35f		       2a		      rol
    168  f360		       2a		      rol
    169  f361		       2a		      rol
    170  f362		       2a		      rol
    171  f363		       2a		      rol
    172  f364		       85 90		      sta	RamNibbleVar1
    173  f366
    174  f366				   VerticalBlankEnd
    175  f366							; Wait until the end of Vertical blank.
      0  f366					      TIMER_WAIT
      1  f366				   .waittimer
      2  f366		       ad 84 02 	      lda	INTIM
      3  f369		       d0 fb		      bne	.waittimer
      4  f36b		       85 02		      sta	WSYNC
      0  f36d					      ASSERT_RUNTIME	"_scan == #37"
      1  f36d				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f36d  && !(  _scan == #37  ) }
      2  f36d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    178  f36d
    179  f36d							; Save stack pointer
    180  f36d		       ba		      tsx
    181  f36e		       86 95		      stx	RamStackBkp
    182  f370
    183  f370							; Start rendering the kernel.
    184  f370		       4c 41 f4 	      jmp	KernelBorder
    185  f373
    186  f373				   FrameEnd   subroutine
    187  f373		       85 02		      sta	WSYNC
    188  f375
    189  f375							; Blank all background colors.
    190  f375		       a9 00		      lda	#0
    191  f377		       85 08		      sta	COLUPF
    192  f379		       85 0f		      sta	PF2
    193  f37b		       85 0e		      sta	PF1
    194  f37d		       85 1c		      sta	EMERALD_SP
    195  f37f
    196  f37f							; Guide lines (2x)
    197  f37f		       a9 02		      lda	#SIGNAL_LINE
    198  f381		       85 09		      sta	COLUBK
    199  f383					      REPEAT	6
    200  f383		       85 02		      sta	WSYNC
    199  f383					      REPEND
    200  f385		       85 02		      sta	WSYNC
    199  f385					      REPEND
    200  f387		       85 02		      sta	WSYNC
    199  f387					      REPEND
    200  f389		       85 02		      sta	WSYNC
    199  f389					      REPEND
    200  f38b		       85 02		      sta	WSYNC
    199  f38b					      REPEND
    200  f38d		       85 02		      sta	WSYNC
    201  f38f					      REPEND
    202  f38f		       a9 00		      lda	#$00
    203  f391		       85 09		      sta	COLUBK
    204  f393
    205  f393							; Restore stack pointer
    206  f393		       a6 95		      ldx	RamStackBkp
    207  f395		       9a		      txs
    208  f396
    209  f396							; Display the rest of the blank screen.
      0  f396					      TIMER_SETUP	25
      1  f396				   .lines     SET	25
      2  f396		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f398		       85 02		      sta	WSYNC
      4  f39a		       8d 96 02 	      sta	TIM64T
    211  f39d		       85 02		      sta	WSYNC
      0  f39f					      TIMER_WAIT
      1  f39f				   .waittimer
      2  f39f		       ad 84 02 	      lda	INTIM
      3  f3a2		       d0 fb		      bne	.waittimer
      4  f3a4		       85 02		      sta	WSYNC
      0  f3a6					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f3a6				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f3a6  && !(  _scan == (#37 + #192)  ) }
      2  f3a6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    214  f3a6
    215  f3a6							; Overscan
    216  f3a6				   Overscan   subroutine
    217  f3a6		       85 01		      sta	VBLANK
      0  f3a8					      TIMER_SETUP	29
      1  f3a8				   .lines     SET	29
      2  f3a8		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f3aa		       85 02		      sta	WSYNC
      4  f3ac		       8d 96 02 	      sta	TIM64T
    219  f3af
    220  f3af		       20 bf f3 	      jsr	MoveJoystick
    221  f3b2		       20 f6 f3 	      jsr	SpeedCalculation
    222  f3b5
      0  f3b5					      TIMER_WAIT
      1  f3b5				   .waittimer
      2  f3b5		       ad 84 02 	      lda	INTIM
      3  f3b8		       d0 fb		      bne	.waittimer
      4  f3ba		       85 02		      sta	WSYNC
      0  f3bc					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f3bc				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f3bc  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f3bc					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    225  f3bc
    226  f3bc		       4c 7a f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f3bf					      include	"game_input.s"
      1  f3bf							; Handles input checking. Called from overscan.
      2  f3bf
      3  f3bf							; Read joystick movement and apply to object 0
      4  f3bf				   MoveJoystick
      5  f3bf							; Move vertically
      6  f3bf							; (up and down are actually reversed since ypos starts at bottom)
      7  f3bf							;     ldx YPos
      8  f3bf		       a9 10		      lda	#%00010000	;Up?
      9  f3c1		       2c 80 02 	      bit	SWCHA
     10  f3c4		       d0 0d		      bne	SkipMoveUp
     11  f3c6
     12  f3c6		       18		      clc
     13  f3c7		       a5 88		      lda	Speed2
     14  f3c9		       69 0c		      adc	#12
     15  f3cb		       85 88		      sta	Speed2
     16  f3cd		       a5 87		      lda	Speed1
     17  f3cf		       69 00		      adc	#00
     18  f3d1		       85 87		      sta	Speed1
     19  f3d3
     20  f3d3				   SkipMoveUp
     21  f3d3		       a6 86		      ldx	XPos
     22  f3d5
     23  f3d5							; Only check left/right on odd frames;
     24  f3d5							; TODO make this just a fractional speed
     25  f3d5							; rather than dropping frames
     26  f3d5		       a9 01		      lda	#01
     27  f3d7		       25 83		      and	FrameCount
     28  f3d9		       d0 18		      bne	SkipMoveRight
     29  f3db
     30  f3db
     31  f3db							; Move horizontally
     32  f3db		       a9 40		      lda	#%01000000	;Left?
     33  f3dd		       2c 80 02 	      bit	SWCHA
     34  f3e0		       d0 05		      bne	SkipMoveLeft
     35  f3e2		       e0 1d		      cpx	#29
     36  f3e4		       90 01		      bcc	SkipMoveLeft
     37  f3e6		       ca		      dex
     38  f3e7
     39  f3e7							; Reflect
     40  f3e7							;     lda #$ff
     41  f3e7							;     sta REFP0
     42  f3e7				   SkipMoveLeft
     43  f3e7		       a9 80		      lda	#%10000000	;Right?
     44  f3e9		       2c 80 02 	      bit	SWCHA
     45  f3ec		       d0 05		      bne	SkipMoveRight
     46  f3ee		       e0 80		      cpx	#128
     47  f3f0		       b0 01		      bcs	SkipMoveRight
     48  f3f2		       e8		      inx
     49  f3f3
     50  f3f3							; Reflect
     51  f3f3							;     lda #$0
     52  f3f3							;     sta REFP0
     53  f3f3				   SkipMoveRight
     54  f3f3		       86 86		      stx	XPos
     55  f3f5		       60		      rts
     56  f3f6
     57  f3f6
     58  f3f6				   SpeedCalculation
     59  f3f6		       38		      sec
     60  f3f7		       a5 88		      lda	Speed2
     61  f3f9		       e9 07		      sbc	#7
     62  f3fb		       85 88		      sta	Speed2
     63  f3fd		       a5 87		      lda	Speed1
     64  f3ff		       e9 00		      sbc	#0
     65  f401		       85 87		      sta	Speed1
     66  f403
     67  f403		       18		      clc
     68  f404		       a5 8a		      lda	YPos2
     69  f406		       65 88		      adc	Speed2
     70  f408		       85 8a		      sta	YPos2
     71  f40a		       a5 89		      lda	YPos
     72  f40c		       65 87		      adc	Speed1
     73  f40e		       85 89		      sta	YPos
     74  f410
     75  f410		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f412		       b0 0a		      bcs	NewThing2
     77  f414
     78  f414							; Reset to floor
     79  f414		       a9 3e		      lda	#FLOOR_OFFSET
     80  f416		       85 89		      sta	YPos
     81  f418		       a9 00		      lda	#0
     82  f41a		       85 87		      sta	Speed1
     83  f41c		       85 88		      sta	Speed2
     84  f41e				   NewThing2
     85  f41e
     86  f41e		       c9 be		      cmp	#CEILING_OFFSET
     87  f420		       90 0a		      bcc	.next
     88  f422
     89  f422							; Reset to ceiling
     90  f422		       a9 be		      lda	#CEILING_OFFSET
     91  f424		       85 89		      sta	YPos
     92  f426		       a9 00		      lda	#0
     93  f428		       85 87		      sta	Speed1
     94  f42a		       85 88		      sta	Speed2
     95  f42c				   .next
     96  f42c		       60		      rts
     97  f42d
     98  f42d
     99  f42d
    100  f42d							; Subroutine
    101  f42d				   SetHorizPos
    102  f42d		       85 02		      sta	WSYNC	; start a new line
    103  f42f		       24 00		      bit	0	; waste 3 cycles
    104  f431		       38		      sec		; set carry flag
    105  f432				   DivideLoop
    106  f432		       e9 0f		      sbc	#15	; subtract 15
    107  f434		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f436		       49 07		      eor	#7	; calculate fine offset
    109  f438		       0a		      asl
    110  f439		       0a		      asl
    111  f43a		       0a		      asl
    112  f43b		       0a		      asl
    113  f43c		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f43e		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f440		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f441					      include	"kernel_border.s"
      1  f441							; Visible Kernel
      2  f441
      3  f441				   KernelBorder subroutine
      4  f441		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f443
      6  f443							; First HMOVE
      7  f443		       85 2a		      sta	HMOVE
      8  f445
      9  f445							; Border top
     10  f445		       a9 00		      lda	#0
     11  f447		       85 08		      sta	COLUPF
     12  f449		       85 0e		      sta	PF1
     13  f44b		       85 0f		      sta	PF2
     14  f44d		       a9 02		      lda	#SIGNAL_LINE
     15  f44f		       85 09		      sta	COLUBK
     16  f451
     17  f451					      REPEAT	6
     18  f451		       85 02		      sta	WSYNC
     17  f451					      REPEND
     18  f453		       85 02		      sta	WSYNC
     17  f453					      REPEND
     18  f455		       85 02		      sta	WSYNC
     17  f455					      REPEND
     18  f457		       85 02		      sta	WSYNC
     17  f457					      REPEND
     18  f459		       85 02		      sta	WSYNC
     17  f459					      REPEND
     18  f45b		       85 02		      sta	WSYNC
     19  f45d					      REPEND
     20  f45d
     21  f45d		       a9 00		      lda	#0
     22  f45f		       85 09		      sta	COLUBK
     23  f461		       85 02		      sta	WSYNC
     24  f463
     25  f463							; Start top border
     26  f463				   border_top
     27  f463							; Make the playfield solid.
     28  f463		       a9 3f		      lda	#%00111111
     29  f465		       85 0e		      sta	PF1
     30  f467		       a9 ff		      lda	#%11111111
     31  f469		       85 0f		      sta	PF2
     32  f46b
     33  f46b		       a9 42		      lda	#COL_BG
     34  f46d		       a0 00		      ldy	#0
     35  f46f
     36  f46f							; X_XXXX_XX
     37  f46f							; Commented lines removed to save on space.
     38  f46f		       85 08		      sta	COLUPF
     39  f471		       85 02		      sta	WSYNC
     40  f473		       84 08		      sty	COLUPF
     41  f475		       85 02		      sta	WSYNC
     42  f477		       85 08		      sta	COLUPF
     43  f479		       85 02		      sta	WSYNC
     44  f47b							; sta COLUPF
     45  f47b		       85 02		      sta	WSYNC
     46  f47d							; sta COLUPF
     47  f47d		       85 02		      sta	WSYNC
     48  f47f		       84 08		      sty	COLUPF
     49  f481		       85 02		      sta	WSYNC
     50  f483		       85 08		      sta	COLUPF
     51  f485
     52  f485		       85 02		      sta	WSYNC
     53  f487							; sta COLUPF
     54  f487
     55  f487				   PlayArea
     56  f487							; PF is now the playing area
      0  f487					      ASSERT_RUNTIME	"_scycles == #0"
      1  f487				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f487  && !(  _scycles == #0  ) }
      2  f487					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f487					      sleep	61
      1  f487				   .CYCLES    SET	61
      2  f487
      3  f487				  -	      IF	.CYCLES < 2
      4  f487				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f487				  -	      ERR
      6  f487					      ENDIF
      7  f487
      8  f487					      IF	.CYCLES & 1
      9  f487					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f487		       04 00		      nop	0
     11  f489				  -	      ELSE
     12  f489				  -	      bit	VSYNC
     13  f489					      ENDIF
     14  f489				   .CYCLES    SET	.CYCLES - 3
     15  f489					      ENDIF
     16  f489
     17  f489					      REPEAT	.CYCLES / 2
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     17  f48a					      REPEND
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     17  f48d					      REPEND
     18  f48e		       ea		      nop
     17  f48e					      REPEND
     18  f48f		       ea		      nop
     17  f48f					      REPEND
     18  f490		       ea		      nop
     17  f490					      REPEND
     18  f491		       ea		      nop
     17  f491					      REPEND
     18  f492		       ea		      nop
     17  f492					      REPEND
     18  f493		       ea		      nop
     17  f493					      REPEND
     18  f494		       ea		      nop
     17  f494					      REPEND
     18  f495		       ea		      nop
     17  f495					      REPEND
     18  f496		       ea		      nop
     17  f496					      REPEND
     18  f497		       ea		      nop
     17  f497					      REPEND
     18  f498		       ea		      nop
     17  f498					      REPEND
     18  f499		       ea		      nop
     17  f499					      REPEND
     18  f49a		       ea		      nop
     17  f49a					      REPEND
     18  f49b		       ea		      nop
     17  f49b					      REPEND
     18  f49c		       ea		      nop
     17  f49c					      REPEND
     18  f49d		       ea		      nop
     17  f49d					      REPEND
     18  f49e		       ea		      nop
     17  f49e					      REPEND
     18  f49f		       ea		      nop
     17  f49f					      REPEND
     18  f4a0		       ea		      nop
     17  f4a0					      REPEND
     18  f4a1		       ea		      nop
     17  f4a1					      REPEND
     18  f4a2		       ea		      nop
     17  f4a2					      REPEND
     18  f4a3		       ea		      nop
     17  f4a3					      REPEND
     18  f4a4		       ea		      nop
     17  f4a4					      REPEND
     18  f4a5		       ea		      nop
     19  f4a6					      REPEND
     59  f4a6		       a9 00		      lda	#%00000000
     60  f4a8		       85 0d		      sta	PF0
     61  f4aa		       a9 20		      lda	#%00100000
     62  f4ac		       85 0e		      sta	PF1
     63  f4ae		       a9 00		      lda	#%00000000
     64  f4b0		       85 0f		      sta	PF2
      0  f4b2					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4b2				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4b2  && !(  _scycles == #0  ) }
      2  f4b2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f4b2					      sleep	7
      1  f4b2				   .CYCLES    SET	7
      2  f4b2
      3  f4b2				  -	      IF	.CYCLES < 2
      4  f4b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b2				  -	      ERR
      6  f4b2					      ENDIF
      7  f4b2
      8  f4b2					      IF	.CYCLES & 1
      9  f4b2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b2		       04 00		      nop	0
     11  f4b4				  -	      ELSE
     12  f4b4				  -	      bit	VSYNC
     13  f4b4					      ENDIF
     14  f4b4				   .CYCLES    SET	.CYCLES - 3
     15  f4b4					      ENDIF
     16  f4b4
     17  f4b4					      REPEAT	.CYCLES / 2
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     19  f4b6					      REPEND
     67  f4b6		       4c e8 f4 	      jmp	row_start
     68  f4b9							; enter row on cycle 10.
     69  f4b9
     70  f4b9							; reset the background for bottom of playfield
     71  f4b9				   border_bottom
     72  f4b9							;sta WSYNC
     73  f4b9
     74  f4b9							; Form the bottom of the level frame.
     75  f4b9		       a9 3f		      lda	#%00111111
     76  f4bb		       85 0e		      sta	PF1
     77  f4bd		       a9 ff		      lda	#%11111111
     78  f4bf		       85 0f		      sta	PF2
     79  f4c1
     80  f4c1							; Clear all sprites.
     81  f4c1		       a9 00		      lda	#0
     82  f4c3		       85 1c		      sta	EMERALD_SP
     83  f4c5		       85 1b		      sta	JET_SP
     84  f4c7		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f4c9
     86  f4c9		       a9 42		      lda	#COL_BG
     87  f4cb		       a0 00		      ldy	#0
     88  f4cd		       85 02		      sta	WSYNC
     89  f4cf
     90  f4cf		       84 08		      sty	COLUPF
     91  f4d1		       85 02		      sta	WSYNC
     92  f4d3
     93  f4d3		       85 08		      sta	COLUPF
     94  f4d5		       85 02		      sta	WSYNC
     95  f4d7
     96  f4d7		       85 02		      sta	WSYNC
     97  f4d9
     98  f4d9		       85 02		      sta	WSYNC
     99  f4db
    100  f4db		       84 08		      sty	COLUPF
    101  f4dd		       85 02		      sta	WSYNC
    102  f4df
    103  f4df		       85 08		      sta	COLUPF
    104  f4e1		       85 02		      sta	WSYNC
    105  f4e3		       85 02		      sta	WSYNC
    106  f4e5		       4c 73 f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4e8					      include	"kernel_row.s"
      1  f4e8							; Frame Start
      2  f4e8
      3  f4e8							; Macros for calculating sprite values (GRPx).
      4  f4e8
      5  f4e8							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4e8					      mac	kernel_load_player
      7  f4e8							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4e8					      dcp	SpriteEnd	; 5c
      9  f4e8					      ldy	#0	; 2c
     10  f4e8							; constant 6c:
     11  f4e8					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4e8					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4e8					      ldy	SpriteEnd
     14  f4e8							; 4c
     15  f4e8					      ldx	Frame0,Y
     16  f4e8					      endm
     17  f4e8
     18  f4e8							; mac jet_spritedata_calc
     19  f4e8							;
     20  f4e8							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4e8							; GRP0.
     22  f4e8					      mac	jet_spritedata_calc
     23  f4e8							; loader
     24  f4e8					      lda	#SPRITE_HEIGHT
     25  f4e8					      dcp	SpriteEnd
     26  f4e8					      ldy	SpriteEnd
     27  f4e8
     28  f4e8							; 4c
     29  f4e8							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4e8							; from Frame0 + Y must never cross a page boundary.
     31  f4e8					      lda	Frame0,Y
     32  f4e8							; 6c
     33  f4e8					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4e8					      .byte	$2c	; 4c / 0c
     35  f4e8					      sta	JET_SP	; 0c / 3c
     36  f4e8					      endm
     37  f4e8
     38  f4e8				   row_start
     39  f4e8
     40  f4e8							; [scanline 1]
     41  f4e8				   row_1
     42  f4e8							; Enter after scanline starts on row "9" and wraps
      0  f4e8					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4e8				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4e8  && !(  _scycles == #10  ) }
      2  f4e8					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4e8
      0  f4e8					      jet_spritedata_calc
      1  f4e8
      2  f4e8		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ea		       c7 85		      dcp	SpriteEnd
      4  f4ec		       a4 85		      ldy	SpriteEnd
      5  f4ee
      6  f4ee
      7  f4ee
      8  f4ee
      9  f4ee		       b9 00 f8 	      lda	Frame0,Y
     10  f4f1
     11  f4f1		       b0 01		      .byte.b	$b0, $01
     12  f4f3		       2c		      .byte.b	$2c
     13  f4f4		       85 1b		      sta	JET_SP
     46  f4f6
     47  f4f6							; [[[Nibble VM.]]]
     48  f4f6		       a5 90		      lda	RamNibbleVar1
     49  f4f8				   DBG_NIBBLEVM
      0  f4f8					      NIBBLE_gem_kernel
      1  f4f8				   .if_1
      2  f4f8		       0a		      asl
      3  f4f9		       90 2f		      bcc	.else_1
      4  f4fb				   .if_2
      5  f4fb		       0a		      asl
      6  f4fc		       90 16		      bcc	.else_2
      7  f4fe		       a2 11		      ldx	#EMERALD_SP_RESET
      8  f500		       86 96		      stx	RamKernelPhpTarget
      9  f502		       a2 85		      ldx	#BC_STA
     10  f504		       8e 20 f0 	      stx	[KernelB_H_W + 0]
     11  f507		       a2 1c		      ldx	#EMERALD_SP
     12  f509		       8e 21 f0 	      stx	[KernelB_H_W + 1]
     13  f50c		       a2 08		      ldx	#BC_PHP
     14  f50e		       8e 22 f0 	      stx	[KernelB_H_W + 2]
     15  f511		       4c 27 f5 	      jmp	.endif_2
     16  f514				   .else_2
     17  f514		       a2 1c		      ldx	#EMERALD_SP
     18  f516		       86 96		      stx	RamKernelPhpTarget
     19  f518		       a2 08		      ldx	#BC_PHP
     20  f51a		       8e 20 f0 	      stx	[KernelB_H_W + 0]
     21  f51d		       a2 85		      ldx	#BC_STA
     22  f51f		       8e 21 f0 	      stx	[KernelB_H_W + 1]
     23  f522		       a2 11		      ldx	#EMERALD_SP_RESET
     24  f524		       8e 22 f0 	      stx	[KernelB_H_W + 2]
     25  f527				   .endif_2
     26  f527		       4c 44 f5 	      jmp	.endif_1
     27  f52a				   .else_1
     28  f52a				   .if_3
     29  f52a		       0a		      asl
     30  f52b		       90 0d		      bcc	.else_3
     31  f52d		       a2 86		      ldx	#BC_STX
     32  f52f		       8e 18 f1 	      stx	[KernelA_D + 0]
     33  f532		       a2 1c		      ldx	#GRP1
     34  f534		       8e 18 f1 	      stx	[KernelA_D + 0]
     35  f537		       4c 44 f5 	      jmp	.endif_3
     36  f53a				   .else_3
     37  f53a		       a2 84		      ldx	#BC_STY
     38  f53c		       8e 18 f1 	      stx	[KernelA_D + 0]
     39  f53f		       a2 1c		      ldx	#GRP1
     40  f541		       8e 18 f1 	      stx	[KernelA_D + 0]
     41  f544				   .endif_3
     42  f544				   .endif_1
     51  f544		       85 02		      sta	WSYNC
     52  f546
     53  f546							; sleep 46
     54  f546
      0  f546					      ASSERT_RUNTIME	"_scycles == #0"
      1  f546				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f546  && !(  _scycles == #0  ) }
      2  f546					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     56  f546
     57  f546							; [scanline 2]
     58  f546				   row_2
      0  f546					      jet_spritedata_calc
      1  f546
      2  f546		       a9 09		      lda	#SPRITE_HEIGHT
      3  f548		       c7 85		      dcp	SpriteEnd
      4  f54a		       a4 85		      ldy	SpriteEnd
      5  f54c
      6  f54c
      7  f54c
      8  f54c
      9  f54c		       b9 00 f8 	      lda	Frame0,Y
     10  f54f
     11  f54f		       b0 01		      .byte.b	$b0, $01
     12  f551		       2c		      .byte.b	$2c
     13  f552		       85 1b		      sta	JET_SP
     60  f554
     61  f554							; Black out playfield
     62  f554							; TODO This should be done with playfield pixels, not color.
     63  f554		       a9 00		      lda	#0
     64  f556		       85 08		      sta	COLUPF
     65  f558
     66  f558							; Set stack pointer for PHP use from RamKernelPhpTarget.
     67  f558		       a6 96		      ldx	RamKernelPhpTarget
     68  f55a		       9a		      txs
     69  f55b
     70  f55b							; [[[Nibble VM.]]]
      0  f55b					      sleep	30
      1  f55b				   .CYCLES    SET	30
      2  f55b
      3  f55b				  -	      IF	.CYCLES < 2
      4  f55b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f55b				  -	      ERR
      6  f55b					      ENDIF
      7  f55b
      8  f55b				  -	      IF	.CYCLES & 1
      9  f55b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f55b				  -	      nop	0
     11  f55b				  -	      ELSE
     12  f55b				  -	      bit	VSYNC
     13  f55b				  -	      ENDIF
     14  f55b				  -.CYCLES    SET	.CYCLES - 3
     15  f55b					      ENDIF
     16  f55b
     17  f55b					      REPEAT	.CYCLES / 2
     18  f55b		       ea		      nop
     17  f55b					      REPEND
     18  f55c		       ea		      nop
     17  f55c					      REPEND
     18  f55d		       ea		      nop
     17  f55d					      REPEND
     18  f55e		       ea		      nop
     17  f55e					      REPEND
     18  f55f		       ea		      nop
     17  f55f					      REPEND
     18  f560		       ea		      nop
     17  f560					      REPEND
     18  f561		       ea		      nop
     17  f561					      REPEND
     18  f562		       ea		      nop
     17  f562					      REPEND
     18  f563		       ea		      nop
     17  f563					      REPEND
     18  f564		       ea		      nop
     17  f564					      REPEND
     18  f565		       ea		      nop
     17  f565					      REPEND
     18  f566		       ea		      nop
     17  f566					      REPEND
     18  f567		       ea		      nop
     17  f567					      REPEND
     18  f568		       ea		      nop
     17  f568					      REPEND
     18  f569		       ea		      nop
     19  f56a					      REPEND
     72  f56a
     73  f56a		       a9 04		      lda	#4
     74  f56c		       8d 96 02 	      sta	TIM64T
     75  f56f
     76  f56f							; Load PF1 value
     77  f56f		       a9 a0		      lda	#%10100000
     78  f571		       85 93		      sta	RamPF1Value
     79  f573
     80  f573							; Enable playfield at end of scanline
     81  f573		       a9 42		      lda	#COL_BG
     82  f575		       85 08		      sta	COLUPF
     83  f577
      0  f577					      ASSERT_RUNTIME	"_scycles == #0"
      1  f577				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f577  && !(  _scycles == #0  ) }
      2  f577					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f577
     86  f577							; [scanline 3]
     87  f577				   row_3
      0  f577					      jet_spritedata_calc
      1  f577
      2  f577		       a9 09		      lda	#SPRITE_HEIGHT
      3  f579		       c7 85		      dcp	SpriteEnd
      4  f57b		       a4 85		      ldy	SpriteEnd
      5  f57d
      6  f57d
      7  f57d
      8  f57d
      9  f57d		       b9 00 f8 	      lda	Frame0,Y
     10  f580
     11  f580		       b0 01		      .byte.b	$b0, $01
     12  f582		       2c		      .byte.b	$2c
     13  f583		       85 1b		      sta	JET_SP
     89  f585
     90  f585							; Pre-populate graphics.
     91  f585		       a9 09		      lda	#SPRITE_HEIGHT
      0  f587					      KERNEL_LOAD_PLAYER
      1  f587
      2  f587		       c7 85		      dcp	SpriteEnd
      3  f589		       a0 00		      ldy	#0
      4  f58b
      5  f58b		       b0 01		      .byte.b	$b0, $01
      6  f58d		       2c		      .byte.b	$2c
      7  f58e		       a4 85		      ldy	SpriteEnd
      8  f590
      9  f590		       be 00 f8 	      ldx	Frame0,Y
     93  f593		       86 94		      stx	RamKernelGRP0
      0  f595					      KERNEL_LOAD_PLAYER
      1  f595
      2  f595		       c7 85		      dcp	SpriteEnd
      3  f597		       a0 00		      ldy	#0
      4  f599
      5  f599		       b0 01		      .byte.b	$b0, $01
      6  f59b		       2c		      .byte.b	$2c
      7  f59c		       a4 85		      ldy	SpriteEnd
      8  f59e
      9  f59e		       be 00 f8 	      ldx	Frame0,Y
     95  f5a1		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f5a4		       ad 94 00 	      lda.w	RamKernelGRP0	; Load sprite 2 into A
     97  f5a7
     98  f5a7							; [scanlines 4-5]
     99  f5a7							; We jump immediately into scanlines 4-5, the "gem kernel"
    100  f5a7		       a6 97		      ldx	RamKernelX
    101  f5a9		       a4 98		      ldy	RamKernelY
      0  f5ab					      ASSERT_RUNTIME	"_scycles == #73"
      1  f5ab				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f5ab  && !(  _scycles == #73  ) }
      2  f5ab					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    103  f5ab		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    104  f5ae
    105  f5ae							; [scanline 6]
    106  f5ae
    107  f5ae							; Try to avoid page crossing in jet_spritedata_calc
    108  f5ae							; TODO enforce this with ASSERT_RUNTIME instead?
    109  f5b0		       00 00		      align	16
    110  f5b0
    111  f5b0				   row_after_kernel
    112  f5b0				   row_6
      0  f5b0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f5b0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f5b0  && !(  _scycles == #0  ) }
      2  f5b0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    114  f5b0
    115  f5b0							; Cleanup from the kernel.
    116  f5b0		       a9 00		      lda	#0
    117  f5b2		       85 1e		      sta	EMERALD_MI_ENABLE
    118  f5b4		       85 1c		      sta	EMERALD_SP
    119  f5b6		       85 08		      sta	COLUPF
    120  f5b8
      0  f5b8					      jet_spritedata_calc
      1  f5b8
      2  f5b8		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5ba		       c7 85		      dcp	SpriteEnd
      4  f5bc		       a4 85		      ldy	SpriteEnd
      5  f5be
      6  f5be
      7  f5be
      8  f5be
      9  f5be		       b9 00 f8 	      lda	Frame0,Y
     10  f5c1
     11  f5c1		       b0 01		      .byte.b	$b0, $01
     12  f5c3		       2c		      .byte.b	$2c
     13  f5c4		       85 1b		      sta	JET_SP
    122  f5c6
    123  f5c6							; Idle.
    124  f5c6		       85 02		      sta	WSYNC
    125  f5c8
    126  f5c8							; [scanline 7]
    127  f5c8				   row_7
      0  f5c8					      jet_spritedata_calc
      1  f5c8
      2  f5c8		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5ca		       c7 85		      dcp	SpriteEnd
      4  f5cc		       a4 85		      ldy	SpriteEnd
      5  f5ce
      6  f5ce
      7  f5ce
      8  f5ce
      9  f5ce		       b9 00 f8 	      lda	Frame0,Y
     10  f5d1
     11  f5d1		       b0 01		      .byte.b	$b0, $01
     12  f5d3		       2c		      .byte.b	$2c
     13  f5d4		       85 1b		      sta	JET_SP
    129  f5d6
    130  f5d6		       a9 42		      lda	#COL_BG
    131  f5d8		       85 08		      sta	COLUPF
    132  f5da
    133  f5da							; FRAMESWITCH
    134  f5da		       a9 01		      lda	#01
    135  f5dc		       25 83		      and	FrameCount
    136  f5de		       d0 13		      bne	loadframe2
    137  f5e0
    138  f5e0							; Perform gem loading for Kernel A.
    139  f5e0
    140  f5e0				   loadframe1
      0  f5e0					      ASSERT_RUNTIME	"_scycles == #32"
      1  f5e0				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f5e0  && !(  _scycles == #32  ) }
      2  f5e0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    142  f5e0
    143  f5e0							; Emerald byte setting 1A
    144  f5e0							; ldx #0
    145  f5e0							; lda KERNEL_STORAGE_R,X
    146  f5e0							; sta GEM_00_W
    147  f5e0							; inx
    148  f5e0							; lda KERNEL_STORAGE_R,X
    149  f5e0							; sta GEM_04_W
    150  f5e0							; inx
    151  f5e0							; lda KERNEL_STORAGE_R,X
    152  f5e0							; sta GEM_09_W
    153  f5e0							; inx
    154  f5e0
    155  f5e0		       85 02		      sta	WSYNC
    156  f5e2
    157  f5e2							; [scanline 8]
      0  f5e2					      jet_spritedata_calc
      1  f5e2
      2  f5e2		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5e4		       c7 85		      dcp	SpriteEnd
      4  f5e6		       a4 85		      ldy	SpriteEnd
      5  f5e8
      6  f5e8
      7  f5e8
      8  f5e8
      9  f5e8		       b9 00 f8 	      lda	Frame0,Y
     10  f5eb
     11  f5eb		       b0 01		      .byte.b	$b0, $01
     12  f5ed		       2c		      .byte.b	$2c
     13  f5ee		       85 1b		      sta	JET_SP
    159  f5f0
    160  f5f0							; Emerald byte setting 1B
    161  f5f0							; lda KERNEL_STORAGE_R,X
    162  f5f0							; sta GEM_13_W
    163  f5f0							; inx
    164  f5f0							; lda KERNEL_STORAGE_R,X
    165  f5f0							; sta GEM_17_W
    166  f5f0							; inx
    167  f5f0							; lda KERNEL_STORAGE_R,X
    168  f5f0							; sta GEM_18_W
    169  f5f0							; inx
    170  f5f0							; lda KERNEL_STORAGE_R,X
    171  f5f0							; sta GEM_22_W
    172  f5f0
    173  f5f0		       4c 06 f6 	      jmp	row_8_end
    174  f5f3
    175  f5f3							; Perform gem loading for Kernel B.
    176  f5f3
    177  f5f3				   loadframe2
      0  f5f3					      ASSERT_RUNTIME	"_scycles == #33"
      1  f5f3				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f5f3  && !(  _scycles == #33  ) }
      2  f5f3					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    179  f5f3
    180  f5f3							; Emerald byte setting 2A
    181  f5f3							; ldx #[storage_02 - storage]
    182  f5f3							; lda KERNEL_STORAGE_R,X
    183  f5f3							; sta GEM_02_W
    184  f5f3							; inx
    185  f5f3							; lda KERNEL_STORAGE_R,X
    186  f5f3							; sta GEM_06_W
    187  f5f3							; inx
    188  f5f3							; lda KERNEL_STORAGE_R,X
    189  f5f3							; sta GEM_08_W
    190  f5f3							; inx
    191  f5f3
    192  f5f3		       85 02		      sta	WSYNC
    193  f5f5
    194  f5f5							; [scanline 8]
    195  f5f5				   row_8
      0  f5f5					      jet_spritedata_calc
      1  f5f5
      2  f5f5		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5f7		       c7 85		      dcp	SpriteEnd
      4  f5f9		       a4 85		      ldy	SpriteEnd
      5  f5fb
      6  f5fb
      7  f5fb
      8  f5fb
      9  f5fb		       b9 00 f8 	      lda	Frame0,Y
     10  f5fe
     11  f5fe		       b0 01		      .byte.b	$b0, $01
     12  f600		       2c		      .byte.b	$2c
     13  f601		       85 1b		      sta	JET_SP
    197  f603
    198  f603							; Emerald byte setting 2B
    199  f603							; lda KERNEL_STORAGE_R,X
    200  f603							; sta GEM_11_W
    201  f603							; inx
    202  f603							; lda KERNEL_STORAGE_R,X
    203  f603							; sta GEM_15_W
    204  f603							; inx
    205  f603							; lda KERNEL_STORAGE_R,X
    206  f603							; sta GEM_20_W
    207  f603							; inx
    208  f603							; lda KERNEL_STORAGE_R,X
    209  f603							; sta GEM_24_W
    210  f603
    211  f603		       4c 06 f6 	      jmp	row_8_end
    212  f606
    213  f606							; Common row 8 return.
    214  f606
    215  f606				   row_8_end
    216  f606							; Idle.
    217  f606		       85 02		      sta	WSYNC
    218  f608
    219  f608							; [scanline 8]
    220  f608							; Repeat loop until LoopCount < 0
    221  f608		       c6 82		      dec	LoopCount
    222  f60a		       30 03		      bmi	row_end
    223  f60c		       4c e8 f4 	      jmp	row_start
    224  f60f				   row_end
    225  f60f		       4c b9 f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f612					      include	"kernel_gem.s"
      1  f612							;
      2  f612							; Gem Kernels
      3  f612							;
      4  f612							; Gems are displayed in alternating kernels. This chart shows
      5  f612							; which kernel is responsible for which gem, with missiles denoted.
      6  f612							;
      7  f612							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f612							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f612							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f612							;  #	 0^	 8^	  17^	    26^       gem index
     11  f612							;
     12  f612							; The middle bar indicates where the pattern reverses.
     13  f612							;
     14  f612							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f612							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f612							; requires with a single sprite. By alternating sprites each frame with an...
     17  f612							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f612							; line, except for two. These are instead rendered by the missile, which
     19  f612							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f612
     21  f612							; for copying
     22  f700		       00 00 00 00*	      align	256
     23  f700
     24  f700							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f700							;
     26  f700							; GEM KERNEL A
     27  f700							;
     28  f700
     29  f700				   kernel_1_start subroutine
     30  f700					      rorg	$f100
     31  f700
     32  f700							; Kernel Marker
     33  f700		       0a		      .byte.b	$A
     34  f701
     35  f701				   KernelA_early
     36  f701							; Early code to set next GRP0 image. Value is overwritten
     37  f701		       a9 ff		      lda	#$ff
     38  f703
     39  f703				   KernelA    subroutine
      0  f703					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  f703				   .KERNEL    SET	$A
      2  f703				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  f703					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  f703
     42  f703							; Write Gemini 0A into delayed sprite register
     43  f703		       84 1c		      sty	EMERALD_SP
     44  f705							; Write Player from accumulator. When writing to the other sprite, the
     45  f705							; TIA will copy Gemini 0A into visible sprite register
     46  f705		       85 1b		      sta	JET_SP
     47  f707							; Write Gemini 1A into delayed sprite register
     48  f707		       84 1c		      sty	EMERALD_SP
     49  f709
      0  f709					      sleep	5
      1  f709				   .CYCLES    SET	5
      2  f709
      3  f709				  -	      IF	.CYCLES < 2
      4  f709				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f709				  -	      ERR
      6  f709					      ENDIF
      7  f709
      8  f709					      IF	.CYCLES & 1
      9  f709					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f709		       04 00		      nop	0
     11  f70b				  -	      ELSE
     12  f70b				  -	      bit	VSYNC
     13  f70b					      ENDIF
     14  f70b				   .CYCLES    SET	.CYCLES - 3
     15  f70b					      ENDIF
     16  f70b
     17  f70b					      REPEAT	.CYCLES / 2
     18  f70b		       ea		      nop
     19  f70c					      REPEND
     51  f70c
     52  f70c							; Register config
     53  f70c		       a9 01		      lda	#$01
     54  f70e		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile
     55  f710		       86 26		      stx	VDELP1	; enable delayed sprite
     56  f712
     57  f712							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f712					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  f712				   .KERNEL    SET	$A
      2  f712				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f112  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  f712					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     59  f712				   KernelA_A
     60  f712		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     61  f714				   KernelA_B
      0  f714					      sleep	3
      1  f714				   .CYCLES    SET	3
      2  f714
      3  f714				  -	      IF	.CYCLES < 2
      4  f714				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f714				  -	      ERR
      6  f714					      ENDIF
      7  f714
      8  f714					      IF	.CYCLES & 1
      9  f714					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f714		       04 00		      nop	0
     11  f716				  -	      ELSE
     12  f716				  -	      bit	VSYNC
     13  f716					      ENDIF
     14  f716				   .CYCLES    SET	.CYCLES - 3
     15  f716					      ENDIF
     16  f716
     17  f716				  -	      REPEAT	.CYCLES / 2
     18  f716				  -	      nop
     19  f716					      REPEND
     63  f716				   KernelA_C
     64  f716		       a5 93		      lda	RamPF1Value	; Load PF1 (TODO asymmetrical playfield)
     65  f718
     66  f718
     67  f718							; below has one `php` call (by default: RESET)
     68  f718				   KernelA_D
     69  f718		       84 26		      sty	VDELP1	; Gemini 1A, clear VDELP1. all registers have d0 cleared
     70  f71a				   KernelA_E
     71  f71a		       08		      php		; Reset "medium close" NUSIZ repetition
     72  f71b				   KernelA_F
     73  f71b		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     74  f71d				   KernelA_G
     75  f71d		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     76  f71f							; above has php
     77  f71f
     78  f71f				   KernelA_H
     79  f71f		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     80  f721
     81  f721							; RST4 vvv
     82  f721				   KernelA_I
     83  f721		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     84  f723				   KernelA_J		; unchanging
     85  f723		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     86  f725				   KernelA_K
     87  f725		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     88  f727				   KernelA_L
      0  f727					      sleep	3	; free
      1  f727				   .CYCLES    SET	3
      2  f727
      3  f727				  -	      IF	.CYCLES < 2
      4  f727				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f727				  -	      ERR
      6  f727					      ENDIF
      7  f727
      8  f727					      IF	.CYCLES & 1
      9  f727					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f727		       04 00		      nop	0
     11  f729				  -	      ELSE
     12  f729				  -	      bit	VSYNC
     13  f729					      ENDIF
     14  f729				   .CYCLES    SET	.CYCLES - 3
     15  f729					      ENDIF
     16  f729
     17  f729				  -	      REPEAT	.CYCLES / 2
     18  f729				  -	      nop
     19  f729					      REPEND
     90  f729							; RST4 ^^^
     91  f729
     92  f729				   KernelA_M
     93  f729		       84 1c		      sty	EMERALD_SP	; Gemini 5A
     94  f72b				   KernelA_N
     95  f72b				   KernelA_O
      0  f72b					      sleep	2
      1  f72b				   .CYCLES    SET	2
      2  f72b
      3  f72b				  -	      IF	.CYCLES < 2
      4  f72b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f72b				  -	      ERR
      6  f72b					      ENDIF
      7  f72b
      8  f72b				  -	      IF	.CYCLES & 1
      9  f72b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f72b				  -	      nop	0
     11  f72b				  -	      ELSE
     12  f72b				  -	      bit	VSYNC
     13  f72b				  -	      ENDIF
     14  f72b				  -.CYCLES    SET	.CYCLES - 3
     15  f72b					      ENDIF
     16  f72b
     17  f72b					      REPEAT	.CYCLES / 2
     18  f72b		       ea		      nop
     19  f72c					      REPEND
     97  f72c
     98  f72c							; reset stack pointer
     99  f72c		       68		      pla
    100  f72d
    101  f72d							; End visible line
      0  f72d					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  f72d				   .KERNEL    SET	$A
      2  f72d				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12d  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  f72d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    103  f72d
    104  f72d				   KernelA_branch
    105  f72d		       ad 84 02 	      lda	INTIM
    106  f730		       d0 cf		      bne	KernelA_early
    107  f732
    108  f732		       4c b0 f5 	      jmp	row_after_kernel
    109  f735
    110  f735					      rend
    111  f735				   kernel_1_end
      0  f735					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f735				   .STARTA    SET	kernel_1_start
      2  f735				   .ENDA      SET	kernel_1_end
      3  f735				   .LEN       SET	$40
      4  f735				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f735				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f735				  -	      err
      7  f735					      endif
    113  f735
    114  f735							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f735							;
    116  f735							; GEM KERNEL B
    117  f735							;
    118  f735
    119  f735				   kernel_2_start subroutine
    120  f735					      rorg	$f100
    121  f735
    122  f735							; Kernel Marker
    123  f735		       0b		      .byte.b	$B
    124  f736
    125  f736				   KernelB_early
    126  f736							; Early code to set next GRP0 image. Value is overwritten
    127  f736		       a9 ff		      lda	#$ff
    128  f738
    129  f738				   KernelB    subroutine
      0  f738					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  f738				   .KERNEL    SET	$B
      2  f738				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  f738					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    131  f738
    132  f738							; Write Gemini 0A into delayed sprite register
    133  f738		       84 1c		      sty	EMERALD_SP
    134  f73a							; Write Player from accumulator. When writing to the other sprite, the
    135  f73a							; TIA will copy Gemini 0A into visible sprite register
    136  f73a		       85 1b		      sta	JET_SP
    137  f73c							; Write Gemini 1A into delayed sprite register
    138  f73c		       84 1c		      sty	EMERALD_SP
    139  f73e
    140  f73e							; Register config
    141  f73e		       a9 ff		      lda	#$ff
    142  f740		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    143  f742		       85 26		      sta	VDELP1	; enable delayed sprite
    144  f744
    145  f744							; Load PF1 value into accumulator
    146  f744		       a5 93		      lda	RamPF1Value
    147  f746
    148  f746							; Clear bits in processor status register for drawing.
    149  f746		       18		      clc
    150  f747		       24 92		      bit	RamLowerSixByte
    151  f749
    152  f749							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f749					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  f749				   .KERNEL    SET	$B
      2  f749				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  f749					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    154  f749				   KernelB_A
    155  f749		       85 11		      sta	EMERALD_SP_RESET
    156  f74b				   KernelB_B
    157  f74b				   KernelB_C
    158  f74b				   KernelB_D
      0  f74b					      sleep	4
      1  f74b				   .CYCLES    SET	4
      2  f74b
      3  f74b				  -	      IF	.CYCLES < 2
      4  f74b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f74b				  -	      ERR
      6  f74b					      ENDIF
      7  f74b
      8  f74b				  -	      IF	.CYCLES & 1
      9  f74b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f74b				  -	      nop	0
     11  f74b				  -	      ELSE
     12  f74b				  -	      bit	VSYNC
     13  f74b				  -	      ENDIF
     14  f74b				  -.CYCLES    SET	.CYCLES - 3
     15  f74b					      ENDIF
     16  f74b
     17  f74b					      REPEAT	.CYCLES / 2
     18  f74b		       ea		      nop
     17  f74b					      REPEND
     18  f74c		       ea		      nop
     19  f74d					      REPEND
    160  f74d							; set D0 = 0 without using a register
    161  f74d		       06 26		      asl	VDELP1
    162  f74f				   KernelB_E
    163  f74f		       85 11		      sta	EMERALD_SP_RESET
    164  f751				   KernelB_F
    165  f751		       84 1c		      sty	EMERALD_SP
    166  f753				   KernelB_G
    167  f753		       85 0e		      sta	PF1
    168  f755
    169  f755							; below has one php load (could just be RESET)
    170  f755				   KernelB_H
    171  f755		       08		      php		; Gemini 3B; write
    172  f756				   KernelB_I
    173  f756		       85 11		      sta	EMERALD_SP_RESET
    174  f758				   KernelB_J
    175  f758		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    176  f75a				   KernelB_K
    177  f75a		       85 1e		      sta	EMERALD_MI_ENABLE
    178  f75c				   KernelB_L
    179  f75c		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    180  f75e							; above has one PHP loa
    181  f75e
    182  f75e				   KernelB_M
    183  f75e				   KernelB_N
      0  f75e					      sleep	2
      1  f75e				   .CYCLES    SET	2
      2  f75e
      3  f75e				  -	      IF	.CYCLES < 2
      4  f75e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f75e				  -	      ERR
      6  f75e					      ENDIF
      7  f75e
      8  f75e				  -	      IF	.CYCLES & 1
      9  f75e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f75e				  -	      nop	0
     11  f75e				  -	      ELSE
     12  f75e				  -	      bit	VSYNC
     13  f75e				  -	      ENDIF
     14  f75e				  -.CYCLES    SET	.CYCLES - 3
     15  f75e					      ENDIF
     16  f75e
     17  f75e					      REPEAT	.CYCLES / 2
     18  f75e		       ea		      nop
     19  f75f					      REPEND
    185  f75f
    186  f75f							; reset stack pointer
    187  f75f		       68		      pla
    188  f760
    189  f760							; End visible line
      0  f760					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f760				   .KERNEL    SET	$B
      2  f760				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12b  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  f760					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    191  f760
    192  f760				   KernelB_branch
    193  f760		       ad 84 02 	      lda	INTIM
    194  f763		       d0 d1		      bne	KernelB_early
    195  f765		       4c b0 f5 	      jmp	row_after_kernel
    196  f768
    197  f768					      rend
    198  f768				   kernel_2_end
      0  f768					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f768				   .STARTA    SET	kernel_2_start
      2  f768				   .ENDA      SET	kernel_2_end
      3  f768				   .LEN       SET	$40
      4  f768				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f768				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f768				  -	      err
      7  f768					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f768					      include	"data_sprites.s"
      1  f800		       00 00 00 00*	      align	256
      2  f800
      3  f800							; Player
      4  f800				   Frame0
      5  f800		       00		      .byte.b	#%00000000
      6  f801		       60		      .byte.b	#%01100000
      7  f802		       60		      .byte.b	#%01100000
      8  f803		       60		      .byte.b	#%01100000
      9  f804		       c0		      .byte.b	#%11000000
     10  f805		       c0		      .byte.b	#%11000000
     11  f806		       f0		      .byte.b	#%11110000
     12  f807		       c0		      .byte.b	#%11000000
     13  f808		       c0		      .byte.b	#%11000000
     14  f809		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f80a					      include	"data_levels.s"
      1  f810		       00 00 00 00*	      align	8
      2  f810							; first bit of byte 2 & 3 are unused for simplicity
      3  f810
      4  f810				   level_00
      5  f810		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f814
      7  f814				   level_01
      8  f814		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f818		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f81c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f820		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f824		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f828		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f82c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f830		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f834		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f838		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f83c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f840		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f844		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f848		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f84c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f850		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f854		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f858		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f85c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f860		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f864		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f868		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f86c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f870		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f874		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f878		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f87c				   level_01_end
     35  f87c
     36  f87c
     37  f87c				   shard_map
     38  f87c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  f87d				   shard_map_end
------- FILE main.s
    126  f87d
    127  fffc					      org	$fffc
    128  fffc		       09 f2		      .word.w	Start
    129  fffe		       09 f2		      .word.w	Start
