------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       endm
      6  10000 ????				       mac	nibble_if
      7  10000 ????				       ror
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       endm
     19  10000 ????
     20  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     21  10000 ????				       mac	assert_runtime
     22  10000 ????			    .COND      SET	{1}
     23  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     24  10000 ????				       endm
     25  10000 ????
     26  10000 ????
     27  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     28  10000 ????				       mac	assert_runtime_kernel
     29  10000 ????			    .KERNEL    SET	{1}
     30  10000 ????			    .COND      SET	{2}
     31  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
     32  10000 ????				       endm
     33  10000 ????
     34  10000 ????						; Static assertions for size
     35  10000 ????				       mac	assert_size
     36  10000 ????			    .STARTA    SET	{1}
     37  10000 ????			    .ENDA      SET	{2}
     38  10000 ????			    .LEN       SET	{3}
     39  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     40  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     41  10000 ????				       err
     42  10000 ????				       endif
     43  10000 ????				       endm
     44  10000 ????				       mac	assert_size_exact
     45  10000 ????			    .STARTA    SET	{1}
     46  10000 ????			    .ENDA      SET	{2}
     47  10000 ????			    .LEN       SET	{3}
     48  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     49  10000 ????				       echo	""
     50  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     51  10000 ????				       err
     52  10000 ????				       endif
     53  10000 ????				       endm
     54  10000 ????
     55  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     59  0000 ????
     60  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U0093 ????				      seg.u	Variables
      2 U0093 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   KERNEL_TEMP_A byte.b
     31 U0090
     32 U0090		       00	   RamPF1Value byte.b
     33 U0091		       00	   RamKernelGRP0 byte.b		; temp
     34 U0092		       00	   RamStackBkp byte.b
     35 U0093
     36 U0093							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     37 U0093
     38 U0093		       00 10	   ROW_COUNT  =	16
     39 U0093
     40 U0093		       00 02	   SIGNAL_LINE =	$02
     41 U0093
     42 U0093							; RAM+ memory map
     43 U0093		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     44 U0093		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     45 U0093		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     46 U0093
     47 U0093		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     48 U0093		       f1 40	   RAMP_STORAGE_R =	$f140
     49 U0093
     50 U0093							; NUSIZ values
     51 U0093
     52 U0093		       00 13	   THREE_COPIES =	%00010011
     53 U0093
     54 U0093							; Colors
     55 U0093
     56 U0093		       00 42	   COL_BG     equ	$42
     57 U0093		       00 cc	   COL_EMERALD equ	$CC
     58 U0093		       00 cc	   COL_EMERALD_2 equ	$CC
     59 U0093
     60 U0093							; HMOVE values for missiles
     61 U0093
     62 U0093		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     63 U0093		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     64 U0093
     65 U0093		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     66 U0093		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     67 U0093
     68 U0093							; Sprite details
     69 U0093
     70 U0093		       00 09	   SPRITE_HEIGHT equ	9
     71 U0093
     72 U0093		       00 07	   EMERALD_SP_COLOR equ	COLUP1
     73 U0093		       00 1c	   EMERALD_SP equ	GRP1
     74 U0093		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
     75 U0093		       00 11	   EMERALD_SP_RESET equ	RESP1
     76 U0093		       00 13	   EMERALD_MI_RESET equ	RESM1
     77 U0093		       00 21	   EMERALD_SP_HMOVE equ	HMP1
     78 U0093		       00 23	   EMERALD_MI_HMOVE equ	HMM1
     79 U0093		       00 05	   EMERALD_COPIES equ	NUSIZ1
     80 U0093
     81 U0093		       00 1b	   JET_SP     equ	GRP0
     82 U0093		       00 10	   JET_SP_RESET equ	RESP0
     83 U0093		       00 20	   JET_SP_HMOVE equ	HMP0
     84 U0093		       00 06	   JET_SP_COLOR equ	COLUP0
     85 U0093
     86 U0093							; Spriteend is HEIGHT_OFFSET - YPos
     87 U0093		       00 c8	   HEIGHT_OFFSET equ	200
     88 U0093
     89 U0093							; Compared with YPos
     90 U0093		       00 3e	   FLOOR_OFFSET equ	62
     91 U0093		       00 be	   CEILING_OFFSET equ	190
     92 U0093
     93 U0093							; Starting player position
     94 U0093		       00 3e	   YPosStart  equ	62
     95 U0093		       00 37	   XPosStart  equ	55
     96 U0093
     97 U0093							; Top left corner
     98 U0093							; YPosStart equ 190
     99 U0093							; XPosStart equ 28
    100 U0093
    101 U0093							; Tick (every 8 frames)
    102 U0093		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     62 U0093
     63 U0093							; Bank 1
     64  e000 ????				      seg	CodeBank1
     65  d000					      org	$D000
     66  d000					      rorg	$F000
     67  d000		       00	   BANK1      byte.b
     68  d200					      org	$d200
     69  d200					      rorg	$d200
     70  d200				   Bank1Start
     71  d200		       ad fa ff 	      lda	$fffa
     72  d203		       ea		      nop
     73  d204		       ea		      nop
     74  d205		       ea		      nop
     75  d206
     76  dffc					      org	$dffc
     77  dffc					      rorg	$fffc
     78  dffc		       00 d2		      .word.w	Bank1Start
     79  dffe		       00 d2		      .word.w	Bank1Start
     80  e000
     81  e000							; Bank 2
     82  f000 ????				      seg	CodeBank2
     83  e000					      org	$E000
     84  e000					      rorg	$F000
     85  e000		       00	   BANK2      byte.b
     86  e200					      org	$e200
     87  e200					      rorg	$f200
     88  e200				   Bank2Start
     89  e200		       ad fa ff 	      lda	$fffa
     90  e203		       ea		      nop
     91  e204		       ea		      nop
     92  e205		       ea		      nop
     93  e206
     94  effc					      org	$effc
     95  effc					      rorg	$fffc
     96  effc		       00 f2		      .word.w	Bank2Start
     97  effe		       00 f2		      .word.w	Bank2Start
     98  f000
     99  f000							; Bank 3
    100  10000 ????				       seg	CodeBank3
    101  f000					      org	$F000
    102  f000					      rorg	$F000
    103  f000		       00	   BANK3      byte.b
    104  f200					      org	$f200
    105  f200					      rorg	$f200
    106  f200				   Bank3Start
    107  f200		       ad fa ff 	      lda	$fffa
    108  f203		       ea		      nop
    109  f204		       ea		      nop
    110  f205		       ea		      nop
    111  f206		       4c 09 f2 	      jmp	Start
    112  f209
    113  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      5  f214
      6  f214				   InitSetup
      7  f214		       a9 00		      lda	#0
      8  f216		       85 83		      sta	FrameCount
      9  f218
     10  f218							; P0 has three copies
     11  f218		       a9 13		      lda	#%00010011
     12  f21a		       85 05		      sta	EMERALD_COPIES
     13  f21c
     14  f21c		       a9 00		      lda	#$00
     15  f21e		       85 09		      sta	COLUBK
     16  f220		       a9 01		      lda	#%00000001
     17  f222		       85 0a		      sta	CTRLPF	; reflect playfield
     18  f224
     19  f224							; Disable VDEL
     20  f224		       a9 00		      lda	#0
     21  f226		       85 25		      sta	VDELP0
     22  f228		       85 26		      sta	VDELP1
     23  f22a
     24  f22a
     25  f22a							; Player 0
     26  f22a		       a2 cc		      ldx	#COL_EMERALD
     27  f22c		       86 07		      stx	EMERALD_SP_COLOR
     28  f22e
     29  f22e							; Player 1
     30  f22e		       a9 0f		      lda	#$0f
     31  f230		       85 06		      sta	JET_SP_COLOR
     32  f232		       a9 00		      lda	#$00
     33  f234		       85 1b		      sta	JET_SP
     34  f236
     35  f236							; Positions
     36  f236		       a9 3e		      lda	#YPosStart
     37  f238		       85 89		      sta	YPos
     38  f23a		       a9 37		      lda	#XPosStart
     39  f23c		       85 86		      sta	XPos
     40  f23e		       a9 00		      lda	#0
     41  f240		       85 87		      sta	Speed1
     42  f242		       85 88		      sta	Speed2
     43  f244		       85 8a		      sta	YPos2
     44  f246
     45  f246		       a9 00		      lda	#0
     46  f248		       85 8e		      sta	ROW_DEMO_INDEX
     47  f24a
     48  f24a							; Start with vertical sync (to reset frame)
     49  f24a		       4c 75 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f24d					      include	"kernel_loader.s"
      1  f24d							; Copies the gem kernels to RAM
      2  f24d
      3  f24d							; Copy Kernel A to CBSRAM
      4  f24d				   LoadKernelA subroutine
      5  f24d		       a0 34		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f24f				   .loop
      7  f24f		       b9 00 f6 	      lda	kernel_1_start,Y
      8  f252		       99 00 10 	      sta	$1000,Y
      9  f255		       88		      dey
     10  f256		       d0 f7		      bne	.loop
     11  f258		       ad 00 f6 	      lda	kernel_1_start
     12  f25b		       8d 00 10 	      sta	$1000
     13  f25e		       60		      rts
     14  f25f
     15  f25f							; Copy Kernel B to CBSRAM
     16  f25f				   LoadKernelB subroutine
     17  f25f		       a0 38		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f261				   .loop
     19  f261		       b9 35 f6 	      lda	kernel_2_start,Y
     20  f264		       99 00 10 	      sta	$1000,Y
     21  f267		       88		      dey
     22  f268		       d0 f7		      bne	.loop
     23  f26a		       ad 35 f6 	      lda	kernel_2_start
     24  f26d		       8d 00 10 	      sta	$1000
     25  f270		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f271					      include	"nibble.s"
      1  f271				   NIBBLE_gem_kernel_OPCODE_1
      2  f271		       a9 c6		      lda	#%011000110
      0  f273					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_1, ., 2
      1  f273				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_1
      2  f273				   .ENDA      SET	.
      3  f273				   .LEN       SET	2
      4  f273				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f273				  -	      echo	""
      6  f273				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f273				  -	      err
      8  f273					      endif
      4  f273				   NIBBLE_gem_kernel_OPCODE_2
      5  f273		       a9 00		      lda	#%000000000
      0  f275					      ASSERT_SIZE_EXACT	NIBBLE_gem_kernel_OPCODE_2, ., 2
      1  f275				   .STARTA    SET	NIBBLE_gem_kernel_OPCODE_2
      2  f275				   .ENDA      SET	.
      3  f275				   .LEN       SET	2
      4  f275				  -	      if	[[.ENDA - .STARTA] != .LEN]
      5  f275				  -	      echo	""
      6  f275				  -	      echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
      7  f275				  -	      err
      8  f275					      endif
      7  f275
      8  f275					      MAC	nibble_gem_kernel
      9  f275				   .if_1
     10  f275					      asl
     11  f275					      bcc	.else_1
     12  f275					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 0]
     13  f275					      stx	[[KernelA_TEST - $100] + 0]
     14  f275					      ldx	[NIBBLE_gem_kernel_OPCODE_1 + 1]
     15  f275					      stx	[[KernelA_TEST - $100] + 1]
     16  f275					      jmp	.endif_1
     17  f275				   .else_1
     18  f275					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 0]
     19  f275					      stx	[[KernelA_TEST - $100] + 0]
     20  f275					      ldx	[NIBBLE_gem_kernel_OPCODE_2 + 1]
     21  f275					      stx	[[KernelA_TEST - $100] + 1]
     22  f275				   .endif_1
     23  f275					      ENDM
     24  f275
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f275					      include	"game_frame.s"
      1  f275							; Frame loop, including calling out to other kernels.
      2  f275
      3  f275							; Vertical Sync
      4  f275				   VerticalSync subroutine
      0  f275					      VERTICAL_SYNC
      1  f275		       a9 0e		      lda	#%1110
      2  f277		       85 02	   .VSLP1     sta	WSYNC
      3  f279		       85 00		      sta	VSYNC
      4  f27b		       4a		      lsr
      5  f27c		       d0 f9		      bne	.VSLP1
      6  f27e
      7  f27e				   FrameStart subroutine
      0  f27e					      ASSERT_RUNTIME	"_scan == #0"
      1  f27e				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f27e  && !(  _scan == #0  ) }
      2  f27e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      9  f27e
     10  f27e				   VerticalBlank subroutine
      0  f27e					      TIMER_SETUP	37
      1  f27e				   .lines     SET	37
      2  f27e		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f280		       85 02		      sta	WSYNC
      4  f282		       8d 96 02 	      sta	TIM64T
     12  f285
     13  f285							; Scanline counter
     14  f285		       a9 10		      lda	#ROW_COUNT
     15  f287		       85 82		      sta	LoopCount
     16  f289
     17  f289							; Frame counter
     18  f289		       e6 83		      inc	FrameCount
     19  f28b
     20  f28b							; Skip every 8 frames for increasing demo index
     21  f28b		       a5 83		      lda	FrameCount
     22  f28d		       29 07		      and	#FrameSkip
     23  f28f		       c9 07		      cmp	#FrameSkip
     24  f291		       d0 0d		      bne	.next_next_thing
     25  f293
     26  f293		       18		      clc
     27  f294		       a5 8e		      lda	ROW_DEMO_INDEX
     28  f296		       69 04		      adc	#4
     29  f298		       c9 68		      cmp	#[level_01_end - level_01]
     30  f29a		       90 02		      bcc	.next_thing_local
     31  f29c		       a9 00		      lda	#0
     32  f29e				   .next_thing_local
     33  f29e		       85 8e		      sta	ROW_DEMO_INDEX
     34  f2a0				   .next_next_thing
     35  f2a0		       85 02		      sta	WSYNC
     36  f2a2
     37  f2a2							; Positioning
      0  f2a2					      SLEEP	40
      1  f2a2				   .CYCLES    SET	40
      2  f2a2
      3  f2a2				  -	      IF	.CYCLES < 2
      4  f2a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2a2				  -	      ERR
      6  f2a2					      ENDIF
      7  f2a2
      8  f2a2				  -	      IF	.CYCLES & 1
      9  f2a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2a2				  -	      nop	0
     11  f2a2				  -	      ELSE
     12  f2a2				  -	      bit	VSYNC
     13  f2a2				  -	      ENDIF
     14  f2a2				  -.CYCLES    SET	.CYCLES - 3
     15  f2a2					      ENDIF
     16  f2a2
     17  f2a2					      REPEAT	.CYCLES / 2
     18  f2a2		       ea		      nop
     17  f2a2					      REPEND
     18  f2a3		       ea		      nop
     17  f2a3					      REPEND
     18  f2a4		       ea		      nop
     17  f2a4					      REPEND
     18  f2a5		       ea		      nop
     17  f2a5					      REPEND
     18  f2a6		       ea		      nop
     17  f2a6					      REPEND
     18  f2a7		       ea		      nop
     17  f2a7					      REPEND
     18  f2a8		       ea		      nop
     17  f2a8					      REPEND
     18  f2a9		       ea		      nop
     17  f2a9					      REPEND
     18  f2aa		       ea		      nop
     17  f2aa					      REPEND
     18  f2ab		       ea		      nop
     17  f2ab					      REPEND
     18  f2ac		       ea		      nop
     17  f2ac					      REPEND
     18  f2ad		       ea		      nop
     17  f2ad					      REPEND
     18  f2ae		       ea		      nop
     17  f2ae					      REPEND
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     19  f2b6					      REPEND
     39  f2b6		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     40  f2b8		       85 02		      sta	WSYNC
     41  f2ba
     42  f2ba							; Misc
     43  f2ba		       a9 00		      lda	#00
     44  f2bc		       85 1e		      sta	EMERALD_MI_ENABLE
     45  f2be
     46  f2be							; Assign dervied SpriteEnd value
     47  f2be		       18		      clc
     48  f2bf		       a9 c8		      lda	#HEIGHT_OFFSET
     49  f2c1		       e5 89		      sbc	YPos
     50  f2c3		       85 85		      sta	SpriteEnd
     51  f2c5
     52  f2c5							; Player 1
     53  f2c5		       a5 86		      lda	XPos
     54  f2c7		       a2 00		      ldx	#0
     55  f2c9		       20 f3 f3 	      jsr	SetHorizPos
     56  f2cc
     57  f2cc				   frame_setup subroutine
     58  f2cc							; Kernel A or B
     59  f2cc		       a9 01		      lda	#01
     60  f2ce		       25 83		      and	FrameCount
     61  f2d0		       d0 24		      bne	frame_setup_kernel_b
     62  f2d2
     63  f2d2				   frame_setup_kernel_a subroutine
     64  f2d2							; Load kernel into CBSRAM
     65  f2d2		       20 4d f2 	      jsr	LoadKernelA
     66  f2d5
     67  f2d5							; Move missile
     68  f2d5		       85 02		      sta	WSYNC
      0  f2d7					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f2d7				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f2d7
      3  f2d7				  -	      IF	.CYCLES < 2
      4  f2d7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2d7				  -	      ERR
      6  f2d7					      ENDIF
      7  f2d7
      8  f2d7				  -	      IF	.CYCLES & 1
      9  f2d7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2d7				  -	      nop	0
     11  f2d7				  -	      ELSE
     12  f2d7				  -	      bit	VSYNC
     13  f2d7				  -	      ENDIF
     14  f2d7				  -.CYCLES    SET	.CYCLES - 3
     15  f2d7					      ENDIF
     16  f2d7
     17  f2d7					      REPEAT	.CYCLES / 2
     18  f2d7		       ea		      nop
     17  f2d7					      REPEND
     18  f2d8		       ea		      nop
     17  f2d8					      REPEND
     18  f2d9		       ea		      nop
     17  f2d9					      REPEND
     18  f2da		       ea		      nop
     17  f2da					      REPEND
     18  f2db		       ea		      nop
     17  f2db					      REPEND
     18  f2dc		       ea		      nop
     17  f2dc					      REPEND
     18  f2dd		       ea		      nop
     17  f2dd					      REPEND
     18  f2de		       ea		      nop
     17  f2de					      REPEND
     18  f2df		       ea		      nop
     17  f2df					      REPEND
     18  f2e0		       ea		      nop
     17  f2e0					      REPEND
     18  f2e1		       ea		      nop
     17  f2e1					      REPEND
     18  f2e2		       ea		      nop
     17  f2e2					      REPEND
     18  f2e3		       ea		      nop
     17  f2e3					      REPEND
     18  f2e4		       ea		      nop
     19  f2e5					      REPEND
     70  f2e5		       85 13		      sta	EMERALD_MI_RESET
     71  f2e7		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     72  f2e9		       85 23		      sta	EMERALD_MI_HMOVE
     73  f2eb
     74  f2eb							; DEBUG: Set per-kernel color
     75  f2eb		       a2 cc		      ldx	#COL_EMERALD
     76  f2ed		       86 07		      stx	EMERALD_SP_COLOR
     77  f2ef
     78  f2ef							; HACK this doesn't belong here
     79  f2ef		       a9 ff		      lda	#%11111111
     80  f2f1		       85 0c		      sta	REFP1
     81  f2f3
     82  f2f3		       4c 23 f3 	      jmp	frame_setup_complete
     83  f2f6
     84  f2f6				   frame_setup_kernel_b subroutine
     85  f2f6							; Load kernel into CBSRAM
     86  f2f6		       20 5f f2 	      jsr	LoadKernelB
     87  f2f9
     88  f2f9							; Move missile
     89  f2f9		       85 02		      sta	WSYNC
      0  f2fb					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f2fb				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f2fb
      3  f2fb				  -	      IF	.CYCLES < 2
      4  f2fb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2fb				  -	      ERR
      6  f2fb					      ENDIF
      7  f2fb
      8  f2fb					      IF	.CYCLES & 1
      9  f2fb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2fb		       04 00		      nop	0
     11  f2fd				  -	      ELSE
     12  f2fd				  -	      bit	VSYNC
     13  f2fd					      ENDIF
     14  f2fd				   .CYCLES    SET	.CYCLES - 3
     15  f2fd					      ENDIF
     16  f2fd
     17  f2fd					      REPEAT	.CYCLES / 2
     18  f2fd		       ea		      nop
     17  f2fd					      REPEND
     18  f2fe		       ea		      nop
     17  f2fe					      REPEND
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     19  f315					      REPEND
     91  f315		       85 13		      sta	EMERALD_MI_RESET
     92  f317		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     93  f319		       85 23		      sta	EMERALD_MI_HMOVE
     94  f31b
     95  f31b							; DEBUG: Set per-kernel color
     96  f31b		       a2 e0		      ldx	#$e0
     97  f31d		       86 07		      stx	EMERALD_SP_COLOR
     98  f31f
     99  f31f		       a9 00		      lda	#0
    100  f321		       85 0c		      sta	REFP1
    101  f323
    102  f323				   frame_setup_complete
    103  f323
    104  f323		       ad 7c f7 	      lda	shard_map
    105  f326		       a0 01		      ldy	#1	; gemini counter, starting at 1
    106  f328				   gemini_builder
    107  f328		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    108  f32a		       d0 00		      bne	.no_vd0
    109  f32c				   .no_vd0
    110  f32c
    111  f32c							; Perform kernel Nibble calculations
    112  f32c							; lda #$00
    113  f32c							; NIBBLE_START_KERNEL gem_kernel, 40
    114  f32c							;     ldx level_00
    115  f32c							;     cpx #%11000000
    116  f32c							;     NIBBLE_IF cs
    117  f32c							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%011000110
    118  f32c							;     NIBBLE_ELSE
    119  f32c							;	   NIBBLE_WRITE_OPCODE [KernelA_TEST - $100], 2, lda #%000000000
    120  f32c							;     NIBBLE_END_IF
    121  f32c							; NIBBLE_END_KERNEL
    122  f32c							; sta KERNEL_TEMP_A
    123  f32c
    124  f32c				   VerticalBlankEnd
    125  f32c							; Wait until the end of Vertical blank.
      0  f32c					      TIMER_WAIT
      1  f32c				   .waittimer
      2  f32c		       ad 84 02 	      lda	INTIM
      3  f32f		       d0 fb		      bne	.waittimer
      4  f331		       85 02		      sta	WSYNC
      0  f333					      ASSERT_RUNTIME	"_scan == #37"
      1  f333				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f333  && !(  _scan == #37  ) }
      2  f333					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    128  f333
    129  f333							; Save stack pointer
    130  f333		       ba		      tsx
    131  f334		       86 92		      stx	RamStackBkp
    132  f336
    133  f336							; Start rendering the kernel.
    134  f336		       4c 07 f4 	      jmp	KernelBorder
    135  f339
    136  f339				   FrameEnd   subroutine
    137  f339		       85 02		      sta	WSYNC
    138  f33b
    139  f33b							; Blank all background colors.
    140  f33b		       a9 00		      lda	#0
    141  f33d		       85 08		      sta	COLUPF
    142  f33f		       85 0f		      sta	PF2
    143  f341		       85 0e		      sta	PF1
    144  f343		       85 1c		      sta	EMERALD_SP
    145  f345
    146  f345							; Guide lines (2x)
    147  f345		       a9 02		      lda	#SIGNAL_LINE
    148  f347		       85 09		      sta	COLUBK
    149  f349					      REPEAT	6
    150  f349		       85 02		      sta	WSYNC
    149  f349					      REPEND
    150  f34b		       85 02		      sta	WSYNC
    149  f34b					      REPEND
    150  f34d		       85 02		      sta	WSYNC
    149  f34d					      REPEND
    150  f34f		       85 02		      sta	WSYNC
    149  f34f					      REPEND
    150  f351		       85 02		      sta	WSYNC
    149  f351					      REPEND
    150  f353		       85 02		      sta	WSYNC
    151  f355					      REPEND
    152  f355		       a9 00		      lda	#$00
    153  f357		       85 09		      sta	COLUBK
    154  f359
    155  f359							; Restore stack pointer
    156  f359		       a6 92		      ldx	RamStackBkp
    157  f35b		       9a		      txs
    158  f35c
    159  f35c							; Display the rest of the blank screen.
      0  f35c					      TIMER_SETUP	25
      1  f35c				   .lines     SET	25
      2  f35c		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f35e		       85 02		      sta	WSYNC
      4  f360		       8d 96 02 	      sta	TIM64T
    161  f363		       85 02		      sta	WSYNC
      0  f365					      TIMER_WAIT
      1  f365				   .waittimer
      2  f365		       ad 84 02 	      lda	INTIM
      3  f368		       d0 fb		      bne	.waittimer
      4  f36a		       85 02		      sta	WSYNC
      0  f36c					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f36c				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f36c  && !(  _scan == (#37 + #192)  ) }
      2  f36c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    164  f36c
    165  f36c							; Overscan
    166  f36c				   Overscan   subroutine
    167  f36c		       85 01		      sta	VBLANK
      0  f36e					      TIMER_SETUP	29
      1  f36e				   .lines     SET	29
      2  f36e		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f370		       85 02		      sta	WSYNC
      4  f372		       8d 96 02 	      sta	TIM64T
    169  f375
    170  f375		       20 85 f3 	      jsr	MoveJoystick
    171  f378		       20 bc f3 	      jsr	SpeedCalculation
    172  f37b
      0  f37b					      TIMER_WAIT
      1  f37b				   .waittimer
      2  f37b		       ad 84 02 	      lda	INTIM
      3  f37e		       d0 fb		      bne	.waittimer
      4  f380		       85 02		      sta	WSYNC
      0  f382					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f382				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f382  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f382					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    175  f382
    176  f382		       4c 75 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f385					      include	"game_input.s"
      1  f385							; Handles input checking. Called from overscan.
      2  f385
      3  f385							; Read joystick movement and apply to object 0
      4  f385				   MoveJoystick
      5  f385							; Move vertically
      6  f385							; (up and down are actually reversed since ypos starts at bottom)
      7  f385							;     ldx YPos
      8  f385		       a9 10		      lda	#%00010000	;Up?
      9  f387		       2c 80 02 	      bit	SWCHA
     10  f38a		       d0 0d		      bne	SkipMoveUp
     11  f38c
     12  f38c		       18		      clc
     13  f38d		       a5 88		      lda	Speed2
     14  f38f		       69 0c		      adc	#12
     15  f391		       85 88		      sta	Speed2
     16  f393		       a5 87		      lda	Speed1
     17  f395		       69 00		      adc	#00
     18  f397		       85 87		      sta	Speed1
     19  f399
     20  f399				   SkipMoveUp
     21  f399		       a6 86		      ldx	XPos
     22  f39b
     23  f39b							; Only check left/right on odd frames;
     24  f39b							; TODO make this just a fractional speed
     25  f39b							; rather than dropping frames
     26  f39b		       a9 01		      lda	#01
     27  f39d		       25 83		      and	FrameCount
     28  f39f		       d0 18		      bne	SkipMoveRight
     29  f3a1
     30  f3a1
     31  f3a1							; Move horizontally
     32  f3a1		       a9 40		      lda	#%01000000	;Left?
     33  f3a3		       2c 80 02 	      bit	SWCHA
     34  f3a6		       d0 05		      bne	SkipMoveLeft
     35  f3a8		       e0 1d		      cpx	#29
     36  f3aa		       90 01		      bcc	SkipMoveLeft
     37  f3ac		       ca		      dex
     38  f3ad
     39  f3ad							; Reflect
     40  f3ad							;     lda #$ff
     41  f3ad							;     sta REFP0
     42  f3ad				   SkipMoveLeft
     43  f3ad		       a9 80		      lda	#%10000000	;Right?
     44  f3af		       2c 80 02 	      bit	SWCHA
     45  f3b2		       d0 05		      bne	SkipMoveRight
     46  f3b4		       e0 80		      cpx	#128
     47  f3b6		       b0 01		      bcs	SkipMoveRight
     48  f3b8		       e8		      inx
     49  f3b9
     50  f3b9							; Reflect
     51  f3b9							;     lda #$0
     52  f3b9							;     sta REFP0
     53  f3b9				   SkipMoveRight
     54  f3b9		       86 86		      stx	XPos
     55  f3bb		       60		      rts
     56  f3bc
     57  f3bc
     58  f3bc				   SpeedCalculation
     59  f3bc		       38		      sec
     60  f3bd		       a5 88		      lda	Speed2
     61  f3bf		       e9 07		      sbc	#7
     62  f3c1		       85 88		      sta	Speed2
     63  f3c3		       a5 87		      lda	Speed1
     64  f3c5		       e9 00		      sbc	#0
     65  f3c7		       85 87		      sta	Speed1
     66  f3c9
     67  f3c9		       18		      clc
     68  f3ca		       a5 8a		      lda	YPos2
     69  f3cc		       65 88		      adc	Speed2
     70  f3ce		       85 8a		      sta	YPos2
     71  f3d0		       a5 89		      lda	YPos
     72  f3d2		       65 87		      adc	Speed1
     73  f3d4		       85 89		      sta	YPos
     74  f3d6
     75  f3d6		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f3d8		       b0 0a		      bcs	NewThing2
     77  f3da
     78  f3da							; Reset to floor
     79  f3da		       a9 3e		      lda	#FLOOR_OFFSET
     80  f3dc		       85 89		      sta	YPos
     81  f3de		       a9 00		      lda	#0
     82  f3e0		       85 87		      sta	Speed1
     83  f3e2		       85 88		      sta	Speed2
     84  f3e4				   NewThing2
     85  f3e4
     86  f3e4		       c9 be		      cmp	#CEILING_OFFSET
     87  f3e6		       90 0a		      bcc	.next
     88  f3e8
     89  f3e8							; Reset to ceiling
     90  f3e8		       a9 be		      lda	#CEILING_OFFSET
     91  f3ea		       85 89		      sta	YPos
     92  f3ec		       a9 00		      lda	#0
     93  f3ee		       85 87		      sta	Speed1
     94  f3f0		       85 88		      sta	Speed2
     95  f3f2				   .next
     96  f3f2		       60		      rts
     97  f3f3
     98  f3f3
     99  f3f3
    100  f3f3							; Subroutine
    101  f3f3				   SetHorizPos
    102  f3f3		       85 02		      sta	WSYNC	; start a new line
    103  f3f5		       24 00		      bit	0	; waste 3 cycles
    104  f3f7		       38		      sec		; set carry flag
    105  f3f8				   DivideLoop
    106  f3f8		       e9 0f		      sbc	#15	; subtract 15
    107  f3fa		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f3fc		       49 07		      eor	#7	; calculate fine offset
    109  f3fe		       0a		      asl
    110  f3ff		       0a		      asl
    111  f400		       0a		      asl
    112  f401		       0a		      asl
    113  f402		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f404		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f406		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f407					      include	"kernel_border.s"
      1  f407							; Visible Kernel
      2  f407
      3  f407				   KernelBorder subroutine
      4  f407		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f409
      6  f409							; First HMOVE
      7  f409		       85 2a		      sta	HMOVE
      8  f40b
      9  f40b							; Border top
     10  f40b		       a9 00		      lda	#0
     11  f40d		       85 08		      sta	COLUPF
     12  f40f		       85 0e		      sta	PF1
     13  f411		       85 0f		      sta	PF2
     14  f413		       a9 02		      lda	#SIGNAL_LINE
     15  f415		       85 09		      sta	COLUBK
     16  f417
     17  f417					      REPEAT	6
     18  f417		       85 02		      sta	WSYNC
     17  f417					      REPEND
     18  f419		       85 02		      sta	WSYNC
     17  f419					      REPEND
     18  f41b		       85 02		      sta	WSYNC
     17  f41b					      REPEND
     18  f41d		       85 02		      sta	WSYNC
     17  f41d					      REPEND
     18  f41f		       85 02		      sta	WSYNC
     17  f41f					      REPEND
     18  f421		       85 02		      sta	WSYNC
     19  f423					      REPEND
     20  f423
     21  f423		       a9 00		      lda	#0
     22  f425		       85 09		      sta	COLUBK
     23  f427		       85 02		      sta	WSYNC
     24  f429
     25  f429							; Start top border
     26  f429				   border_top
     27  f429							; Make the playfield solid.
     28  f429		       a9 3f		      lda	#%00111111
     29  f42b		       85 0e		      sta	PF1
     30  f42d		       a9 ff		      lda	#%11111111
     31  f42f		       85 0f		      sta	PF2
     32  f431
     33  f431		       a9 42		      lda	#COL_BG
     34  f433		       a0 00		      ldy	#0
     35  f435
     36  f435							; X_XXXX_XX
     37  f435							; Commented lines removed to save on space.
     38  f435		       85 08		      sta	COLUPF
     39  f437		       85 02		      sta	WSYNC
     40  f439		       84 08		      sty	COLUPF
     41  f43b		       85 02		      sta	WSYNC
     42  f43d		       85 08		      sta	COLUPF
     43  f43f		       85 02		      sta	WSYNC
     44  f441							; sta COLUPF
     45  f441		       85 02		      sta	WSYNC
     46  f443							; sta COLUPF
     47  f443		       85 02		      sta	WSYNC
     48  f445		       84 08		      sty	COLUPF
     49  f447		       85 02		      sta	WSYNC
     50  f449		       85 08		      sta	COLUPF
     51  f44b
     52  f44b		       85 02		      sta	WSYNC
     53  f44d							; sta COLUPF
     54  f44d
     55  f44d				   PlayArea
     56  f44d							; PF is now the playing area
      0  f44d					      ASSERT_RUNTIME	"_scycles == #0"
      1  f44d				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f44d  && !(  _scycles == #0  ) }
      2  f44d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f44d					      sleep	61
      1  f44d				   .CYCLES    SET	61
      2  f44d
      3  f44d				  -	      IF	.CYCLES < 2
      4  f44d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f44d				  -	      ERR
      6  f44d					      ENDIF
      7  f44d
      8  f44d					      IF	.CYCLES & 1
      9  f44d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f44d		       04 00		      nop	0
     11  f44f				  -	      ELSE
     12  f44f				  -	      bit	VSYNC
     13  f44f					      ENDIF
     14  f44f				   .CYCLES    SET	.CYCLES - 3
     15  f44f					      ENDIF
     16  f44f
     17  f44f					      REPEAT	.CYCLES / 2
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     17  f452					      REPEND
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     17  f456					      REPEND
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     17  f465					      REPEND
     18  f466		       ea		      nop
     17  f466					      REPEND
     18  f467		       ea		      nop
     17  f467					      REPEND
     18  f468		       ea		      nop
     17  f468					      REPEND
     18  f469		       ea		      nop
     17  f469					      REPEND
     18  f46a		       ea		      nop
     17  f46a					      REPEND
     18  f46b		       ea		      nop
     19  f46c					      REPEND
     59  f46c		       a9 00		      lda	#%00000000
     60  f46e		       85 0d		      sta	PF0
     61  f470		       a9 20		      lda	#%00100000
     62  f472		       85 0e		      sta	PF1
     63  f474		       a9 00		      lda	#%00000000
     64  f476		       85 0f		      sta	PF2
      0  f478					      ASSERT_RUNTIME	"_scycles == #0"
      1  f478				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f478  && !(  _scycles == #0  ) }
      2  f478					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f478					      sleep	7
      1  f478				   .CYCLES    SET	7
      2  f478
      3  f478				  -	      IF	.CYCLES < 2
      4  f478				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f478				  -	      ERR
      6  f478					      ENDIF
      7  f478
      8  f478					      IF	.CYCLES & 1
      9  f478					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f478		       04 00		      nop	0
     11  f47a				  -	      ELSE
     12  f47a				  -	      bit	VSYNC
     13  f47a					      ENDIF
     14  f47a				   .CYCLES    SET	.CYCLES - 3
     15  f47a					      ENDIF
     16  f47a
     17  f47a					      REPEAT	.CYCLES / 2
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     19  f47c					      REPEND
     67  f47c		       4c ae f4 	      jmp	row_start
     68  f47f							; enter row on cycle 10.
     69  f47f
     70  f47f							; reset the background for bottom of playfield
     71  f47f				   border_bottom
     72  f47f							;sta WSYNC
     73  f47f
     74  f47f							; Form the bottom of the level frame.
     75  f47f		       a9 3f		      lda	#%00111111
     76  f481		       85 0e		      sta	PF1
     77  f483		       a9 ff		      lda	#%11111111
     78  f485		       85 0f		      sta	PF2
     79  f487
     80  f487							; Clear all sprites.
     81  f487		       a9 00		      lda	#0
     82  f489		       85 1c		      sta	EMERALD_SP
     83  f48b		       85 1b		      sta	JET_SP
     84  f48d		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f48f
     86  f48f		       a9 42		      lda	#COL_BG
     87  f491		       a0 00		      ldy	#0
     88  f493		       85 02		      sta	WSYNC
     89  f495
     90  f495		       84 08		      sty	COLUPF
     91  f497		       85 02		      sta	WSYNC
     92  f499
     93  f499		       85 08		      sta	COLUPF
     94  f49b		       85 02		      sta	WSYNC
     95  f49d
     96  f49d		       85 02		      sta	WSYNC
     97  f49f
     98  f49f		       85 02		      sta	WSYNC
     99  f4a1
    100  f4a1		       84 08		      sty	COLUPF
    101  f4a3		       85 02		      sta	WSYNC
    102  f4a5
    103  f4a5		       85 08		      sta	COLUPF
    104  f4a7		       85 02		      sta	WSYNC
    105  f4a9		       85 02		      sta	WSYNC
    106  f4ab		       4c 39 f3 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f4ae					      include	"kernel_row.s"
      1  f4ae							; Frame Start
      2  f4ae
      3  f4ae							; Macros for calculating sprite values (GRPx).
      4  f4ae
      5  f4ae							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f4ae					      mac	kernel_load_player
      7  f4ae							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f4ae					      dcp	SpriteEnd	; 5c
      9  f4ae					      ldy	#0	; 2c
     10  f4ae							; constant 6c:
     11  f4ae					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f4ae					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f4ae					      ldy	SpriteEnd
     14  f4ae							; 4c
     15  f4ae					      ldx	Frame0,Y
     16  f4ae					      endm
     17  f4ae
     18  f4ae							; mac jet_spritedata_calc
     19  f4ae							;
     20  f4ae							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f4ae							; GRP0.
     22  f4ae					      mac	jet_spritedata_calc
     23  f4ae							; loader
     24  f4ae					      lda	#SPRITE_HEIGHT
     25  f4ae					      dcp	SpriteEnd
     26  f4ae					      ldy	SpriteEnd
     27  f4ae
     28  f4ae							; 4c
     29  f4ae							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f4ae							; from Frame0 + Y must never cross a page boundary.
     31  f4ae					      lda	Frame0,Y
     32  f4ae							; 6c
     33  f4ae					      .byte	$b0, $01	;2c / 3c (taken)
     34  f4ae					      .byte	$2c	; 4c / 0c
     35  f4ae					      sta	JET_SP	; 0c / 3c
     36  f4ae					      endm
     37  f4ae
     38  f4ae				   row_start
     39  f4ae
     40  f4ae							; [scanline 1]
     41  f4ae				   row_1
     42  f4ae							; Enter after scanline starts on row "9" and wraps
      0  f4ae					      ASSERT_RUNTIME	"_scycles == #10"
      1  f4ae				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f4ae  && !(  _scycles == #10  ) }
      2  f4ae					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f4ae
      0  f4ae					      jet_spritedata_calc
      1  f4ae
      2  f4ae		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4b0		       c7 85		      dcp	SpriteEnd
      4  f4b2		       a4 85		      ldy	SpriteEnd
      5  f4b4
      6  f4b4
      7  f4b4
      8  f4b4
      9  f4b4		       b9 00 f7 	      lda	Frame0,Y
     10  f4b7
     11  f4b7		       b0 01		      .byte.b	$b0, $01
     12  f4b9		       2c		      .byte.b	$2c
     13  f4ba		       85 1b		      sta	JET_SP
     46  f4bc
     47  f4bc							; Nibble VM.
     48  f4bc							; lda KERNEL_TEMP_A
     49  f4bc							; NIBBLE_gem_kernel
     50  f4bc							; sta WSYNC
     51  f4bc
     52  f4bc							; Nibble VM.
      0  f4bc					      sleep	42
      1  f4bc				   .CYCLES    SET	42
      2  f4bc
      3  f4bc				  -	      IF	.CYCLES < 2
      4  f4bc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4bc				  -	      ERR
      6  f4bc					      ENDIF
      7  f4bc
      8  f4bc				  -	      IF	.CYCLES & 1
      9  f4bc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4bc				  -	      nop	0
     11  f4bc				  -	      ELSE
     12  f4bc				  -	      bit	VSYNC
     13  f4bc				  -	      ENDIF
     14  f4bc				  -.CYCLES    SET	.CYCLES - 3
     15  f4bc					      ENDIF
     16  f4bc
     17  f4bc					      REPEAT	.CYCLES / 2
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     17  f4bf					      REPEND
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     17  f4c1					      REPEND
     18  f4c2		       ea		      nop
     17  f4c2					      REPEND
     18  f4c3		       ea		      nop
     17  f4c3					      REPEND
     18  f4c4		       ea		      nop
     17  f4c4					      REPEND
     18  f4c5		       ea		      nop
     17  f4c5					      REPEND
     18  f4c6		       ea		      nop
     17  f4c6					      REPEND
     18  f4c7		       ea		      nop
     17  f4c7					      REPEND
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     17  f4cd					      REPEND
     18  f4ce		       ea		      nop
     17  f4ce					      REPEND
     18  f4cf		       ea		      nop
     17  f4cf					      REPEND
     18  f4d0		       ea		      nop
     19  f4d1					      REPEND
     54  f4d1
     55  f4d1							; Set stack pointer for PHP use.
     56  f4d1		       a2 11		      ldx	#RESP1
     57  f4d3		       9a		      txs
     58  f4d4
      0  f4d4					      ASSERT_RUNTIME	"_scycles == #0"
      1  f4d4				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f4d4  && !(  _scycles == #0  ) }
      2  f4d4					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     60  f4d4
     61  f4d4							; [scanline 2]
     62  f4d4				   row_2
      0  f4d4					      jet_spritedata_calc
      1  f4d4
      2  f4d4		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4d6		       c7 85		      dcp	SpriteEnd
      4  f4d8		       a4 85		      ldy	SpriteEnd
      5  f4da
      6  f4da
      7  f4da
      8  f4da
      9  f4da		       b9 00 f7 	      lda	Frame0,Y
     10  f4dd
     11  f4dd		       b0 01		      .byte.b	$b0, $01
     12  f4df		       2c		      .byte.b	$2c
     13  f4e0		       85 1b		      sta	JET_SP
     64  f4e2
     65  f4e2							; Black out playfield
     66  f4e2							; TODO This should be done with playfield pixels, not color.
     67  f4e2		       a9 00		      lda	#0
     68  f4e4		       85 08		      sta	COLUPF
     69  f4e6
     70  f4e6							; Nibble VM.
      0  f4e6					      sleep	35
      1  f4e6				   .CYCLES    SET	35
      2  f4e6
      3  f4e6				  -	      IF	.CYCLES < 2
      4  f4e6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4e6				  -	      ERR
      6  f4e6					      ENDIF
      7  f4e6
      8  f4e6					      IF	.CYCLES & 1
      9  f4e6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4e6		       04 00		      nop	0
     11  f4e8				  -	      ELSE
     12  f4e8				  -	      bit	VSYNC
     13  f4e8					      ENDIF
     14  f4e8				   .CYCLES    SET	.CYCLES - 3
     15  f4e8					      ENDIF
     16  f4e8
     17  f4e8					      REPEAT	.CYCLES / 2
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     17  f4eb					      REPEND
     18  f4ec		       ea		      nop
     17  f4ec					      REPEND
     18  f4ed		       ea		      nop
     17  f4ed					      REPEND
     18  f4ee		       ea		      nop
     17  f4ee					      REPEND
     18  f4ef		       ea		      nop
     17  f4ef					      REPEND
     18  f4f0		       ea		      nop
     17  f4f0					      REPEND
     18  f4f1		       ea		      nop
     17  f4f1					      REPEND
     18  f4f2		       ea		      nop
     17  f4f2					      REPEND
     18  f4f3		       ea		      nop
     17  f4f3					      REPEND
     18  f4f4		       ea		      nop
     17  f4f4					      REPEND
     18  f4f5		       ea		      nop
     17  f4f5					      REPEND
     18  f4f6		       ea		      nop
     17  f4f6					      REPEND
     18  f4f7		       ea		      nop
     19  f4f8					      REPEND
     72  f4f8
     73  f4f8		       a9 04		      lda	#4
     74  f4fa		       8d 96 02 	      sta	TIM64T
     75  f4fd
     76  f4fd							; Load PF1 value
     77  f4fd		       a9 a0		      lda	#%10100000
     78  f4ff		       85 90		      sta	RamPF1Value
     79  f501
     80  f501							; Enable playfield at end of scanline
     81  f501		       a9 42		      lda	#COL_BG
     82  f503		       85 08		      sta	COLUPF
     83  f505
      0  f505					      ASSERT_RUNTIME	"_scycles == #0"
      1  f505				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f505  && !(  _scycles == #0  ) }
      2  f505					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f505
     86  f505							; [scanline 3]
     87  f505				   row_3
      0  f505					      jet_spritedata_calc
      1  f505
      2  f505		       a9 09		      lda	#SPRITE_HEIGHT
      3  f507		       c7 85		      dcp	SpriteEnd
      4  f509		       a4 85		      ldy	SpriteEnd
      5  f50b
      6  f50b
      7  f50b
      8  f50b
      9  f50b		       b9 00 f7 	      lda	Frame0,Y
     10  f50e
     11  f50e		       b0 01		      .byte.b	$b0, $01
     12  f510		       2c		      .byte.b	$2c
     13  f511		       85 1b		      sta	JET_SP
     89  f513
     90  f513							; Pre-populate graphics.
     91  f513		       a9 09		      lda	#SPRITE_HEIGHT
      0  f515					      KERNEL_LOAD_PLAYER
      1  f515
      2  f515		       c7 85		      dcp	SpriteEnd
      3  f517		       a0 00		      ldy	#0
      4  f519
      5  f519		       b0 01		      .byte.b	$b0, $01
      6  f51b		       2c		      .byte.b	$2c
      7  f51c		       a4 85		      ldy	SpriteEnd
      8  f51e
      9  f51e		       be 00 f7 	      ldx	Frame0,Y
     93  f521		       86 91		      stx	RamKernelGRP0
      0  f523					      KERNEL_LOAD_PLAYER
      1  f523
      2  f523		       c7 85		      dcp	SpriteEnd
      3  f525		       a0 00		      ldy	#0
      4  f527
      5  f527		       b0 01		      .byte.b	$b0, $01
      6  f529		       2c		      .byte.b	$2c
      7  f52a		       a4 85		      ldy	SpriteEnd
      8  f52c
      9  f52c		       be 00 f7 	      ldx	Frame0,Y
     95  f52f		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f532		       a5 91		      lda	RamKernelGRP0	; Load sprite 2 into A
     97  f534
      0  f534					      sleep	3
      1  f534				   .CYCLES    SET	3
      2  f534
      3  f534				  -	      IF	.CYCLES < 2
      4  f534				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f534				  -	      ERR
      6  f534					      ENDIF
      7  f534
      8  f534					      IF	.CYCLES & 1
      9  f534					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f534		       04 00		      nop	0
     11  f536				  -	      ELSE
     12  f536				  -	      bit	VSYNC
     13  f536					      ENDIF
     14  f536				   .CYCLES    SET	.CYCLES - 3
     15  f536					      ENDIF
     16  f536
     17  f536				  -	      REPEAT	.CYCLES / 2
     18  f536				  -	      nop
     19  f536					      REPEND
     99  f536
    100  f536							; [scanlines 4-5]
    101  f536							; We jump immediately into scanlines 4-5, the "gem kernel"
    102  f536		       a2 06		      ldx	#%00000110
    103  f538		       a0 66		      ldy	#%01100110
      0  f53a					      ASSERT_RUNTIME	"_scycles == #73"
      1  f53a				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f53a  && !(  _scycles == #73  ) }
      2  f53a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    105  f53a		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    106  f53d
    107  f53d							; [scanline 6]
    108  f53d
    109  f53d							; Try to avoid page crossing in jet_spritedata_calc
    110  f53d							; TODO enforce this with ASSERT_RUNTIME instead?
    111  f540		       00 00 00 	      align	16
    112  f540
    113  f540				   row_after_kernel
    114  f540				   row_6
      0  f540					      ASSERT_RUNTIME	"_scycles == #0"
      1  f540				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f540  && !(  _scycles == #0  ) }
      2  f540					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    116  f540
    117  f540							; Cleanup from the kernel.
    118  f540		       a9 00		      lda	#0
    119  f542		       85 1e		      sta	EMERALD_MI_ENABLE
    120  f544		       85 1c		      sta	EMERALD_SP
    121  f546		       85 08		      sta	COLUPF
    122  f548
      0  f548					      jet_spritedata_calc
      1  f548
      2  f548		       a9 09		      lda	#SPRITE_HEIGHT
      3  f54a		       c7 85		      dcp	SpriteEnd
      4  f54c		       a4 85		      ldy	SpriteEnd
      5  f54e
      6  f54e
      7  f54e
      8  f54e
      9  f54e		       b9 00 f7 	      lda	Frame0,Y
     10  f551
     11  f551		       b0 01		      .byte.b	$b0, $01
     12  f553		       2c		      .byte.b	$2c
     13  f554		       85 1b		      sta	JET_SP
    124  f556
    125  f556							; Idle.
    126  f556		       85 02		      sta	WSYNC
    127  f558
    128  f558							; [scanline 7]
    129  f558				   row_7
      0  f558					      jet_spritedata_calc
      1  f558
      2  f558		       a9 09		      lda	#SPRITE_HEIGHT
      3  f55a		       c7 85		      dcp	SpriteEnd
      4  f55c		       a4 85		      ldy	SpriteEnd
      5  f55e
      6  f55e
      7  f55e
      8  f55e
      9  f55e		       b9 00 f7 	      lda	Frame0,Y
     10  f561
     11  f561		       b0 01		      .byte.b	$b0, $01
     12  f563		       2c		      .byte.b	$2c
     13  f564		       85 1b		      sta	JET_SP
    131  f566
    132  f566		       a9 42		      lda	#COL_BG
    133  f568		       85 08		      sta	COLUPF
    134  f56a
    135  f56a							; FRAMESWITCH
    136  f56a		       a9 01		      lda	#01
    137  f56c		       25 83		      and	FrameCount
    138  f56e		       d0 13		      bne	loadframe2
    139  f570
    140  f570							; Perform gem loading for Kernel A.
    141  f570
    142  f570				   loadframe1
      0  f570					      ASSERT_RUNTIME	"_scycles == #32"
      1  f570				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f570  && !(  _scycles == #32  ) }
      2  f570					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f570
    145  f570							; Emerald byte setting 1A
    146  f570							; ldx #0
    147  f570							; lda KERNEL_STORAGE_R,X
    148  f570							; sta GEM_00_W
    149  f570							; inx
    150  f570							; lda KERNEL_STORAGE_R,X
    151  f570							; sta GEM_04_W
    152  f570							; inx
    153  f570							; lda KERNEL_STORAGE_R,X
    154  f570							; sta GEM_09_W
    155  f570							; inx
    156  f570
    157  f570		       85 02		      sta	WSYNC
    158  f572
    159  f572							; [scanline 8]
      0  f572					      jet_spritedata_calc
      1  f572
      2  f572		       a9 09		      lda	#SPRITE_HEIGHT
      3  f574		       c7 85		      dcp	SpriteEnd
      4  f576		       a4 85		      ldy	SpriteEnd
      5  f578
      6  f578
      7  f578
      8  f578
      9  f578		       b9 00 f7 	      lda	Frame0,Y
     10  f57b
     11  f57b		       b0 01		      .byte.b	$b0, $01
     12  f57d		       2c		      .byte.b	$2c
     13  f57e		       85 1b		      sta	JET_SP
    161  f580
    162  f580							; Emerald byte setting 1B
    163  f580							; lda KERNEL_STORAGE_R,X
    164  f580							; sta GEM_13_W
    165  f580							; inx
    166  f580							; lda KERNEL_STORAGE_R,X
    167  f580							; sta GEM_17_W
    168  f580							; inx
    169  f580							; lda KERNEL_STORAGE_R,X
    170  f580							; sta GEM_18_W
    171  f580							; inx
    172  f580							; lda KERNEL_STORAGE_R,X
    173  f580							; sta GEM_22_W
    174  f580
    175  f580		       4c 96 f5 	      jmp	row_8_end
    176  f583
    177  f583							; Perform gem loading for Kernel B.
    178  f583
    179  f583				   loadframe2
      0  f583					      ASSERT_RUNTIME	"_scycles == #33"
      1  f583				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f583  && !(  _scycles == #33  ) }
      2  f583					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f583
    182  f583							; Emerald byte setting 2A
    183  f583							; ldx #[storage_02 - storage]
    184  f583							; lda KERNEL_STORAGE_R,X
    185  f583							; sta GEM_02_W
    186  f583							; inx
    187  f583							; lda KERNEL_STORAGE_R,X
    188  f583							; sta GEM_06_W
    189  f583							; inx
    190  f583							; lda KERNEL_STORAGE_R,X
    191  f583							; sta GEM_08_W
    192  f583							; inx
    193  f583
    194  f583		       85 02		      sta	WSYNC
    195  f585
    196  f585							; [scanline 8]
    197  f585				   row_8
      0  f585					      jet_spritedata_calc
      1  f585
      2  f585		       a9 09		      lda	#SPRITE_HEIGHT
      3  f587		       c7 85		      dcp	SpriteEnd
      4  f589		       a4 85		      ldy	SpriteEnd
      5  f58b
      6  f58b
      7  f58b
      8  f58b
      9  f58b		       b9 00 f7 	      lda	Frame0,Y
     10  f58e
     11  f58e		       b0 01		      .byte.b	$b0, $01
     12  f590		       2c		      .byte.b	$2c
     13  f591		       85 1b		      sta	JET_SP
    199  f593
    200  f593							; Emerald byte setting 2B
    201  f593							; lda KERNEL_STORAGE_R,X
    202  f593							; sta GEM_11_W
    203  f593							; inx
    204  f593							; lda KERNEL_STORAGE_R,X
    205  f593							; sta GEM_15_W
    206  f593							; inx
    207  f593							; lda KERNEL_STORAGE_R,X
    208  f593							; sta GEM_20_W
    209  f593							; inx
    210  f593							; lda KERNEL_STORAGE_R,X
    211  f593							; sta GEM_24_W
    212  f593
    213  f593		       4c 96 f5 	      jmp	row_8_end
    214  f596
    215  f596							; Common row 8 return.
    216  f596
    217  f596				   row_8_end
    218  f596							; Idle.
    219  f596		       85 02		      sta	WSYNC
    220  f598
    221  f598							; [scanline 8]
    222  f598							; Repeat loop until LoopCount < 0
    223  f598		       c6 82		      dec	LoopCount
    224  f59a		       30 03		      bmi	row_end
    225  f59c		       4c ae f4 	      jmp	row_start
    226  f59f				   row_end
    227  f59f		       4c 7f f4 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f5a2					      include	"kernel_gem.s"
      1  f5a2							;
      2  f5a2							; Gem Kernels
      3  f5a2							;
      4  f5a2							; Gems are displayed in alternating kernels. This chart shows
      5  f5a2							; which kernel is responsible for which gem, with missiles denoted.
      6  f5a2							;
      7  f5a2							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f5a2							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f5a2							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f5a2							;  #	 0^	 8^	  17^	    26^       gem index
     11  f5a2							;
     12  f5a2							; The middle bar indicates where the pattern reverses.
     13  f5a2							;
     14  f5a2							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f5a2							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f5a2							; requires with a single sprite. By alternating sprites each frame with an...
     17  f5a2							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f5a2							; line, except for two. These are instead rendered by the missile, which
     19  f5a2							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f5a2
     21  f5a2							; for copying
     22  f600		       00 00 00 00*	      align	256
     23  f600
     24  f600							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  f600							;
     26  f600							; GEM KERNEL A
     27  f600							;
     28  f600
     29  f600				   kernel_1_start subroutine
     30  f600					      rorg	$f100
     31  f600
     32  f600							; Kernel Marker
     33  f600		       0a		      .byte.b	$A
     34  f601
     35  f601				   KernelA_early
     36  f601		       a9 2c		      lda	#44
     37  f603
     38  f603				   Kernel1    subroutine
     39  f603							; ASSERT_RUNTIME "sp == $f9"
      0  f603					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == 22"
      1  f603				   .KERNEL    SET	$A
      2  f603				   .COND      SET	"_scycles == 22"
 ASSERT: breakif { pc== $f103  && !( ( *$f100 == # $a  ) && (  _scycles == 22  ) ) }
      3  f603					      echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
     41  f603
     42  f603							; To disable VDELP0, we use the Y register %01100110, which has D0 always 0
     43  f603
     44  f603							; Write Gemini 0A into delayed sprite register
     45  f603		       84 1c		      sty	EMERALD_SP
     46  f605							; Write Player from accumulator. When writing to the other sprite, the
     47  f605							; TIA will copy Gemini 0A into visible sprite register
     48  f605		       85 1b		      sta	JET_SP
     49  f607							; Write Gemini 1A into delayed sprite register
     50  f607		       84 1c		      sty	EMERALD_SP
     51  f609
      0  f609					      sleep	4
      1  f609				   .CYCLES    SET	4
      2  f609
      3  f609				  -	      IF	.CYCLES < 2
      4  f609				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f609				  -	      ERR
      6  f609					      ENDIF
      7  f609
      8  f609				  -	      IF	.CYCLES & 1
      9  f609				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f609				  -	      nop	0
     11  f609				  -	      ELSE
     12  f609				  -	      bit	VSYNC
     13  f609				  -	      ENDIF
     14  f609				  -.CYCLES    SET	.CYCLES - 3
     15  f609					      ENDIF
     16  f609
     17  f609					      REPEAT	.CYCLES / 2
     18  f609		       ea		      nop
     17  f609					      REPEND
     18  f60a		       ea		      nop
     19  f60b					      REPEND
     53  f60b
     54  f60b							; Register config
     55  f60b		       a9 01		      lda	#$01
     56  f60d		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile
     57  f60f		       8e 26 00 	      stx.w	VDELP1	; enable delayed sprite TODO: save the extra cycle here
     58  f612
     59  f612							; 22c is critical start of precise GRP0 timing for Kernel A
      0  f612					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == 22"
      1  f612				   .KERNEL    SET	$A
      2  f612				   .COND      SET	"_scycles == 22"
 ASSERT: breakif { pc== $f112  && !( ( *$f100 == # $a  ) && (  _scycles == 22  ) ) }
      3  f612					      echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
     61  f612				   KernelA_A
     62  f612		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     63  f614				   KernelA_B
      0  f614					      sleep	3
      1  f614				   .CYCLES    SET	3
      2  f614
      3  f614				  -	      IF	.CYCLES < 2
      4  f614				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f614				  -	      ERR
      6  f614					      ENDIF
      7  f614
      8  f614					      IF	.CYCLES & 1
      9  f614					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f614		       04 00		      nop	0
     11  f616				  -	      ELSE
     12  f616				  -	      bit	VSYNC
     13  f616					      ENDIF
     14  f616				   .CYCLES    SET	.CYCLES - 3
     15  f616					      ENDIF
     16  f616
     17  f616				  -	      REPEAT	.CYCLES / 2
     18  f616				  -	      nop
     19  f616					      REPEND
     65  f616				   KernelA_C
     66  f616		       a5 90		      lda	RamPF1Value	; Load PF1 (TODO asymmetrical playfield)
     67  f618
     68  f618
     69  f618							; below has one `php` call (by default: RESET)
     70  f618				   KernelA_D
     71  f618		       84 26		      sty	VDELP1	; Gemini 1A, clear VDELP1
     72  f61a				   KernelA_E
     73  f61a		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     74  f61c				   KernelA_F
     75  f61c		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     76  f61e				   KernelA_G
     77  f61e		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     78  f620							; above has php
     79  f620
     80  f620				   KernelA_H
     81  f620		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     82  f622
     83  f622							; RST4 vvv
     84  f622				   KernelA_I
     85  f622		       08		      php		; Reset "medium close" NUSIZ repetition
     86  f623				   KernelA_J		; unchanging
     87  f623		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     88  f625				   KernelA_K
     89  f625		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     90  f627				   KernelA_L
      0  f627					      sleep	3	; free
      1  f627				   .CYCLES    SET	3
      2  f627
      3  f627				  -	      IF	.CYCLES < 2
      4  f627				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f627				  -	      ERR
      6  f627					      ENDIF
      7  f627
      8  f627					      IF	.CYCLES & 1
      9  f627					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f627		       04 00		      nop	0
     11  f629				  -	      ELSE
     12  f629				  -	      bit	VSYNC
     13  f629					      ENDIF
     14  f629				   .CYCLES    SET	.CYCLES - 3
     15  f629					      ENDIF
     16  f629
     17  f629				  -	      REPEAT	.CYCLES / 2
     18  f629				  -	      nop
     19  f629					      REPEND
     92  f629							; RST4 ^^^
     93  f629
     94  f629				   KernelA_M
     95  f629		       84 1c		      sty	EMERALD_SP	; Gemini 5A
     96  f62b				   KernelA_N
      0  f62b					      sleep	2
      1  f62b				   .CYCLES    SET	2
      2  f62b
      3  f62b				  -	      IF	.CYCLES < 2
      4  f62b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f62b				  -	      ERR
      6  f62b					      ENDIF
      7  f62b
      8  f62b				  -	      IF	.CYCLES & 1
      9  f62b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f62b				  -	      nop	0
     11  f62b				  -	      ELSE
     12  f62b				  -	      bit	VSYNC
     13  f62b				  -	      ENDIF
     14  f62b				  -.CYCLES    SET	.CYCLES - 3
     15  f62b					      ENDIF
     16  f62b
     17  f62b					      REPEAT	.CYCLES / 2
     18  f62b		       ea		      nop
     19  f62c					      REPEND
     98  f62c
     99  f62c				   KernelA_O
    100  f62c		       68		      pla		; reset stack pointer
    101  f62d
    102  f62d							; 7c
    103  f62d				   KernelA_branch
      0  f62d					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == 70"
      1  f62d				   .KERNEL    SET	$A
      2  f62d				   .COND      SET	"_scycles == 70"
 ASSERT: breakif { pc== $f12d  && !( ( *$f100 == # $a  ) && (  _scycles == 70  ) ) }
      3  f62d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
    105  f62d		       ad 84 02 	      lda	INTIM
    106  f630		       d0 cf		      bne	KernelA_early
    107  f632
    108  f632		       4c 40 f5 	      jmp	row_after_kernel
    109  f635
    110  f635					      rend
    111  f635				   kernel_1_end
      0  f635					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  f635				   .STARTA    SET	kernel_1_start
      2  f635				   .ENDA      SET	kernel_1_end
      3  f635				   .LEN       SET	$40
      4  f635				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f635				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f635				  -	      err
      7  f635					      endif
    113  f635
    114  f635							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f635							;
    116  f635							; GEM KERNEL B
    117  f635							;
    118  f635
    119  f635				   kernel_2_start subroutine
    120  f635					      rorg	$f100
    121  f635
    122  f635							; Kernel Marker
    123  f635		       0b		      .byte.b	$B
    124  f636
    125  f636				   KernelB_early
    126  f636		       a9 2c		      lda	#44
    127  f638
    128  f638				   Kernel2    subroutine
    129  f638							; Assert: M1 is at position #61
    130  f638
    131  f638							; don't sleep first to make this distinct from Kernel A in debugger, lol
    132  f638
    133  f638							; Load next Player sprite
    134  f638		       85 1b		      sta	GRP0
    135  f63a
      0  f63a					      sleep	8
      1  f63a				   .CYCLES    SET	8
      2  f63a
      3  f63a				  -	      IF	.CYCLES < 2
      4  f63a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f63a				  -	      ERR
      6  f63a					      ENDIF
      7  f63a
      8  f63a				  -	      IF	.CYCLES & 1
      9  f63a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f63a				  -	      nop	0
     11  f63a				  -	      ELSE
     12  f63a				  -	      bit	VSYNC
     13  f63a				  -	      ENDIF
     14  f63a				  -.CYCLES    SET	.CYCLES - 3
     15  f63a					      ENDIF
     16  f63a
     17  f63a					      REPEAT	.CYCLES / 2
     18  f63a		       ea		      nop
     17  f63a					      REPEND
     18  f63b		       ea		      nop
     17  f63b					      REPEND
     18  f63c		       ea		      nop
     17  f63c					      REPEND
     18  f63d		       ea		      nop
     19  f63e					      REPEND
    137  f63e
    138  f63e
    139  f63e		       a2 0c		      ldx	#%00001100
    140  f640		       a0 cc		      ldy	#%11001100
    141  f642
    142  f642		       a9 02		      lda	#02
    143  f644		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable missile
    144  f646
    145  f646		       a9 c0		      lda	#%11000000
    146  f648		       84 1c		      sty	EMERALD_SP
    147  f64a
    148  f64a							; 25c is critical start of precise GRP0 timing for Kernel B
      0  f64a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == 25"
      1  f64a				   .KERNEL    SET	$B
      2  f64a				   .COND      SET	"_scycles == 25"
 ASSERT: breakif { pc== $f115  && !( ( *$f100 == # $b  ) && (  _scycles == 25  ) ) }
      3  f64a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
    150  f64a				   KernelB_A
    151  f64a		       85 11		      sta	EMERALD_SP_RESET
    152  f64c				   KernelB_B
      0  f64c					      sleep	3
      1  f64c				   .CYCLES    SET	3
      2  f64c
      3  f64c				  -	      IF	.CYCLES < 2
      4  f64c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64c				  -	      ERR
      6  f64c					      ENDIF
      7  f64c
      8  f64c					      IF	.CYCLES & 1
      9  f64c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64c		       04 00		      nop	0
     11  f64e				  -	      ELSE
     12  f64e				  -	      bit	VSYNC
     13  f64e					      ENDIF
     14  f64e				   .CYCLES    SET	.CYCLES - 3
     15  f64e					      ENDIF
     16  f64e
     17  f64e				  -	      REPEAT	.CYCLES / 2
     18  f64e				  -	      nop
     19  f64e					      REPEND
    154  f64e				   KernelB_C
      0  f64e					      sleep	3
      1  f64e				   .CYCLES    SET	3
      2  f64e
      3  f64e				  -	      IF	.CYCLES < 2
      4  f64e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64e				  -	      ERR
      6  f64e					      ENDIF
      7  f64e
      8  f64e					      IF	.CYCLES & 1
      9  f64e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64e		       04 00		      nop	0
     11  f650				  -	      ELSE
     12  f650				  -	      bit	VSYNC
     13  f650					      ENDIF
     14  f650				   .CYCLES    SET	.CYCLES - 3
     15  f650					      ENDIF
     16  f650
     17  f650				  -	      REPEAT	.CYCLES / 2
     18  f650				  -	      nop
     19  f650					      REPEND
    156  f650				   KernelB_D
    157  f650		       84 1c		      sty	EMERALD_SP
    158  f652				   KernelB_E
    159  f652		       85 11		      sta	EMERALD_SP_RESET
    160  f654				   KernelB_F
    161  f654		       84 1c		      sty	EMERALD_SP
    162  f656				   KernelB_G		; PF1
      0  f656					      sleep	3
      1  f656				   .CYCLES    SET	3
      2  f656
      3  f656				  -	      IF	.CYCLES < 2
      4  f656				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f656				  -	      ERR
      6  f656					      ENDIF
      7  f656
      8  f656					      IF	.CYCLES & 1
      9  f656					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f656		       04 00		      nop	0
     11  f658				  -	      ELSE
     12  f658				  -	      bit	VSYNC
     13  f658					      ENDIF
     14  f658				   .CYCLES    SET	.CYCLES - 3
     15  f658					      ENDIF
     16  f658
     17  f658				  -	      REPEAT	.CYCLES / 2
     18  f658				  -	      nop
     19  f658					      REPEND
    164  f658
    165  f658							; below has one php load (RESET?)
    166  f658				   KernelB_H
    167  f658		       84 1c		      sty	EMERALD_SP	; Gemini 3B
    168  f65a				   KernelB_I
    169  f65a		       85 11		      sta	EMERALD_SP_RESET
    170  f65c				   KernelB_J
    171  f65c		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    172  f65e				   KernelB_K
    173  f65e		       85 1e		      sta	EMERALD_MI_ENABLE
    174  f660				   KernelB_L
    175  f660		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    176  f662							; above has one PHP loa
    177  f662
    178  f662				   KernelB_M
      0  f662					      sleep	3
      1  f662				   .CYCLES    SET	3
      2  f662
      3  f662				  -	      IF	.CYCLES < 2
      4  f662				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f662				  -	      ERR
      6  f662					      ENDIF
      7  f662
      8  f662					      IF	.CYCLES & 1
      9  f662					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f662		       04 00		      nop	0
     11  f664				  -	      ELSE
     12  f664				  -	      bit	VSYNC
     13  f664					      ENDIF
     14  f664				   .CYCLES    SET	.CYCLES - 3
     15  f664					      ENDIF
     16  f664
     17  f664				  -	      REPEAT	.CYCLES / 2
     18  f664				  -	      nop
     19  f664					      REPEND
    180  f664				   KernelB_N
      0  f664					      sleep	3
      1  f664				   .CYCLES    SET	3
      2  f664
      3  f664				  -	      IF	.CYCLES < 2
      4  f664				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f664				  -	      ERR
      6  f664					      ENDIF
      7  f664
      8  f664					      IF	.CYCLES & 1
      9  f664					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f664		       04 00		      nop	0
     11  f666				  -	      ELSE
     12  f666				  -	      bit	VSYNC
     13  f666					      ENDIF
     14  f666				   .CYCLES    SET	.CYCLES - 3
     15  f666					      ENDIF
     16  f666
     17  f666				  -	      REPEAT	.CYCLES / 2
     18  f666				  -	      nop
     19  f666					      REPEND
    182  f666
    183  f666							; 7c
    184  f666				   KernelB_branch
      0  f666					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  f666				   .KERNEL    SET	$B
      2  f666				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f131  && !( ( *$f100 == # $b  ) && (  _scycles == #67  ) ) }
      3  f666					      echo	"ASSERT:", "breakif { pc==", ., " && !( ( *$f100 == #", .KERNEL, " ) && ( ", .COND, " ) ) }"
    186  f666		       ad 84 02 	      lda	INTIM
    187  f669		       d0 cb		      bne	KernelB_early
    188  f66b
    189  f66b		       4c 40 f5 	      jmp	row_after_kernel
    190  f66e
    191  f66e					      rend
    192  f66e				   kernel_2_end
      0  f66e					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  f66e				   .STARTA    SET	kernel_2_start
      2  f66e				   .ENDA      SET	kernel_2_end
      3  f66e				   .LEN       SET	$40
      4  f66e				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  f66e				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  f66e				  -	      err
      7  f66e					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f66e					      include	"data_sprites.s"
      1  f700		       00 00 00 00*	      align	256
      2  f700
      3  f700							; Player
      4  f700				   Frame0
      5  f700		       00		      .byte.b	#%00000000
      6  f701		       60		      .byte.b	#%01100000
      7  f702		       60		      .byte.b	#%01100000
      8  f703		       60		      .byte.b	#%01100000
      9  f704		       c0		      .byte.b	#%11000000
     10  f705		       c0		      .byte.b	#%11000000
     11  f706		       f0		      .byte.b	#%11110000
     12  f707		       c0		      .byte.b	#%11000000
     13  f708		       c0		      .byte.b	#%11000000
     14  f709		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f70a					      include	"data_levels.s"
      1  f710		       00 00 00 00*	      align	8
      2  f710							; first bit of byte 2 & 3 are unused for simplicity
      3  f710
      4  f710				   level_00
      5  f710		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  f714
      7  f714				   level_01
      8  f714		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  f718		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  f71c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  f720		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  f724		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  f728		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  f72c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  f730		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  f734		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  f738		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  f73c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  f740		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  f744		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  f748		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  f74c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  f750		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  f754		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  f758		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  f75c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  f760		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  f764		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  f768		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  f76c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  f770		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  f774		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  f778		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  f77c				   level_01_end
     35  f77c
     36  f77c
     37  f77c				   shard_map
     38  f77c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  f77d				   shard_map_end
------- FILE main.s
    124  f77d
    125  fffc					      org	$fffc
    126  fffc		       09 f2		      .word.w	Start
    127  fffe		       09 f2		      .word.w	Start
