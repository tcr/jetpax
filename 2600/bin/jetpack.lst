------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????
     22  10000 ????						; Perform a left rotation on the 32 bit number at
     23  10000 ????						; location VLA and store the result at location
     24  10000 ????						; RES. If VLA and RES are the same then the
     25  10000 ????						; operation is applied directly to the memory,
     26  10000 ????						; otherwise it is done in the accumulator.
     27  10000 ????						;
     28  10000 ????						; On exit: A = ??, X & Y are unchanged.
     29  10000 ????
     30  10000 ????						;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     31  10000 ????				       mac	_rol32
     32  10000 ????			    VLA        EQU	{1}
     33  10000 ????			    RES        EQU	{2}
     34  10000 ????				       IF	VLA != RES
     35  10000 ????				       LDA	VLA+3
     36  10000 ????				       ROL	A
     37  10000 ????				       STA	RES+3
     38  10000 ????				       LDA	VLA+2
     39  10000 ????				       ROL	A
     40  10000 ????				       STA	RES+2
     41  10000 ????				       LDA	VLA+1
     42  10000 ????				       ROL	A
     43  10000 ????				       STA	RES+1
     44  10000 ????				       LDA	VLA+0
     45  10000 ????				       ROL	A
     46  10000 ????				       STA	RES+0
     47  10000 ????				       ELSE
     48  10000 ????				       ROL	VLA+3
     49  10000 ????				       ROL	VLA+2
     50  10000 ????				       ROL	VLA+1
     51  10000 ????				       ROL	VLA+0
     52  10000 ????				       ENDIF
     53  10000 ????				       ENDM
     54  10000 ????
     55  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     56  10000 ????				       mac	assert_runtime
     57  10000 ????			    .COND      SET	{1}
     58  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     59  10000 ????				       endm
     60  10000 ????
     61  10000 ????
     62  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     63  10000 ????				       mac	assert_runtime_kernel
     64  10000 ????			    .KERNEL    SET	{1}
     65  10000 ????			    .COND      SET	{2}
     66  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     67  10000 ????				       endm
     68  10000 ????
     69  10000 ????						; Static assertions for size
     70  10000 ????				       mac	assert_size
     71  10000 ????			    .STARTA    SET	{1}
     72  10000 ????			    .ENDA      SET	{2}
     73  10000 ????			    .LEN       SET	{3}
     74  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     75  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     76  10000 ????				       err
     77  10000 ????				       endif
     78  10000 ????				       endm
     79  10000 ????				       mac	assert_size_exact
     80  10000 ????			    .STARTA    SET	{1}
     81  10000 ????			    .ENDA      SET	{2}
     82  10000 ????			    .LEN       SET	{3}
     83  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     84  10000 ????				       echo	""
     85  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     86  10000 ????				       err
     87  10000 ????				       endif
     88  10000 ????				       endm
     89  10000 ????
     90  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     94  0000 ????
     95  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00bb ????				      seg.u	Variables
      2 U00bb ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; only for debugging
      6 U0081
      7 U0081		       00	   Temp       byte.b
      8 U0082
      9 U0082							; Counters
     10 U0082		       00	   RowCount   byte.b
     11 U0083		       00	   LoopCount  byte.b
     12 U0084		       00	   FrameCount byte.b
     13 U0085
     14 U0085		       00	   YP1	      byte.b
     15 U0086		       00	   SpriteEnd  byte.b
     16 U0087		       00	   XPos       byte.b		; X position of player sprite
     17 U0088
     18 U0088
     19 U0088		       00	   Speed1     byte.b
     20 U0089		       00	   Speed2     byte.b
     21 U008a
     22 U008a		       00	   YPos       byte.b		; Y position of player sprite
     23 U008b		       00	   YPos2      byte.b
     24 U008c
     25 U008c		       00	   GEM_02_TARGET byte.b
     26 U008d
     27 U008d		       00	   JMP_ADDR   byte.b
     28 U008e		       00	   JMP_ADDR_2 byte.b
     29 U008f
     30 U008f		       00	   ROW_DEMO_INDEX byte.b
     31 U0090
     32 U0090		       00	   RamNibbleTemp byte.b
     33 U0091		       00	   RamNibbleVar1 byte.b
     34 U0092		       00	   RamNibbleVar2 byte.b
     35 U0093		       00	   RamZeroByte byte.b
     36 U0094		       00	   RamLowerSixByte byte.b
     37 U0095		       00	   RamStackBkp byte.b
     38 U0096
     39 U0096							; Kernel support
     40 U0096		       00	   RamPF1Value byte.b
     41 U0097		       00	   RamKernelGRP0 byte.b		; temp
     42 U0098		       00	   RamKernelPhpTarget byte.b
     43 U0099		       00	   RamKernelX byte.b
     44 U009a		       00	   RamKernelY byte.b
     45 U009b		       00	   RamKernelGemini1 byte.b
     46 U009c		       00	   RamKernelGemini1Reg byte.b
     47 U009d		       00	   RamKernelGemini2 byte.b
     48 U009e		       00	   RamKernelGemini2Reg byte.b
     49 U009f		       00	   RamKernelGemini3 byte.b
     50 U00a0		       00	   RamKernelGemini3Reg byte.b
     51 U00a1		       00	   RamKernelGemini4 byte.b
     52 U00a2		       00	   RamKernelGemini4Reg byte.b
     53 U00a3		       00	   RamKernelGemini5 byte.b
     54 U00a4
     55 U00a4		       00	   BuildKernelX byte.b
     56 U00a5		       00	   BuildKernelY byte.b
     57 U00a6		       00	   BuildKernelRST byte.b
     58 U00a7		       00	   BuildKernelGrp0 byte.b
     59 U00a8		       00	   BuildKernelVdel1 byte.b
     60 U00a9
     61 U00a9		       00	   level_for_game byte.b
     62 U00aa		       00		      byte.b
     63 U00ab		       00		      byte.b
     64 U00ac		       00		      byte.b
     65 U00ad
     66 U00ad		       00	   DO_MISS_A  byte.b
     67 U00ae		       00	   DO_MISS_B  byte.b
     68 U00af		       00	   DO_GEMS_A  byte.b
     69 U00b0		       00		      byte.b
     70 U00b1		       00		      byte.b
     71 U00b2		       00		      byte.b
     72 U00b3		       00		      byte.b
     73 U00b4		       00		      byte.b
     74 U00b5		       00	   DO_GEMS_B  byte.b
     75 U00b6		       00		      byte.b
     76 U00b7		       00		      byte.b
     77 U00b8		       00		      byte.b
     78 U00b9		       00		      byte.b
     79 U00ba		       00		      byte.b
     80 U00bb
     81 U00bb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     82 U00bb
     83 U00bb		       00 10	   ROW_COUNT  =	16
     84 U00bb
     85 U00bb		       00 02	   SIGNAL_LINE =	$02
     86 U00bb
     87 U00bb							; RAM+ memory map
     88 U00bb		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     89 U00bb		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     90 U00bb		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     91 U00bb
     92 U00bb		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     93 U00bb		       f1 40	   RAMP_STORAGE_R =	$f140
     94 U00bb
     95 U00bb							; NUSIZ values
     96 U00bb
     97 U00bb		       00 13	   THREE_COPIES =	%00010011
     98 U00bb
     99 U00bb							; Colors
    100 U00bb
    101 U00bb		       00 42	   COL_BG     equ	$42
    102 U00bb		       00 cc	   COL_EMERALD equ	$CC
    103 U00bb		       00 cc	   COL_EMERALD_2 equ	$CC
    104 U00bb
    105 U00bb							; HMOVE values for missiles
    106 U00bb
    107 U00bb		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
    108 U00bb		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
    109 U00bb
    110 U00bb		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
    111 U00bb		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
    112 U00bb
    113 U00bb							; Missile values when 2A=RST
    114 U00bb							; KERNEL_B_MISSILE_SLEEP equ 46
    115 U00bb							; KERNEL_B_MISSILE_HMOVE equ $20
    116 U00bb
    117 U00bb							; Sprite details
    118 U00bb
    119 U00bb		       00 09	   SPRITE_HEIGHT equ	9
    120 U00bb
    121 U00bb		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    122 U00bb		       00 1c	   EMERALD_SP equ	GRP1
    123 U00bb		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    124 U00bb		       00 11	   EMERALD_SP_RESET equ	RESP1
    125 U00bb		       00 13	   EMERALD_MI_RESET equ	RESM1
    126 U00bb		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    127 U00bb		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    128 U00bb		       00 05	   EMERALD_COPIES equ	NUSIZ1
    129 U00bb
    130 U00bb		       00 1b	   JET_SP     equ	GRP0
    131 U00bb		       00 10	   JET_SP_RESET equ	RESP0
    132 U00bb		       00 20	   JET_SP_HMOVE equ	HMP0
    133 U00bb		       00 06	   JET_SP_COLOR equ	COLUP0
    134 U00bb
    135 U00bb							; Spriteend is HEIGHT_OFFSET - YPos
    136 U00bb		       00 c8	   HEIGHT_OFFSET equ	200
    137 U00bb
    138 U00bb							; Compared with YPos
    139 U00bb		       00 3e	   FLOOR_OFFSET equ	62
    140 U00bb		       00 be	   CEILING_OFFSET equ	190
    141 U00bb
    142 U00bb							; Starting player position
    143 U00bb		       00 3e	   YPosStart  equ	62
    144 U00bb		       00 37	   XPosStart  equ	55
    145 U00bb
    146 U00bb							; Top left corner
    147 U00bb							; YPosStart equ 190
    148 U00bb							; XPosStart equ 28
    149 U00bb
    150 U00bb							; Tick (every 8 frames)
    151 U00bb		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     97 U00bb
     98 U00bb							; Bank 1
     99  e000 ????				      seg	CodeBank1
    100  d000					      org	$D000
    101  d000					      rorg	$F000
    102  d000		       00	   BANK1      byte.b
    103  d200					      org	$d200
    104  d200					      rorg	$d200
    105  d200				   Bank1Start
    106  d200		       ad fa ff 	      lda	$fffa
    107  d203		       ea		      nop
    108  d204		       ea		      nop
    109  d205		       ea		      nop
    110  d206
    111  dffc					      org	$dffc
    112  dffc					      rorg	$fffc
    113  dffc		       00 d2		      .word.w	Bank1Start
    114  dffe		       00 d2		      .word.w	Bank1Start
    115  e000
    116  e000							; Bank 2
    117  f000 ????				      seg	CodeBank2
    118  e000					      org	$E000
    119  e000					      rorg	$F000
    120  e000		       00	   BANK2      byte.b
    121  e200					      org	$e200
    122  e200					      rorg	$f200
    123  e200				   Bank2Start
    124  e200		       ad fa ff 	      lda	$fffa
    125  e203		       ea		      nop
    126  e204		       ea		      nop
    127  e205		       ea		      nop
    128  e206
    129  effc					      org	$effc
    130  effc					      rorg	$fffc
    131  effc		       00 f2		      .word.w	Bank2Start
    132  effe		       00 f2		      .word.w	Bank2Start
    133  f000
    134  f000							; Bank 3
    135  10000 ????				       seg	CodeBank3
    136  f000					      org	$F000
    137  f000					      rorg	$F000
    138  f000		       00	   BANK3      byte.b
    139  f200					      org	$f200
    140  f200					      rorg	$f200
    141  f200				   Bank3Start
    142  f200		       ad fa ff 	      lda	$fffa
    143  f203		       ea		      nop
    144  f204		       ea		      nop
    145  f205		       ea		      nop
    146  f206		       4c 09 f2 	      jmp	Start
    147  f209
    148  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 84		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 8a		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 87		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 88		      sta	Speed1
     48  f243		       85 89		      sta	Speed2
     49  f245		       85 8b		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8f		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 93		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 94		      sta	RamLowerSixByte
     59  f253
     60  f253							; Set all the bits in a silly manner
     61  f253		       a9 fe		      lda	#%11111110
     62  f255		       85 ac		      sta	[level_for_game + 3]
     63  f257		       a9 ff		      lda	#%11111111
     64  f259		       85 ab		      sta	[level_for_game + 2]
     65  f25b		       85 aa		      sta	[level_for_game + 1]
     66  f25d		       85 a9		      sta	[level_for_game + 0]
     67  f25f
     68  f25f							; Start with vertical sync (to reset frame)
     69  f25f		       4c 4d f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f262					      include	"kernel_loader.s"
      1  f262							; Copies the gem kernels to RAM
      2  f262
      3  f262							; Copy Kernel A to CBSRAM
      4  f262				   LoadKernelA subroutine
      5  f262		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f264				   .loop
      7  f264		       b9 00 fc 	      lda	kernel_1_start,Y
      8  f267		       99 00 10 	      sta	$1000,Y
      9  f26a		       88		      dey
     10  f26b		       d0 f7		      bne	.loop
     11  f26d		       ad 00 fc 	      lda	kernel_1_start
     12  f270		       8d 00 10 	      sta	$1000
     13  f273		       60		      rts
     14  f274
     15  f274							; Copy Kernel B to CBSRAM
     16  f274				   LoadKernelB subroutine
     17  f274		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f276				   .loop
     19  f276		       b9 37 fc 	      lda	kernel_2_start,Y
     20  f279		       99 00 10 	      sta	$1000,Y
     21  f27c		       88		      dey
     22  f27d		       d0 f7		      bne	.loop
     23  f27f		       ad 37 fc 	      lda	kernel_2_start
     24  f282		       8d 00 10 	      sta	$1000
     25  f285		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f286					      include	"nibble.s"
      1  f286
      2  f286					      MAC	nibble_gem_kernel_a_1_build
      3  f286					      lda	#0
      4  f286					      ldx	#SENTINEL
      5  f286					      stx	BuildKernelX
      6  f286					      stx	BuildKernelY
      7  f286					      stx	BuildKernelRST
      8  f286							; Gemini 1A
      9  f286				   .K_1A
     10  f286					      ldy	[DO_GEMS_A + 0]
     11  f286					      jsr	KernelA_GenReset
     12  f286				   .if_1
     13  f286					      bne	.else_1
     14  f286					      sec
     15  f286					      rol
     16  f286							; Special: Encoding RST0
     17  f286							; Rewrite lda RamKernelPF1 to be #immediate
     18  f286					      ldy	#BC_LDA_IMM
     19  f286					      sty	[KernelA_B - $100]
     20  f286					      ldy	#%10100000
     21  f286					      sty	[KernelA_B - $100 + 1]
     22  f286							; Store 1A in GRP0
     23  f286					      ldy	[DO_GEMS_A + 1]
     24  f286					      sty	BuildKernelGrp0
     25  f286							; Gemini 1A is RESPx
     26  f286					      ldy	#EMERALD_SP_RESET
     27  f286					      sty	[KernelA_C - $100 + 1]
     28  f286							; Turn 3-cycle NOP into 4-cycle
     29  f286					      ldy	#$14
     30  f286					      sty	[KernelA_D - $100]
     31  f286					      jmp	.endif_1
     32  f286							; [BIT DEPTH] #1 If-End @ 1
     33  f286					      rol
     34  f286
     35  f286				   .else_1
     36  f286					      clc
     37  f286					      rol
     38  f286							; Store 0A in GRP0
     39  f286					      ldy	[DO_GEMS_A + 0]
     40  f286					      sty	BuildKernelGrp0
     41  f286					      ldy	[DO_GEMS_A + 1]
     42  f286					      jsr	KernelA_GenReset
     43  f286				   .if_2
     44  f286					      bne	.else_2
     45  f286					      sec
     46  f286					      rol
     47  f286							; GEM1ASWITCH
     48  f286					      jmp	.endif_2
     49  f286							; [BIT DEPTH] #2 If-End @ 2
     50  f286
     51  f286				   .else_2
     52  f286					      clc
     53  f286					      rol
     54  f286							; Calculate the 1A value
     55  f286					      ldy	SHARD_LUT_RF1
     56  f286					      cpy	#1
     57  f286					      .byte	$D0, #3
     58  f286					      ldy	#RESP1
     59  f286					      .byte	$2C
     60  f286					      ldy	#GRP1
     61  f286					      sty	RamKernelGemini1Reg
     62  f286							; Set opcode
     63  f286					      ldx	SHARD_LUT_RF1
     64  f286					      cpx	#1
     65  f286					      ldy	#BC_STX
     66  f286					      .byte	$F0, #5
     67  f286					      ldy	[DO_GEMS_A + 1]
     68  f286					      jsr	KernelA_UpdateRegs
     69  f286					      sty	RamKernelGemini1
     70  f286							; [BIT DEPTH] #2 *If-End @ 2
     71  f286							; [BIT DEPTH] #2 Else-End @ 2
     72  f286				   .endif_2
     73  f286							; [BIT DEPTH] #1 *If-End @ 1
     74  f286							; [BIT DEPTH] #1 Else-End @ 2
     75  f286				   .endif_1
     76  f286							; BuildKernelX, BuildKernelY are upgraded if not set
     77  f286							; Gemini 2A
     78  f286					      ldy	[DO_GEMS_A + 2]
     79  f286					      jsr	KernelA_GenReset
     80  f286				   .if_3
     81  f286					      bne	.else_3
     82  f286					      sec
     83  f286					      rol
     84  f286					      jmp	.endif_3
     85  f286							; [BIT DEPTH] #3 If-End @ 3
     86  f286
     87  f286				   .else_3
     88  f286					      clc
     89  f286					      rol
     90  f286							; Set opcode
     91  f286					      ldy	[DO_GEMS_A + 2]
     92  f286					      jsr	KernelA_UpdateRegs
     93  f286					      sty	RamKernelGemini2
     94  f286							; Set opcode target
     95  f286					      ldy	SHARD_LUT_RF1
     96  f286					      cpy	#2
     97  f286					      .byte	$D0, #3
     98  f286					      ldy	#RESP1
     99  f286					      .byte	$2C
    100  f286					      ldy	#GRP1
    101  f286					      sty	RamKernelGemini2Reg
    102  f286							; [BIT DEPTH] #3 *If-End @ 3
    103  f286							; [BIT DEPTH] #3 Else-End @ 3
    104  f286				   .endif_3
    105  f286							; Gemini 3A
    106  f286					      ldy	[DO_GEMS_A + 3]
    107  f286					      jsr	KernelA_GenReset
    108  f286				   .if_4
    109  f286					      bne	.else_4
    110  f286					      sec
    111  f286					      rol
    112  f286					      jmp	.endif_4
    113  f286							; [BIT DEPTH] #4 If-End @ 4
    114  f286
    115  f286				   .else_4
    116  f286					      clc
    117  f286					      rol
    118  f286							; Set opcode
    119  f286					      ldy	[DO_GEMS_A + 3]
    120  f286					      jsr	KernelA_UpdateRegs
    121  f286					      sty	RamKernelGemini3
    122  f286							; Set opcode target
    123  f286					      ldy	SHARD_LUT_RF1
    124  f286					      cpy	#3
    125  f286					      .byte	$D0, #3
    126  f286					      ldy	#RESP1
    127  f286					      .byte	$2C
    128  f286					      ldy	#GRP1
    129  f286					      sty	RamKernelGemini3Reg
    130  f286							; [BIT DEPTH] #4 *If-End @ 4
    131  f286							; [BIT DEPTH] #4 Else-End @ 4
    132  f286				   .endif_4
    133  f286							; [BIT DEPTH] Final: 4 (out of 8 bits)
    134  f286					      rol
    135  f286					      rol
    136  f286					      rol
    137  f286					      rol
    138  f286					      ENDM
    139  f286
    140  f286					      MAC	nibble_gem_kernel_a_2_build
    141  f286					      lda	#0
    142  f286							; VD1 default
    143  f286					      ldx	[DO_GEMS_A + 1]
    144  f286					      stx	BuildKernelVdel1
    145  f286							; Gemini 4A
    146  f286					      ldx	SHARD_LUT_VD1
    147  f286					      cpx	#4
    148  f286				   .if_1
    149  f286					      beq	.else_1
    150  f286					      sec
    151  f286					      rol
    152  f286							; Set PHP
    153  f286							; Update VDEL1
    154  f286					      ldx	[DO_GEMS_A + 4]
    155  f286					      stx	BuildKernelVdel1
    156  f286					      jmp	.endif_1
    157  f286							; [BIT DEPTH] #1 If-End @ 1
    158  f286
    159  f286				   .else_1
    160  f286					      clc
    161  f286					      rol
    162  f286					      ldy	[DO_GEMS_A + 4]
    163  f286					      jsr	KernelA_UpdateRegs
    164  f286					      sty	RamKernelGemini4
    165  f286							; Set PHP
    166  f286							; [BIT DEPTH] #1 *If-End @ 1
    167  f286							; [BIT DEPTH] #1 Else-End @ 1
    168  f286				   .endif_1
    169  f286							; VD1
    170  f286							; ldy #SHARD_VD1
    171  f286							; sty [KernelA_VDEL1 - $100]
    172  f286							; GRP0
    173  f286							; ldy #SHARD_GRP0
    174  f286							; sty [KernelA_VDEL0 - $100]
    175  f286							; X
    176  f286							; ldy #SHARD_X
    177  f286							; sty RamKernelX
    178  f286							; Y
    179  f286							; Gemini 5A
    180  f286							; TODO eventually...?
    181  f286							; [BIT DEPTH] Final: 1 (out of 8 bits)
    182  f286					      rol
    183  f286					      rol
    184  f286					      rol
    185  f286					      rol
    186  f286					      rol
    187  f286					      rol
    188  f286					      rol
    189  f286					      ENDM
    190  f286
    191  f286					      MAC	nibble_gem_kernel_b_build
    192  f286					      lda	#0
    193  f286							; Php target default
    194  f286					      ldx	#RESP1
    195  f286					      stx	RamKernelPhpTarget
    196  f286					      ldx	#SENTINEL
    197  f286					      stx	BuildKernelX
    198  f286					      stx	BuildKernelY
    199  f286					      stx	BuildKernelRST
    200  f286							; Gemini 0B
    201  f286					      ldy	[DO_GEMS_B + 0]
    202  f286					      sty	BuildKernelGrp0
    203  f286							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    204  f286							; Gemini 1B
    205  f286					      ldy	[DO_GEMS_B + 1]
    206  f286					      jsr	KernelA_UpdateRegs
    207  f286					      sty	RamKernelGemini1
    208  f286							; Calculate Gemini 2B
    209  f286					      ldy	[DO_GEMS_B + 2]
    210  f286					      jsr	KernelB_UpdateRegs
    211  f286					      sty	RamKernelGemini2
    212  f286							; Calculate Gemini 3B
    213  f286					      ldy	[DO_GEMS_B + 3]
    214  f286					      jsr	KernelB_UpdateRegs
    215  f286					      sty	RamKernelGemini3
    216  f286							; Gemini 2B
    217  f286				   .K_2B
    218  f286					      ldy	[DO_GEMS_B + 2]
    219  f286					      jsr	KernelB_GenPhp
    220  f286				   .if_1
    221  f286					      bne	.else_1
    222  f286					      sec
    223  f286					      rol
    224  f286							; Write to PHP in 2B
    225  f286					      jmp	.endif_1
    226  f286							; [BIT DEPTH] #1 If-End @ 1
    227  f286
    228  f286				   .else_1
    229  f286					      clc
    230  f286					      rol
    231  f286							; [BIT DEPTH] #1 *If-End @ 1
    232  f286							; [BIT DEPTH] #1 Else-End @ 1
    233  f286				   .endif_1
    234  f286							; Gemini 3B
    235  f286					      ldy	[DO_GEMS_B + 3]
    236  f286					      jsr	KernelB_GenPhp
    237  f286				   .if_2
    238  f286					      bne	.else_2
    239  f286					      sec
    240  f286					      rol
    241  f286							; Write to PHP in 3B
    242  f286					      jmp	.endif_2
    243  f286							; [BIT DEPTH] #2 If-End @ 2
    244  f286
    245  f286				   .else_2
    246  f286					      clc
    247  f286					      rol
    248  f286							; [BIT DEPTH] #2 *If-End @ 2
    249  f286							; [BIT DEPTH] #2 Else-End @ 2
    250  f286				   .endif_2
    251  f286							; Gemini 4B
    252  f286					      ldy	[DO_GEMS_B + 4]
    253  f286					      jsr	KernelA_UpdateRegs
    254  f286				   .K_4B
    255  f286					      sty	RamKernelGemini4
    256  f286							; TODO if no PHP, rewrite previous section:
    257  f286							; NIBBLE_IF cs
    258  f286							;
    259  f286							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    260  f286							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    261  f286							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    262  f286							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    263  f286							; NIBBLE_END_IF
    264  f286							; Make adjustments for sprites.
    265  f286					      ror	BuildKernelGrp0
    266  f286					      ror	BuildKernelX
    267  f286					      ror	BuildKernelY
    268  f286							;
    269  f286							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    270  f286							; GRP0
    271  f286							; X
    272  f286							; Y
    273  f286							; [BIT DEPTH] Final: 2 (out of 8 bits)
    274  f286					      rol
    275  f286					      rol
    276  f286					      rol
    277  f286					      rol
    278  f286					      rol
    279  f286					      rol
    280  f286					      ENDM
    281  f286
    282  f286
    283  f286					      MAC	nibble_gem_kernel_a_1
    284  f286				   .if_1
    285  f286					      asl
    286  f286					      bcc	.else_1
    287  f286					      jmp	.endif_1
    288  f286				   .else_1
    289  f286				   .if_2
    290  f286					      asl
    291  f286					      bcc	.else_2
    292  f286					      ldx	#BC_STX
    293  f286					      stx	[KernelA_D_W + 0]
    294  f286					      ldx	#RESP1
    295  f286					      stx	[KernelA_D_W + 1]
    296  f286					      jmp	.endif_2
    297  f286				   .else_2
    298  f286					      ldx	RamKernelGemini1
    299  f286					      stx	[KernelA_D_W + 0]
    300  f286					      ldx	RamKernelGemini1Reg
    301  f286					      stx	[KernelA_D_W + 1]
    302  f286				   .endif_2
    303  f286				   .endif_1
    304  f286				   .if_3
    305  f286					      asl
    306  f286					      bcc	.else_3
    307  f286					      ldx	#NOP_REG
    308  f286					      stx	[KernelA_E_W + 1 + 0]
    309  f286					      ldx	#RESP1
    310  f286					      stx	[KernelA_G_W + 1 + 0]
    311  f286					      jmp	.endif_3
    312  f286				   .else_3
    313  f286					      ldx	#RESP1
    314  f286					      stx	[KernelA_E_W + 1 + 0]
    315  f286					      ldx	RamKernelGemini2
    316  f286					      stx	[KernelA_G_W + 0]
    317  f286					      ldx	RamKernelGemini2Reg
    318  f286					      stx	[KernelA_G_W + 1]
    319  f286				   .endif_3
    320  f286				   .if_4
    321  f286					      asl
    322  f286					      bcc	.else_4
    323  f286					      ldx	#RESP1
    324  f286					      stx	[KernelA_H_W + 1 + 0]
    325  f286					      jmp	.endif_4
    326  f286				   .else_4
    327  f286					      ldx	RamKernelGemini3
    328  f286					      stx	[KernelA_H_W + 0]
    329  f286					      ldx	RamKernelGemini3Reg
    330  f286					      stx	[KernelA_H_W + 1]
    331  f286				   .endif_4
    332  f286					      ENDM
    333  f286
    334  f286					      MAC	nibble_gem_kernel_a_2
    335  f286				   .if_1
    336  f286					      asl
    337  f286					      bcc	.else_1
    338  f286					      ldx	#BC_STA
    339  f286					      stx	[[KernelA_I_W + 0] + 0]
    340  f286					      ldx	#EMERALD_SP_RESET
    341  f286					      stx	[[KernelA_I_W + 0] + 1]
    342  f286					      ldx	#BC_STA
    343  f286					      stx	[[KernelA_J_W + 1] + 0]
    344  f286					      ldx	#PF1
    345  f286					      stx	[[KernelA_J_W + 1] + 1]
    346  f286					      ldx	#BC_PHP
    347  f286					      stx	[[KernelA_K_W + 1] + 0]
    348  f286					      ldx	#VDELP1
    349  f286					      stx	[RamKernelPhpTarget + 0]
    350  f286					      jmp	.endif_1
    351  f286				   .else_1
    352  f286					      ldx	#BC_PHP
    353  f286					      stx	[[KernelA_I_W + 0] + 0]
    354  f286					      ldx	#BC_STA
    355  f286					      stx	[[KernelA_J_W + 0] + 0]
    356  f286					      ldx	#PF1
    357  f286					      stx	[[KernelA_J_W + 0] + 1]
    358  f286					      ldx	RamKernelGemini4
    359  f286					      stx	[KernelA_K_W + 0]
    360  f286					      ldx	#EMERALD_SP
    361  f286					      stx	[KernelA_K_W + 1]
    362  f286					      ldx	#RESP1
    363  f286					      stx	[RamKernelPhpTarget + 0]
    364  f286				   .endif_1
    365  f286					      ldx	BuildKernelVdel1
    366  f286					      stx	[[KernelA_VDEL1 - $100] + 0]
    367  f286					      ldx	BuildKernelGrp0
    368  f286					      stx	[[KernelA_VDEL0 - $100] + 0]
    369  f286					      ldx	BuildKernelX
    370  f286					      stx	[RamKernelX + 0]
    371  f286					      ldx	BuildKernelY
    372  f286					      stx	[[KernelA_STY - $100] + 0]
    373  f286					      ENDM
    374  f286
    375  f286					      MAC	nibble_gem_kernel_b
    376  f286					      ldx	RamKernelGemini1
    377  f286					      stx	[KernelB_D_W + 0]
    378  f286				   .if_1
    379  f286					      asl
    380  f286					      bcc	.else_1
    381  f286					      ldx	#EMERALD_SP
    382  f286					      stx	[RamKernelPhpTarget + 0]
    383  f286					      ldx	#BC_STY
    384  f286					      stx	[[KernelB_E_W + 0] + 0]
    385  f286					      ldx	#EMERALD_SP_RESET
    386  f286					      stx	[[KernelB_E_W + 0] + 1]
    387  f286					      ldx	#BC_PHP
    388  f286					      stx	[[KernelB_F_W + 1] + 0]
    389  f286					      ldx	#BC_STA
    390  f286					      stx	[[KernelB_G_W + 0] + 0]
    391  f286					      ldx	#PF1
    392  f286					      stx	[[KernelB_G_W + 0] + 1]
    393  f286					      ldx	RamKernelGemini3
    394  f286					      stx	[[KernelB_H_W + 0] + 0]
    395  f286					      ldx	#EMERALD_SP
    396  f286					      stx	[[KernelB_H_W + 0] + 1]
    397  f286					      jmp	.endif_1
    398  f286				   .else_1
    399  f286					      ldx	RamKernelGemini2
    400  f286					      stx	[KernelB_F_W + 0]
    401  f286					      ldx	#EMERALD_SP
    402  f286					      stx	[KernelB_F_W + 1]
    403  f286				   .endif_1
    404  f286				   .if_2
    405  f286					      asl
    406  f286					      bcc	.else_2
    407  f286					      ldx	#EMERALD_SP
    408  f286					      stx	[RamKernelPhpTarget + 0]
    409  f286					      ldx	#BC_STY
    410  f286					      stx	[[KernelB_E_W + 0] + 0]
    411  f286					      ldx	#EMERALD_SP_RESET
    412  f286					      stx	[[KernelB_E_W + 0] + 1]
    413  f286					      ldx	RamKernelGemini2
    414  f286					      stx	[[KernelB_F_W + 1] + 0]
    415  f286					      ldx	#EMERALD_SP
    416  f286					      stx	[[KernelB_F_W + 1] + 1]
    417  f286					      ldx	#BC_STA
    418  f286					      stx	[[KernelB_G_W + 1] + 0]
    419  f286					      ldx	#PF1
    420  f286					      stx	[[KernelB_G_W + 1] + 1]
    421  f286					      ldx	#BC_PHP
    422  f286					      stx	[[KernelB_H_W + 1] + 0]
    423  f286					      jmp	.endif_2
    424  f286				   .else_2
    425  f286					      ldx	RamKernelGemini3
    426  f286					      stx	[KernelA_H_W + 0]
    427  f286					      ldx	#EMERALD_SP
    428  f286					      stx	[KernelA_H_W + 1]
    429  f286				   .endif_2
    430  f286					      ldx	RamKernelGemini4
    431  f286					      stx	[KernelB_J_W + 0]
    432  f286					      ldx	BuildKernelGrp0
    433  f286					      stx	[[KernelB_VDEL0 - $100] + 0]
    434  f286					      ldx	BuildKernelX
    435  f286					      stx	[RamKernelX + 0]
    436  f286					      ldx	BuildKernelY
    437  f286					      stx	[[KernelB_STY - $100] + 0]
    438  f286					      ENDM
    439  f286
    440  f286
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f286					      include	"nibble_shard.s"
      1  f286							; conflict: 11011000 #%0011 #%1000
      2  f286							; conflict: 11011001 #%0011 #%1000
      3  f286							; conflict: 11011010 #%0011 #%1000
      4  f286							; conflict: 11011011 #%0011 #%1000
      5  f286							; conflict: 11100100 #%1000 #%0011
      6  f286							; conflict: 11100101 #%1000 #%0011
      7  f286							; conflict: 11100110 #%1000 #%0011
      8  f286							; conflict: 11100111 #%1000 #%0011
      9  f286							; conflict: 01111000 #%1000 #%0001
     10  f286							; conflict: 01111001 #%1000 #%0001
     11  f286							; conflict: 01111010 #%1000 #%0001
     12  f286							; conflict: 01111011 #%1000 #%0001
     13  f286							; conflict: 10110100 #%1000 #%0001
     14  f286							; conflict: 10110101 #%1000 #%0001
     15  f286							; conflict: 10110110 #%1000 #%0001
     16  f286							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400							; Frame loop, including calling out to other kernels.
      2  f400
      3  f400		       00 aa	   SENTINEL   =	%010101010
      4  f400
      5  f400							; Reflected for Kernel A
      6  f400		       00 00	   G00	      =	%00000000
      7  f400		       00 60	   G01	      =	%01100000
      8  f400		       00 06	   G10	      =	%00000110
      9  f400		       00 66	   G11	      =	%01100110
     10  f400
     11  f400							; Reflected for Kernel A
     12  f400		       00 00	   G00	      =	%00000000
     13  f400		       00 60	   G01	      =	%01100000
     14  f400		       00 06	   G10	      =	%00000110
     15  f400		       00 66	   G11	      =	%01100110
     16  f400
     17  f400
     18  f400							; gems:     [g01,g10,g01,g11,g00,g00]
     19  f400							; cpu:      cpu(g01,g00,false,g10,g11,false)
     20  f400							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     21  f400
     22  f400							; gems:     [g00,g01,g10,g11,g00,g01]
     23  f400							; cpu:      cpu(g01,g00,false,g10,g11,false)
     24  f400							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     25  f400
     26  f400							; gems:     [g01,g10,g11,g00,g01,g10]
     27  f400							; cpu:      cpu(g01,g01,false,g10,g11,false)
     28  f400							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     29  f400
     30  f400							; gems:     [g10,g11,g00,g01,g10,g11]
     31  f400							; cpu:      cpu(g10,g10,false,g11,g01,false)
     32  f400							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     33  f400
     34  f400							; gems:     [g01,g00,g00,g11,g01,g11]
     35  f400							; cpu:      cpu(g01,g01,false,g00,g11,false)
     36  f400							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     37  f400
     38  f400							; gems:     [g11,g01,g01,g01,g01,g00]
     39  f400							; cpu:      cpu(g00,g01,false,g11,g00,false)
     40  f400							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     41  f400
     42  f400							; gems:     [g10,g10,g11,g00,g11,g01]
     43  f400							; cpu:      cpu(g00,g00,false,g10,g11,false)
     44  f400							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     45  f400
     46  f400							; gems:     [g01,g00,g00,g11,g01,g11]
     47  f400							; cpu:      cpu(g00,g01,false,g01,g11,false)
     48  f400							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     49  f400
     50  f400							; gems:     [g11,g10,g00,g01,g00,g01]
     51  f400							; cpu:      cpu(g11,g00,false,g10,g01,false)
     52  f400							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     53  f400
     54  f400							; Y=Gemini Sprite
     55  f400							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     56  f400							; processor flag Z is TRUE if this is RST.
     57  f400				   KernelA_GenReset subroutine
     58  f400		       c0 00		      cpy	#$00
     59  f402		       f0 01		      beq	.start
     60  f404		       60		      rts
     61  f405							; Current Gemini = $00
     62  f405				   .start
     63  f405		       a6 a6		      ldx	BuildKernelRST
     64  f407		       e0 aa		      cpx	#SENTINEL
     65  f409		       d0 04		      bne	.set_else
     66  f40b							; We have found the first (and only) RST on this line, set the marker var
     67  f40b		       a2 ff		      ldx	#$ff
     68  f40d		       86 a6		      stx	BuildKernelRST
     69  f40f				   .set_else
     70  f40f		       a2 00		      ldx	#$00
     71  f411		       60		      rts
     72  f412
     73  f412							; Y=Gemini Sprite
     74  f412							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     75  f412							; processor flag Z is TRUE if this is RST.
     76  f412				   KernelB_GenPhp subroutine
     77  f412		       c0 06		      cpy	#G10
     78  f414		       f0 05		      beq	.start
     79  f416		       c0 66		      cpy	#G11
     80  f418		       f0 01		      beq	.start
     81  f41a		       60		      rts
     82  f41b							; Current Gemini = $00
     83  f41b				   .start
     84  f41b		       a6 a6		      ldx	BuildKernelRST
     85  f41d		       e0 aa		      cpx	#SENTINEL
     86  f41f		       d0 06		      bne	.set_else
     87  f421							; We have found the first (and only) RST on this line, set the marker var
     88  f421		       a2 ff		      ldx	#$ff
     89  f423		       86 a6		      stx	BuildKernelRST
     90  f425		       a2 00		      ldx	#$00
     91  f427				   .set_else
     92  f427		       60		      rts
     93  f428
     94  f428							; Allocates build-time registers for a new Gemini sprite value.
     95  f428							; register Y = the storage opcode to write to the result
     96  f428							;
     97  f428							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     98  f428							; BuildKernelX, BuildKernelY are upgraded if not set.
     99  f428							; Y=Gemini Sprite
    100  f428				   KernelB_UpdateRegs
    101  f428				   KernelA_UpdateRegs subroutine
    102  f428
    103  f428							; If equal to GRP0, return nop
    104  f428							; FIXME GRP0 might not always be up to date (should update each entry?)
    105  f428							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    106  f428							; cpy BuildKernelGrp0
    107  f428							; bne .set_start
    108  f428							; ; TODO if this is stx + NOP value, then register doesn't have to change as
    109  f428							; ; often in GEM1ASWITCH
    110  f428							; ldy #BC_NOP
    111  f428							; rts
    112  f428
    113  f428		       c4 a4		      cpy	BuildKernelX
    114  f42a		       d0 03		      bne	.op_else
    115  f42c		       a0 86		      ldy	#BC_STX
    116  f42e		       60		      rts
    117  f42f				   .op_else
    118  f42f		       c4 a5		      cpy	BuildKernelY
    119  f431		       d0 03		      bne	.op_end
    120  f433		       a0 84		      ldy	#BC_STY
    121  f435		       60		      rts
    122  f436				   .op_end
    123  f436
    124  f436				   .set_start
    125  f436		       a6 a4		      ldx	BuildKernelX
    126  f438		       e0 aa		      cpx	#SENTINEL
    127  f43a		       d0 05		      bne	.set_else
    128  f43c		       84 a4		      sty	BuildKernelX
    129  f43e		       a0 86		      ldy	#BC_STX
    130  f440		       60		      rts
    131  f441				   .set_else
    132  f441		       a6 a5		      ldx	BuildKernelY
    133  f443		       e0 aa		      cpx	#SENTINEL
    134  f445		       d0 05		      bne	.set_end
    135  f447		       84 a5		      sty	BuildKernelY
    136  f449		       a0 84		      ldy	#BC_STY
    137  f44b		       60		      rts
    138  f44c				   .set_end
    139  f44c							; Failed all
      0  f44c					      ASSERT_RUNTIME	"0"
      1  f44c				   .COND      SET	"0"
 ASSERT: breakif { pc== $f44c  && !(  0  ) }
      2  f44c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    141  f44c		       60		      rts
    142  f44d
    143  f44d							; Vertical Sync
    144  f44d				   VerticalSync subroutine
      0  f44d					      VERTICAL_SYNC
      1  f44d		       a9 0e		      lda	#%1110
      2  f44f		       85 02	   .VSLP1     sta	WSYNC
      3  f451		       85 00		      sta	VSYNC
      4  f453		       4a		      lsr
      5  f454		       d0 f9		      bne	.VSLP1
    146  f456
    147  f456				   FrameStart subroutine
      0  f456					      ASSERT_RUNTIME	"_scan == #0"
      1  f456				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f456  && !(  _scan == #0  ) }
      2  f456					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    149  f456
    150  f456				   VerticalBlank subroutine
      0  f456					      TIMER_SETUP	37
      1  f456				   .lines     SET	37
      2  f456		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f458		       85 02		      sta	WSYNC
      4  f45a		       8d 96 02 	      sta	TIM64T
    152  f45d
    153  f45d							; Scanline counter
    154  f45d		       a9 10		      lda	#ROW_COUNT
    155  f45f		       85 83		      sta	LoopCount
    156  f461
    157  f461							; Frame counter
    158  f461		       e6 84		      inc	FrameCount
    159  f463
    160  f463							; Skip every 8 frames for increasing demo index
    161  f463		       a5 84		      lda	FrameCount
    162  f465		       29 07		      and	#FrameSkip
    163  f467		       c9 07		      cmp	#FrameSkip
    164  f469		       d0 0d		      bne	.next_next_thing
    165  f46b
    166  f46b		       18		      clc
    167  f46c		       a5 8f		      lda	ROW_DEMO_INDEX
    168  f46e		       69 04		      adc	#4
    169  f470		       c9 68		      cmp	#[level_01_end - level_01]
    170  f472		       90 02		      bcc	.next_thing_local
    171  f474		       a9 00		      lda	#0
    172  f476				   .next_thing_local
    173  f476		       85 8f		      sta	ROW_DEMO_INDEX
    174  f478				   .next_next_thing
    175  f478		       85 02		      sta	WSYNC
    176  f47a
    177  f47a							; Positioning
      0  f47a					      SLEEP	40
      1  f47a				   .CYCLES    SET	40
      2  f47a
      3  f47a				  -	      IF	.CYCLES < 2
      4  f47a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f47a				  -	      ERR
      6  f47a					      ENDIF
      7  f47a
      8  f47a				  -	      IF	.CYCLES & 1
      9  f47a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f47a				  -	      nop	0
     11  f47a				  -	      ELSE
     12  f47a				  -	      bit	VSYNC
     13  f47a				  -	      ENDIF
     14  f47a				  -.CYCLES    SET	.CYCLES - 3
     15  f47a					      ENDIF
     16  f47a
     17  f47a					      REPEAT	.CYCLES / 2
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     17  f47c					      REPEND
     18  f47d		       ea		      nop
     17  f47d					      REPEND
     18  f47e		       ea		      nop
     17  f47e					      REPEND
     18  f47f		       ea		      nop
     17  f47f					      REPEND
     18  f480		       ea		      nop
     17  f480					      REPEND
     18  f481		       ea		      nop
     17  f481					      REPEND
     18  f482		       ea		      nop
     17  f482					      REPEND
     18  f483		       ea		      nop
     17  f483					      REPEND
     18  f484		       ea		      nop
     17  f484					      REPEND
     18  f485		       ea		      nop
     17  f485					      REPEND
     18  f486		       ea		      nop
     17  f486					      REPEND
     18  f487		       ea		      nop
     17  f487					      REPEND
     18  f488		       ea		      nop
     17  f488					      REPEND
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     17  f48a					      REPEND
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     19  f48e					      REPEND
    179  f48e		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    180  f490		       85 02		      sta	WSYNC
    181  f492
    182  f492							; Misc
    183  f492		       a9 00		      lda	#00
    184  f494		       85 1e		      sta	EMERALD_MI_ENABLE
    185  f496
    186  f496							; Assign dervied SpriteEnd value
    187  f496		       18		      clc
    188  f497		       a9 c8		      lda	#HEIGHT_OFFSET
    189  f499		       e5 8a		      sbc	YPos
    190  f49b		       85 86		      sta	SpriteEnd
    191  f49d
    192  f49d							; Player 1
    193  f49d		       a5 87		      lda	XPos
    194  f49f		       a2 00		      ldx	#0
    195  f4a1		       20 44 fa 	      jsr	SetHorizPos
    196  f4a4
    197  f4a4							; Extract 26-bit string to full Gemini profile
    198  f4a4		       20 00 f9 	      jsr	gemini_populate
    199  f4a7
    200  f4a7				   frame_setup subroutine
    201  f4a7							; Kernel A or B
    202  f4a7		       a9 01		      lda	#01
    203  f4a9		       25 84		      and	FrameCount
    204  f4ab		       d0 24		      bne	frame_setup_kernel_b
    205  f4ad
    206  f4ad				   frame_setup_kernel_a subroutine
    207  f4ad							; Load kernel into CBSRAM
    208  f4ad		       20 62 f2 	      jsr	LoadKernelA
    209  f4b0
    210  f4b0							; Move missile
    211  f4b0		       85 02		      sta	WSYNC
      0  f4b2					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f4b2				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f4b2
      3  f4b2				  -	      IF	.CYCLES < 2
      4  f4b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b2				  -	      ERR
      6  f4b2					      ENDIF
      7  f4b2
      8  f4b2				  -	      IF	.CYCLES & 1
      9  f4b2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b2				  -	      nop	0
     11  f4b2				  -	      ELSE
     12  f4b2				  -	      bit	VSYNC
     13  f4b2				  -	      ENDIF
     14  f4b2				  -.CYCLES    SET	.CYCLES - 3
     15  f4b2					      ENDIF
     16  f4b2
     17  f4b2					      REPEAT	.CYCLES / 2
     18  f4b2		       ea		      nop
     17  f4b2					      REPEND
     18  f4b3		       ea		      nop
     17  f4b3					      REPEND
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     17  f4b5					      REPEND
     18  f4b6		       ea		      nop
     17  f4b6					      REPEND
     18  f4b7		       ea		      nop
     17  f4b7					      REPEND
     18  f4b8		       ea		      nop
     17  f4b8					      REPEND
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     17  f4ba					      REPEND
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     19  f4c0					      REPEND
    213  f4c0		       85 13		      sta	EMERALD_MI_RESET
    214  f4c2		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    215  f4c4		       85 23		      sta	EMERALD_MI_HMOVE
    216  f4c6
    217  f4c6							; DEBUG: Set per-kernel color
    218  f4c6		       a2 cc		      ldx	#COL_EMERALD
    219  f4c8		       86 07		      stx	EMERALD_SP_COLOR
    220  f4ca
    221  f4ca							; Set reflection for Jetpack.
    222  f4ca		       a9 ff		      lda	#%11111111
    223  f4cc		       85 0c		      sta	REFP1
    224  f4ce
    225  f4ce		       4c fe f4 	      jmp	frame_setup_complete
    226  f4d1
    227  f4d1				   frame_setup_kernel_b subroutine
    228  f4d1							; Load kernel into CBSRAM
    229  f4d1		       20 74 f2 	      jsr	LoadKernelB
    230  f4d4
    231  f4d4							; Move missile
    232  f4d4		       85 02		      sta	WSYNC
      0  f4d6					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f4d6				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f4d6
      3  f4d6				  -	      IF	.CYCLES < 2
      4  f4d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4d6				  -	      ERR
      6  f4d6					      ENDIF
      7  f4d6
      8  f4d6					      IF	.CYCLES & 1
      9  f4d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4d6		       04 00		      nop	0
     11  f4d8				  -	      ELSE
     12  f4d8				  -	      bit	VSYNC
     13  f4d8					      ENDIF
     14  f4d8				   .CYCLES    SET	.CYCLES - 3
     15  f4d8					      ENDIF
     16  f4d8
     17  f4d8					      REPEAT	.CYCLES / 2
     18  f4d8		       ea		      nop
     17  f4d8					      REPEND
     18  f4d9		       ea		      nop
     17  f4d9					      REPEND
     18  f4da		       ea		      nop
     17  f4da					      REPEND
     18  f4db		       ea		      nop
     17  f4db					      REPEND
     18  f4dc		       ea		      nop
     17  f4dc					      REPEND
     18  f4dd		       ea		      nop
     17  f4dd					      REPEND
     18  f4de		       ea		      nop
     17  f4de					      REPEND
     18  f4df		       ea		      nop
     17  f4df					      REPEND
     18  f4e0		       ea		      nop
     17  f4e0					      REPEND
     18  f4e1		       ea		      nop
     17  f4e1					      REPEND
     18  f4e2		       ea		      nop
     17  f4e2					      REPEND
     18  f4e3		       ea		      nop
     17  f4e3					      REPEND
     18  f4e4		       ea		      nop
     17  f4e4					      REPEND
     18  f4e5		       ea		      nop
     17  f4e5					      REPEND
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     17  f4eb					      REPEND
     18  f4ec		       ea		      nop
     17  f4ec					      REPEND
     18  f4ed		       ea		      nop
     17  f4ed					      REPEND
     18  f4ee		       ea		      nop
     17  f4ee					      REPEND
     18  f4ef		       ea		      nop
     19  f4f0					      REPEND
    234  f4f0		       85 13		      sta	EMERALD_MI_RESET
    235  f4f2		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    236  f4f4		       85 23		      sta	EMERALD_MI_HMOVE
    237  f4f6
    238  f4f6							; DEBUG: Set per-kernel color
    239  f4f6							; ldx #$e0
    240  f4f6		       a2 cc		      ldx	#COL_EMERALD
    241  f4f8		       86 07		      stx	EMERALD_SP_COLOR
    242  f4fa
    243  f4fa							; Disable reflection for Jetpack.
    244  f4fa		       a9 ff		      lda	#%11111111
    245  f4fc		       85 0c		      sta	REFP1
    246  f4fe
    247  f4fe				   frame_setup_complete
    248  f4fe		       ad 00 f1 	      lda	$f100
    249  f501		       85 80		      sta	DebugKernelID
    250  f503
    251  f503		       ad 7c fd 	      lda	shard_map
    252  f506		       a0 01		      ldy	#1	; gemini counter, starting at 1
    253  f508				   gemini_builder
    254  f508		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    255  f50a		       d0 00		      bne	.no_vd0
    256  f50c				   .no_vd0
    257  f50c
    258  f50c
    259  f50c				   nibble_precompile_gem_kernel
    260  f50c				   DBG_NIBBLE
    261  f50c		       00 a9	   BC_LDA_IMM =	$a9
    262  f50c		       00 85	   BC_STA     =	$85
    263  f50c		       00 86	   BC_STX     =	$86
    264  f50c		       00 84	   BC_STY     =	$84
    265  f50c		       00 08	   BC_PHP     =	$08
    266  f50c		       00 04	   BC_NOP     =	$04
    267  f50c
    268  f50c		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    269  f50c
    270  f50c				   KernelA_D_W EQM	[KernelA_D - $100]
    271  f50c				   KernelA_E_W EQM	[KernelA_E - $100]
    272  f50c				   KernelA_G_W EQM	[KernelA_G - $100]
    273  f50c				   KernelA_H_W EQM	[KernelA_H - $100]
    274  f50c				   KernelA_I_W EQM	[KernelA_I - $100]
    275  f50c				   KernelA_J_W EQM	[KernelA_J - $100]
    276  f50c				   KernelA_K_W EQM	[KernelA_K - $100]
    277  f50c
    278  f50c				   KernelB_D_W EQM	[KernelB_D - $100]
    279  f50c				   KernelB_E_W EQM	[KernelB_E - $100]
    280  f50c				   KernelB_F_W EQM	[KernelB_F - $100]
    281  f50c				   KernelB_G_W EQM	[KernelB_G - $100]
    282  f50c				   KernelB_H_W EQM	[KernelB_H - $100]
    283  f50c				   KernelB_I_W EQM	[KernelB_I - $100]
    284  f50c				   KernelB_J_W EQM	[KernelB_J - $100]
    285  f50c				   KernelB_K_W EQM	[KernelB_K - $100]
    286  f50c
    287  f50c							; Nibble Kernel A
      0  f50c					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00d0 ????				      seg.U	ignoreme
    289 U00d0 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    290 U00d2 ????	       86 a4		      stx	BuildKernelX
    291 U00d4 ????	       86 a5		      stx	BuildKernelY
    292 U00d6 ????	       86 a6		      stx	BuildKernelRST
    293 U00d8 ????
    294 U00d8 ????						; Gemini 1A
    295 U00d8 ????			   .K_1A
    296 U00d8 ????	       a4 af		      ldy	[DO_GEMS_A + 0]
    297 U00da ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U00dd ????				      NIBBLE_IF	eq
    299 U00dd ????						; Special: Encoding RST0
    300 U00dd ????						; Rewrite lda RamKernelPF1 to be #immediate
    301 U00dd ????	       a0 a9		      ldy	#BC_LDA_IMM
    302 U00df ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    303 U00e2 ????	       a0 a0		      ldy	#%10100000
    304 U00e4 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    305 U00e7 ????						; Store 1A in GRP0
    306 U00e7 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    307 U00e9 ????	       84 a7		      sty	BuildKernelGrp0
    308 U00eb ????						; Gemini 1A is RESPx
    309 U00eb ????	       a0 11		      ldy	#EMERALD_SP_RESET
    310 U00ed ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    311 U00f0 ????						; Turn 3-cycle NOP into 4-cycle
    312 U00f0 ????	       a0 14		      ldy	#$14	; TODO what is this
    313 U00f2 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U00f5 ????				      NIBBLE_ELSE
    315 U00f5 ????						; Store 0A in GRP0
    316 U00f5 ????	       a4 af		      ldy	[DO_GEMS_A + 0]
    317 U00f7 ????	       84 a7		      sty	BuildKernelGrp0
    318 U00f9 ????
    319 U00f9 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    320 U00fb ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U00fe ????				      NIBBLE_IF	eq
    322 U00fe ????						; GEM1ASWITCH
      0 U00fe ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U00fe ????				      NIBBLE_ELSE
    325 U00fe ????						; Calculate the 1A value
    326 U00fe ????	       ac d4 f9 	      ldy	SHARD_LUT_RF1
    327 U0101 ????	       c0 01		      cpy	#1
    328 U0103 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    329 U0105 ????	       a0 11		      ldy	#RESP1
    330 U0107 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    331 U0108 ????	       a0 1c		      ldy	#GRP1
    332 U010a ????	       84 9c		      sty	RamKernelGemini1Reg
    333 U010c ????
    334 U010c ????						; Set opcode
    335 U010c ????	       ae d4 f9 	      ldx	SHARD_LUT_RF1
    336 U010f ????	       e0 01		      cpx	#1
    337 U0111 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    338 U0113 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    339 U0115 ????	       a4 b0		      ldy	[DO_GEMS_A + 1]
    340 U0117 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    341 U011a ????	       84 9b		      sty	RamKernelGemini1
    342 U011c ????
      0 U011c ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U011c ????				      NIBBLE_END_IF
      0 U011c ????				      NIBBLE_END_IF
    346 U011c ????
    347 U011c ????						; BuildKernelX, BuildKernelY are upgraded if not set
    348 U011c ????						; Gemini 2A
    349 U011c ????	       a4 b1		      ldy	[DO_GEMS_A + 2]
    350 U011e ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U0121 ????				      NIBBLE_IF	eq
      0 U0121 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0121 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0121 ????				      NIBBLE_ELSE
    355 U0121 ????						; Set opcode
    356 U0121 ????	       a4 b1		      ldy	[DO_GEMS_A + 2]
    357 U0123 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    358 U0126 ????	       84 9d		      sty	RamKernelGemini2
    359 U0128 ????
    360 U0128 ????						; Set opcode target
    361 U0128 ????	       ac d4 f9 	      ldy	SHARD_LUT_RF1
    362 U012b ????	       c0 02		      cpy	#2
    363 U012d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    364 U012f ????	       a0 11		      ldy	#RESP1
    365 U0131 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    366 U0132 ????	       a0 1c		      ldy	#GRP1
    367 U0134 ????	       84 9e		      sty	RamKernelGemini2Reg
    368 U0136 ????
      0 U0136 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0136 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0136 ????				      NIBBLE_END_IF
    372 U0136 ????
    373 U0136 ????						; Gemini 3A
    374 U0136 ????	       a4 b2		      ldy	[DO_GEMS_A + 3]
    375 U0138 ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U013b ????				      NIBBLE_IF	eq
      0 U013b ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U013b ????				      NIBBLE_ELSE
    379 U013b ????						; Set opcode
    380 U013b ????	       a4 b2		      ldy	[DO_GEMS_A + 3]
    381 U013d ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    382 U0140 ????	       84 9f		      sty	RamKernelGemini3
    383 U0142 ????
    384 U0142 ????						; Set opcode target
    385 U0142 ????	       ac d4 f9 	      ldy	SHARD_LUT_RF1
    386 U0145 ????	       c0 03		      cpy	#3
    387 U0147 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    388 U0149 ????	       a0 11		      ldy	#RESP1
    389 U014b ????	       2c		      .byte.b	$2C	; .bit (ABS)
    390 U014c ????	       a0 1c		      ldy	#GRP1
    391 U014e ????	       84 a0		      sty	RamKernelGemini3Reg
    392 U0150 ????
      0 U0150 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0150 ????				      NIBBLE_END_IF
      0 U0150 ????				      NIBBLE_END_KERNEL
      1  f50c					      seg	CodeBank3
    396  f50c
      0  f50c					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0150 ????				      seg.U	ignoreme
    398 U0150 ????						; VD1 default
    399 U0150 ????	       a6 b0		      ldx	[DO_GEMS_A + 1]
    400 U0152 ????	       86 a8		      stx	BuildKernelVdel1
    401 U0154 ????
    402 U0154 ????						; Gemini 4A
    403 U0154 ????	       ae d5 f9 	      ldx	SHARD_LUT_VD1
    404 U0157 ????	       e0 04		      cpx	#4
      0 U0159 ????				      NIBBLE_IF	ne
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    409 U0159 ????
    410 U0159 ????						; Set PHP
      0 U0159 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    412 U0159 ????
    413 U0159 ????						; Update VDEL1
    414 U0159 ????	       a6 b3		      ldx	[DO_GEMS_A + 4]
    415 U015b ????	       86 a8		      stx	BuildKernelVdel1
      0 U015d ????				      NIBBLE_ELSE
    417 U015d ????	       a4 b3		      ldy	[DO_GEMS_A + 4]
    418 U015f ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    419 U0162 ????	       84 a1		      sty	RamKernelGemini4
    420 U0164 ????
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U0164 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    424 U0164 ????
    425 U0164 ????						; Set PHP
      0 U0164 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U0164 ????				      NIBBLE_END_IF
    428 U0164 ????
    429 U0164 ????						; VD1
    430 U0164 ????						; ldy #SHARD_VD1
    431 U0164 ????						; sty [KernelA_VDEL1 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    433 U0164 ????						; GRP0
    434 U0164 ????						; ldy #SHARD_GRP0
    435 U0164 ????						; sty [KernelA_VDEL0 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    437 U0164 ????						; X
    438 U0164 ????						; ldy #SHARD_X
    439 U0164 ????						; sty RamKernelX
      0 U0164 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    441 U0164 ????						; Y
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    443 U0164 ????
    444 U0164 ????						; Gemini 5A
    445 U0164 ????						; TODO eventually...?
      0 U0164 ????				      NIBBLE_END_KERNEL
      1  f50c					      seg	CodeBank3
    447  f50c
    448  f50c							; Nibble Kernel B
      0  f50c					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U0164 ????				      seg.U	ignoreme
    450 U0164 ????						; Php target default
    451 U0164 ????	       a2 11		      ldx	#RESP1
    452 U0166 ????	       86 98		      stx	RamKernelPhpTarget
    453 U0168 ????
    454 U0168 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    455 U016a ????	       86 a4		      stx	BuildKernelX
    456 U016c ????	       86 a5		      stx	BuildKernelY
    457 U016e ????	       86 a6		      stx	BuildKernelRST
    458 U0170 ????
    459 U0170 ????						; Gemini 0B
    460 U0170 ????	       a4 b5		      ldy	[DO_GEMS_B + 0]
    461 U0172 ????	       84 a7		      sty	BuildKernelGrp0
    462 U0174 ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    463 U0174 ????
    464 U0174 ????						; Gemini 1B
    465 U0174 ????	       a4 b6		      ldy	[DO_GEMS_B + 1]
    466 U0176 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    467 U0179 ????	       84 9b		      sty	RamKernelGemini1
      0 U017b ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    469 U017b ????
    470 U017b ????						; Calculate Gemini 2B
    471 U017b ????	       a4 b7		      ldy	[DO_GEMS_B + 2]
    472 U017d ????	       20 28 f4 	      jsr	KernelB_UpdateRegs
    473 U0180 ????	       84 9d		      sty	RamKernelGemini2
    474 U0182 ????						; Calculate Gemini 3B
    475 U0182 ????	       a4 b8		      ldy	[DO_GEMS_B + 3]
    476 U0184 ????	       20 28 f4 	      jsr	KernelB_UpdateRegs
    477 U0187 ????	       84 9f		      sty	RamKernelGemini3
    478 U0189 ????
    479 U0189 ????						; Gemini 2B
    480 U0189 ????			   .K_2B
    481 U0189 ????	       a4 b7		      ldy	[DO_GEMS_B + 2]
    482 U018b ????	       20 12 f4 	      jsr	KernelB_GenPhp
      0 U018e ????				      NIBBLE_IF	eq
    484 U018e ????						; Write to PHP in 2B
      0 U018e ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U018e ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U018e ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
      0 U018e ????				      NIBBLE_ELSE
      0 U018e ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
      0 U018e ????				      NIBBLE_END_IF
    493 U018e ????
    494 U018e ????						; Gemini 3B
    495 U018e ????	       a4 b8		      ldy	[DO_GEMS_B + 3]
    496 U0190 ????	       20 12 f4 	      jsr	KernelB_GenPhp
      0 U0193 ????				      NIBBLE_IF	eq
    498 U0193 ????						; Write to PHP in 3B
      0 U0193 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
      0 U0193 ????				      NIBBLE_ELSE
      0 U0193 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, #EMERALD_SP
      0 U0193 ????				      NIBBLE_END_IF
    507 U0193 ????
    508 U0193 ????						; Gemini 4B
    509 U0193 ????	       a4 b9		      ldy	[DO_GEMS_B + 4]
    510 U0195 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    511 U0198 ????			   .K_4B
    512 U0198 ????	       84 a1		      sty	RamKernelGemini4
      0 U019a ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    514 U019a ????
    515 U019a ????						; TODO if no PHP, rewrite previous section:
    516 U019a ????						; NIBBLE_IF cs
    517 U019a ????						;     ; Write to PHP in reset command
    518 U019a ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    519 U019a ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    520 U019a ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    521 U019a ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    522 U019a ????						; NIBBLE_END_IF
    523 U019a ????
    524 U019a ????						; Make adjustments for sprites.
    525 U019a ????	       66 a7		      ror	BuildKernelGrp0
    526 U019c ????	       66 a4		      ror	BuildKernelX
    527 U019e ????	       66 a5		      ror	BuildKernelY
    528 U01a0 ????
    529 U01a0 ????						; ; VD1
    530 U01a0 ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    531 U01a0 ????						; GRP0
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    533 U01a0 ????						; X
      0 U01a0 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    535 U01a0 ????						; Y
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_STY - $100], BuildKernelY
    537 U01a0 ????
      0 U01a0 ????				      NIBBLE_END_KERNEL
      1  f50c					      seg	CodeBank3
    539  f50c
    540  f50c							; TODO do this for all rows
    541  f50c				   DBG_NIBBLE_BUILD subroutine
    542  f50c		       ae 00 f1 	      ldx	$f100
    543  f50f		       e0 0a		      cpx	#$a
    544  f511		       f0 03		      beq	[. + 5]
    545  f513		       4c ee f5 	      jmp	.kernel_b
    546  f516				   .kernel_a
      0  f516					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f516		       a9 00		      lda	#0
      2  f518		       a2 aa		      ldx	#SENTINEL
      3  f51a		       86 a4		      stx	BuildKernelX
      4  f51c		       86 a5		      stx	BuildKernelY
      5  f51e		       86 a6		      stx	BuildKernelRST
      6  f520
      7  f520				   .K_1A
      8  f520		       a4 af		      ldy	[DO_GEMS_A + 0]
      9  f522		       20 00 f4 	      jsr	KernelA_GenReset
     10  f525				   .if_1
     11  f525		       d0 1e		      bne	.else_1
     12  f527		       38		      sec
     13  f528		       2a		      rol
     14  f529
     15  f529
     16  f529		       a0 a9		      ldy	#BC_LDA_IMM
     17  f52b		       8c 16 f0 	      sty	[KernelA_B - $100]
     18  f52e		       a0 a0		      ldy	#%10100000
     19  f530		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     20  f533
     21  f533		       a4 b0		      ldy	[DO_GEMS_A + 1]
     22  f535		       84 a7		      sty	BuildKernelGrp0
     23  f537
     24  f537		       a0 11		      ldy	#EMERALD_SP_RESET
     25  f539		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     26  f53c
     27  f53c		       a0 14		      ldy	#$14
     28  f53e		       8c 1a f0 	      sty	[KernelA_D - $100]
     29  f541		       4c 77 f5 	      jmp	.endif_1
     30  f544
     31  f544		       2a		      rol
     32  f545
     33  f545				   .else_1
     34  f545		       18		      clc
     35  f546		       2a		      rol
     36  f547
     37  f547		       a4 af		      ldy	[DO_GEMS_A + 0]
     38  f549		       84 a7		      sty	BuildKernelGrp0
     39  f54b		       a4 b0		      ldy	[DO_GEMS_A + 1]
     40  f54d		       20 00 f4 	      jsr	KernelA_GenReset
     41  f550				   .if_2
     42  f550		       d0 05		      bne	.else_2
     43  f552		       38		      sec
     44  f553		       2a		      rol
     45  f554
     46  f554		       4c 77 f5 	      jmp	.endif_2
     47  f557
     48  f557
     49  f557				   .else_2
     50  f557		       18		      clc
     51  f558		       2a		      rol
     52  f559
     53  f559		       ac d4 f9 	      ldy	SHARD_LUT_RF1
     54  f55c		       c0 01		      cpy	#1
     55  f55e		       d0 03		      .byte.b	$D0, #3
     56  f560		       a0 11		      ldy	#RESP1
     57  f562		       2c		      .byte.b	$2C
     58  f563		       a0 1c		      ldy	#GRP1
     59  f565		       84 9c		      sty	RamKernelGemini1Reg
     60  f567
     61  f567		       ae d4 f9 	      ldx	SHARD_LUT_RF1
     62  f56a		       e0 01		      cpx	#1
     63  f56c		       a0 86		      ldy	#BC_STX
     64  f56e		       f0 05		      .byte.b	$F0, #5
     65  f570		       a4 b0		      ldy	[DO_GEMS_A + 1]
     66  f572		       20 28 f4 	      jsr	KernelA_UpdateRegs
     67  f575		       84 9b		      sty	RamKernelGemini1
     68  f577
     69  f577
     70  f577				   .endif_2
     71  f577
     72  f577
     73  f577				   .endif_1
     74  f577
     75  f577
     76  f577		       a4 b1		      ldy	[DO_GEMS_A + 2]
     77  f579		       20 00 f4 	      jsr	KernelA_GenReset
     78  f57c				   .if_3
     79  f57c		       d0 05		      bne	.else_3
     80  f57e		       38		      sec
     81  f57f		       2a		      rol
     82  f580		       4c 9a f5 	      jmp	.endif_3
     83  f583
     84  f583
     85  f583				   .else_3
     86  f583		       18		      clc
     87  f584		       2a		      rol
     88  f585
     89  f585		       a4 b1		      ldy	[DO_GEMS_A + 2]
     90  f587		       20 28 f4 	      jsr	KernelA_UpdateRegs
     91  f58a		       84 9d		      sty	RamKernelGemini2
     92  f58c
     93  f58c		       ac d4 f9 	      ldy	SHARD_LUT_RF1
     94  f58f		       c0 02		      cpy	#2
     95  f591		       d0 03		      .byte.b	$D0, #3
     96  f593		       a0 11		      ldy	#RESP1
     97  f595		       2c		      .byte.b	$2C
     98  f596		       a0 1c		      ldy	#GRP1
     99  f598		       84 9e		      sty	RamKernelGemini2Reg
    100  f59a
    101  f59a
    102  f59a				   .endif_3
    103  f59a
    104  f59a		       a4 b2		      ldy	[DO_GEMS_A + 3]
    105  f59c		       20 00 f4 	      jsr	KernelA_GenReset
    106  f59f				   .if_4
    107  f59f		       d0 05		      bne	.else_4
    108  f5a1		       38		      sec
    109  f5a2		       2a		      rol
    110  f5a3		       4c bd f5 	      jmp	.endif_4
    111  f5a6
    112  f5a6
    113  f5a6				   .else_4
    114  f5a6		       18		      clc
    115  f5a7		       2a		      rol
    116  f5a8
    117  f5a8		       a4 b2		      ldy	[DO_GEMS_A + 3]
    118  f5aa		       20 28 f4 	      jsr	KernelA_UpdateRegs
    119  f5ad		       84 9f		      sty	RamKernelGemini3
    120  f5af
    121  f5af		       ac d4 f9 	      ldy	SHARD_LUT_RF1
    122  f5b2		       c0 03		      cpy	#3
    123  f5b4		       d0 03		      .byte.b	$D0, #3
    124  f5b6		       a0 11		      ldy	#RESP1
    125  f5b8		       2c		      .byte.b	$2C
    126  f5b9		       a0 1c		      ldy	#GRP1
    127  f5bb		       84 a0		      sty	RamKernelGemini3Reg
    128  f5bd
    129  f5bd
    130  f5bd				   .endif_4
    131  f5bd
    132  f5bd		       2a		      rol
    133  f5be		       2a		      rol
    134  f5bf		       2a		      rol
    135  f5c0		       2a		      rol
    548  f5c1		       85 91		      sta	RamNibbleVar1
      0  f5c3					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f5c3		       a9 00		      lda	#0
      2  f5c5
      3  f5c5		       a6 b0		      ldx	[DO_GEMS_A + 1]
      4  f5c7		       86 a8		      stx	BuildKernelVdel1
      5  f5c9
      6  f5c9		       ae d5 f9 	      ldx	SHARD_LUT_VD1
      7  f5cc		       e0 04		      cpx	#4
      8  f5ce				   .if_1
      9  f5ce		       f0 09		      beq	.else_1
     10  f5d0		       38		      sec
     11  f5d1		       2a		      rol
     12  f5d2
     13  f5d2
     14  f5d2		       a6 b3		      ldx	[DO_GEMS_A + 4]
     15  f5d4		       86 a8		      stx	BuildKernelVdel1
     16  f5d6		       4c e2 f5 	      jmp	.endif_1
     17  f5d9
     18  f5d9
     19  f5d9				   .else_1
     20  f5d9		       18		      clc
     21  f5da		       2a		      rol
     22  f5db		       a4 b3		      ldy	[DO_GEMS_A + 4]
     23  f5dd		       20 28 f4 	      jsr	KernelA_UpdateRegs
     24  f5e0		       84 a1		      sty	RamKernelGemini4
     25  f5e2
     26  f5e2
     27  f5e2
     28  f5e2				   .endif_1
     29  f5e2
     30  f5e2
     31  f5e2
     32  f5e2
     33  f5e2
     34  f5e2
     35  f5e2
     36  f5e2
     37  f5e2
     38  f5e2
     39  f5e2
     40  f5e2
     41  f5e2
     42  f5e2		       2a		      rol
     43  f5e3		       2a		      rol
     44  f5e4		       2a		      rol
     45  f5e5		       2a		      rol
     46  f5e6		       2a		      rol
     47  f5e7		       2a		      rol
     48  f5e8		       2a		      rol
    550  f5e9		       85 92		      sta	RamNibbleVar2
    551  f5eb		       4c 46 f6 	      jmp	.next
    552  f5ee				   .kernel_b
      0  f5ee					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f5ee		       a9 00		      lda	#0
      2  f5f0
      3  f5f0		       a2 11		      ldx	#RESP1
      4  f5f2		       86 98		      stx	RamKernelPhpTarget
      5  f5f4		       a2 aa		      ldx	#SENTINEL
      6  f5f6		       86 a4		      stx	BuildKernelX
      7  f5f8		       86 a5		      stx	BuildKernelY
      8  f5fa		       86 a6		      stx	BuildKernelRST
      9  f5fc
     10  f5fc		       a4 b5		      ldy	[DO_GEMS_B + 0]
     11  f5fe		       84 a7		      sty	BuildKernelGrp0
     12  f600
     13  f600
     14  f600		       a4 b6		      ldy	[DO_GEMS_B + 1]
     15  f602		       20 28 f4 	      jsr	KernelA_UpdateRegs
     16  f605		       84 9b		      sty	RamKernelGemini1
     17  f607
     18  f607		       a4 b7		      ldy	[DO_GEMS_B + 2]
     19  f609		       20 28 f4 	      jsr	KernelB_UpdateRegs
     20  f60c		       84 9d		      sty	RamKernelGemini2
     21  f60e
     22  f60e		       a4 b8		      ldy	[DO_GEMS_B + 3]
     23  f610		       20 28 f4 	      jsr	KernelB_UpdateRegs
     24  f613		       84 9f		      sty	RamKernelGemini3
     25  f615
     26  f615				   .K_2B
     27  f615		       a4 b7		      ldy	[DO_GEMS_B + 2]
     28  f617		       20 12 f4 	      jsr	KernelB_GenPhp
     29  f61a				   .if_1
     30  f61a		       d0 05		      bne	.else_1
     31  f61c		       38		      sec
     32  f61d		       2a		      rol
     33  f61e
     34  f61e		       4c 23 f6 	      jmp	.endif_1
     35  f621
     36  f621
     37  f621				   .else_1
     38  f621		       18		      clc
     39  f622		       2a		      rol
     40  f623
     41  f623
     42  f623				   .endif_1
     43  f623
     44  f623		       a4 b8		      ldy	[DO_GEMS_B + 3]
     45  f625		       20 12 f4 	      jsr	KernelB_GenPhp
     46  f628				   .if_2
     47  f628		       d0 05		      bne	.else_2
     48  f62a		       38		      sec
     49  f62b		       2a		      rol
     50  f62c
     51  f62c		       4c 31 f6 	      jmp	.endif_2
     52  f62f
     53  f62f
     54  f62f				   .else_2
     55  f62f		       18		      clc
     56  f630		       2a		      rol
     57  f631
     58  f631
     59  f631				   .endif_2
     60  f631
     61  f631		       a4 b9		      ldy	[DO_GEMS_B + 4]
     62  f633		       20 28 f4 	      jsr	KernelA_UpdateRegs
     63  f636				   .K_4B
     64  f636		       84 a1		      sty	RamKernelGemini4
     65  f638
     66  f638
     67  f638
     68  f638
     69  f638
     70  f638
     71  f638
     72  f638
     73  f638
     74  f638		       66 a7		      ror	BuildKernelGrp0
     75  f63a		       66 a4		      ror	BuildKernelX
     76  f63c		       66 a5		      ror	BuildKernelY
     77  f63e
     78  f63e
     79  f63e
     80  f63e
     81  f63e
     82  f63e
     83  f63e		       2a		      rol
     84  f63f		       2a		      rol
     85  f640		       2a		      rol
     86  f641		       2a		      rol
     87  f642		       2a		      rol
     88  f643		       2a		      rol
    554  f644		       85 91		      sta	RamNibbleVar1
    555  f646				   .next
    556  f646
    557  f646							; TODO move this into the row kernel
    558  f646				   DBG_NIBBLE_RUN subroutine
    559  f646		       ae 00 f1 	      ldx	$f100
    560  f649		       e0 0a		      cpx	#$a
    561  f64b		       f0 03		      beq	[. + 5]
    562  f64d		       4c fe f6 	      jmp	.kernel_b
    563  f650				   .kernel_a
    564  f650		       a5 91		      lda	RamNibbleVar1
      0  f652					      NIBBLE_gem_kernel_a_1
      1  f652				   .if_1
      2  f652		       0a		      asl
      3  f653		       90 03		      bcc	.else_1
      4  f655		       4c 72 f6 	      jmp	.endif_1
      5  f658				   .else_1
      6  f658				   .if_2
      7  f658		       0a		      asl
      8  f659		       90 0d		      bcc	.else_2
      9  f65b		       a2 86		      ldx	#BC_STX
     10  f65d		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f660		       a2 11		      ldx	#RESP1
     12  f662		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f665		       4c 72 f6 	      jmp	.endif_2
     14  f668				   .else_2
     15  f668		       a6 9b		      ldx	RamKernelGemini1
     16  f66a		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f66d		       a6 9c		      ldx	RamKernelGemini1Reg
     18  f66f		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f672				   .endif_2
     20  f672				   .endif_1
     21  f672				   .if_3
     22  f672		       0a		      asl
     23  f673		       90 0d		      bcc	.else_3
     24  f675		       a2 79		      ldx	#NOP_REG
     25  f677		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f67a		       a2 11		      ldx	#RESP1
     27  f67c		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f67f		       4c 91 f6 	      jmp	.endif_3
     29  f682				   .else_3
     30  f682		       a2 11		      ldx	#RESP1
     31  f684		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f687		       a6 9d		      ldx	RamKernelGemini2
     33  f689		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f68c		       a6 9e		      ldx	RamKernelGemini2Reg
     35  f68e		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f691				   .endif_3
     37  f691				   .if_4
     38  f691		       0a		      asl
     39  f692		       90 08		      bcc	.else_4
     40  f694		       a2 11		      ldx	#RESP1
     41  f696		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f699		       4c a6 f6 	      jmp	.endif_4
     43  f69c				   .else_4
     44  f69c		       a6 9f		      ldx	RamKernelGemini3
     45  f69e		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f6a1		       a6 a0		      ldx	RamKernelGemini3Reg
     47  f6a3		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f6a6				   .endif_4
    566  f6a6		       a5 92		      lda	RamNibbleVar2
      0  f6a8					      NIBBLE_gem_kernel_a_2
      1  f6a8				   .if_1
      2  f6a8		       0a		      asl
      3  f6a9		       90 20		      bcc	.else_1
      4  f6ab		       a2 85		      ldx	#BC_STA
      5  f6ad		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f6b0		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f6b2		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f6b5		       a2 85		      ldx	#BC_STA
      9  f6b7		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f6ba		       a2 0e		      ldx	#PF1
     11  f6bc		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f6bf		       a2 08		      ldx	#BC_PHP
     13  f6c1		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f6c4		       a2 26		      ldx	#VDELP1
     15  f6c6		       86 98		      stx	[RamKernelPhpTarget + 0]
     16  f6c8		       4c e8 f6 	      jmp	.endif_1
     17  f6cb				   .else_1
     18  f6cb		       a2 08		      ldx	#BC_PHP
     19  f6cd		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f6d0		       a2 85		      ldx	#BC_STA
     21  f6d2		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f6d5		       a2 0e		      ldx	#PF1
     23  f6d7		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f6da		       a6 a1		      ldx	RamKernelGemini4
     25  f6dc		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f6df		       a2 1c		      ldx	#EMERALD_SP
     27  f6e1		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f6e4		       a2 11		      ldx	#RESP1
     29  f6e6		       86 98		      stx	[RamKernelPhpTarget + 0]
     30  f6e8				   .endif_1
     31  f6e8		       a6 a8		      ldx	BuildKernelVdel1
     32  f6ea		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f6ed		       a6 a7		      ldx	BuildKernelGrp0
     34  f6ef		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f6f2		       a6 a4		      ldx	BuildKernelX
     36  f6f4		       86 99		      stx	[RamKernelX + 0]
     37  f6f6		       a6 a5		      ldx	BuildKernelY
     38  f6f8		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    568  f6fb		       4c 86 f7 	      jmp	.next
    569  f6fe				   .kernel_b
    570  f6fe		       a5 91		      lda	RamNibbleVar1
      0  f700					      NIBBLE_gem_kernel_b
      1  f700		       a6 9b		      ldx	RamKernelGemini1
      2  f702		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f705				   .if_1
      4  f705		       0a		      asl
      5  f706		       90 2a		      bcc	.else_1
      6  f708		       a2 1c		      ldx	#EMERALD_SP
      7  f70a		       86 98		      stx	[RamKernelPhpTarget + 0]
      8  f70c		       a2 84		      ldx	#BC_STY
      9  f70e		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f711		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f713		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f716		       a2 08		      ldx	#BC_PHP
     13  f718		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f71b		       a2 85		      ldx	#BC_STA
     15  f71d		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f720		       a2 0e		      ldx	#PF1
     17  f722		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f725		       a6 9f		      ldx	RamKernelGemini3
     19  f727		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f72a		       a2 1c		      ldx	#EMERALD_SP
     21  f72c		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f72f		       4c 3c f7 	      jmp	.endif_1
     23  f732				   .else_1
     24  f732		       a6 9d		      ldx	RamKernelGemini2
     25  f734		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f737		       a2 1c		      ldx	#EMERALD_SP
     27  f739		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f73c				   .endif_1
     29  f73c				   .if_2
     30  f73c		       0a		      asl
     31  f73d		       90 2a		      bcc	.else_2
     32  f73f		       a2 1c		      ldx	#EMERALD_SP
     33  f741		       86 98		      stx	[RamKernelPhpTarget + 0]
     34  f743		       a2 84		      ldx	#BC_STY
     35  f745		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f748		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f74a		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f74d		       a6 9d		      ldx	RamKernelGemini2
     39  f74f		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f752		       a2 1c		      ldx	#EMERALD_SP
     41  f754		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f757		       a2 85		      ldx	#BC_STA
     43  f759		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f75c		       a2 0e		      ldx	#PF1
     45  f75e		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f761		       a2 08		      ldx	#BC_PHP
     47  f763		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f766		       4c 73 f7 	      jmp	.endif_2
     49  f769				   .else_2
     50  f769		       a6 9f		      ldx	RamKernelGemini3
     51  f76b		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     52  f76e		       a2 1c		      ldx	#EMERALD_SP
     53  f770		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     54  f773				   .endif_2
     55  f773		       a6 a1		      ldx	RamKernelGemini4
     56  f775		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     57  f778		       a6 a7		      ldx	BuildKernelGrp0
     58  f77a		       8e 08 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     59  f77d		       a6 a4		      ldx	BuildKernelX
     60  f77f		       86 99		      stx	[RamKernelX + 0]
     61  f781		       a6 a5		      ldx	BuildKernelY
     62  f783		       8e 11 f0 	      stx	[[KernelB_STY - $100] + 0]
    572  f786				   .next
    573  f786
    574  f786				   VerticalBlankEnd
    575  f786							; Wait until the end of Vertical blank.
      0  f786					      TIMER_WAIT
      1  f786				   .waittimer
      2  f786		       ad 84 02 	      lda	INTIM
      3  f789		       d0 fb		      bne	.waittimer
      4  f78b		       85 02		      sta	WSYNC
      0  f78d					      ASSERT_RUNTIME	"_scan == #37"
      1  f78d				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f78d  && !(  _scan == #37  ) }
      2  f78d					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    578  f78d
    579  f78d							; Save stack pointer
    580  f78d		       ba		      tsx
    581  f78e		       86 95		      stx	RamStackBkp
    582  f790
    583  f790							; Start rendering the kernel.
    584  f790		       4c 58 fa 	      jmp	KernelBorder
    585  f793
    586  f800		       00 00 00 00*	      align	256	; TODO why
    587  f800
    588  f800				   FrameEnd   subroutine
    589  f800		       85 02		      sta	WSYNC
    590  f802
    591  f802							; Blank all background colors.
    592  f802		       a9 00		      lda	#0
    593  f804		       85 08		      sta	COLUPF
    594  f806		       85 0f		      sta	PF2
    595  f808		       85 0e		      sta	PF1
    596  f80a		       85 1c		      sta	EMERALD_SP
    597  f80c
    598  f80c							; Guide lines (2x)
    599  f80c		       a9 02		      lda	#SIGNAL_LINE
    600  f80e		       85 09		      sta	COLUBK
    601  f810					      REPEAT	6
    602  f810		       85 02		      sta	WSYNC
    601  f810					      REPEND
    602  f812		       85 02		      sta	WSYNC
    601  f812					      REPEND
    602  f814		       85 02		      sta	WSYNC
    601  f814					      REPEND
    602  f816		       85 02		      sta	WSYNC
    601  f816					      REPEND
    602  f818		       85 02		      sta	WSYNC
    601  f818					      REPEND
    602  f81a		       85 02		      sta	WSYNC
    603  f81c					      REPEND
    604  f81c		       a9 00		      lda	#$00
    605  f81e		       85 09		      sta	COLUBK
    606  f820
    607  f820							; Restore stack pointer
    608  f820		       a6 95		      ldx	RamStackBkp
    609  f822		       9a		      txs
    610  f823
    611  f823							; Display the rest of the blank screen.
      0  f823					      TIMER_SETUP	25
      1  f823				   .lines     SET	25
      2  f823		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f825		       85 02		      sta	WSYNC
      4  f827		       8d 96 02 	      sta	TIM64T
    613  f82a		       85 02		      sta	WSYNC
      0  f82c					      TIMER_WAIT
      1  f82c				   .waittimer
      2  f82c		       ad 84 02 	      lda	INTIM
      3  f82f		       d0 fb		      bne	.waittimer
      4  f831		       85 02		      sta	WSYNC
      0  f833					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f833				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f833  && !(  _scan == (#37 + #192)  ) }
      2  f833					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    616  f833
    617  f833							; Overscan
    618  f833				   Overscan   subroutine
    619  f833		       85 01		      sta	VBLANK
      0  f835					      TIMER_SETUP	29
      1  f835				   .lines     SET	29
      2  f835		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f837		       85 02		      sta	WSYNC
      4  f839		       8d 96 02 	      sta	TIM64T
    621  f83c
    622  f83c		       20 d6 f9 	      jsr	MoveJoystick
    623  f83f		       20 0d fa 	      jsr	SpeedCalculation
    624  f842
    625  f842							; Calculate GemAnimation.
    626  f842							; TODO DIVIDE BY A THING
    627  f842		       a5 84		      lda	FrameCount
    628  f844		       29 07		      and	#%111
    629  f846		       d0 0b		      bne	.skiprotate
    630  f848		       a5 ac		      lda	level_for_game + 3
    631  f84a		       2a		      rol
      0  f84b					      _ROL32	level_for_game, level_for_game
      1  f84b		       00 a9	   VLA	      EQU	level_for_game
      2  f84b		       00 a9	   RES	      EQU	level_for_game
      3  f84b				  -	      IF	VLA != RES
      4  f84b				  -	      LDA	VLA+3
      5  f84b				  -	      ROL	A
      6  f84b				  -	      STA	RES+3
      7  f84b				  -	      LDA	VLA+2
      8  f84b				  -	      ROL	A
      9  f84b				  -	      STA	RES+2
     10  f84b				  -	      LDA	VLA+1
     11  f84b				  -	      ROL	A
     12  f84b				  -	      STA	RES+1
     13  f84b				  -	      LDA	VLA+0
     14  f84b				  -	      ROL	A
     15  f84b				  -	      STA	RES+0
     16  f84b					      ELSE
     17  f84b		       26 ac		      ROL	VLA+3
     18  f84d		       26 ab		      ROL	VLA+2
     19  f84f		       26 aa		      ROL	VLA+1
     20  f851		       26 a9		      ROL	VLA+0
     21  f853					      ENDIF
    633  f853				   .skiprotate
    634  f853
      0  f853					      TIMER_WAIT
      1  f853				   .waittimer
      2  f853		       ad 84 02 	      lda	INTIM
      3  f856		       d0 fb		      bne	.waittimer
      4  f858		       85 02		      sta	WSYNC
      0  f85a					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f85a				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f85a  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f85a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    637  f85a
    638  f85a		       4c 4d f4 	      jmp	VerticalSync
    639  f85d
    640  f85d
    641  f85d
    642  f900		       00 00 00 00*	      align	256
    643  f900
    644  f900					      mac	gemini_populate
    645  f900				   .TARGET    SET	{1}
    646  f900					      lda	RamNibbleTemp
    647  f900					      and	#%00000011
    648  f900					      tay
    649  f900					      lda	GEMINI_LOOKUP,y
    650  f900					      sta	.TARGET
    651  f900					      endm
    652  f900
    653  f900					      mac	gemini_populate_missile
    654  f900				   .TARGET    SET	{1}
    655  f900					      txa
    656  f900					      and	#%00000001
    657  f900					      sta	.TARGET
    658  f900					      endm
    659  f900
    660  f900				   gemini_populate
    661  f900		       a6 ac		      ldx	level_for_game + 3
    662  f902		       86 90		      stx	RamNibbleTemp
      0  f904					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  f904				   .TARGET    SET	DO_GEMS_B + 5
      2  f904		       a5 90		      lda	RamNibbleTemp
      3  f906		       29 03		      and	#%00000011
      4  f908		       a8		      tay
      5  f909		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f90c		       85 ba		      sta	.TARGET
    664  f90e		       66 90		      ror	RamNibbleTemp
    665  f910		       66 90		      ror	RamNibbleTemp
      0  f912					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  f912				   .TARGET    SET	DO_GEMS_A + 5
      2  f912		       a5 90		      lda	RamNibbleTemp
      3  f914		       29 03		      and	#%00000011
      4  f916		       a8		      tay
      5  f917		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f91a		       85 b4		      sta	.TARGET
    667  f91c		       66 90		      ror	RamNibbleTemp
    668  f91e		       66 90		      ror	RamNibbleTemp
      0  f920					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  f920				   .TARGET    SET	DO_GEMS_B + 4
      2  f920		       a5 90		      lda	RamNibbleTemp
      3  f922		       29 03		      and	#%00000011
      4  f924		       a8		      tay
      5  f925		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f928		       85 b9		      sta	.TARGET
    670  f92a		       66 90		      ror	RamNibbleTemp
    671  f92c		       66 90		      ror	RamNibbleTemp
      0  f92e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  f92e				   .TARGET    SET	DO_GEMS_A + 4
      2  f92e		       a5 90		      lda	RamNibbleTemp
      3  f930		       29 03		      and	#%00000011
      4  f932		       a8		      tay
      5  f933		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f936		       85 b3		      sta	.TARGET
    673  f938		       66 90		      ror	RamNibbleTemp
    674  f93a		       66 90		      ror	RamNibbleTemp
    675  f93c
    676  f93c		       a6 ab		      ldx	level_for_game + 2
    677  f93e		       86 90		      stx	RamNibbleTemp
      0  f940					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  f940				   .TARGET    SET	DO_MISS_B
      2  f940		       8a		      txa
      3  f941		       29 01		      and	#%00000001
      4  f943		       85 ae		      sta	.TARGET
    679  f945		       66 90		      ror	RamNibbleTemp
      0  f947					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  f947				   .TARGET    SET	DO_GEMS_B + 3
      2  f947		       a5 90		      lda	RamNibbleTemp
      3  f949		       29 03		      and	#%00000011
      4  f94b		       a8		      tay
      5  f94c		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f94f		       85 b8		      sta	.TARGET
    681  f951		       66 90		      ror	RamNibbleTemp
    682  f953		       66 90		      ror	RamNibbleTemp
      0  f955					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  f955				   .TARGET    SET	DO_GEMS_A + 3
      2  f955		       a5 90		      lda	RamNibbleTemp
      3  f957		       29 03		      and	#%00000011
      4  f959		       a8		      tay
      5  f95a		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f95d		       85 b2		      sta	.TARGET
    684  f95f		       66 90		      ror	RamNibbleTemp
    685  f961		       66 90		      ror	RamNibbleTemp
      0  f963					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  f963				   .TARGET    SET	DO_GEMS_B + 2
      2  f963		       a5 90		      lda	RamNibbleTemp
      3  f965		       29 03		      and	#%00000011
      4  f967		       a8		      tay
      5  f968		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f96b		       85 b7		      sta	.TARGET
    687  f96d		       66 90		      ror	RamNibbleTemp
    688  f96f		       66 90		      ror	RamNibbleTemp
    689  f971
    690  f971		       a6 aa		      ldx	level_for_game + 1
    691  f973		       86 90		      stx	RamNibbleTemp
      0  f975					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  f975				   .TARGET    SET	DO_GEMS_A + 2
      2  f975		       a5 90		      lda	RamNibbleTemp
      3  f977		       29 03		      and	#%00000011
      4  f979		       a8		      tay
      5  f97a		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f97d		       85 b1		      sta	.TARGET
    693  f97f		       66 90		      ror	RamNibbleTemp
    694  f981		       66 90		      ror	RamNibbleTemp
      0  f983					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  f983				   .TARGET    SET	DO_MISS_A
      2  f983		       8a		      txa
      3  f984		       29 01		      and	#%00000001
      4  f986		       85 ad		      sta	.TARGET
    696  f988		       66 90		      ror	RamNibbleTemp
      0  f98a					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  f98a				   .TARGET    SET	DO_GEMS_B + 1
      2  f98a		       a5 90		      lda	RamNibbleTemp
      3  f98c		       29 03		      and	#%00000011
      4  f98e		       a8		      tay
      5  f98f		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f992		       85 b6		      sta	.TARGET
    698  f994		       66 90		      ror	RamNibbleTemp
    699  f996		       66 90		      ror	RamNibbleTemp
      0  f998					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  f998				   .TARGET    SET	DO_GEMS_A + 1
      2  f998		       a5 90		      lda	RamNibbleTemp
      3  f99a		       29 03		      and	#%00000011
      4  f99c		       a8		      tay
      5  f99d		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f9a0		       85 b0		      sta	.TARGET
    701  f9a2		       66 90		      ror	RamNibbleTemp
    702  f9a4		       66 90		      ror	RamNibbleTemp
    703  f9a6
    704  f9a6		       a6 a9		      ldx	level_for_game + 0
    705  f9a8		       86 90		      stx	RamNibbleTemp
      0  f9aa					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  f9aa				   .TARGET    SET	DO_GEMS_B + 0
      2  f9aa		       a5 90		      lda	RamNibbleTemp
      3  f9ac		       29 03		      and	#%00000011
      4  f9ae		       a8		      tay
      5  f9af		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f9b2		       85 b5		      sta	.TARGET
    707  f9b4		       66 90		      ror	RamNibbleTemp
    708  f9b6		       66 90		      ror	RamNibbleTemp
      0  f9b8					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  f9b8				   .TARGET    SET	DO_GEMS_A + 0
      2  f9b8		       a5 90		      lda	RamNibbleTemp
      3  f9ba		       29 03		      and	#%00000011
      4  f9bc		       a8		      tay
      5  f9bd		       b9 d0 f9 	      lda	GEMINI_LOOKUP,y
      6  f9c0		       85 af		      sta	.TARGET
    710  f9c2		       66 90		      ror	RamNibbleTemp
    711  f9c4		       66 90		      ror	RamNibbleTemp
    712  f9c6
    713  f9c6		       60		      rts
    714  f9c7				   gemini_populate_end
    715  f9c7
    716  f9d0		       00 00 00 00*	      align	16
    717  f9d0
    718  f9d0				   GEMINI_LOOKUP
    719  f9d0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    720  f9d4
    721  f9d4				   SHARD_LUT_RF1
    722  f9d4		       00		      .byte.b	#0
    723  f9d5				   SHARD_LUT_VD1
    724  f9d5		       00		      .byte.b	#0
    725  f9d6
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f9d6					      include	"game_input.s"
      1  f9d6							; Handles input checking. Called from overscan.
      2  f9d6
      3  f9d6							; Read joystick movement and apply to object 0
      4  f9d6				   MoveJoystick
      5  f9d6							; Move vertically
      6  f9d6							; (up and down are actually reversed since ypos starts at bottom)
      7  f9d6							;     ldx YPos
      8  f9d6		       a9 10		      lda	#%00010000	;Up?
      9  f9d8		       2c 80 02 	      bit	SWCHA
     10  f9db		       d0 0d		      bne	SkipMoveUp
     11  f9dd
     12  f9dd		       18		      clc
     13  f9de		       a5 89		      lda	Speed2
     14  f9e0		       69 0c		      adc	#12
     15  f9e2		       85 89		      sta	Speed2
     16  f9e4		       a5 88		      lda	Speed1
     17  f9e6		       69 00		      adc	#00
     18  f9e8		       85 88		      sta	Speed1
     19  f9ea
     20  f9ea				   SkipMoveUp
     21  f9ea		       a6 87		      ldx	XPos
     22  f9ec
     23  f9ec							; Only check left/right on odd frames;
     24  f9ec							; TODO make this just a fractional speed
     25  f9ec							; rather than dropping frames
     26  f9ec		       a9 01		      lda	#01
     27  f9ee		       25 84		      and	FrameCount
     28  f9f0		       d0 18		      bne	SkipMoveRight
     29  f9f2
     30  f9f2
     31  f9f2							; Move horizontally
     32  f9f2		       a9 40		      lda	#%01000000	;Left?
     33  f9f4		       2c 80 02 	      bit	SWCHA
     34  f9f7		       d0 05		      bne	SkipMoveLeft
     35  f9f9		       e0 1d		      cpx	#29
     36  f9fb		       90 01		      bcc	SkipMoveLeft
     37  f9fd		       ca		      dex
     38  f9fe
     39  f9fe							; Reflect
     40  f9fe							;     lda #$ff
     41  f9fe							;     sta REFP0
     42  f9fe				   SkipMoveLeft
     43  f9fe		       a9 80		      lda	#%10000000	;Right?
     44  fa00		       2c 80 02 	      bit	SWCHA
     45  fa03		       d0 05		      bne	SkipMoveRight
     46  fa05		       e0 80		      cpx	#128
     47  fa07		       b0 01		      bcs	SkipMoveRight
     48  fa09		       e8		      inx
     49  fa0a
     50  fa0a							; Reflect
     51  fa0a							;     lda #$0
     52  fa0a							;     sta REFP0
     53  fa0a				   SkipMoveRight
     54  fa0a		       86 87		      stx	XPos
     55  fa0c		       60		      rts
     56  fa0d
     57  fa0d
     58  fa0d				   SpeedCalculation
     59  fa0d		       38		      sec
     60  fa0e		       a5 89		      lda	Speed2
     61  fa10		       e9 07		      sbc	#7
     62  fa12		       85 89		      sta	Speed2
     63  fa14		       a5 88		      lda	Speed1
     64  fa16		       e9 00		      sbc	#0
     65  fa18		       85 88		      sta	Speed1
     66  fa1a
     67  fa1a		       18		      clc
     68  fa1b		       a5 8b		      lda	YPos2
     69  fa1d		       65 89		      adc	Speed2
     70  fa1f		       85 8b		      sta	YPos2
     71  fa21		       a5 8a		      lda	YPos
     72  fa23		       65 88		      adc	Speed1
     73  fa25		       85 8a		      sta	YPos
     74  fa27
     75  fa27		       c9 3e		      cmp	#FLOOR_OFFSET
     76  fa29		       b0 0a		      bcs	NewThing2
     77  fa2b
     78  fa2b							; Reset to floor
     79  fa2b		       a9 3e		      lda	#FLOOR_OFFSET
     80  fa2d		       85 8a		      sta	YPos
     81  fa2f		       a9 00		      lda	#0
     82  fa31		       85 88		      sta	Speed1
     83  fa33		       85 89		      sta	Speed2
     84  fa35				   NewThing2
     85  fa35
     86  fa35		       c9 be		      cmp	#CEILING_OFFSET
     87  fa37		       90 0a		      bcc	.next
     88  fa39
     89  fa39							; Reset to ceiling
     90  fa39		       a9 be		      lda	#CEILING_OFFSET
     91  fa3b		       85 8a		      sta	YPos
     92  fa3d		       a9 00		      lda	#0
     93  fa3f		       85 88		      sta	Speed1
     94  fa41		       85 89		      sta	Speed2
     95  fa43				   .next
     96  fa43		       60		      rts
     97  fa44
     98  fa44
     99  fa44
    100  fa44							; Subroutine
    101  fa44				   SetHorizPos
    102  fa44		       85 02		      sta	WSYNC	; start a new line
    103  fa46		       24 00		      bit	0	; waste 3 cycles
    104  fa48		       38		      sec		; set carry flag
    105  fa49				   DivideLoop
    106  fa49		       e9 0f		      sbc	#15	; subtract 15
    107  fa4b		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  fa4d		       49 07		      eor	#7	; calculate fine offset
    109  fa4f		       0a		      asl
    110  fa50		       0a		      asl
    111  fa51		       0a		      asl
    112  fa52		       0a		      asl
    113  fa53		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  fa55		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  fa57		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fa58					      include	"kernel_border.s"
      1  fa58							; Visible Kernel
      2  fa58
      3  fa58				   KernelBorder subroutine
      4  fa58		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fa5a
      6  fa5a							; First HMOVE
      7  fa5a		       85 2a		      sta	HMOVE
      8  fa5c
      9  fa5c							; Border top
     10  fa5c		       a9 00		      lda	#0
     11  fa5e		       85 08		      sta	COLUPF
     12  fa60		       85 0e		      sta	PF1
     13  fa62		       85 0f		      sta	PF2
     14  fa64		       a9 02		      lda	#SIGNAL_LINE
     15  fa66		       85 09		      sta	COLUBK
     16  fa68
     17  fa68					      REPEAT	6
     18  fa68		       85 02		      sta	WSYNC
     17  fa68					      REPEND
     18  fa6a		       85 02		      sta	WSYNC
     17  fa6a					      REPEND
     18  fa6c		       85 02		      sta	WSYNC
     17  fa6c					      REPEND
     18  fa6e		       85 02		      sta	WSYNC
     17  fa6e					      REPEND
     18  fa70		       85 02		      sta	WSYNC
     17  fa70					      REPEND
     18  fa72		       85 02		      sta	WSYNC
     19  fa74					      REPEND
     20  fa74
     21  fa74		       a9 00		      lda	#0
     22  fa76		       85 09		      sta	COLUBK
     23  fa78		       85 02		      sta	WSYNC
     24  fa7a
     25  fa7a							; Start top border
     26  fa7a				   border_top
     27  fa7a							; Make the playfield solid.
     28  fa7a		       a9 3f		      lda	#%00111111
     29  fa7c		       85 0e		      sta	PF1
     30  fa7e		       a9 ff		      lda	#%11111111
     31  fa80		       85 0f		      sta	PF2
     32  fa82
     33  fa82		       a9 42		      lda	#COL_BG
     34  fa84		       a0 00		      ldy	#0
     35  fa86
     36  fa86							; X_XXXX_XX
     37  fa86							; Commented lines removed to save on space.
     38  fa86		       85 08		      sta	COLUPF
     39  fa88		       85 02		      sta	WSYNC
     40  fa8a		       84 08		      sty	COLUPF
     41  fa8c		       85 02		      sta	WSYNC
     42  fa8e		       85 08		      sta	COLUPF
     43  fa90		       85 02		      sta	WSYNC
     44  fa92							; sta COLUPF
     45  fa92		       85 02		      sta	WSYNC
     46  fa94							; sta COLUPF
     47  fa94		       85 02		      sta	WSYNC
     48  fa96		       84 08		      sty	COLUPF
     49  fa98		       85 02		      sta	WSYNC
     50  fa9a		       85 08		      sta	COLUPF
     51  fa9c
     52  fa9c		       85 02		      sta	WSYNC
     53  fa9e							; sta COLUPF
     54  fa9e
     55  fa9e				   PlayArea
     56  fa9e							; PF is now the playing area
      0  fa9e					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa9e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa9e  && !(  _scycles == #0  ) }
      2  fa9e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fa9e					      sleep	61
      1  fa9e				   .CYCLES    SET	61
      2  fa9e
      3  fa9e				  -	      IF	.CYCLES < 2
      4  fa9e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa9e				  -	      ERR
      6  fa9e					      ENDIF
      7  fa9e
      8  fa9e					      IF	.CYCLES & 1
      9  fa9e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa9e		       04 00		      nop	0
     11  faa0				  -	      ELSE
     12  faa0				  -	      bit	VSYNC
     13  faa0					      ENDIF
     14  faa0				   .CYCLES    SET	.CYCLES - 3
     15  faa0					      ENDIF
     16  faa0
     17  faa0					      REPEAT	.CYCLES / 2
     18  faa0		       ea		      nop
     17  faa0					      REPEND
     18  faa1		       ea		      nop
     17  faa1					      REPEND
     18  faa2		       ea		      nop
     17  faa2					      REPEND
     18  faa3		       ea		      nop
     17  faa3					      REPEND
     18  faa4		       ea		      nop
     17  faa4					      REPEND
     18  faa5		       ea		      nop
     17  faa5					      REPEND
     18  faa6		       ea		      nop
     17  faa6					      REPEND
     18  faa7		       ea		      nop
     17  faa7					      REPEND
     18  faa8		       ea		      nop
     17  faa8					      REPEND
     18  faa9		       ea		      nop
     17  faa9					      REPEND
     18  faaa		       ea		      nop
     17  faaa					      REPEND
     18  faab		       ea		      nop
     17  faab					      REPEND
     18  faac		       ea		      nop
     17  faac					      REPEND
     18  faad		       ea		      nop
     17  faad					      REPEND
     18  faae		       ea		      nop
     17  faae					      REPEND
     18  faaf		       ea		      nop
     17  faaf					      REPEND
     18  fab0		       ea		      nop
     17  fab0					      REPEND
     18  fab1		       ea		      nop
     17  fab1					      REPEND
     18  fab2		       ea		      nop
     17  fab2					      REPEND
     18  fab3		       ea		      nop
     17  fab3					      REPEND
     18  fab4		       ea		      nop
     17  fab4					      REPEND
     18  fab5		       ea		      nop
     17  fab5					      REPEND
     18  fab6		       ea		      nop
     17  fab6					      REPEND
     18  fab7		       ea		      nop
     17  fab7					      REPEND
     18  fab8		       ea		      nop
     17  fab8					      REPEND
     18  fab9		       ea		      nop
     17  fab9					      REPEND
     18  faba		       ea		      nop
     17  faba					      REPEND
     18  fabb		       ea		      nop
     17  fabb					      REPEND
     18  fabc		       ea		      nop
     19  fabd					      REPEND
     59  fabd		       a9 00		      lda	#%00000000
     60  fabf		       85 0d		      sta	PF0
     61  fac1		       a9 20		      lda	#%00100000
     62  fac3		       85 0e		      sta	PF1
     63  fac5		       a9 00		      lda	#%00000000
     64  fac7		       85 0f		      sta	PF2
      0  fac9					      ASSERT_RUNTIME	"_scycles == #0"
      1  fac9				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fac9  && !(  _scycles == #0  ) }
      2  fac9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fac9					      sleep	7
      1  fac9				   .CYCLES    SET	7
      2  fac9
      3  fac9				  -	      IF	.CYCLES < 2
      4  fac9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fac9				  -	      ERR
      6  fac9					      ENDIF
      7  fac9
      8  fac9					      IF	.CYCLES & 1
      9  fac9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fac9		       04 00		      nop	0
     11  facb				  -	      ELSE
     12  facb				  -	      bit	VSYNC
     13  facb					      ENDIF
     14  facb				   .CYCLES    SET	.CYCLES - 3
     15  facb					      ENDIF
     16  facb
     17  facb					      REPEAT	.CYCLES / 2
     18  facb		       ea		      nop
     17  facb					      REPEND
     18  facc		       ea		      nop
     19  facd					      REPEND
     67  facd		       4c ff fa 	      jmp	row_start
     68  fad0							; enter row on cycle 10.
     69  fad0
     70  fad0							; reset the background for bottom of playfield
     71  fad0				   border_bottom
     72  fad0							;sta WSYNC
     73  fad0
     74  fad0							; Form the bottom of the level frame.
     75  fad0		       a9 3f		      lda	#%00111111
     76  fad2		       85 0e		      sta	PF1
     77  fad4		       a9 ff		      lda	#%11111111
     78  fad6		       85 0f		      sta	PF2
     79  fad8
     80  fad8							; Clear all sprites.
     81  fad8		       a9 00		      lda	#0
     82  fada		       85 1c		      sta	EMERALD_SP
     83  fadc		       85 1b		      sta	JET_SP
     84  fade		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fae0
     86  fae0		       a9 42		      lda	#COL_BG
     87  fae2		       a0 00		      ldy	#0
     88  fae4		       85 02		      sta	WSYNC
     89  fae6
     90  fae6		       84 08		      sty	COLUPF
     91  fae8		       85 02		      sta	WSYNC
     92  faea
     93  faea		       85 08		      sta	COLUPF
     94  faec		       85 02		      sta	WSYNC
     95  faee
     96  faee		       85 02		      sta	WSYNC
     97  faf0
     98  faf0		       85 02		      sta	WSYNC
     99  faf2
    100  faf2		       84 08		      sty	COLUPF
    101  faf4		       85 02		      sta	WSYNC
    102  faf6
    103  faf6		       85 08		      sta	COLUPF
    104  faf8		       85 02		      sta	WSYNC
    105  fafa		       85 02		      sta	WSYNC
    106  fafc		       4c 00 f8 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  faff					      include	"kernel_row.s"
      1  faff							; Frame Start
      2  faff
      3  faff							; Macros for calculating sprite values (GRPx).
      4  faff
      5  faff							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  faff					      mac	kernel_load_player
      7  faff							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  faff					      dcp	SpriteEnd	; 5c
      9  faff					      ldy	#0	; 2c
     10  faff							; constant 6c:
     11  faff					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  faff					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  faff					      ldy	SpriteEnd
     14  faff							; 4c
     15  faff					      ldx	Frame0,Y
     16  faff					      endm
     17  faff
     18  faff							; mac jet_spritedata_calc
     19  faff							;
     20  faff							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  faff							; GRP0.
     22  faff					      mac	jet_spritedata_calc
     23  faff							; loader
     24  faff					      lda	#SPRITE_HEIGHT
     25  faff					      dcp	SpriteEnd
     26  faff					      ldy	SpriteEnd
     27  faff
     28  faff							; 4c
     29  faff							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  faff							; from Frame0 + Y must never cross a page boundary.
     31  faff					      lda	Frame0,Y
     32  faff							; 6c
     33  faff					      .byte	$b0, $01	;2c / 3c (taken)
     34  faff					      .byte	$2c	; 4c / 0c
     35  faff					      sta	JET_SP	; 0c / 3c
     36  faff					      endm
     37  faff
     38  faff				   row_start
     39  faff
     40  faff							; [scanline 1]
     41  faff				   row_1
     42  faff							; Enter after scanline starts on row "9" and wraps
      0  faff					      ASSERT_RUNTIME	"_scycles == #10"
      1  faff				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $faff  && !(  _scycles == #10  ) }
      2  faff					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  faff
      0  faff					      jet_spritedata_calc
      1  faff
      2  faff		       a9 09		      lda	#SPRITE_HEIGHT
      3  fb01		       c7 86		      dcp	SpriteEnd
      4  fb03		       a4 86		      ldy	SpriteEnd
      5  fb05
      6  fb05
      7  fb05
      8  fb05
      9  fb05		       b9 00 fd 	      lda	Frame0,Y
     10  fb08
     11  fb08		       b0 01		      .byte.b	$b0, $01
     12  fb0a		       2c		      .byte.b	$2c
     13  fb0b		       85 1b		      sta	JET_SP
     46  fb0d
     47  fb0d							; [[[Nibble VM.]]]
     48  fb0d		       85 02		      sta	WSYNC
     49  fb0f
     50  fb0f							; sleep 46
     51  fb0f
      0  fb0f					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb0f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb0f  && !(  _scycles == #0  ) }
      2  fb0f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  fb0f
     54  fb0f							; [scanline 2]
     55  fb0f				   row_2
      0  fb0f					      jet_spritedata_calc
      1  fb0f
      2  fb0f		       a9 09		      lda	#SPRITE_HEIGHT
      3  fb11		       c7 86		      dcp	SpriteEnd
      4  fb13		       a4 86		      ldy	SpriteEnd
      5  fb15
      6  fb15
      7  fb15
      8  fb15
      9  fb15		       b9 00 fd 	      lda	Frame0,Y
     10  fb18
     11  fb18		       b0 01		      .byte.b	$b0, $01
     12  fb1a		       2c		      .byte.b	$2c
     13  fb1b		       85 1b		      sta	JET_SP
     57  fb1d
     58  fb1d							; Black out playfield
     59  fb1d							; TODO This should be done with playfield pixels, not color.
     60  fb1d		       a9 00		      lda	#0
     61  fb1f		       85 08		      sta	COLUPF
     62  fb21
     63  fb21							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  fb21		       a6 98		      ldx	RamKernelPhpTarget
     65  fb23		       9a		      txs
     66  fb24
     67  fb24							; [[[Nibble VM.]]]
      0  fb24					      sleep	30
      1  fb24				   .CYCLES    SET	30
      2  fb24
      3  fb24				  -	      IF	.CYCLES < 2
      4  fb24				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb24				  -	      ERR
      6  fb24					      ENDIF
      7  fb24
      8  fb24				  -	      IF	.CYCLES & 1
      9  fb24				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb24				  -	      nop	0
     11  fb24				  -	      ELSE
     12  fb24				  -	      bit	VSYNC
     13  fb24				  -	      ENDIF
     14  fb24				  -.CYCLES    SET	.CYCLES - 3
     15  fb24					      ENDIF
     16  fb24
     17  fb24					      REPEAT	.CYCLES / 2
     18  fb24		       ea		      nop
     17  fb24					      REPEND
     18  fb25		       ea		      nop
     17  fb25					      REPEND
     18  fb26		       ea		      nop
     17  fb26					      REPEND
     18  fb27		       ea		      nop
     17  fb27					      REPEND
     18  fb28		       ea		      nop
     17  fb28					      REPEND
     18  fb29		       ea		      nop
     17  fb29					      REPEND
     18  fb2a		       ea		      nop
     17  fb2a					      REPEND
     18  fb2b		       ea		      nop
     17  fb2b					      REPEND
     18  fb2c		       ea		      nop
     17  fb2c					      REPEND
     18  fb2d		       ea		      nop
     17  fb2d					      REPEND
     18  fb2e		       ea		      nop
     17  fb2e					      REPEND
     18  fb2f		       ea		      nop
     17  fb2f					      REPEND
     18  fb30		       ea		      nop
     17  fb30					      REPEND
     18  fb31		       ea		      nop
     17  fb31					      REPEND
     18  fb32		       ea		      nop
     19  fb33					      REPEND
     69  fb33
     70  fb33							; Load PF1 value
     71  fb33		       a9 a0		      lda	#%10100000
     72  fb35		       85 96		      sta	RamPF1Value
     73  fb37
     74  fb37		       a9 04		      lda	#4
     75  fb39		       8d 96 02 	      sta	TIM64T
     76  fb3c
     77  fb3c							; Enable playfield at end of scanline
     78  fb3c		       a9 42		      lda	#COL_BG
     79  fb3e		       85 08		      sta	COLUPF
     80  fb40
     81  fb40							; lda #%00001000
     82  fb40							; sta REFP1
     83  fb40
      0  fb40					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb40				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb40  && !(  _scycles == #0  ) }
      2  fb40					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  fb40
     86  fb40							; [scanline 3]
     87  fb40				   row_3
      0  fb40					      jet_spritedata_calc
      1  fb40
      2  fb40		       a9 09		      lda	#SPRITE_HEIGHT
      3  fb42		       c7 86		      dcp	SpriteEnd
      4  fb44		       a4 86		      ldy	SpriteEnd
      5  fb46
      6  fb46
      7  fb46
      8  fb46
      9  fb46		       b9 00 fd 	      lda	Frame0,Y
     10  fb49
     11  fb49		       b0 01		      .byte.b	$b0, $01
     12  fb4b		       2c		      .byte.b	$2c
     13  fb4c		       85 1b		      sta	JET_SP
     89  fb4e
     90  fb4e							; Pre-populate graphics.
     91  fb4e		       a9 09		      lda	#SPRITE_HEIGHT
      0  fb50					      KERNEL_LOAD_PLAYER
      1  fb50
      2  fb50		       c7 86		      dcp	SpriteEnd
      3  fb52		       a0 00		      ldy	#0
      4  fb54
      5  fb54		       b0 01		      .byte.b	$b0, $01
      6  fb56		       2c		      .byte.b	$2c
      7  fb57		       a4 86		      ldy	SpriteEnd
      8  fb59
      9  fb59		       be 00 fd 	      ldx	Frame0,Y
     93  fb5c		       86 97		      stx	RamKernelGRP0
      0  fb5e					      KERNEL_LOAD_PLAYER
      1  fb5e
      2  fb5e		       c7 86		      dcp	SpriteEnd
      3  fb60		       a0 00		      ldy	#0
      4  fb62
      5  fb62		       b0 01		      .byte.b	$b0, $01
      6  fb64		       2c		      .byte.b	$2c
      7  fb65		       a4 86		      ldy	SpriteEnd
      8  fb67
      9  fb67		       be 00 fd 	      ldx	Frame0,Y
     95  fb6a		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  fb6d		       a5 97		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  fb6f					      sleep	2
      1  fb6f				   .CYCLES    SET	2
      2  fb6f
      3  fb6f				  -	      IF	.CYCLES < 2
      4  fb6f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb6f				  -	      ERR
      6  fb6f					      ENDIF
      7  fb6f
      8  fb6f				  -	      IF	.CYCLES & 1
      9  fb6f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb6f				  -	      nop	0
     11  fb6f				  -	      ELSE
     12  fb6f				  -	      bit	VSYNC
     13  fb6f				  -	      ENDIF
     14  fb6f				  -.CYCLES    SET	.CYCLES - 3
     15  fb6f					      ENDIF
     16  fb6f
     17  fb6f					      REPEAT	.CYCLES / 2
     18  fb6f		       ea		      nop
     19  fb70					      REPEND
     98  fb70
     99  fb70							; [scanlines 4-5]
    100  fb70							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  fb70		       a6 99		      ldx	RamKernelX
    102  fb72		       38		      sec
      0  fb73					      ASSERT_RUNTIME	"_scycles == #73"
      1  fb73				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fb73  && !(  _scycles == #73  ) }
      2  fb73					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  fb73		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  fb76
    106  fb76							; [scanline 6]
    107  fb76
    108  fb76							; Try to avoid page crossing in jet_spritedata_calc
    109  fb76							; TODO enforce this with ASSERT_RUNTIME instead?
    110  fb80		       00 00 00 00*	      align	16
    111  fb80
    112  fb80				   row_after_kernel
    113  fb80				   row_6
      0  fb80					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb80				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb80  && !(  _scycles == #0  ) }
      2  fb80					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  fb80
    116  fb80							; Cleanup from the kernel.
    117  fb80		       a9 00		      lda	#0
    118  fb82		       85 1e		      sta	EMERALD_MI_ENABLE
    119  fb84		       85 1c		      sta	EMERALD_SP
    120  fb86		       85 08		      sta	COLUPF
    121  fb88		       85 26		      sta	VDELP1
    122  fb8a
      0  fb8a					      jet_spritedata_calc
      1  fb8a
      2  fb8a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fb8c		       c7 86		      dcp	SpriteEnd
      4  fb8e		       a4 86		      ldy	SpriteEnd
      5  fb90
      6  fb90
      7  fb90
      8  fb90
      9  fb90		       b9 00 fd 	      lda	Frame0,Y
     10  fb93
     11  fb93		       b0 01		      .byte.b	$b0, $01
     12  fb95		       2c		      .byte.b	$2c
     13  fb96		       85 1b		      sta	JET_SP
    124  fb98
    125  fb98							; Idle.
    126  fb98		       85 02		      sta	WSYNC
    127  fb9a
    128  fb9a							; [scanline 7]
    129  fb9a				   row_7
      0  fb9a					      jet_spritedata_calc
      1  fb9a
      2  fb9a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fb9c		       c7 86		      dcp	SpriteEnd
      4  fb9e		       a4 86		      ldy	SpriteEnd
      5  fba0
      6  fba0
      7  fba0
      8  fba0
      9  fba0		       b9 00 fd 	      lda	Frame0,Y
     10  fba3
     11  fba3		       b0 01		      .byte.b	$b0, $01
     12  fba5		       2c		      .byte.b	$2c
     13  fba6		       85 1b		      sta	JET_SP
    131  fba8
    132  fba8		       a9 42		      lda	#COL_BG
    133  fbaa		       85 08		      sta	COLUPF
    134  fbac
    135  fbac							; FRAMESWITCH
    136  fbac		       a9 01		      lda	#01
    137  fbae		       25 84		      and	FrameCount
    138  fbb0		       d0 13		      bne	loadframe2
    139  fbb2
    140  fbb2							; Perform gem loading for Kernel A.
    141  fbb2
    142  fbb2				   loadframe1
      0  fbb2					      ASSERT_RUNTIME	"_scycles == #32"
      1  fbb2				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $fbb2  && !(  _scycles == #32  ) }
      2  fbb2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  fbb2
    145  fbb2							; Emerald byte setting 1A
    146  fbb2							; ldx #0
    147  fbb2							; lda KERNEL_STORAGE_R,X
    148  fbb2							; sta GEM_00_W
    149  fbb2							; inx
    150  fbb2							; lda KERNEL_STORAGE_R,X
    151  fbb2							; sta GEM_04_W
    152  fbb2							; inx
    153  fbb2							; lda KERNEL_STORAGE_R,X
    154  fbb2							; sta GEM_09_W
    155  fbb2							; inx
    156  fbb2
    157  fbb2		       85 02		      sta	WSYNC
    158  fbb4
    159  fbb4							; [scanline 8]
      0  fbb4					      jet_spritedata_calc
      1  fbb4
      2  fbb4		       a9 09		      lda	#SPRITE_HEIGHT
      3  fbb6		       c7 86		      dcp	SpriteEnd
      4  fbb8		       a4 86		      ldy	SpriteEnd
      5  fbba
      6  fbba
      7  fbba
      8  fbba
      9  fbba		       b9 00 fd 	      lda	Frame0,Y
     10  fbbd
     11  fbbd		       b0 01		      .byte.b	$b0, $01
     12  fbbf		       2c		      .byte.b	$2c
     13  fbc0		       85 1b		      sta	JET_SP
    161  fbc2
    162  fbc2							; Emerald byte setting 1B
    163  fbc2							; lda KERNEL_STORAGE_R,X
    164  fbc2							; sta GEM_13_W
    165  fbc2							; inx
    166  fbc2							; lda KERNEL_STORAGE_R,X
    167  fbc2							; sta GEM_17_W
    168  fbc2							; inx
    169  fbc2							; lda KERNEL_STORAGE_R,X
    170  fbc2							; sta GEM_18_W
    171  fbc2							; inx
    172  fbc2							; lda KERNEL_STORAGE_R,X
    173  fbc2							; sta GEM_22_W
    174  fbc2
    175  fbc2		       4c d8 fb 	      jmp	row_8_end
    176  fbc5
    177  fbc5							; Perform gem loading for Kernel B.
    178  fbc5
    179  fbc5				   loadframe2
      0  fbc5					      ASSERT_RUNTIME	"_scycles == #33"
      1  fbc5				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $fbc5  && !(  _scycles == #33  ) }
      2  fbc5					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fbc5
    182  fbc5							; Emerald byte setting 2A
    183  fbc5							; ldx #[storage_02 - storage]
    184  fbc5							; lda KERNEL_STORAGE_R,X
    185  fbc5							; sta GEM_02_W
    186  fbc5							; inx
    187  fbc5							; lda KERNEL_STORAGE_R,X
    188  fbc5							; sta GEM_06_W
    189  fbc5							; inx
    190  fbc5							; lda KERNEL_STORAGE_R,X
    191  fbc5							; sta GEM_08_W
    192  fbc5							; inx
    193  fbc5
    194  fbc5		       85 02		      sta	WSYNC
    195  fbc7
    196  fbc7							; [scanline 8]
    197  fbc7				   row_8
      0  fbc7					      jet_spritedata_calc
      1  fbc7
      2  fbc7		       a9 09		      lda	#SPRITE_HEIGHT
      3  fbc9		       c7 86		      dcp	SpriteEnd
      4  fbcb		       a4 86		      ldy	SpriteEnd
      5  fbcd
      6  fbcd
      7  fbcd
      8  fbcd
      9  fbcd		       b9 00 fd 	      lda	Frame0,Y
     10  fbd0
     11  fbd0		       b0 01		      .byte.b	$b0, $01
     12  fbd2		       2c		      .byte.b	$2c
     13  fbd3		       85 1b		      sta	JET_SP
    199  fbd5
    200  fbd5							; Emerald byte setting 2B
    201  fbd5							; lda KERNEL_STORAGE_R,X
    202  fbd5							; sta GEM_11_W
    203  fbd5							; inx
    204  fbd5							; lda KERNEL_STORAGE_R,X
    205  fbd5							; sta GEM_15_W
    206  fbd5							; inx
    207  fbd5							; lda KERNEL_STORAGE_R,X
    208  fbd5							; sta GEM_20_W
    209  fbd5							; inx
    210  fbd5							; lda KERNEL_STORAGE_R,X
    211  fbd5							; sta GEM_24_W
    212  fbd5
    213  fbd5		       4c d8 fb 	      jmp	row_8_end
    214  fbd8
    215  fbd8							; Common row 8 return.
    216  fbd8
    217  fbd8				   row_8_end
    218  fbd8							; Idle.
    219  fbd8		       85 02		      sta	WSYNC
    220  fbda
    221  fbda							; [scanline 8]
    222  fbda							; Repeat loop until LoopCount < 0
    223  fbda		       c6 83		      dec	LoopCount
    224  fbdc		       30 03		      bmi	row_end
    225  fbde		       4c ff fa 	      jmp	row_start
    226  fbe1				   row_end
    227  fbe1		       4c d0 fa 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fbe4					      include	"kernel_gem.s"
      1  fbe4							;
      2  fbe4							; Gem Kernels
      3  fbe4							;
      4  fbe4							; Gems are displayed in alternating kernels. This chart shows
      5  fbe4							; which kernel is responsible for which gem, with missiles denoted.
      6  fbe4							;
      7  fbe4							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fbe4							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fbe4							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fbe4							;  #	 0^	 8^	  17^	    26^       gem index
     11  fbe4							;
     12  fbe4							; The middle bar indicates where the pattern reverses.
     13  fbe4							;
     14  fbe4							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fbe4							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fbe4							; requires with a single sprite. By alternating sprites each frame with an...
     17  fbe4							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fbe4							; line, except for two. These are instead rendered by the missile, which
     19  fbe4							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fbe4
     21  fbe4							; for copying
     22  fc00		       00 00 00 00*	      align	256
     23  fc00
     24  fc00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fc00							;
     26  fc00							; GEM KERNEL A
     27  fc00							;
     28  fc00
     29  fc00				   kernel_1_start subroutine
     30  fc00					      rorg	$f100
     31  fc00
     32  fc00							; Kernel Marker
     33  fc00		       0a		      .byte.b	$A
     34  fc01
     35  fc01				   KernelA_early
     36  fc01							; Early code to set next GRP0 image. Immediate value is overwritten
     37  fc01		       a9 ff		      lda	#$ff
     38  fc03
     39  fc03				   KernelA    subroutine
      0  fc03					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fc03				   .KERNEL    SET	$A
      2  fc03				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fc03					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  fc03
     42  fc03							; Write Gemini 0A into delayed sprite register
     43  fc03		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  fc03		       f1 04	   KernelA_VDEL1 =	. - 1
     45  fc05		       84 1c		      sty	EMERALD_SP
     46  fc07							; Write Player from accumulator. When writing to the other sprite, the
     47  fc07							; TIA will copy Gemini 0A into visible sprite register
     48  fc07		       85 1b		      sta	JET_SP
     49  fc09							; Write Gemini 1A into visible sprite register
     50  fc09		       a0 66		      ldy	#%01100110
     51  fc09		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  fc0b		       84 1c		      sty	EMERALD_SP
     53  fc0d		       a0 06		      ldy	#%00000110
     54  fc0d		       f1 0e	   KernelA_STY =	. - 1
     55  fc0f
     56  fc0f							; Need D0 for VDELP1 trigger with PHP
      0  fc0f					      sleep	2
      1  fc0f				   .CYCLES    SET	2
      2  fc0f
      3  fc0f				  -	      IF	.CYCLES < 2
      4  fc0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc0f				  -	      ERR
      6  fc0f					      ENDIF
      7  fc0f
      8  fc0f				  -	      IF	.CYCLES & 1
      9  fc0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc0f				  -	      nop	0
     11  fc0f				  -	      ELSE
     12  fc0f				  -	      bit	VSYNC
     13  fc0f				  -	      ENDIF
     14  fc0f				  -.CYCLES    SET	.CYCLES - 3
     15  fc0f					      ENDIF
     16  fc0f
     17  fc0f					      REPEAT	.CYCLES / 2
     18  fc0f		       ea		      nop
     19  fc10					      REPEND
     58  fc10
     59  fc10							; Register config
     60  fc10		       a9 08		      lda	#%00001000
     61  fc12		       85 0c		      sta	REFP1
     62  fc14
     63  fc14							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fc14					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fc14				   .KERNEL    SET	$A
      2  fc14				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fc14					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     65  fc14				   KernelA_A
     66  fc14		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     67  fc16
     68  fc16							; vvv RST0
     69  fc16				   KernelA_B
     70  fc16		       a5 96		      lda	RamPF1Value
     71  fc18				   KernelA_C
     72  fc18		       84 26		      sty	VDELP1	; disable delayed sprite
     73  fc1a				   KernelA_D
     74  fc1a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  fc1a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  fc1a				   .CYCLES    SET	3
      2  fc1a
      3  fc1a				  -	      IF	.CYCLES < 2
      4  fc1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc1a				  -	      ERR
      6  fc1a					      ENDIF
      7  fc1a
      8  fc1a					      IF	.CYCLES & 1
      9  fc1a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc1a		       04 00		      nop	0
     11  fc1c				  -	      ELSE
     12  fc1c				  -	      bit	VSYNC
     13  fc1c					      ENDIF
     14  fc1c				   .CYCLES    SET	.CYCLES - 3
     15  fc1c					      ENDIF
     16  fc1c
     17  fc1c				  -	      REPEAT	.CYCLES / 2
     18  fc1c				  -	      nop
     19  fc1c					      REPEND
     76  fc1c				   KernelA_E
     77  fc1c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     78  fc1e				   KernelA_F
     79  fc1e		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     80  fc20							; sleep 3 ; FIXME This should be a "sleep 3" and the missile enabled should be moved
     81  fc20				   KernelA_G
     82  fc20		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     83  fc22
     84  fc22				   KernelA_H
     85  fc22		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     86  fc24
      0  fc24					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fc24				   .KERNEL    SET	$A
      2  fc24				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fc24					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     88  fc24							; RST4 vvv
     89  fc24				   KernelA_I
     90  fc24		       08		      php		; Reset "medium close" NUSIZ repetition
     91  fc25				   KernelA_J		; unchanging
     92  fc25		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     93  fc27				   KernelA_K
     94  fc27		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     95  fc29							; RST4 ^^^
     96  fc29
     97  fc29				   KernelA_L
     98  fc29		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME this should be in prelude
     99  fc2b				   KernelA_M
    100  fc2b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    101  fc2d
    102  fc2d				   KernelA_N
    103  fc2d				   KernelA_O
      0  fc2d					      sleep	2
      1  fc2d				   .CYCLES    SET	2
      2  fc2d
      3  fc2d				  -	      IF	.CYCLES < 2
      4  fc2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc2d				  -	      ERR
      6  fc2d					      ENDIF
      7  fc2d
      8  fc2d				  -	      IF	.CYCLES & 1
      9  fc2d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc2d				  -	      nop	0
     11  fc2d				  -	      ELSE
     12  fc2d				  -	      bit	VSYNC
     13  fc2d				  -	      ENDIF
     14  fc2d				  -.CYCLES    SET	.CYCLES - 3
     15  fc2d					      ENDIF
     16  fc2d
     17  fc2d					      REPEAT	.CYCLES / 2
     18  fc2d		       ea		      nop
     19  fc2e					      REPEND
    105  fc2e							; reset stack pointer
    106  fc2e		       68		      pla
    107  fc2f
    108  fc2f							; End visible line
      0  fc2f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fc2f				   .KERNEL    SET	$A
      2  fc2f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fc2f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    110  fc2f
    111  fc2f				   KernelA_branch
    112  fc2f		       ad 84 02 	      lda	INTIM
    113  fc32		       d0 cd		      bne	KernelA_early
    114  fc34
    115  fc34		       4c 80 fb 	      jmp	row_after_kernel
    116  fc37
    117  fc37					      rend
    118  fc37				   kernel_1_end
      0  fc37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fc37				   .STARTA    SET	kernel_1_start
      2  fc37				   .ENDA      SET	kernel_1_end
      3  fc37				   .LEN       SET	$40
      4  fc37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fc37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fc37				  -	      err
      7  fc37					      endif
    120  fc37
    121  fc37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  fc37							;
    123  fc37							; GEM KERNEL B
    124  fc37							;
    125  fc37
    126  fc37				   kernel_2_start subroutine
    127  fc37					      rorg	$f100
    128  fc37
    129  fc37							; Kernel Marker
    130  fc37		       0b		      .byte.b	$B
    131  fc38
    132  fc38				   KernelB_early
    133  fc38							; Early code to set next GRP0 image. Value is overwritten
    134  fc38		       a9 ff		      lda	#$ff
    135  fc3a
    136  fc3a				   KernelB    subroutine
      0  fc3a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fc3a				   .KERNEL    SET	$B
      2  fc3a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fc3a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    138  fc3a
    139  fc3a							; Write Gemini 0A into delayed sprite register
    140  fc3a		       84 1c		      sty	EMERALD_SP
    141  fc3c							; Write Player from accumulator. When writing to the other sprite, the
    142  fc3c							; TIA will copy Gemini 0A into visible sprite register
    143  fc3c		       85 1b		      sta	JET_SP
    144  fc3e		       a0 aa		      ldy	#%10101010
    145  fc3e		       f1 08	   KernelB_VDEL0 =	. - 1
    146  fc40							; Write Gemini 1A into delayed sprite register
    147  fc40		       84 1c		      sty	EMERALD_SP
      0  fc42					      sleep	2
      1  fc42				   .CYCLES    SET	2
      2  fc42
      3  fc42				  -	      IF	.CYCLES < 2
      4  fc42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc42				  -	      ERR
      6  fc42					      ENDIF
      7  fc42
      8  fc42				  -	      IF	.CYCLES & 1
      9  fc42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc42				  -	      nop	0
     11  fc42				  -	      ELSE
     12  fc42				  -	      bit	VSYNC
     13  fc42				  -	      ENDIF
     14  fc42				  -.CYCLES    SET	.CYCLES - 3
     15  fc42					      ENDIF
     16  fc42
     17  fc42					      REPEAT	.CYCLES / 2
     18  fc42		       ea		      nop
     19  fc43					      REPEND
    149  fc43
    150  fc43							; Register config
    151  fc43		       a9 ff		      lda	#$ff
    152  fc45		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    153  fc47
    154  fc47		       a0 ff		      ldy	#$ff
    155  fc47		       f1 11	   KernelB_STY =	. - 1
    156  fc49
    157  fc49							; Load PF1 value into accumulator
    158  fc49		       a5 96		      lda	RamPF1Value
    159  fc4b
    160  fc4b							; Clear bits in processor status register for drawing.
    161  fc4b							; clc
    162  fc4b							; bit RamLowerSixByte
    163  fc4b		       38		      sec
    164  fc4c
    165  fc4c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fc4c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fc4c				   .KERNEL    SET	$B
      2  fc4c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fc4c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    167  fc4c				   KernelB_A
    168  fc4c		       85 11		      sta	EMERALD_SP_RESET
    169  fc4e				   KernelB_B
    170  fc4e		       24 93		      bit	RamZeroByte
    171  fc50				   KernelB_C
      0  fc50					      sleep	3
      1  fc50				   .CYCLES    SET	3
      2  fc50
      3  fc50				  -	      IF	.CYCLES < 2
      4  fc50				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc50				  -	      ERR
      6  fc50					      ENDIF
      7  fc50
      8  fc50					      IF	.CYCLES & 1
      9  fc50					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc50		       04 00		      nop	0
     11  fc52				  -	      ELSE
     12  fc52				  -	      bit	VSYNC
     13  fc52					      ENDIF
     14  fc52				   .CYCLES    SET	.CYCLES - 3
     15  fc52					      ENDIF
     16  fc52
     17  fc52				  -	      REPEAT	.CYCLES / 2
     18  fc52				  -	      nop
     19  fc52					      REPEND
    173  fc52				   KernelB_D
    174  fc52		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    175  fc54
    176  fc54							; below has one php load (could just be RESET)
    177  fc54				   KernelB_E
    178  fc54		       08		      php
    179  fc55				   KernelB_F
    180  fc55		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    181  fc57				   KernelB_G
    182  fc57		       85 0e		      sta	PF1
    183  fc59				   KernelB_H
    184  fc59		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    185  fc5b							; above has one PHP load
    186  fc5b
    187  fc5b				   KernelB_I
    188  fc5b		       85 11		      sta	EMERALD_SP_RESET
    189  fc5d				   KernelB_J
    190  fc5d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    191  fc5f				   KernelB_K
    192  fc5f		       86 1e		      stx	EMERALD_MI_ENABLE
    193  fc61				   KernelB_L
    194  fc61		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    195  fc63
    196  fc63				   KernelB_M
    197  fc63				   KernelB_N
      0  fc63					      sleep	2
      1  fc63				   .CYCLES    SET	2
      2  fc63
      3  fc63				  -	      IF	.CYCLES < 2
      4  fc63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc63				  -	      ERR
      6  fc63					      ENDIF
      7  fc63
      8  fc63				  -	      IF	.CYCLES & 1
      9  fc63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc63				  -	      nop	0
     11  fc63				  -	      ELSE
     12  fc63				  -	      bit	VSYNC
     13  fc63				  -	      ENDIF
     14  fc63				  -.CYCLES    SET	.CYCLES - 3
     15  fc63					      ENDIF
     16  fc63
     17  fc63					      REPEAT	.CYCLES / 2
     18  fc63		       ea		      nop
     19  fc64					      REPEND
    199  fc64
    200  fc64							; reset stack pointer
    201  fc64		       68		      pla
    202  fc65
    203  fc65							; End visible line
      0  fc65					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fc65				   .KERNEL    SET	$B
      2  fc65				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fc65					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    205  fc65
    206  fc65				   KernelB_branch
    207  fc65		       ad 84 02 	      lda	INTIM
    208  fc68		       d0 ce		      bne	KernelB_early
    209  fc6a		       4c 80 fb 	      jmp	row_after_kernel
    210  fc6d
    211  fc6d					      rend
    212  fc6d				   kernel_2_end
      0  fc6d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fc6d				   .STARTA    SET	kernel_2_start
      2  fc6d				   .ENDA      SET	kernel_2_end
      3  fc6d				   .LEN       SET	$40
      4  fc6d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fc6d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fc6d				  -	      err
      7  fc6d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fc6d					      include	"data_sprites.s"
      1  fd00		       00 00 00 00*	      align	256
      2  fd00
      3  fd00							; Player
      4  fd00				   Frame0
      5  fd00		       00		      .byte.b	#%00000000
      6  fd01		       60		      .byte.b	#%01100000
      7  fd02		       60		      .byte.b	#%01100000
      8  fd03		       60		      .byte.b	#%01100000
      9  fd04		       c0		      .byte.b	#%11000000
     10  fd05		       c0		      .byte.b	#%11000000
     11  fd06		       f0		      .byte.b	#%11110000
     12  fd07		       c0		      .byte.b	#%11000000
     13  fd08		       c0		      .byte.b	#%11000000
     14  fd09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fd0a					      include	"data_levels.s"
      1  fd10		       00 00 00 00*	      align	8
      2  fd10							; first bit of byte 2 & 3 are unused for simplicity
      3  fd10
      4  fd10				   level_00
      5  fd10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fd14
      7  fd14				   level_01
      8  fd14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fd18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fd1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fd20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fd24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fd28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fd2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fd30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fd34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fd38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fd3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fd40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fd44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fd48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fd4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fd50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fd54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fd58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fd5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fd60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fd64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fd68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fd6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fd70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fd74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fd78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fd7c				   level_01_end
     35  fd7c
     36  fd7c
     37  fd7c				   shard_map
     38  fd7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fd7d				   shard_map_end
------- FILE main.s
    160  fd7d
    161  fffc					      org	$fffc
    162  fffc		       09 f2		      .word.w	Start
    163  fffe		       09 f2		      .word.w	Start
