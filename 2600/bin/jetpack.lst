------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	Defines
      2 U0000 ????
      3 U0000 ????	       00 10	   ROW_COUNT  =	16
      4 U0000 ????	       00 02	   SIGNAL_LINE =	$02
      5 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
      6 U0000 ????
      7 U0000 ????						; RAM+ memory map
      8 U0000 ????
      9 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     10 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     11 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     12 U0000 ????
     13 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     14 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     15 U0000 ????
     16 U0000 ????
     17 U0000 ????						; NUSIZ values
     18 U0000 ????
     19 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     20 U0000 ????
     21 U0000 ????
     22 U0000 ????						; Colors
     23 U0000 ????
     24 U0000 ????	       00 42	   COL_BG     =	$42
     25 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     26 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     27 U0000 ????
     28 U0000 ????
     29 U0000 ????						; HMOVE values for missiles
     30 U0000 ????
     31 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     32 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     33 U0000 ????
     34 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     35 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     36 U0000 ????
     37 U0000 ????						; Missile values when 2A=RST
     38 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     39 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     40 U0000 ????
     41 U0000 ????
     42 U0000 ????						; Sprite details
     43 U0000 ????
     44 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     45 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     46 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     47 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     48 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     49 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     50 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     51 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     52 U0000 ????
     53 U0000 ????	       00 1b	   JET_SP     =	GRP0
     54 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     55 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     56 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     57 U0000 ????
     58 U0000 ????
     59 U0000 ????						; Game dimensionsn
     60 U0000 ????
     61 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     62 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     63 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     64 U0000 ????
     65 U0000 ????						; Compared with YPos
     66 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     67 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     68 U0000 ????
     69 U0000 ????						; Starting player position
     70 U0000 ????	       00 48	   YPosStart  =	72
     71 U0000 ????	       00 58	   XPosStart  =	88
     72 U0000 ????
     73 U0000 ????						; Top left corner
     74 U0000 ????						; YPosStart equ 190
     75 U0000 ????						; XPosStart equ 28
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00fb ????				      seg.u	Variables
      2 U00fb ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00 00 00 00*coolest_level ds	$3f
      8 U00c0
      9 U00c0		       00	   Temp       byte.b
     10 U00c1		       00	   Temp2      byte.b
     11 U00c2
     12 U00c2							; Counters
     13 U00c2		       00	   LoopCount  byte.b
     14 U00c3		       00	   FrameCount byte.b
     15 U00c4
     16 U00c4		       00	   SpriteEnd  byte.b
     17 U00c5		       00	   XPos       byte.b		; X position of player sprite
     18 U00c6
     19 U00c6
     20 U00c6		       00	   Speed1     byte.b
     21 U00c7		       00	   Speed2     byte.b
     22 U00c8
     23 U00c8		       00	   YPos       byte.b		; Y position of player sprite
     24 U00c9		       00	   YPos2      byte.b
     25 U00ca
     26 U00ca		       00	   ROW_DEMO_INDEX byte.b
     27 U00cb
     28 U00cb		       00	   RamNibbleTemp byte.b
     29 U00cc		       00	   RamNibbleVar1 byte.b
     30 U00cd		       00	   RamNibbleVar2 byte.b
     31 U00ce		       00	   RamZeroByte byte.b
     32 U00cf		       00	   RamLowerSixByte byte.b
     33 U00d0		       00	   RamFFByte  byte.b
     34 U00d1		       00	   RamStackBkp byte.b
     35 U00d2
     36 U00d2		       00	   RamRowJetpackIndex byte.b		; sprite counter
     37 U00d3
     38 U00d3							; Kernel support
     39 U00d3		       00	   RamPSByte  byte.b
     40 U00d4		       00	   RamPF1Value byte.b
     41 U00d5		       00	   RamKernelGRP0 byte.b		; temp
     42 U00d6		       00	   RamKernelPhpTarget byte.b
     43 U00d7		       00	   RamKernelX byte.b
     44 U00d8		       00	   RamKernelY byte.b
     45 U00d9		       00	   RamKernelGrp0 byte.b
     46 U00da
     47 U00da		       00	   RamKernelGemini1 byte.b
     48 U00db		       00	   RamKernelGemini1Reg byte.b
     49 U00dc		       00	   RamKernelGemini2 byte.b
     50 U00dd		       00	   RamKernelGemini2Reg byte.b
     51 U00de		       00	   RamKernelGemini3 byte.b
     52 U00df		       00	   RamKernelGemini3Reg byte.b
     53 U00e0		       00	   RamKernelGemini4 byte.b
     54 U00e1		       00	   RamKernelGemini4Reg byte.b
     55 U00e2		       00	   RamKernelGemini5 byte.b
     56 U00e3
     57 U00e3		       00	   BuildKernelX byte.b
     58 U00e4		       00	   BuildKernelY byte.b
     59 U00e5		       00	   BuildKernelRST byte.b
     60 U00e6		       00	   BuildKernelGrp0 byte.b
     61 U00e7		       00	   BuildKernelVdel1 byte.b
     62 U00e8		       00	   BuildKernelMissile byte.b
     63 U00e9
     64 U00e9		       00	   level_for_game byte.b
     65 U00ea		       00		      byte.b
     66 U00eb		       00		      byte.b
     67 U00ec		       00		      byte.b
     68 U00ed
     69 U00ed		       00	   DO_MISS_A  byte.b
     70 U00ee		       00	   DO_MISS_B  byte.b
     71 U00ef		       00	   DO_GEMS_A  byte.b
     72 U00f0		       00		      byte.b
     73 U00f1		       00		      byte.b
     74 U00f2		       00		      byte.b
     75 U00f3		       00		      byte.b
     76 U00f4		       00		      byte.b
     77 U00f5		       00	   DO_GEMS_B  byte.b
     78 U00f6		       00		      byte.b
     79 U00f7		       00		      byte.b
     80 U00f8		       00		      byte.b
     81 U00f9		       00		      byte.b
     82 U00fa		       00		      byte.b
------- FILE main.s
     64 U00fb
     65 U00fb							; Bank 1
     66  e000 ????				      seg	CodeBank1
     67  d000					      org	$D000
     68  d000					      rorg	$F000
     69  d000		       00	   BANK1      byte.b
     70  d200					      org	$d200
     71  d200					      rorg	$d200
     72  d200				   Bank1Start
     73  d200		       ad fa ff 	      lda	$fffa
     74  d203		       ea		      nop
     75  d204		       ea		      nop
     76  d205		       ea		      nop
     77  d206
     78  dffc					      org	$dffc
     79  dffc					      rorg	$fffc
     80  dffc		       00 d2		      .word.w	Bank1Start
     81  dffe		       00 d2		      .word.w	Bank1Start
     82  e000
     83  e000							; Bank 2
     84  f000 ????				      seg	CodeBank2
     85  e000					      org	$E000
     86  e000					      rorg	$F000
     87  e000		       00	   BANK2      byte.b
     88  e200					      org	$e200
     89  e200					      rorg	$f200
     90  e200				   Bank2Start
     91  e200		       ad fa ff 	      lda	$fffa
     92  e203		       ea		      nop
     93  e204		       ea		      nop
     94  e205		       ea		      nop
     95  e206
     96  effc					      org	$effc
     97  effc					      rorg	$fffc
     98  effc		       00 f2		      .word.w	Bank2Start
     99  effe		       00 f2		      .word.w	Bank2Start
    100  f000
    101  f000							; Bank 3
    102  10000 ????				       seg	CodeBank3
    103  f000					      org	$F000
    104  f000					      rorg	$F000
    105  f000		       00	   BANK3      byte.b
    106  f200					      org	$f200
    107  f200					      rorg	$f200
    108  f200				   Bank3Start
    109  f200		       ad fa ff 	      lda	$fffa
    110  f203		       ea		      nop
    111  f204		       ea		      nop
    112  f205		       ea		      nop
    113  f206		       4c 09 f2 	      jmp	Start
    114  f209
    115  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 c3		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 c8		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 c5		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 c6		      sta	Speed1
     48  f243		       85 c7		      sta	Speed2
     49  f245		       85 c9		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 ca		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 ce		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 cf		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 d0		      sta	RamFFByte
     61  f257
     62  f257							; Setup level.
     63  f257		       20 da fa 	      jsr	game_state_setup
     64  f25a
     65  f25a							; Start with vertical sync (to reset frame)
     66  f25a		       4c 00 f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f25d					      include	"kernel_loader.s"
      1  f25d							; Copies the gem kernels to RAM
      2  f25d
      3  f25d							; Copy Kernel A to CBSRAM
      4  f25d				   LoadKernelA subroutine
      5  f25d		       a0 37		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f25f				   .loop
      7  f25f		       b9 00 fd 	      lda	kernel_1_start,Y
      8  f262		       99 00 10 	      sta	$1000,Y
      9  f265		       88		      dey
     10  f266		       d0 f7		      bne	.loop
     11  f268		       ad 00 fd 	      lda	kernel_1_start
     12  f26b		       8d 00 10 	      sta	$1000
     13  f26e		       60		      rts
     14  f26f
     15  f26f							; Copy Kernel B to CBSRAM
     16  f26f				   LoadKernelB subroutine
     17  f26f		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f271				   .loop
     19  f271		       b9 38 fd 	      lda	kernel_2_start,Y
     20  f274		       99 00 10 	      sta	$1000,Y
     21  f277		       88		      dey
     22  f278		       d0 f7		      bne	.loop
     23  f27a		       ad 38 fd 	      lda	kernel_2_start
     24  f27d		       8d 00 10 	      sta	$1000
     25  f280		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f281					      include	"nibble.s"
      1  f281
      2  f281					      MAC	nibble_gem_kernel_a_1_build
      3  f281					      lda	#0
      4  f281					      ldx	#SENTINEL
      5  f281					      stx	BuildKernelX
      6  f281					      stx	BuildKernelY
      7  f281					      stx	BuildKernelRST
      8  f281							; Gemini 1A
      9  f281				   .K_1A
     10  f281					      ldy	[DO_GEMS_A + 0]
     11  f281					      jsr	KernelA_GenReset
     12  f281				   .if_1
     13  f281					      bne	.else_1
     14  f281					      sec
     15  f281					      rol
     16  f281							; Special: Encoding RST0
     17  f281							; Rewrite lda RamKernelPF1 to be #immediate
     18  f281					      ldy	#BC_LDA_IMM
     19  f281					      sty	[KernelA_B - $100]
     20  f281					      ldy	#%10100000
     21  f281					      sty	[KernelA_B - $100 + 1]
     22  f281							; Store 1A in GRP0
     23  f281					      ldy	[DO_GEMS_A + 1]
     24  f281					      sty	BuildKernelGrp0
     25  f281					      sty	RamKernelGrp0
     26  f281							; Gemini 1A is RESPx
     27  f281					      ldy	#EMERALD_SP_RESET
     28  f281					      sty	[KernelA_C - $100 + 1]
     29  f281							; Turn 3-cycle NOP into 4-cycle
     30  f281					      ldy	#$14
     31  f281					      sty	[KernelA_D - $100]
     32  f281					      jmp	.endif_1
     33  f281							; [BIT DEPTH] #1 If-End @ 1
     34  f281					      rol
     35  f281
     36  f281				   .else_1
     37  f281					      clc
     38  f281					      rol
     39  f281							; Store 0A in GRP0
     40  f281					      ldy	[DO_GEMS_A + 0]
     41  f281					      sty	BuildKernelGrp0
     42  f281					      sty	RamKernelGrp0
     43  f281					      ldy	[DO_GEMS_A + 1]
     44  f281					      jsr	KernelA_GenReset
     45  f281				   .if_2
     46  f281					      bne	.else_2
     47  f281					      sec
     48  f281					      rol
     49  f281							; GEM1ASWITCH
     50  f281					      jmp	.endif_2
     51  f281							; [BIT DEPTH] #2 If-End @ 2
     52  f281
     53  f281				   .else_2
     54  f281					      clc
     55  f281					      rol
     56  f281							; Calculate the 1A value
     57  f281					      ldy	SHARD_LUT_RF1
     58  f281					      cpy	#1
     59  f281					      .byte	$D0, #3
     60  f281					      ldy	#RESP1
     61  f281					      .byte	$2C
     62  f281					      ldy	#GRP1
     63  f281					      sty	RamKernelGemini1Reg
     64  f281							; Set opcode
     65  f281					      ldx	SHARD_LUT_RF1
     66  f281					      cpx	#1
     67  f281					      ldy	#BC_STX
     68  f281					      .byte	$F0, #5
     69  f281					      ldy	[DO_GEMS_A + 1]
     70  f281					      jsr	KernelA_UpdateRegs
     71  f281					      sty	RamKernelGemini1
     72  f281							; [BIT DEPTH] #2 *If-End @ 2
     73  f281							; [BIT DEPTH] #2 Else-End @ 2
     74  f281				   .endif_2
     75  f281							; [BIT DEPTH] #1 *If-End @ 1
     76  f281							; [BIT DEPTH] #1 Else-End @ 2
     77  f281				   .endif_1
     78  f281							; BuildKernelX, BuildKernelY are upgraded if not set
     79  f281							; Gemini 2A
     80  f281				   .K_2A
     81  f281					      ldy	[DO_GEMS_A + 2]
     82  f281					      jsr	KernelA_GenReset
     83  f281				   .if_3
     84  f281					      bne	.else_3
     85  f281					      sec
     86  f281					      rol
     87  f281					      jmp	.endif_3
     88  f281							; [BIT DEPTH] #3 If-End @ 3
     89  f281
     90  f281				   .else_3
     91  f281					      clc
     92  f281					      rol
     93  f281							; Set opcode
     94  f281					      ldy	[DO_GEMS_A + 2]
     95  f281					      jsr	KernelA_UpdateRegs
     96  f281					      sty	RamKernelGemini2
     97  f281							; Set opcode target
     98  f281					      ldy	SHARD_LUT_RF1
     99  f281					      cpy	#2
    100  f281					      .byte	$D0, #3
    101  f281					      ldy	#RESP1
    102  f281					      .byte	$2C
    103  f281					      ldy	#GRP1
    104  f281					      sty	RamKernelGemini2Reg
    105  f281							; [BIT DEPTH] #3 *If-End @ 3
    106  f281							; [BIT DEPTH] #3 Else-End @ 3
    107  f281				   .endif_3
    108  f281							; Can't preserve Grp0 now
    109  f281					      ldy	#SENTINEL
    110  f281					      sty	RamKernelGrp0
    111  f281							; Gemini 3A
    112  f281				   .K_3A
    113  f281					      ldy	[DO_GEMS_A + 3]
    114  f281					      jsr	KernelA_GenReset
    115  f281				   .if_4
    116  f281					      bne	.else_4
    117  f281					      sec
    118  f281					      rol
    119  f281					      jmp	.endif_4
    120  f281							; [BIT DEPTH] #4 If-End @ 4
    121  f281
    122  f281				   .else_4
    123  f281					      clc
    124  f281					      rol
    125  f281							; Set opcode
    126  f281					      ldy	[DO_GEMS_A + 3]
    127  f281					      jsr	KernelA_UpdateRegs
    128  f281					      sty	RamKernelGemini3
    129  f281							; Set opcode target
    130  f281					      ldy	SHARD_LUT_RF1
    131  f281					      cpy	#3
    132  f281					      .byte	$D0, #3
    133  f281					      ldy	#RESP1
    134  f281					      .byte	$2C
    135  f281					      ldy	#GRP1
    136  f281					      sty	RamKernelGemini3Reg
    137  f281							; [BIT DEPTH] #4 *If-End @ 4
    138  f281							; [BIT DEPTH] #4 Else-End @ 4
    139  f281				   .endif_4
    140  f281							; [BIT DEPTH] Final: 4 (out of 8 bits)
    141  f281					      rol
    142  f281					      rol
    143  f281					      rol
    144  f281					      rol
    145  f281					      ENDM
    146  f281
    147  f281
    148  f281					      MAC	nibble_gem_kernel_a_2_build
    149  f281					      lda	#0
    150  f281							; VD1 default
    151  f281					      ldx	[DO_GEMS_A + 1]
    152  f281					      stx	BuildKernelVdel1
    153  f281							; Gemini 4A
    154  f281					      ldx	SHARD_LUT_VD1
    155  f281					      cpx	#4
    156  f281				   .if_1
    157  f281					      beq	.else_1
    158  f281					      sec
    159  f281					      rol
    160  f281							; Set PHP
    161  f281							; Update VDEL1
    162  f281					      ldx	[DO_GEMS_A + 4]
    163  f281					      stx	BuildKernelVdel1
    164  f281					      jmp	.endif_1
    165  f281							; [BIT DEPTH] #1 If-End @ 1
    166  f281
    167  f281				   .else_1
    168  f281					      clc
    169  f281					      rol
    170  f281					      ldy	[DO_GEMS_A + 4]
    171  f281					      jsr	KernelA_UpdateRegs
    172  f281					      sty	RamKernelGemini4
    173  f281							; Set PHP
    174  f281							; [BIT DEPTH] #1 *If-End @ 1
    175  f281							; [BIT DEPTH] #1 Else-End @ 1
    176  f281				   .endif_1
    177  f281							; Gemini 5A
    178  f281							; TODO eventually...?
    179  f281							; Missile
    180  f281					      ldy	DO_MISS_A
    181  f281				   .if_2
    182  f281					      bne	.else_2
    183  f281					      sec
    184  f281					      rol
    185  f281					      jmp	.endif_2
    186  f281							; [BIT DEPTH] #2 If-End @ 2
    187  f281
    188  f281				   .else_2
    189  f281					      clc
    190  f281					      rol
    191  f281							; [BIT DEPTH] #2 *If-End @ 2
    192  f281							; [BIT DEPTH] #2 Else-End @ 2
    193  f281				   .endif_2
    194  f281							; VD1
    195  f281							; GRP0
    196  f281							; X
    197  f281							; Y
    198  f281							; [BIT DEPTH] Final: 2 (out of 8 bits)
    199  f281					      rol
    200  f281					      rol
    201  f281					      rol
    202  f281					      rol
    203  f281					      rol
    204  f281					      rol
    205  f281					      ENDM
    206  f281
    207  f281
    208  f281					      MAC	nibble_gem_kernel_b_build
    209  f281					      lda	#0
    210  f281					      ldx	#SENTINEL
    211  f281					      stx	BuildKernelX
    212  f281					      stx	BuildKernelY
    213  f281					      stx	BuildKernelRST
    214  f281							; Php target default
    215  f281					      ldx	#RESP1
    216  f281					      stx	RamKernelPhpTarget
    217  f281							; Gemini 0B
    218  f281					      ldy	[DO_GEMS_B + 0]
    219  f281					      sty	BuildKernelGrp0
    220  f281					      sty	RamKernelGrp0
    221  f281							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    222  f281							; Gemini 1B
    223  f281					      ldy	[DO_GEMS_B + 1]
    224  f281					      jsr	KernelA_UpdateRegs
    225  f281					      sty	RamKernelGemini1
    226  f281							; Gemini 2B
    227  f281					      ldy	[DO_GEMS_B + 2]
    228  f281					      jsr	KernelB_GenPhp
    229  f281				   .if_1
    230  f281					      bne	.else_1
    231  f281					      sec
    232  f281					      rol
    233  f281					      CALC_REGS_AND_STORE	3, RamKernelGemini3
    234  f281							; Write to PHP in 2B
    235  f281							; Update Grp0
    236  f281					      ldy	BuildKernelRST
    237  f281					      sty	RamKernelGrp0
    238  f281					      jmp	.endif_1
    239  f281							; [BIT DEPTH] #1 If-End @ 1
    240  f281
    241  f281				   .else_1
    242  f281					      clc
    243  f281					      rol
    244  f281					      CALC_REGS_AND_STORE	2, RamKernelGemini2
    245  f281							; [BIT DEPTH] #1 *If-End @ 1
    246  f281							; [BIT DEPTH] #1 Else-End @ 1
    247  f281				   .endif_1
    248  f281							; Gemini 3B
    249  f281					      ldy	[DO_GEMS_B + 3]
    250  f281					      jsr	KernelB_GenPhp
    251  f281				   .if_2
    252  f281					      bne	.else_2
    253  f281					      sec
    254  f281					      rol
    255  f281							; Write to PHP in 3B
    256  f281					      CALC_REGS_AND_STORE	2, RamKernelGemini2
    257  f281
    258  f281							; Update Grp0
    259  f281					      ldy	BuildKernelRST
    260  f281					      sty	RamKernelGrp0
    261  f281					      jmp	.endif_2
    262  f281							; [BIT DEPTH] #2 If-End @ 2
    263  f281
    264  f281				   .else_2
    265  f281					      clc
    266  f281					      rol
    267  f281					      CALC_REGS_AND_STORE	3, RamKernelGemini3
    268  f281							; [BIT DEPTH] #2 *If-End @ 2
    269  f281							; [BIT DEPTH] #2 Else-End @ 2
    270  f281				   .endif_2
    271  f281							; Write out PHP flag comparison
    272  f281					      ldy	BuildKernelRST
    273  f281					      cpy	#G01
    274  f281				   .if_3
    275  f281					      bne	.else_3
    276  f281					      sec
    277  f281					      rol
    278  f281					      jmp	.endif_3
    279  f281							; [BIT DEPTH] #3 If-End @ 3
    280  f281
    281  f281				   .else_3
    282  f281					      clc
    283  f281					      rol
    284  f281							; [BIT DEPTH] #3 *If-End @ 3
    285  f281							; [BIT DEPTH] #3 Else-End @ 3
    286  f281				   .endif_3
    287  f281							; Missile
    288  f281							; ldy DO_MISS_B
    289  f281							; NIBBLE_IF eq
    290  f281							; NIBBLE_WRITE [KernelB_K - $100], #BC_STA
    291  f281							; NIBBLE_ELSE
    292  f281							;     NIBBLE_WRITE [KernelB_K - $100], BuildKernelMissile
    293  f281							; NIBBLE_END_IF
    294  f281							; Gemini 4B
    295  f281					      ldy	[DO_GEMS_B + 4]
    296  f281					      jsr	KernelA_UpdateRegs
    297  f281					      sty	RamKernelGemini4
    298  f281							; TODO if no PHP, rewrite previous section:
    299  f281							; NIBBLE_IF cs
    300  f281							;
    301  f281							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    302  f281							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    303  f281							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    304  f281							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    305  f281							; NIBBLE_END_IF
    306  f281							; Make adjustments for sprites.
    307  f281					      ror	BuildKernelGrp0
    308  f281					      ror	BuildKernelX
    309  f281					      ror	BuildKernelY
    310  f281							;
    311  f281							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    312  f281							; GRP0
    313  f281							; X
    314  f281							; Y
    315  f281							; [BIT DEPTH] Final: 3 (out of 8 bits)
    316  f281					      rol
    317  f281					      rol
    318  f281					      rol
    319  f281					      rol
    320  f281					      rol
    321  f281					      ENDM
    322  f281
    323  f281
    324  f281
    325  f281					      MAC	nibble_gem_kernel_a_1
    326  f281				   .if_1
    327  f281					      asl
    328  f281					      bcc	.else_1
    329  f281					      jmp	.endif_1
    330  f281				   .else_1
    331  f281				   .if_2
    332  f281					      asl
    333  f281					      bcc	.else_2
    334  f281					      ldx	#BC_STX
    335  f281					      stx	[KernelA_D_W + 0]
    336  f281					      ldx	#RESP1
    337  f281					      stx	[KernelA_D_W + 1]
    338  f281					      jmp	.endif_2
    339  f281				   .else_2
    340  f281					      ldx	RamKernelGemini1
    341  f281					      stx	[KernelA_D_W + 0]
    342  f281					      ldx	RamKernelGemini1Reg
    343  f281					      stx	[KernelA_D_W + 1]
    344  f281				   .endif_2
    345  f281				   .endif_1
    346  f281				   .if_3
    347  f281					      asl
    348  f281					      bcc	.else_3
    349  f281					      ldx	#NOP_REG
    350  f281					      stx	[KernelA_E_W + 1 + 0]
    351  f281					      ldx	#RESP1
    352  f281					      stx	[KernelA_G_W + 1 + 0]
    353  f281					      jmp	.endif_3
    354  f281				   .else_3
    355  f281					      ldx	#RESP1
    356  f281					      stx	[KernelA_E_W + 1 + 0]
    357  f281					      ldx	RamKernelGemini2
    358  f281					      stx	[KernelA_G_W + 0]
    359  f281					      ldx	RamKernelGemini2Reg
    360  f281					      stx	[KernelA_G_W + 1]
    361  f281				   .endif_3
    362  f281				   .if_4
    363  f281					      asl
    364  f281					      bcc	.else_4
    365  f281					      ldx	#RESP1
    366  f281					      stx	[KernelA_H_W + 1 + 0]
    367  f281					      jmp	.endif_4
    368  f281				   .else_4
    369  f281					      ldx	RamKernelGemini3
    370  f281					      stx	[KernelA_H_W + 0]
    371  f281					      ldx	RamKernelGemini3Reg
    372  f281					      stx	[KernelA_H_W + 1]
    373  f281				   .endif_4
    374  f281					      ENDM
    375  f281
    376  f281
    377  f281					      MAC	nibble_gem_kernel_a_2
    378  f281				   .if_1
    379  f281					      asl
    380  f281					      bcc	.else_1
    381  f281					      ldx	#BC_STA
    382  f281					      stx	[[KernelA_I_W + 0] + 0]
    383  f281					      ldx	#EMERALD_SP_RESET
    384  f281					      stx	[[KernelA_I_W + 0] + 1]
    385  f281					      ldx	#BC_STA
    386  f281					      stx	[[KernelA_J_W + 1] + 0]
    387  f281					      ldx	#PF1
    388  f281					      stx	[[KernelA_J_W + 1] + 1]
    389  f281					      ldx	#BC_PHP
    390  f281					      stx	[[KernelA_K_W + 1] + 0]
    391  f281					      ldx	#VDELP1
    392  f281					      stx	[RamKernelPhpTarget + 0]
    393  f281					      jmp	.endif_1
    394  f281				   .else_1
    395  f281					      ldx	#BC_PHP
    396  f281					      stx	[[KernelA_I_W + 0] + 0]
    397  f281					      ldx	#BC_STA
    398  f281					      stx	[[KernelA_J_W + 0] + 0]
    399  f281					      ldx	#PF1
    400  f281					      stx	[[KernelA_J_W + 0] + 1]
    401  f281					      ldx	RamKernelGemini4
    402  f281					      stx	[KernelA_K_W + 0]
    403  f281					      ldx	#EMERALD_SP
    404  f281					      stx	[KernelA_K_W + 1]
    405  f281					      ldx	#RESP1
    406  f281					      stx	[RamKernelPhpTarget + 0]
    407  f281				   .endif_1
    408  f281				   .if_2
    409  f281					      asl
    410  f281					      bcc	.else_2
    411  f281					      ldx	#BC_NOP
    412  f281					      stx	[[KernelA_F - $100] + 0]
    413  f281					      jmp	.endif_2
    414  f281				   .else_2
    415  f281					      ldx	BuildKernelMissile
    416  f281					      stx	[[KernelA_F - $100] + 0]
    417  f281				   .endif_2
    418  f281					      ldx	BuildKernelVdel1
    419  f281					      stx	[[KernelA_VDEL1 - $100] + 0]
    420  f281					      ldx	BuildKernelGrp0
    421  f281					      stx	[[KernelA_VDEL0 - $100] + 0]
    422  f281					      ldx	BuildKernelX
    423  f281					      stx	[RamKernelX + 0]
    424  f281					      ldx	BuildKernelY
    425  f281					      stx	[RamKernelY + 0]
    426  f281					      ldx	#$ff
    427  f281					      stx	[RamPSByte + 0]
    428  f281					      ENDM
    429  f281
    430  f281
    431  f281					      MAC	nibble_gem_kernel_b
    432  f281					      ldx	RamKernelGemini1
    433  f281					      stx	[KernelB_D_W + 0]
    434  f281				   .if_1
    435  f281					      asl
    436  f281					      bcc	.else_1
    437  f281					      ldx	#EMERALD_SP
    438  f281					      stx	[RamKernelPhpTarget + 0]
    439  f281					      ldx	#BC_STY
    440  f281					      stx	[[KernelB_E_W + 0] + 0]
    441  f281					      ldx	#EMERALD_SP_RESET
    442  f281					      stx	[[KernelB_E_W + 0] + 1]
    443  f281					      ldx	#BC_PHP
    444  f281					      stx	[[KernelB_F_W + 1] + 0]
    445  f281					      ldx	#BC_STA
    446  f281					      stx	[[KernelB_G_W + 0] + 0]
    447  f281					      ldx	#PF1
    448  f281					      stx	[[KernelB_G_W + 0] + 1]
    449  f281					      ldx	RamKernelGemini3
    450  f281					      stx	[[KernelB_H_W + 0] + 0]
    451  f281					      ldx	#EMERALD_SP
    452  f281					      stx	[[KernelB_H_W + 0] + 1]
    453  f281					      jmp	.endif_1
    454  f281				   .else_1
    455  f281					      ldx	RamKernelGemini2
    456  f281					      stx	[KernelB_F_W + 0]
    457  f281					      ldx	#EMERALD_SP
    458  f281					      stx	[KernelB_F_W + 1]
    459  f281				   .endif_1
    460  f281				   .if_2
    461  f281					      asl
    462  f281					      bcc	.else_2
    463  f281					      ldx	#EMERALD_SP
    464  f281					      stx	[RamKernelPhpTarget + 0]
    465  f281					      ldx	#BC_STY
    466  f281					      stx	[[KernelB_E_W + 0] + 0]
    467  f281					      ldx	#EMERALD_SP_RESET
    468  f281					      stx	[[KernelB_E_W + 0] + 1]
    469  f281					      ldx	RamKernelGemini2
    470  f281					      stx	[[KernelB_F_W + 1] + 0]
    471  f281					      ldx	#EMERALD_SP
    472  f281					      stx	[[KernelB_F_W + 1] + 1]
    473  f281					      ldx	#BC_STA
    474  f281					      stx	[[KernelB_G_W + 1] + 0]
    475  f281					      ldx	#PF1
    476  f281					      stx	[[KernelB_G_W + 1] + 1]
    477  f281					      ldx	#BC_PHP
    478  f281					      stx	[[KernelB_H_W + 1] + 0]
    479  f281					      jmp	.endif_2
    480  f281				   .else_2
    481  f281					      ldx	RamKernelGemini3
    482  f281					      stx	[KernelB_H_W + 0]
    483  f281					      ldx	#EMERALD_SP
    484  f281					      stx	[KernelB_H_W + 1]
    485  f281				   .endif_2
    486  f281				   .if_3
    487  f281					      asl
    488  f281					      bcc	.else_3
    489  f281					      ldx	#RamFFByte
    490  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    491  f281					      jmp	.endif_3
    492  f281				   .else_3
    493  f281					      ldx	#RamPF1Value
    494  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    495  f281				   .endif_3
    496  f281					      ldx	RamKernelGemini4
    497  f281					      stx	[KernelB_J_W + 0]
    498  f281					      ldx	BuildKernelGrp0
    499  f281					      stx	[[KernelB_VDEL0 - $100] + 0]
    500  f281					      ldx	BuildKernelX
    501  f281					      stx	[RamKernelX + 0]
    502  f281					      ldx	BuildKernelY
    503  f281					      stx	[RamKernelY + 0]
    504  f281					      ldx	#$00
    505  f281					      stx	[RamPSByte + 0]
    506  f281					      ENDM
    507  f281
    508  f281
    509  f281
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_shard.s"
      1  f281							; conflict: 11011000 #%0011 #%1000
      2  f281							; conflict: 11011001 #%0011 #%1000
      3  f281							; conflict: 11011010 #%0011 #%1000
      4  f281							; conflict: 11011011 #%0011 #%1000
      5  f281							; conflict: 11100100 #%1000 #%0011
      6  f281							; conflict: 11100101 #%1000 #%0011
      7  f281							; conflict: 11100110 #%1000 #%0011
      8  f281							; conflict: 11100111 #%1000 #%0011
      9  f281							; conflict: 01111000 #%1000 #%0001
     10  f281							; conflict: 01111001 #%1000 #%0001
     11  f281							; conflict: 01111010 #%1000 #%0001
     12  f281							; conflict: 01111011 #%1000 #%0001
     13  f281							; conflict: 10110100 #%1000 #%0001
     14  f281							; conflict: 10110101 #%1000 #%0001
     15  f281							; conflict: 10110110 #%1000 #%0001
     16  f281							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400
      2  f400							; Vertical Sync
      3  f400				   VerticalSync subroutine
      0  f400					      VERTICAL_SYNC
      1  f400		       a9 0e		      lda	#%1110
      2  f402		       85 02	   .VSLP1     sta	WSYNC
      3  f404		       85 00		      sta	VSYNC
      4  f406		       4a		      lsr
      5  f407		       d0 f9		      bne	.VSLP1
      5  f409
      6  f409				   FrameStart subroutine
      7  f409							; FIXME we can't skip this: ASSERT_RUNTIME "_scan == #0"
      8  f409
      9  f409				   VerticalBlank subroutine
      0  f409					      TIMER_SETUP	37
      1  f409				   .lines     SET	37
      2  f409		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f40b		       85 02		      sta	WSYNC
      4  f40d		       8d 96 02 	      sta	TIM64T
     11  f410
     12  f410							; Scanline counter
     13  f410		       a9 10		      lda	#ROW_COUNT
     14  f412		       85 c2		      sta	LoopCount
     15  f414
     16  f414							; Frame counter
     17  f414		       e6 c3		      inc	FrameCount
     18  f416
     19  f416							; Skip every 8 frames for increasing demo index
     20  f416		       a5 c3		      lda	FrameCount
     21  f418		       29 07		      and	#FrameSkip
     22  f41a		       c9 07		      cmp	#FrameSkip
     23  f41c		       d0 0d		      bne	.next_next_thing
     24  f41e
     25  f41e		       18		      clc
     26  f41f		       a5 ca		      lda	ROW_DEMO_INDEX
     27  f421		       69 04		      adc	#4
     28  f423		       c9 68		      cmp	#[level_01_end - level_01]
     29  f425		       90 02		      bcc	.next_thing_local
     30  f427		       a9 00		      lda	#0
     31  f429				   .next_thing_local
     32  f429		       85 ca		      sta	ROW_DEMO_INDEX
     33  f42b				   .next_next_thing
     34  f42b		       85 02		      sta	WSYNC
     35  f42d
     36  f42d							; Positioning
      0  f42d					      SLEEP	40
      1  f42d				   .CYCLES    SET	40
      2  f42d
      3  f42d				  -	      IF	.CYCLES < 2
      4  f42d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f42d				  -	      ERR
      6  f42d					      ENDIF
      7  f42d
      8  f42d				  -	      IF	.CYCLES & 1
      9  f42d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f42d				  -	      nop	0
     11  f42d				  -	      ELSE
     12  f42d				  -	      bit	VSYNC
     13  f42d				  -	      ENDIF
     14  f42d				  -.CYCLES    SET	.CYCLES - 3
     15  f42d					      ENDIF
     16  f42d
     17  f42d					      REPEAT	.CYCLES / 2
     18  f42d		       ea		      nop
     17  f42d					      REPEND
     18  f42e		       ea		      nop
     17  f42e					      REPEND
     18  f42f		       ea		      nop
     17  f42f					      REPEND
     18  f430		       ea		      nop
     17  f430					      REPEND
     18  f431		       ea		      nop
     17  f431					      REPEND
     18  f432		       ea		      nop
     17  f432					      REPEND
     18  f433		       ea		      nop
     17  f433					      REPEND
     18  f434		       ea		      nop
     17  f434					      REPEND
     18  f435		       ea		      nop
     17  f435					      REPEND
     18  f436		       ea		      nop
     17  f436					      REPEND
     18  f437		       ea		      nop
     17  f437					      REPEND
     18  f438		       ea		      nop
     17  f438					      REPEND
     18  f439		       ea		      nop
     17  f439					      REPEND
     18  f43a		       ea		      nop
     17  f43a					      REPEND
     18  f43b		       ea		      nop
     17  f43b					      REPEND
     18  f43c		       ea		      nop
     17  f43c					      REPEND
     18  f43d		       ea		      nop
     17  f43d					      REPEND
     18  f43e		       ea		      nop
     17  f43e					      REPEND
     18  f43f		       ea		      nop
     17  f43f					      REPEND
     18  f440		       ea		      nop
     19  f441					      REPEND
     38  f441		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     39  f443		       85 02		      sta	WSYNC
     40  f445
     41  f445							; Misc
     42  f445		       a9 00		      lda	#00
     43  f447		       85 1e		      sta	EMERALD_MI_ENABLE
     44  f449
     45  f449							; Assign dervied SpriteEnd value
     46  f449		       18		      clc
     47  f44a		       a9 c8		      lda	#HEIGHT_OFFSET
     48  f44c		       e5 c8		      sbc	YPos
     49  f44e		       85 c4		      sta	SpriteEnd
     50  f450
     51  f450							; Player 1
     52  f450		       a5 c5		      lda	XPos
     53  f452		       a2 00		      ldx	#0
     54  f454		       20 c6 f5 	      jsr	SetHorizPos
     55  f457
     56  f457							; Load the kernel into CBSRAM.
     57  f457				   game_frame_kernel_loader subroutine
     58  f457							; Kernel A or B
     59  f457		       a9 01		      lda	#01
     60  f459		       25 c3		      and	FrameCount
     61  f45b		       d0 06		      bne	.kernel_b
     62  f45d				   .kernel_a
     63  f45d							; Load kernel A into CBSRAM
     64  f45d		       20 5d f2 	      jsr	LoadKernelA
     65  f460		       4c 66 f4 	      jmp	.complete
     66  f463				   .kernel_b
     67  f463							; Load kernel B into CBSRAM
     68  f463		       20 6f f2 	      jsr	LoadKernelB
     69  f466				   .complete
     70  f466
     71  f466							; Populate the kernel with gemini changes.
     72  f466				   game_frame_populate subroutine
     73  f466							; Extract 26-bit string to full Gemini profile
     74  f466		       20 00 fa 	      jsr	gemini_populate
     75  f469							; Run nibble populate.
     76  f469		       20 3a f6 	      jsr	game_nibble_populate
     77  f46c
     78  f46c							; Complete frame setup.
     79  f46c				   game_frame_setup subroutine
     80  f46c							; Kernel A or B
     81  f46c		       a9 01		      lda	#01
     82  f46e		       25 c3		      and	FrameCount
     83  f470		       d0 1d		      bne	.kernel_b
     84  f472
     85  f472				   .kernel_a
     86  f472							; Move missile
     87  f472		       85 02		      sta	WSYNC
      0  f474					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f474				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f474
      3  f474				  -	      IF	.CYCLES < 2
      4  f474				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f474				  -	      ERR
      6  f474					      ENDIF
      7  f474
      8  f474				  -	      IF	.CYCLES & 1
      9  f474				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f474				  -	      nop	0
     11  f474				  -	      ELSE
     12  f474				  -	      bit	VSYNC
     13  f474				  -	      ENDIF
     14  f474				  -.CYCLES    SET	.CYCLES - 3
     15  f474					      ENDIF
     16  f474
     17  f474					      REPEAT	.CYCLES / 2
     18  f474		       ea		      nop
     17  f474					      REPEND
     18  f475		       ea		      nop
     17  f475					      REPEND
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     17  f477					      REPEND
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     17  f47c					      REPEND
     18  f47d		       ea		      nop
     17  f47d					      REPEND
     18  f47e		       ea		      nop
     17  f47e					      REPEND
     18  f47f		       ea		      nop
     17  f47f					      REPEND
     18  f480		       ea		      nop
     17  f480					      REPEND
     18  f481		       ea		      nop
     19  f482					      REPEND
     89  f482		       85 13		      sta	EMERALD_MI_RESET
     90  f484		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     91  f486		       85 23		      sta	EMERALD_MI_HMOVE
     92  f488
     93  f488							; DEBUG: Set per-kernel color
     94  f488		       a2 cc		      ldx	#COL_EMERALD
     95  f48a		       86 07		      stx	EMERALD_SP_COLOR
     96  f48c
     97  f48c		       4c e0 f4 	      jmp	.complete
     98  f48f
     99  f48f				   .kernel_b
    100  f48f							; Move missile
    101  f48f		       85 02		      sta	WSYNC
      0  f491					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f491				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f491
      3  f491				  -	      IF	.CYCLES < 2
      4  f491				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f491				  -	      ERR
      6  f491					      ENDIF
      7  f491
      8  f491					      IF	.CYCLES & 1
      9  f491					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f491		       04 00		      nop	0
     11  f493				  -	      ELSE
     12  f493				  -	      bit	VSYNC
     13  f493					      ENDIF
     14  f493				   .CYCLES    SET	.CYCLES - 3
     15  f493					      ENDIF
     16  f493
     17  f493					      REPEAT	.CYCLES / 2
     18  f493		       ea		      nop
     17  f493					      REPEND
     18  f494		       ea		      nop
     17  f494					      REPEND
     18  f495		       ea		      nop
     17  f495					      REPEND
     18  f496		       ea		      nop
     17  f496					      REPEND
     18  f497		       ea		      nop
     17  f497					      REPEND
     18  f498		       ea		      nop
     17  f498					      REPEND
     18  f499		       ea		      nop
     17  f499					      REPEND
     18  f49a		       ea		      nop
     17  f49a					      REPEND
     18  f49b		       ea		      nop
     17  f49b					      REPEND
     18  f49c		       ea		      nop
     17  f49c					      REPEND
     18  f49d		       ea		      nop
     17  f49d					      REPEND
     18  f49e		       ea		      nop
     17  f49e					      REPEND
     18  f49f		       ea		      nop
     17  f49f					      REPEND
     18  f4a0		       ea		      nop
     17  f4a0					      REPEND
     18  f4a1		       ea		      nop
     17  f4a1					      REPEND
     18  f4a2		       ea		      nop
     17  f4a2					      REPEND
     18  f4a3		       ea		      nop
     17  f4a3					      REPEND
     18  f4a4		       ea		      nop
     17  f4a4					      REPEND
     18  f4a5		       ea		      nop
     17  f4a5					      REPEND
     18  f4a6		       ea		      nop
     17  f4a6					      REPEND
     18  f4a7		       ea		      nop
     17  f4a7					      REPEND
     18  f4a8		       ea		      nop
     17  f4a8					      REPEND
     18  f4a9		       ea		      nop
     17  f4a9					      REPEND
     18  f4aa		       ea		      nop
     19  f4ab					      REPEND
    103  f4ab		       85 13		      sta	EMERALD_MI_RESET
    104  f4ad		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    105  f4af		       85 23		      sta	EMERALD_MI_HMOVE
    106  f4b1
    107  f4b1		       a5 ee		      lda	DO_MISS_B
    108  f4b3		       d0 25		      bne	.kernel_b_continue
    109  f4b5		       85 02		      sta	WSYNC
      0  f4b7					      sleep	KERNEL_B_MISSILE_SLEEP + 8
      1  f4b7				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP + 8
      2  f4b7
      3  f4b7				  -	      IF	.CYCLES < 2
      4  f4b7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b7				  -	      ERR
      6  f4b7					      ENDIF
      7  f4b7
      8  f4b7					      IF	.CYCLES & 1
      9  f4b7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b7		       04 00		      nop	0
     11  f4b9				  -	      ELSE
     12  f4b9				  -	      bit	VSYNC
     13  f4b9					      ENDIF
     14  f4b9				   .CYCLES    SET	.CYCLES - 3
     15  f4b9					      ENDIF
     16  f4b9
     17  f4b9					      REPEAT	.CYCLES / 2
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     17  f4ba					      REPEND
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     17  f4bd					      REPEND
     18  f4be		       ea		      nop
     17  f4be					      REPEND
     18  f4bf		       ea		      nop
     17  f4bf					      REPEND
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     17  f4c1					      REPEND
     18  f4c2		       ea		      nop
     17  f4c2					      REPEND
     18  f4c3		       ea		      nop
     17  f4c3					      REPEND
     18  f4c4		       ea		      nop
     17  f4c4					      REPEND
     18  f4c5		       ea		      nop
     17  f4c5					      REPEND
     18  f4c6		       ea		      nop
     17  f4c6					      REPEND
     18  f4c7		       ea		      nop
     17  f4c7					      REPEND
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     17  f4cd					      REPEND
     18  f4ce		       ea		      nop
     17  f4ce					      REPEND
     18  f4cf		       ea		      nop
     17  f4cf					      REPEND
     18  f4d0		       ea		      nop
     17  f4d0					      REPEND
     18  f4d1		       ea		      nop
     17  f4d1					      REPEND
     18  f4d2		       ea		      nop
     17  f4d2					      REPEND
     18  f4d3		       ea		      nop
     17  f4d3					      REPEND
     18  f4d4		       ea		      nop
     19  f4d5					      REPEND
    111  f4d5		       85 13		      sta	EMERALD_MI_RESET
    112  f4d7		       4c dc f4 	      jmp	.kernel_b_continue_2
    113  f4da
    114  f4da				   .kernel_b_continue
    115  f4da		       85 02		      sta	WSYNC
    116  f4dc				   .kernel_b_continue_2
    117  f4dc							; DEBUG: Set per-kernel color
    118  f4dc		       a2 e4		      ldx	#$e4
    119  f4de							; ldx #COL_EMERALD
    120  f4de		       86 07		      stx	EMERALD_SP_COLOR
    121  f4e0
    122  f4e0				   .complete
    123  f4e0
    124  f4e0				   VerticalBlankEnd
    125  f4e0							; Wait until the end of Vertical blank.
      0  f4e0					      TIMER_WAIT
      1  f4e0				   .waittimer
      2  f4e0		       ad 84 02 	      lda	INTIM
      3  f4e3		       d0 fb		      bne	.waittimer
      4  f4e5		       85 02		      sta	WSYNC
      0  f4e7					      ASSERT_RUNTIME	"_scan == #37"
      1  f4e7				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f4e7  && !(  _scan == #37  ) }
      2  f4e7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    128  f4e7
    129  f4e7							; Save stack pointer
    130  f4e7		       ba		      tsx
    131  f4e8		       86 d1		      stx	RamStackBkp
    132  f4ea
    133  f4ea							; Start rendering the kernel.
    134  f4ea		       4c 36 fb 	      jmp	KernelBorder
    135  f4ed
    136  f500		       00 00 00 00*	      align	256	; TODO why
    137  f500
    138  f500				   FrameEnd   subroutine
    139  f500		       85 02		      sta	WSYNC
    140  f502
    141  f502							; Blank all background colors.
    142  f502		       a9 00		      lda	#0
    143  f504		       85 08		      sta	COLUPF
    144  f506		       85 0f		      sta	PF2
    145  f508		       85 0e		      sta	PF1
    146  f50a		       85 1c		      sta	EMERALD_SP
    147  f50c
    148  f50c							; Guide lines (2x)
    149  f50c		       a9 02		      lda	#SIGNAL_LINE
    150  f50e		       85 09		      sta	COLUBK
    151  f510					      REPEAT	6
    152  f510		       85 02		      sta	WSYNC
    151  f510					      REPEND
    152  f512		       85 02		      sta	WSYNC
    151  f512					      REPEND
    152  f514		       85 02		      sta	WSYNC
    151  f514					      REPEND
    152  f516		       85 02		      sta	WSYNC
    151  f516					      REPEND
    152  f518		       85 02		      sta	WSYNC
    151  f518					      REPEND
    152  f51a		       85 02		      sta	WSYNC
    153  f51c					      REPEND
    154  f51c		       a9 00		      lda	#$00
    155  f51e		       85 09		      sta	COLUBK
    156  f520
    157  f520							; Restore stack pointer
    158  f520		       a6 d1		      ldx	RamStackBkp
    159  f522		       9a		      txs
    160  f523
    161  f523							; Display the rest of the blank screen.
      0  f523					      TIMER_SETUP	25
      1  f523				   .lines     SET	25
      2  f523		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f525		       85 02		      sta	WSYNC
      4  f527		       8d 96 02 	      sta	TIM64T
    163  f52a		       85 02		      sta	WSYNC
      0  f52c					      TIMER_WAIT
      1  f52c				   .waittimer
      2  f52c		       ad 84 02 	      lda	INTIM
      3  f52f		       d0 fb		      bne	.waittimer
      4  f531		       85 02		      sta	WSYNC
      0  f533					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f533				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f533  && !(  _scan == (#37 + #184)  ) }
      2  f533					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    166  f533
    167  f533							; Overscan
    168  f533				   Overscan   subroutine
    169  f533		       85 01		      sta	VBLANK
      0  f535					      TIMER_SETUP	29
      1  f535				   .lines     SET	29
      2  f535		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f537		       85 02		      sta	WSYNC
      4  f539		       8d 96 02 	      sta	TIM64T
    171  f53c
    172  f53c		       20 4f f5 	      jsr	MoveJoystick
    173  f53f		       20 8f f5 	      jsr	SpeedCalculation
    174  f542		       20 f8 fa 	      jsr	game_state_tick
    175  f545
      0  f545					      TIMER_WAIT
      1  f545				   .waittimer
      2  f545		       ad 84 02 	      lda	INTIM
      3  f548		       d0 fb		      bne	.waittimer
      4  f54a		       85 02		      sta	WSYNC
      0  f54c					      ASSERT_RUNTIME	"_scan == (#37 + #184 + #29)"
      1  f54c				   .COND      SET	"_scan == (#37 + #184 + #29)"
 ASSERT: breakif { pc== $f54c  && !(  _scan == (#37 + #184 + #29)  ) }
      2  f54c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    178  f54c
    179  f54c		       4c 00 f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f54f					      include	"game_input.s"
      1  f54f							; Handles input checking. Called from overscan.
      2  f54f
      3  f54f							; Read joystick movement and apply to object 0
      4  f54f				   MoveJoystick subroutine
      5  f54f
      6  f54f							; HACK to add in resetting ability for the gems
      7  f54f		       a5 0c		      lda	INPT4	; read left port action button
      8  f551		       29 80		      and	#%10000000	; safe to avoid any reads from D6 - D0
      9  f553		       30 03		      bmi	.actionButtonNotPressed	; branch if action button not pressed
     10  f555		       20 da fa 	      jsr	game_state_setup
     11  f558				   .actionButtonNotPressed
     12  f558
     13  f558							; Move vertically
     14  f558							; (up and down are actually reversed since ypos starts at bottom)
     15  f558							;     ldx YPos
     16  f558		       a9 10		      lda	#%00010000	;Up?
     17  f55a		       2c 80 02 	      bit	SWCHA
     18  f55d		       d0 0d		      bne	SkipMoveUp
     19  f55f
     20  f55f		       18		      clc
     21  f560		       a5 c7		      lda	Speed2
     22  f562		       69 0c		      adc	#12
     23  f564		       85 c7		      sta	Speed2
     24  f566		       a5 c6		      lda	Speed1
     25  f568		       69 00		      adc	#00
     26  f56a		       85 c6		      sta	Speed1
     27  f56c
     28  f56c				   SkipMoveUp
     29  f56c		       a6 c5		      ldx	XPos
     30  f56e
     31  f56e							; Only check left/right on odd frames;
     32  f56e							; TODO make this just a fractional speed
     33  f56e							; rather than dropping frames
     34  f56e		       a9 01		      lda	#01
     35  f570		       25 c3		      and	FrameCount
     36  f572		       d0 18		      bne	SkipMoveRight
     37  f574
     38  f574
     39  f574							; Move horizontally
     40  f574		       a9 40		      lda	#%01000000	;Left?
     41  f576		       2c 80 02 	      bit	SWCHA
     42  f579		       d0 05		      bne	SkipMoveLeft
     43  f57b		       e0 1d		      cpx	#29
     44  f57d		       90 01		      bcc	SkipMoveLeft
     45  f57f		       ca		      dex
     46  f580
     47  f580							; Reflect
     48  f580							;     lda #$ff
     49  f580							;     sta REFP0
     50  f580				   SkipMoveLeft
     51  f580		       a9 80		      lda	#%10000000	;Right?
     52  f582		       2c 80 02 	      bit	SWCHA
     53  f585		       d0 05		      bne	SkipMoveRight
     54  f587		       e0 80		      cpx	#128
     55  f589		       b0 01		      bcs	SkipMoveRight
     56  f58b		       e8		      inx
     57  f58c
     58  f58c							; Reflect
     59  f58c							;     lda #$0
     60  f58c							;     sta REFP0
     61  f58c				   SkipMoveRight
     62  f58c		       86 c5		      stx	XPos
     63  f58e		       60		      rts
     64  f58f
     65  f58f
     66  f58f				   SpeedCalculation
     67  f58f		       38		      sec
     68  f590		       a5 c7		      lda	Speed2
     69  f592		       e9 07		      sbc	#7
     70  f594		       85 c7		      sta	Speed2
     71  f596		       a5 c6		      lda	Speed1
     72  f598		       e9 00		      sbc	#0
     73  f59a		       85 c6		      sta	Speed1
     74  f59c
     75  f59c		       18		      clc
     76  f59d		       a5 c9		      lda	YPos2
     77  f59f		       65 c7		      adc	Speed2
     78  f5a1		       85 c9		      sta	YPos2
     79  f5a3		       a5 c8		      lda	YPos
     80  f5a5		       65 c6		      adc	Speed1
     81  f5a7		       85 c8		      sta	YPos
     82  f5a9
     83  f5a9		       c9 48		      cmp	#FLOOR_OFFSET
     84  f5ab		       b0 0a		      bcs	NewThing2
     85  f5ad
     86  f5ad							; Reset to floor
     87  f5ad		       a9 48		      lda	#FLOOR_OFFSET
     88  f5af		       85 c8		      sta	YPos
     89  f5b1		       a9 00		      lda	#0
     90  f5b3		       85 c6		      sta	Speed1
     91  f5b5		       85 c7		      sta	Speed2
     92  f5b7				   NewThing2
     93  f5b7
     94  f5b7		       c9 c0		      cmp	#CEILING_OFFSET
     95  f5b9		       90 0a		      bcc	.next
     96  f5bb
     97  f5bb							; Reset to ceiling
     98  f5bb		       a9 c0		      lda	#CEILING_OFFSET
     99  f5bd		       85 c8		      sta	YPos
    100  f5bf		       a9 00		      lda	#0
    101  f5c1		       85 c6		      sta	Speed1
    102  f5c3		       85 c7		      sta	Speed2
    103  f5c5				   .next
    104  f5c5		       60		      rts
    105  f5c6
    106  f5c6
    107  f5c6
    108  f5c6							; Subroutine
    109  f5c6				   SetHorizPos
    110  f5c6		       85 02		      sta	WSYNC	; start a new line
    111  f5c8		       24 00		      bit	0	; waste 3 cycles
    112  f5ca		       38		      sec		; set carry flag
    113  f5cb				   DivideLoop
    114  f5cb		       e9 0f		      sbc	#15	; subtract 15
    115  f5cd		       b0 fc		      bcs	DivideLoop	; branch until negative
    116  f5cf		       49 07		      eor	#7	; calculate fine offset
    117  f5d1		       0a		      asl
    118  f5d2		       0a		      asl
    119  f5d3		       0a		      asl
    120  f5d4		       0a		      asl
    121  f5d5		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    122  f5d7		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    123  f5d9		       60		      rts		; return to caller
------- FILE main.s
------- FILE game_nibble.s LEVEL 2 PASS 2
      0  f5da					      include	"game_nibble.s"
      1  f5da							; Frame loop, including calling out to other kernels.
      2  f5da
      3  f5da		       00 aa	   SENTINEL   =	%010101010
      4  f5da
      5  f5da							; Reflected for Kernel A
      6  f5da		       00 00	   G00	      =	%00000000
      7  f5da		       00 60	   G01	      =	%01100000
      8  f5da		       00 06	   G10	      =	%00000110
      9  f5da		       00 66	   G11	      =	%01100110
     10  f5da
     11  f5da		       00 a9	   BC_LDA_IMM =	$a9
     12  f5da		       00 85	   BC_STA     =	$85
     13  f5da		       00 86	   BC_STX     =	$86
     14  f5da		       00 84	   BC_STY     =	$84
     15  f5da		       00 08	   BC_PHP     =	$08
     16  f5da		       00 04	   BC_NOP     =	$04
     17  f5da
     18  f5da		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
     19  f5da
     20  f5da				   KernelA_D_W EQM	[KernelA_D - $100]
     21  f5da				   KernelA_E_W EQM	[KernelA_E - $100]
     22  f5da				   KernelA_G_W EQM	[KernelA_G - $100]
     23  f5da				   KernelA_H_W EQM	[KernelA_H - $100]
     24  f5da				   KernelA_I_W EQM	[KernelA_I - $100]
     25  f5da				   KernelA_J_W EQM	[KernelA_J - $100]
     26  f5da				   KernelA_K_W EQM	[KernelA_K - $100]
     27  f5da
     28  f5da				   KernelB_D_W EQM	[KernelB_D - $100]
     29  f5da				   KernelB_E_W EQM	[KernelB_E - $100]
     30  f5da				   KernelB_F_W EQM	[KernelB_F - $100]
     31  f5da				   KernelB_G_W EQM	[KernelB_G - $100]
     32  f5da				   KernelB_H_W EQM	[KernelB_H - $100]
     33  f5da				   KernelB_I_W EQM	[KernelB_I - $100]
     34  f5da				   KernelB_J_W EQM	[KernelB_J - $100]
     35  f5da				   KernelB_K_W EQM	[KernelB_K - $100]
     36  f5da
     37  f5da					      mac	calc_regs_and_store
     38  f5da				   .OFFSET    SET	{1}
     39  f5da				   .TARGET    SET	{2}
     40  f5da					      ldy	[DO_GEMS_B + .OFFSET]
     41  f5da					      jsr	KernelB_UpdateRegs
     42  f5da					      sty	.TARGET
     43  f5da					      endm
     44  f5da
     45  f5da							; Y=Gemini Sprite
     46  f5da							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     47  f5da							; processor flag Z is TRUE if this is RST.
     48  f5da				   KernelA_GenReset subroutine
     49  f5da		       c0 00		      cpy	#$00
     50  f5dc		       f0 01		      beq	.start
     51  f5de		       60		      rts
     52  f5df							; Current Gemini = $00
     53  f5df				   .start
     54  f5df		       a6 e5		      ldx	BuildKernelRST
     55  f5e1		       e0 aa		      cpx	#SENTINEL
     56  f5e3		       d0 04		      bne	.set_else
     57  f5e5							; We have found the first (and only) RST on this line, set the marker var
     58  f5e5		       a2 ff		      ldx	#$ff
     59  f5e7		       86 e5		      stx	BuildKernelRST
     60  f5e9				   .set_else
     61  f5e9		       a2 00		      ldx	#$00
     62  f5eb		       60		      rts
     63  f5ec
     64  f5ec							; Y=Gemini Sprite
     65  f5ec							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     66  f5ec							; processor flag Z is TRUE if this is RST.
     67  f5ec				   KernelB_GenPhp subroutine
     68  f5ec		       c0 60		      cpy	#G01
     69  f5ee		       f0 05		      beq	.start
     70  f5f0		       c0 66		      cpy	#G11
     71  f5f2		       f0 01		      beq	.start
     72  f5f4		       60		      rts
     73  f5f5							; Current Gemini = $00
     74  f5f5				   .start
     75  f5f5		       a6 e5		      ldx	BuildKernelRST
     76  f5f7		       e0 aa		      cpx	#SENTINEL
     77  f5f9		       d0 04		      bne	.set_else
     78  f5fb							; We have found the first (and only) RST on this line, set the marker var
     79  f5fb		       84 e5		      sty	BuildKernelRST
     80  f5fd
     81  f5fd							; Set Z flag
     82  f5fd		       a2 00		      ldx	#$00
     83  f5ff				   .set_else
     84  f5ff		       60		      rts
     85  f600
     86  f600							; Allocates build-time registers for a new Gemini sprite value.
     87  f600							; register Y = the storage opcode to write to the result
     88  f600							;
     89  f600							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     90  f600							; BuildKernelX, BuildKernelY are upgraded if not set.
     91  f600							; Y=Gemini Sprite
     92  f600				   KernelB_UpdateRegs
     93  f600				   KernelA_UpdateRegs subroutine
     94  f600
     95  f600							; If equal to GRP0, return nop
     96  f600							; FIXME GRP0 might not always be up to date (should update each entry?)
     97  f600							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     98  f600		       c4 d9		      cpy	RamKernelGrp0
     99  f602		       d0 03		      bne	.op_start
    100  f604							; TODO if this is stx + NOP value, then register doesn't have to change as
    101  f604							; often in GEM1ASWITCH
    102  f604		       a0 04		      ldy	#BC_NOP
    103  f606		       60		      rts
    104  f607
    105  f607				   .op_start
    106  f607		       c4 e3		      cpy	BuildKernelX
    107  f609		       d0 03		      bne	.op_else
    108  f60b		       a0 86		      ldy	#BC_STX
    109  f60d		       60		      rts
    110  f60e				   .op_else
    111  f60e		       c4 e4		      cpy	BuildKernelY
    112  f610		       d0 03		      bne	.op_end
    113  f612		       a0 84		      ldy	#BC_STY
    114  f614		       60		      rts
    115  f615				   .op_end
    116  f615
    117  f615				   .set_start
    118  f615		       a6 e3		      ldx	BuildKernelX
    119  f617		       e0 aa		      cpx	#SENTINEL
    120  f619		       d0 13		      bne	.set_else
    121  f61b
    122  f61b							; KA Missile opcode determination
    123  f61b				   DBG_CHECK_MISSILE_OPCODE
    124  f61b		       84 e3		      sty	BuildKernelX
    125  f61d		       66 e3		      ror	BuildKernelX	; D0
    126  f61f		       66 e3		      ror	BuildKernelX	; D1
    127  f621		       a2 86		      ldx	#BC_STX
    128  f623		       b0 02		      bcs	[. + 4]
    129  f625		       a2 84		      ldx	#BC_STY
    130  f627		       86 e8		      stx	BuildKernelMissile
    131  f629
    132  f629							; Set the X operator
    133  f629		       84 e3		      sty	BuildKernelX
    134  f62b		       a0 86		      ldy	#BC_STX
    135  f62d		       60		      rts
    136  f62e				   .set_else
    137  f62e		       a6 e4		      ldx	BuildKernelY
    138  f630		       e0 aa		      cpx	#SENTINEL
    139  f632		       d0 05		      bne	.set_end
    140  f634		       84 e4		      sty	BuildKernelY
    141  f636		       a0 84		      ldy	#BC_STY
    142  f638		       60		      rts
    143  f639				   .set_end
    144  f639							; Failed all
      0  f639					      ASSERT_RUNTIME	"0"
      1  f639				   .COND      SET	"0"
 ASSERT: breakif { pc== $f639  && !(  0  ) }
      2  f639					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    146  f639		       60		      rts
    147  f63a
    148  f63a
    149  f63a				   game_nibble_populate
    150  f63a		       ad 00 f1 	      lda	$f100
    151  f63d		       85 80		      sta	DebugKernelID
    152  f63f
    153  f63f		       ad 84 fe 	      lda	shard_map
    154  f642		       a0 01		      ldy	#1	; gemini counter, starting at 1
    155  f644				   gemini_builder
    156  f644		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    157  f646		       d0 00		      bne	.no_vd0
    158  f648				   .no_vd0
    159  f648
    160  f648							; Nibble Kernel A
      0  f648					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00f6 ????				      seg.U	ignoreme
    162 U00f6 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    163 U00f8 ????	       86 e3		      stx	BuildKernelX
    164 U00fa ????	       86 e4		      stx	BuildKernelY
    165 U00fc ????	       86 e5		      stx	BuildKernelRST
    166 U00fe ????
    167 U00fe ????						; Gemini 1A
    168 U00fe ????			   .K_1A
    169 U00fe ????	       a4 ef		      ldy	[DO_GEMS_A + 0]
    170 U0100 ????	       20 da f5 	      jsr	KernelA_GenReset
      0 U0103 ????				      NIBBLE_IF	eq
    172 U0103 ????						; Special: Encoding RST0
    173 U0103 ????						; Rewrite lda RamKernelPF1 to be #immediate
    174 U0103 ????	       a0 a9		      ldy	#BC_LDA_IMM
    175 U0105 ????	       8c 15 f0 	      sty	[KernelA_B - $100]
    176 U0108 ????	       a0 a0		      ldy	#%10100000
    177 U010a ????	       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
    178 U010d ????						; Store 1A in GRP0
    179 U010d ????	       a4 f0		      ldy	[DO_GEMS_A + 1]
    180 U010f ????	       84 e6		      sty	BuildKernelGrp0
    181 U0111 ????	       84 d9		      sty	RamKernelGrp0
    182 U0113 ????						; Gemini 1A is RESPx
    183 U0113 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    184 U0115 ????	       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
    185 U0118 ????						; Turn 3-cycle NOP into 4-cycle
    186 U0118 ????	       a0 14		      ldy	#$14	; TODO what is this
    187 U011a ????	       8c 19 f0 	      sty	[KernelA_D - $100]
      0 U011d ????				      NIBBLE_ELSE
    189 U011d ????						; Store 0A in GRP0
    190 U011d ????	       a4 ef		      ldy	[DO_GEMS_A + 0]
    191 U011f ????	       84 e6		      sty	BuildKernelGrp0
    192 U0121 ????	       84 d9		      sty	RamKernelGrp0
    193 U0123 ????
    194 U0123 ????	       a4 f0		      ldy	[DO_GEMS_A + 1]
    195 U0125 ????	       20 da f5 	      jsr	KernelA_GenReset
      0 U0128 ????				      NIBBLE_IF	eq
    197 U0128 ????						; GEM1ASWITCH
      0 U0128 ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U0128 ????				      NIBBLE_ELSE
    200 U0128 ????						; Calculate the 1A value
    201 U0128 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    202 U012b ????	       c0 01		      cpy	#1
    203 U012d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    204 U012f ????	       a0 11		      ldy	#RESP1
    205 U0131 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    206 U0132 ????	       a0 1c		      ldy	#GRP1
    207 U0134 ????	       84 db		      sty	RamKernelGemini1Reg
    208 U0136 ????
    209 U0136 ????						; Set opcode
    210 U0136 ????	       ae d4 fa 	      ldx	SHARD_LUT_RF1
    211 U0139 ????	       e0 01		      cpx	#1
    212 U013b ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    213 U013d ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    214 U013f ????	       a4 f0		      ldy	[DO_GEMS_A + 1]
    215 U0141 ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    216 U0144 ????	       84 da		      sty	RamKernelGemini1
    217 U0146 ????
      0 U0146 ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U0146 ????				      NIBBLE_END_IF
      0 U0146 ????				      NIBBLE_END_IF
    221 U0146 ????
    222 U0146 ????						; BuildKernelX, BuildKernelY are upgraded if not set
    223 U0146 ????						; Gemini 2A
    224 U0146 ????			   .K_2A
    225 U0146 ????	       a4 f1		      ldy	[DO_GEMS_A + 2]
    226 U0148 ????	       20 da f5 	      jsr	KernelA_GenReset
      0 U014b ????				      NIBBLE_IF	eq
      0 U014b ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U014b ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U014b ????				      NIBBLE_ELSE
    231 U014b ????						; Set opcode
    232 U014b ????	       a4 f1		      ldy	[DO_GEMS_A + 2]
    233 U014d ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    234 U0150 ????	       84 dc		      sty	RamKernelGemini2
    235 U0152 ????
    236 U0152 ????						; Set opcode target
    237 U0152 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    238 U0155 ????	       c0 02		      cpy	#2
    239 U0157 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    240 U0159 ????	       a0 11		      ldy	#RESP1
    241 U015b ????	       2c		      .byte.b	$2C	; .bit (ABS)
    242 U015c ????	       a0 1c		      ldy	#GRP1
    243 U015e ????	       84 dd		      sty	RamKernelGemini2Reg
    244 U0160 ????
      0 U0160 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0160 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0160 ????				      NIBBLE_END_IF
    248 U0160 ????
    249 U0160 ????						; Can't preserve Grp0 now
    250 U0160 ????	       a0 aa		      ldy	#SENTINEL
    251 U0162 ????	       84 d9		      sty	RamKernelGrp0
    252 U0164 ????
    253 U0164 ????						; Gemini 3A
    254 U0164 ????			   .K_3A
    255 U0164 ????	       a4 f2		      ldy	[DO_GEMS_A + 3]
    256 U0166 ????	       20 da f5 	      jsr	KernelA_GenReset
      0 U0169 ????				      NIBBLE_IF	eq
      0 U0169 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0169 ????				      NIBBLE_ELSE
    260 U0169 ????						; Set opcode
    261 U0169 ????	       a4 f2		      ldy	[DO_GEMS_A + 3]
    262 U016b ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    263 U016e ????	       84 de		      sty	RamKernelGemini3
    264 U0170 ????
    265 U0170 ????						; Set opcode target
    266 U0170 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    267 U0173 ????	       c0 03		      cpy	#3
    268 U0175 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    269 U0177 ????	       a0 11		      ldy	#RESP1
    270 U0179 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    271 U017a ????	       a0 1c		      ldy	#GRP1
    272 U017c ????	       84 df		      sty	RamKernelGemini3Reg
    273 U017e ????
      0 U017e ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U017e ????				      NIBBLE_END_IF
      0 U017e ????				      NIBBLE_END_KERNEL
      1  f648					      seg	CodeBank3
    277  f648
      0  f648					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U017e ????				      seg.U	ignoreme
    279 U017e ????						; VD1 default
    280 U017e ????	       a6 f0		      ldx	[DO_GEMS_A + 1]
    281 U0180 ????	       86 e7		      stx	BuildKernelVdel1
    282 U0182 ????
    283 U0182 ????						; Gemini 4A
    284 U0182 ????	       ae d5 fa 	      ldx	SHARD_LUT_VD1
    285 U0185 ????	       e0 04		      cpx	#4
      0 U0187 ????				      NIBBLE_IF	ne
      0 U0187 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0187 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0187 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    290 U0187 ????
    291 U0187 ????						; Set PHP
      0 U0187 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    293 U0187 ????
    294 U0187 ????						; Update VDEL1
    295 U0187 ????	       a6 f3		      ldx	[DO_GEMS_A + 4]
    296 U0189 ????	       86 e7		      stx	BuildKernelVdel1
      0 U018b ????				      NIBBLE_ELSE
    298 U018b ????	       a4 f3		      ldy	[DO_GEMS_A + 4]
    299 U018d ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    300 U0190 ????	       84 e0		      sty	RamKernelGemini4
    301 U0192 ????
      0 U0192 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U0192 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U0192 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    305 U0192 ????
    306 U0192 ????						; Set PHP
      0 U0192 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U0192 ????				      NIBBLE_END_IF
    309 U0192 ????
    310 U0192 ????						; Gemini 5A
    311 U0192 ????						; TODO eventually...?
    312 U0192 ????
    313 U0192 ????						; Missile
    314 U0192 ????	       a4 ed		      ldy	DO_MISS_A
      0 U0194 ????				      NIBBLE_IF	eq	; Disabled
      0 U0194 ????				      NIBBLE_WRITE	[KernelA_F - $100], #BC_NOP
      0 U0194 ????				      NIBBLE_ELSE
      0 U0194 ????				      NIBBLE_WRITE	[KernelA_F - $100], BuildKernelMissile
      0 U0194 ????				      NIBBLE_END_IF
    320 U0194 ????
    321 U0194 ????						; VD1
      0 U0194 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    323 U0194 ????						; GRP0
      0 U0194 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    325 U0194 ????						; X
      0 U0194 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    327 U0194 ????						; Y
      0 U0194 ????				      NIBBLE_WRITE	RamKernelY, BuildKernelY
    329 U0194 ????
      0 U0194 ????				      NIBBLE_WRITE	RamPSByte, #$ff
      0 U0194 ????				      NIBBLE_END_KERNEL
      1  f648					      seg	CodeBank3
    332  f648
    333  f648							; Nibble Kernel B
      0  f648					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U0194 ????				      seg.U	ignoreme
    335 U0194 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    336 U0196 ????	       86 e3		      stx	BuildKernelX
    337 U0198 ????	       86 e4		      stx	BuildKernelY
    338 U019a ????	       86 e5		      stx	BuildKernelRST
    339 U019c ????
    340 U019c ????						; Php target default
    341 U019c ????	       a2 11		      ldx	#RESP1
    342 U019e ????	       86 d6		      stx	RamKernelPhpTarget
    343 U01a0 ????
    344 U01a0 ????						; Gemini 0B
    345 U01a0 ????	       a4 f5		      ldy	[DO_GEMS_B + 0]
    346 U01a2 ????	       84 e6		      sty	BuildKernelGrp0
    347 U01a4 ????	       84 d9		      sty	RamKernelGrp0
    348 U01a6 ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    349 U01a6 ????
    350 U01a6 ????						; Gemini 1B
    351 U01a6 ????	       a4 f6		      ldy	[DO_GEMS_B + 1]
    352 U01a8 ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    353 U01ab ????	       84 da		      sty	RamKernelGemini1
      0 U01ad ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    355 U01ad ????
    356 U01ad ????						; Gemini 2B
    357 U01ad ????	       a4 f7		      ldy	[DO_GEMS_B + 2]
    358 U01af ????	       20 ec f5 	      jsr	KernelB_GenPhp
      0 U01b2 ????				      NIBBLE_IF	eq
      0 U01b2 ????				      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1 U01b2 ????			   .OFFSET    SET	3
      2 U01b2 ????			   .TARGET    SET	RamKernelGemini3
      3 U01b2 ????	       a4 f8		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01b4 ????	       20 00 f6 	      jsr	KernelB_UpdateRegs
      5 U01b7 ????	       84 de		      sty	.TARGET
    361 U01b9 ????
    362 U01b9 ????						; Write to PHP in 2B
      0 U01b9 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U01b9 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U01b9 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U01b9 ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U01b9 ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
    368 U01b9 ????
    369 U01b9 ????						; Update Grp0
    370 U01b9 ????	       a4 e5		      ldy	BuildKernelRST
    371 U01bb ????	       84 d9		      sty	RamKernelGrp0
      0 U01bd ????				      NIBBLE_ELSE
      0 U01bd ????				      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1 U01bd ????			   .OFFSET    SET	2
      2 U01bd ????			   .TARGET    SET	RamKernelGemini2
      3 U01bd ????	       a4 f7		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01bf ????	       20 00 f6 	      jsr	KernelB_UpdateRegs
      5 U01c2 ????	       84 dc		      sty	.TARGET
      0 U01c4 ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
      0 U01c4 ????				      NIBBLE_END_IF
    376 U01c4 ????
    377 U01c4 ????						; Gemini 3B
    378 U01c4 ????	       a4 f8		      ldy	[DO_GEMS_B + 3]
    379 U01c6 ????	       20 ec f5 	      jsr	KernelB_GenPhp
      0 U01c9 ????				      NIBBLE_IF	eq
    381 U01c9 ????						; Write to PHP in 3B
      0 U01c9 ????				      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1 U01c9 ????			   .OFFSET    SET	2
      2 U01c9 ????			   .TARGET    SET	RamKernelGemini2
      3 U01c9 ????	       a4 f7		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01cb ????	       20 00 f6 	      jsr	KernelB_UpdateRegs
      5 U01ce ????	       84 dc		      sty	.TARGET
      0 U01d0 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U01d0 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U01d0 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U01d0 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U01d0 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
    388 U01d0 ????
    389 U01d0 ????						; Update Grp0
    390 U01d0 ????	       a4 e5		      ldy	BuildKernelRST
    391 U01d2 ????	       84 d9		      sty	RamKernelGrp0
      0 U01d4 ????				      NIBBLE_ELSE
      0 U01d4 ????				      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1 U01d4 ????			   .OFFSET    SET	3
      2 U01d4 ????			   .TARGET    SET	RamKernelGemini3
      3 U01d4 ????	       a4 f8		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01d6 ????	       20 00 f6 	      jsr	KernelB_UpdateRegs
      5 U01d9 ????	       84 de		      sty	.TARGET
      0 U01db ????				      NIBBLE_WRITE	KernelB_H_W, RamKernelGemini3, #EMERALD_SP
      0 U01db ????				      NIBBLE_END_IF
    396 U01db ????
    397 U01db ????						; Write out PHP flag comparison
    398 U01db ????	       a4 e5		      ldy	BuildKernelRST
    399 U01dd ????	       c0 60		      cpy	#G01
      0 U01df ????				      NIBBLE_IF	eq
      0 U01df ????				      NIBBLE_WRITE	[KernelB_C - $100 + 1], #RamFFByte
      0 U01df ????				      NIBBLE_ELSE
      0 U01df ????				      NIBBLE_WRITE	[KernelB_C - $100 + 1], #RamPF1Value
      0 U01df ????				      NIBBLE_END_IF
    405 U01df ????
    406 U01df ????						; Missile
    407 U01df ????						; ldy DO_MISS_B
    408 U01df ????						; NIBBLE_IF eq ; Disabled
    409 U01df ????						; NIBBLE_WRITE [KernelB_K - $100], #BC_STA
    410 U01df ????						; NIBBLE_ELSE
    411 U01df ????						;     NIBBLE_WRITE [KernelB_K - $100], BuildKernelMissile
    412 U01df ????						; NIBBLE_END_IF
    413 U01df ????
    414 U01df ????						; Gemini 4B
    415 U01df ????	       a4 f9		      ldy	[DO_GEMS_B + 4]
    416 U01e1 ????	       20 00 f6 	      jsr	KernelA_UpdateRegs
    417 U01e4 ????	       84 e0		      sty	RamKernelGemini4
      0 U01e6 ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    419 U01e6 ????
    420 U01e6 ????						; TODO if no PHP, rewrite previous section:
    421 U01e6 ????						; NIBBLE_IF cs
    422 U01e6 ????						;     ; Write to PHP in reset command
    423 U01e6 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    424 U01e6 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    425 U01e6 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    426 U01e6 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    427 U01e6 ????						; NIBBLE_END_IF
    428 U01e6 ????
    429 U01e6 ????						; Make adjustments for sprites.
    430 U01e6 ????	       66 e6		      ror	BuildKernelGrp0
    431 U01e8 ????	       66 e3		      ror	BuildKernelX
    432 U01ea ????	       66 e4		      ror	BuildKernelY
    433 U01ec ????
    434 U01ec ????						; ; VD1
    435 U01ec ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    436 U01ec ????						; GRP0
      0 U01ec ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    438 U01ec ????						; X
      0 U01ec ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    440 U01ec ????						; Y
      0 U01ec ????				      NIBBLE_WRITE	RamKernelY, BuildKernelY
    442 U01ec ????
      0 U01ec ????				      NIBBLE_WRITE	RamPSByte, #$00
    444 U01ec ????
      0 U01ec ????				      NIBBLE_END_KERNEL
      1  f648					      seg	CodeBank3
    446  f648
    447  f648							; TODO do this for all rows
    448  f648				   DBG_NIBBLE_BUILD subroutine
    449  f648		       ae 00 f1 	      ldx	$f100
    450  f64b		       e0 0a		      cpx	#$a
    451  f64d		       f0 03		      beq	[. + 5]
    452  f64f		       4c 3c f7 	      jmp	.kernel_b
    453  f652				   .kernel_a
      0  f652					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f652		       a9 00		      lda	#0
      2  f654		       a2 aa		      ldx	#SENTINEL
      3  f656		       86 e3		      stx	BuildKernelX
      4  f658		       86 e4		      stx	BuildKernelY
      5  f65a		       86 e5		      stx	BuildKernelRST
      6  f65c
      7  f65c				   .K_1A
      8  f65c		       a4 ef		      ldy	[DO_GEMS_A + 0]
      9  f65e		       20 da f5 	      jsr	KernelA_GenReset
     10  f661				   .if_1
     11  f661		       d0 20		      bne	.else_1
     12  f663		       38		      sec
     13  f664		       2a		      rol
     14  f665
     15  f665
     16  f665		       a0 a9		      ldy	#BC_LDA_IMM
     17  f667		       8c 15 f0 	      sty	[KernelA_B - $100]
     18  f66a		       a0 a0		      ldy	#%10100000
     19  f66c		       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
     20  f66f
     21  f66f		       a4 f0		      ldy	[DO_GEMS_A + 1]
     22  f671		       84 e6		      sty	BuildKernelGrp0
     23  f673		       84 d9		      sty	RamKernelGrp0
     24  f675
     25  f675		       a0 11		      ldy	#EMERALD_SP_RESET
     26  f677		       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
     27  f67a
     28  f67a		       a0 14		      ldy	#$14
     29  f67c		       8c 19 f0 	      sty	[KernelA_D - $100]
     30  f67f		       4c b7 f6 	      jmp	.endif_1
     31  f682
     32  f682		       2a		      rol
     33  f683
     34  f683				   .else_1
     35  f683		       18		      clc
     36  f684		       2a		      rol
     37  f685
     38  f685		       a4 ef		      ldy	[DO_GEMS_A + 0]
     39  f687		       84 e6		      sty	BuildKernelGrp0
     40  f689		       84 d9		      sty	RamKernelGrp0
     41  f68b		       a4 f0		      ldy	[DO_GEMS_A + 1]
     42  f68d		       20 da f5 	      jsr	KernelA_GenReset
     43  f690				   .if_2
     44  f690		       d0 05		      bne	.else_2
     45  f692		       38		      sec
     46  f693		       2a		      rol
     47  f694
     48  f694		       4c b7 f6 	      jmp	.endif_2
     49  f697
     50  f697
     51  f697				   .else_2
     52  f697		       18		      clc
     53  f698		       2a		      rol
     54  f699
     55  f699		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     56  f69c		       c0 01		      cpy	#1
     57  f69e		       d0 03		      .byte.b	$D0, #3
     58  f6a0		       a0 11		      ldy	#RESP1
     59  f6a2		       2c		      .byte.b	$2C
     60  f6a3		       a0 1c		      ldy	#GRP1
     61  f6a5		       84 db		      sty	RamKernelGemini1Reg
     62  f6a7
     63  f6a7		       ae d4 fa 	      ldx	SHARD_LUT_RF1
     64  f6aa		       e0 01		      cpx	#1
     65  f6ac		       a0 86		      ldy	#BC_STX
     66  f6ae		       f0 05		      .byte.b	$F0, #5
     67  f6b0		       a4 f0		      ldy	[DO_GEMS_A + 1]
     68  f6b2		       20 00 f6 	      jsr	KernelA_UpdateRegs
     69  f6b5		       84 da		      sty	RamKernelGemini1
     70  f6b7
     71  f6b7
     72  f6b7				   .endif_2
     73  f6b7
     74  f6b7
     75  f6b7				   .endif_1
     76  f6b7
     77  f6b7
     78  f6b7				   .K_2A
     79  f6b7		       a4 f1		      ldy	[DO_GEMS_A + 2]
     80  f6b9		       20 da f5 	      jsr	KernelA_GenReset
     81  f6bc				   .if_3
     82  f6bc		       d0 05		      bne	.else_3
     83  f6be		       38		      sec
     84  f6bf		       2a		      rol
     85  f6c0		       4c da f6 	      jmp	.endif_3
     86  f6c3
     87  f6c3
     88  f6c3				   .else_3
     89  f6c3		       18		      clc
     90  f6c4		       2a		      rol
     91  f6c5
     92  f6c5		       a4 f1		      ldy	[DO_GEMS_A + 2]
     93  f6c7		       20 00 f6 	      jsr	KernelA_UpdateRegs
     94  f6ca		       84 dc		      sty	RamKernelGemini2
     95  f6cc
     96  f6cc		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     97  f6cf		       c0 02		      cpy	#2
     98  f6d1		       d0 03		      .byte.b	$D0, #3
     99  f6d3		       a0 11		      ldy	#RESP1
    100  f6d5		       2c		      .byte.b	$2C
    101  f6d6		       a0 1c		      ldy	#GRP1
    102  f6d8		       84 dd		      sty	RamKernelGemini2Reg
    103  f6da
    104  f6da
    105  f6da				   .endif_3
    106  f6da
    107  f6da		       a0 aa		      ldy	#SENTINEL
    108  f6dc		       84 d9		      sty	RamKernelGrp0
    109  f6de
    110  f6de				   .K_3A
    111  f6de		       a4 f2		      ldy	[DO_GEMS_A + 3]
    112  f6e0		       20 da f5 	      jsr	KernelA_GenReset
    113  f6e3				   .if_4
    114  f6e3		       d0 05		      bne	.else_4
    115  f6e5		       38		      sec
    116  f6e6		       2a		      rol
    117  f6e7		       4c 01 f7 	      jmp	.endif_4
    118  f6ea
    119  f6ea
    120  f6ea				   .else_4
    121  f6ea		       18		      clc
    122  f6eb		       2a		      rol
    123  f6ec
    124  f6ec		       a4 f2		      ldy	[DO_GEMS_A + 3]
    125  f6ee		       20 00 f6 	      jsr	KernelA_UpdateRegs
    126  f6f1		       84 de		      sty	RamKernelGemini3
    127  f6f3
    128  f6f3		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    129  f6f6		       c0 03		      cpy	#3
    130  f6f8		       d0 03		      .byte.b	$D0, #3
    131  f6fa		       a0 11		      ldy	#RESP1
    132  f6fc		       2c		      .byte.b	$2C
    133  f6fd		       a0 1c		      ldy	#GRP1
    134  f6ff		       84 df		      sty	RamKernelGemini3Reg
    135  f701
    136  f701
    137  f701				   .endif_4
    138  f701
    139  f701		       2a		      rol
    140  f702		       2a		      rol
    141  f703		       2a		      rol
    142  f704		       2a		      rol
    455  f705		       85 cc		      sta	RamNibbleVar1
      0  f707					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f707		       a9 00		      lda	#0
      2  f709
      3  f709		       a6 f0		      ldx	[DO_GEMS_A + 1]
      4  f70b		       86 e7		      stx	BuildKernelVdel1
      5  f70d
      6  f70d		       ae d5 fa 	      ldx	SHARD_LUT_VD1
      7  f710		       e0 04		      cpx	#4
      8  f712				   .if_1
      9  f712		       f0 09		      beq	.else_1
     10  f714		       38		      sec
     11  f715		       2a		      rol
     12  f716
     13  f716
     14  f716		       a6 f3		      ldx	[DO_GEMS_A + 4]
     15  f718		       86 e7		      stx	BuildKernelVdel1
     16  f71a		       4c 26 f7 	      jmp	.endif_1
     17  f71d
     18  f71d
     19  f71d				   .else_1
     20  f71d		       18		      clc
     21  f71e		       2a		      rol
     22  f71f		       a4 f3		      ldy	[DO_GEMS_A + 4]
     23  f721		       20 00 f6 	      jsr	KernelA_UpdateRegs
     24  f724		       84 e0		      sty	RamKernelGemini4
     25  f726
     26  f726
     27  f726
     28  f726				   .endif_1
     29  f726
     30  f726
     31  f726
     32  f726		       a4 ed		      ldy	DO_MISS_A
     33  f728				   .if_2
     34  f728		       d0 05		      bne	.else_2
     35  f72a		       38		      sec
     36  f72b		       2a		      rol
     37  f72c		       4c 31 f7 	      jmp	.endif_2
     38  f72f
     39  f72f
     40  f72f				   .else_2
     41  f72f		       18		      clc
     42  f730		       2a		      rol
     43  f731
     44  f731
     45  f731				   .endif_2
     46  f731
     47  f731
     48  f731
     49  f731
     50  f731
     51  f731		       2a		      rol
     52  f732		       2a		      rol
     53  f733		       2a		      rol
     54  f734		       2a		      rol
     55  f735		       2a		      rol
     56  f736		       2a		      rol
    457  f737		       85 cd		      sta	RamNibbleVar2
    458  f739		       4c b8 f7 	      jmp	.next
    459  f73c				   .kernel_b
      0  f73c					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f73c		       a9 00		      lda	#0
      2  f73e		       a2 aa		      ldx	#SENTINEL
      3  f740		       86 e3		      stx	BuildKernelX
      4  f742		       86 e4		      stx	BuildKernelY
      5  f744		       86 e5		      stx	BuildKernelRST
      6  f746
      7  f746		       a2 11		      ldx	#RESP1
      8  f748		       86 d6		      stx	RamKernelPhpTarget
      9  f74a
     10  f74a		       a4 f5		      ldy	[DO_GEMS_B + 0]
     11  f74c		       84 e6		      sty	BuildKernelGrp0
     12  f74e		       84 d9		      sty	RamKernelGrp0
     13  f750
     14  f750
     15  f750		       a4 f6		      ldy	[DO_GEMS_B + 1]
     16  f752		       20 00 f6 	      jsr	KernelA_UpdateRegs
     17  f755		       84 da		      sty	RamKernelGemini1
     18  f757
     19  f757		       a4 f7		      ldy	[DO_GEMS_B + 2]
     20  f759		       20 ec f5 	      jsr	KernelB_GenPhp
     21  f75c				   .if_1
     22  f75c		       d0 10		      bne	.else_1
     23  f75e		       38		      sec
     24  f75f		       2a		      rol
      0  f760					      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1  f760				   .OFFSET    SET	3
      2  f760				   .TARGET    SET	RamKernelGemini3
      3  f760		       a4 f8		      ldy	[DO_GEMS_B + .OFFSET]
      4  f762		       20 00 f6 	      jsr	KernelB_UpdateRegs
      5  f765		       84 de		      sty	.TARGET
     26  f767
     27  f767
     28  f767		       a4 e5		      ldy	BuildKernelRST
     29  f769		       84 d9		      sty	RamKernelGrp0
     30  f76b		       4c 77 f7 	      jmp	.endif_1
     31  f76e
     32  f76e
     33  f76e				   .else_1
     34  f76e		       18		      clc
     35  f76f		       2a		      rol
      0  f770					      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1  f770				   .OFFSET    SET	2
      2  f770				   .TARGET    SET	RamKernelGemini2
      3  f770		       a4 f7		      ldy	[DO_GEMS_B + .OFFSET]
      4  f772		       20 00 f6 	      jsr	KernelB_UpdateRegs
      5  f775		       84 dc		      sty	.TARGET
     37  f777
     38  f777
     39  f777				   .endif_1
     40  f777
     41  f777		       a4 f8		      ldy	[DO_GEMS_B + 3]
     42  f779		       20 ec f5 	      jsr	KernelB_GenPhp
     43  f77c				   .if_2
     44  f77c		       d0 10		      bne	.else_2
     45  f77e		       38		      sec
     46  f77f		       2a		      rol
     47  f780
      0  f780					      CALC_REGS_AND_STORE	2, RamKernelGemini2
      1  f780				   .OFFSET    SET	2
      2  f780				   .TARGET    SET	RamKernelGemini2
      3  f780		       a4 f7		      ldy	[DO_GEMS_B + .OFFSET]
      4  f782		       20 00 f6 	      jsr	KernelB_UpdateRegs
      5  f785		       84 dc		      sty	.TARGET
     49  f787
     50  f787
     51  f787		       a4 e5		      ldy	BuildKernelRST
     52  f789		       84 d9		      sty	RamKernelGrp0
     53  f78b		       4c 97 f7 	      jmp	.endif_2
     54  f78e
     55  f78e
     56  f78e				   .else_2
     57  f78e		       18		      clc
     58  f78f		       2a		      rol
      0  f790					      CALC_REGS_AND_STORE	3, RamKernelGemini3
      1  f790				   .OFFSET    SET	3
      2  f790				   .TARGET    SET	RamKernelGemini3
      3  f790		       a4 f8		      ldy	[DO_GEMS_B + .OFFSET]
      4  f792		       20 00 f6 	      jsr	KernelB_UpdateRegs
      5  f795		       84 de		      sty	.TARGET
     60  f797
     61  f797
     62  f797				   .endif_2
     63  f797
     64  f797		       a4 e5		      ldy	BuildKernelRST
     65  f799		       c0 60		      cpy	#G01
     66  f79b				   .if_3
     67  f79b		       d0 05		      bne	.else_3
     68  f79d		       38		      sec
     69  f79e		       2a		      rol
     70  f79f		       4c a4 f7 	      jmp	.endif_3
     71  f7a2
     72  f7a2
     73  f7a2				   .else_3
     74  f7a2		       18		      clc
     75  f7a3		       2a		      rol
     76  f7a4
     77  f7a4
     78  f7a4				   .endif_3
     79  f7a4
     80  f7a4
     81  f7a4
     82  f7a4
     83  f7a4
     84  f7a4
     85  f7a4
     86  f7a4
     87  f7a4		       a4 f9		      ldy	[DO_GEMS_B + 4]
     88  f7a6		       20 00 f6 	      jsr	KernelA_UpdateRegs
     89  f7a9		       84 e0		      sty	RamKernelGemini4
     90  f7ab
     91  f7ab
     92  f7ab
     93  f7ab
     94  f7ab
     95  f7ab
     96  f7ab
     97  f7ab
     98  f7ab
     99  f7ab		       66 e6		      ror	BuildKernelGrp0
    100  f7ad		       66 e3		      ror	BuildKernelX
    101  f7af		       66 e4		      ror	BuildKernelY
    102  f7b1
    103  f7b1
    104  f7b1
    105  f7b1
    106  f7b1
    107  f7b1
    108  f7b1		       2a		      rol
    109  f7b2		       2a		      rol
    110  f7b3		       2a		      rol
    111  f7b4		       2a		      rol
    112  f7b5		       2a		      rol
    461  f7b6		       85 cc		      sta	RamNibbleVar1
    462  f7b8				   .next
    463  f7b8
    464  f7b8							; TODO move this into the row kernel
    465  f7b8				   DBG_NIBBLE_RUN subroutine
    466  f7b8		       ae 00 f1 	      ldx	$f100
    467  f7bb		       e0 0a		      cpx	#$a
    468  f7bd		       f0 03		      beq	[. + 5]
    469  f7bf		       4c 83 f8 	      jmp	.kernel_b
    470  f7c2				   .kernel_a
    471  f7c2		       a5 cc		      lda	RamNibbleVar1
      0  f7c4					      NIBBLE_gem_kernel_a_1
      1  f7c4				   .if_1
      2  f7c4		       0a		      asl
      3  f7c5		       90 03		      bcc	.else_1
      4  f7c7		       4c e4 f7 	      jmp	.endif_1
      5  f7ca				   .else_1
      6  f7ca				   .if_2
      7  f7ca		       0a		      asl
      8  f7cb		       90 0d		      bcc	.else_2
      9  f7cd		       a2 86		      ldx	#BC_STX
     10  f7cf		       8e 19 f0 	      stx	[KernelA_D_W + 0]
     11  f7d2		       a2 11		      ldx	#RESP1
     12  f7d4		       8e 1a f0 	      stx	[KernelA_D_W + 1]
     13  f7d7		       4c e4 f7 	      jmp	.endif_2
     14  f7da				   .else_2
     15  f7da		       a6 da		      ldx	RamKernelGemini1
     16  f7dc		       8e 19 f0 	      stx	[KernelA_D_W + 0]
     17  f7df		       a6 db		      ldx	RamKernelGemini1Reg
     18  f7e1		       8e 1a f0 	      stx	[KernelA_D_W + 1]
     19  f7e4				   .endif_2
     20  f7e4				   .endif_1
     21  f7e4				   .if_3
     22  f7e4		       0a		      asl
     23  f7e5		       90 0d		      bcc	.else_3
     24  f7e7		       a2 79		      ldx	#NOP_REG
     25  f7e9		       8e 1c f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f7ec		       a2 11		      ldx	#RESP1
     27  f7ee		       8e 20 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f7f1		       4c 03 f8 	      jmp	.endif_3
     29  f7f4				   .else_3
     30  f7f4		       a2 11		      ldx	#RESP1
     31  f7f6		       8e 1c f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f7f9		       a6 dc		      ldx	RamKernelGemini2
     33  f7fb		       8e 1f f0 	      stx	[KernelA_G_W + 0]
     34  f7fe		       a6 dd		      ldx	RamKernelGemini2Reg
     35  f800		       8e 20 f0 	      stx	[KernelA_G_W + 1]
     36  f803				   .endif_3
     37  f803				   .if_4
     38  f803		       0a		      asl
     39  f804		       90 08		      bcc	.else_4
     40  f806		       a2 11		      ldx	#RESP1
     41  f808		       8e 22 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f80b		       4c 18 f8 	      jmp	.endif_4
     43  f80e				   .else_4
     44  f80e		       a6 de		      ldx	RamKernelGemini3
     45  f810		       8e 21 f0 	      stx	[KernelA_H_W + 0]
     46  f813		       a6 df		      ldx	RamKernelGemini3Reg
     47  f815		       8e 22 f0 	      stx	[KernelA_H_W + 1]
     48  f818				   .endif_4
    473  f818		       a5 cd		      lda	RamNibbleVar2
      0  f81a					      NIBBLE_gem_kernel_a_2
      1  f81a				   .if_1
      2  f81a		       0a		      asl
      3  f81b		       90 20		      bcc	.else_1
      4  f81d		       a2 85		      ldx	#BC_STA
      5  f81f		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f822		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f824		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f827		       a2 85		      ldx	#BC_STA
      9  f829		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f82c		       a2 0e		      ldx	#PF1
     11  f82e		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f831		       a2 08		      ldx	#BC_PHP
     13  f833		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f836		       a2 26		      ldx	#VDELP1
     15  f838		       86 d6		      stx	[RamKernelPhpTarget + 0]
     16  f83a		       4c 5a f8 	      jmp	.endif_1
     17  f83d				   .else_1
     18  f83d		       a2 08		      ldx	#BC_PHP
     19  f83f		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f842		       a2 85		      ldx	#BC_STA
     21  f844		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f847		       a2 0e		      ldx	#PF1
     23  f849		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f84c		       a6 e0		      ldx	RamKernelGemini4
     25  f84e		       8e 26 f0 	      stx	[KernelA_K_W + 0]
     26  f851		       a2 1c		      ldx	#EMERALD_SP
     27  f853		       8e 27 f0 	      stx	[KernelA_K_W + 1]
     28  f856		       a2 11		      ldx	#RESP1
     29  f858		       86 d6		      stx	[RamKernelPhpTarget + 0]
     30  f85a				   .endif_1
     31  f85a				   .if_2
     32  f85a		       0a		      asl
     33  f85b		       90 08		      bcc	.else_2
     34  f85d		       a2 04		      ldx	#BC_NOP
     35  f85f		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     36  f862		       4c 6a f8 	      jmp	.endif_2
     37  f865				   .else_2
     38  f865		       a6 e8		      ldx	BuildKernelMissile
     39  f867		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     40  f86a				   .endif_2
     41  f86a		       a6 e7		      ldx	BuildKernelVdel1
     42  f86c		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     43  f86f		       a6 e6		      ldx	BuildKernelGrp0
     44  f871		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     45  f874		       a6 e3		      ldx	BuildKernelX
     46  f876		       86 d7		      stx	[RamKernelX + 0]
     47  f878		       a6 e4		      ldx	BuildKernelY
     48  f87a		       86 d8		      stx	[RamKernelY + 0]
     49  f87c		       a2 ff		      ldx	#$ff
     50  f87e		       86 d3		      stx	[RamPSByte + 0]
    475  f880		       4c 1e f9 	      jmp	.next
    476  f883				   .kernel_b
    477  f883		       a5 cc		      lda	RamNibbleVar1
      0  f885					      NIBBLE_gem_kernel_b
      1  f885		       a6 da		      ldx	RamKernelGemini1
      2  f887		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f88a				   .if_1
      4  f88a		       0a		      asl
      5  f88b		       90 2a		      bcc	.else_1
      6  f88d		       a2 1c		      ldx	#EMERALD_SP
      7  f88f		       86 d6		      stx	[RamKernelPhpTarget + 0]
      8  f891		       a2 84		      ldx	#BC_STY
      9  f893		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f896		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f898		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f89b		       a2 08		      ldx	#BC_PHP
     13  f89d		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f8a0		       a2 85		      ldx	#BC_STA
     15  f8a2		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f8a5		       a2 0e		      ldx	#PF1
     17  f8a7		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f8aa		       a6 de		      ldx	RamKernelGemini3
     19  f8ac		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f8af		       a2 1c		      ldx	#EMERALD_SP
     21  f8b1		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f8b4		       4c c1 f8 	      jmp	.endif_1
     23  f8b7				   .else_1
     24  f8b7		       a6 dc		      ldx	RamKernelGemini2
     25  f8b9		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f8bc		       a2 1c		      ldx	#EMERALD_SP
     27  f8be		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f8c1				   .endif_1
     29  f8c1				   .if_2
     30  f8c1		       0a		      asl
     31  f8c2		       90 2a		      bcc	.else_2
     32  f8c4		       a2 1c		      ldx	#EMERALD_SP
     33  f8c6		       86 d6		      stx	[RamKernelPhpTarget + 0]
     34  f8c8		       a2 84		      ldx	#BC_STY
     35  f8ca		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f8cd		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f8cf		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f8d2		       a6 dc		      ldx	RamKernelGemini2
     39  f8d4		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f8d7		       a2 1c		      ldx	#EMERALD_SP
     41  f8d9		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f8dc		       a2 85		      ldx	#BC_STA
     43  f8de		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f8e1		       a2 0e		      ldx	#PF1
     45  f8e3		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f8e6		       a2 08		      ldx	#BC_PHP
     47  f8e8		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f8eb		       4c f8 f8 	      jmp	.endif_2
     49  f8ee				   .else_2
     50  f8ee		       a6 de		      ldx	RamKernelGemini3
     51  f8f0		       8e 22 f0 	      stx	[KernelB_H_W + 0]
     52  f8f3		       a2 1c		      ldx	#EMERALD_SP
     53  f8f5		       8e 23 f0 	      stx	[KernelB_H_W + 1]
     54  f8f8				   .endif_2
     55  f8f8				   .if_3
     56  f8f8		       0a		      asl
     57  f8f9		       90 08		      bcc	.else_3
     58  f8fb		       a2 d0		      ldx	#RamFFByte
     59  f8fd		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
     60  f900		       4c 08 f9 	      jmp	.endif_3
     61  f903				   .else_3
     62  f903		       a2 d4		      ldx	#RamPF1Value
     63  f905		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
     64  f908				   .endif_3
     65  f908		       a6 e0		      ldx	RamKernelGemini4
     66  f90a		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     67  f90d		       a6 e6		      ldx	BuildKernelGrp0
     68  f90f		       8e 07 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     69  f912		       a6 e3		      ldx	BuildKernelX
     70  f914		       86 d7		      stx	[RamKernelX + 0]
     71  f916		       a6 e4		      ldx	BuildKernelY
     72  f918		       86 d8		      stx	[RamKernelY + 0]
     73  f91a		       a2 00		      ldx	#$00
     74  f91c		       86 d3		      stx	[RamPSByte + 0]
    479  f91e				   .next
    480  f91e		       60		      rts
    481  f91f
    482  f91f
    483  f91f							; Populate Gemini array from level_for_game
    484  f91f
    485  f91f					      mac	gemini_populate
    486  f91f				   .TARGET    SET	{1}
    487  f91f					      lda	RamNibbleTemp
    488  f91f					      and	#%00000011
    489  f91f					      tay
    490  f91f					      lda	GEMINI_LOOKUP,y
    491  f91f					      sta	.TARGET
    492  f91f					      endm
    493  f91f
    494  f91f					      mac	gemini_populate_missile
    495  f91f				   .TARGET    SET	{1}
    496  f91f					      lda	RamNibbleTemp
    497  f91f					      and	#%00000001
    498  f91f					      sta	.TARGET
    499  f91f					      endm
    500  f91f
    501  fa00		       00 00 00 00*	      align	256
    502  fa00
    503  fa00				   gemini_populate
    504  fa00		       a6 ec		      ldx	level_for_game + 3
    505  fa02		       86 cb		      stx	RamNibbleTemp
      0  fa04					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa04				   .TARGET    SET	DO_GEMS_B + 5
      2  fa04		       a5 cb		      lda	RamNibbleTemp
      3  fa06		       29 03		      and	#%00000011
      4  fa08		       a8		      tay
      5  fa09		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa0c		       85 fa		      sta	.TARGET
    507  fa0e		       66 cb		      ror	RamNibbleTemp
    508  fa10		       66 cb		      ror	RamNibbleTemp
      0  fa12					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa12				   .TARGET    SET	DO_GEMS_A + 5
      2  fa12		       a5 cb		      lda	RamNibbleTemp
      3  fa14		       29 03		      and	#%00000011
      4  fa16		       a8		      tay
      5  fa17		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa1a		       85 f4		      sta	.TARGET
    510  fa1c		       66 cb		      ror	RamNibbleTemp
    511  fa1e		       66 cb		      ror	RamNibbleTemp
      0  fa20					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa20				   .TARGET    SET	DO_GEMS_B + 4
      2  fa20		       a5 cb		      lda	RamNibbleTemp
      3  fa22		       29 03		      and	#%00000011
      4  fa24		       a8		      tay
      5  fa25		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa28		       85 f9		      sta	.TARGET
    513  fa2a		       66 cb		      ror	RamNibbleTemp
    514  fa2c		       66 cb		      ror	RamNibbleTemp
      0  fa2e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa2e				   .TARGET    SET	DO_GEMS_A + 4
      2  fa2e		       a5 cb		      lda	RamNibbleTemp
      3  fa30		       29 03		      and	#%00000011
      4  fa32		       a8		      tay
      5  fa33		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa36		       85 f3		      sta	.TARGET
    516  fa38		       66 cb		      ror	RamNibbleTemp
    517  fa3a		       66 cb		      ror	RamNibbleTemp
    518  fa3c
    519  fa3c		       a6 eb		      ldx	level_for_game + 2
    520  fa3e		       86 cb		      stx	RamNibbleTemp
      0  fa40					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa40				   .TARGET    SET	DO_MISS_B
      2  fa40		       a5 cb		      lda	RamNibbleTemp
      3  fa42		       29 01		      and	#%00000001
      4  fa44		       85 ee		      sta	.TARGET
    522  fa46		       66 cb		      ror	RamNibbleTemp
      0  fa48					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa48				   .TARGET    SET	DO_GEMS_B + 3
      2  fa48		       a5 cb		      lda	RamNibbleTemp
      3  fa4a		       29 03		      and	#%00000011
      4  fa4c		       a8		      tay
      5  fa4d		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa50		       85 f8		      sta	.TARGET
    524  fa52		       66 cb		      ror	RamNibbleTemp
    525  fa54		       66 cb		      ror	RamNibbleTemp
      0  fa56					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa56				   .TARGET    SET	DO_GEMS_A + 3
      2  fa56		       a5 cb		      lda	RamNibbleTemp
      3  fa58		       29 03		      and	#%00000011
      4  fa5a		       a8		      tay
      5  fa5b		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa5e		       85 f2		      sta	.TARGET
    527  fa60		       66 cb		      ror	RamNibbleTemp
    528  fa62		       66 cb		      ror	RamNibbleTemp
      0  fa64					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa64				   .TARGET    SET	DO_GEMS_B + 2
      2  fa64		       a5 cb		      lda	RamNibbleTemp
      3  fa66		       29 03		      and	#%00000011
      4  fa68		       a8		      tay
      5  fa69		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa6c		       85 f7		      sta	.TARGET
    530  fa6e		       66 cb		      ror	RamNibbleTemp
    531  fa70		       66 cb		      ror	RamNibbleTemp
    532  fa72
    533  fa72		       66 cb		      ror	RamNibbleTemp
    534  fa74		       a6 ea		      ldx	level_for_game + 1
    535  fa76		       86 cb		      stx	RamNibbleTemp
    536  fa78		       26 cb		      rol	RamNibbleTemp
      0  fa7a					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa7a				   .TARGET    SET	DO_GEMS_A + 2
      2  fa7a		       a5 cb		      lda	RamNibbleTemp
      3  fa7c		       29 03		      and	#%00000011
      4  fa7e		       a8		      tay
      5  fa7f		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa82		       85 f1		      sta	.TARGET
    538  fa84
    539  fa84		       a6 ea		      ldx	level_for_game + 1
    540  fa86		       86 cb		      stx	RamNibbleTemp
    541  fa88		       66 cb		      ror	RamNibbleTemp
      0  fa8a					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa8a				   .TARGET    SET	DO_MISS_A
      2  fa8a		       a5 cb		      lda	RamNibbleTemp
      3  fa8c		       29 01		      and	#%00000001
      4  fa8e		       85 ed		      sta	.TARGET
    543  fa90		       66 cb		      ror	RamNibbleTemp
      0  fa92					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa92				   .TARGET    SET	DO_GEMS_B + 1
      2  fa92		       a5 cb		      lda	RamNibbleTemp
      3  fa94		       29 03		      and	#%00000011
      4  fa96		       a8		      tay
      5  fa97		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa9a		       85 f6		      sta	.TARGET
    545  fa9c		       66 cb		      ror	RamNibbleTemp
    546  fa9e		       66 cb		      ror	RamNibbleTemp
      0  faa0					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  faa0				   .TARGET    SET	DO_GEMS_A + 1
      2  faa0		       a5 cb		      lda	RamNibbleTemp
      3  faa2		       29 03		      and	#%00000011
      4  faa4		       a8		      tay
      5  faa5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  faa8		       85 f0		      sta	.TARGET
    548  faaa		       66 cb		      ror	RamNibbleTemp
    549  faac		       66 cb		      ror	RamNibbleTemp
      0  faae					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  faae				   .TARGET    SET	DO_GEMS_B + 0
      2  faae		       a5 cb		      lda	RamNibbleTemp
      3  fab0		       29 03		      and	#%00000011
      4  fab2		       a8		      tay
      5  fab3		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fab6		       85 f5		      sta	.TARGET
    551  fab8		       66 cb		      ror	RamNibbleTemp
    552  faba		       66 cb		      ror	RamNibbleTemp
    553  fabc
    554  fabc		       a6 e9		      ldx	level_for_game + 0
    555  fabe		       86 cb		      stx	RamNibbleTemp
      0  fac0					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fac0				   .TARGET    SET	DO_GEMS_A + 0
      2  fac0		       a5 cb		      lda	RamNibbleTemp
      3  fac2		       29 03		      and	#%00000011
      4  fac4		       a8		      tay
      5  fac5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fac8		       85 ef		      sta	.TARGET
    557  faca		       66 cb		      ror	RamNibbleTemp
    558  facc		       66 cb		      ror	RamNibbleTemp
    559  face
    560  face		       60		      rts
    561  facf				   gemini_populate_end
    562  facf
    563  fad0		       00		      align	16
    564  fad0
    565  fad0				   GEMINI_LOOKUP
    566  fad0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    567  fad4
    568  fad4				   SHARD_LUT_RF1
    569  fad4		       00		      .byte.b	#0
    570  fad5				   SHARD_LUT_VD1
    571  fad5		       00		      .byte.b	#0
    572  fad6
------- FILE main.s
------- FILE game_state.s LEVEL 2 PASS 2
      0  fad6					      include	"game_state.s"
      1  fad6							; Perform a left rotation on the 32 bit number at
      2  fad6							; location VLA and store the result at location
      3  fad6							; RES. If VLA and RES are the same then the
      4  fad6							; operation is applied directly to the memory,
      5  fad6							; otherwise it is done in the accumulator.
      6  fad6							;
      7  fad6							; On exit: A = ??, X & Y are unchanged.
      8  fad6
      9  fad6							;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     10  fad6					      mac	_ror32
     11  fad6				   VLA	      EQU	{1}
     12  fad6				   RES	      EQU	{2}
     13  fad6					      IF	VLA != RES
     14  fad6					      LDA	VLA+0
     15  fad6					      ROR	A
     16  fad6					      STA	RES+0
     17  fad6					      LDA	VLA+1
     18  fad6					      ROR	A
     19  fad6					      STA	RES+1
     20  fad6					      LDA	VLA+2
     21  fad6					      ROR	A
     22  fad6					      STA	RES+2
     23  fad6					      LDA	VLA+3
     24  fad6					      ROR	A
     25  fad6					      STA	RES+3
     26  fad6					      ELSE
     27  fad6					      ROR	VLA+0
     28  fad6					      ROR	VLA+1
     29  fad6					      ROR	VLA+2
     30  fad6					      ROR	VLA+3
     31  fad6					      ENDIF
     32  fad6					      ENDM
     33  fad6							; Add two 32 bit numbers together and store the
     34  fad6							; result in another memory location. RES may be
     35  fad6							; the same as either VLA or VLB.
     36  fad6							;
     37  fad6							; On exit: A = ??, X & Y are unchanged.
     38  fad6
     39  fad6				   game_state_adder
     40  fad6		       00		      .byte.b	#$0
     41  fad7		       00		      .byte.b	#$0
     42  fad8		       00		      .byte.b	#$0
     43  fad9		       10		      .byte.b	#%10000
     44  fada
     45  fada					      mac	_add32
     46  fada				   .VLA       EQU	{1}
     47  fada				   .VLB       EQU	{2}
     48  fada				   .RES       EQU	{3}
     49  fada					      CLC
     50  fada					      LDA	.VLA+3
     51  fada					      ADC	.VLB+3
     52  fada					      STA	.RES+3
     53  fada					      LDA	.VLA+2
     54  fada					      ADC	.VLB+2
     55  fada					      STA	.RES+2
     56  fada					      LDA	.VLA+1
     57  fada					      ADC	.VLB+1
     58  fada					      STA	.RES+1
     59  fada					      LDA	.VLA+0
     60  fada					      ADC	.VLB+0
     61  fada					      STA	.RES+0
     62  fada					      ENDM
     63  fada
     64  fada				   game_state_setup
     65  fada							; Set up the level
     66  fada		       a9 fb		      lda	#%11111011
     67  fadc		       85 e9		      sta	[level_for_game + 0]
     68  fade		       a9 ff		      lda	#%11111111
     69  fae0		       85 ea		      sta	[level_for_game + 1]
     70  fae2		       a9 ff		      lda	#%11111111
     71  fae4		       85 eb		      sta	[level_for_game + 2]
     72  fae6		       a9 ff		      lda	#%11111111
     73  fae8		       85 ec		      sta	[level_for_game + 3]
     74  faea		       60		      rts
     75  faeb
     76  faf0		       00 00 00 00*	      align	16
     77  faf0				   game_state_mask
     78  faf0		       7f		      .byte.b	#%01111111
     79  faf1		       bf		      .byte.b	#%10111111
     80  faf2		       df		      .byte.b	#%11011111
     81  faf3		       ef		      .byte.b	#%11101111
     82  faf4		       f7		      .byte.b	#%11110111
     83  faf5		       fb		      .byte.b	#%11111011
     84  faf6		       fd		      .byte.b	#%11111101
     85  faf7		       fe		      .byte.b	#%11111110
     86  faf8
     87  faf8				   game_state_tick subroutine
     88  faf8							; jsr game_state_setup
     89  faf8
     90  faf8							; Get index [0, 25]
     91  faf8		       18		      clc
     92  faf9		       a5 c5		      lda	XPos
     93  fafb		       e9 02		      sbc	#2
     94  fafd		       4a		      lsr
     95  fafe		       4a		      lsr
     96  faff		       85 c0		      sta	Temp
     97  fb01
     98  fb01							; Load bit offset
     99  fb01		       29 07		      and	#%111
    100  fb03		       a8		      tay
    101  fb04		       b9 f0 fa 	      lda	game_state_mask,y
    102  fb07		       85 c1		      sta	Temp2
    103  fb09
    104  fb09							; Load sprite offset
    105  fb09		       a5 c0		      lda	Temp
    106  fb0b		       4a		      lsr
    107  fb0c		       4a		      lsr
    108  fb0d		       4a		      lsr
    109  fb0e		       a8		      tay
    110  fb0f		       a5 c1		      lda	Temp2
    111  fb11		       39 e9 00 	      and	level_for_game,y
    112  fb14		       99 e9 00 	      sta	level_for_game,y
    113  fb17		       60		      rts
    114  fb18
    115  fb18				   game_state_tick_1 subroutine
      0  fb18					      _ADD32	level_for_game, game_state_adder, level_for_game
      1  fb18		       00 e9	   .VLA       EQU	level_for_game
      2  fb18		       fa d6	   .VLB       EQU	game_state_adder
      3  fb18		       00 e9	   .RES       EQU	level_for_game
      4  fb18		       18		      CLC
      5  fb19		       a5 ec		      LDA	.VLA+3
      6  fb1b		       6d d9 fa 	      ADC	.VLB+3
      7  fb1e		       85 ec		      STA	.RES+3
      8  fb20		       a5 eb		      LDA	.VLA+2
      9  fb22		       6d d8 fa 	      ADC	.VLB+2
     10  fb25		       85 eb		      STA	.RES+2
     11  fb27		       a5 ea		      LDA	.VLA+1
     12  fb29		       6d d7 fa 	      ADC	.VLB+1
     13  fb2c		       85 ea		      STA	.RES+1
     14  fb2e		       a5 e9		      LDA	.VLA+0
     15  fb30		       6d d6 fa 	      ADC	.VLB+0
     16  fb33		       85 e9		      STA	.RES+0
    117  fb35		       60		      rts
    118  fb36
    119  fb36							; game_state_tick:
    120  fb36							;     lda FrameCount
    121  fb36							;     and #%111
    122  fb36							;     bne .skiprotate
    123  fb36							;     lda level_for_game + 3
    124  fb36							;     ror
    125  fb36							; .rollall:
    126  fb36							;     _ROR32 level_for_game, level_for_game
    127  fb36
    128  fb36							;     lda #%11101111
    129  fb36							;     cmp [level_for_game + 3]
    130  fb36							;     bne .skiprotate
    131  fb36							;     jmp game_state_setup
    132  fb36							; .skiprotate:
    133  fb36							;     rts
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb36					      include	"kernel_border.s"
      1  fb36							; Visible Kernel
      2  fb36
      3  fb36				   KernelBorder subroutine
      4  fb36		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb38
      6  fb38							; First HMOVE
      7  fb38		       85 2a		      sta	HMOVE
      8  fb3a
      9  fb3a							; Border top
     10  fb3a		       a9 00		      lda	#0
     11  fb3c		       85 08		      sta	COLUPF
     12  fb3e		       85 0e		      sta	PF1
     13  fb40		       85 0f		      sta	PF2
     14  fb42		       a9 02		      lda	#SIGNAL_LINE
     15  fb44		       85 09		      sta	COLUBK
     16  fb46
     17  fb46					      REPEAT	6
     18  fb46		       85 02		      sta	WSYNC
     17  fb46					      REPEND
     18  fb48		       85 02		      sta	WSYNC
     17  fb48					      REPEND
     18  fb4a		       85 02		      sta	WSYNC
     17  fb4a					      REPEND
     18  fb4c		       85 02		      sta	WSYNC
     17  fb4c					      REPEND
     18  fb4e		       85 02		      sta	WSYNC
     17  fb4e					      REPEND
     18  fb50		       85 02		      sta	WSYNC
     19  fb52					      REPEND
     20  fb52
     21  fb52		       a9 00		      lda	#0
     22  fb54		       85 09		      sta	COLUBK
     23  fb56		       85 02		      sta	WSYNC
     24  fb58
     25  fb58							; Start top border
     26  fb58				   border_top
     27  fb58							; Make the playfield solid.
     28  fb58		       a9 3f		      lda	#%00111111
     29  fb5a		       85 0e		      sta	PF1
     30  fb5c		       a9 ff		      lda	#%11111111
     31  fb5e		       85 0f		      sta	PF2
     32  fb60
     33  fb60		       a9 42		      lda	#COL_BG
     34  fb62		       a0 00		      ldy	#0
     35  fb64
     36  fb64							; X_XXXX_XX
     37  fb64							; Commented lines removed to save on space.
     38  fb64		       85 08		      sta	COLUPF
     39  fb66		       85 02		      sta	WSYNC
     40  fb68		       84 08		      sty	COLUPF
     41  fb6a		       85 02		      sta	WSYNC
     42  fb6c		       85 08		      sta	COLUPF
     43  fb6e		       85 02		      sta	WSYNC
     44  fb70							; sta COLUPF
     45  fb70		       85 02		      sta	WSYNC
     46  fb72							; sta COLUPF
     47  fb72		       85 02		      sta	WSYNC
     48  fb74		       84 08		      sty	COLUPF
     49  fb76		       85 02		      sta	WSYNC
     50  fb78		       85 08		      sta	COLUPF
     51  fb7a
     52  fb7a		       85 02		      sta	WSYNC
     53  fb7c							; sta COLUPF
     54  fb7c
     55  fb7c				   PlayArea
     56  fb7c							; PF is now the playing area
      0  fb7c					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb7c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb7c  && !(  _scycles == #0  ) }
      2  fb7c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb7c					      sleep	61
      1  fb7c				   .CYCLES    SET	61
      2  fb7c
      3  fb7c				  -	      IF	.CYCLES < 2
      4  fb7c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb7c				  -	      ERR
      6  fb7c					      ENDIF
      7  fb7c
      8  fb7c					      IF	.CYCLES & 1
      9  fb7c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb7c		       04 00		      nop	0
     11  fb7e				  -	      ELSE
     12  fb7e				  -	      bit	VSYNC
     13  fb7e					      ENDIF
     14  fb7e				   .CYCLES    SET	.CYCLES - 3
     15  fb7e					      ENDIF
     16  fb7e
     17  fb7e					      REPEAT	.CYCLES / 2
     18  fb7e		       ea		      nop
     17  fb7e					      REPEND
     18  fb7f		       ea		      nop
     17  fb7f					      REPEND
     18  fb80		       ea		      nop
     17  fb80					      REPEND
     18  fb81		       ea		      nop
     17  fb81					      REPEND
     18  fb82		       ea		      nop
     17  fb82					      REPEND
     18  fb83		       ea		      nop
     17  fb83					      REPEND
     18  fb84		       ea		      nop
     17  fb84					      REPEND
     18  fb85		       ea		      nop
     17  fb85					      REPEND
     18  fb86		       ea		      nop
     17  fb86					      REPEND
     18  fb87		       ea		      nop
     17  fb87					      REPEND
     18  fb88		       ea		      nop
     17  fb88					      REPEND
     18  fb89		       ea		      nop
     17  fb89					      REPEND
     18  fb8a		       ea		      nop
     17  fb8a					      REPEND
     18  fb8b		       ea		      nop
     17  fb8b					      REPEND
     18  fb8c		       ea		      nop
     17  fb8c					      REPEND
     18  fb8d		       ea		      nop
     17  fb8d					      REPEND
     18  fb8e		       ea		      nop
     17  fb8e					      REPEND
     18  fb8f		       ea		      nop
     17  fb8f					      REPEND
     18  fb90		       ea		      nop
     17  fb90					      REPEND
     18  fb91		       ea		      nop
     17  fb91					      REPEND
     18  fb92		       ea		      nop
     17  fb92					      REPEND
     18  fb93		       ea		      nop
     17  fb93					      REPEND
     18  fb94		       ea		      nop
     17  fb94					      REPEND
     18  fb95		       ea		      nop
     17  fb95					      REPEND
     18  fb96		       ea		      nop
     17  fb96					      REPEND
     18  fb97		       ea		      nop
     17  fb97					      REPEND
     18  fb98		       ea		      nop
     17  fb98					      REPEND
     18  fb99		       ea		      nop
     17  fb99					      REPEND
     18  fb9a		       ea		      nop
     19  fb9b					      REPEND
     59  fb9b		       a9 00		      lda	#%00000000
     60  fb9d		       85 0d		      sta	PF0
     61  fb9f		       a9 20		      lda	#%00100000
     62  fba1		       85 0e		      sta	PF1
     63  fba3		       a9 00		      lda	#%00000000
     64  fba5		       85 0f		      sta	PF2
      0  fba7					      ASSERT_RUNTIME	"_scycles == #0"
      1  fba7				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fba7  && !(  _scycles == #0  ) }
      2  fba7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fba7					      sleep	7
      1  fba7				   .CYCLES    SET	7
      2  fba7
      3  fba7				  -	      IF	.CYCLES < 2
      4  fba7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fba7				  -	      ERR
      6  fba7					      ENDIF
      7  fba7
      8  fba7					      IF	.CYCLES & 1
      9  fba7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fba7		       04 00		      nop	0
     11  fba9				  -	      ELSE
     12  fba9				  -	      bit	VSYNC
     13  fba9					      ENDIF
     14  fba9				   .CYCLES    SET	.CYCLES - 3
     15  fba9					      ENDIF
     16  fba9
     17  fba9					      REPEAT	.CYCLES / 2
     18  fba9		       ea		      nop
     17  fba9					      REPEND
     18  fbaa		       ea		      nop
     19  fbab					      REPEND
     67  fbab		       4c dd fb 	      jmp	row_start
     68  fbae							; enter row on cycle 10.
     69  fbae
     70  fbae							; reset the background for bottom of playfield
     71  fbae				   border_bottom
     72  fbae							;sta WSYNC
     73  fbae
     74  fbae							; Form the bottom of the level frame.
     75  fbae		       a9 3f		      lda	#%00111111
     76  fbb0		       85 0e		      sta	PF1
     77  fbb2		       a9 ff		      lda	#%11111111
     78  fbb4		       85 0f		      sta	PF2
     79  fbb6
     80  fbb6							; Clear all sprites.
     81  fbb6		       a9 00		      lda	#0
     82  fbb8		       85 1c		      sta	EMERALD_SP
     83  fbba		       85 1b		      sta	JET_SP
     84  fbbc		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fbbe
     86  fbbe		       a9 42		      lda	#COL_BG
     87  fbc0		       a0 00		      ldy	#0
     88  fbc2		       85 02		      sta	WSYNC
     89  fbc4
     90  fbc4		       84 08		      sty	COLUPF
     91  fbc6		       85 02		      sta	WSYNC
     92  fbc8
     93  fbc8		       85 08		      sta	COLUPF
     94  fbca		       85 02		      sta	WSYNC
     95  fbcc
     96  fbcc		       85 02		      sta	WSYNC
     97  fbce
     98  fbce		       85 02		      sta	WSYNC
     99  fbd0
    100  fbd0		       84 08		      sty	COLUPF
    101  fbd2		       85 02		      sta	WSYNC
    102  fbd4
    103  fbd4		       85 08		      sta	COLUPF
    104  fbd6		       85 02		      sta	WSYNC
    105  fbd8		       85 02		      sta	WSYNC
    106  fbda		       4c 00 f5 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fbdd					      include	"kernel_row.s"
      1  fbdd							; Frame Start
      2  fbdd
      3  fbdd							; Macros for calculating sprite values (GRPx).
      4  fbdd
      5  fbdd							; mac jet_spritedata_calc
      6  fbdd							;
      7  fbdd							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fbdd							; GRP0.
      9  fbdd					      mac	jet_spritedata_calc
     10  fbdd					      dec	RamRowJetpackIndex
     11  fbdd					      ldy	RamRowJetpackIndex
     12  fbdd					      ldx	Frame0,Y
     13  fbdd					      stx	JET_SP
     14  fbdd					      endm
     15  fbdd
     16  fbdd				   row_start
     17  fbdd
     18  fbdd							; [scanline 1]
     19  fbdd				   row_1
     20  fbdd							; Enter after scanline starts on row "9" and wraps
      0  fbdd					      ASSERT_RUNTIME	"_scycles == #10"
      1  fbdd				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fbdd  && !(  _scycles == #10  ) }
      2  fbdd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fbdd
     23  fbdd							; Load sprite details
     24  fbdd		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fbdf		       c5 c4		      cmp	SpriteEnd	; 5c
     26  fbe1		       a9 00		      lda	#0	; 2c
     27  fbe3							; constant 6c: if carry set, load SpriteEnd into y
     28  fbe3		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fbe5		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fbe6		       a5 c4		      lda	SpriteEnd
     31  fbe8		       69 08		      adc	#8
     32  fbea		       85 d2		      sta	RamRowJetpackIndex
     33  fbec
     34  fbec							; Load sprite
     35  fbec		       c6 d2		      dec	RamRowJetpackIndex
     36  fbee		       a4 d2		      ldy	RamRowJetpackIndex
     37  fbf0		       be 00 fe 	      ldx	Frame0,Y
     38  fbf3		       86 1b		      stx	JET_SP
     39  fbf5
     40  fbf5							; TODO assert cycle is not in visible range!
     41  fbf5
     42  fbf5							; [[[Nibble VM.]]]
     43  fbf5		       85 02		      sta	WSYNC
     44  fbf7
     45  fbf7							; sleep 46
     46  fbf7
      0  fbf7					      ASSERT_RUNTIME	"_scycles == #0"
      1  fbf7				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fbf7  && !(  _scycles == #0  ) }
      2  fbf7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     48  fbf7
     49  fbf7							; [scanline 2]
     50  fbf7				   row_2
      0  fbf7					      jet_spritedata_calc
      1  fbf7		       c6 d2		      dec	RamRowJetpackIndex
      2  fbf9		       a4 d2		      ldy	RamRowJetpackIndex
      3  fbfb		       be 00 fe 	      ldx	Frame0,Y
      4  fbfe		       86 1b		      stx	JET_SP
      0  fc00					      sleep	5
      1  fc00				   .CYCLES    SET	5
      2  fc00
      3  fc00				  -	      IF	.CYCLES < 2
      4  fc00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc00				  -	      ERR
      6  fc00					      ENDIF
      7  fc00
      8  fc00					      IF	.CYCLES & 1
      9  fc00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc00		       04 00		      nop	0
     11  fc02				  -	      ELSE
     12  fc02				  -	      bit	VSYNC
     13  fc02					      ENDIF
     14  fc02				   .CYCLES    SET	.CYCLES - 3
     15  fc02					      ENDIF
     16  fc02
     17  fc02					      REPEAT	.CYCLES / 2
     18  fc02		       ea		      nop
     19  fc03					      REPEND
     53  fc03
     54  fc03							; Black out playfield
     55  fc03							; TODO This should be done with playfield pixels, not color.
     56  fc03		       a9 00		      lda	#0
     57  fc05		       85 08		      sta	COLUPF
     58  fc07
     59  fc07							; [[[Nibble VM.]]]
      0  fc07					      sleep	25
      1  fc07				   .CYCLES    SET	25
      2  fc07
      3  fc07				  -	      IF	.CYCLES < 2
      4  fc07				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc07				  -	      ERR
      6  fc07					      ENDIF
      7  fc07
      8  fc07					      IF	.CYCLES & 1
      9  fc07					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc07		       04 00		      nop	0
     11  fc09				  -	      ELSE
     12  fc09				  -	      bit	VSYNC
     13  fc09					      ENDIF
     14  fc09				   .CYCLES    SET	.CYCLES - 3
     15  fc09					      ENDIF
     16  fc09
     17  fc09					      REPEAT	.CYCLES / 2
     18  fc09		       ea		      nop
     17  fc09					      REPEND
     18  fc0a		       ea		      nop
     17  fc0a					      REPEND
     18  fc0b		       ea		      nop
     17  fc0b					      REPEND
     18  fc0c		       ea		      nop
     17  fc0c					      REPEND
     18  fc0d		       ea		      nop
     17  fc0d					      REPEND
     18  fc0e		       ea		      nop
     17  fc0e					      REPEND
     18  fc0f		       ea		      nop
     17  fc0f					      REPEND
     18  fc10		       ea		      nop
     17  fc10					      REPEND
     18  fc11		       ea		      nop
     17  fc11					      REPEND
     18  fc12		       ea		      nop
     17  fc12					      REPEND
     18  fc13		       ea		      nop
     19  fc14					      REPEND
     61  fc14
     62  fc14							; Load PF1 value
     63  fc14		       a9 3d		      lda	#%00111101
     64  fc16		       85 d4		      sta	RamPF1Value
     65  fc18
     66  fc18		       a9 04		      lda	#4
     67  fc1a		       8d 96 02 	      sta	TIM64T
     68  fc1d
     69  fc1d							; Set stack pointer for PHP use from RamKernelPhpTarget.
     70  fc1d		       a6 d6		      ldx	RamKernelPhpTarget
     71  fc1f		       ca		      dex
     72  fc20		       9a		      txs
     73  fc21
     74  fc21							; Enable playfield at end of scanline
     75  fc21		       a9 42		      lda	#COL_BG
     76  fc23		       85 08		      sta	COLUPF
     77  fc25
     78  fc25							; Set overflow flag
     79  fc25		       24 d3		      bit	RamPSByte
     80  fc27
      0  fc27					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc27				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc27  && !(  _scycles == #0  ) }
      2  fc27					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     82  fc27
     83  fc27							; [scanline 3]
     84  fc27				   row_3
     85  fc27							; Current row and next two rows.
     86  fc27		       a4 d2		      ldy	RamRowJetpackIndex
     87  fc29		       88		      dey
     88  fc2a		       be 00 fe 	      ldx	Frame0,Y
     89  fc2d		       86 1b		      stx	JET_SP
     90  fc2f		       88		      dey
     91  fc30		       be 00 fe 	      ldx	Frame0,Y
     92  fc33		       86 d5		      stx	RamKernelGRP0
     93  fc35		       88		      dey
     94  fc36		       be 00 fe 	      ldx	Frame0,Y
     95  fc39		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
     96  fc3c		       84 d2		      sty	RamRowJetpackIndex
     97  fc3e
     98  fc3e							; Idle.
      0  fc3e					      sleep	22
      1  fc3e				   .CYCLES    SET	22
      2  fc3e
      3  fc3e				  -	      IF	.CYCLES < 2
      4  fc3e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc3e				  -	      ERR
      6  fc3e					      ENDIF
      7  fc3e
      8  fc3e				  -	      IF	.CYCLES & 1
      9  fc3e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc3e				  -	      nop	0
     11  fc3e				  -	      ELSE
     12  fc3e				  -	      bit	VSYNC
     13  fc3e				  -	      ENDIF
     14  fc3e				  -.CYCLES    SET	.CYCLES - 3
     15  fc3e					      ENDIF
     16  fc3e
     17  fc3e					      REPEAT	.CYCLES / 2
     18  fc3e		       ea		      nop
     17  fc3e					      REPEND
     18  fc3f		       ea		      nop
     17  fc3f					      REPEND
     18  fc40		       ea		      nop
     17  fc40					      REPEND
     18  fc41		       ea		      nop
     17  fc41					      REPEND
     18  fc42		       ea		      nop
     17  fc42					      REPEND
     18  fc43		       ea		      nop
     17  fc43					      REPEND
     18  fc44		       ea		      nop
     17  fc44					      REPEND
     18  fc45		       ea		      nop
     17  fc45					      REPEND
     18  fc46		       ea		      nop
     17  fc46					      REPEND
     18  fc47		       ea		      nop
     17  fc47					      REPEND
     18  fc48		       ea		      nop
     19  fc49					      REPEND
    100  fc49
    101  fc49							; Setup for kernel
    102  fc49		       38		      sec		; clear carry bit
    103  fc4a		       a6 d7		      ldx	RamKernelX
    104  fc4c		       a4 d8		      ldy	RamKernelY
    105  fc4e
    106  fc4e							; Jump immediately into scanlines 4-5 aka "kernel_gem"
    107  fc4e		       a5 e7		      lda	BuildKernelVdel1
    108  fc50		       85 1c		      sta	EMERALD_SP
    109  fc52		       a5 d5		      lda	RamKernelGRP0	; Load sprite 2 into A
    110  fc54							; [scanline 4]
    111  fc54							; [scanline 5]
      0  fc54					      ASSERT_RUNTIME	"_scycles == #73"
      1  fc54				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fc54  && !(  _scycles == #73  ) }
      2  fc54					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    113  fc54		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    114  fc57
    115  fc57							; [scanline 6]
    116  fc57
    117  fc57							; Try to avoid page crossing in jet_spritedata_calc
    118  fc57							; TODO enforce this with ASSERT_RUNTIME instead?
    119  fc60		       00 00 00 00*	      align	16
    120  fc60
    121  fc60				   row_after_kernel
    122  fc60				   row_6
      0  fc60					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc60				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc60  && !(  _scycles == #0  ) }
      2  fc60					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    124  fc60
    125  fc60							; Cleanup from the kernel.
    126  fc60		       a9 00		      lda	#0
    127  fc62		       85 1e		      sta	EMERALD_MI_ENABLE
    128  fc64		       85 1c		      sta	EMERALD_SP
    129  fc66		       85 08		      sta	COLUPF
    130  fc68		       85 26		      sta	VDELP1
    131  fc6a
    132  fc6a		       a9 20		      lda	#%00100000
    133  fc6c		       85 0e		      sta	PF1
    134  fc6e
      0  fc6e					      jet_spritedata_calc
      1  fc6e		       c6 d2		      dec	RamRowJetpackIndex
      2  fc70		       a4 d2		      ldy	RamRowJetpackIndex
      3  fc72		       be 00 fe 	      ldx	Frame0,Y
      4  fc75		       86 1b		      stx	JET_SP
    136  fc77
    137  fc77							; Idle.
    138  fc77		       85 02		      sta	WSYNC
    139  fc79
    140  fc79							; [scanline 7]
    141  fc79				   row_7
      0  fc79					      jet_spritedata_calc
      1  fc79		       c6 d2		      dec	RamRowJetpackIndex
      2  fc7b		       a4 d2		      ldy	RamRowJetpackIndex
      3  fc7d		       be 00 fe 	      ldx	Frame0,Y
      4  fc80		       86 1b		      stx	JET_SP
      0  fc82					      sleep	5
      1  fc82				   .CYCLES    SET	5
      2  fc82
      3  fc82				  -	      IF	.CYCLES < 2
      4  fc82				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc82				  -	      ERR
      6  fc82					      ENDIF
      7  fc82
      8  fc82					      IF	.CYCLES & 1
      9  fc82					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc82		       04 00		      nop	0
     11  fc84				  -	      ELSE
     12  fc84				  -	      bit	VSYNC
     13  fc84					      ENDIF
     14  fc84				   .CYCLES    SET	.CYCLES - 3
     15  fc84					      ENDIF
     16  fc84
     17  fc84					      REPEAT	.CYCLES / 2
     18  fc84		       ea		      nop
     19  fc85					      REPEND
      0  fc85					      ASSERT_RUNTIME	"_scycles == #20"
      1  fc85				   .COND      SET	"_scycles == #20"
 ASSERT: breakif { pc== $fc85  && !(  _scycles == #20  ) }
      2  fc85					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    145  fc85
    146  fc85		       a9 42		      lda	#COL_BG
    147  fc87		       85 08		      sta	COLUPF
    148  fc89
    149  fc89							; FRAMESWITCH
    150  fc89		       a9 01		      lda	#01
    151  fc8b		       25 c3		      and	FrameCount
    152  fc8d		       d0 11		      bne	loadframe2
    153  fc8f
    154  fc8f							; Perform gem loading for Kernel A.
    155  fc8f
    156  fc8f				   loadframe1
      0  fc8f					      ASSERT_RUNTIME	"_scycles == #32"
      1  fc8f				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $fc8f  && !(  _scycles == #32  ) }
      2  fc8f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    158  fc8f
    159  fc8f							; Emerald byte setting 1A
    160  fc8f							; ldx #0
    161  fc8f							; lda KERNEL_STORAGE_R,X
    162  fc8f							; sta GEM_00_W
    163  fc8f							; inx
    164  fc8f							; lda KERNEL_STORAGE_R,X
    165  fc8f							; sta GEM_04_W
    166  fc8f							; inx
    167  fc8f							; lda KERNEL_STORAGE_R,X
    168  fc8f							; sta GEM_09_W
    169  fc8f							; inx
    170  fc8f
    171  fc8f		       85 02		      sta	WSYNC
    172  fc91
    173  fc91							; [scanline 8]
      0  fc91					      jet_spritedata_calc
      1  fc91		       c6 d2		      dec	RamRowJetpackIndex
      2  fc93		       a4 d2		      ldy	RamRowJetpackIndex
      3  fc95		       be 00 fe 	      ldx	Frame0,Y
      4  fc98		       86 1b		      stx	JET_SP
      0  fc9a					      sleep	5
      1  fc9a				   .CYCLES    SET	5
      2  fc9a
      3  fc9a				  -	      IF	.CYCLES < 2
      4  fc9a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9a				  -	      ERR
      6  fc9a					      ENDIF
      7  fc9a
      8  fc9a					      IF	.CYCLES & 1
      9  fc9a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9a		       04 00		      nop	0
     11  fc9c				  -	      ELSE
     12  fc9c				  -	      bit	VSYNC
     13  fc9c					      ENDIF
     14  fc9c				   .CYCLES    SET	.CYCLES - 3
     15  fc9c					      ENDIF
     16  fc9c
     17  fc9c					      REPEAT	.CYCLES / 2
     18  fc9c		       ea		      nop
     19  fc9d					      REPEND
    176  fc9d
    177  fc9d							; Emerald byte setting 1B
    178  fc9d							; lda KERNEL_STORAGE_R,X
    179  fc9d							; sta GEM_13_W
    180  fc9d							; inx
    181  fc9d							; lda KERNEL_STORAGE_R,X
    182  fc9d							; sta GEM_17_W
    183  fc9d							; inx
    184  fc9d							; lda KERNEL_STORAGE_R,X
    185  fc9d							; sta GEM_18_W
    186  fc9d							; inx
    187  fc9d							; lda KERNEL_STORAGE_R,X
    188  fc9d							; sta GEM_22_W
    189  fc9d
    190  fc9d		       4c b1 fc 	      jmp	row_8_end
    191  fca0
    192  fca0							; Perform gem loading for Kernel B.
    193  fca0
    194  fca0				   loadframe2
      0  fca0					      ASSERT_RUNTIME	"_scycles == #33"
      1  fca0				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $fca0  && !(  _scycles == #33  ) }
      2  fca0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    196  fca0
    197  fca0							; Emerald byte setting 2A
    198  fca0							; ldx #[storage_02 - storage]
    199  fca0							; lda KERNEL_STORAGE_R,X
    200  fca0							; sta GEM_02_W
    201  fca0							; inx
    202  fca0							; lda KERNEL_STORAGE_R,X
    203  fca0							; sta GEM_06_W
    204  fca0							; inx
    205  fca0							; lda KERNEL_STORAGE_R,X
    206  fca0							; sta GEM_08_W
    207  fca0							; inx
    208  fca0
    209  fca0		       85 02		      sta	WSYNC
    210  fca2
    211  fca2							; [scanline 8]
    212  fca2				   row_8
      0  fca2					      jet_spritedata_calc
      1  fca2		       c6 d2		      dec	RamRowJetpackIndex
      2  fca4		       a4 d2		      ldy	RamRowJetpackIndex
      3  fca6		       be 00 fe 	      ldx	Frame0,Y
      4  fca9		       86 1b		      stx	JET_SP
      0  fcab					      sleep	5
      1  fcab				   .CYCLES    SET	5
      2  fcab
      3  fcab				  -	      IF	.CYCLES < 2
      4  fcab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcab				  -	      ERR
      6  fcab					      ENDIF
      7  fcab
      8  fcab					      IF	.CYCLES & 1
      9  fcab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcab		       04 00		      nop	0
     11  fcad				  -	      ELSE
     12  fcad				  -	      bit	VSYNC
     13  fcad					      ENDIF
     14  fcad				   .CYCLES    SET	.CYCLES - 3
     15  fcad					      ENDIF
     16  fcad
     17  fcad					      REPEAT	.CYCLES / 2
     18  fcad		       ea		      nop
     19  fcae					      REPEND
    215  fcae
    216  fcae							; Emerald byte setting 2B
    217  fcae							; lda KERNEL_STORAGE_R,X
    218  fcae							; sta GEM_11_W
    219  fcae							; inx
    220  fcae							; lda KERNEL_STORAGE_R,X
    221  fcae							; sta GEM_15_W
    222  fcae							; inx
    223  fcae							; lda KERNEL_STORAGE_R,X
    224  fcae							; sta GEM_20_W
    225  fcae							; inx
    226  fcae							; lda KERNEL_STORAGE_R,X
    227  fcae							; sta GEM_24_W
    228  fcae
    229  fcae		       4c b1 fc 	      jmp	row_8_end
    230  fcb1
    231  fcb1							; Common row 8 return.
    232  fcb1
    233  fcb1				   row_8_end
    234  fcb1							; Decrease SpriteEnd
    235  fcb1		       38		      sec
    236  fcb2		       a5 c4		      lda	SpriteEnd
    237  fcb4		       e9 08		      sbc	#8
    238  fcb6		       85 c4		      sta	SpriteEnd
    239  fcb8
    240  fcb8							; Idle.
    241  fcb8		       85 02		      sta	WSYNC
    242  fcba
    243  fcba							; [scanline 8]
    244  fcba							; Repeat loop until LoopCount < 0
    245  fcba		       c6 c2		      dec	LoopCount
    246  fcbc		       f0 03		      beq	row_end
    247  fcbe		       4c dd fb 	      jmp	row_start
    248  fcc1				   row_end
    249  fcc1		       4c ae fb 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fcc4					      include	"kernel_gem.s"
      1  fcc4							;
      2  fcc4							; Gem Kernels
      3  fcc4							;
      4  fcc4							; Gems are displayed in alternating kernels. This chart shows
      5  fcc4							; which kernel is responsible for which gem, with missiles denoted.
      6  fcc4							;
      7  fcc4							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fcc4							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fcc4							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fcc4							;  #	 0^	 8^	  17^	    26^       gem index
     11  fcc4							;
     12  fcc4							; The middle bar indicates where the pattern reverses.
     13  fcc4							;
     14  fcc4							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fcc4							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fcc4							; requires with a single sprite. By alternating sprites each frame with an...
     17  fcc4							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fcc4							; line, except for two. These are instead rendered by the missile, which
     19  fcc4							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fcc4
     21  fcc4							; for copying
     22  fd00		       00 00 00 00*	      align	256
     23  fd00
     24  fd00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fd00							;
     26  fd00							; GEM KERNEL A
     27  fd00							;
     28  fd00
     29  fd00				   kernel_1_start subroutine
     30  fd00					      rorg	$f100
     31  fd00
     32  fd00							; Kernel Marker
     33  fd00		       0a		      .byte.b	$A
     34  fd01
     35  fd01				   KernelA_early
      0  fd01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fd01				   .KERNEL    SET	$A
      2  fd01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fd01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fd01		       b8		      clv
     38  fd02
     39  fd02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fd02		       a9 ff		      lda	#$ff
     41  fd02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fd04
     43  fd04				   KernelA    subroutine
      0  fd04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fd04				   .KERNEL    SET	$A
      2  fd04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fd04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fd04
     46  fd04							; Write Player from accumulator. When writing to the other sprite, the
     47  fd04							; TIA will copy Gemini 0A into visible sprite register
     48  fd04		       85 1b		      sta	JET_SP
     49  fd06							; Write Gemini 1A into visible sprite register
     50  fd06		       a9 66		      lda	#%01100110
     51  fd06		       f1 07	   KernelA_VDEL0 =	. - 1
     52  fd08		       85 1c		      sta	EMERALD_SP
     53  fd0a
     54  fd0a							; Register config
     55  fd0a		       a9 08		      lda	#%00001000
     56  fd0c		       85 0c		      sta	REFP1
     57  fd0e
     58  fd0e		       a9 20		      lda	#%00100000
     59  fd10		       85 0e		      sta	PF1
     60  fd12
     61  fd12							; Reset stack pointer
     62  fd12		       68		      pla
     63  fd13
     64  fd13							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fd13					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fd13				   .KERNEL    SET	$A
      2  fd13				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f113  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fd13					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fd13				   KernelA_A
     67  fd13		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fd15
     69  fd15							; RST0 vvv
     70  fd15				   KernelA_B
     71  fd15		       a5 d4		      lda	RamPF1Value
     72  fd17				   KernelA_C
     73  fd17		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fd19				   KernelA_D
     75  fd19							; sty EMERALD_SP ; Gemini 1A
      0  fd19					      sleep	3
      1  fd19				   .CYCLES    SET	3
      2  fd19
      3  fd19				  -	      IF	.CYCLES < 2
      4  fd19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd19				  -	      ERR
      6  fd19					      ENDIF
      7  fd19
      8  fd19					      IF	.CYCLES & 1
      9  fd19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd19		       04 00		      nop	0
     11  fd1b				  -	      ELSE
     12  fd1b				  -	      bit	VSYNC
     13  fd1b					      ENDIF
     14  fd1b				   .CYCLES    SET	.CYCLES - 3
     15  fd1b					      ENDIF
     16  fd1b
     17  fd1b				  -	      REPEAT	.CYCLES / 2
     18  fd1b				  -	      nop
     19  fd1b					      REPEND
     77  fd1b							; RST0 ^^^
     78  fd1b
     79  fd1b				   KernelA_E
     80  fd1b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     81  fd1d				   KernelA_F
     82  fd1d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     83  fd1f				   KernelA_G
     84  fd1f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     85  fd21
     86  fd21				   KernelA_H
     87  fd21		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     88  fd23
      0  fd23					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fd23				   .KERNEL    SET	$A
      2  fd23				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f123  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fd23					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     90  fd23							; RST4 vvv
     91  fd23				   KernelA_I
     92  fd23		       08		      php		; Reset "medium close" NUSIZ repetition
     93  fd24				   KernelA_J		; unchanging
     94  fd24		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     95  fd26				   KernelA_K
     96  fd26		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     97  fd28							; RST4 ^^^
     98  fd28
     99  fd28				   KernelA_L
    100  fd28		       a5 ce		      lda	RamZeroByte	; FIXME this doesn't belong here
    101  fd2a				   KernelA_M
    102  fd2a		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    103  fd2c				   KernelA_N
    104  fd2c		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME better place for this?
    105  fd2e				   KernelA_O
    106  fd2e		       a9 66		      lda	#%01100110
    107  fd2e		       f1 2f	   KernelA_VDEL1 =	. - 1
    108  fd30
    109  fd30							; End visible line
      0  fd30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #66"
      1  fd30				   .KERNEL    SET	$A
      2  fd30				   .COND      SET	"_scycles == #66"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #66  ) }
      3  fd30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fd30				   KernelA_branch
    112  fd30		       85 1c		      sta	EMERALD_SP	; set VDEL1
    113  fd32
    114  fd32							; Branch or return.
    115  fd32		       70 cd		      bvs	KernelA_early
      0  fd34					      sleep	2
      1  fd34				   .CYCLES    SET	2
      2  fd34
      3  fd34				  -	      IF	.CYCLES < 2
      4  fd34				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd34				  -	      ERR
      6  fd34					      ENDIF
      7  fd34
      8  fd34				  -	      IF	.CYCLES & 1
      9  fd34				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd34				  -	      nop	0
     11  fd34				  -	      ELSE
     12  fd34				  -	      bit	VSYNC
     13  fd34				  -	      ENDIF
     14  fd34				  -.CYCLES    SET	.CYCLES - 3
     15  fd34					      ENDIF
     16  fd34
     17  fd34					      REPEAT	.CYCLES / 2
     18  fd34		       ea		      nop
     19  fd35					      REPEND
    117  fd35		       4c 60 fc 	      jmp	row_after_kernel
    118  fd38
    119  fd38					      rend
    120  fd38				   kernel_1_end
      0  fd38					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fd38				   .STARTA    SET	kernel_1_start
      2  fd38				   .ENDA      SET	kernel_1_end
      3  fd38				   .LEN       SET	$40
      4  fd38				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd38				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd38				  -	      err
      7  fd38					      endif
    122  fd38
    123  fd38							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  fd38							;
    125  fd38							; GEM KERNEL B
    126  fd38							;
    127  fd38
    128  fd38				   kernel_2_start subroutine
    129  fd38					      rorg	$f100
    130  fd38
    131  fd38							; Kernel Marker
    132  fd38		       0b		      .byte.b	$B
    133  fd39
    134  fd39		       b8		      clv
    135  fd3a
    136  fd3a				   KernelB_early
    137  fd3a							; Early code to set next GRP0 image. Value is overwritten
    138  fd3a		       a9 ff		      lda	#$ff
    139  fd3a		       f1 03	   KernelB_GRP0 =	. - 1
    140  fd3c
    141  fd3c				   KernelB    subroutine
      0  fd3c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fd3c				   .KERNEL    SET	$B
      2  fd3c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fd3c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    143  fd3c
    144  fd3c							; Write Player from accumulator. When writing to the other sprite, the
    145  fd3c							; TIA will copy Gemini 0A into visible sprite register
    146  fd3c		       85 1b		      sta	JET_SP
    147  fd3e		       a9 aa		      lda	#%10101010
    148  fd3e		       f1 07	   KernelB_VDEL0 =	. - 1
    149  fd40							; Write Gemini 1A into delayed sprite register
    150  fd40		       85 1c		      sta	EMERALD_SP
    151  fd42
    152  fd42							; Reset stack
    153  fd42		       68		      pla
    154  fd43
    155  fd43							; 6c
    156  fd43		       a9 20		      lda	#%00100000
    157  fd45		       85 0e		      sta	PF1
    158  fd47
    159  fd47							; Register config
    160  fd47		       a9 ff		      lda	#$ff
    161  fd49		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    162  fd4b
    163  fd4b							; Set processor register bit for PHP sprite rendering.
      0  fd4b					      sleep	3
      1  fd4b				   .CYCLES    SET	3
      2  fd4b
      3  fd4b				  -	      IF	.CYCLES < 2
      4  fd4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd4b				  -	      ERR
      6  fd4b					      ENDIF
      7  fd4b
      8  fd4b					      IF	.CYCLES & 1
      9  fd4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd4b		       04 00		      nop	0
     11  fd4d				  -	      ELSE
     12  fd4d				  -	      bit	VSYNC
     13  fd4d					      ENDIF
     14  fd4d				   .CYCLES    SET	.CYCLES - 3
     15  fd4d					      ENDIF
     16  fd4d
     17  fd4d				  -	      REPEAT	.CYCLES / 2
     18  fd4d				  -	      nop
     19  fd4d					      REPEND
    165  fd4d
    166  fd4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fd4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fd4d				   .KERNEL    SET	$B
      2  fd4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fd4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    168  fd4d				   KernelB_A
    169  fd4d		       85 11		      sta	EMERALD_SP_RESET
    170  fd4f				   KernelB_B
    171  fd4f		       a5 d4		      lda	RamPF1Value
    172  fd51				   KernelB_C
    173  fd51		       c5 d4		      cmp	RamPF1Value
    174  fd53				   KernelB_D
    175  fd53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    176  fd55
    177  fd55							; below has one php load (could just be RESET)
    178  fd55				   KernelB_E
    179  fd55		       08		      php
    180  fd56				   KernelB_F
    181  fd56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    182  fd58				   KernelB_G
    183  fd58		       85 0e		      sta	PF1
    184  fd5a				   KernelB_H
    185  fd5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    186  fd5c							; above has one PHP load
    187  fd5c
    188  fd5c				   KernelB_I
    189  fd5c		       85 11		      sta	EMERALD_SP_RESET
    190  fd5e				   KernelB_J
    191  fd5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    192  fd60				   KernelB_K
    193  fd60		       85 1e		      sta	EMERALD_MI_ENABLE	; FIXME this can't rely on sta
    194  fd62				   KernelB_L
    195  fd62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    196  fd64
    197  fd64				   KernelB_M
      0  fd64					      sleep	3
      1  fd64				   .CYCLES    SET	3
      2  fd64
      3  fd64				  -	      IF	.CYCLES < 2
      4  fd64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd64				  -	      ERR
      6  fd64					      ENDIF
      7  fd64
      8  fd64					      IF	.CYCLES & 1
      9  fd64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd64		       04 00		      nop	0
     11  fd66				  -	      ELSE
     12  fd66				  -	      bit	VSYNC
     13  fd66					      ENDIF
     14  fd66				   .CYCLES    SET	.CYCLES - 3
     15  fd66					      ENDIF
     16  fd66
     17  fd66				  -	      REPEAT	.CYCLES / 2
     18  fd66				  -	      nop
     19  fd66					      REPEND
    199  fd66				   KernelB_N
      0  fd66					      sleep	3
      1  fd66				   .CYCLES    SET	3
      2  fd66
      3  fd66				  -	      IF	.CYCLES < 2
      4  fd66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd66				  -	      ERR
      6  fd66					      ENDIF
      7  fd66
      8  fd66					      IF	.CYCLES & 1
      9  fd66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd66		       04 00		      nop	0
     11  fd68				  -	      ELSE
     12  fd68				  -	      bit	VSYNC
     13  fd68					      ENDIF
     14  fd68				   .CYCLES    SET	.CYCLES - 3
     15  fd68					      ENDIF
     16  fd68
     17  fd68				  -	      REPEAT	.CYCLES / 2
     18  fd68				  -	      nop
     19  fd68					      REPEND
    201  fd68
    202  fd68							; End visible line
      0  fd68					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fd68				   .KERNEL    SET	$B
      2  fd68				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fd68					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    204  fd68
    205  fd68				   KernelB_branch
    206  fd68		       ad 84 02 	      lda	INTIM
    207  fd6b		       d0 cd		      bne	KernelB_early
    208  fd6d		       4c 60 fc 	      jmp	row_after_kernel
    209  fd70
    210  fd70					      rend
    211  fd70				   kernel_2_end
      0  fd70					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fd70				   .STARTA    SET	kernel_2_start
      2  fd70				   .ENDA      SET	kernel_2_end
      3  fd70				   .LEN       SET	$40
      4  fd70				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd70				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd70				  -	      err
      7  fd70					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fd70					      include	"data_sprites.s"
      1  fd70
      2  fe00		       00 00 00 00*	      align	256
      3  fe00
      4  fe00				   Frame0
      5  fe00							; 8 buffer
      6  fe00		       00		      .byte.b	#%00000000
      7  fe01		       00		      .byte.b	#%00000000
      8  fe02		       00		      .byte.b	#%00000000
      9  fe03		       00		      .byte.b	#%00000000
     10  fe04		       00		      .byte.b	#%00000000
     11  fe05		       00		      .byte.b	#%00000000
     12  fe06		       00		      .byte.b	#%00000000
     13  fe07		       00		      .byte.b	#%00000000
     14  fe08
     15  fe08							; 8 rows
     16  fe08		       60		      .byte.b	#%01100000
     17  fe09		       60		      .byte.b	#%01100000
     18  fe0a		       60		      .byte.b	#%01100000
     19  fe0b		       c0		      .byte.b	#%11000000
     20  fe0c		       c0		      .byte.b	#%11000000
     21  fe0d		       f0		      .byte.b	#%11110000
     22  fe0e		       c0		      .byte.b	#%11000000
     23  fe0f		       c0		      .byte.b	#%11000000
     24  fe10
     25  fe10							; 8 buffer
     26  fe10		       00		      .byte.b	#%00000000
     27  fe11		       00		      .byte.b	#%00000000
     28  fe12		       00		      .byte.b	#%00000000
     29  fe13		       00		      .byte.b	#%00000000
     30  fe14		       00		      .byte.b	#%00000000
     31  fe15		       00		      .byte.b	#%00000000
     32  fe16		       00		      .byte.b	#%00000000
     33  fe17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fe18					      include	"data_levels.s"
      1  fe18					      align	8
      2  fe18							; first bit of byte 2 & 3 are unused for simplicity
      3  fe18
      4  fe18				   level_00
      5  fe18		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fe1c
      7  fe1c				   level_01
      8  fe1c		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fe20		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fe24		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fe28		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fe2c		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fe30		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fe34		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fe38		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fe3c		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fe40		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fe44		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fe48		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fe4c		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fe50		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fe54		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fe58		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fe5c		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fe60		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fe64		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fe68		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fe6c		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fe70		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fe74		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fe78		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fe7c		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fe80		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fe84				   level_01_end
     35  fe84
     36  fe84
     37  fe84				   shard_map
     38  fe84		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fe85				   shard_map_end
------- FILE main.s
    129  fe85
    130  fffc					      org	$fffc
    131  fffc		       09 f2		      .word.w	Start
    132  fffe		       09 f2		      .word.w	Start
