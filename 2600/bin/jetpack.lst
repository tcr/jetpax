------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008e ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     49 U008e
     50 U008e		       00 10	   ROW_COUNT  equ	16
     51 U008e
     52 U008e		       00 34	   SIGNAL_LINE equ	$34
     53 U008e
     54 U008e		       11 00	   KERNEL_START equ	$1100
     55 U008e
     56 U008e							; Sprites
     57 U008e
     58 U008e							; Nusiz
     59 U008e		       00 13	   THREE_COPIES equ	%00010011
     60 U008e
     61 U008e							; Frame 1 sprites
     62 U008e		       00 60	   EMR1       equ	%01100000
     63 U008e		       00 06	   EMR2       equ	%00000110
     64 U008e		       00 66	   EMR3       equ	%01100110
     65 U008e
     66 U008e							; Frame 2 sprites
     67 U008e		       00 c0	   T1	      equ	%11000000
     68 U008e		       00 0c	   T2	      equ	%00001100
     69 U008e		       00 cc	   T3	      equ	%11001100
     70 U008e
     71 U008e							; Shorthands
     72 U008e
     73 U008e		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     74 U008e		       00 85	   SET_1_0    equ	$85	; STA
     75 U008e		       00 86	   SET_0_1    equ	$86	; STX
     76 U008e		       00 84	   SET_1_1    equ	$84	; STY
     77 U008e
     78 U008e		       00 86	   SET_0_L    equ	$86	; STX
     79 U008e		       00 85	   SET_1_L    equ	$85	; STY
     80 U008e
     81 U008e		       00 85	   SET_0_R    equ	$85	; STA
     82 U008e		       00 84	   SET_1_R    equ	$84	; STY
     83 U008e
     84 U008e							; Gem enabling/disabling globally
     85 U008e
     86 U008e							; ; all off
     87 U008e							; GEM_00 equ SET_0_0
     88 U008e							; GEM_02 equ SET_0_0
     89 U008e							; GEM_04 equ SET_0_0
     90 U008e							; GEM_06 equ SET_0_0
     91 U008e							; GEM_08 equ SET_0_L
     92 U008e							; GEM_09 equ SET_0_0
     93 U008e							; GEM_11 equ SET_0_0
     94 U008e							; GEM_13 equ SET_0_0
     95 U008e							; GEM_15 equ SET_0_0
     96 U008e							; GEM_17 equ SET_0_R
     97 U008e							; GEM_18 equ SET_0_0
     98 U008e							; GEM_20 equ SET_0_0
     99 U008e							; GEM_22 equ SET_0_0
    100 U008e							; GEM_24 equ SET_0_0
    101 U008e
    102 U008e							; all on
    103 U008e		       00 84	   GEM_00     equ	SET_1_1
    104 U008e		       00 84	   GEM_02     equ	SET_1_1
    105 U008e		       00 84	   GEM_04     equ	SET_1_1
    106 U008e		       00 84	   GEM_06     equ	SET_1_1
    107 U008e		       00 85	   GEM_08     equ	SET_1_L
    108 U008e		       00 84	   GEM_09     equ	SET_1_1
    109 U008e		       00 84	   GEM_11     equ	SET_1_1
    110 U008e		       00 84	   GEM_13     equ	SET_1_1
    111 U008e		       00 84	   GEM_15     equ	SET_1_1
    112 U008e		       00 84	   GEM_17     equ	SET_1_R
    113 U008e		       00 84	   GEM_18     equ	SET_1_1
    114 U008e		       00 84	   GEM_20     equ	SET_1_1
    115 U008e		       00 84	   GEM_22     equ	SET_1_1
    116 U008e		       00 84	   GEM_24     equ	SET_1_1
    117 U008e
    118 U008e							; ; odd on
    119 U008e							; GEM_00 equ SET_1_0
    120 U008e							; GEM_02 equ SET_1_0
    121 U008e							; GEM_04 equ SET_1_0
    122 U008e							; GEM_06 equ SET_1_0
    123 U008e							; GEM_08 equ SET_1_L
    124 U008e							; GEM_09 equ SET_0_1
    125 U008e							; GEM_11 equ SET_0_1
    126 U008e							; GEM_13 equ SET_0_1
    127 U008e							; GEM_15 equ SET_0_1
    128 U008e							; GEM_17 equ SET_0_R
    129 U008e							; GEM_18 equ SET_1_0
    130 U008e							; GEM_20 equ SET_1_0
    131 U008e							; GEM_22 equ SET_1_0
    132 U008e							; GEM_24 equ SET_1_0
    133 U008e
    134 U008e							; ; even on
    135 U008e							; GEM_00 equ SET_0_1
    136 U008e							; GEM_02 equ SET_0_1
    137 U008e							; GEM_04 equ SET_0_1
    138 U008e							; GEM_06 equ SET_0_1
    139 U008e							; GEM_08 equ SET_0_L
    140 U008e							; GEM_09 equ SET_1_0
    141 U008e							; GEM_11 equ SET_1_0
    142 U008e							; GEM_13 equ SET_1_0
    143 U008e							; GEM_15 equ SET_1_0
    144 U008e							; GEM_17 equ SET_1_R
    145 U008e							; GEM_18 equ SET_0_1
    146 U008e							; GEM_20 equ SET_0_1
    147 U008e							; GEM_22 equ SET_0_1
    148 U008e							; GEM_24 equ SET_0_1
    149 U008e
    150 U008e							; Colors
    151 U008e
    152 U008e		       00 42	   COL_BG     equ	$42
    153 U008e		       00 cc	   COL_EMERALD equ	$CC
    154 U008e		       00 cc	   COL_EMERALD_2 equ	$CC
    155 U008e
    156 U008e							; HMOVE values
    157 U008e
    158 U008e		       00 27	   EMERALD_MI_HMOVE_S equ	39
    159 U008e		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    160 U008e		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    161 U008e
    162 U008e							; Sprite details
    163 U008e
    164 U008e		       00 09	   SPRITE_HEIGHT equ	9
    165 U008e
    166 U008e
    167 U008e		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    168 U008e		       00 1c	   EMERALD_SP equ	GRP1
    169 U008e		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    170 U008e		       00 11	   EMERALD_SP_RESET equ	RESP1
    171 U008e		       00 13	   EMERALD_MI_RESET equ	RESM1
    172 U008e		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    173 U008e		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    174 U008e		       00 05	   EMERALD_COPIES equ	NUSIZ1
    175 U008e
    176 U008e		       00 1b	   JET_SP     equ	GRP0
    177 U008e		       00 10	   JET_SP_RESET equ	RESP0
    178 U008e		       00 20	   JET_SP_HMOVE equ	HMP0
    179 U008e		       00 06	   JET_SP_COLOR equ	COLUP0
    180 U008e
    181 U008e
    182 U008e							; Offset from the sprite label to the point
    183 U008e							; at which the sprite actually starts. This is the 0-padding
    184 U008e							; FRAME_OFFSET equ 53
    185 U008e
    186 U008e							; Spriteend is HEIGHT_OFFSET - YPos
    187 U008e		       00 c8	   HEIGHT_OFFSET equ	200
    188 U008e
    189 U008e							; Compared with YPos
    190 U008e		       00 3f	   FLOOR_OFFSET equ	63
    191 U008e		       00 c0	   CEILING_OFFSET equ	192
    192 U008e
    193 U008e							; YPos definite position
    194 U008e		       00 64	   YPosStart  equ	100
    195 U008e
    196 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    197 U008e
    198  10000 ????				       seg	Code
    199  10000 ????
    200  d000					      org	$D000
    201  d000					      rorg	$F000
    202  d000
    203  d000		       00	   BANK1      byte.b
    204  d001
    205  d200					      org	$D200
    206  d200					      rorg	$F200
    207  d200
    208  d200				   Bank1Start
    209  d200		       ad fa ff 	      lda	$FFFA
    210  d203		       ea		      nop
    211  d204		       ea		      nop
    212  d205		       ea		      nop
    213  d206
    214  d206							; Epilogue
    215  dffc					      org	$DFFC
    216  dffc					      rorg	$FFFC
    217  dffc		       00 f2		      .word.w	Bank1Start
    218  dffe		       00 f2		      .word.w	Bank1Start
    219  e000
    220  e000					      org	$E000
    221  e000					      rorg	$F000
    222  e000
    223  e000		       00	   BANK2      byte.b
    224  e001
    225  e200					      org	$E200
    226  e200					      rorg	$F200
    227  e200
    228  e200				   Bank2Start
    229  e200		       ad fa ff 	      lda	$FFFA
    230  e203		       ea		      nop
    231  e204		       ea		      nop
    232  e205		       ea		      nop
    233  e206
    234  e206							; Epilogue
    235  effc					      org	$EFFC
    236  effc					      rorg	$FFFC
    237  effc		       00 f2		      .word.w	Bank2Start
    238  effe		       00 f2		      .word.w	Bank2Start
    239  f000
    240  f000					      org	$F000
    241  f000					      rorg	$F000
    242  f000
    243  f000		       00	   BANK3      byte.b
    244  f001
    245  f200					      org	$F200
    246  f200					      rorg	$F200
    247  f200
    248  f200				   Start
    249  f200		       ad fa ff 	      lda	$FFFA
    250  f203		       ea		      nop
    251  f204		       ea		      nop
    252  f205		       ea		      nop
    253  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    255  f211		       a9 00		      lda	#0
    256  f213		       85 83		      sta	FrameCount
    257  f215
    258  f215							; P0 has three copies
    259  f215		       a9 13		      lda	#THREE_COPIES
    260  f217		       85 05		      sta	EMERALD_COPIES
    261  f219
    262  f219		       a9 00		      lda	#$00
    263  f21b		       85 09		      sta	COLUBK
    264  f21d		       a9 01		      lda	#%00000001
    265  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    266  f221
    267  f221							; Disable VDEL
    268  f221		       a9 00		      lda	#0
    269  f223		       85 25		      sta	VDELP0
    270  f225		       85 26		      sta	VDELP1
    271  f227
    272  f227
    273  f227							; Player 0
    274  f227		       a2 cc		      ldx	#COL_EMERALD
    275  f229		       86 07		      stx	EMERALD_SP_COLOR
    276  f22b
    277  f22b							; Player 1
    278  f22b		       a9 98		      lda	#$98
    279  f22d		       85 06		      sta	JET_SP_COLOR
    280  f22f		       a9 00		      lda	#$00
    281  f231		       85 1b		      sta	JET_SP
    282  f233
    283  f233							; Positions
    284  f233		       a9 64		      lda	#YPosStart
    285  f235		       85 89		      sta	YPos
    286  f237		       a9 37		      lda	#55
    287  f239		       85 86		      sta	XPos
    288  f23b		       a9 00		      lda	#0
    289  f23d		       85 87		      sta	Speed1
    290  f23f		       85 88		      sta	Speed2
    291  f241		       85 8a		      sta	YPos2
    292  f243
    293  f243				   BeginFrame
      0  f243					      VERTICAL_SYNC
      1  f243		       a9 0e		      lda	#%1110
      2  f245		       85 02	   .VSLP1     sta	WSYNC
      3  f247		       85 00		      sta	VSYNC
      4  f249		       4a		      lsr
      5  f24a		       d0 f9		      bne	.VSLP1
    295  f24c
      0  f24c					      TIMER_SETUP	37
      1  f24c				   .lines     SET	37
      2  f24c		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f24e		       85 02		      sta	WSYNC
      4  f250		       8d 96 02 	      sta	TIM64T
    297  f253
    298  f253							; Scanline counter
    299  f253		       a9 10		      lda	#ROW_COUNT
    300  f255		       85 82		      sta	LoopCount
    301  f257
    302  f257							; Frame counter
    303  f257		       e6 83		      inc	FrameCount
    304  f259
    305  f259							; Now the work stuff
    306  f259
    307  f259							; FRAMESWITCH
    308  f259		       a9 01		      lda	#01
    309  f25b		       25 83		      and	FrameCount
    310  f25d		       d0 14		      bne	CopyFrame2Kernel
    311  f25f				   CopyFrame1Kernel
    312  f25f
    313  f25f							; Copy: KERNEL 1
    314  f25f		       a0 2c		      ldy	#(kernel_1_end - kernel_1_start)-1
    315  f261				   .copy_loop
    316  f261		       b9 65 f4 	      lda	kernel_1_start,Y
    317  f264		       99 00 10 	      sta	$1000,Y
    318  f267		       88		      dey
    319  f268		       d0 f7		      bne	.copy_loop
    320  f26a		       ad 65 f4 	      lda	kernel_1_start
    321  f26d		       8d 00 10 	      sta	$1000
    322  f270		       4c 87 f2 	      jmp	CopyFrameNext
    323  f273
    324  f273				   CopyFrame2Kernel
    325  f273
    326  f273							; Copy: KERNEL 2
    327  f273		       a0 2c		      ldy	#(kernel_2_end - kernel_2_start)-1
    328  f275				   .copy_loop2
    329  f275		       b9 92 f4 	      lda	kernel_2_start,Y
    330  f278		       99 00 10 	      sta	$1000,Y
    331  f27b		       88		      dey
    332  f27c		       d0 f7		      bne	.copy_loop2
    333  f27e		       ad 92 f4 	      lda	kernel_2_start
    334  f281		       8d 00 10 	      sta	$1000
    335  f284		       4c 87 f2 	      jmp	CopyFrameNext
    336  f287
    337  f287				   CopyFrameNext
    338  f287							; Positioning
    339  f287		       85 02		      sta	WSYNC
      0  f289					      SLEEP	40
      1  f289				   .CYCLES    SET	40
      2  f289
      3  f289				  -	      IF	.CYCLES < 2
      4  f289				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f289				  -	      ERR
      6  f289					      ENDIF
      7  f289
      8  f289				  -	      IF	.CYCLES & 1
      9  f289				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f289				  -	      nop	0
     11  f289				  -	      ELSE
     12  f289				  -	      bit	VSYNC
     13  f289				  -	      ENDIF
     14  f289				  -.CYCLES    SET	.CYCLES - 3
     15  f289					      ENDIF
     16  f289
     17  f289					      REPEAT	.CYCLES / 2
     18  f289		       ea		      nop
     17  f289					      REPEND
     18  f28a		       ea		      nop
     17  f28a					      REPEND
     18  f28b		       ea		      nop
     17  f28b					      REPEND
     18  f28c		       ea		      nop
     17  f28c					      REPEND
     18  f28d		       ea		      nop
     17  f28d					      REPEND
     18  f28e		       ea		      nop
     17  f28e					      REPEND
     18  f28f		       ea		      nop
     17  f28f					      REPEND
     18  f290		       ea		      nop
     17  f290					      REPEND
     18  f291		       ea		      nop
     17  f291					      REPEND
     18  f292		       ea		      nop
     17  f292					      REPEND
     18  f293		       ea		      nop
     17  f293					      REPEND
     18  f294		       ea		      nop
     17  f294					      REPEND
     18  f295		       ea		      nop
     17  f295					      REPEND
     18  f296		       ea		      nop
     17  f296					      REPEND
     18  f297		       ea		      nop
     17  f297					      REPEND
     18  f298		       ea		      nop
     17  f298					      REPEND
     18  f299		       ea		      nop
     17  f299					      REPEND
     18  f29a		       ea		      nop
     17  f29a					      REPEND
     18  f29b		       ea		      nop
     17  f29b					      REPEND
     18  f29c		       ea		      nop
     19  f29d					      REPEND
    341  f29d		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    342  f29f		       85 02		      sta	WSYNC
    343  f2a1
    344  f2a1							; Misc
    345  f2a1		       a9 00		      lda	#00
    346  f2a3		       85 1e		      sta	EMERALD_MI_ENABLE
    347  f2a5
    348  f2a5							; Assign dervied SpriteEnd value
    349  f2a5		       a9 c8		      lda	#HEIGHT_OFFSET
    350  f2a7		       e5 89		      sbc	YPos
    351  f2a9		       85 85		      sta	SpriteEnd
    352  f2ab
    353  f2ab							; Move missile to starting position and fine-tune position
    354  f2ab							; TODO replace with an HMOVE macro
    355  f2ab		       85 02		      sta	WSYNC
      0  f2ad					      sleep	EMERALD_MI_HMOVE_S
      1  f2ad				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f2ad
      3  f2ad				  -	      IF	.CYCLES < 2
      4  f2ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ad				  -	      ERR
      6  f2ad					      ENDIF
      7  f2ad
      8  f2ad					      IF	.CYCLES & 1
      9  f2ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ad		       04 00		      nop	0
     11  f2af				  -	      ELSE
     12  f2af				  -	      bit	VSYNC
     13  f2af					      ENDIF
     14  f2af				   .CYCLES    SET	.CYCLES - 3
     15  f2af					      ENDIF
     16  f2af
     17  f2af					      REPEAT	.CYCLES / 2
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     19  f2c1					      REPEND
    357  f2c1		       85 13		      sta	EMERALD_MI_RESET
    358  f2c3
    359  f2c3							; Player 1
    360  f2c3		       a5 86		      lda	XPos
    361  f2c5		       a2 00		      ldx	#0
    362  f2c7		       20 2d f5 	      jsr	SetHorizPos
    363  f2ca
    364  f2ca
    365  f2ca							; Choose which hmove value to use
    366  f2ca							; FRAMESWITCH
    367  f2ca		       a9 01		      lda	#01
    368  f2cc		       25 83		      and	FrameCount
    369  f2ce		       d0 07		      bne	doframe2
    370  f2d0
    371  f2d0							; frame 1
    372  f2d0		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    373  f2d2		       85 23		      sta	EMERALD_MI_HMOVE
    374  f2d4		       4c db f2 	      jmp	doframe2after
    375  f2d7
    376  f2d7							; frame 2
    377  f2d7				   doframe2
    378  f2d7		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    379  f2d9		       85 23		      sta	EMERALD_MI_HMOVE
    380  f2db				   doframe2after
    381  f2db
      0  f2db					      TIMER_WAIT
      1  f2db				   .waittimer
      2  f2db		       ad 84 02 	      lda	INTIM
      3  f2de		       d0 fb		      bne	.waittimer
      0  f2e0					      TIMER_SETUP	192
      1  f2e0				   .lines     SET	192
      2  f2e0		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f2e2		       85 02		      sta	WSYNC
      4  f2e4		       8d 96 02 	      sta	TIM64T
    384  f2e7		       85 02		      sta	WSYNC	; ???
    385  f2e9
    386  f2e9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    387  f2e9
    388  f2e9							; Frame border top
    389  f2e9
    390  f2e9
    391  f2e9							; First HMOVE
    392  f2e9		       85 2a		      sta	HMOVE
    393  f2eb
    394  f2eb		       a9 00		      lda	#0
    395  f2ed		       85 08		      sta	COLUPF
    396  f2ef		       85 0e		      sta	PF1
    397  f2f1		       85 0f		      sta	PF2
    398  f2f3		       a9 34		      lda	#SIGNAL_LINE
    399  f2f5		       85 09		      sta	COLUBK
    400  f2f7
    401  f2f7		       85 02		      sta	WSYNC
    402  f2f9
    403  f2f9		       a9 00		      lda	#0
    404  f2fb		       85 09		      sta	COLUBK
    405  f2fd		       85 02		      sta	WSYNC
    406  f2ff
    407  f2ff							; Start top border
    408  f2ff				   border_top
    409  f2ff							; Make the playfield solid.
    410  f2ff		       a9 3f		      lda	#%00111111
    411  f301		       85 0e		      sta	PF1
    412  f303		       a9 ff		      lda	#%11111111
    413  f305		       85 0f		      sta	PF2
    414  f307
    415  f307		       a9 42		      lda	#COL_BG
    416  f309		       a0 00		      ldy	#0
    417  f30b
    418  f30b		       85 08		      sta	COLUPF
    419  f30d		       85 02		      sta	WSYNC
    420  f30f
    421  f30f		       84 08		      sty	COLUPF
    422  f311		       85 02		      sta	WSYNC
    423  f313
    424  f313		       85 08		      sta	COLUPF
    425  f315		       85 02		      sta	WSYNC
    426  f317
    427  f317		       85 02		      sta	WSYNC
    428  f319
    429  f319		       85 02		      sta	WSYNC
    430  f31b
    431  f31b		       84 08		      sty	COLUPF
    432  f31d		       85 02		      sta	WSYNC
    433  f31f
    434  f31f		       85 08		      sta	COLUPF
    435  f321		       85 02		      sta	WSYNC
    436  f323
    437  f323		       85 02		      sta	WSYNC
    438  f325
    439  f325				   PlayArea
    440  f325							; PF is now the playing area
    441  f325		       a9 00		      lda	#%00000000
    442  f327		       85 0d		      sta	PF0
    443  f329		       a9 20		      lda	#%00100000
    444  f32b		       85 0e		      sta	PF1
    445  f32d		       a9 00		      lda	#%00000000
    446  f32f		       85 0f		      sta	PF2
    447  f331
    448  f331
    449  f331							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    450  f331
    451  f331							; frame start
    452  f331
    453  f331
    454  f331
    455  f331
    456  f331							; MACRO for calculating next GRPx value
    457  f331
    458  f331					      MAC	jet_spritedata_calc
    459  f331					      lda	#SPRITE_HEIGHT
    460  f331					      dcp	SpriteEnd
    461  f331					      ldy	SpriteEnd
    462  f331
    463  f331							; 4c
    464  f331							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    465  f331					      lda	Frame0,Y
    466  f331							; 6c
    467  f331					      .byte	$b0, $01	;2c / 3c (taken)
    468  f331					      .byte	$2c	; 4c / 0c
    469  f331					      sta	JET_SP	; 0c / 3c
    470  f331
    471  f331					      ENDM
    472  f331
    473  f331
    474  f331							; Start the frame with a WSYNC.
    475  f331				   frame_start
      0  f331					      jet_spritedata_calc
      1  f331		       a9 09		      lda	#SPRITE_HEIGHT
      2  f333		       c7 85		      dcp	SpriteEnd
      3  f335		       a4 85		      ldy	SpriteEnd
      4  f337
      5  f337
      6  f337
      7  f337		       b9 00 f6 	      lda	Frame0,Y
      8  f33a
      9  f33a		       b0 01		      .byte.b	$b0, $01
     10  f33c		       2c		      .byte.b	$2c
     11  f33d		       85 1b		      sta	JET_SP
     12  f33f
    477  f33f		       85 02		      sta	WSYNC
    478  f341
    479  f341							; [row:1]
      0  f341					      jet_spritedata_calc
      1  f341		       a9 09		      lda	#SPRITE_HEIGHT
      2  f343		       c7 85		      dcp	SpriteEnd
      3  f345		       a4 85		      ldy	SpriteEnd
      4  f347
      5  f347
      6  f347
      7  f347		       b9 00 f6 	      lda	Frame0,Y
      8  f34a
      9  f34a		       b0 01		      .byte.b	$b0, $01
     10  f34c		       2c		      .byte.b	$2c
     11  f34d		       85 1b		      sta	JET_SP
     12  f34f
    481  f34f
    482  f34f		       a9 00		      lda	#0
    483  f351		       85 08		      sta	COLUPF
    484  f353
    485  f353							; Push jump table to the stack
    486  f353		       a9 f3		      lda	#>[frame_row_start - 1]
    487  f355		       48		      pha
    488  f356		       a9 93		      lda	#<[frame_row_start - 1]
    489  f358		       48		      pha
    490  f359		       a9 41		      lda	#%1000001
    491  f35b		       48		      pha
    492  f35c		       a9 10		      lda	#>[$1100 - 1]
    493  f35e		       48		      pha
    494  f35f		       a9 ff		      lda	#<[$1100 - 1]
    495  f361		       48		      pha
    496  f362		       a9 41		      lda	#%1000001
    497  f364		       48		      pha
    498  f365		       85 02		      sta	WSYNC
    499  f367
    500  f367							; [row:2]
      0  f367					      jet_spritedata_calc
      1  f367		       a9 09		      lda	#SPRITE_HEIGHT
      2  f369		       c7 85		      dcp	SpriteEnd
      3  f36b		       a4 85		      ldy	SpriteEnd
      4  f36d
      5  f36d
      6  f36d
      7  f36d		       b9 00 f6 	      lda	Frame0,Y
      8  f370
      9  f370		       b0 01		      .byte.b	$b0, $01
     10  f372		       2c		      .byte.b	$2c
     11  f373		       85 1b		      sta	JET_SP
     12  f375
    502  f375
    503  f375
    504  f375		       a9 42		      lda	#COL_BG
    505  f377		       85 08		      sta	COLUPF
    506  f379
    507  f379							; Prepare for the kernel.
    508  f379							; TODO this has to be EXACT
      0  f379					      sleep	43
      1  f379				   .CYCLES    SET	43
      2  f379
      3  f379				  -	      IF	.CYCLES < 2
      4  f379				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f379				  -	      ERR
      6  f379					      ENDIF
      7  f379
      8  f379					      IF	.CYCLES & 1
      9  f379					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f379		       04 00		      nop	0
     11  f37b				  -	      ELSE
     12  f37b				  -	      bit	VSYNC
     13  f37b					      ENDIF
     14  f37b				   .CYCLES    SET	.CYCLES - 3
     15  f37b					      ENDIF
     16  f37b
     17  f37b					      REPEAT	.CYCLES / 2
     18  f37b		       ea		      nop
     17  f37b					      REPEND
     18  f37c		       ea		      nop
     17  f37c					      REPEND
     18  f37d		       ea		      nop
     17  f37d					      REPEND
     18  f37e		       ea		      nop
     17  f37e					      REPEND
     18  f37f		       ea		      nop
     17  f37f					      REPEND
     18  f380		       ea		      nop
     17  f380					      REPEND
     18  f381		       ea		      nop
     17  f381					      REPEND
     18  f382		       ea		      nop
     17  f382					      REPEND
     18  f383		       ea		      nop
     17  f383					      REPEND
     18  f384		       ea		      nop
     17  f384					      REPEND
     18  f385		       ea		      nop
     17  f385					      REPEND
     18  f386		       ea		      nop
     17  f386					      REPEND
     18  f387		       ea		      nop
     17  f387					      REPEND
     18  f388		       ea		      nop
     17  f388					      REPEND
     18  f389		       ea		      nop
     17  f389					      REPEND
     18  f38a		       ea		      nop
     17  f38a					      REPEND
     18  f38b		       ea		      nop
     17  f38b					      REPEND
     18  f38c		       ea		      nop
     17  f38c					      REPEND
     18  f38d		       ea		      nop
     17  f38d					      REPEND
     18  f38e		       ea		      nop
     19  f38f					      REPEND
    510  f38f		       c6 85		      dec	SpriteEnd
    511  f391
    512  f391							; [row:3-4]
    513  f391							; Jump to the copied kernel.
    514  f391		       4c 00 11 	      jmp	KERNEL_START
    515  f394
    516  f394				   frame_row_start subroutine
    517  f394							; [row:5]
    518  f394							; Cleanup from the kernel.
    519  f394		       a9 00		      lda	#0
    520  f396		       85 1e		      sta	EMERALD_MI_ENABLE
    521  f398		       85 1c		      sta	EMERALD_SP
    522  f39a		       85 08		      sta	COLUPF
    523  f39c
    524  f39c		       85 02		      sta	WSYNC
    525  f39e
    526  f39e							; [row:6]
      0  f39e					      jet_spritedata_calc
      1  f39e		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3a0		       c7 85		      dcp	SpriteEnd
      3  f3a2		       a4 85		      ldy	SpriteEnd
      4  f3a4
      5  f3a4
      6  f3a4
      7  f3a4		       b9 00 f6 	      lda	Frame0,Y
      8  f3a7
      9  f3a7		       b0 01		      .byte.b	$b0, $01
     10  f3a9		       2c		      .byte.b	$2c
     11  f3aa		       85 1b		      sta	JET_SP
     12  f3ac
    528  f3ac
    529  f3ac		       a9 42		      lda	#COL_BG
    530  f3ae		       85 08		      sta	COLUPF
    531  f3b0
    532  f3b0							; FRAMESWITCH
    533  f3b0		       a9 01		      lda	#01
    534  f3b2		       25 83		      and	FrameCount
    535  f3b4		       d0 1b		      bne	loadframe2
    536  f3b6				   loadframe1
    537  f3b6							; Emerald byte setting
    538  f3b6		       a9 84		      lda	#SET_1_1
    539  f3b8		       85 8b		      sta	GEM_02_TARGET
    540  f3ba		       a9 84		      lda	#SET_1_1
    541  f3bc		       85 8b		      sta	GEM_02_TARGET
    542  f3be		       a9 84		      lda	#SET_1_1
    543  f3c0		       85 8b		      sta	GEM_02_TARGET
    544  f3c2		       a9 85		      lda	#SET_1_L
    545  f3c4		       85 8b		      sta	GEM_02_TARGET
    546  f3c6		       a9 84		      lda	#SET_1_1
    547  f3c8		       85 8b		      sta	GEM_02_TARGET
    548  f3ca		       a9 84		      lda	#SET_1_1
    549  f3cc		       85 8b		      sta	GEM_02_TARGET
    550  f3ce
    551  f3ce		       4c f0 f3 	      jmp	loadframeafter
    552  f3d1
    553  f3d1				   loadframe2
    554  f3d1							; Emerald byte setting
    555  f3d1		       a9 84		      lda	#SET_1_1
    556  f3d3		       85 8b		      sta	GEM_02_TARGET
    557  f3d5		       a9 84		      lda	#SET_1_1
    558  f3d7		       85 8b		      sta	GEM_02_TARGET
    559  f3d9		       a9 84		      lda	#SET_1_R
    560  f3db		       85 8b		      sta	GEM_02_TARGET
    561  f3dd		       a9 84		      lda	#SET_1_1
    562  f3df		       85 8b		      sta	GEM_02_TARGET
    563  f3e1		       a9 84		      lda	#SET_1_1
    564  f3e3		       85 8b		      sta	GEM_02_TARGET
    565  f3e5		       a9 84		      lda	#SET_1_1
    566  f3e7		       85 8b		      sta	GEM_02_TARGET
    567  f3e9		       a9 84		      lda	#SET_1_1
    568  f3eb		       85 8b		      sta	GEM_02_TARGET
    569  f3ed
    570  f3ed		       4c f0 f3 	      jmp	loadframeafter
    571  f3f0
    572  f3f0				   loadframeafter
    573  f3f0		       85 02		      sta	WSYNC
    574  f3f2
    575  f3f2							; [row:7]
      0  f3f2					      jet_spritedata_calc
      1  f3f2		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3f4		       c7 85		      dcp	SpriteEnd
      3  f3f6		       a4 85		      ldy	SpriteEnd
      4  f3f8
      5  f3f8
      6  f3f8
      7  f3f8		       b9 00 f6 	      lda	Frame0,Y
      8  f3fb
      9  f3fb		       b0 01		      .byte.b	$b0, $01
     10  f3fd		       2c		      .byte.b	$2c
     11  f3fe		       85 1b		      sta	JET_SP
     12  f400
    577  f400		       85 02		      sta	WSYNC
    578  f402
    579  f402							; [row:8]
    580  f402
    581  f402							; next line, repeat until <0
    582  f402							; This performs a long jump to frame_start.
    583  f402		       c6 82		      dec	LoopCount
    584  f404		       30 03		      bmi	frame_bottom
    585  f406		       4c 31 f3 	      jmp	frame_start
    586  f409
    587  f409							; reset the background for bottom of playfield
    588  f409				   frame_bottom
    589  f409							;sta WSYNC
    590  f409
    591  f409							; Make the playfield solid.
    592  f409		       a9 3f		      lda	#%00111111
    593  f40b		       85 0e		      sta	PF1
    594  f40d		       a9 ff		      lda	#%11111111
    595  f40f		       85 0f		      sta	PF2
    596  f411
    597  f411							; Clear all sprites.
    598  f411		       a9 00		      lda	#0
    599  f413		       85 1c		      sta	EMERALD_SP
    600  f415		       85 1b		      sta	JET_SP
    601  f417		       85 1e		      sta	EMERALD_MI_ENABLE
    602  f419
    603  f419		       a9 42		      lda	#COL_BG
    604  f41b		       a0 00		      ldy	#0
    605  f41d		       85 02		      sta	WSYNC
    606  f41f
    607  f41f		       84 08		      sty	COLUPF
    608  f421		       85 02		      sta	WSYNC
    609  f423
    610  f423		       85 08		      sta	COLUPF
    611  f425		       85 02		      sta	WSYNC
    612  f427
    613  f427		       85 02		      sta	WSYNC
    614  f429
    615  f429		       85 02		      sta	WSYNC
    616  f42b
    617  f42b		       84 08		      sty	COLUPF
    618  f42d		       85 02		      sta	WSYNC
    619  f42f
    620  f42f		       85 08		      sta	COLUPF
    621  f431		       85 02		      sta	WSYNC
    622  f433		       85 02		      sta	WSYNC
    623  f435
    624  f435							; Blank all background colors.
    625  f435				   frame_end
    626  f435		       a9 00		      lda	#0
    627  f437		       85 08		      sta	COLUPF
    628  f439		       85 0f		      sta	PF2
    629  f43b		       85 0e		      sta	PF1
    630  f43d		       85 1c		      sta	EMERALD_SP
    631  f43f
    632  f43f							; Guide lines (2x)
    633  f43f		       a9 34		      lda	#SIGNAL_LINE
    634  f441		       85 09		      sta	COLUBK
    635  f443		       85 02		      sta	WSYNC
    636  f445		       a9 00		      lda	#$00
    637  f447		       85 09		      sta	COLUBK
    638  f449		       85 02		      sta	WSYNC
    639  f44b
      0  f44b					      TIMER_WAIT
      1  f44b				   .waittimer
      2  f44b		       ad 84 02 	      lda	INTIM
      3  f44e		       d0 fb		      bne	.waittimer
      0  f450					      TIMER_SETUP	30
      1  f450				   .lines     SET	30
      2  f450		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f452		       85 02		      sta	WSYNC
      4  f454		       8d 96 02 	      sta	TIM64T
    642  f457
    643  f457		       20 bf f4 	      jsr	MoveJoystick
    644  f45a		       20 f6 f4 	      jsr	SpeedCalculation
    645  f45d
      0  f45d					      TIMER_WAIT
      1  f45d				   .waittimer
      2  f45d		       ad 84 02 	      lda	INTIM
      3  f460		       d0 fb		      bne	.waittimer
    647  f462		       4c 43 f2 	      jmp	BeginFrame
    648  f465
    649  f465
    650  f465							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    651  f465
    652  f465							; kernels
    653  f465
    654  f465
    655  f465							; Important cycles for the kernels:
    656  f465							; left border: 29, right border: 64
    657  f465
    658  f465							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    659  f465
    660  f465							; KERNEL 1
    661  f465
    662  f465							; Emerald line macro (1, 2, ...)
    663  f465
    664  f465				   kernel_1_start
    665  f465		       c6 85		      dec	SpriteEnd
    666  f467		       68		      pla
    667  f468		       8d 1b 00 	      sta.w	GRP0
    668  f46b
    669  f46b		       a9 60		      lda	#EMR1
    670  f46d		       a2 06		      ldx	#EMR2
    671  f46f		       a0 66		      ldy	#EMR3
    672  f471		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    673  f473
    674  f473							; 22
    675  f473		       85 11		      sta	EMERALD_SP_RESET
      0  f475					      sleep	6
      1  f475				   .CYCLES    SET	6
      2  f475
      3  f475				  -	      IF	.CYCLES < 2
      4  f475				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f475				  -	      ERR
      6  f475					      ENDIF
      7  f475
      8  f475				  -	      IF	.CYCLES & 1
      9  f475				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f475				  -	      nop	0
     11  f475				  -	      ELSE
     12  f475				  -	      bit	VSYNC
     13  f475				  -	      ENDIF
     14  f475				  -.CYCLES    SET	.CYCLES - 3
     15  f475					      ENDIF
     16  f475
     17  f475					      REPEAT	.CYCLES / 2
     18  f475		       ea		      nop
     17  f475					      REPEND
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     19  f478					      REPEND
    677  f478		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    678  f47a		       85 11		      sta	EMERALD_SP_RESET
    679  f47c		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f47e					      sleep	3
      1  f47e				   .CYCLES    SET	3
      2  f47e
      3  f47e				  -	      IF	.CYCLES < 2
      4  f47e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f47e				  -	      ERR
      6  f47e					      ENDIF
      7  f47e
      8  f47e					      IF	.CYCLES & 1
      9  f47e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f47e		       04 00		      nop	0
     11  f480				  -	      ELSE
     12  f480				  -	      bit	VSYNC
     13  f480					      ENDIF
     14  f480				   .CYCLES    SET	.CYCLES - 3
     15  f480					      ENDIF
     16  f480
     17  f480				  -	      REPEAT	.CYCLES / 2
     18  f480				  -	      nop
     19  f480					      REPEND
    681  f480		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    682  f482		       85 11		      sta	EMERALD_SP_RESET
    683  f484		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    684  f486		       84 1c		      .byte.b	GEM_18, EMERALD_SP
      0  f488					      sleep	3
      1  f488				   .CYCLES    SET	3
      2  f488
      3  f488				  -	      IF	.CYCLES < 2
      4  f488				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f488				  -	      ERR
      6  f488					      ENDIF
      7  f488
      8  f488					      IF	.CYCLES & 1
      9  f488					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f488		       04 00		      nop	0
     11  f48a				  -	      ELSE
     12  f48a				  -	      bit	VSYNC
     13  f48a					      ENDIF
     14  f48a				   .CYCLES    SET	.CYCLES - 3
     15  f48a					      ENDIF
     16  f48a
     17  f48a				  -	      REPEAT	.CYCLES / 2
     18  f48a				  -	      nop
     19  f48a					      REPEND
    686  f48a		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    687  f48c		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    688  f48e
    689  f48e							; cycle 64 (start of right border)
      0  f48e					      sleep	6
      1  f48e				   .CYCLES    SET	6
      2  f48e
      3  f48e				  -	      IF	.CYCLES < 2
      4  f48e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f48e				  -	      ERR
      6  f48e					      ENDIF
      7  f48e
      8  f48e				  -	      IF	.CYCLES & 1
      9  f48e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f48e				  -	      nop	0
     11  f48e				  -	      ELSE
     12  f48e				  -	      bit	VSYNC
     13  f48e				  -	      ENDIF
     14  f48e				  -.CYCLES    SET	.CYCLES - 3
     15  f48e					      ENDIF
     16  f48e
     17  f48e					      REPEAT	.CYCLES / 2
     18  f48e		       ea		      nop
     17  f48e					      REPEND
     18  f48f		       ea		      nop
     17  f48f					      REPEND
     18  f490		       ea		      nop
     19  f491					      REPEND
    691  f491		       60		      rts
    692  f492				   kernel_1_end
    693  f492
    694  f492							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    695  f492
    696  f492							; KERNEL 2
    697  f492
    698  f492							; Emerald line macro (3, 4, ...)
    699  f492
    700  f492				   kernel_2_start
    701  f492							; Enable missile (using excessive lda instructions)
    702  f492		       a9 02		      lda	#02
    703  f494		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    704  f496
    705  f496		       c6 85		      dec	SpriteEnd
    706  f498		       68		      pla
    707  f499		       8d 1b 00 	      sta.w	GRP0
    708  f49c							; sleep 4
    709  f49c							; ldy SpriteEnd
    710  f49c							; lda Frame0,Y
    711  f49c							; sta JET_SP
    712  f49c
    713  f49c							; moved: lda #T1
    714  f49c		       a2 0c		      ldx	#T2
    715  f49e		       a0 cc		      ldy	#T3
    716  f4a0		       84 1c		      .byte.b	GEM_02, EMERALD_SP
    717  f4a2
    718  f4a2							; cycle 25
    719  f4a2		       85 11		      sta	EMERALD_SP_RESET
    720  f4a4		       a9 c0		      lda	#T1	; movable
      0  f4a6					      sleep	4
      1  f4a6				   .CYCLES    SET	4
      2  f4a6
      3  f4a6				  -	      IF	.CYCLES < 2
      4  f4a6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4a6				  -	      ERR
      6  f4a6					      ENDIF
      7  f4a6
      8  f4a6				  -	      IF	.CYCLES & 1
      9  f4a6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4a6				  -	      nop	0
     11  f4a6				  -	      ELSE
     12  f4a6				  -	      bit	VSYNC
     13  f4a6				  -	      ENDIF
     14  f4a6				  -.CYCLES    SET	.CYCLES - 3
     15  f4a6					      ENDIF
     16  f4a6
     17  f4a6					      REPEAT	.CYCLES / 2
     18  f4a6		       ea		      nop
     17  f4a6					      REPEND
     18  f4a7		       ea		      nop
     19  f4a8					      REPEND
    722  f4a8		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    723  f4aa		       85 11		      sta	EMERALD_SP_RESET
    724  f4ac		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    725  f4ae							; stx EMERALD_MI_ENABLE ; stx disables it
      0  f4ae					      sleep	3
      1  f4ae				   .CYCLES    SET	3
      2  f4ae
      3  f4ae				  -	      IF	.CYCLES < 2
      4  f4ae				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4ae				  -	      ERR
      6  f4ae					      ENDIF
      7  f4ae
      8  f4ae					      IF	.CYCLES & 1
      9  f4ae					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4ae		       04 00		      nop	0
     11  f4b0				  -	      ELSE
     12  f4b0				  -	      bit	VSYNC
     13  f4b0					      ENDIF
     14  f4b0				   .CYCLES    SET	.CYCLES - 3
     15  f4b0					      ENDIF
     16  f4b0
     17  f4b0				  -	      REPEAT	.CYCLES / 2
     18  f4b0				  -	      nop
     19  f4b0					      REPEND
    727  f4b0		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    728  f4b2		       85 11		      sta	EMERALD_SP_RESET
    729  f4b4		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    730  f4b6		       84 1c		      .byte.b	GEM_24, EMERALD_SP
      0  f4b8					      sleep	6
      1  f4b8				   .CYCLES    SET	6
      2  f4b8
      3  f4b8				  -	      IF	.CYCLES < 2
      4  f4b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4b8				  -	      ERR
      6  f4b8					      ENDIF
      7  f4b8
      8  f4b8				  -	      IF	.CYCLES & 1
      9  f4b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4b8				  -	      nop	0
     11  f4b8				  -	      ELSE
     12  f4b8				  -	      bit	VSYNC
     13  f4b8				  -	      ENDIF
     14  f4b8				  -.CYCLES    SET	.CYCLES - 3
     15  f4b8					      ENDIF
     16  f4b8
     17  f4b8					      REPEAT	.CYCLES / 2
     18  f4b8		       ea		      nop
     17  f4b8					      REPEND
     18  f4b9		       ea		      nop
     17  f4b9					      REPEND
     18  f4ba		       ea		      nop
     19  f4bb					      REPEND
    732  f4bb
    733  f4bb							; cycle 64 (start of right border)
      0  f4bb					      sleep	6
      1  f4bb				   .CYCLES    SET	6
      2  f4bb
      3  f4bb				  -	      IF	.CYCLES < 2
      4  f4bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4bb				  -	      ERR
      6  f4bb					      ENDIF
      7  f4bb
      8  f4bb				  -	      IF	.CYCLES & 1
      9  f4bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4bb				  -	      nop	0
     11  f4bb				  -	      ELSE
     12  f4bb				  -	      bit	VSYNC
     13  f4bb				  -	      ENDIF
     14  f4bb				  -.CYCLES    SET	.CYCLES - 3
     15  f4bb					      ENDIF
     16  f4bb
     17  f4bb					      REPEAT	.CYCLES / 2
     18  f4bb		       ea		      nop
     17  f4bb					      REPEND
     18  f4bc		       ea		      nop
     17  f4bc					      REPEND
     18  f4bd		       ea		      nop
     19  f4be					      REPEND
    735  f4be		       60		      rts
    736  f4bf				   kernel_2_end
    737  f4bf
    738  f4bf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    739  f4bf
    740  f4bf							; SUBROUTINE
    741  f4bf							; Read joystick movement and apply to object 0
    742  f4bf				   MoveJoystick
    743  f4bf							; Move vertically
    744  f4bf							; (up and down are actually reversed since ypos starts at bottom)
    745  f4bf							;     ldx YPos
    746  f4bf		       a9 10		      lda	#%00010000	;Up?
    747  f4c1		       2c 80 02 	      bit	SWCHA
    748  f4c4		       d0 0d		      bne	SkipMoveUp
    749  f4c6
    750  f4c6		       18		      clc
    751  f4c7		       a5 88		      lda	Speed2
    752  f4c9		       69 0c		      adc	#12
    753  f4cb		       85 88		      sta	Speed2
    754  f4cd		       a5 87		      lda	Speed1
    755  f4cf		       69 00		      adc	#00
    756  f4d1		       85 87		      sta	Speed1
    757  f4d3
    758  f4d3				   SkipMoveUp
    759  f4d3		       a6 86		      ldx	XPos
    760  f4d5
    761  f4d5							; Only check left/right on odd frames;
    762  f4d5							; TODO make this just a fractional speed
    763  f4d5							; rather than dropping frames
    764  f4d5		       a9 01		      lda	#01
    765  f4d7		       25 83		      and	FrameCount
    766  f4d9		       d0 18		      bne	SkipMoveRight
    767  f4db
    768  f4db
    769  f4db							; Move horizontally
    770  f4db		       a9 40		      lda	#%01000000	;Left?
    771  f4dd		       2c 80 02 	      bit	SWCHA
    772  f4e0		       d0 05		      bne	SkipMoveLeft
    773  f4e2		       e0 1d		      cpx	#29
    774  f4e4		       90 01		      bcc	SkipMoveLeft
    775  f4e6		       ca		      dex
    776  f4e7
    777  f4e7							; Reflect
    778  f4e7							;     lda #$ff
    779  f4e7							;     sta REFP0
    780  f4e7				   SkipMoveLeft
    781  f4e7		       a9 80		      lda	#%10000000	;Right?
    782  f4e9		       2c 80 02 	      bit	SWCHA
    783  f4ec		       d0 05		      bne	SkipMoveRight
    784  f4ee		       e0 80		      cpx	#128
    785  f4f0		       b0 01		      bcs	SkipMoveRight
    786  f4f2		       e8		      inx
    787  f4f3
    788  f4f3							; Reflect
    789  f4f3							;     lda #$0
    790  f4f3							;     sta REFP0
    791  f4f3				   SkipMoveRight
    792  f4f3		       86 86		      stx	XPos
    793  f4f5		       60		      rts
    794  f4f6
    795  f4f6
    796  f4f6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    797  f4f6
    798  f4f6
    799  f4f6				   SpeedCalculation
    800  f4f6		       38		      sec
    801  f4f7		       a5 88		      lda	Speed2
    802  f4f9		       e9 07		      sbc	#7
    803  f4fb		       85 88		      sta	Speed2
    804  f4fd		       a5 87		      lda	Speed1
    805  f4ff		       e9 00		      sbc	#0
    806  f501		       85 87		      sta	Speed1
    807  f503
    808  f503		       18		      clc
    809  f504		       a5 8a		      lda	YPos2
    810  f506		       65 88		      adc	Speed2
    811  f508		       85 8a		      sta	YPos2
    812  f50a		       a5 89		      lda	YPos
    813  f50c		       65 87		      adc	Speed1
    814  f50e		       85 89		      sta	YPos
    815  f510
    816  f510		       c9 3f		      cmp	#FLOOR_OFFSET
    817  f512		       b0 0a		      bcs	NewThing2
    818  f514
    819  f514							; Reset to floor
    820  f514		       a9 3f		      lda	#FLOOR_OFFSET
    821  f516		       85 89		      sta	YPos
    822  f518		       a9 00		      lda	#0
    823  f51a		       85 87		      sta	Speed1
    824  f51c		       85 88		      sta	Speed2
    825  f51e				   NewThing2
    826  f51e
    827  f51e		       c9 c0		      cmp	#CEILING_OFFSET
    828  f520		       90 0a		      bcc	.next
    829  f522
    830  f522							; Reset to ceiling
    831  f522		       a9 c0		      lda	#CEILING_OFFSET
    832  f524		       85 89		      sta	YPos
    833  f526		       a9 00		      lda	#0
    834  f528		       85 87		      sta	Speed1
    835  f52a		       85 88		      sta	Speed2
    836  f52c				   .next
    837  f52c
    838  f52c		       60		      rts
    839  f52d
    840  f52d
    841  f52d
    842  f52d							; Subroutine
    843  f52d				   SetHorizPos
    844  f52d		       85 02		      sta	WSYNC	; start a new line
    845  f52f		       24 00		      bit	0	; waste 3 cycles
    846  f531		       38		      sec		; set carry flag
    847  f532				   DivideLoop
    848  f532		       e9 0f		      sbc	#15	; subtract 15
    849  f534		       b0 fc		      bcs	DivideLoop	; branch until negative
    850  f536		       49 07		      eor	#7	; calculate fine offset
    851  f538		       0a		      asl
    852  f539		       0a		      asl
    853  f53a		       0a		      asl
    854  f53b		       0a		      asl
    855  f53c		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    856  f53e		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    857  f540		       60		      rts		; return to caller
    858  f541
    859  f541
    860  f541
    861  f600		       00 00 00 00*	      align	256
    862  f600
    863  f600							; Bitmap data for character "standing" position
    864  f600							; Comical amount of 0's for now to simplify sprite rendering
    865  f600
    866  f600							; Y can be from:
    867  f600							;     SPRITE_HEIGHT to (8*ROW_COUNT)
    868  f600							; SpriteEnd: 8..128
    869  f600							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
    870  f600				   Frame0
    871  f600		       00		      .byte.b	#%00000000
    872  f601		       60		      .byte.b	#%01100000
    873  f602		       60		      .byte.b	#%01100000
    874  f603		       60		      .byte.b	#%01100000
    875  f604		       c0		      .byte.b	#%11000000
    876  f605		       c0		      .byte.b	#%11000000
    877  f606		       f0		      .byte.b	#%11110000
    878  f607		       c0		      .byte.b	#%11000000
    879  f608		       c0		      .byte.b	#%11000000
    880  f609		       00		      .byte.b	#%00000000
    881  f60a
    882  f60a
    883  f60a							; Epilogue
    884  fffc					      org	$fffc
    885  fffc		       00 f2		      .word.w	Start
    886  fffe		       00 f2		      .word.w	Start
