------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_var
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_var_sty
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_if
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_write_imm
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_write_var
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_write_opcode
     18  10000 ????				       endm
     19  10000 ????				       mac	nibble_else
     20  10000 ????				       endm
     21  10000 ????				       mac	nibble_end_if
     22  10000 ????				       endm
     23  10000 ????				       mac	nibble_end_kernel
     24  10000 ????				       seg	CodeBank3
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     28  10000 ????				       mac	assert_runtime
     29  10000 ????			    .COND      SET	{1}
     30  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     31  10000 ????				       endm
     32  10000 ????
     33  10000 ????
     34  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     35  10000 ????				       mac	assert_runtime_kernel
     36  10000 ????			    .KERNEL    SET	{1}
     37  10000 ????			    .COND      SET	{2}
     38  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     39  10000 ????				       endm
     40  10000 ????
     41  10000 ????						; Static assertions for size
     42  10000 ????				       mac	assert_size
     43  10000 ????			    .STARTA    SET	{1}
     44  10000 ????			    .ENDA      SET	{2}
     45  10000 ????			    .LEN       SET	{3}
     46  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     47  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     48  10000 ????				       err
     49  10000 ????				       endif
     50  10000 ????				       endm
     51  10000 ????				       mac	assert_size_exact
     52  10000 ????			    .STARTA    SET	{1}
     53  10000 ????			    .ENDA      SET	{2}
     54  10000 ????			    .LEN       SET	{3}
     55  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     56  10000 ????				       echo	""
     57  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     58  10000 ????				       err
     59  10000 ????				       endif
     60  10000 ????				       endm
     61  10000 ????
     62  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     66  0000 ????
     67  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	CompileFlags
      2 U0000 ????
      3 U0000 ????	       00 01	   ONLY_KERNEL_A =	1
      4 U0000 ????						; ONLY_KERNEL_B = 1
      5 U0000 ????
      6 U0000 ????
      7 U0000 ????				      seg.u	Defines
      8 U0000 ????
      9 U0000 ????	       00 10	   ROW_COUNT  =	16
     10 U0000 ????	       00 02	   SIGNAL_LINE =	$02
     11 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
     12 U0000 ????
     13 U0000 ????						; RAM+ memory map
     14 U0000 ????
     15 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     16 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     17 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ_ID =	CBSRAM_KERNEL_READ
     18 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     19 U0000 ????	       f1 40	   CBSRAM_KERNEL_READ_END =	[CBSRAM_KERNEL_READ + $40]
     20 U0000 ????
     21 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     22 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     23 U0000 ????
     24 U0000 ????	       f0 80	   CBSRAM_NIBBLE_WRITE =	$f080
     25 U0000 ????	       f1 80	   CBSRAM_NIBBLE_READ =	$f180
     26 U0000 ????
     27 U0000 ????
     28 U0000 ????						; NUSIZ values
     29 U0000 ????
     30 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     31 U0000 ????
     32 U0000 ????
     33 U0000 ????						; Colors
     34 U0000 ????
     35 U0000 ????	       00 42	   COL_BG     =	$42
     36 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     37 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     38 U0000 ????
     39 U0000 ????
     40 U0000 ????						; HMOVE values for missiles
     41 U0000 ????
     42 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     43 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     44 U0000 ????
     45 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     46 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     47 U0000 ????
     48 U0000 ????						; Missile values when 2A=RST
     49 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     50 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     51 U0000 ????
     52 U0000 ????
     53 U0000 ????						; Sprite details
     54 U0000 ????
     55 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     56 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     57 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     58 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     59 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     60 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     61 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     62 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     63 U0000 ????
     64 U0000 ????	       00 1b	   JET_SP     =	GRP0
     65 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     66 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     67 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     68 U0000 ????
     69 U0000 ????
     70 U0000 ????						; Game dimensionsn
     71 U0000 ????
     72 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     73 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     74 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     75 U0000 ????
     76 U0000 ????						; Compared with YPos
     77 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     78 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     79 U0000 ????
     80 U0000 ????						; Starting player position
     81 U0000 ????	       00 48	   YPosStart  =	72
     82 U0000 ????	       00 58	   XPosStart  =	88
     83 U0000 ????
     84 U0000 ????						; Top left corner
     85 U0000 ????						; YPosStart equ 190
     86 U0000 ????						; XPosStart equ 28
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00f6 ????				      seg.u	Variables
      2 U00f6 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00 00 00 00*coolest_level ds	$3f
      8 U00c0
      9 U00c0					      align	16
     10 U00c0
     11 U00c0		       00 c0	   NIBBLE_VAR_START =	.
     12 U00c0
     13 U00c0							; Nibble (16 bytes)
     14 U00c0		       00	   NibbleVar1 byte.b
     15 U00c1		       00	   NibbleVar2 byte.b
     16 U00c2		       00	   NibbleGemini1 byte.b
     17 U00c3		       00	   NibbleGemini1Reg byte.b
     18 U00c4		       00	   NibbleGemini2 byte.b
     19 U00c5		       00	   NibbleGemini2Reg byte.b
     20 U00c6		       00	   NibbleGemini3 byte.b
     21 U00c7		       00	   NibbleGemini3Reg byte.b
     22 U00c8		       00	   NibbleGemini4 byte.b
     23 U00c9		       00	   NibbleMissile byte.b
     24 U00ca		       00	   NibbleVdel1 byte.b
     25 U00cb		       00	   NibbleGrp0 byte.b
     26 U00cc		       00	   NibbleX    byte.b
     27 U00cd		       00	   NibbleY    byte.b
     28 U00ce		       00	   NibblePhp  byte.b
     29 U00cf		       00	   NibblePs   byte.b
     30 U00d0
     31 U00d0		       00 d0	   NIBBLE_VAR_END =	.
     32 U00d0
     33 U00d0					      align	16
     34 U00d0
     35 U00d0							; Misc Nibble support
     36 U00d0		       00	   RamKernelGrp0 byte.b
     37 U00d1		       00	   BuildKernelRST byte.b
     38 U00d2
     39 U00d2		       00	   Temp       byte.b
     40 U00d3		       00	   Temp2      byte.b
     41 U00d4
     42 U00d4							; Counters
     43 U00d4		       00	   LoopCount  byte.b
     44 U00d5		       00	   FrameCount byte.b
     45 U00d6
     46 U00d6		       00	   SpriteEnd  byte.b
     47 U00d7		       00	   XPos       byte.b		; X position of player sprite
     48 U00d8
     49 U00d8
     50 U00d8		       00	   Speed1     byte.b
     51 U00d9		       00	   Speed2     byte.b
     52 U00da
     53 U00da		       00	   YPos       byte.b		; Y position of player sprite
     54 U00db		       00	   YPos2      byte.b
     55 U00dc
     56 U00dc		       00	   ROW_DEMO_INDEX byte.b
     57 U00dd
     58 U00dd		       00	   RamNibbleTemp byte.b
     59 U00de		       00	   RamZeroByte byte.b
     60 U00df		       00	   RamLowerSixByte byte.b
     61 U00e0		       00	   RamFFByte  byte.b
     62 U00e1		       00	   RamStackBkp byte.b
     63 U00e2		       00	   RamPF1Value byte.b
     64 U00e3
     65 U00e3		       00	   RamRowJetpackIndex byte.b		; sprite counter
     66 U00e4
     67 U00e4		       00	   level_for_game byte.b
     68 U00e5		       00		      byte.b
     69 U00e6		       00		      byte.b
     70 U00e7		       00		      byte.b
     71 U00e8
     72 U00e8		       00	   DO_MISS_A  byte.b
     73 U00e9		       00	   DO_MISS_B  byte.b
     74 U00ea		       00	   DO_GEMS_A  byte.b
     75 U00eb		       00		      byte.b
     76 U00ec		       00		      byte.b
     77 U00ed		       00		      byte.b
     78 U00ee		       00		      byte.b
     79 U00ef		       00		      byte.b
     80 U00f0		       00	   DO_GEMS_B  byte.b
     81 U00f1		       00		      byte.b
     82 U00f2		       00		      byte.b
     83 U00f3		       00		      byte.b
     84 U00f4		       00		      byte.b
     85 U00f5		       00		      byte.b
------- FILE main.s
     70 U00f6
     71 U00f6							; Bank 1
     72  e000 ????				      seg	CodeBank1
     73  d000					      org	$D000
     74  d000					      rorg	$F000
     75  d000		       00	   BANK1      byte.b
     76  d200					      org	$d200
     77  d200					      rorg	$d200
     78  d200				   Bank1Start
     79  d200		       ad fa ff 	      lda	$fffa
     80  d203		       ea		      nop
     81  d204		       ea		      nop
     82  d205		       ea		      nop
     83  d206
     84  dffc					      org	$dffc
     85  dffc					      rorg	$fffc
     86  dffc		       00 d2		      .word.w	Bank1Start
     87  dffe		       00 d2		      .word.w	Bank1Start
     88  e000
     89  e000							; Bank 2
     90  f000 ????				      seg	CodeBank2
     91  e000					      org	$E000
     92  e000					      rorg	$F000
     93  e000		       00	   BANK2      byte.b
     94  e200					      org	$e200
     95  e200					      rorg	$f200
     96  e200				   Bank2Start
     97  e200		       ad fa ff 	      lda	$fffa
     98  e203		       ea		      nop
     99  e204		       ea		      nop
    100  e205		       ea		      nop
    101  e206
    102  effc					      org	$effc
    103  effc					      rorg	$fffc
    104  effc		       00 f2		      .word.w	Bank2Start
    105  effe		       00 f2		      .word.w	Bank2Start
    106  f000
    107  f000							; Bank 3
    108  10000 ????				       seg	CodeBank3
    109  f000					      org	$F000
    110  f000					      rorg	$F000
    111  f000		       00	   BANK3      byte.b
    112  f200					      org	$f200
    113  f200					      rorg	$f200
    114  f200				   Bank3Start
    115  f200		       ad fa ff 	      lda	$fffa
    116  f203		       ea		      nop
    117  f204		       ea		      nop
    118  f205		       ea		      nop
    119  f206		       4c 09 f2 	      jmp	Start
    120  f209
    121  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 d5		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 da		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 d7		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 d8		      sta	Speed1
     48  f243		       85 d9		      sta	Speed2
     49  f245		       85 db		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 dc		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 de		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 df		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 e0		      sta	RamFFByte
     61  f257
     62  f257							; Setup level.
     63  f257		       20 da fa 	      jsr	game_state_setup
     64  f25a
     65  f25a							; Start with vertical sync (to reset frame)
     66  f25a		       4c 19 f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f25d					      include	"kernel_loader.s"
      1  f25d							; Copies the gem kernels to RAM
      2  f25d
      3  f25d							; Copy Kernel A to CBSRAM
      4  f25d				   LoadKernelA subroutine
      5  f25d		       a0 37		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f25f				   .loop
      7  f25f		       b9 00 fe 	      lda	kernel_1_start,Y
      8  f262		       99 00 10 	      sta	$1000,Y
      9  f265		       88		      dey
     10  f266		       d0 f7		      bne	.loop
     11  f268		       ad 00 fe 	      lda	kernel_1_start
     12  f26b		       8d 00 10 	      sta	$1000
     13  f26e		       60		      rts
     14  f26f
     15  f26f							; Copy Kernel B to CBSRAM
     16  f26f				   LoadKernelB subroutine
     17  f26f		       a0 37		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f271				   .loop
     19  f271		       b9 38 fe 	      lda	kernel_2_start,Y
     20  f274		       99 00 10 	      sta	$1000,Y
     21  f277		       88		      dey
     22  f278		       d0 f7		      bne	.loop
     23  f27a		       ad 38 fe 	      lda	kernel_2_start
     24  f27d		       8d 00 10 	      sta	$1000
     25  f280		       60		      rts
------- FILE main.s
------- FILE nibble_build.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_build.s"
      1  f281					      MAC	nibble_gem_kernel_a_1_build
      2  f281					      lda	#0
      3  f281							; NIBBLE_VAR NibbleGemini4
      4  f281							; NIBBLE_VAR NibbleMissile
      5  f281							; NIBBLE_VAR NibbleVdel1
      6  f281					      ldy	#SENTINEL
      7  f281					      sty	BuildKernelRST
      8  f281					      sty	NibbleX
      9  f281					      sty	NibbleY
     10  f281							; Gemini 1A
     11  f281				   .K_1A
     12  f281					      ldy	[DO_GEMS_A + 0]
     13  f281					      jsr	KernelA_GenReset
     14  f281				   .if_1
     15  f281					      bne	.else_1
     16  f281					      sec
     17  f281					      rol
     18  f281							; Special: Encoding RST0
     19  f281							; Rewrite lda RamKernelPF1 to be #immediate
     20  f281					      ldy	#BC_LDA_IMM
     21  f281					      sty	[KernelA_B - $100]
     22  f281					      ldy	#%10100000
     23  f281					      sty	[KernelA_B - $100 + 1]
     24  f281							; Store 1A in GRP0
     25  f281					      ldy	[DO_GEMS_A + 1]
     26  f281					      sty	NibbleGrp0
     27  f281					      sty	RamKernelGrp0
     28  f281							; Gemini 1A is RESPx
     29  f281					      ldy	#EMERALD_SP_RESET
     30  f281					      sty	[KernelA_C - $100 + 1]
     31  f281							; Turn 3-cycle NOP into 4-cycle
     32  f281					      ldy	#$14
     33  f281					      sty	[KernelA_D - $100]
     34  f281					      rol
     35  f281					      jmp	.endif_1
     36  f281							; [BIT DEPTH] #1 If-End @ 1
     37  f281				   .else_1
     38  f281					      clc
     39  f281					      rol
     40  f281							; Store 0A in GRP0
     41  f281					      ldy	[DO_GEMS_A + 0]
     42  f281					      sty	NibbleGrp0
     43  f281					      sty	RamKernelGrp0
     44  f281					      ldy	[DO_GEMS_A + 1]
     45  f281					      jsr	KernelA_GenReset
     46  f281				   .if_2
     47  f281					      bne	.else_2
     48  f281					      sec
     49  f281					      rol
     50  f281							; GEM1ASWITCH
     51  f281					      jmp	.endif_2
     52  f281							; [BIT DEPTH] #2 If-End @ 2
     53  f281				   .else_2
     54  f281					      clc
     55  f281					      rol
     56  f281							; Calculate the 1A value
     57  f281					      ldy	SHARD_LUT_RF1
     58  f281					      cpy	#1
     59  f281					      .byte	$D0, #3
     60  f281					      ldy	#RESP1
     61  f281					      .byte	$2C
     62  f281					      ldy	#GRP1
     63  f281					      sty	NibbleGemini1Reg
     64  f281							; Set opcode
     65  f281					      ldx	SHARD_LUT_RF1
     66  f281					      cpx	#1
     67  f281					      ldy	#BC_STX
     68  f281					      .byte	$F0, #5
     69  f281					      ldy	[DO_GEMS_A + 1]
     70  f281					      jsr	KernelA_UpdateRegs
     71  f281					      sty	NibbleGemini1
     72  f281							; [BIT DEPTH] #2 *If-End @ 2
     73  f281							; [BIT DEPTH] #2 Else-End @ 2
     74  f281				   .endif_2
     75  f281							; [BIT DEPTH] #1 *If-End @ 1
     76  f281							; [BIT DEPTH] #2 Else-End @ 2
     77  f281				   .endif_1
     78  f281							; Stop preserving GRP0
     79  f281					      ldy	#SENTINEL
     80  f281					      sty	RamKernelGrp0
     81  f281							; NibbleX, NibbleY are upgraded if not set
     82  f281							; Gemini 2A
     83  f281				   .K_2A
     84  f281					      ldy	[DO_GEMS_A + 2]
     85  f281					      jsr	KernelA_GenReset
     86  f281				   .if_3
     87  f281					      bne	.else_3
     88  f281					      sec
     89  f281					      rol
     90  f281					      jmp	.endif_3
     91  f281							; [BIT DEPTH] #3 If-End @ 3
     92  f281				   .else_3
     93  f281					      clc
     94  f281					      rol
     95  f281							; Set opcode
     96  f281					      ldy	[DO_GEMS_A + 2]
     97  f281					      jsr	KernelA_UpdateRegs
     98  f281					      sty	NibbleGemini2
     99  f281							; Set opcode target
    100  f281					      ldy	SHARD_LUT_RF1
    101  f281					      cpy	#2
    102  f281					      .byte	$D0, #3
    103  f281					      ldy	#RESP1
    104  f281					      .byte	$2C
    105  f281					      ldy	#GRP1
    106  f281					      sty	NibbleGemini2Reg
    107  f281							; [BIT DEPTH] #3 *If-End @ 3
    108  f281							; [BIT DEPTH] #3 Else-End @ 3
    109  f281				   .endif_3
    110  f281							; Gemini 3A
    111  f281				   .K_3A
    112  f281					      ldy	[DO_GEMS_A + 3]
    113  f281					      jsr	KernelA_GenReset
    114  f281				   .if_4
    115  f281					      bne	.else_4
    116  f281					      sec
    117  f281					      rol
    118  f281					      jmp	.endif_4
    119  f281							; [BIT DEPTH] #4 If-End @ 4
    120  f281				   .else_4
    121  f281					      clc
    122  f281					      rol
    123  f281							; Set opcode
    124  f281					      ldy	[DO_GEMS_A + 3]
    125  f281					      jsr	KernelA_UpdateRegs
    126  f281					      sty	NibbleGemini3
    127  f281							; Set opcode target
    128  f281					      ldy	SHARD_LUT_RF1
    129  f281					      cpy	#3
    130  f281					      .byte	$D0, #3
    131  f281					      ldy	#RESP1
    132  f281					      .byte	$2C
    133  f281					      ldy	#GRP1
    134  f281					      sty	NibbleGemini3Reg
    135  f281							; [BIT DEPTH] #4 *If-End @ 4
    136  f281							; [BIT DEPTH] #4 Else-End @ 4
    137  f281				   .endif_4
    138  f281							; [BIT DEPTH] Final: 4 (out of 8 bits)
    139  f281					      rol
    140  f281					      rol
    141  f281					      rol
    142  f281					      rol
    143  f281					      ENDM
    144  f281
    145  f281
    146  f281
    147  f281
    148  f281					      MAC	nibble_gem_kernel_a_2_build
    149  f281					      lda	#0
    150  f281							; NIBBLE_VAR NibbleGemini1
    151  f281							; NIBBLE_VAR NibbleGemini1Reg
    152  f281							; NIBBLE_VAR NibbleGemini2
    153  f281							; NIBBLE_VAR NibbleGemini2Reg
    154  f281							; NIBBLE_VAR NibbleGemini3
    155  f281							; NIBBLE_VAR NibbleGemini3Reg
    156  f281							; VD1 default
    157  f281					      ldy	[DO_GEMS_A + 1]
    158  f281					      sty	NibbleVdel1
    159  f281							; Gemini 4A
    160  f281					      ldx	SHARD_LUT_VD1
    161  f281					      cpx	#4
    162  f281				   .if_1
    163  f281					      beq	.else_1
    164  f281					      sec
    165  f281					      rol
    166  f281							; Set PHP
    167  f281					      ldy	#VDELP1
    168  f281					      sty	NibblePhp
    169  f281							; Update VDEL1
    170  f281					      ldy	[DO_GEMS_A + 4]
    171  f281					      sty	NibbleVdel1
    172  f281					      jmp	.endif_1
    173  f281							; [BIT DEPTH] #1 If-End @ 1
    174  f281				   .else_1
    175  f281					      clc
    176  f281					      rol
    177  f281					      ldy	[DO_GEMS_A + 4]
    178  f281					      jsr	KernelA_UpdateRegs
    179  f281					      sty	NibbleGemini4
    180  f281							; Set PHP
    181  f281					      ldy	#RESP1
    182  f281					      sty	NibblePhp
    183  f281							; [BIT DEPTH] #1 *If-End @ 1
    184  f281							; [BIT DEPTH] #1 Else-End @ 1
    185  f281				   .endif_1
    186  f281							; Gemini 5A
    187  f281							; TODO eventually...?
    188  f281							; Missile
    189  f281					      ldy	DO_MISS_A
    190  f281							; FIXME Why doesn't this branch compile?
    191  f281							; bne .+4
    192  f281							; ldx #BC_NOP
    193  f281							; stx NibbleMissile
    194  f281							; VD1
    195  f281							; GRP0
    196  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    197  f281					      rol
    198  f281					      rol
    199  f281					      rol
    200  f281					      rol
    201  f281					      rol
    202  f281					      rol
    203  f281					      rol
    204  f281					      ENDM
    205  f281
    206  f281
    207  f281
    208  f281
    209  f281					      MAC	nibble_gem_kernel_b_1_build
    210  f281					      lda	#0
    211  f281							; NIBBLE_VAR NibbleGemini1
    212  f281							; NIBBLE_VAR NibbleGemini1Reg
    213  f281							; NIBBLE_VAR NibbleGemini2Reg
    214  f281							; NIBBLE_VAR NibbleGemini3Reg
    215  f281							; NIBBLE_VAR NibbleGemini4
    216  f281							; NIBBLE_VAR NibbleMissile
    217  f281							; NIBBLE_VAR NibbleVdel1
    218  f281					      ldx	#SENTINEL
    219  f281					      stx	NibbleX
    220  f281					      stx	NibbleY
    221  f281					      stx	BuildKernelRST
    222  f281							; Php target default
    223  f281					      ldy	#RESP1
    224  f281					      sty	NibblePhp
    225  f281							; Gemini 0B
    226  f281					      ldy	[DO_GEMS_B + 0]
    227  f281					      sty	NibbleGrp0
    228  f281					      sty	RamKernelGrp0
    229  f281							; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    230  f281							; Gemini 1B
    231  f281					      ldy	[DO_GEMS_B + 1]
    232  f281					      jsr	KernelA_UpdateRegs
    233  f281					      sty	NibbleGemini1
    234  f281							; Gemini 2B
    235  f281					      ldy	[DO_GEMS_B + 2]
    236  f281					      jsr	KernelB_GenPhp
    237  f281				   .if_1
    238  f281					      bne	.else_1
    239  f281					      sec
    240  f281					      rol
    241  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    242  f281							; Write to PHP in 2B
    243  f281					      ldx	#EMERALD_SP
    244  f281					      stx	NibblePhp
    245  f281							; Update Grp0
    246  f281					      ldy	BuildKernelRST
    247  f281					      sty	RamKernelGrp0
    248  f281					      rol
    249  f281					      jmp	.endif_1
    250  f281							; [BIT DEPTH] #1 If-End @ 1
    251  f281				   .else_1
    252  f281					      clc
    253  f281					      rol
    254  f281							; Gemini 3B
    255  f281					      ldy	[DO_GEMS_B + 3]
    256  f281					      jsr	KernelB_GenPhp
    257  f281				   .if_2
    258  f281					      bne	.else_2
    259  f281					      sec
    260  f281					      rol
    261  f281							; Write to PHP in 3B
    262  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    263  f281					      ldx	#EMERALD_SP
    264  f281					      stx	NibblePhp
    265  f281
    266  f281							; Update Grp0
    267  f281					      ldy	BuildKernelRST
    268  f281					      sty	RamKernelGrp0
    269  f281					      jmp	.endif_2
    270  f281							; [BIT DEPTH] #2 If-End @ 2
    271  f281				   .else_2
    272  f281					      clc
    273  f281					      rol
    274  f281							; Update 2B
    275  f281					      CALC_REGS_AND_STORE	2, NibbleGemini2
    276  f281							; Update 3B
    277  f281					      CALC_REGS_AND_STORE	3, NibbleGemini3
    278  f281							; [BIT DEPTH] #2 *If-End @ 2
    279  f281							; [BIT DEPTH] #2 Else-End @ 2
    280  f281				   .endif_2
    281  f281							; [BIT DEPTH] #1 *If-End @ 1
    282  f281							; [BIT DEPTH] #2 Else-End @ 2
    283  f281				   .endif_1
    284  f281							; [BIT DEPTH] Final: 2 (out of 8 bits)
    285  f281					      rol
    286  f281					      rol
    287  f281					      rol
    288  f281					      rol
    289  f281					      rol
    290  f281					      rol
    291  f281					      ENDM
    292  f281
    293  f281
    294  f281
    295  f281
    296  f281					      MAC	nibble_gem_kernel_b_2_build
    297  f281					      lda	#0
    298  f281							; NIBBLE_VAR NibbleGemini1
    299  f281							; NIBBLE_VAR NibbleGemini1Reg
    300  f281							; NIBBLE_VAR NibbleGemini2
    301  f281							; NIBBLE_VAR NibbleGemini2Reg
    302  f281							; NIBBLE_VAR NibbleGemini3
    303  f281							; NIBBLE_VAR NibbleGemini3Reg
    304  f281							; NIBBLE_VAR NibbleMissile
    305  f281							; NIBBLE_VAR NibbleVdel1
    306  f281							; Gemini 1B
    307  f281							; Write out PHP flag comparison
    308  f281					      ldy	BuildKernelRST
    309  f281					      cpy	#G01
    310  f281				   .if_1
    311  f281					      bne	.else_1
    312  f281					      sec
    313  f281					      rol
    314  f281					      jmp	.endif_1
    315  f281							; [BIT DEPTH] #1 If-End @ 1
    316  f281				   .else_1
    317  f281					      clc
    318  f281					      rol
    319  f281							; [BIT DEPTH] #1 *If-End @ 1
    320  f281							; [BIT DEPTH] #1 Else-End @ 1
    321  f281				   .endif_1
    322  f281							; Missile
    323  f281							; ldy DO_MISS_B
    324  f281							; NIBBLE_IF eq
    325  f281							; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    326  f281							; NIBBLE_ELSE
    327  f281							;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    328  f281							; NIBBLE_END_IF
    329  f281							; Gemini 4B
    330  f281					      ldy	[DO_GEMS_B + 4]
    331  f281					      jsr	KernelA_UpdateRegs
    332  f281					      sty	NibbleGemini4
    333  f281							; TODO if no PHP, rewrite previous section:
    334  f281							; NIBBLE_IF cs
    335  f281							;
    336  f281							;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    337  f281							;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    338  f281							;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    339  f281							;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    340  f281							; NIBBLE_END_IF
    341  f281							; Make adjustments for sprites.
    342  f281					      ror	NibbleGrp0
    343  f281					      ror	NibbleX
    344  f281					      ror	NibbleY
    345  f281							;
    346  f281							; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    347  f281							; GRP0
    348  f281							; [BIT DEPTH] Final: 1 (out of 8 bits)
    349  f281					      rol
    350  f281					      rol
    351  f281					      rol
    352  f281					      rol
    353  f281					      rol
    354  f281					      rol
    355  f281					      rol
    356  f281					      ENDM
    357  f281
    358  f281
    359  f281
    360  f281
------- FILE main.s
------- FILE nibble_eval.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_eval.s"
      1  f281					      MAC	nibble_gem_kernel_a_1
      2  f281					      asl
      3  f281					      bcc	.else_1
      4  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
      5  f281				   .if_1
      6  f281					      rol
      7  f281					      sleep	17
      8  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 25 }
      9  f281
     10  f281					      jmp	.endif_1
     11  f281				   .else_1
     12  f281					      asl
     13  f281					      bcc	.else_2
     14  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
     15  f281				   .if_2
     16  f281					      ldx	#[ #BC_STX ]
     17  f281					      stx	[[KernelA_D_W + 0] + 0]
     18  f281					      ldx	#[ #RESP1 ]
     19  f281					      stx	[[KernelA_D_W + 1] + 0]
     20  f281					      sleep	2
     21  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     22  f281
     23  f281					      jmp	.endif_2
     24  f281				   .else_2
     25  f281					      ldx.z	NibbleGemini1
     26  f281					      stx	[[KernelA_D_W + 0] + 0]
     27  f281					      ldx.z	NibbleGemini1Reg
     28  f281					      stx	[[KernelA_D_W + 1] + 0]
     29  f281					      sleep	3
     30  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     31  f281				   .endif_2
     32  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 25 }
     33  f281				   .endif_1
     34  f281					      asl
     35  f281					      bcc	.else_3
     36  f281							; parent: BuildState { index: 2, checkdepth: 2, cycles: 29 }
     37  f281				   .if_3
     38  f281					      ldx	#[ #NOP_REG ]
     39  f281					      stx	[[KernelA_E_W + 1] + 0]
     40  f281					      ldx	#[ #RESP1 ]
     41  f281					      stx	[[KernelA_G_W + 1] + 0]
     42  f281					      sleep	5
     43  f281							; then: BuildState { index: 3, checkdepth: 3, cycles: 48 }
     44  f281
     45  f281					      jmp	.endif_3
     46  f281				   .else_3
     47  f281					      ldx	#[ #RESP1 ]
     48  f281					      stx	[[KernelA_E_W + 1] + 0]
     49  f281					      ldx.z	NibbleGemini2
     50  f281					      stx	[[KernelA_G_W + 0] + 0]
     51  f281					      ldx.z	NibbleGemini2Reg
     52  f281					      stx	[[KernelA_G_W + 1] + 0]
     53  f281							; else: BuildState { index: 3, checkdepth: 3, cycles: 48 }
     54  f281				   .endif_3
     55  f281					      asl
     56  f281					      bcc	.else_4
     57  f281							; parent: BuildState { index: 3, checkdepth: 3, cycles: 52 }
     58  f281				   .if_4
     59  f281					      ldx	#[ #RESP1 ]
     60  f281					      stx	[[KernelA_H_W + 1] + 0]
     61  f281					      sleep	5
     62  f281							; then: BuildState { index: 4, checkdepth: 4, cycles: 65 }
     63  f281
     64  f281					      jmp	.endif_4
     65  f281				   .else_4
     66  f281					      ldx.z	NibbleGemini3
     67  f281					      stx	[[KernelA_H_W + 0] + 0]
     68  f281					      ldx.z	NibbleGemini3Reg
     69  f281					      stx	[[KernelA_H_W + 1] + 0]
     70  f281							; else: BuildState { index: 4, checkdepth: 4, cycles: 65 }
     71  f281				   .endif_4
     72  f281					      ENDM
     73  f281
     74  f281
     75  f281
     76  f281
     77  f281					      MAC	nibble_gem_kernel_a_2
     78  f281					      asl
     79  f281					      bcc	.else_1
     80  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
     81  f281				   .if_1
     82  f281					      ldx	#[ #BC_STA ]
     83  f281					      stx	[[KernelA_I_W + 0] + 0]
     84  f281					      ldx	#[ #EMERALD_SP_RESET ]
     85  f281					      stx	[[KernelA_I_W + 0] + 1]
     86  f281					      ldx	#[ #BC_STA ]
     87  f281					      stx	[[KernelA_J_W + 1] + 0]
     88  f281					      ldx	#[ #PF1 ]
     89  f281					      stx	[[KernelA_J_W + 1] + 1]
     90  f281					      ldx	#[ #BC_PHP ]
     91  f281					      stx	[[KernelA_K_W + 1] + 0]
     92  f281					      sleep	2
     93  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 38 }
     94  f281
     95  f281					      jmp	.endif_1
     96  f281				   .else_1
     97  f281					      ldx	#[ #BC_PHP ]
     98  f281					      stx	[[KernelA_I_W + 0] + 0]
     99  f281					      ldx	#[ #BC_STA ]
    100  f281					      stx	[[KernelA_J_W + 0] + 0]
    101  f281					      ldx	#[ #PF1 ]
    102  f281					      stx	[[KernelA_J_W + 0] + 1]
    103  f281					      ldx.z	NibbleGemini4
    104  f281					      stx	[[KernelA_K_W + 0] + 0]
    105  f281					      ldx	#[ #EMERALD_SP ]
    106  f281					      stx	[[KernelA_K_W + 1] + 0]
    107  f281					      sleep	3
    108  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 38 }
    109  f281				   .endif_1
    110  f281					      ldx.z	NibbleMissile
    111  f281					      stx	[[KernelA_F - $100] + 0]
    112  f281					      ldx.z	NibbleVdel1
    113  f281					      stx	[[KernelA_VDEL1 - $100] + 0]
    114  f281					      ldx.z	NibbleGrp0
    115  f281					      stx	[[KernelA_VDEL0 - $100] + 0]
    116  f281					      ldx	#[ #$ff ]
    117  f281					      stx	[NibblePs + 0]
    118  f281					      ENDM
    119  f281
    120  f281
    121  f281
    122  f281
    123  f281					      MAC	nibble_gem_kernel_b_1
    124  f281					      asl
    125  f281					      bcc	.else_1
    126  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 4 }
    127  f281				   .if_1
    128  f281					      ldx	#[ #BC_STY ]
    129  f281					      stx	[[KernelB_E_W + 0] + 0]
    130  f281					      ldx	#[ #EMERALD_SP_RESET ]
    131  f281					      stx	[[KernelB_E_W + 1] + 0]
    132  f281					      ldx	#[ #BC_PHP ]
    133  f281					      stx	[[KernelB_F_W + 1] + 0]
    134  f281					      ldx	#[ #BC_STA ]
    135  f281					      stx	[[KernelB_G_W + 0] + 0]
    136  f281					      ldx	#[ #PF1 ]
    137  f281					      stx	[[KernelB_G_W + 1] + 0]
    138  f281					      ldx.z	NibbleGemini3
    139  f281					      stx	[[KernelB_H_W + 0] + 0]
    140  f281					      ldx	#[ #EMERALD_SP ]
    141  f281					      stx	[[KernelB_H_W + 1] + 0]
    142  f281					      rol
    143  f281					      sleep	3
    144  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 53 }
    145  f281
    146  f281					      jmp	.endif_1
    147  f281				   .else_1
    148  f281					      asl
    149  f281					      bcc	.else_2
    150  f281							; parent: BuildState { index: 1, checkdepth: 1, cycles: 9 }
    151  f281				   .if_2
    152  f281					      ldx	#[ #BC_STY ]
    153  f281					      stx	[[KernelB_E_W + 0] + 0]
    154  f281					      ldx	#[ #EMERALD_SP_RESET ]
    155  f281					      stx	[[KernelB_E_W + 1] + 0]
    156  f281					      ldx.z	NibbleGemini2
    157  f281					      stx	[[KernelB_F_W + 1] + 0]
    158  f281					      ldx	#[ #EMERALD_SP ]
    159  f281					      stx	[[KernelB_F_W + 2] + 0]
    160  f281					      ldx	#[ #BC_STA ]
    161  f281					      stx	[[KernelB_G_W + 1] + 0]
    162  f281					      ldx	#[ #PF1 ]
    163  f281					      stx	[[KernelB_G_W + 2] + 0]
    164  f281					      ldx	#[ #BC_PHP ]
    165  f281					      stx	[[KernelB_H_W + 1] + 0]
    166  f281							; then: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    167  f281
    168  f281					      jmp	.endif_2
    169  f281				   .else_2
    170  f281					      ldx.z	NibbleGemini2
    171  f281					      stx	[[KernelB_F_W + 0] + 0]
    172  f281					      ldx	#[ #EMERALD_SP ]
    173  f281					      stx	[[KernelB_F_W + 1] + 0]
    174  f281					      ldx.z	NibbleGemini3
    175  f281					      stx	[[KernelB_H_W + 0] + 0]
    176  f281					      ldx	#[ #EMERALD_SP ]
    177  f281					      stx	[[KernelB_H_W + 1] + 0]
    178  f281					      sleep	19
    179  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    180  f281				   .endif_2
    181  f281							; else: BuildState { index: 2, checkdepth: 2, cycles: 53 }
    182  f281				   .endif_1
    183  f281					      ENDM
    184  f281
    185  f281
    186  f281
    187  f281
    188  f281					      MAC	nibble_gem_kernel_b_2
    189  f281					      ldx	#[ NibbleGemini1 ]
    190  f281					      stx	[KernelB_D_W + 0]
    191  f281					      asl
    192  f281					      bcc	.else_1
    193  f281							; parent: BuildState { index: 0, checkdepth: 0, cycles: 10 }
    194  f281				   .if_1
    195  f281					      ldx	#[ #RamFFByte ]
    196  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    197  f281					      sleep	2
    198  f281							; then: BuildState { index: 1, checkdepth: 1, cycles: 20 }
    199  f281
    200  f281					      jmp	.endif_1
    201  f281				   .else_1
    202  f281					      ldx	#[ #RamPF1Value ]
    203  f281					      stx	[[KernelB_C - $100 + 1] + 0]
    204  f281					      sleep	3
    205  f281							; else: BuildState { index: 1, checkdepth: 1, cycles: 20 }
    206  f281				   .endif_1
    207  f281					      ldx.z	NibbleGemini4
    208  f281					      stx	[KernelB_J_W + 0]
    209  f281					      ldx.z	NibbleGrp0
    210  f281					      stx	[[KernelB_VDEL0 - $100] + 0]
    211  f281					      ldx	#[ #$00 ]
    212  f281					      stx	[NibblePs + 0]
    213  f281					      ENDM
    214  f281
    215  f281
    216  f281
    217  f281
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f281					      include	"nibble_shard.s"
      1  f281							; conflict: 11011000 #%0011 #%1000
      2  f281							; conflict: 11011001 #%0011 #%1000
      3  f281							; conflict: 11011010 #%0011 #%1000
      4  f281							; conflict: 11011011 #%0011 #%1000
      5  f281							; conflict: 11100100 #%1000 #%0011
      6  f281							; conflict: 11100101 #%1000 #%0011
      7  f281							; conflict: 11100110 #%1000 #%0011
      8  f281							; conflict: 11100111 #%1000 #%0011
      9  f281							; conflict: 01111000 #%1000 #%0001
     10  f281							; conflict: 01111001 #%1000 #%0001
     11  f281							; conflict: 01111010 #%1000 #%0001
     12  f281							; conflict: 01111011 #%1000 #%0001
     13  f281							; conflict: 10110100 #%1000 #%0001
     14  f281							; conflict: 10110101 #%1000 #%0001
     15  f281							; conflict: 10110110 #%1000 #%0001
     16  f281							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400				   PositionSprites subroutine
      2  f400
      3  f400
      4  f400							; "Start" with overscan.
      5  f400				   Overscan   subroutine
      6  f400		       85 01		      sta	VBLANK
      0  f402					      TIMER_SETUP	29
      1  f402				   .lines     SET	29
      2  f402		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f404		       85 02		      sta	WSYNC
      4  f406		       8d 96 02 	      sta	TIM64T
      8  f409
      9  f409		       20 06 f5 	      jsr	MoveJoystick
     10  f40c		       20 46 f5 	      jsr	SpeedCalculation
     11  f40f		       20 f8 fa 	      jsr	game_state_tick
     12  f412
     13  f412							; Wait out overscan.
      0  f412					      TIMER_WAIT
      1  f412				   .waittimer
      2  f412		       ad 84 02 	      lda	INTIM
      3  f415		       d0 fb		      bne	.waittimer
      4  f417		       85 02		      sta	WSYNC
     15  f419
     16  f419							; Vertical Sync (3 lines)
     17  f419				   VerticalSync subroutine
      0  f419					      VERTICAL_SYNC
      1  f419		       a9 0e		      lda	#%1110
      2  f41b		       85 02	   .VSLP1     sta	WSYNC
      3  f41d		       85 00		      sta	VSYNC
      4  f41f		       4a		      lsr
      5  f420		       d0 f9		      bne	.VSLP1
     19  f422
     20  f422				   FrameStart subroutine
      0  f422					      ASSERT_RUNTIME	"_scan == #0"
      1  f422				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f422  && !(  _scan == #0  ) }
      2  f422					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  f422
     23  f422				   VerticalBlank subroutine
      0  f422					      TIMER_SETUP	37
      1  f422				   .lines     SET	37
      2  f422		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f424		       85 02		      sta	WSYNC
      4  f426		       8d 96 02 	      sta	TIM64T
     25  f429
     26  f429							; Scanline counter
     27  f429		       a9 10		      lda	#ROW_COUNT
     28  f42b		       85 d4		      sta	LoopCount
     29  f42d
     30  f42d							; Frame counter
     31  f42d		       e6 d5		      inc	FrameCount
     32  f42f
     33  f42f							; Assign dervied SpriteEnd value
     34  f42f		       18		      clc
     35  f430		       a9 c8		      lda	#HEIGHT_OFFSET
     36  f432		       e5 da		      sbc	YPos
     37  f434		       85 d6		      sta	SpriteEnd
     38  f436
     39  f436							; Player 1
     40  f436		       a5 d7		      lda	XPos
     41  f438		       a2 00		      ldx	#0
     42  f43a		       20 7d f5 	      jsr	SetHorizPos
     43  f43d
     44  f43d							; Load the kernel into CBSRAM.
     45  f43d				   game_frame_kernel_loader subroutine
     46  f43d							; Kernel A or B
     47  f43d		       a9 01		      lda	#01
     48  f43f					      IFNCONST	ONLY_KERNEL_B
     49  f43f				  -	      IFNCONST	ONLY_KERNEL_A
     50  f43f				  -			; FIXME disabled for test
     51  f43f				  -	      and	FrameCount
     52  f43f				  -	      bne	.kernel_b
     53  f43f					      ENDIF
     54  f43f				   .kernel_a
     55  f43f							; Load kernel A into CBSRAM
     56  f43f		       20 5d f2 	      jsr	LoadKernelA
     57  f442		       4c 48 f4 	      jmp	.complete
     58  f445					      ENDIF
     59  f445				   .kernel_b
     60  f445							; Load kernel B into CBSRAM
     61  f445		       20 6f f2 	      jsr	LoadKernelB
     62  f448				   .complete
     63  f448
     64  f448							; Populate the kernel with gemini changes.
     65  f448				   game_frame_populate subroutine
     66  f448							; Extract 26-bit string to full Gemini profile
     67  f448		       20 00 fa 	      jsr	gemini_populate
     68  f44b							; Run nibble populate.
     69  f44b		       20 f1 f5 	      jsr	game_nibble_populate
     70  f44e
     71  f44e							; Complete frame setup.
     72  f44e				   game_frame_setup subroutine
     73  f44e							; Kernel A or B reading directly from the kernel ID
     74  f44e		       ad 00 f1 	      lda	CBSRAM_KERNEL_READ
     75  f451		       c9 0a		      cmp	#$0a
     76  f453		       d0 1d		      bne	.kernel_b
     77  f455
     78  f455				   .kernel_a
     79  f455							; Move missile
     80  f455		       85 02		      sta	WSYNC
      0  f457					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f457				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f457
      3  f457				  -	      IF	.CYCLES < 2
      4  f457				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f457				  -	      ERR
      6  f457					      ENDIF
      7  f457
      8  f457				  -	      IF	.CYCLES & 1
      9  f457				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f457				  -	      nop	0
     11  f457				  -	      ELSE
     12  f457				  -	      bit	VSYNC
     13  f457				  -	      ENDIF
     14  f457				  -.CYCLES    SET	.CYCLES - 3
     15  f457					      ENDIF
     16  f457
     17  f457					      REPEAT	.CYCLES / 2
     18  f457		       ea		      nop
     17  f457					      REPEND
     18  f458		       ea		      nop
     17  f458					      REPEND
     18  f459		       ea		      nop
     17  f459					      REPEND
     18  f45a		       ea		      nop
     17  f45a					      REPEND
     18  f45b		       ea		      nop
     17  f45b					      REPEND
     18  f45c		       ea		      nop
     17  f45c					      REPEND
     18  f45d		       ea		      nop
     17  f45d					      REPEND
     18  f45e		       ea		      nop
     17  f45e					      REPEND
     18  f45f		       ea		      nop
     17  f45f					      REPEND
     18  f460		       ea		      nop
     17  f460					      REPEND
     18  f461		       ea		      nop
     17  f461					      REPEND
     18  f462		       ea		      nop
     17  f462					      REPEND
     18  f463		       ea		      nop
     17  f463					      REPEND
     18  f464		       ea		      nop
     19  f465					      REPEND
     82  f465		       85 13		      sta	EMERALD_MI_RESET
     83  f467		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
     84  f469		       85 23		      sta	EMERALD_MI_HMOVE
     85  f46b
     86  f46b							; DEBUG: Set per-kernel color
     87  f46b		       a2 cc		      ldx	#COL_EMERALD
     88  f46d		       86 07		      stx	EMERALD_SP_COLOR
     89  f46f
     90  f46f		       4c c3 f4 	      jmp	.complete
     91  f472
     92  f472				   .kernel_b
     93  f472							; Move missile
     94  f472		       85 02		      sta	WSYNC
      0  f474					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f474				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f474
      3  f474				  -	      IF	.CYCLES < 2
      4  f474				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f474				  -	      ERR
      6  f474					      ENDIF
      7  f474
      8  f474					      IF	.CYCLES & 1
      9  f474					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f474		       04 00		      nop	0
     11  f476				  -	      ELSE
     12  f476				  -	      bit	VSYNC
     13  f476					      ENDIF
     14  f476				   .CYCLES    SET	.CYCLES - 3
     15  f476					      ENDIF
     16  f476
     17  f476					      REPEAT	.CYCLES / 2
     18  f476		       ea		      nop
     17  f476					      REPEND
     18  f477		       ea		      nop
     17  f477					      REPEND
     18  f478		       ea		      nop
     17  f478					      REPEND
     18  f479		       ea		      nop
     17  f479					      REPEND
     18  f47a		       ea		      nop
     17  f47a					      REPEND
     18  f47b		       ea		      nop
     17  f47b					      REPEND
     18  f47c		       ea		      nop
     17  f47c					      REPEND
     18  f47d		       ea		      nop
     17  f47d					      REPEND
     18  f47e		       ea		      nop
     17  f47e					      REPEND
     18  f47f		       ea		      nop
     17  f47f					      REPEND
     18  f480		       ea		      nop
     17  f480					      REPEND
     18  f481		       ea		      nop
     17  f481					      REPEND
     18  f482		       ea		      nop
     17  f482					      REPEND
     18  f483		       ea		      nop
     17  f483					      REPEND
     18  f484		       ea		      nop
     17  f484					      REPEND
     18  f485		       ea		      nop
     17  f485					      REPEND
     18  f486		       ea		      nop
     17  f486					      REPEND
     18  f487		       ea		      nop
     17  f487					      REPEND
     18  f488		       ea		      nop
     17  f488					      REPEND
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     17  f48a					      REPEND
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     19  f48e					      REPEND
     96  f48e		       85 13		      sta	EMERALD_MI_RESET
     97  f490		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
     98  f492		       85 23		      sta	EMERALD_MI_HMOVE
     99  f494
    100  f494		       a5 e9		      lda	DO_MISS_B
    101  f496		       d0 25		      bne	.kernel_b_continue
    102  f498		       85 02		      sta	WSYNC
      0  f49a					      sleep	KERNEL_B_MISSILE_SLEEP + 8
      1  f49a				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP + 8
      2  f49a
      3  f49a				  -	      IF	.CYCLES < 2
      4  f49a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f49a				  -	      ERR
      6  f49a					      ENDIF
      7  f49a
      8  f49a					      IF	.CYCLES & 1
      9  f49a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f49a		       04 00		      nop	0
     11  f49c				  -	      ELSE
     12  f49c				  -	      bit	VSYNC
     13  f49c					      ENDIF
     14  f49c				   .CYCLES    SET	.CYCLES - 3
     15  f49c					      ENDIF
     16  f49c
     17  f49c					      REPEAT	.CYCLES / 2
     18  f49c		       ea		      nop
     17  f49c					      REPEND
     18  f49d		       ea		      nop
     17  f49d					      REPEND
     18  f49e		       ea		      nop
     17  f49e					      REPEND
     18  f49f		       ea		      nop
     17  f49f					      REPEND
     18  f4a0		       ea		      nop
     17  f4a0					      REPEND
     18  f4a1		       ea		      nop
     17  f4a1					      REPEND
     18  f4a2		       ea		      nop
     17  f4a2					      REPEND
     18  f4a3		       ea		      nop
     17  f4a3					      REPEND
     18  f4a4		       ea		      nop
     17  f4a4					      REPEND
     18  f4a5		       ea		      nop
     17  f4a5					      REPEND
     18  f4a6		       ea		      nop
     17  f4a6					      REPEND
     18  f4a7		       ea		      nop
     17  f4a7					      REPEND
     18  f4a8		       ea		      nop
     17  f4a8					      REPEND
     18  f4a9		       ea		      nop
     17  f4a9					      REPEND
     18  f4aa		       ea		      nop
     17  f4aa					      REPEND
     18  f4ab		       ea		      nop
     17  f4ab					      REPEND
     18  f4ac		       ea		      nop
     17  f4ac					      REPEND
     18  f4ad		       ea		      nop
     17  f4ad					      REPEND
     18  f4ae		       ea		      nop
     17  f4ae					      REPEND
     18  f4af		       ea		      nop
     17  f4af					      REPEND
     18  f4b0		       ea		      nop
     17  f4b0					      REPEND
     18  f4b1		       ea		      nop
     17  f4b1					      REPEND
     18  f4b2		       ea		      nop
     17  f4b2					      REPEND
     18  f4b3		       ea		      nop
     17  f4b3					      REPEND
     18  f4b4		       ea		      nop
     17  f4b4					      REPEND
     18  f4b5		       ea		      nop
     17  f4b5					      REPEND
     18  f4b6		       ea		      nop
     17  f4b6					      REPEND
     18  f4b7		       ea		      nop
     19  f4b8					      REPEND
    104  f4b8		       85 13		      sta	EMERALD_MI_RESET
    105  f4ba		       4c bf f4 	      jmp	.kernel_b_continue_2
    106  f4bd
    107  f4bd				   .kernel_b_continue
    108  f4bd		       85 02		      sta	WSYNC
    109  f4bf				   .kernel_b_continue_2
    110  f4bf							; DEBUG: Set per-kernel color
    111  f4bf		       a2 e4		      ldx	#$e4
    112  f4c1							; ldx #COL_EMERALD
    113  f4c1		       86 07		      stx	EMERALD_SP_COLOR
    114  f4c3
    115  f4c3				   .complete
    116  f4c3
    117  f4c3				   PreFrameSetup
    118  f4c3							; Save stack pointer
    119  f4c3		       ba		      tsx
    120  f4c4		       86 e1		      stx	RamStackBkp
    121  f4c6
    122  f4c6				   VerticalBlankEnd
    123  f4c6							; Wait until the end of Vertical blank.
      0  f4c6					      TIMER_WAIT
      1  f4c6				   .waittimer
      2  f4c6		       ad 84 02 	      lda	INTIM
      3  f4c9		       d0 fb		      bne	.waittimer
      4  f4cb		       85 02		      sta	WSYNC
      0  f4cd					      ASSERT_RUNTIME	"_scan == #37"
      1  f4cd				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f4cd  && !(  _scan == #37  ) }
      2  f4cd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    126  f4cd
    127  f4cd
    128  f4cd							;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f4cd							; Visible frame
    130  f4cd							;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f4cd
    132  f4cd				   GameFrameRender
    133  f4cd							; Start rendering the kernel.
    134  f4cd		       4c 36 fb 	      jmp	KernelBorder
    135  f4d0
    136  f4d0				   FrameEnd   subroutine
    137  f4d0		       85 02		      sta	WSYNC
    138  f4d2
    139  f4d2							; Blank all background colors.
    140  f4d2		       a9 00		      lda	#0
    141  f4d4		       85 08		      sta	COLUPF
    142  f4d6		       85 0f		      sta	PF2
    143  f4d8		       85 0e		      sta	PF1
    144  f4da		       85 1c		      sta	EMERALD_SP
    145  f4dc
    146  f4dc							; Guide lines (2x)
    147  f4dc		       a9 02		      lda	#SIGNAL_LINE
    148  f4de		       85 09		      sta	COLUBK
    149  f4e0					      REPEAT	6
    150  f4e0		       85 02		      sta	WSYNC
    149  f4e0					      REPEND
    150  f4e2		       85 02		      sta	WSYNC
    149  f4e2					      REPEND
    150  f4e4		       85 02		      sta	WSYNC
    149  f4e4					      REPEND
    150  f4e6		       85 02		      sta	WSYNC
    149  f4e6					      REPEND
    150  f4e8		       85 02		      sta	WSYNC
    149  f4e8					      REPEND
    150  f4ea		       85 02		      sta	WSYNC
    151  f4ec					      REPEND
    152  f4ec		       a9 00		      lda	#$00
    153  f4ee		       85 09		      sta	COLUBK
    154  f4f0
    155  f4f0							; Restore stack pointer
    156  f4f0		       a6 e1		      ldx	RamStackBkp
    157  f4f2		       9a		      txs
    158  f4f3
    159  f4f3							; Display the rest of the blank screen.
      0  f4f3					      TIMER_SETUP	25
      1  f4f3				   .lines     SET	25
      2  f4f3		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f4f5		       85 02		      sta	WSYNC
      4  f4f7		       8d 96 02 	      sta	TIM64T
    161  f4fa		       85 02		      sta	WSYNC
      0  f4fc					      TIMER_WAIT
      1  f4fc				   .waittimer
      2  f4fc		       ad 84 02 	      lda	INTIM
      3  f4ff		       d0 fb		      bne	.waittimer
      4  f501		       85 02		      sta	WSYNC
      0  f503					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f503				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f503  && !(  _scan == (#37 + #184)  ) }
      2  f503					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    164  f503
    165  f503							; Finish with overscan
    166  f503		       4c 00 f4 	      jmp	Overscan
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f506					      include	"game_input.s"
      1  f506							; Handles input checking. Called from overscan.
      2  f506
      3  f506							; Read joystick movement and apply to object 0
      4  f506				   MoveJoystick subroutine
      5  f506
      6  f506							; HACK to add in resetting ability for the gems
      7  f506		       a5 0c		      lda	INPT4	; read left port action button
      8  f508		       29 80		      and	#%10000000	; safe to avoid any reads from D6 - D0
      9  f50a		       30 03		      bmi	.actionButtonNotPressed	; branch if action button not pressed
     10  f50c		       20 da fa 	      jsr	game_state_setup
     11  f50f				   .actionButtonNotPressed
     12  f50f
     13  f50f							; Move vertically
     14  f50f							; (up and down are actually reversed since ypos starts at bottom)
     15  f50f							;     ldx YPos
     16  f50f		       a9 10		      lda	#%00010000	;Up?
     17  f511		       2c 80 02 	      bit	SWCHA
     18  f514		       d0 0d		      bne	SkipMoveUp
     19  f516
     20  f516		       18		      clc
     21  f517		       a5 d9		      lda	Speed2
     22  f519		       69 0c		      adc	#12
     23  f51b		       85 d9		      sta	Speed2
     24  f51d		       a5 d8		      lda	Speed1
     25  f51f		       69 00		      adc	#00
     26  f521		       85 d8		      sta	Speed1
     27  f523
     28  f523				   SkipMoveUp
     29  f523		       a6 d7		      ldx	XPos
     30  f525
     31  f525							; Only check left/right on odd frames;
     32  f525							; TODO make this just a fractional speed
     33  f525							; rather than dropping frames
     34  f525		       a9 01		      lda	#01
     35  f527		       25 d5		      and	FrameCount
     36  f529		       d0 18		      bne	SkipMoveRight
     37  f52b
     38  f52b
     39  f52b							; Move horizontally
     40  f52b		       a9 40		      lda	#%01000000	;Left?
     41  f52d		       2c 80 02 	      bit	SWCHA
     42  f530		       d0 05		      bne	SkipMoveLeft
     43  f532		       e0 1d		      cpx	#29
     44  f534		       90 01		      bcc	SkipMoveLeft
     45  f536		       ca		      dex
     46  f537
     47  f537							; Reflect
     48  f537							;     lda #$ff
     49  f537							;     sta REFP0
     50  f537				   SkipMoveLeft
     51  f537		       a9 80		      lda	#%10000000	;Right?
     52  f539		       2c 80 02 	      bit	SWCHA
     53  f53c		       d0 05		      bne	SkipMoveRight
     54  f53e		       e0 80		      cpx	#128
     55  f540		       b0 01		      bcs	SkipMoveRight
     56  f542		       e8		      inx
     57  f543
     58  f543							; Reflect
     59  f543							;     lda #$0
     60  f543							;     sta REFP0
     61  f543				   SkipMoveRight
     62  f543		       86 d7		      stx	XPos
     63  f545		       60		      rts
     64  f546
     65  f546
     66  f546				   SpeedCalculation
     67  f546		       38		      sec
     68  f547		       a5 d9		      lda	Speed2
     69  f549		       e9 07		      sbc	#7
     70  f54b		       85 d9		      sta	Speed2
     71  f54d		       a5 d8		      lda	Speed1
     72  f54f		       e9 00		      sbc	#0
     73  f551		       85 d8		      sta	Speed1
     74  f553
     75  f553		       18		      clc
     76  f554		       a5 db		      lda	YPos2
     77  f556		       65 d9		      adc	Speed2
     78  f558		       85 db		      sta	YPos2
     79  f55a		       a5 da		      lda	YPos
     80  f55c		       65 d8		      adc	Speed1
     81  f55e		       85 da		      sta	YPos
     82  f560
     83  f560		       c9 48		      cmp	#FLOOR_OFFSET
     84  f562		       b0 0a		      bcs	NewThing2
     85  f564
     86  f564							; Reset to floor
     87  f564		       a9 48		      lda	#FLOOR_OFFSET
     88  f566		       85 da		      sta	YPos
     89  f568		       a9 00		      lda	#0
     90  f56a		       85 d8		      sta	Speed1
     91  f56c		       85 d9		      sta	Speed2
     92  f56e				   NewThing2
     93  f56e
     94  f56e		       c9 c0		      cmp	#CEILING_OFFSET
     95  f570		       90 0a		      bcc	.next
     96  f572
     97  f572							; Reset to ceiling
     98  f572		       a9 c0		      lda	#CEILING_OFFSET
     99  f574		       85 da		      sta	YPos
    100  f576		       a9 00		      lda	#0
    101  f578		       85 d8		      sta	Speed1
    102  f57a		       85 d9		      sta	Speed2
    103  f57c				   .next
    104  f57c		       60		      rts
    105  f57d
    106  f57d
    107  f57d
    108  f57d							; Subroutine
    109  f57d				   SetHorizPos
    110  f57d		       85 02		      sta	WSYNC	; start a new line
    111  f57f		       24 00		      bit	0	; waste 3 cycles
    112  f581		       38		      sec		; set carry flag
    113  f582				   DivideLoop
    114  f582		       e9 0f		      sbc	#15	; subtract 15
    115  f584		       b0 fc		      bcs	DivideLoop	; branch until negative
    116  f586		       49 07		      eor	#7	; calculate fine offset
    117  f588		       0a		      asl
    118  f589		       0a		      asl
    119  f58a		       0a		      asl
    120  f58b		       0a		      asl
    121  f58c		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    122  f58e		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    123  f590		       60		      rts		; return to caller
------- FILE main.s
------- FILE game_nibble.s LEVEL 2 PASS 2
      0  f591					      include	"game_nibble.s"
      1  f591							; Frame loop, including calling out to other kernels.
      2  f591
      3  f591		       00 aa	   SENTINEL   =	%010101010
      4  f591
      5  f591							; Reflected for Kernel A
      6  f591		       00 00	   G00	      =	%00000000
      7  f591		       00 60	   G01	      =	%01100000
      8  f591		       00 06	   G10	      =	%00000110
      9  f591		       00 66	   G11	      =	%01100110
     10  f591
     11  f591		       00 a9	   BC_LDA_IMM =	$a9
     12  f591		       00 85	   BC_STA     =	$85
     13  f591		       00 86	   BC_STX     =	$86
     14  f591		       00 84	   BC_STY     =	$84
     15  f591		       00 08	   BC_PHP     =	$08
     16  f591		       00 04	   BC_NOP     =	$04
     17  f591
     18  f591		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
     19  f591
     20  f591				   KernelA_D_W EQM	[KernelA_D - $100]
     21  f591				   KernelA_E_W EQM	[KernelA_E - $100]
     22  f591				   KernelA_G_W EQM	[KernelA_G - $100]
     23  f591				   KernelA_H_W EQM	[KernelA_H - $100]
     24  f591				   KernelA_I_W EQM	[KernelA_I - $100]
     25  f591				   KernelA_J_W EQM	[KernelA_J - $100]
     26  f591				   KernelA_K_W EQM	[KernelA_K - $100]
     27  f591
     28  f591				   KernelB_D_W EQM	[KernelB_D - $100]
     29  f591				   KernelB_E_W EQM	[KernelB_E - $100]
     30  f591				   KernelB_F_W EQM	[KernelB_F - $100]
     31  f591				   KernelB_G_W EQM	[KernelB_G - $100]
     32  f591				   KernelB_H_W EQM	[KernelB_H - $100]
     33  f591				   KernelB_I_W EQM	[KernelB_I - $100]
     34  f591				   KernelB_J_W EQM	[KernelB_J - $100]
     35  f591				   KernelB_K_W EQM	[KernelB_K - $100]
     36  f591
     37  f591					      mac	calc_regs_and_store
     38  f591				   .OFFSET    SET	{1}
     39  f591				   .TARGET    SET	{2}
     40  f591					      ldy	[DO_GEMS_B + .OFFSET]
     41  f591					      jsr	KernelB_UpdateRegs
     42  f591					      sty	.TARGET
     43  f591					      endm
     44  f591
     45  f591							; Y=Gemini Sprite
     46  f591							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     47  f591							; processor flag Z is TRUE if this is RST.
     48  f591				   KernelA_GenReset subroutine
     49  f591		       c0 00		      cpy	#$00
     50  f593		       f0 01		      beq	.start
     51  f595		       60		      rts
     52  f596							; Current Gemini = $00
     53  f596				   .start
     54  f596		       a6 d1		      ldx	BuildKernelRST
     55  f598		       e0 aa		      cpx	#SENTINEL
     56  f59a		       d0 04		      bne	.set_else
     57  f59c							; We have found the first (and only) RST on this line, set the marker var
     58  f59c		       a2 ff		      ldx	#$ff
     59  f59e		       86 d1		      stx	BuildKernelRST
     60  f5a0				   .set_else
     61  f5a0		       a2 00		      ldx	#$00
     62  f5a2		       60		      rts
     63  f5a3
     64  f5a3							; Y=Gemini Sprite
     65  f5a3							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     66  f5a3							; processor flag Z is TRUE if this is RST.
     67  f5a3				   KernelB_GenPhp subroutine
     68  f5a3		       c0 60		      cpy	#G01
     69  f5a5		       f0 05		      beq	.start
     70  f5a7		       c0 66		      cpy	#G11
     71  f5a9		       f0 01		      beq	.start
     72  f5ab		       60		      rts
     73  f5ac							; Current Gemini = $00
     74  f5ac				   .start
     75  f5ac		       a6 d1		      ldx	BuildKernelRST
     76  f5ae		       e0 aa		      cpx	#SENTINEL
     77  f5b0		       d0 04		      bne	.set_else
     78  f5b2							; We have found the first (and only) RST on this line, set the marker var
     79  f5b2		       84 d1		      sty	BuildKernelRST
     80  f5b4
     81  f5b4							; Set Z flag
     82  f5b4		       a2 00		      ldx	#$00
     83  f5b6				   .set_else
     84  f5b6		       60		      rts
     85  f5b7
     86  f5b7							; Allocates build-time registers for a new Gemini sprite value.
     87  f5b7							; register Y = the storage opcode to write to the result
     88  f5b7							;
     89  f5b7							; NibbleGrp0, NibbleX, NibbleY are compared in that order.
     90  f5b7							; NibbleX, NibbleY are upgraded if not set.
     91  f5b7							; Y=Gemini Sprite
     92  f5b7				   KernelB_UpdateRegs
     93  f5b7				   KernelA_UpdateRegs subroutine
     94  f5b7
     95  f5b7							; If equal to GRP0, return nop
     96  f5b7							; FIXME GRP0 might not always be up to date (should update each entry?)
     97  f5b7							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
     98  f5b7		       c4 d0		      cpy	RamKernelGrp0
     99  f5b9		       d0 03		      bne	.op_start
    100  f5bb							; TODO if this is stx + NOP value, then register doesn't have to change as
    101  f5bb							; often in GEM1ASWITCH
    102  f5bb		       a0 04		      ldy	#BC_NOP
    103  f5bd		       60		      rts
    104  f5be
    105  f5be				   .op_start
    106  f5be		       c4 cc		      cpy	NibbleX
    107  f5c0		       d0 03		      bne	.op_else
    108  f5c2		       a0 86		      ldy	#BC_STX
    109  f5c4		       60		      rts
    110  f5c5				   .op_else
    111  f5c5		       c4 cd		      cpy	NibbleY
    112  f5c7		       d0 03		      bne	.op_end
    113  f5c9		       a0 84		      ldy	#BC_STY
    114  f5cb		       60		      rts
    115  f5cc				   .op_end
    116  f5cc
    117  f5cc				   .set_start
    118  f5cc		       a6 cc		      ldx	NibbleX
    119  f5ce		       e0 aa		      cpx	#SENTINEL
    120  f5d0		       d0 13		      bne	.set_else
    121  f5d2
    122  f5d2							; KA Missile opcode determination
    123  f5d2				   DBG_CHECK_MISSILE_OPCODE
    124  f5d2		       84 cc		      sty	NibbleX
    125  f5d4		       66 cc		      ror	NibbleX	; D0
    126  f5d6		       66 cc		      ror	NibbleX	; D1
    127  f5d8		       a2 86		      ldx	#BC_STX
    128  f5da		       b0 02		      bcs	[. + 4]
    129  f5dc		       a2 84		      ldx	#BC_STY
    130  f5de		       86 c9		      stx	NibbleMissile
    131  f5e0
    132  f5e0							; Set the X operator
    133  f5e0		       84 cc		      sty	NibbleX
    134  f5e2		       a0 86		      ldy	#BC_STX
    135  f5e4		       60		      rts
    136  f5e5				   .set_else
    137  f5e5		       a6 cd		      ldx	NibbleY
    138  f5e7		       e0 aa		      cpx	#SENTINEL
    139  f5e9		       d0 05		      bne	.set_end
    140  f5eb		       84 cd		      sty	NibbleY
    141  f5ed		       a0 84		      ldy	#BC_STY
    142  f5ef		       60		      rts
    143  f5f0				   .set_end
    144  f5f0							; Failed all
      0  f5f0					      ASSERT_RUNTIME	"0"
      1  f5f0				   .COND      SET	"0"
 ASSERT: breakif { pc== $f5f0  && !(  0  ) }
      2  f5f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    146  f5f0		       60		      rts
    147  f5f1
    148  f5f1
    149  f5f1				   game_nibble_populate
    150  f5f1		       ad 00 f1 	      lda	$f100
    151  f5f4		       85 80		      sta	DebugKernelID
    152  f5f6
    153  f5f6		       ad 18 ff 	      lda	shard_map
    154  f5f9		       a0 01		      ldy	#1	; gemini counter, starting at 1
    155  f5fb				   gemini_builder
    156  f5fb		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    157  f5fd		       d0 00		      bne	.no_vd0
    158  f5ff				   .no_vd0
    159  f5ff
    160  f5ff							; Nibble Kernel A
      0  f5ff					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00e6 ????				      seg.U	ignoreme
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini1
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini1Reg
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini2
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini2Reg
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini3
      0 U00e6 ????				      NIBBLE_VAR	NibbleGemini3Reg
    168 U00e6 ????						; NIBBLE_VAR NibbleGemini4
    169 U00e6 ????						; NIBBLE_VAR NibbleMissile
    170 U00e6 ????						; NIBBLE_VAR NibbleVdel1
      0 U00e6 ????				      NIBBLE_VAR	NibbleGrp0
      0 U00e6 ????				      NIBBLE_VAR	NibbleX
      0 U00e6 ????				      NIBBLE_VAR	NibbleY
    174 U00e6 ????
    175 U00e6 ????	       a0 aa		      ldy	#SENTINEL	; sentinel
    176 U00e8 ????	       84 d1		      sty	BuildKernelRST
      0 U00ea ????				      NIBBLE_VAR_STY	NibbleX
      0 U00ea ????				      NIBBLE_VAR_STY	NibbleY
    179 U00ea ????
    180 U00ea ????						; Gemini 1A
    181 U00ea ????			   .K_1A
    182 U00ea ????	       a4 ea		      ldy	[DO_GEMS_A + 0]
    183 U00ec ????	       20 91 f5 	      jsr	KernelA_GenReset
      0 U00ef ????				      NIBBLE_IF	eq
    185 U00ef ????						; Special: Encoding RST0
    186 U00ef ????						; Rewrite lda RamKernelPF1 to be #immediate
    187 U00ef ????	       a0 a9		      ldy	#BC_LDA_IMM
    188 U00f1 ????	       8c 15 f0 	      sty	[KernelA_B - $100]
    189 U00f4 ????	       a0 a0		      ldy	#%10100000
    190 U00f6 ????	       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
    191 U00f9 ????						; Store 1A in GRP0
    192 U00f9 ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
      0 U00fb ????				      NIBBLE_VAR_STY	NibbleGrp0
    194 U00fb ????	       84 d0		      sty	RamKernelGrp0
    195 U00fd ????						; Gemini 1A is RESPx
    196 U00fd ????	       a0 11		      ldy	#EMERALD_SP_RESET
    197 U00ff ????	       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
    198 U0102 ????						; Turn 3-cycle NOP into 4-cycle
    199 U0102 ????	       a0 14		      ldy	#$14	; TODO what is this
    200 U0104 ????	       8c 19 f0 	      sty	[KernelA_D - $100]
      0 U0107 ????				      NIBBLE_ELSE
    202 U0107 ????						; Store 0A in GRP0
    203 U0107 ????	       a4 ea		      ldy	[DO_GEMS_A + 0]
      0 U0109 ????				      NIBBLE_VAR_STY	NibbleGrp0
    205 U0109 ????	       84 d0		      sty	RamKernelGrp0
    206 U010b ????
    207 U010b ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
    208 U010d ????	       20 91 f5 	      jsr	KernelA_GenReset
      0 U0110 ????				      NIBBLE_IF	eq
    210 U0110 ????						; GEM1ASWITCH
      0 U0110 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 0], #BC_STX
      0 U0110 ????				      NIBBLE_WRITE_IMM	[KernelA_D_W + 1], #RESP1	; RESET
      0 U0110 ????				      NIBBLE_ELSE
    214 U0110 ????						; Calculate the 1A value
    215 U0110 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    216 U0113 ????	       c0 01		      cpy	#1
    217 U0115 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    218 U0117 ????	       a0 11		      ldy	#RESP1
    219 U0119 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    220 U011a ????	       a0 1c		      ldy	#GRP1
      0 U011c ????				      NIBBLE_VAR_STY	NibbleGemini1Reg
    222 U011c ????
    223 U011c ????						; Set opcode
    224 U011c ????	       ae d4 fa 	      ldx	SHARD_LUT_RF1
    225 U011f ????	       e0 01		      cpx	#1
    226 U0121 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    227 U0123 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    228 U0125 ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
    229 U0127 ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
      0 U012a ????				      NIBBLE_VAR_STY	NibbleGemini1
    231 U012a ????
      0 U012a ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 0], NibbleGemini1
      0 U012a ????				      NIBBLE_WRITE_VAR	[KernelA_D_W + 1], NibbleGemini1Reg
      0 U012a ????				      NIBBLE_END_IF
      0 U012a ????				      NIBBLE_END_IF
    236 U012a ????
    237 U012a ????						; Stop preserving GRP0
    238 U012a ????	       a0 aa		      ldy	#SENTINEL
    239 U012c ????	       84 d0		      sty	RamKernelGrp0
    240 U012e ????
    241 U012e ????						; NibbleX, NibbleY are upgraded if not set
    242 U012e ????						; Gemini 2A
    243 U012e ????			   .K_2A
    244 U012e ????	       a4 ec		      ldy	[DO_GEMS_A + 2]
    245 U0130 ????	       20 91 f5 	      jsr	KernelA_GenReset
      0 U0133 ????				      NIBBLE_IF	eq
      0 U0133 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #NOP_REG	; NOP
      0 U0133 ????				      NIBBLE_WRITE_IMM	[KernelA_G_W + 1], #RESP1	; RESET
      0 U0133 ????				      NIBBLE_ELSE
    250 U0133 ????						; Set opcode
    251 U0133 ????	       a4 ec		      ldy	[DO_GEMS_A + 2]
    252 U0135 ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
      0 U0138 ????				      NIBBLE_VAR_STY	NibbleGemini2
    254 U0138 ????
    255 U0138 ????						; Set opcode target
    256 U0138 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    257 U013b ????	       c0 02		      cpy	#2
    258 U013d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    259 U013f ????	       a0 11		      ldy	#RESP1
    260 U0141 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    261 U0142 ????	       a0 1c		      ldy	#GRP1
      0 U0144 ????				      NIBBLE_VAR_STY	NibbleGemini2Reg
    263 U0144 ????
      0 U0144 ????				      NIBBLE_WRITE_IMM	[KernelA_E_W + 1], #RESP1
      0 U0144 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 0], NibbleGemini2
      0 U0144 ????				      NIBBLE_WRITE_VAR	[KernelA_G_W + 1], NibbleGemini2Reg	; STX
      0 U0144 ????				      NIBBLE_END_IF
    268 U0144 ????
    269 U0144 ????						; Gemini 3A
    270 U0144 ????			   .K_3A
    271 U0144 ????	       a4 ed		      ldy	[DO_GEMS_A + 3]
    272 U0146 ????	       20 91 f5 	      jsr	KernelA_GenReset
      0 U0149 ????				      NIBBLE_IF	eq
      0 U0149 ????				      NIBBLE_WRITE_IMM	[KernelA_H_W + 1], #RESP1	; RESET
      0 U0149 ????				      NIBBLE_ELSE
    276 U0149 ????						; Set opcode
    277 U0149 ????	       a4 ed		      ldy	[DO_GEMS_A + 3]
    278 U014b ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
      0 U014e ????				      NIBBLE_VAR_STY	NibbleGemini3
    280 U014e ????
    281 U014e ????						; Set opcode target
    282 U014e ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    283 U0151 ????	       c0 03		      cpy	#3
    284 U0153 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    285 U0155 ????	       a0 11		      ldy	#RESP1
    286 U0157 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    287 U0158 ????	       a0 1c		      ldy	#GRP1
      0 U015a ????				      NIBBLE_VAR_STY	NibbleGemini3Reg
    289 U015a ????
      0 U015a ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 0], NibbleGemini3
      0 U015a ????				      NIBBLE_WRITE_VAR	[KernelA_H_W + 1], NibbleGemini3Reg
      0 U015a ????				      NIBBLE_END_IF
      0 U015a ????				      NIBBLE_END_KERNEL
      1  f5ff					      seg	CodeBank3
    294  f5ff
      0  f5ff					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U015a ????				      seg.U	ignoreme
    296 U015a ????						; NIBBLE_VAR NibbleGemini1
    297 U015a ????						; NIBBLE_VAR NibbleGemini1Reg
    298 U015a ????						; NIBBLE_VAR NibbleGemini2
    299 U015a ????						; NIBBLE_VAR NibbleGemini2Reg
    300 U015a ????						; NIBBLE_VAR NibbleGemini3
    301 U015a ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U015a ????				      NIBBLE_VAR	NibbleGemini4
      0 U015a ????				      NIBBLE_VAR	NibbleMissile
      0 U015a ????				      NIBBLE_VAR	NibbleVdel1
      0 U015a ????				      NIBBLE_VAR	NibbleGrp0
      0 U015a ????				      NIBBLE_VAR	NibblePhp
    307 U015a ????
    308 U015a ????						; VD1 default
    309 U015a ????	       a4 eb		      ldy	[DO_GEMS_A + 1]
      0 U015c ????				      NIBBLE_VAR_STY	NibbleVdel1
    311 U015c ????
    312 U015c ????						; Gemini 4A
    313 U015c ????	       ae d5 fa 	      ldx	SHARD_LUT_VD1
    314 U015f ????	       e0 04		      cpx	#4
      0 U0161 ????				      NIBBLE_IF	ne
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0161 ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #BC_PHP
    319 U0161 ????
    320 U0161 ????						; Set PHP
    321 U0161 ????	       a0 26		      ldy	#VDELP1
      0 U0163 ????				      NIBBLE_VAR_STY	NibblePhp
    323 U0163 ????
    324 U0163 ????						; Update VDEL1
    325 U0163 ????	       a4 ee		      ldy	[DO_GEMS_A + 4]
      0 U0165 ????				      NIBBLE_VAR_STY	NibbleVdel1
      0 U0165 ????				      NIBBLE_ELSE
    328 U0165 ????	       a4 ee		      ldy	[DO_GEMS_A + 4]
    329 U0167 ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
      0 U016a ????				      NIBBLE_VAR_STY	NibbleGemini4
    331 U016a ????
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_I_W + 0], #BC_PHP
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U016a ????				      NIBBLE_WRITE_VAR	[KernelA_K_W + 0], NibbleGemini4
      0 U016a ????				      NIBBLE_WRITE_IMM	[KernelA_K_W + 1], #EMERALD_SP
    336 U016a ????
    337 U016a ????						; Set PHP
    338 U016a ????	       a0 11		      ldy	#RESP1
      0 U016c ????				      NIBBLE_VAR_STY	NibblePhp
      0 U016c ????				      NIBBLE_END_IF
    341 U016c ????
    342 U016c ????						; Gemini 5A
    343 U016c ????						; TODO eventually...?
    344 U016c ????
    345 U016c ????						; Missile
    346 U016c ????	       a4 e8		      ldy	DO_MISS_A
    347 U016e ????						; FIXME Why doesn't this branch compile?
    348 U016e ????						; bne .+4
    349 U016e ????						; ldx #BC_NOP
    350 U016e ????						; stx NibbleMissile
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_F - $100], NibbleMissile
    352 U016e ????
    353 U016e ????						; VD1
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL1 - $100], NibbleVdel1
    355 U016e ????						; GRP0
      0 U016e ????				      NIBBLE_WRITE_VAR	[KernelA_VDEL0 - $100], NibbleGrp0
    357 U016e ????
      0 U016e ????				      NIBBLE_WRITE_IMM	NibblePs, #$ff
      0 U016e ????				      NIBBLE_END_KERNEL
      1  f5ff					      seg	CodeBank3
    360  f5ff
    361  f5ff							; Nibble Kernel B
      0  f5ff					      NIBBLE_START_KERNEL	gem_kernel_b_1, 40
      1 U016e ????				      seg.U	ignoreme
    363 U016e ????						; NIBBLE_VAR NibbleGemini1
    364 U016e ????						; NIBBLE_VAR NibbleGemini1Reg
      0 U016e ????				      NIBBLE_VAR	NibbleGemini2
    366 U016e ????						; NIBBLE_VAR NibbleGemini2Reg
      0 U016e ????				      NIBBLE_VAR	NibbleGemini3
    368 U016e ????						; NIBBLE_VAR NibbleGemini3Reg
    369 U016e ????						; NIBBLE_VAR NibbleGemini4
    370 U016e ????						; NIBBLE_VAR NibbleMissile
    371 U016e ????						; NIBBLE_VAR NibbleVdel1
      0 U016e ????				      NIBBLE_VAR	NibbleGrp0
    373 U016e ????
    374 U016e ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    375 U0170 ????	       86 cc		      stx	NibbleX
    376 U0172 ????	       86 cd		      stx	NibbleY
    377 U0174 ????	       86 d1		      stx	BuildKernelRST
    378 U0176 ????
    379 U0176 ????						; Php target default
    380 U0176 ????	       a0 11		      ldy	#RESP1
    381 U0178 ????	       84 ce		      sty	NibblePhp
    382 U017a ????
    383 U017a ????						; Gemini 0B
    384 U017a ????	       a4 f0		      ldy	[DO_GEMS_B + 0]
      0 U017c ????				      NIBBLE_VAR_STY	NibbleGrp0
    386 U017c ????	       84 d0		      sty	RamKernelGrp0
    387 U017e ????						; NIBBLE_WRITE_IMM KernelB_D_W, RamKernelGemini0
    388 U017e ????
    389 U017e ????						; Gemini 1B
    390 U017e ????	       a4 f1		      ldy	[DO_GEMS_B + 1]
    391 U0180 ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
    392 U0183 ????	       84 c2		      sty	NibbleGemini1
    393 U0185 ????
    394 U0185 ????						; Gemini 2B
    395 U0185 ????	       a4 f2		      ldy	[DO_GEMS_B + 2]
    396 U0187 ????	       20 a3 f5 	      jsr	KernelB_GenPhp
      0 U018a ????				      NIBBLE_IF	eq
      0 U018a ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U018a ????			   .OFFSET    SET	3
      2 U018a ????			   .TARGET    SET	NibbleGemini3
      3 U018a ????	       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4 U018c ????	       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5 U018f ????	       84 c6		      sty	.TARGET
    399 U0191 ????
    400 U0191 ????						; Write to PHP in 2B
    401 U0191 ????	       a2 1c		      ldx	#EMERALD_SP
    402 U0193 ????	       86 ce		      stx	NibblePhp
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET	; 2B
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #BC_PHP
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 0], #BC_STA
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #PF1
      0 U0195 ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U0195 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP	; 3B
    410 U0195 ????
    411 U0195 ????						; Update Grp0
    412 U0195 ????	       a4 d1		      ldy	BuildKernelRST
    413 U0197 ????	       84 d0		      sty	RamKernelGrp0
      0 U0199 ????				      NIBBLE_ELSE
    415 U0199 ????						; Gemini 3B
    416 U0199 ????	       a4 f3		      ldy	[DO_GEMS_B + 3]
    417 U019b ????	       20 a3 f5 	      jsr	KernelB_GenPhp
      0 U019e ????				      NIBBLE_IF	eq
    419 U019e ????						; Write to PHP in 3B
      0 U019e ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U019e ????			   .OFFSET    SET	2
      2 U019e ????			   .TARGET    SET	NibbleGemini2
      3 U019e ????	       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01a0 ????	       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5 U01a3 ????	       84 c4		      sty	.TARGET
    421 U01a5 ????	       a2 1c		      ldx	#EMERALD_SP
    422 U01a7 ????	       86 ce		      stx	NibblePhp
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 0], #BC_STY
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_E_W + 1], #EMERALD_SP_RESET
      0 U01a9 ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 1], NibbleGemini2
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 2], #EMERALD_SP	; 2B
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 1], #BC_STA
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_G_W + 2], #PF1
      0 U01a9 ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #BC_PHP	; 3B
    430 U01a9 ????
    431 U01a9 ????						; Update Grp0
    432 U01a9 ????	       a4 d1		      ldy	BuildKernelRST
    433 U01ab ????	       84 d0		      sty	RamKernelGrp0
      0 U01ad ????				      NIBBLE_ELSE
    435 U01ad ????						; Update 2B
      0 U01ad ????				      CALC_REGS_AND_STORE	2, NibbleGemini2
      1 U01ad ????			   .OFFSET    SET	2
      2 U01ad ????			   .TARGET    SET	NibbleGemini2
      3 U01ad ????	       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01af ????	       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5 U01b2 ????	       84 c4		      sty	.TARGET
      0 U01b4 ????				      NIBBLE_WRITE_VAR	[KernelB_F_W + 0], NibbleGemini2
      0 U01b4 ????				      NIBBLE_WRITE_IMM	[KernelB_F_W + 1], #EMERALD_SP
    439 U01b4 ????
    440 U01b4 ????						; Update 3B
      0 U01b4 ????				      CALC_REGS_AND_STORE	3, NibbleGemini3
      1 U01b4 ????			   .OFFSET    SET	3
      2 U01b4 ????			   .TARGET    SET	NibbleGemini3
      3 U01b4 ????	       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4 U01b6 ????	       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5 U01b9 ????	       84 c6		      sty	.TARGET
      0 U01bb ????				      NIBBLE_WRITE_VAR	[KernelB_H_W + 0], NibbleGemini3
      0 U01bb ????				      NIBBLE_WRITE_IMM	[KernelB_H_W + 1], #EMERALD_SP
      0 U01bb ????				      NIBBLE_END_IF
      0 U01bb ????				      NIBBLE_END_IF
    446 U01bb ????
      0 U01bb ????				      NIBBLE_END_KERNEL
      1  f5ff					      seg	CodeBank3
    448  f5ff
    449  f5ff							; Nibble Kernel B
      0  f5ff					      NIBBLE_START_KERNEL	gem_kernel_b_2, 40
      1 U01bb ????				      seg.U	ignoreme
    451 U01bb ????						; NIBBLE_VAR NibbleGemini1
    452 U01bb ????						; NIBBLE_VAR NibbleGemini1Reg
    453 U01bb ????						; NIBBLE_VAR NibbleGemini2
    454 U01bb ????						; NIBBLE_VAR NibbleGemini2Reg
    455 U01bb ????						; NIBBLE_VAR NibbleGemini3
    456 U01bb ????						; NIBBLE_VAR NibbleGemini3Reg
      0 U01bb ????				      NIBBLE_VAR	NibbleGemini4
    458 U01bb ????						; NIBBLE_VAR NibbleMissile
    459 U01bb ????						; NIBBLE_VAR NibbleVdel1
      0 U01bb ????				      NIBBLE_VAR	NibbleGrp0
    461 U01bb ????
    462 U01bb ????						; Gemini 1B
      0 U01bb ????				      NIBBLE_WRITE_IMM	KernelB_D_W, NibbleGemini1
    464 U01bb ????
    465 U01bb ????						; Write out PHP flag comparison
    466 U01bb ????	       a4 d1		      ldy	BuildKernelRST
    467 U01bd ????	       c0 60		      cpy	#G01
      0 U01bf ????				      NIBBLE_IF	eq
      0 U01bf ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamFFByte
      0 U01bf ????				      NIBBLE_ELSE
      0 U01bf ????				      NIBBLE_WRITE_IMM	[KernelB_C - $100 + 1], #RamPF1Value
      0 U01bf ????				      NIBBLE_END_IF
    473 U01bf ????
    474 U01bf ????						; Missile
    475 U01bf ????						; ldy DO_MISS_B
    476 U01bf ????						; NIBBLE_IF eq ; Disabled
    477 U01bf ????						; NIBBLE_WRITE_IMM [KernelB_K - $100], #BC_STA
    478 U01bf ????						; NIBBLE_ELSE
    479 U01bf ????						;     NIBBLE_WRITE_IMM [KernelB_K - $100], NibbleMissile
    480 U01bf ????						; NIBBLE_END_IF
    481 U01bf ????
    482 U01bf ????						; Gemini 4B
    483 U01bf ????	       a4 f4		      ldy	[DO_GEMS_B + 4]
    484 U01c1 ????	       20 b7 f5 	      jsr	KernelA_UpdateRegs
    485 U01c4 ????	       84 c8		      sty	NibbleGemini4
      0 U01c6 ????				      NIBBLE_WRITE_VAR	KernelB_J_W, NibbleGemini4
    487 U01c6 ????
    488 U01c6 ????						; TODO if no PHP, rewrite previous section:
    489 U01c6 ????						; NIBBLE_IF cs
    490 U01c6 ????						;     ; Write to PHP in reset command
    491 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_E_W + 0], #BC_PHP
    492 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    493 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_G_W + 0], #BC_STA, #PF1
    494 U01c6 ????						;     NIBBLE_WRITE_IMM [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    495 U01c6 ????						; NIBBLE_END_IF
    496 U01c6 ????
    497 U01c6 ????						; Make adjustments for sprites.
    498 U01c6 ????	       66 cb		      ror	NibbleGrp0
    499 U01c8 ????	       66 cc		      ror	NibbleX
    500 U01ca ????	       66 cd		      ror	NibbleY
    501 U01cc ????
    502 U01cc ????						; ; VD1
    503 U01cc ????						; NIBBLE_WRITE_IMM [KernelB_VDEL1 - $100], NibbleVdel1
    504 U01cc ????						; GRP0
      0 U01cc ????				      NIBBLE_WRITE_VAR	[KernelB_VDEL0 - $100], NibbleGrp0
    506 U01cc ????
      0 U01cc ????				      NIBBLE_WRITE_IMM	NibblePs, #$00
    508 U01cc ????
      0 U01cc ????				      NIBBLE_END_KERNEL
      1  f5ff					      seg	CodeBank3
    510  f5ff
    511  f5ff							; TODO do this for all rows
    512  f5ff				   DBG_NIBBLE_BUILD subroutine
    513  f5ff		       ae 00 f1 	      ldx	$f100
    514  f602		       e0 0a		      cpx	#$a
    515  f604		       f0 03		      beq	[. + 5]
    516  f606		       4c f3 f6 	      jmp	.kernel_b
    517  f609				   .kernel_a
      0  f609					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f609		       a9 00		      lda	#0
      2  f60b
      3  f60b
      4  f60b
      5  f60b		       a0 aa		      ldy	#SENTINEL
      6  f60d		       84 d1		      sty	BuildKernelRST
      7  f60f		       84 cc		      sty	NibbleX
      8  f611		       84 cd		      sty	NibbleY
      9  f613
     10  f613				   .K_1A
     11  f613		       a4 ea		      ldy	[DO_GEMS_A + 0]
     12  f615		       20 91 f5 	      jsr	KernelA_GenReset
     13  f618				   .if_1
     14  f618		       d0 20		      bne	.else_1
     15  f61a		       38		      sec
     16  f61b		       2a		      rol
     17  f61c
     18  f61c
     19  f61c		       a0 a9		      ldy	#BC_LDA_IMM
     20  f61e		       8c 15 f0 	      sty	[KernelA_B - $100]
     21  f621		       a0 a0		      ldy	#%10100000
     22  f623		       8c 16 f0 	      sty	[KernelA_B - $100 + 1]
     23  f626
     24  f626		       a4 eb		      ldy	[DO_GEMS_A + 1]
     25  f628		       84 cb		      sty	NibbleGrp0
     26  f62a		       84 d0		      sty	RamKernelGrp0
     27  f62c
     28  f62c		       a0 11		      ldy	#EMERALD_SP_RESET
     29  f62e		       8c 18 f0 	      sty	[KernelA_C - $100 + 1]
     30  f631
     31  f631		       a0 14		      ldy	#$14
     32  f633		       8c 19 f0 	      sty	[KernelA_D - $100]
     33  f636		       2a		      rol
     34  f637		       4c 6e f6 	      jmp	.endif_1
     35  f63a
     36  f63a				   .else_1
     37  f63a		       18		      clc
     38  f63b		       2a		      rol
     39  f63c
     40  f63c		       a4 ea		      ldy	[DO_GEMS_A + 0]
     41  f63e		       84 cb		      sty	NibbleGrp0
     42  f640		       84 d0		      sty	RamKernelGrp0
     43  f642		       a4 eb		      ldy	[DO_GEMS_A + 1]
     44  f644		       20 91 f5 	      jsr	KernelA_GenReset
     45  f647				   .if_2
     46  f647		       d0 05		      bne	.else_2
     47  f649		       38		      sec
     48  f64a		       2a		      rol
     49  f64b
     50  f64b		       4c 6e f6 	      jmp	.endif_2
     51  f64e
     52  f64e				   .else_2
     53  f64e		       18		      clc
     54  f64f		       2a		      rol
     55  f650
     56  f650		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     57  f653		       c0 01		      cpy	#1
     58  f655		       d0 03		      .byte.b	$D0, #3
     59  f657		       a0 11		      ldy	#RESP1
     60  f659		       2c		      .byte.b	$2C
     61  f65a		       a0 1c		      ldy	#GRP1
     62  f65c		       84 c3		      sty	NibbleGemini1Reg
     63  f65e
     64  f65e		       ae d4 fa 	      ldx	SHARD_LUT_RF1
     65  f661		       e0 01		      cpx	#1
     66  f663		       a0 86		      ldy	#BC_STX
     67  f665		       f0 05		      .byte.b	$F0, #5
     68  f667		       a4 eb		      ldy	[DO_GEMS_A + 1]
     69  f669		       20 b7 f5 	      jsr	KernelA_UpdateRegs
     70  f66c		       84 c2		      sty	NibbleGemini1
     71  f66e
     72  f66e
     73  f66e				   .endif_2
     74  f66e
     75  f66e
     76  f66e				   .endif_1
     77  f66e
     78  f66e		       a0 aa		      ldy	#SENTINEL
     79  f670		       84 d0		      sty	RamKernelGrp0
     80  f672
     81  f672
     82  f672				   .K_2A
     83  f672		       a4 ec		      ldy	[DO_GEMS_A + 2]
     84  f674		       20 91 f5 	      jsr	KernelA_GenReset
     85  f677				   .if_3
     86  f677		       d0 05		      bne	.else_3
     87  f679		       38		      sec
     88  f67a		       2a		      rol
     89  f67b		       4c 95 f6 	      jmp	.endif_3
     90  f67e
     91  f67e				   .else_3
     92  f67e		       18		      clc
     93  f67f		       2a		      rol
     94  f680
     95  f680		       a4 ec		      ldy	[DO_GEMS_A + 2]
     96  f682		       20 b7 f5 	      jsr	KernelA_UpdateRegs
     97  f685		       84 c4		      sty	NibbleGemini2
     98  f687
     99  f687		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    100  f68a		       c0 02		      cpy	#2
    101  f68c		       d0 03		      .byte.b	$D0, #3
    102  f68e		       a0 11		      ldy	#RESP1
    103  f690		       2c		      .byte.b	$2C
    104  f691		       a0 1c		      ldy	#GRP1
    105  f693		       84 c5		      sty	NibbleGemini2Reg
    106  f695
    107  f695
    108  f695				   .endif_3
    109  f695
    110  f695				   .K_3A
    111  f695		       a4 ed		      ldy	[DO_GEMS_A + 3]
    112  f697		       20 91 f5 	      jsr	KernelA_GenReset
    113  f69a				   .if_4
    114  f69a		       d0 05		      bne	.else_4
    115  f69c		       38		      sec
    116  f69d		       2a		      rol
    117  f69e		       4c b8 f6 	      jmp	.endif_4
    118  f6a1
    119  f6a1				   .else_4
    120  f6a1		       18		      clc
    121  f6a2		       2a		      rol
    122  f6a3
    123  f6a3		       a4 ed		      ldy	[DO_GEMS_A + 3]
    124  f6a5		       20 b7 f5 	      jsr	KernelA_UpdateRegs
    125  f6a8		       84 c6		      sty	NibbleGemini3
    126  f6aa
    127  f6aa		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    128  f6ad		       c0 03		      cpy	#3
    129  f6af		       d0 03		      .byte.b	$D0, #3
    130  f6b1		       a0 11		      ldy	#RESP1
    131  f6b3		       2c		      .byte.b	$2C
    132  f6b4		       a0 1c		      ldy	#GRP1
    133  f6b6		       84 c7		      sty	NibbleGemini3Reg
    134  f6b8
    135  f6b8
    136  f6b8				   .endif_4
    137  f6b8
    138  f6b8		       2a		      rol
    139  f6b9		       2a		      rol
    140  f6ba		       2a		      rol
    141  f6bb		       2a		      rol
    519  f6bc		       85 c0		      sta	NibbleVar1
      0  f6be					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f6be		       a9 00		      lda	#0
      2  f6c0
      3  f6c0
      4  f6c0
      5  f6c0
      6  f6c0
      7  f6c0
      8  f6c0
      9  f6c0		       a4 eb		      ldy	[DO_GEMS_A + 1]
     10  f6c2		       84 ca		      sty	NibbleVdel1
     11  f6c4
     12  f6c4		       ae d5 fa 	      ldx	SHARD_LUT_VD1
     13  f6c7		       e0 04		      cpx	#4
     14  f6c9				   .if_1
     15  f6c9		       f0 0d		      beq	.else_1
     16  f6cb		       38		      sec
     17  f6cc		       2a		      rol
     18  f6cd
     19  f6cd		       a0 26		      ldy	#VDELP1
     20  f6cf		       84 ce		      sty	NibblePhp
     21  f6d1
     22  f6d1		       a4 ee		      ldy	[DO_GEMS_A + 4]
     23  f6d3		       84 ca		      sty	NibbleVdel1
     24  f6d5		       4c e5 f6 	      jmp	.endif_1
     25  f6d8
     26  f6d8				   .else_1
     27  f6d8		       18		      clc
     28  f6d9		       2a		      rol
     29  f6da		       a4 ee		      ldy	[DO_GEMS_A + 4]
     30  f6dc		       20 b7 f5 	      jsr	KernelA_UpdateRegs
     31  f6df		       84 c8		      sty	NibbleGemini4
     32  f6e1
     33  f6e1		       a0 11		      ldy	#RESP1
     34  f6e3		       84 ce		      sty	NibblePhp
     35  f6e5
     36  f6e5
     37  f6e5				   .endif_1
     38  f6e5
     39  f6e5
     40  f6e5
     41  f6e5		       a4 e8		      ldy	DO_MISS_A
     42  f6e7
     43  f6e7
     44  f6e7
     45  f6e7
     46  f6e7
     47  f6e7
     48  f6e7
     49  f6e7		       2a		      rol
     50  f6e8		       2a		      rol
     51  f6e9		       2a		      rol
     52  f6ea		       2a		      rol
     53  f6eb		       2a		      rol
     54  f6ec		       2a		      rol
     55  f6ed		       2a		      rol
    521  f6ee		       85 c1		      sta	NibbleVar2
    522  f6f0		       4c 84 f7 	      jmp	.next
    523  f6f3				   .kernel_b
      0  f6f3					      NIBBLE_gem_kernel_b_1_BUILD		; TODO can this be implied
      1  f6f3		       a9 00		      lda	#0
      2  f6f5
      3  f6f5
      4  f6f5
      5  f6f5
      6  f6f5
      7  f6f5
      8  f6f5
      9  f6f5		       a2 aa		      ldx	#SENTINEL
     10  f6f7		       86 cc		      stx	NibbleX
     11  f6f9		       86 cd		      stx	NibbleY
     12  f6fb		       86 d1		      stx	BuildKernelRST
     13  f6fd
     14  f6fd		       a0 11		      ldy	#RESP1
     15  f6ff		       84 ce		      sty	NibblePhp
     16  f701
     17  f701		       a4 f0		      ldy	[DO_GEMS_B + 0]
     18  f703		       84 cb		      sty	NibbleGrp0
     19  f705		       84 d0		      sty	RamKernelGrp0
     20  f707
     21  f707
     22  f707		       a4 f1		      ldy	[DO_GEMS_B + 1]
     23  f709		       20 b7 f5 	      jsr	KernelA_UpdateRegs
     24  f70c		       84 c2		      sty	NibbleGemini1
     25  f70e
     26  f70e		       a4 f2		      ldy	[DO_GEMS_B + 2]
     27  f710		       20 a3 f5 	      jsr	KernelB_GenPhp
     28  f713				   .if_1
     29  f713		       d0 15		      bne	.else_1
     30  f715		       38		      sec
     31  f716		       2a		      rol
      0  f717					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f717				   .OFFSET    SET	3
      2  f717				   .TARGET    SET	NibbleGemini3
      3  f717		       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4  f719		       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5  f71c		       84 c6		      sty	.TARGET
     33  f71e
     34  f71e		       a2 1c		      ldx	#EMERALD_SP
     35  f720		       86 ce		      stx	NibblePhp
     36  f722
     37  f722		       a4 d1		      ldy	BuildKernelRST
     38  f724		       84 d0		      sty	RamKernelGrp0
     39  f726		       2a		      rol
     40  f727		       4c 57 f7 	      jmp	.endif_1
     41  f72a
     42  f72a				   .else_1
     43  f72a		       18		      clc
     44  f72b		       2a		      rol
     45  f72c
     46  f72c		       a4 f3		      ldy	[DO_GEMS_B + 3]
     47  f72e		       20 a3 f5 	      jsr	KernelB_GenPhp
     48  f731				   .if_2
     49  f731		       d0 14		      bne	.else_2
     50  f733		       38		      sec
     51  f734		       2a		      rol
     52  f735
      0  f735					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f735				   .OFFSET    SET	2
      2  f735				   .TARGET    SET	NibbleGemini2
      3  f735		       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4  f737		       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5  f73a		       84 c4		      sty	.TARGET
     54  f73c		       a2 1c		      ldx	#EMERALD_SP
     55  f73e		       86 ce		      stx	NibblePhp
     56  f740
     57  f740
     58  f740		       a4 d1		      ldy	BuildKernelRST
     59  f742		       84 d0		      sty	RamKernelGrp0
     60  f744		       4c 57 f7 	      jmp	.endif_2
     61  f747
     62  f747				   .else_2
     63  f747		       18		      clc
     64  f748		       2a		      rol
     65  f749
      0  f749					      CALC_REGS_AND_STORE	2, NibbleGemini2
      1  f749				   .OFFSET    SET	2
      2  f749				   .TARGET    SET	NibbleGemini2
      3  f749		       a4 f2		      ldy	[DO_GEMS_B + .OFFSET]
      4  f74b		       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5  f74e		       84 c4		      sty	.TARGET
     67  f750
      0  f750					      CALC_REGS_AND_STORE	3, NibbleGemini3
      1  f750				   .OFFSET    SET	3
      2  f750				   .TARGET    SET	NibbleGemini3
      3  f750		       a4 f3		      ldy	[DO_GEMS_B + .OFFSET]
      4  f752		       20 b7 f5 	      jsr	KernelB_UpdateRegs
      5  f755		       84 c6		      sty	.TARGET
     69  f757
     70  f757
     71  f757				   .endif_2
     72  f757
     73  f757
     74  f757				   .endif_1
     75  f757
     76  f757		       2a		      rol
     77  f758		       2a		      rol
     78  f759		       2a		      rol
     79  f75a		       2a		      rol
     80  f75b		       2a		      rol
     81  f75c		       2a		      rol
    525  f75d		       85 c0		      sta	NibbleVar1
      0  f75f					      NIBBLE_gem_kernel_b_2_BUILD		; TODO can this be implied
      1  f75f		       a9 00		      lda	#0
      2  f761
      3  f761
      4  f761
      5  f761
      6  f761
      7  f761
      8  f761
      9  f761
     10  f761
     11  f761
     12  f761		       a4 d1		      ldy	BuildKernelRST
     13  f763		       c0 60		      cpy	#G01
     14  f765				   .if_1
     15  f765		       d0 05		      bne	.else_1
     16  f767		       38		      sec
     17  f768		       2a		      rol
     18  f769		       4c 6e f7 	      jmp	.endif_1
     19  f76c
     20  f76c				   .else_1
     21  f76c		       18		      clc
     22  f76d		       2a		      rol
     23  f76e
     24  f76e
     25  f76e				   .endif_1
     26  f76e
     27  f76e
     28  f76e
     29  f76e
     30  f76e
     31  f76e
     32  f76e
     33  f76e
     34  f76e		       a4 f4		      ldy	[DO_GEMS_B + 4]
     35  f770		       20 b7 f5 	      jsr	KernelA_UpdateRegs
     36  f773		       84 c8		      sty	NibbleGemini4
     37  f775
     38  f775
     39  f775
     40  f775
     41  f775
     42  f775
     43  f775
     44  f775
     45  f775
     46  f775		       66 cb		      ror	NibbleGrp0
     47  f777		       66 cc		      ror	NibbleX
     48  f779		       66 cd		      ror	NibbleY
     49  f77b
     50  f77b
     51  f77b
     52  f77b
     53  f77b		       2a		      rol
     54  f77c		       2a		      rol
     55  f77d		       2a		      rol
     56  f77e		       2a		      rol
     57  f77f		       2a		      rol
     58  f780		       2a		      rol
     59  f781		       2a		      rol
    527  f782		       85 c1		      sta	NibbleVar2
    528  f784				   .next
    529  f784
    530  f784				   NibbleZeroLoop subroutine
    531  f784							; Copy out
    532  f784		       a2 00		      ldx	#00
    533  f786		       a0 00		      ldy	#$00
    534  f788				   .loop
    535  f788		       b9 c0 00 	      lda	NIBBLE_VAR_START,y
    536  f78b		       99 80 f0 	      sta	CBSRAM_NIBBLE_WRITE,y
    537  f78e		       96 c0		      stx	NIBBLE_VAR_START,y
    538  f790		       c8		      iny
    539  f791		       c0 10		      cpy	#16
    540  f793		       d0 f3		      bne	.loop
    541  f795
    542  f795				   NibbleExitLoop subroutine
    543  f795							; Copy in
    544  f795		       a0 00		      ldy	#$00
    545  f797				   .loop
    546  f797		       b9 80 f1 	      lda	CBSRAM_NIBBLE_READ,y
    547  f79a		       99 c0 00 	      sta	NIBBLE_VAR_START,y
    548  f79d		       c8		      iny
    549  f79e		       c0 10		      cpy	#16
    550  f7a0		       d0 f5		      bne	.loop
    551  f7a2
    552  f7a2							; TODO move this into the row kernel
    553  f7a2				   DBG_NIBBLE_RUN subroutine
    554  f7a2		       ae 00 f1 	      ldx	$f100
    555  f7a5		       e0 0a		      cpx	#$a
    556  f7a7		       f0 03		      beq	[. + 5]
    557  f7a9		       4c 68 f8 	      jmp	.kernel_b
    558  f7ac				   .kernel_a
    559  f7ac		       a5 c0		      lda	NibbleVar1
      0  f7ae					      NIBBLE_gem_kernel_a_1
      1  f7ae		       0a		      asl
      2  f7af		       90 0d		      bcc	.else_1
      3  f7b1
      4  f7b1				   .if_1
      5  f7b1		       2a		      rol
      0  f7b2					      sleep	17
      1  f7b2				   .CYCLES    SET	17
      2  f7b2
      3  f7b2				  -	      IF	.CYCLES < 2
      4  f7b2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7b2				  -	      ERR
      6  f7b2					      ENDIF
      7  f7b2
      8  f7b2					      IF	.CYCLES & 1
      9  f7b2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7b2		       04 00		      nop	0
     11  f7b4				  -	      ELSE
     12  f7b4				  -	      bit	VSYNC
     13  f7b4					      ENDIF
     14  f7b4				   .CYCLES    SET	.CYCLES - 3
     15  f7b4					      ENDIF
     16  f7b4
     17  f7b4					      REPEAT	.CYCLES / 2
     18  f7b4		       ea		      nop
     17  f7b4					      REPEND
     18  f7b5		       ea		      nop
     17  f7b5					      REPEND
     18  f7b6		       ea		      nop
     17  f7b6					      REPEND
     18  f7b7		       ea		      nop
     17  f7b7					      REPEND
     18  f7b8		       ea		      nop
     17  f7b8					      REPEND
     18  f7b9		       ea		      nop
     17  f7b9					      REPEND
     18  f7ba		       ea		      nop
     19  f7bb					      REPEND
      7  f7bb
      8  f7bb
      9  f7bb		       4c db f7 	      jmp	.endif_1
     10  f7be				   .else_1
     11  f7be		       0a		      asl
     12  f7bf		       90 0e		      bcc	.else_2
     13  f7c1
     14  f7c1				   .if_2
     15  f7c1		       a2 86		      ldx	#[ #BC_STX ]
     16  f7c3		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     17  f7c6		       a2 11		      ldx	#[ #RESP1 ]
     18  f7c8		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  f7cb					      sleep	2
      1  f7cb				   .CYCLES    SET	2
      2  f7cb
      3  f7cb				  -	      IF	.CYCLES < 2
      4  f7cb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7cb				  -	      ERR
      6  f7cb					      ENDIF
      7  f7cb
      8  f7cb				  -	      IF	.CYCLES & 1
      9  f7cb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7cb				  -	      nop	0
     11  f7cb				  -	      ELSE
     12  f7cb				  -	      bit	VSYNC
     13  f7cb				  -	      ENDIF
     14  f7cb				  -.CYCLES    SET	.CYCLES - 3
     15  f7cb					      ENDIF
     16  f7cb
     17  f7cb					      REPEAT	.CYCLES / 2
     18  f7cb		       ea		      nop
     19  f7cc					      REPEND
     20  f7cc
     21  f7cc
     22  f7cc		       4c db f7 	      jmp	.endif_2
     23  f7cf				   .else_2
     24  f7cf		       a6 c2		      ldx.z	NibbleGemini1
     25  f7d1		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     26  f7d4		       a6 c3		      ldx.z	NibbleGemini1Reg
     27  f7d6		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  f7d9					      sleep	3
      1  f7d9				   .CYCLES    SET	3
      2  f7d9
      3  f7d9				  -	      IF	.CYCLES < 2
      4  f7d9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7d9				  -	      ERR
      6  f7d9					      ENDIF
      7  f7d9
      8  f7d9					      IF	.CYCLES & 1
      9  f7d9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7d9		       04 00		      nop	0
     11  f7db				  -	      ELSE
     12  f7db				  -	      bit	VSYNC
     13  f7db					      ENDIF
     14  f7db				   .CYCLES    SET	.CYCLES - 3
     15  f7db					      ENDIF
     16  f7db
     17  f7db				  -	      REPEAT	.CYCLES / 2
     18  f7db				  -	      nop
     19  f7db					      REPEND
     29  f7db
     30  f7db				   .endif_2
     31  f7db
     32  f7db				   .endif_1
     33  f7db		       0a		      asl
     34  f7dc		       90 10		      bcc	.else_3
     35  f7de
     36  f7de				   .if_3
     37  f7de		       a2 79		      ldx	#[ #NOP_REG ]
     38  f7e0		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     39  f7e3		       a2 11		      ldx	#[ #RESP1 ]
     40  f7e5		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  f7e8					      sleep	5
      1  f7e8				   .CYCLES    SET	5
      2  f7e8
      3  f7e8				  -	      IF	.CYCLES < 2
      4  f7e8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f7e8				  -	      ERR
      6  f7e8					      ENDIF
      7  f7e8
      8  f7e8					      IF	.CYCLES & 1
      9  f7e8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f7e8		       04 00		      nop	0
     11  f7ea				  -	      ELSE
     12  f7ea				  -	      bit	VSYNC
     13  f7ea					      ENDIF
     14  f7ea				   .CYCLES    SET	.CYCLES - 3
     15  f7ea					      ENDIF
     16  f7ea
     17  f7ea					      REPEAT	.CYCLES / 2
     18  f7ea		       ea		      nop
     19  f7eb					      REPEND
     42  f7eb
     43  f7eb
     44  f7eb		       4c fd f7 	      jmp	.endif_3
     45  f7ee				   .else_3
     46  f7ee		       a2 11		      ldx	#[ #RESP1 ]
     47  f7f0		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     48  f7f3		       a6 c4		      ldx.z	NibbleGemini2
     49  f7f5		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     50  f7f8		       a6 c5		      ldx.z	NibbleGemini2Reg
     51  f7fa		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     52  f7fd
     53  f7fd				   .endif_3
     54  f7fd		       0a		      asl
     55  f7fe		       90 0b		      bcc	.else_4
     56  f800
     57  f800				   .if_4
     58  f800		       a2 11		      ldx	#[ #RESP1 ]
     59  f802		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  f805					      sleep	5
      1  f805				   .CYCLES    SET	5
      2  f805
      3  f805				  -	      IF	.CYCLES < 2
      4  f805				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f805				  -	      ERR
      6  f805					      ENDIF
      7  f805
      8  f805					      IF	.CYCLES & 1
      9  f805					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f805		       04 00		      nop	0
     11  f807				  -	      ELSE
     12  f807				  -	      bit	VSYNC
     13  f807					      ENDIF
     14  f807				   .CYCLES    SET	.CYCLES - 3
     15  f807					      ENDIF
     16  f807
     17  f807					      REPEAT	.CYCLES / 2
     18  f807		       ea		      nop
     19  f808					      REPEND
     61  f808
     62  f808
     63  f808		       4c 15 f8 	      jmp	.endif_4
     64  f80b				   .else_4
     65  f80b		       a6 c6		      ldx.z	NibbleGemini3
     66  f80d		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     67  f810		       a6 c7		      ldx.z	NibbleGemini3Reg
     68  f812		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     69  f815
     70  f815				   .endif_4
    561  f815		       a5 c1		      lda	NibbleVar2
      0  f817					      NIBBLE_gem_kernel_a_2
      1  f817		       0a		      asl
      2  f818		       90 1d		      bcc	.else_1
      3  f81a
      4  f81a				   .if_1
      5  f81a		       a2 85		      ldx	#[ #BC_STA ]
      6  f81c		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  f81f		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f821		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  f824		       a2 85		      ldx	#[ #BC_STA ]
     10  f826		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  f829		       a2 0e		      ldx	#[ #PF1 ]
     12  f82b		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  f82e		       a2 08		      ldx	#[ #BC_PHP ]
     14  f830		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f833					      sleep	2
      1  f833				   .CYCLES    SET	2
      2  f833
      3  f833				  -	      IF	.CYCLES < 2
      4  f833				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f833				  -	      ERR
      6  f833					      ENDIF
      7  f833
      8  f833				  -	      IF	.CYCLES & 1
      9  f833				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f833				  -	      nop	0
     11  f833				  -	      ELSE
     12  f833				  -	      bit	VSYNC
     13  f833				  -	      ENDIF
     14  f833				  -.CYCLES    SET	.CYCLES - 3
     15  f833					      ENDIF
     16  f833
     17  f833					      REPEAT	.CYCLES / 2
     18  f833		       ea		      nop
     19  f834					      REPEND
     16  f834
     17  f834
     18  f834		       4c 52 f8 	      jmp	.endif_1
     19  f837				   .else_1
     20  f837		       a2 08		      ldx	#[ #BC_PHP ]
     21  f839		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  f83c		       a2 85		      ldx	#[ #BC_STA ]
     23  f83e		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  f841		       a2 0e		      ldx	#[ #PF1 ]
     25  f843		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  f846		       a6 c8		      ldx.z	NibbleGemini4
     27  f848		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  f84b		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  f84d		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  f850					      sleep	3
      1  f850				   .CYCLES    SET	3
      2  f850
      3  f850				  -	      IF	.CYCLES < 2
      4  f850				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f850				  -	      ERR
      6  f850					      ENDIF
      7  f850
      8  f850					      IF	.CYCLES & 1
      9  f850					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f850		       04 00		      nop	0
     11  f852				  -	      ELSE
     12  f852				  -	      bit	VSYNC
     13  f852					      ENDIF
     14  f852				   .CYCLES    SET	.CYCLES - 3
     15  f852					      ENDIF
     16  f852
     17  f852				  -	      REPEAT	.CYCLES / 2
     18  f852				  -	      nop
     19  f852					      REPEND
     31  f852
     32  f852				   .endif_1
     33  f852		       a6 c9		      ldx.z	NibbleMissile
     34  f854		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  f857		       a6 ca		      ldx.z	NibbleVdel1
     36  f859		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  f85c		       a6 cb		      ldx.z	NibbleGrp0
     38  f85e		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     39  f861		       a2 ff		      ldx	#[ #$ff ]
     40  f863		       86 cf		      stx	[NibblePs + 0]
    563  f865		       4c 05 f9 	      jmp	.next
    564  f868				   .kernel_b
    565  f868		       a5 c0		      lda	NibbleVar1
      0  f86a					      NIBBLE_gem_kernel_b_1
      1  f86a		       0a		      asl
      2  f86b		       90 29		      bcc	.else_1
      3  f86d
      4  f86d				   .if_1
      5  f86d		       a2 84		      ldx	#[ #BC_STY ]
      6  f86f		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
      7  f872		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  f874		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
      9  f877		       a2 08		      ldx	#[ #BC_PHP ]
     10  f879		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     11  f87c		       a2 85		      ldx	#[ #BC_STA ]
     12  f87e		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     13  f881		       a2 0e		      ldx	#[ #PF1 ]
     14  f883		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     15  f886		       a6 c6		      ldx.z	NibbleGemini3
     16  f888		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     17  f88b		       a2 1c		      ldx	#[ #EMERALD_SP ]
     18  f88d		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     19  f890		       2a		      rol
      0  f891					      sleep	3
      1  f891				   .CYCLES    SET	3
      2  f891
      3  f891				  -	      IF	.CYCLES < 2
      4  f891				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f891				  -	      ERR
      6  f891					      ENDIF
      7  f891
      8  f891					      IF	.CYCLES & 1
      9  f891					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f891		       04 00		      nop	0
     11  f893				  -	      ELSE
     12  f893				  -	      bit	VSYNC
     13  f893					      ENDIF
     14  f893				   .CYCLES    SET	.CYCLES - 3
     15  f893					      ENDIF
     16  f893
     17  f893				  -	      REPEAT	.CYCLES / 2
     18  f893				  -	      nop
     19  f893					      REPEND
     21  f893
     22  f893
     23  f893		       4c dd f8 	      jmp	.endif_1
     24  f896				   .else_1
     25  f896		       0a		      asl
     26  f897		       90 26		      bcc	.else_2
     27  f899
     28  f899				   .if_2
     29  f899		       a2 84		      ldx	#[ #BC_STY ]
     30  f89b		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     31  f89e		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
     32  f8a0		       8e 1e f0 	      stx	[[KernelB_E_W + 1] + 0]
     33  f8a3		       a6 c4		      ldx.z	NibbleGemini2
     34  f8a5		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     35  f8a8		       a2 1c		      ldx	#[ #EMERALD_SP ]
     36  f8aa		       8e 20 f0 	      stx	[[KernelB_F_W + 2] + 0]
     37  f8ad		       a2 85		      ldx	#[ #BC_STA ]
     38  f8af		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     39  f8b2		       a2 0e		      ldx	#[ #PF1 ]
     40  f8b4		       8e 22 f0 	      stx	[[KernelB_G_W + 2] + 0]
     41  f8b7		       a2 08		      ldx	#[ #BC_PHP ]
     42  f8b9		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     43  f8bc
     44  f8bc
     45  f8bc		       4c dd f8 	      jmp	.endif_2
     46  f8bf				   .else_2
     47  f8bf		       a6 c4		      ldx.z	NibbleGemini2
     48  f8c1		       8e 1e f0 	      stx	[[KernelB_F_W + 0] + 0]
     49  f8c4		       a2 1c		      ldx	#[ #EMERALD_SP ]
     50  f8c6		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     51  f8c9		       a6 c6		      ldx.z	NibbleGemini3
     52  f8cb		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     53  f8ce		       a2 1c		      ldx	#[ #EMERALD_SP ]
     54  f8d0		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
      0  f8d3					      sleep	19
      1  f8d3				   .CYCLES    SET	19
      2  f8d3
      3  f8d3				  -	      IF	.CYCLES < 2
      4  f8d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8d3				  -	      ERR
      6  f8d3					      ENDIF
      7  f8d3
      8  f8d3					      IF	.CYCLES & 1
      9  f8d3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8d3		       04 00		      nop	0
     11  f8d5				  -	      ELSE
     12  f8d5				  -	      bit	VSYNC
     13  f8d5					      ENDIF
     14  f8d5				   .CYCLES    SET	.CYCLES - 3
     15  f8d5					      ENDIF
     16  f8d5
     17  f8d5					      REPEAT	.CYCLES / 2
     18  f8d5		       ea		      nop
     17  f8d5					      REPEND
     18  f8d6		       ea		      nop
     17  f8d6					      REPEND
     18  f8d7		       ea		      nop
     17  f8d7					      REPEND
     18  f8d8		       ea		      nop
     17  f8d8					      REPEND
     18  f8d9		       ea		      nop
     17  f8d9					      REPEND
     18  f8da		       ea		      nop
     17  f8da					      REPEND
     18  f8db		       ea		      nop
     17  f8db					      REPEND
     18  f8dc		       ea		      nop
     19  f8dd					      REPEND
     56  f8dd
     57  f8dd				   .endif_2
     58  f8dd
     59  f8dd				   .endif_1
    567  f8dd		       a5 c1		      lda	NibbleVar2
      0  f8df					      NIBBLE_gem_kernel_b_2
      1  f8df		       a2 c2		      ldx	#[ NibbleGemini1 ]
      2  f8e1		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f8e4		       0a		      asl
      4  f8e5		       90 09		      bcc	.else_1
      5  f8e7
      6  f8e7				   .if_1
      7  f8e7		       a2 e0		      ldx	#[ #RamFFByte ]
      8  f8e9		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f8ec					      sleep	2
      1  f8ec				   .CYCLES    SET	2
      2  f8ec
      3  f8ec				  -	      IF	.CYCLES < 2
      4  f8ec				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8ec				  -	      ERR
      6  f8ec					      ENDIF
      7  f8ec
      8  f8ec				  -	      IF	.CYCLES & 1
      9  f8ec				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8ec				  -	      nop	0
     11  f8ec				  -	      ELSE
     12  f8ec				  -	      bit	VSYNC
     13  f8ec				  -	      ENDIF
     14  f8ec				  -.CYCLES    SET	.CYCLES - 3
     15  f8ec					      ENDIF
     16  f8ec
     17  f8ec					      REPEAT	.CYCLES / 2
     18  f8ec		       ea		      nop
     19  f8ed					      REPEND
     10  f8ed
     11  f8ed
     12  f8ed		       4c f7 f8 	      jmp	.endif_1
     13  f8f0				   .else_1
     14  f8f0		       a2 e2		      ldx	#[ #RamPF1Value ]
     15  f8f2		       8e 1a f0 	      stx	[[KernelB_C - $100 + 1] + 0]
      0  f8f5					      sleep	3
      1  f8f5				   .CYCLES    SET	3
      2  f8f5
      3  f8f5				  -	      IF	.CYCLES < 2
      4  f8f5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8f5				  -	      ERR
      6  f8f5					      ENDIF
      7  f8f5
      8  f8f5					      IF	.CYCLES & 1
      9  f8f5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8f5		       04 00		      nop	0
     11  f8f7				  -	      ELSE
     12  f8f7				  -	      bit	VSYNC
     13  f8f7					      ENDIF
     14  f8f7				   .CYCLES    SET	.CYCLES - 3
     15  f8f7					      ENDIF
     16  f8f7
     17  f8f7				  -	      REPEAT	.CYCLES / 2
     18  f8f7				  -	      nop
     19  f8f7					      REPEND
     17  f8f7
     18  f8f7				   .endif_1
     19  f8f7		       a6 c8		      ldx.z	NibbleGemini4
     20  f8f9		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     21  f8fc		       a6 cb		      ldx.z	NibbleGrp0
     22  f8fe		       8e 07 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     23  f901		       a2 00		      ldx	#[ #$00 ]
     24  f903		       86 cf		      stx	[NibblePs + 0]
    569  f905				   .next
    570  f905		       60		      rts
    571  f906
    572  f906
    573  f906							; Populate Gemini array from level_for_game
    574  f906
    575  f906					      mac	gemini_populate
    576  f906				   .TARGET    SET	{1}
    577  f906					      lda	RamNibbleTemp
    578  f906					      and	#%00000011
    579  f906					      tay
    580  f906					      lda	GEMINI_LOOKUP,y
    581  f906					      sta	.TARGET
    582  f906					      endm
    583  f906
    584  f906					      mac	gemini_populate_missile
    585  f906				   .TARGET    SET	{1}
    586  f906					      lda	RamNibbleTemp
    587  f906					      and	#%00000001
    588  f906					      sta	.TARGET
    589  f906					      endm
    590  f906
    591  fa00		       00 00 00 00*	      align	256
    592  fa00
    593  fa00				   gemini_populate
    594  fa00		       a6 e7		      ldx	level_for_game + 3
    595  fa02		       86 dd		      stx	RamNibbleTemp
      0  fa04					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa04				   .TARGET    SET	DO_GEMS_B + 5
      2  fa04		       a5 dd		      lda	RamNibbleTemp
      3  fa06		       29 03		      and	#%00000011
      4  fa08		       a8		      tay
      5  fa09		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa0c		       85 f5		      sta	.TARGET
    597  fa0e		       66 dd		      ror	RamNibbleTemp
    598  fa10		       66 dd		      ror	RamNibbleTemp
      0  fa12					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa12				   .TARGET    SET	DO_GEMS_A + 5
      2  fa12		       a5 dd		      lda	RamNibbleTemp
      3  fa14		       29 03		      and	#%00000011
      4  fa16		       a8		      tay
      5  fa17		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa1a		       85 ef		      sta	.TARGET
    600  fa1c		       66 dd		      ror	RamNibbleTemp
    601  fa1e		       66 dd		      ror	RamNibbleTemp
      0  fa20					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa20				   .TARGET    SET	DO_GEMS_B + 4
      2  fa20		       a5 dd		      lda	RamNibbleTemp
      3  fa22		       29 03		      and	#%00000011
      4  fa24		       a8		      tay
      5  fa25		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa28		       85 f4		      sta	.TARGET
    603  fa2a		       66 dd		      ror	RamNibbleTemp
    604  fa2c		       66 dd		      ror	RamNibbleTemp
      0  fa2e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa2e				   .TARGET    SET	DO_GEMS_A + 4
      2  fa2e		       a5 dd		      lda	RamNibbleTemp
      3  fa30		       29 03		      and	#%00000011
      4  fa32		       a8		      tay
      5  fa33		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa36		       85 ee		      sta	.TARGET
    606  fa38		       66 dd		      ror	RamNibbleTemp
    607  fa3a		       66 dd		      ror	RamNibbleTemp
    608  fa3c
    609  fa3c		       a6 e6		      ldx	level_for_game + 2
    610  fa3e		       86 dd		      stx	RamNibbleTemp
      0  fa40					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa40				   .TARGET    SET	DO_MISS_B
      2  fa40		       a5 dd		      lda	RamNibbleTemp
      3  fa42		       29 01		      and	#%00000001
      4  fa44		       85 e9		      sta	.TARGET
    612  fa46		       66 dd		      ror	RamNibbleTemp
      0  fa48					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa48				   .TARGET    SET	DO_GEMS_B + 3
      2  fa48		       a5 dd		      lda	RamNibbleTemp
      3  fa4a		       29 03		      and	#%00000011
      4  fa4c		       a8		      tay
      5  fa4d		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa50		       85 f3		      sta	.TARGET
    614  fa52		       66 dd		      ror	RamNibbleTemp
    615  fa54		       66 dd		      ror	RamNibbleTemp
      0  fa56					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa56				   .TARGET    SET	DO_GEMS_A + 3
      2  fa56		       a5 dd		      lda	RamNibbleTemp
      3  fa58		       29 03		      and	#%00000011
      4  fa5a		       a8		      tay
      5  fa5b		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa5e		       85 ed		      sta	.TARGET
    617  fa60		       66 dd		      ror	RamNibbleTemp
    618  fa62		       66 dd		      ror	RamNibbleTemp
      0  fa64					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa64				   .TARGET    SET	DO_GEMS_B + 2
      2  fa64		       a5 dd		      lda	RamNibbleTemp
      3  fa66		       29 03		      and	#%00000011
      4  fa68		       a8		      tay
      5  fa69		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa6c		       85 f2		      sta	.TARGET
    620  fa6e		       66 dd		      ror	RamNibbleTemp
    621  fa70		       66 dd		      ror	RamNibbleTemp
    622  fa72
    623  fa72		       66 dd		      ror	RamNibbleTemp
    624  fa74		       a6 e5		      ldx	level_for_game + 1
    625  fa76		       86 dd		      stx	RamNibbleTemp
    626  fa78		       26 dd		      rol	RamNibbleTemp
      0  fa7a					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa7a				   .TARGET    SET	DO_GEMS_A + 2
      2  fa7a		       a5 dd		      lda	RamNibbleTemp
      3  fa7c		       29 03		      and	#%00000011
      4  fa7e		       a8		      tay
      5  fa7f		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa82		       85 ec		      sta	.TARGET
    628  fa84
    629  fa84		       a6 e5		      ldx	level_for_game + 1
    630  fa86		       86 dd		      stx	RamNibbleTemp
    631  fa88		       66 dd		      ror	RamNibbleTemp
      0  fa8a					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa8a				   .TARGET    SET	DO_MISS_A
      2  fa8a		       a5 dd		      lda	RamNibbleTemp
      3  fa8c		       29 01		      and	#%00000001
      4  fa8e		       85 e8		      sta	.TARGET
    633  fa90		       66 dd		      ror	RamNibbleTemp
      0  fa92					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa92				   .TARGET    SET	DO_GEMS_B + 1
      2  fa92		       a5 dd		      lda	RamNibbleTemp
      3  fa94		       29 03		      and	#%00000011
      4  fa96		       a8		      tay
      5  fa97		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa9a		       85 f1		      sta	.TARGET
    635  fa9c		       66 dd		      ror	RamNibbleTemp
    636  fa9e		       66 dd		      ror	RamNibbleTemp
      0  faa0					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  faa0				   .TARGET    SET	DO_GEMS_A + 1
      2  faa0		       a5 dd		      lda	RamNibbleTemp
      3  faa2		       29 03		      and	#%00000011
      4  faa4		       a8		      tay
      5  faa5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  faa8		       85 eb		      sta	.TARGET
    638  faaa		       66 dd		      ror	RamNibbleTemp
    639  faac		       66 dd		      ror	RamNibbleTemp
      0  faae					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  faae				   .TARGET    SET	DO_GEMS_B + 0
      2  faae		       a5 dd		      lda	RamNibbleTemp
      3  fab0		       29 03		      and	#%00000011
      4  fab2		       a8		      tay
      5  fab3		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fab6		       85 f0		      sta	.TARGET
    641  fab8		       66 dd		      ror	RamNibbleTemp
    642  faba		       66 dd		      ror	RamNibbleTemp
    643  fabc
    644  fabc		       a6 e4		      ldx	level_for_game + 0
    645  fabe		       86 dd		      stx	RamNibbleTemp
      0  fac0					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fac0				   .TARGET    SET	DO_GEMS_A + 0
      2  fac0		       a5 dd		      lda	RamNibbleTemp
      3  fac2		       29 03		      and	#%00000011
      4  fac4		       a8		      tay
      5  fac5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fac8		       85 ea		      sta	.TARGET
    647  faca		       66 dd		      ror	RamNibbleTemp
    648  facc		       66 dd		      ror	RamNibbleTemp
    649  face
    650  face		       60		      rts
    651  facf				   gemini_populate_end
    652  facf
    653  fad0		       00		      align	16
    654  fad0
    655  fad0				   GEMINI_LOOKUP
    656  fad0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    657  fad4
    658  fad4				   SHARD_LUT_RF1
    659  fad4		       00		      .byte.b	#0
    660  fad5				   SHARD_LUT_VD1
    661  fad5		       00		      .byte.b	#0
    662  fad6
------- FILE main.s
------- FILE game_state.s LEVEL 2 PASS 2
      0  fad6					      include	"game_state.s"
      1  fad6							; Perform a left rotation on the 32 bit number at
      2  fad6							; location VLA and store the result at location
      3  fad6							; RES. If VLA and RES are the same then the
      4  fad6							; operation is applied directly to the memory,
      5  fad6							; otherwise it is done in the accumulator.
      6  fad6							;
      7  fad6							; On exit: A = ??, X & Y are unchanged.
      8  fad6
      9  fad6							;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     10  fad6					      mac	_ror32
     11  fad6				   VLA	      EQU	{1}
     12  fad6				   RES	      EQU	{2}
     13  fad6					      IF	VLA != RES
     14  fad6					      LDA	VLA+0
     15  fad6					      ROR	A
     16  fad6					      STA	RES+0
     17  fad6					      LDA	VLA+1
     18  fad6					      ROR	A
     19  fad6					      STA	RES+1
     20  fad6					      LDA	VLA+2
     21  fad6					      ROR	A
     22  fad6					      STA	RES+2
     23  fad6					      LDA	VLA+3
     24  fad6					      ROR	A
     25  fad6					      STA	RES+3
     26  fad6					      ELSE
     27  fad6					      ROR	VLA+0
     28  fad6					      ROR	VLA+1
     29  fad6					      ROR	VLA+2
     30  fad6					      ROR	VLA+3
     31  fad6					      ENDIF
     32  fad6					      ENDM
     33  fad6							; Add two 32 bit numbers together and store the
     34  fad6							; result in another memory location. RES may be
     35  fad6							; the same as either VLA or VLB.
     36  fad6							;
     37  fad6							; On exit: A = ??, X & Y are unchanged.
     38  fad6
     39  fad6				   game_state_adder
     40  fad6		       00		      .byte.b	#$0
     41  fad7		       00		      .byte.b	#$0
     42  fad8		       00		      .byte.b	#$0
     43  fad9		       10		      .byte.b	#%10000
     44  fada
     45  fada					      mac	_add32
     46  fada				   .VLA       EQU	{1}
     47  fada				   .VLB       EQU	{2}
     48  fada				   .RES       EQU	{3}
     49  fada					      CLC
     50  fada					      LDA	.VLA+3
     51  fada					      ADC	.VLB+3
     52  fada					      STA	.RES+3
     53  fada					      LDA	.VLA+2
     54  fada					      ADC	.VLB+2
     55  fada					      STA	.RES+2
     56  fada					      LDA	.VLA+1
     57  fada					      ADC	.VLB+1
     58  fada					      STA	.RES+1
     59  fada					      LDA	.VLA+0
     60  fada					      ADC	.VLB+0
     61  fada					      STA	.RES+0
     62  fada					      ENDM
     63  fada
     64  fada				   game_state_setup
     65  fada							; Set up the level
     66  fada		       a9 fb		      lda	#%11111011
     67  fadc		       85 e4		      sta	[level_for_game + 0]
     68  fade		       a9 ff		      lda	#%11111111
     69  fae0		       85 e5		      sta	[level_for_game + 1]
     70  fae2		       a9 ff		      lda	#%11111111
     71  fae4		       85 e6		      sta	[level_for_game + 2]
     72  fae6		       a9 ff		      lda	#%11111111
     73  fae8		       85 e7		      sta	[level_for_game + 3]
     74  faea		       60		      rts
     75  faeb
     76  faf0		       00 00 00 00*	      align	16
     77  faf0				   game_state_mask
     78  faf0		       7f		      .byte.b	#%01111111
     79  faf1		       bf		      .byte.b	#%10111111
     80  faf2		       df		      .byte.b	#%11011111
     81  faf3		       ef		      .byte.b	#%11101111
     82  faf4		       f7		      .byte.b	#%11110111
     83  faf5		       fb		      .byte.b	#%11111011
     84  faf6		       fd		      .byte.b	#%11111101
     85  faf7		       fe		      .byte.b	#%11111110
     86  faf8
     87  faf8				   game_state_tick subroutine
     88  faf8							; jsr game_state_setup
     89  faf8
     90  faf8							; Get index [0, 25]
     91  faf8		       18		      clc
     92  faf9		       a5 d7		      lda	XPos
     93  fafb		       e9 02		      sbc	#2
     94  fafd		       4a		      lsr
     95  fafe		       4a		      lsr
     96  faff		       85 d2		      sta	Temp
     97  fb01
     98  fb01							; Load bit offset
     99  fb01		       29 07		      and	#%111
    100  fb03		       a8		      tay
    101  fb04		       b9 f0 fa 	      lda	game_state_mask,y
    102  fb07		       85 d3		      sta	Temp2
    103  fb09
    104  fb09							; Load sprite offset
    105  fb09		       a5 d2		      lda	Temp
    106  fb0b		       4a		      lsr
    107  fb0c		       4a		      lsr
    108  fb0d		       4a		      lsr
    109  fb0e		       a8		      tay
    110  fb0f		       a5 d3		      lda	Temp2
    111  fb11		       39 e4 00 	      and	level_for_game,y
    112  fb14		       99 e4 00 	      sta	level_for_game,y
    113  fb17		       60		      rts
    114  fb18
    115  fb18				   game_state_tick_1 subroutine
      0  fb18					      _ADD32	level_for_game, game_state_adder, level_for_game
      1  fb18		       00 e4	   .VLA       EQU	level_for_game
      2  fb18		       fa d6	   .VLB       EQU	game_state_adder
      3  fb18		       00 e4	   .RES       EQU	level_for_game
      4  fb18		       18		      CLC
      5  fb19		       a5 e7		      LDA	.VLA+3
      6  fb1b		       6d d9 fa 	      ADC	.VLB+3
      7  fb1e		       85 e7		      STA	.RES+3
      8  fb20		       a5 e6		      LDA	.VLA+2
      9  fb22		       6d d8 fa 	      ADC	.VLB+2
     10  fb25		       85 e6		      STA	.RES+2
     11  fb27		       a5 e5		      LDA	.VLA+1
     12  fb29		       6d d7 fa 	      ADC	.VLB+1
     13  fb2c		       85 e5		      STA	.RES+1
     14  fb2e		       a5 e4		      LDA	.VLA+0
     15  fb30		       6d d6 fa 	      ADC	.VLB+0
     16  fb33		       85 e4		      STA	.RES+0
    117  fb35		       60		      rts
    118  fb36
    119  fb36							; game_state_tick:
    120  fb36							;     lda FrameCount
    121  fb36							;     and #%111
    122  fb36							;     bne .skiprotate
    123  fb36							;     lda level_for_game + 3
    124  fb36							;     ror
    125  fb36							; .rollall:
    126  fb36							;     _ROR32 level_for_game, level_for_game
    127  fb36
    128  fb36							;     lda #%11101111
    129  fb36							;     cmp [level_for_game + 3]
    130  fb36							;     bne .skiprotate
    131  fb36							;     jmp game_state_setup
    132  fb36							; .skiprotate:
    133  fb36							;     rts
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb36					      include	"kernel_border.s"
      1  fb36							; Visible Kernel
      2  fb36
      3  fb36				   KernelBorder subroutine
      4  fb36		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb38
      6  fb38							; First HMOVE
      7  fb38		       85 2a		      sta	HMOVE
      8  fb3a
      9  fb3a							; Border top
     10  fb3a		       a9 00		      lda	#0
     11  fb3c		       85 08		      sta	COLUPF
     12  fb3e		       85 0e		      sta	PF1
     13  fb40		       85 0f		      sta	PF2
     14  fb42		       a9 02		      lda	#SIGNAL_LINE
     15  fb44		       85 09		      sta	COLUBK
     16  fb46
     17  fb46					      REPEAT	6
     18  fb46		       85 02		      sta	WSYNC
     17  fb46					      REPEND
     18  fb48		       85 02		      sta	WSYNC
     17  fb48					      REPEND
     18  fb4a		       85 02		      sta	WSYNC
     17  fb4a					      REPEND
     18  fb4c		       85 02		      sta	WSYNC
     17  fb4c					      REPEND
     18  fb4e		       85 02		      sta	WSYNC
     17  fb4e					      REPEND
     18  fb50		       85 02		      sta	WSYNC
     19  fb52					      REPEND
     20  fb52
     21  fb52		       a9 00		      lda	#0
     22  fb54		       85 09		      sta	COLUBK
     23  fb56		       85 02		      sta	WSYNC
     24  fb58
     25  fb58							; Start top border
     26  fb58				   border_top
     27  fb58							; Make the playfield solid.
     28  fb58		       a9 3f		      lda	#%00111111
     29  fb5a		       85 0e		      sta	PF1
     30  fb5c		       a9 ff		      lda	#%11111111
     31  fb5e		       85 0f		      sta	PF2
     32  fb60
     33  fb60		       a9 42		      lda	#COL_BG
     34  fb62		       a0 00		      ldy	#0
     35  fb64
     36  fb64							; X_XXXX_XX
     37  fb64							; Commented lines removed to save on space.
     38  fb64		       85 08		      sta	COLUPF
     39  fb66		       85 02		      sta	WSYNC
     40  fb68		       84 08		      sty	COLUPF
     41  fb6a		       85 02		      sta	WSYNC
     42  fb6c		       85 08		      sta	COLUPF
     43  fb6e		       85 02		      sta	WSYNC
     44  fb70							; sta COLUPF
     45  fb70		       85 02		      sta	WSYNC
     46  fb72							; sta COLUPF
     47  fb72		       85 02		      sta	WSYNC
     48  fb74		       84 08		      sty	COLUPF
     49  fb76		       85 02		      sta	WSYNC
     50  fb78		       85 08		      sta	COLUPF
     51  fb7a
     52  fb7a		       85 02		      sta	WSYNC
     53  fb7c							; sta COLUPF
     54  fb7c
     55  fb7c				   PlayArea
     56  fb7c							; PF is now the playing area
      0  fb7c					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb7c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb7c  && !(  _scycles == #0  ) }
      2  fb7c					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb7c					      sleep	61
      1  fb7c				   .CYCLES    SET	61
      2  fb7c
      3  fb7c				  -	      IF	.CYCLES < 2
      4  fb7c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb7c				  -	      ERR
      6  fb7c					      ENDIF
      7  fb7c
      8  fb7c					      IF	.CYCLES & 1
      9  fb7c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb7c		       04 00		      nop	0
     11  fb7e				  -	      ELSE
     12  fb7e				  -	      bit	VSYNC
     13  fb7e					      ENDIF
     14  fb7e				   .CYCLES    SET	.CYCLES - 3
     15  fb7e					      ENDIF
     16  fb7e
     17  fb7e					      REPEAT	.CYCLES / 2
     18  fb7e		       ea		      nop
     17  fb7e					      REPEND
     18  fb7f		       ea		      nop
     17  fb7f					      REPEND
     18  fb80		       ea		      nop
     17  fb80					      REPEND
     18  fb81		       ea		      nop
     17  fb81					      REPEND
     18  fb82		       ea		      nop
     17  fb82					      REPEND
     18  fb83		       ea		      nop
     17  fb83					      REPEND
     18  fb84		       ea		      nop
     17  fb84					      REPEND
     18  fb85		       ea		      nop
     17  fb85					      REPEND
     18  fb86		       ea		      nop
     17  fb86					      REPEND
     18  fb87		       ea		      nop
     17  fb87					      REPEND
     18  fb88		       ea		      nop
     17  fb88					      REPEND
     18  fb89		       ea		      nop
     17  fb89					      REPEND
     18  fb8a		       ea		      nop
     17  fb8a					      REPEND
     18  fb8b		       ea		      nop
     17  fb8b					      REPEND
     18  fb8c		       ea		      nop
     17  fb8c					      REPEND
     18  fb8d		       ea		      nop
     17  fb8d					      REPEND
     18  fb8e		       ea		      nop
     17  fb8e					      REPEND
     18  fb8f		       ea		      nop
     17  fb8f					      REPEND
     18  fb90		       ea		      nop
     17  fb90					      REPEND
     18  fb91		       ea		      nop
     17  fb91					      REPEND
     18  fb92		       ea		      nop
     17  fb92					      REPEND
     18  fb93		       ea		      nop
     17  fb93					      REPEND
     18  fb94		       ea		      nop
     17  fb94					      REPEND
     18  fb95		       ea		      nop
     17  fb95					      REPEND
     18  fb96		       ea		      nop
     17  fb96					      REPEND
     18  fb97		       ea		      nop
     17  fb97					      REPEND
     18  fb98		       ea		      nop
     17  fb98					      REPEND
     18  fb99		       ea		      nop
     17  fb99					      REPEND
     18  fb9a		       ea		      nop
     19  fb9b					      REPEND
     59  fb9b		       a9 00		      lda	#%00000000
     60  fb9d		       85 0d		      sta	PF0
     61  fb9f		       a9 20		      lda	#%00100000
     62  fba1		       85 0e		      sta	PF1
     63  fba3		       a9 00		      lda	#%00000000
     64  fba5		       85 0f		      sta	PF2
      0  fba7					      ASSERT_RUNTIME	"_scycles == #0"
      1  fba7				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fba7  && !(  _scycles == #0  ) }
      2  fba7					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fba7					      sleep	7
      1  fba7				   .CYCLES    SET	7
      2  fba7
      3  fba7				  -	      IF	.CYCLES < 2
      4  fba7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fba7				  -	      ERR
      6  fba7					      ENDIF
      7  fba7
      8  fba7					      IF	.CYCLES & 1
      9  fba7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fba7		       04 00		      nop	0
     11  fba9				  -	      ELSE
     12  fba9				  -	      bit	VSYNC
     13  fba9					      ENDIF
     14  fba9				   .CYCLES    SET	.CYCLES - 3
     15  fba9					      ENDIF
     16  fba9
     17  fba9					      REPEAT	.CYCLES / 2
     18  fba9		       ea		      nop
     17  fba9					      REPEND
     18  fbaa		       ea		      nop
     19  fbab					      REPEND
     67  fbab		       4c dd fb 	      jmp	row_start
     68  fbae							; enter row on cycle 10.
     69  fbae
     70  fbae							; reset the background for bottom of playfield
     71  fbae				   border_bottom
     72  fbae							;sta WSYNC
     73  fbae
     74  fbae							; Form the bottom of the level frame.
     75  fbae		       a9 3f		      lda	#%00111111
     76  fbb0		       85 0e		      sta	PF1
     77  fbb2		       a9 ff		      lda	#%11111111
     78  fbb4		       85 0f		      sta	PF2
     79  fbb6
     80  fbb6							; Clear all sprites.
     81  fbb6		       a9 00		      lda	#0
     82  fbb8		       85 1c		      sta	EMERALD_SP
     83  fbba		       85 1b		      sta	JET_SP
     84  fbbc		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fbbe
     86  fbbe		       a9 42		      lda	#COL_BG
     87  fbc0		       a0 00		      ldy	#0
     88  fbc2		       85 02		      sta	WSYNC
     89  fbc4
     90  fbc4		       84 08		      sty	COLUPF
     91  fbc6		       85 02		      sta	WSYNC
     92  fbc8
     93  fbc8		       85 08		      sta	COLUPF
     94  fbca		       85 02		      sta	WSYNC
     95  fbcc
     96  fbcc		       85 02		      sta	WSYNC
     97  fbce
     98  fbce		       85 02		      sta	WSYNC
     99  fbd0
    100  fbd0		       84 08		      sty	COLUPF
    101  fbd2		       85 02		      sta	WSYNC
    102  fbd4
    103  fbd4		       85 08		      sta	COLUPF
    104  fbd6		       85 02		      sta	WSYNC
    105  fbd8		       85 02		      sta	WSYNC
    106  fbda		       4c d0 f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fbdd					      include	"kernel_row.s"
      1  fbdd							; Frame Start
      2  fbdd
      3  fbdd							; Macros for calculating sprite values (GRPx).
      4  fbdd
      5  fbdd							; mac jet_spritedata_calc
      6  fbdd							;
      7  fbdd							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fbdd							; GRP0.
      9  fbdd					      mac	jet_spritedata_calc
     10  fbdd					      dec	RamRowJetpackIndex
     11  fbdd					      ldy	RamRowJetpackIndex
     12  fbdd					      ldx	Frame0,Y
     13  fbdd					      stx	JET_SP
     14  fbdd					      endm
     15  fbdd
     16  fbdd				   row_start
     17  fbdd
     18  fbdd							; [scanline 1]
     19  fbdd				   row_1
     20  fbdd							; Enter after scanline starts on row "9" and wraps
      0  fbdd					      ASSERT_RUNTIME	"_scycles == #10"
      1  fbdd				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fbdd  && !(  _scycles == #10  ) }
      2  fbdd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fbdd
     23  fbdd							; Load sprite details
     24  fbdd		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fbdf		       c5 d6		      cmp	SpriteEnd	; 5c
     26  fbe1		       a9 00		      lda	#0	; 2c
     27  fbe3							; constant 6c: if carry set, load SpriteEnd into y
     28  fbe3		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fbe5		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fbe6		       a5 d6		      lda	SpriteEnd
     31  fbe8		       69 08		      adc	#8
     32  fbea		       85 e3		      sta	RamRowJetpackIndex
     33  fbec
     34  fbec							; Load sprite
     35  fbec		       c6 e3		      dec	RamRowJetpackIndex
     36  fbee		       a4 e3		      ldy	RamRowJetpackIndex
     37  fbf0		       be 00 ff 	      ldx	Frame0,Y
     38  fbf3		       86 1b		      stx	JET_SP
     39  fbf5
     40  fbf5							; TODO assert cycle is not in visible range!
     41  fbf5
     42  fbf5							; Decrease SpriteEnd
     43  fbf5		       38		      sec
     44  fbf6		       a5 d6		      lda	SpriteEnd
     45  fbf8		       e9 08		      sbc	#8
     46  fbfa		       85 d6		      sta	SpriteEnd
     47  fbfc
     48  fbfc							; FIXME Demo: modify kernel A for the next row
     49  fbfc		       a9 aa		      lda	#%010101010
     50  fbfe		       85 cb		      sta	NibbleGrp0
     51  fc00
     52  fc00							; Idle.
     53  fc00		       85 02		      sta	WSYNC
     54  fc02							; sleep 33
     55  fc02
      0  fc02					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc02				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc02  && !(  _scycles == #0  ) }
      2  fc02					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     57  fc02
     58  fc02							; [scanline 2]
     59  fc02				   row_2
      0  fc02					      jet_spritedata_calc
      1  fc02		       c6 e3		      dec	RamRowJetpackIndex
      2  fc04		       a4 e3		      ldy	RamRowJetpackIndex
      3  fc06		       be 00 ff 	      ldx	Frame0,Y
      4  fc09		       86 1b		      stx	JET_SP
      0  fc0b					      sleep	5
      1  fc0b				   .CYCLES    SET	5
      2  fc0b
      3  fc0b				  -	      IF	.CYCLES < 2
      4  fc0b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc0b				  -	      ERR
      6  fc0b					      ENDIF
      7  fc0b
      8  fc0b					      IF	.CYCLES & 1
      9  fc0b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc0b		       04 00		      nop	0
     11  fc0d				  -	      ELSE
     12  fc0d				  -	      bit	VSYNC
     13  fc0d					      ENDIF
     14  fc0d				   .CYCLES    SET	.CYCLES - 3
     15  fc0d					      ENDIF
     16  fc0d
     17  fc0d					      REPEAT	.CYCLES / 2
     18  fc0d		       ea		      nop
     19  fc0e					      REPEND
     62  fc0e
     63  fc0e							; Black out playfield
     64  fc0e							; TODO This should be done with playfield pixels, not color.
     65  fc0e		       a9 00		      lda	#0
     66  fc10		       85 08		      sta	COLUPF
     67  fc12
     68  fc12							; [[[Nibble VM.]]]
      0  fc12					      sleep	25
      1  fc12				   .CYCLES    SET	25
      2  fc12
      3  fc12				  -	      IF	.CYCLES < 2
      4  fc12				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc12				  -	      ERR
      6  fc12					      ENDIF
      7  fc12
      8  fc12					      IF	.CYCLES & 1
      9  fc12					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc12		       04 00		      nop	0
     11  fc14				  -	      ELSE
     12  fc14				  -	      bit	VSYNC
     13  fc14					      ENDIF
     14  fc14				   .CYCLES    SET	.CYCLES - 3
     15  fc14					      ENDIF
     16  fc14
     17  fc14					      REPEAT	.CYCLES / 2
     18  fc14		       ea		      nop
     17  fc14					      REPEND
     18  fc15		       ea		      nop
     17  fc15					      REPEND
     18  fc16		       ea		      nop
     17  fc16					      REPEND
     18  fc17		       ea		      nop
     17  fc17					      REPEND
     18  fc18		       ea		      nop
     17  fc18					      REPEND
     18  fc19		       ea		      nop
     17  fc19					      REPEND
     18  fc1a		       ea		      nop
     17  fc1a					      REPEND
     18  fc1b		       ea		      nop
     17  fc1b					      REPEND
     18  fc1c		       ea		      nop
     17  fc1c					      REPEND
     18  fc1d		       ea		      nop
     17  fc1d					      REPEND
     18  fc1e		       ea		      nop
     19  fc1f					      REPEND
     70  fc1f
     71  fc1f							; Load PF1 value
     72  fc1f		       a9 3d		      lda	#%00111101
     73  fc21		       85 e2		      sta	RamPF1Value
     74  fc23
     75  fc23		       a9 04		      lda	#4
     76  fc25		       8d 96 02 	      sta	TIM64T
     77  fc28
     78  fc28							; Set stack pointer for PHP use from NibblePhp.
     79  fc28		       a6 ce		      ldx	NibblePhp
     80  fc2a		       ca		      dex
     81  fc2b		       9a		      txs
     82  fc2c
     83  fc2c							; Enable playfield at end of scanline
     84  fc2c		       a9 42		      lda	#COL_BG
     85  fc2e		       85 08		      sta	COLUPF
     86  fc30
     87  fc30							; Set overflow flag
     88  fc30		       24 cf		      bit	NibblePs
     89  fc32
      0  fc32					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc32				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc32  && !(  _scycles == #0  ) }
      2  fc32					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     91  fc32
     92  fc32							; [scanline 3]
     93  fc32				   row_3
     94  fc32							; Current row and next two rows.
     95  fc32		       a4 e3		      ldy	RamRowJetpackIndex
     96  fc34		       88		      dey
     97  fc35		       be 00 ff 	      ldx	Frame0,Y
     98  fc38		       86 1b		      stx	JET_SP
     99  fc3a		       88		      dey
    100  fc3b		       be 00 ff 	      ldx	Frame0,Y
    101  fc3e		       86 d0		      stx	RamKernelGrp0
    102  fc40		       88		      dey
    103  fc41		       be 00 ff 	      ldx	Frame0,Y
    104  fc44		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
    105  fc47		       84 e3		      sty	RamRowJetpackIndex
    106  fc49
    107  fc49							; [[[Nibble VM.]]]
    108  fc49							; Idle.
      0  fc49					      sleep	22
      1  fc49				   .CYCLES    SET	22
      2  fc49
      3  fc49				  -	      IF	.CYCLES < 2
      4  fc49				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc49				  -	      ERR
      6  fc49					      ENDIF
      7  fc49
      8  fc49				  -	      IF	.CYCLES & 1
      9  fc49				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc49				  -	      nop	0
     11  fc49				  -	      ELSE
     12  fc49				  -	      bit	VSYNC
     13  fc49				  -	      ENDIF
     14  fc49				  -.CYCLES    SET	.CYCLES - 3
     15  fc49					      ENDIF
     16  fc49
     17  fc49					      REPEAT	.CYCLES / 2
     18  fc49		       ea		      nop
     17  fc49					      REPEND
     18  fc4a		       ea		      nop
     17  fc4a					      REPEND
     18  fc4b		       ea		      nop
     17  fc4b					      REPEND
     18  fc4c		       ea		      nop
     17  fc4c					      REPEND
     18  fc4d		       ea		      nop
     17  fc4d					      REPEND
     18  fc4e		       ea		      nop
     17  fc4e					      REPEND
     18  fc4f		       ea		      nop
     17  fc4f					      REPEND
     18  fc50		       ea		      nop
     17  fc50					      REPEND
     18  fc51		       ea		      nop
     17  fc51					      REPEND
     18  fc52		       ea		      nop
     17  fc52					      REPEND
     18  fc53		       ea		      nop
     19  fc54					      REPEND
    110  fc54
    111  fc54							; Setup for kernel
    112  fc54		       38		      sec		; clear carry bit
    113  fc55		       a6 cc		      ldx	NibbleX
    114  fc57		       a4 cd		      ldy	NibbleY
    115  fc59
    116  fc59							; Jump immediately into scanlines 4-5 aka "kernel_gem"
    117  fc59		       a5 ca		      lda	NibbleVdel1
    118  fc5b		       85 1c		      sta	EMERALD_SP
    119  fc5d		       a5 d0		      lda	RamKernelGrp0	; Load sprite 2 into A
    120  fc5f							; [scanline 4]
    121  fc5f							; [scanline 5]
      0  fc5f					      ASSERT_RUNTIME	"_scycles == #73"
      1  fc5f				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fc5f  && !(  _scycles == #73  ) }
      2  fc5f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    123  fc5f		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    124  fc62
    125  fc62							; [scanline 6]
    126  fc62
    127  fc62				   row_after_kernel
    128  fc62				   row_6
      0  fc62					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc62				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc62  && !(  _scycles == #0  ) }
      2  fc62					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    130  fc62
    131  fc62							; Cleanup from the kernel.
    132  fc62		       a9 00		      lda	#0
    133  fc64		       85 1e		      sta	EMERALD_MI_ENABLE
    134  fc66		       85 1c		      sta	EMERALD_SP
    135  fc68		       85 08		      sta	COLUPF
    136  fc6a
    137  fc6a		       a9 20		      lda	#%00100000
    138  fc6c		       85 0e		      sta	PF1
    139  fc6e
      0  fc6e					      jet_spritedata_calc
      1  fc6e		       c6 e3		      dec	RamRowJetpackIndex
      2  fc70		       a4 e3		      ldy	RamRowJetpackIndex
      3  fc72		       be 00 ff 	      ldx	Frame0,Y
      4  fc75		       86 1b		      stx	JET_SP
    141  fc77
    142  fc77							; Idle.
    143  fc77		       85 02		      sta	WSYNC
    144  fc79
    145  fc79							; [scanline 7]
    146  fc79				   row_7
      0  fc79					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc79				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc79  && !(  _scycles == #0  ) }
      2  fc79					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    148  fc79
    149  fc79							; FIXME this should be enabled!
    150  fc79							; jet_spritedata_calc
    151  fc79
    152  fc79		       a9 42		      lda	#COL_BG
    153  fc7b		       85 08		      sta	COLUPF
    154  fc7d
    155  fc7d							; Idle.
    156  fc7d							; sleep 71
    157  fc7d
    158  fc7d							; Run Kernel.
    159  fc7d		       a5 c1		      lda	NibbleVar2
      0  fc7f					      NIBBLE_gem_kernel_a_2
      1  fc7f		       0a		      asl
      2  fc80		       90 1d		      bcc	.else_1
      3  fc82
      4  fc82				   .if_1
      5  fc82		       a2 85		      ldx	#[ #BC_STA ]
      6  fc84		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
      7  fc87		       a2 11		      ldx	#[ #EMERALD_SP_RESET ]
      8  fc89		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 1]
      9  fc8c		       a2 85		      ldx	#[ #BC_STA ]
     10  fc8e		       8e 25 f0 	      stx	[[KernelA_J_W + 1] + 0]
     11  fc91		       a2 0e		      ldx	#[ #PF1 ]
     12  fc93		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 1]
     13  fc96		       a2 08		      ldx	#[ #BC_PHP ]
     14  fc98		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fc9b					      sleep	2
      1  fc9b				   .CYCLES    SET	2
      2  fc9b
      3  fc9b				  -	      IF	.CYCLES < 2
      4  fc9b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc9b				  -	      ERR
      6  fc9b					      ENDIF
      7  fc9b
      8  fc9b				  -	      IF	.CYCLES & 1
      9  fc9b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc9b				  -	      nop	0
     11  fc9b				  -	      ELSE
     12  fc9b				  -	      bit	VSYNC
     13  fc9b				  -	      ENDIF
     14  fc9b				  -.CYCLES    SET	.CYCLES - 3
     15  fc9b					      ENDIF
     16  fc9b
     17  fc9b					      REPEAT	.CYCLES / 2
     18  fc9b		       ea		      nop
     19  fc9c					      REPEND
     16  fc9c
     17  fc9c
     18  fc9c		       4c ba fc 	      jmp	.endif_1
     19  fc9f				   .else_1
     20  fc9f		       a2 08		      ldx	#[ #BC_PHP ]
     21  fca1		       8e 23 f0 	      stx	[[KernelA_I_W + 0] + 0]
     22  fca4		       a2 85		      ldx	#[ #BC_STA ]
     23  fca6		       8e 24 f0 	      stx	[[KernelA_J_W + 0] + 0]
     24  fca9		       a2 0e		      ldx	#[ #PF1 ]
     25  fcab		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 1]
     26  fcae		       a6 c8		      ldx.z	NibbleGemini4
     27  fcb0		       8e 26 f0 	      stx	[[KernelA_K_W + 0] + 0]
     28  fcb3		       a2 1c		      ldx	#[ #EMERALD_SP ]
     29  fcb5		       8e 27 f0 	      stx	[[KernelA_K_W + 1] + 0]
      0  fcb8					      sleep	3
      1  fcb8				   .CYCLES    SET	3
      2  fcb8
      3  fcb8				  -	      IF	.CYCLES < 2
      4  fcb8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcb8				  -	      ERR
      6  fcb8					      ENDIF
      7  fcb8
      8  fcb8					      IF	.CYCLES & 1
      9  fcb8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcb8		       04 00		      nop	0
     11  fcba				  -	      ELSE
     12  fcba				  -	      bit	VSYNC
     13  fcba					      ENDIF
     14  fcba				   .CYCLES    SET	.CYCLES - 3
     15  fcba					      ENDIF
     16  fcba
     17  fcba				  -	      REPEAT	.CYCLES / 2
     18  fcba				  -	      nop
     19  fcba					      REPEND
     31  fcba
     32  fcba				   .endif_1
     33  fcba		       a6 c9		      ldx.z	NibbleMissile
     34  fcbc		       8e 1d f0 	      stx	[[KernelA_F - $100] + 0]
     35  fcbf		       a6 ca		      ldx.z	NibbleVdel1
     36  fcc1		       8e 2f f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     37  fcc4		       a6 cb		      ldx.z	NibbleGrp0
     38  fcc6		       8e 07 f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     39  fcc9		       a2 ff		      ldx	#[ #$ff ]
     40  fccb		       86 cf		      stx	[NibblePs + 0]
      0  fccd					      sleep	5
      1  fccd				   .CYCLES    SET	5
      2  fccd
      3  fccd				  -	      IF	.CYCLES < 2
      4  fccd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fccd				  -	      ERR
      6  fccd					      ENDIF
      7  fccd
      8  fccd					      IF	.CYCLES & 1
      9  fccd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fccd		       04 00		      nop	0
     11  fccf				  -	      ELSE
     12  fccf				  -	      bit	VSYNC
     13  fccf					      ENDIF
     14  fccf				   .CYCLES    SET	.CYCLES - 3
     15  fccf					      ENDIF
     16  fccf
     17  fccf					      REPEAT	.CYCLES / 2
     18  fccf		       ea		      nop
     19  fcd0					      REPEND
    162  fcd0
    163  fcd0							; [scanline 8]
    164  fcd0				   row_8
      0  fcd0					      ASSERT_RUNTIME	"_scycles == #0"
      1  fcd0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fcd0  && !(  _scycles == #0  ) }
      2  fcd0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    166  fcd0
    167  fcd0							; FIXME this should be enabled!
    168  fcd0							; jet_spritedata_calc
    169  fcd0
    170  fcd0							; [NIBBLE VM]
    171  fcd0		       a5 c0		      lda	NibbleVar1
      0  fcd2					      NIBBLE_gem_kernel_a_1
      1  fcd2		       0a		      asl
      2  fcd3		       90 0d		      bcc	.else_1
      3  fcd5
      4  fcd5				   .if_1
      5  fcd5		       2a		      rol
      0  fcd6					      sleep	17
      1  fcd6				   .CYCLES    SET	17
      2  fcd6
      3  fcd6				  -	      IF	.CYCLES < 2
      4  fcd6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcd6				  -	      ERR
      6  fcd6					      ENDIF
      7  fcd6
      8  fcd6					      IF	.CYCLES & 1
      9  fcd6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcd6		       04 00		      nop	0
     11  fcd8				  -	      ELSE
     12  fcd8				  -	      bit	VSYNC
     13  fcd8					      ENDIF
     14  fcd8				   .CYCLES    SET	.CYCLES - 3
     15  fcd8					      ENDIF
     16  fcd8
     17  fcd8					      REPEAT	.CYCLES / 2
     18  fcd8		       ea		      nop
     17  fcd8					      REPEND
     18  fcd9		       ea		      nop
     17  fcd9					      REPEND
     18  fcda		       ea		      nop
     17  fcda					      REPEND
     18  fcdb		       ea		      nop
     17  fcdb					      REPEND
     18  fcdc		       ea		      nop
     17  fcdc					      REPEND
     18  fcdd		       ea		      nop
     17  fcdd					      REPEND
     18  fcde		       ea		      nop
     19  fcdf					      REPEND
      7  fcdf
      8  fcdf
      9  fcdf		       4c ff fc 	      jmp	.endif_1
     10  fce2				   .else_1
     11  fce2		       0a		      asl
     12  fce3		       90 0e		      bcc	.else_2
     13  fce5
     14  fce5				   .if_2
     15  fce5		       a2 86		      ldx	#[ #BC_STX ]
     16  fce7		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     17  fcea		       a2 11		      ldx	#[ #RESP1 ]
     18  fcec		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  fcef					      sleep	2
      1  fcef				   .CYCLES    SET	2
      2  fcef
      3  fcef				  -	      IF	.CYCLES < 2
      4  fcef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcef				  -	      ERR
      6  fcef					      ENDIF
      7  fcef
      8  fcef				  -	      IF	.CYCLES & 1
      9  fcef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcef				  -	      nop	0
     11  fcef				  -	      ELSE
     12  fcef				  -	      bit	VSYNC
     13  fcef				  -	      ENDIF
     14  fcef				  -.CYCLES    SET	.CYCLES - 3
     15  fcef					      ENDIF
     16  fcef
     17  fcef					      REPEAT	.CYCLES / 2
     18  fcef		       ea		      nop
     19  fcf0					      REPEND
     20  fcf0
     21  fcf0
     22  fcf0		       4c ff fc 	      jmp	.endif_2
     23  fcf3				   .else_2
     24  fcf3		       a6 c2		      ldx.z	NibbleGemini1
     25  fcf5		       8e 19 f0 	      stx	[[KernelA_D_W + 0] + 0]
     26  fcf8		       a6 c3		      ldx.z	NibbleGemini1Reg
     27  fcfa		       8e 1a f0 	      stx	[[KernelA_D_W + 1] + 0]
      0  fcfd					      sleep	3
      1  fcfd				   .CYCLES    SET	3
      2  fcfd
      3  fcfd				  -	      IF	.CYCLES < 2
      4  fcfd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcfd				  -	      ERR
      6  fcfd					      ENDIF
      7  fcfd
      8  fcfd					      IF	.CYCLES & 1
      9  fcfd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcfd		       04 00		      nop	0
     11  fcff				  -	      ELSE
     12  fcff				  -	      bit	VSYNC
     13  fcff					      ENDIF
     14  fcff				   .CYCLES    SET	.CYCLES - 3
     15  fcff					      ENDIF
     16  fcff
     17  fcff				  -	      REPEAT	.CYCLES / 2
     18  fcff				  -	      nop
     19  fcff					      REPEND
     29  fcff
     30  fcff				   .endif_2
     31  fcff
     32  fcff				   .endif_1
     33  fcff		       0a		      asl
     34  fd00		       90 10		      bcc	.else_3
     35  fd02
     36  fd02				   .if_3
     37  fd02		       a2 79		      ldx	#[ #NOP_REG ]
     38  fd04		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     39  fd07		       a2 11		      ldx	#[ #RESP1 ]
     40  fd09		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
      0  fd0c					      sleep	5
      1  fd0c				   .CYCLES    SET	5
      2  fd0c
      3  fd0c				  -	      IF	.CYCLES < 2
      4  fd0c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd0c				  -	      ERR
      6  fd0c					      ENDIF
      7  fd0c
      8  fd0c					      IF	.CYCLES & 1
      9  fd0c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd0c		       04 00		      nop	0
     11  fd0e				  -	      ELSE
     12  fd0e				  -	      bit	VSYNC
     13  fd0e					      ENDIF
     14  fd0e				   .CYCLES    SET	.CYCLES - 3
     15  fd0e					      ENDIF
     16  fd0e
     17  fd0e					      REPEAT	.CYCLES / 2
     18  fd0e		       ea		      nop
     19  fd0f					      REPEND
     42  fd0f
     43  fd0f
     44  fd0f		       4c 21 fd 	      jmp	.endif_3
     45  fd12				   .else_3
     46  fd12		       a2 11		      ldx	#[ #RESP1 ]
     47  fd14		       8e 1c f0 	      stx	[[KernelA_E_W + 1] + 0]
     48  fd17		       a6 c4		      ldx.z	NibbleGemini2
     49  fd19		       8e 1f f0 	      stx	[[KernelA_G_W + 0] + 0]
     50  fd1c		       a6 c5		      ldx.z	NibbleGemini2Reg
     51  fd1e		       8e 20 f0 	      stx	[[KernelA_G_W + 1] + 0]
     52  fd21
     53  fd21				   .endif_3
     54  fd21		       0a		      asl
     55  fd22		       90 0b		      bcc	.else_4
     56  fd24
     57  fd24				   .if_4
     58  fd24		       a2 11		      ldx	#[ #RESP1 ]
     59  fd26		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
      0  fd29					      sleep	5
      1  fd29				   .CYCLES    SET	5
      2  fd29
      3  fd29				  -	      IF	.CYCLES < 2
      4  fd29				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd29				  -	      ERR
      6  fd29					      ENDIF
      7  fd29
      8  fd29					      IF	.CYCLES & 1
      9  fd29					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd29		       04 00		      nop	0
     11  fd2b				  -	      ELSE
     12  fd2b				  -	      bit	VSYNC
     13  fd2b					      ENDIF
     14  fd2b				   .CYCLES    SET	.CYCLES - 3
     15  fd2b					      ENDIF
     16  fd2b
     17  fd2b					      REPEAT	.CYCLES / 2
     18  fd2b		       ea		      nop
     19  fd2c					      REPEND
     61  fd2c
     62  fd2c
     63  fd2c		       4c 39 fd 	      jmp	.endif_4
     64  fd2f				   .else_4
     65  fd2f		       a6 c6		      ldx.z	NibbleGemini3
     66  fd31		       8e 21 f0 	      stx	[[KernelA_H_W + 0] + 0]
     67  fd34		       a6 c7		      ldx.z	NibbleGemini3Reg
     68  fd36		       8e 22 f0 	      stx	[[KernelA_H_W + 1] + 0]
     69  fd39
     70  fd39				   .endif_4
      0  fd39					      sleep	3
      1  fd39				   .CYCLES    SET	3
      2  fd39
      3  fd39				  -	      IF	.CYCLES < 2
      4  fd39				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd39				  -	      ERR
      6  fd39					      ENDIF
      7  fd39
      8  fd39					      IF	.CYCLES & 1
      9  fd39					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd39		       04 00		      nop	0
     11  fd3b				  -	      ELSE
     12  fd3b				  -	      bit	VSYNC
     13  fd3b					      ENDIF
     14  fd3b				   .CYCLES    SET	.CYCLES - 3
     15  fd3b					      ENDIF
     16  fd3b
     17  fd3b				  -	      REPEAT	.CYCLES / 2
     18  fd3b				  -	      nop
     19  fd3b					      REPEND
    174  fd3b
    175  fd3b							; Idle.
    176  fd3b							; sleep 51
    177  fd3b							; sta WSYNC
    178  fd3b
    179  fd3b							; [scanline 8-1]
      0  fd3b					      ASSERT_RUNTIME	"_scycles == #0"
      1  fd3b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fd3b  && !(  _scycles == #0  ) }
      2  fd3b					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fd3b							; Repeat loop until LoopCount < 0
    182  fd3b		       c6 d4		      dec	LoopCount
    183  fd3d		       f0 03		      beq	row_end
    184  fd3f		       4c dd fb 	      jmp	row_start
    185  fd42				   row_end
    186  fd42		       4c ae fb 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fd45					      include	"kernel_gem.s"
      1  fd45							;
      2  fd45							; Gem Kernels
      3  fd45							;
      4  fd45							; Gems are displayed in alternating kernels. This chart shows
      5  fd45							; which kernel is responsible for which gem, with missiles denoted.
      6  fd45							;
      7  fd45							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fd45							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fd45							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fd45							;  #	 0^	 8^	  17^	    26^       gem index
     11  fd45							;
     12  fd45							; The middle bar indicates where the pattern reverses.
     13  fd45							;
     14  fd45							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fd45							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fd45							; requires with a single sprite. By alternating sprites each frame with an...
     17  fd45							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fd45							; line, except for two. These are instead rendered by the missile, which
     19  fd45							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fd45
     21  fd45							; for copying
     22  fe00		       00 00 00 00*	      align	256
     23  fe00
     24  fe00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fe00							;
     26  fe00							; GEM KERNEL A
     27  fe00							;
     28  fe00
     29  fe00				   kernel_1_start subroutine
     30  fe00					      rorg	$f100
     31  fe00
     32  fe00							; Kernel Marker
     33  fe00		       0a		      .byte.b	$A
     34  fe01
     35  fe01				   KernelA_early
      0  fe01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fe01				   .KERNEL    SET	$A
      2  fe01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fe01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fe01		       b8		      clv
     38  fe02
     39  fe02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fe02		       a9 ff		      lda	#$ff
     41  fe02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fe04
     43  fe04				   KernelA    subroutine
      0  fe04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fe04				   .KERNEL    SET	$A
      2  fe04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fe04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fe04
     46  fe04							; Write Player from accumulator. When writing to the other sprite, the
     47  fe04							; TIA will copy Gemini 0A into visible sprite register
     48  fe04		       85 1b		      sta	JET_SP
     49  fe06							; Write Gemini 1A into visible sprite register
     50  fe06		       a9 66		      lda	#%01100110
     51  fe06		       f1 07	   KernelA_VDEL0 =	. - 1
     52  fe08		       85 1c		      sta	EMERALD_SP
     53  fe0a
     54  fe0a							; Register config
     55  fe0a		       a9 08		      lda	#%00001000
     56  fe0c		       85 0c		      sta	REFP1
     57  fe0e
     58  fe0e		       a9 20		      lda	#%00100000
     59  fe10		       85 0e		      sta	PF1
     60  fe12
     61  fe12							; Reset stack pointer
     62  fe12		       68		      pla
     63  fe13
     64  fe13							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fe13					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fe13				   .KERNEL    SET	$A
      2  fe13				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f113  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fe13					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fe13				   KernelA_A
     67  fe13		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fe15
     69  fe15							; RST0 vvv
     70  fe15				   KernelA_B
     71  fe15		       a5 e2		      lda	RamPF1Value
     72  fe17				   KernelA_C
     73  fe17		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fe19				   KernelA_D
     75  fe19							; sty EMERALD_SP ; Gemini 1A
      0  fe19					      sleep	3
      1  fe19				   .CYCLES    SET	3
      2  fe19
      3  fe19				  -	      IF	.CYCLES < 2
      4  fe19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe19				  -	      ERR
      6  fe19					      ENDIF
      7  fe19
      8  fe19					      IF	.CYCLES & 1
      9  fe19					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe19		       04 00		      nop	0
     11  fe1b				  -	      ELSE
     12  fe1b				  -	      bit	VSYNC
     13  fe1b					      ENDIF
     14  fe1b				   .CYCLES    SET	.CYCLES - 3
     15  fe1b					      ENDIF
     16  fe1b
     17  fe1b				  -	      REPEAT	.CYCLES / 2
     18  fe1b				  -	      nop
     19  fe1b					      REPEND
     77  fe1b							; RST0 ^^^
     78  fe1b
     79  fe1b				   KernelA_E
     80  fe1b		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     81  fe1d				   KernelA_F
     82  fe1d		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     83  fe1f				   KernelA_G
     84  fe1f		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     85  fe21
     86  fe21				   KernelA_H
     87  fe21		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     88  fe23
      0  fe23					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fe23				   .KERNEL    SET	$A
      2  fe23				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f123  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fe23					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     90  fe23							; RST4 vvv
     91  fe23				   KernelA_I
     92  fe23		       08		      php		; Reset "medium close" NUSIZ repetition
     93  fe24				   KernelA_J		; unchanging
     94  fe24		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     95  fe26				   KernelA_K
     96  fe26		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     97  fe28							; RST4 ^^^
     98  fe28
     99  fe28				   KernelA_L
    100  fe28		       a5 de		      lda	RamZeroByte	; FIXME this doesn't belong here
    101  fe2a				   KernelA_M
    102  fe2a		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    103  fe2c				   KernelA_N
    104  fe2c		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME better place for this?
    105  fe2e				   KernelA_O
    106  fe2e		       a9 66		      lda	#%01100110
    107  fe2e		       f1 2f	   KernelA_VDEL1 =	. - 1
    108  fe30
    109  fe30							; End visible line
      0  fe30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #66"
      1  fe30				   .KERNEL    SET	$A
      2  fe30				   .COND      SET	"_scycles == #66"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #66  ) }
      3  fe30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fe30				   KernelA_branch
    112  fe30		       85 1c		      sta	EMERALD_SP	; set VDEL1
    113  fe32
    114  fe32							; Branch or return.
    115  fe32		       70 cd		      bvs	KernelA_early
      0  fe34					      sleep	2
      1  fe34				   .CYCLES    SET	2
      2  fe34
      3  fe34				  -	      IF	.CYCLES < 2
      4  fe34				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe34				  -	      ERR
      6  fe34					      ENDIF
      7  fe34
      8  fe34				  -	      IF	.CYCLES & 1
      9  fe34				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe34				  -	      nop	0
     11  fe34				  -	      ELSE
     12  fe34				  -	      bit	VSYNC
     13  fe34				  -	      ENDIF
     14  fe34				  -.CYCLES    SET	.CYCLES - 3
     15  fe34					      ENDIF
     16  fe34
     17  fe34					      REPEAT	.CYCLES / 2
     18  fe34		       ea		      nop
     19  fe35					      REPEND
    117  fe35		       4c 62 fc 	      jmp	row_after_kernel
    118  fe38
    119  fe38					      rend
    120  fe38				   kernel_1_end
      0  fe38					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fe38				   .STARTA    SET	kernel_1_start
      2  fe38				   .ENDA      SET	kernel_1_end
      3  fe38				   .LEN       SET	$40
      4  fe38				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe38				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe38				  -	      err
      7  fe38					      endif
    122  fe38
    123  fe38							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    124  fe38							;
    125  fe38							; GEM KERNEL B
    126  fe38							;
    127  fe38
    128  fe38				   kernel_2_start subroutine
    129  fe38					      rorg	$f100
    130  fe38
    131  fe38							; Kernel Marker
    132  fe38		       0b		      .byte.b	$B
    133  fe39
    134  fe39		       b8		      clv
    135  fe3a
    136  fe3a				   KernelB_early
    137  fe3a							; Early code to set next GRP0 image. Value is overwritten
    138  fe3a		       a9 ff		      lda	#$ff
    139  fe3a		       f1 03	   KernelB_GRP0 =	. - 1
    140  fe3c
    141  fe3c				   KernelB    subroutine
      0  fe3c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fe3c				   .KERNEL    SET	$B
      2  fe3c				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fe3c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    143  fe3c
    144  fe3c							; Write Player from accumulator. When writing to the other sprite, the
    145  fe3c							; TIA will copy Gemini 0A into visible sprite register
    146  fe3c		       85 1b		      sta	JET_SP
    147  fe3e		       a9 aa		      lda	#%10101010
    148  fe3e		       f1 07	   KernelB_VDEL0 =	. - 1
    149  fe40							; Write Gemini 1A into delayed sprite register
    150  fe40		       85 1c		      sta	EMERALD_SP
    151  fe42
    152  fe42							; Reset stack
    153  fe42		       68		      pla
    154  fe43
    155  fe43							; 6c
    156  fe43		       a9 20		      lda	#%00100000
    157  fe45		       85 0e		      sta	PF1
    158  fe47
    159  fe47							; Register config
    160  fe47		       a9 ff		      lda	#$ff
    161  fe49		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    162  fe4b
    163  fe4b							; Set processor register bit for PHP sprite rendering.
      0  fe4b					      sleep	3
      1  fe4b				   .CYCLES    SET	3
      2  fe4b
      3  fe4b				  -	      IF	.CYCLES < 2
      4  fe4b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe4b				  -	      ERR
      6  fe4b					      ENDIF
      7  fe4b
      8  fe4b					      IF	.CYCLES & 1
      9  fe4b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe4b		       04 00		      nop	0
     11  fe4d				  -	      ELSE
     12  fe4d				  -	      bit	VSYNC
     13  fe4d					      ENDIF
     14  fe4d				   .CYCLES    SET	.CYCLES - 3
     15  fe4d					      ENDIF
     16  fe4d
     17  fe4d				  -	      REPEAT	.CYCLES / 2
     18  fe4d				  -	      nop
     19  fe4d					      REPEND
    165  fe4d
    166  fe4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fe4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fe4d				   .KERNEL    SET	$B
      2  fe4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fe4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    168  fe4d				   KernelB_A
    169  fe4d		       85 11		      sta	EMERALD_SP_RESET
    170  fe4f				   KernelB_B
    171  fe4f		       a5 e2		      lda	RamPF1Value
    172  fe51				   KernelB_C
    173  fe51		       c5 e2		      cmp	RamPF1Value
    174  fe53				   KernelB_D
    175  fe53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    176  fe55
    177  fe55							; below has one php load (could just be RESET)
    178  fe55				   KernelB_E
    179  fe55		       08		      php
    180  fe56				   KernelB_F
    181  fe56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    182  fe58				   KernelB_G
    183  fe58		       85 0e		      sta	PF1
    184  fe5a				   KernelB_H
    185  fe5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    186  fe5c							; above has one PHP load
    187  fe5c
    188  fe5c				   KernelB_I
    189  fe5c		       85 11		      sta	EMERALD_SP_RESET
    190  fe5e				   KernelB_J
    191  fe5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    192  fe60				   KernelB_K
    193  fe60		       85 1e		      sta	EMERALD_MI_ENABLE	; FIXME this can't rely on sta
    194  fe62				   KernelB_L
    195  fe62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    196  fe64
    197  fe64				   KernelB_M
      0  fe64					      sleep	3
      1  fe64				   .CYCLES    SET	3
      2  fe64
      3  fe64				  -	      IF	.CYCLES < 2
      4  fe64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe64				  -	      ERR
      6  fe64					      ENDIF
      7  fe64
      8  fe64					      IF	.CYCLES & 1
      9  fe64					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe64		       04 00		      nop	0
     11  fe66				  -	      ELSE
     12  fe66				  -	      bit	VSYNC
     13  fe66					      ENDIF
     14  fe66				   .CYCLES    SET	.CYCLES - 3
     15  fe66					      ENDIF
     16  fe66
     17  fe66				  -	      REPEAT	.CYCLES / 2
     18  fe66				  -	      nop
     19  fe66					      REPEND
    199  fe66				   KernelB_N
      0  fe66					      sleep	3
      1  fe66				   .CYCLES    SET	3
      2  fe66
      3  fe66				  -	      IF	.CYCLES < 2
      4  fe66				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fe66				  -	      ERR
      6  fe66					      ENDIF
      7  fe66
      8  fe66					      IF	.CYCLES & 1
      9  fe66					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fe66		       04 00		      nop	0
     11  fe68				  -	      ELSE
     12  fe68				  -	      bit	VSYNC
     13  fe68					      ENDIF
     14  fe68				   .CYCLES    SET	.CYCLES - 3
     15  fe68					      ENDIF
     16  fe68
     17  fe68				  -	      REPEAT	.CYCLES / 2
     18  fe68				  -	      nop
     19  fe68					      REPEND
    201  fe68
    202  fe68							; End visible line
      0  fe68					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fe68				   .KERNEL    SET	$B
      2  fe68				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fe68					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    204  fe68
    205  fe68				   KernelB_branch
    206  fe68		       ad 84 02 	      lda	INTIM
    207  fe6b		       d0 cd		      bne	KernelB_early
    208  fe6d		       4c 62 fc 	      jmp	row_after_kernel
    209  fe70
    210  fe70					      rend
    211  fe70				   kernel_2_end
      0  fe70					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fe70				   .STARTA    SET	kernel_2_start
      2  fe70				   .ENDA      SET	kernel_2_end
      3  fe70				   .LEN       SET	$40
      4  fe70				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fe70				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fe70				  -	      err
      7  fe70					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fe70					      include	"data_sprites.s"
      1  fe70
      2  ff00		       00 00 00 00*	      align	256
      3  ff00
      4  ff00				   Frame0
      5  ff00							; 8 buffer
      6  ff00		       00		      .byte.b	#%00000000
      7  ff01		       00		      .byte.b	#%00000000
      8  ff02		       00		      .byte.b	#%00000000
      9  ff03		       00		      .byte.b	#%00000000
     10  ff04		       00		      .byte.b	#%00000000
     11  ff05		       00		      .byte.b	#%00000000
     12  ff06		       00		      .byte.b	#%00000000
     13  ff07		       00		      .byte.b	#%00000000
     14  ff08
     15  ff08							; 8 rows
     16  ff08		       60		      .byte.b	#%01100000
     17  ff09		       60		      .byte.b	#%01100000
     18  ff0a		       60		      .byte.b	#%01100000
     19  ff0b		       c0		      .byte.b	#%11000000
     20  ff0c		       c0		      .byte.b	#%11000000
     21  ff0d		       f0		      .byte.b	#%11110000
     22  ff0e		       c0		      .byte.b	#%11000000
     23  ff0f		       c0		      .byte.b	#%11000000
     24  ff10
     25  ff10							; 8 buffer
     26  ff10		       00		      .byte.b	#%00000000
     27  ff11		       00		      .byte.b	#%00000000
     28  ff12		       00		      .byte.b	#%00000000
     29  ff13		       00		      .byte.b	#%00000000
     30  ff14		       00		      .byte.b	#%00000000
     31  ff15		       00		      .byte.b	#%00000000
     32  ff16		       00		      .byte.b	#%00000000
     33  ff17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  ff18					      include	"data_levels.s"
      1  ff18					      align	8
      2  ff18
      3  ff18				   shard_map
      4  ff18		       40		      .byte.b	%01000000	; [1, 0, 0]
      5  ff19				   shard_map_end
------- FILE main.s
    136  ff19
    137  fffc					      org	$fffc
    138  fffc		       09 f2		      .word.w	Start
    139  fffe		       09 f2		      .word.w	Start
