------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00b7 ????				      seg.u	Variables
      2 U00b7 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; only for debugging
      6 U0081
      7 U0081		       00	   Temp       byte.b
      8 U0082
      9 U0082							; Counters
     10 U0082		       00	   RowCount   byte.b
     11 U0083		       00	   LoopCount  byte.b
     12 U0084		       00	   FrameCount byte.b
     13 U0085
     14 U0085		       00	   YP1	      byte.b
     15 U0086		       00	   SpriteEnd  byte.b
     16 U0087		       00	   XPos       byte.b		; X position of player sprite
     17 U0088
     18 U0088
     19 U0088		       00	   Speed1     byte.b
     20 U0089		       00	   Speed2     byte.b
     21 U008a
     22 U008a		       00	   YPos       byte.b		; Y position of player sprite
     23 U008b		       00	   YPos2      byte.b
     24 U008c
     25 U008c		       00	   GEM_02_TARGET byte.b
     26 U008d
     27 U008d		       00	   JMP_ADDR   byte.b
     28 U008e		       00	   JMP_ADDR_2 byte.b
     29 U008f
     30 U008f		       00	   ROW_DEMO_INDEX byte.b
     31 U0090
     32 U0090		       00	   RamNibbleTemp byte.b
     33 U0091		       00	   RamNibbleVar1 byte.b
     34 U0092		       00	   RamNibbleVar2 byte.b
     35 U0093		       00	   RamZeroByte byte.b
     36 U0094		       00	   RamLowerSixByte byte.b
     37 U0095		       00	   RamStackBkp byte.b
     38 U0096
     39 U0096							; Kernel support
     40 U0096		       00	   RamPF1Value byte.b
     41 U0097		       00	   RamKernelGRP0 byte.b		; temp
     42 U0098		       00	   RamKernelPhpTarget byte.b
     43 U0099		       00	   RamKernelX byte.b
     44 U009a		       00	   RamKernelY byte.b
     45 U009b		       00	   RamKernelGemini1 byte.b
     46 U009c		       00	   RamKernelGemini1Reg byte.b
     47 U009d		       00	   RamKernelGemini2 byte.b
     48 U009e		       00	   RamKernelGemini2Reg byte.b
     49 U009f		       00	   RamKernelGemini3 byte.b
     50 U00a0		       00	   RamKernelGemini3Reg byte.b
     51 U00a1		       00	   RamKernelGemini4 byte.b
     52 U00a2		       00	   RamKernelGemini4Reg byte.b
     53 U00a3		       00	   RamKernelGemini5 byte.b
     54 U00a4
     55 U00a4		       00	   BuildKernelX byte.b
     56 U00a5		       00	   BuildKernelY byte.b
     57 U00a6		       00	   BuildKernelRST byte.b
     58 U00a7		       00	   BuildKernelGrp0 byte.b
     59 U00a8		       00	   BuildKernelVdel1 byte.b
     60 U00a9
     61 U00a9		       00	   DO_MISS_A  byte.b
     62 U00aa		       00	   DO_MISS_B  byte.b
     63 U00ab		       00	   DO_GEMS_A  byte.b
     64 U00ac		       00		      byte.b
     65 U00ad		       00		      byte.b
     66 U00ae		       00		      byte.b
     67 U00af		       00		      byte.b
     68 U00b0		       00		      byte.b
     69 U00b1		       00	   DO_GEMS_B  byte.b
     70 U00b2		       00		      byte.b
     71 U00b3		       00		      byte.b
     72 U00b4		       00		      byte.b
     73 U00b5		       00		      byte.b
     74 U00b6		       00		      byte.b
     75 U00b7
     76 U00b7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     77 U00b7
     78 U00b7		       00 10	   ROW_COUNT  =	16
     79 U00b7
     80 U00b7		       00 02	   SIGNAL_LINE =	$02
     81 U00b7
     82 U00b7							; RAM+ memory map
     83 U00b7		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     84 U00b7		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     85 U00b7		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     86 U00b7
     87 U00b7		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     88 U00b7		       f1 40	   RAMP_STORAGE_R =	$f140
     89 U00b7
     90 U00b7							; NUSIZ values
     91 U00b7
     92 U00b7		       00 13	   THREE_COPIES =	%00010011
     93 U00b7
     94 U00b7							; Colors
     95 U00b7
     96 U00b7		       00 42	   COL_BG     equ	$42
     97 U00b7		       00 cc	   COL_EMERALD equ	$CC
     98 U00b7		       00 cc	   COL_EMERALD_2 equ	$CC
     99 U00b7
    100 U00b7							; HMOVE values for missiles
    101 U00b7
    102 U00b7		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
    103 U00b7		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
    104 U00b7
    105 U00b7		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
    106 U00b7		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
    107 U00b7
    108 U00b7							; Missile values when 2A=RST
    109 U00b7							; KERNEL_B_MISSILE_SLEEP equ 46
    110 U00b7							; KERNEL_B_MISSILE_HMOVE equ $20
    111 U00b7
    112 U00b7							; Sprite details
    113 U00b7
    114 U00b7		       00 09	   SPRITE_HEIGHT equ	9
    115 U00b7
    116 U00b7		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    117 U00b7		       00 1c	   EMERALD_SP equ	GRP1
    118 U00b7		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    119 U00b7		       00 11	   EMERALD_SP_RESET equ	RESP1
    120 U00b7		       00 13	   EMERALD_MI_RESET equ	RESM1
    121 U00b7		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    122 U00b7		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    123 U00b7		       00 05	   EMERALD_COPIES equ	NUSIZ1
    124 U00b7
    125 U00b7		       00 1b	   JET_SP     equ	GRP0
    126 U00b7		       00 10	   JET_SP_RESET equ	RESP0
    127 U00b7		       00 20	   JET_SP_HMOVE equ	HMP0
    128 U00b7		       00 06	   JET_SP_COLOR equ	COLUP0
    129 U00b7
    130 U00b7							; Spriteend is HEIGHT_OFFSET - YPos
    131 U00b7		       00 c8	   HEIGHT_OFFSET equ	200
    132 U00b7
    133 U00b7							; Compared with YPos
    134 U00b7		       00 3e	   FLOOR_OFFSET equ	62
    135 U00b7		       00 be	   CEILING_OFFSET equ	190
    136 U00b7
    137 U00b7							; Starting player position
    138 U00b7		       00 3e	   YPosStart  equ	62
    139 U00b7		       00 37	   XPosStart  equ	55
    140 U00b7
    141 U00b7							; Top left corner
    142 U00b7							; YPosStart equ 190
    143 U00b7							; XPosStart equ 28
    144 U00b7
    145 U00b7							; Tick (every 8 frames)
    146 U00b7		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00b7
     64 U00b7							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 84		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 8a		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 87		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 88		      sta	Speed1
     48  f243		       85 89		      sta	Speed2
     49  f245		       85 8b		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8f		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 93		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 94		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c c7 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 fb 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 fb 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 fb 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 fb 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelRST
      8  f27a							; Gemini 1A
      9  f27a				   .K_1A
     10  f27a					      ldy	[DO_GEMS_A + 0]
     11  f27a					      jsr	KernelA_GenReset
     12  f27a				   .if_1
     13  f27a					      bne	.else_1
     14  f27a					      sec
     15  f27a					      rol
     16  f27a							; Special: Encoding RST0
     17  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     18  f27a					      ldy	#BC_LDA_IMM
     19  f27a					      sty	[KernelA_B - $100]
     20  f27a					      ldy	#%10100000
     21  f27a					      sty	[KernelA_B - $100 + 1]
     22  f27a							; Store 1A in GRP0
     23  f27a					      ldy	[DO_GEMS_A + 1]
     24  f27a					      sty	BuildKernelGrp0
     25  f27a							; Gemini 1A is RESPx
     26  f27a					      ldy	#EMERALD_SP_RESET
     27  f27a					      sty	[KernelA_C - $100 + 1]
     28  f27a							; Turn 3-cycle NOP into 4-cycle
     29  f27a					      ldy	#$14
     30  f27a					      sty	[KernelA_D - $100]
     31  f27a					      jmp	.endif_1
     32  f27a							; [BIT DEPTH] #1 If-End @ 1
     33  f27a					      rol
     34  f27a
     35  f27a				   .else_1
     36  f27a					      clc
     37  f27a					      rol
     38  f27a							; Store 0A in GRP0
     39  f27a					      ldy	[DO_GEMS_A + 0]
     40  f27a					      sty	BuildKernelGrp0
     41  f27a					      ldy	[DO_GEMS_A + 1]
     42  f27a					      jsr	KernelA_GenReset
     43  f27a				   .if_2
     44  f27a					      bne	.else_2
     45  f27a					      sec
     46  f27a					      rol
     47  f27a							; GEM1ASWITCH
     48  f27a					      jmp	.endif_2
     49  f27a							; [BIT DEPTH] #2 If-End @ 2
     50  f27a
     51  f27a				   .else_2
     52  f27a					      clc
     53  f27a					      rol
     54  f27a							; Calculate the 1A value
     55  f27a					      ldy	SHARD_LUT_RF1
     56  f27a					      cpy	#1
     57  f27a					      .byte	$D0, #3
     58  f27a					      ldy	#RESP1
     59  f27a					      .byte	$2C
     60  f27a					      ldy	#GRP1
     61  f27a					      sty	RamKernelGemini1Reg
     62  f27a							; Set opcode
     63  f27a					      ldx	SHARD_LUT_RF1
     64  f27a					      cpx	#1
     65  f27a					      ldy	#BC_STX
     66  f27a					      .byte	$F0, #5
     67  f27a					      ldy	[DO_GEMS_A + 1]
     68  f27a					      jsr	KernelA_UpdateRegs
     69  f27a					      sty	RamKernelGemini1
     70  f27a							; [BIT DEPTH] #2 *If-End @ 2
     71  f27a							; [BIT DEPTH] #2 Else-End @ 2
     72  f27a				   .endif_2
     73  f27a							; [BIT DEPTH] #1 *If-End @ 1
     74  f27a							; [BIT DEPTH] #1 Else-End @ 2
     75  f27a				   .endif_1
     76  f27a							; BuildKernelX, BuildKernelY are upgraded if not set
     77  f27a							; Gemini 2A
     78  f27a					      ldy	[DO_GEMS_A + 2]
     79  f27a					      jsr	KernelA_GenReset
     80  f27a				   .if_3
     81  f27a					      bne	.else_3
     82  f27a					      sec
     83  f27a					      rol
     84  f27a					      jmp	.endif_3
     85  f27a							; [BIT DEPTH] #3 If-End @ 3
     86  f27a
     87  f27a				   .else_3
     88  f27a					      clc
     89  f27a					      rol
     90  f27a							; Set opcode
     91  f27a					      ldy	[DO_GEMS_A + 2]
     92  f27a					      jsr	KernelA_UpdateRegs
     93  f27a					      sty	RamKernelGemini2
     94  f27a							; Set opcode target
     95  f27a					      ldy	SHARD_LUT_RF1
     96  f27a					      cpy	#2
     97  f27a					      .byte	$D0, #3
     98  f27a					      ldy	#RESP1
     99  f27a					      .byte	$2C
    100  f27a					      ldy	#GRP1
    101  f27a					      sty	RamKernelGemini2Reg
    102  f27a							; [BIT DEPTH] #3 *If-End @ 3
    103  f27a							; [BIT DEPTH] #3 Else-End @ 3
    104  f27a				   .endif_3
    105  f27a							; Gemini 3A
    106  f27a					      ldy	[DO_GEMS_A + 3]
    107  f27a					      jsr	KernelA_GenReset
    108  f27a				   .if_4
    109  f27a					      bne	.else_4
    110  f27a					      sec
    111  f27a					      rol
    112  f27a					      jmp	.endif_4
    113  f27a							; [BIT DEPTH] #4 If-End @ 4
    114  f27a
    115  f27a				   .else_4
    116  f27a					      clc
    117  f27a					      rol
    118  f27a							; Set opcode
    119  f27a					      ldy	[DO_GEMS_A + 3]
    120  f27a					      jsr	KernelA_UpdateRegs
    121  f27a					      sty	RamKernelGemini3
    122  f27a							; Set opcode target
    123  f27a					      ldy	SHARD_LUT_RF1
    124  f27a					      cpy	#3
    125  f27a					      .byte	$D0, #3
    126  f27a					      ldy	#RESP1
    127  f27a					      .byte	$2C
    128  f27a					      ldy	#GRP1
    129  f27a					      sty	RamKernelGemini3Reg
    130  f27a							; [BIT DEPTH] #4 *If-End @ 4
    131  f27a							; [BIT DEPTH] #4 Else-End @ 4
    132  f27a				   .endif_4
    133  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    134  f27a					      rol
    135  f27a					      rol
    136  f27a					      rol
    137  f27a					      rol
    138  f27a					      ENDM
    139  f27a
    140  f27a					      MAC	nibble_gem_kernel_a_2_build
    141  f27a					      lda	#0
    142  f27a							; VD1 default
    143  f27a					      ldx	[DO_GEMS_A + 1]
    144  f27a					      stx	BuildKernelVdel1
    145  f27a							; Gemini 4A
    146  f27a					      ldx	SHARD_LUT_VD1
    147  f27a					      cpx	#4
    148  f27a				   .if_1
    149  f27a					      beq	.else_1
    150  f27a					      sec
    151  f27a					      rol
    152  f27a							; Set PHP
    153  f27a							; Update VDEL1
    154  f27a					      ldx	[DO_GEMS_A + 4]
    155  f27a					      stx	BuildKernelVdel1
    156  f27a					      jmp	.endif_1
    157  f27a							; [BIT DEPTH] #1 If-End @ 1
    158  f27a
    159  f27a				   .else_1
    160  f27a					      clc
    161  f27a					      rol
    162  f27a					      ldy	[DO_GEMS_A + 4]
    163  f27a					      jsr	KernelA_UpdateRegs
    164  f27a					      sty	RamKernelGemini4
    165  f27a							; Set PHP
    166  f27a							; [BIT DEPTH] #1 *If-End @ 1
    167  f27a							; [BIT DEPTH] #1 Else-End @ 1
    168  f27a				   .endif_1
    169  f27a							; VD1
    170  f27a							; ldy #SHARD_VD1
    171  f27a							; sty [KernelA_VDEL1 - $100]
    172  f27a							; GRP0
    173  f27a							; ldy #SHARD_GRP0
    174  f27a							; sty [KernelA_VDEL0 - $100]
    175  f27a							; X
    176  f27a							; ldy #SHARD_X
    177  f27a							; sty RamKernelX
    178  f27a							; Y
    179  f27a							; Gemini 5A
    180  f27a							; TODO eventually...?
    181  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    182  f27a					      rol
    183  f27a					      rol
    184  f27a					      rol
    185  f27a					      rol
    186  f27a					      rol
    187  f27a					      rol
    188  f27a					      rol
    189  f27a					      ENDM
    190  f27a
    191  f27a					      MAC	nibble_gem_kernel_b_build
    192  f27a					      lda	#0
    193  f27a							; Php target default
    194  f27a					      ldx	#RESP1
    195  f27a					      stx	RamKernelPhpTarget
    196  f27a					      ldx	#SENTINEL
    197  f27a					      stx	BuildKernelX
    198  f27a					      stx	BuildKernelY
    199  f27a					      stx	BuildKernelRST
    200  f27a							; Gemini 0B
    201  f27a					      ldy	[DO_GEMS_B + 0]
    202  f27a					      sty	BuildKernelGrp0
    203  f27a							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    204  f27a							; Gemini 1B
    205  f27a					      ldy	[DO_GEMS_B + 1]
    206  f27a					      jsr	KernelA_UpdateRegs
    207  f27a					      sty	RamKernelGemini1
    208  f27a							; Calculate Gemini 2B
    209  f27a					      ldy	[DO_GEMS_B + 2]
    210  f27a					      jsr	KernelB_UpdateRegs
    211  f27a					      sty	RamKernelGemini2
    212  f27a							; Calculate Gemini 3B
    213  f27a					      ldy	[DO_GEMS_B + 3]
    214  f27a					      jsr	KernelB_UpdateRegs
    215  f27a					      sty	RamKernelGemini3
    216  f27a							; Gemini 2B
    217  f27a				   .K_2B
    218  f27a					      ldy	[DO_GEMS_B + 2]
    219  f27a					      jsr	KernelB_GenPhp
    220  f27a				   .if_1
    221  f27a					      bne	.else_1
    222  f27a					      sec
    223  f27a					      rol
    224  f27a							; Write to PHP in 2B
    225  f27a					      jmp	.endif_1
    226  f27a							; [BIT DEPTH] #1 If-End @ 1
    227  f27a
    228  f27a				   .else_1
    229  f27a					      clc
    230  f27a					      rol
    231  f27a							; [BIT DEPTH] #1 *If-End @ 1
    232  f27a							; [BIT DEPTH] #1 Else-End @ 1
    233  f27a				   .endif_1
    234  f27a							; Gemini 3B
    235  f27a					      ldy	[DO_GEMS_B + 3]
    236  f27a					      jsr	KernelB_GenPhp
    237  f27a				   .if_2
    238  f27a					      bne	.else_2
    239  f27a					      sec
    240  f27a					      rol
    241  f27a							; Write to PHP in 3B
    242  f27a					      jmp	.endif_2
    243  f27a							; [BIT DEPTH] #2 If-End @ 2
    244  f27a
    245  f27a				   .else_2
    246  f27a					      clc
    247  f27a					      rol
    248  f27a							; [BIT DEPTH] #2 *If-End @ 2
    249  f27a							; [BIT DEPTH] #2 Else-End @ 2
    250  f27a				   .endif_2
    251  f27a							; Gemini 4B
    252  f27a					      ldy	[DO_GEMS_B + 4]
    253  f27a					      jsr	KernelA_UpdateRegs
    254  f27a				   .K_4B
    255  f27a					      sty	RamKernelGemini4
    256  f27a							; TODO if no PHP, rewrite previous section:
    257  f27a							; NIBBLE_IF cs
    258  f27a							;
    259  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    260  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    261  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    262  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    263  f27a							; NIBBLE_END_IF
    264  f27a							; Make adjustments for sprites.
    265  f27a					      ror	BuildKernelGrp0
    266  f27a					      ror	BuildKernelX
    267  f27a					      ror	BuildKernelY
    268  f27a							;
    269  f27a							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    270  f27a							; GRP0
    271  f27a							; X
    272  f27a							; Y
    273  f27a							; [BIT DEPTH] Final: 2 (out of 8 bits)
    274  f27a					      rol
    275  f27a					      rol
    276  f27a					      rol
    277  f27a					      rol
    278  f27a					      rol
    279  f27a					      rol
    280  f27a					      ENDM
    281  f27a
    282  f27a
    283  f27a					      MAC	nibble_gem_kernel_a_1
    284  f27a				   .if_1
    285  f27a					      asl
    286  f27a					      bcc	.else_1
    287  f27a					      jmp	.endif_1
    288  f27a				   .else_1
    289  f27a				   .if_2
    290  f27a					      asl
    291  f27a					      bcc	.else_2
    292  f27a					      ldx	#BC_STX
    293  f27a					      stx	[KernelA_D_W + 0]
    294  f27a					      ldx	#RESP1
    295  f27a					      stx	[KernelA_D_W + 1]
    296  f27a					      jmp	.endif_2
    297  f27a				   .else_2
    298  f27a					      ldx	RamKernelGemini1
    299  f27a					      stx	[KernelA_D_W + 0]
    300  f27a					      ldx	RamKernelGemini1Reg
    301  f27a					      stx	[KernelA_D_W + 1]
    302  f27a				   .endif_2
    303  f27a				   .endif_1
    304  f27a				   .if_3
    305  f27a					      asl
    306  f27a					      bcc	.else_3
    307  f27a					      ldx	#NOP_REG
    308  f27a					      stx	[KernelA_E_W + 1 + 0]
    309  f27a					      ldx	#RESP1
    310  f27a					      stx	[KernelA_G_W + 1 + 0]
    311  f27a					      jmp	.endif_3
    312  f27a				   .else_3
    313  f27a					      ldx	#RESP1
    314  f27a					      stx	[KernelA_E_W + 1 + 0]
    315  f27a					      ldx	RamKernelGemini2
    316  f27a					      stx	[KernelA_G_W + 0]
    317  f27a					      ldx	RamKernelGemini2Reg
    318  f27a					      stx	[KernelA_G_W + 1]
    319  f27a				   .endif_3
    320  f27a				   .if_4
    321  f27a					      asl
    322  f27a					      bcc	.else_4
    323  f27a					      ldx	#RESP1
    324  f27a					      stx	[KernelA_H_W + 1 + 0]
    325  f27a					      jmp	.endif_4
    326  f27a				   .else_4
    327  f27a					      ldx	RamKernelGemini3
    328  f27a					      stx	[KernelA_H_W + 0]
    329  f27a					      ldx	RamKernelGemini3Reg
    330  f27a					      stx	[KernelA_H_W + 1]
    331  f27a				   .endif_4
    332  f27a					      ENDM
    333  f27a
    334  f27a					      MAC	nibble_gem_kernel_a_2
    335  f27a				   .if_1
    336  f27a					      asl
    337  f27a					      bcc	.else_1
    338  f27a					      ldx	#BC_STA
    339  f27a					      stx	[[KernelA_I_W + 0] + 0]
    340  f27a					      ldx	#EMERALD_SP_RESET
    341  f27a					      stx	[[KernelA_I_W + 0] + 1]
    342  f27a					      ldx	#BC_STA
    343  f27a					      stx	[[KernelA_J_W + 1] + 0]
    344  f27a					      ldx	#PF1
    345  f27a					      stx	[[KernelA_J_W + 1] + 1]
    346  f27a					      ldx	#BC_PHP
    347  f27a					      stx	[[KernelA_K_W + 1] + 0]
    348  f27a					      ldx	#VDELP1
    349  f27a					      stx	[RamKernelPhpTarget + 0]
    350  f27a					      jmp	.endif_1
    351  f27a				   .else_1
    352  f27a					      ldx	#BC_PHP
    353  f27a					      stx	[[KernelA_I_W + 0] + 0]
    354  f27a					      ldx	#BC_STA
    355  f27a					      stx	[[KernelA_J_W + 0] + 0]
    356  f27a					      ldx	#PF1
    357  f27a					      stx	[[KernelA_J_W + 0] + 1]
    358  f27a					      ldx	RamKernelGemini4
    359  f27a					      stx	[KernelA_K_W + 0]
    360  f27a					      ldx	#EMERALD_SP
    361  f27a					      stx	[KernelA_K_W + 1]
    362  f27a					      ldx	#RESP1
    363  f27a					      stx	[RamKernelPhpTarget + 0]
    364  f27a				   .endif_1
    365  f27a					      ldx	BuildKernelVdel1
    366  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    367  f27a					      ldx	BuildKernelGrp0
    368  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    369  f27a					      ldx	BuildKernelX
    370  f27a					      stx	[RamKernelX + 0]
    371  f27a					      ldx	BuildKernelY
    372  f27a					      stx	[[KernelA_STY - $100] + 0]
    373  f27a					      ENDM
    374  f27a
    375  f27a					      MAC	nibble_gem_kernel_b
    376  f27a					      ldx	RamKernelGemini1
    377  f27a					      stx	[KernelB_D_W + 0]
    378  f27a				   .if_1
    379  f27a					      asl
    380  f27a					      bcc	.else_1
    381  f27a					      ldx	#EMERALD_SP
    382  f27a					      stx	[RamKernelPhpTarget + 0]
    383  f27a					      ldx	#BC_STY
    384  f27a					      stx	[[KernelB_E_W + 0] + 0]
    385  f27a					      ldx	#EMERALD_SP_RESET
    386  f27a					      stx	[[KernelB_E_W + 0] + 1]
    387  f27a					      ldx	#BC_PHP
    388  f27a					      stx	[[KernelB_F_W + 1] + 0]
    389  f27a					      ldx	#BC_STA
    390  f27a					      stx	[[KernelB_G_W + 0] + 0]
    391  f27a					      ldx	#PF1
    392  f27a					      stx	[[KernelB_G_W + 0] + 1]
    393  f27a					      ldx	RamKernelGemini3
    394  f27a					      stx	[[KernelB_H_W + 0] + 0]
    395  f27a					      ldx	#EMERALD_SP
    396  f27a					      stx	[[KernelB_H_W + 0] + 1]
    397  f27a					      jmp	.endif_1
    398  f27a				   .else_1
    399  f27a					      ldx	RamKernelGemini2
    400  f27a					      stx	[KernelB_F_W + 0]
    401  f27a					      ldx	#EMERALD_SP
    402  f27a					      stx	[KernelB_F_W + 1]
    403  f27a				   .endif_1
    404  f27a				   .if_2
    405  f27a					      asl
    406  f27a					      bcc	.else_2
    407  f27a					      ldx	#EMERALD_SP
    408  f27a					      stx	[RamKernelPhpTarget + 0]
    409  f27a					      ldx	#BC_STY
    410  f27a					      stx	[[KernelB_E_W + 0] + 0]
    411  f27a					      ldx	#EMERALD_SP_RESET
    412  f27a					      stx	[[KernelB_E_W + 0] + 1]
    413  f27a					      ldx	RamKernelGemini2
    414  f27a					      stx	[[KernelB_F_W + 1] + 0]
    415  f27a					      ldx	#EMERALD_SP
    416  f27a					      stx	[[KernelB_F_W + 1] + 1]
    417  f27a					      ldx	#BC_STA
    418  f27a					      stx	[[KernelB_G_W + 1] + 0]
    419  f27a					      ldx	#PF1
    420  f27a					      stx	[[KernelB_G_W + 1] + 1]
    421  f27a					      ldx	#BC_PHP
    422  f27a					      stx	[[KernelB_H_W + 1] + 0]
    423  f27a					      jmp	.endif_2
    424  f27a				   .else_2
    425  f27a					      ldx	RamKernelGemini3
    426  f27a					      stx	[KernelA_H_W + 0]
    427  f27a					      ldx	#EMERALD_SP
    428  f27a					      stx	[KernelA_H_W + 1]
    429  f27a				   .endif_2
    430  f27a					      ldx	RamKernelGemini4
    431  f27a					      stx	[KernelB_J_W + 0]
    432  f27a					      ldx	BuildKernelGrp0
    433  f27a					      stx	[[KernelB_VDEL0 - $100] + 0]
    434  f27a					      ldx	BuildKernelX
    435  f27a					      stx	[RamKernelX + 0]
    436  f27a					      ldx	BuildKernelY
    437  f27a					      stx	[[KernelB_STY - $100] + 0]
    438  f27a					      ENDM
    439  f27a
    440  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a		       00 aa	   SENTINEL   =	%010101010
      4  f27a
      5  f27a							; Reflected for Kernel A
      6  f27a		       00 00	   G00	      =	%00000000
      7  f27a		       00 60	   G01	      =	%01100000
      8  f27a		       00 06	   G10	      =	%00000110
      9  f27a		       00 66	   G11	      =	%01100110
     10  f27a
     11  f27a							; Reflected for Kernel A
     12  f27a		       00 00	   G00	      =	%00000000
     13  f27a		       00 60	   G01	      =	%01100000
     14  f27a		       00 06	   G10	      =	%00000110
     15  f27a		       00 66	   G11	      =	%01100110
     16  f27a
     17  f27a
     18  f27a							; gems:     [g01,g10,g01,g11,g00,g00]
     19  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     20  f27a							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     21  f27a
     22  f27a							; gems:     [g00,g01,g10,g11,g00,g01]
     23  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     24  f27a							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     25  f27a
     26  f27a							; gems:     [g01,g10,g11,g00,g01,g10]
     27  f27a							; cpu:      cpu(g01,g01,false,g10,g11,false)
     28  f27a							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     29  f27a
     30  f27a							; gems:     [g10,g11,g00,g01,g10,g11]
     31  f27a							; cpu:      cpu(g10,g10,false,g11,g01,false)
     32  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     33  f27a
     34  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     35  f27a							; cpu:      cpu(g01,g01,false,g00,g11,false)
     36  f27a							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     37  f27a
     38  f27a							; gems:     [g11,g01,g01,g01,g01,g00]
     39  f27a							; cpu:      cpu(g00,g01,false,g11,g00,false)
     40  f27a							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     41  f27a
     42  f27a							; gems:     [g10,g10,g11,g00,g11,g01]
     43  f27a							; cpu:      cpu(g00,g00,false,g10,g11,false)
     44  f27a							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     45  f27a
     46  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     47  f27a							; cpu:      cpu(g00,g01,false,g01,g11,false)
     48  f27a							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     49  f27a
     50  f27a							; gems:     [g11,g10,g00,g01,g00,g01]
     51  f27a							; cpu:      cpu(g11,g00,false,g10,g01,false)
     52  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     53  f27a
     54  f27a							; Y=Gemini Sprite
     55  f27a							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     56  f27a							; processor flag Z is TRUE if this is RST.
     57  f27a				   KernelA_GenReset subroutine
     58  f27a		       c0 00		      cpy	#$00
     59  f27c		       f0 01		      beq	.start
     60  f27e		       60		      rts
     61  f27f							; Current Gemini = $00
     62  f27f				   .start
     63  f27f		       a6 a6		      ldx	BuildKernelRST
     64  f281		       e0 aa		      cpx	#SENTINEL
     65  f283		       d0 04		      bne	.set_else
     66  f285							; We have found the first (and only) RST on this line, set the marker var
     67  f285		       a2 ff		      ldx	#$ff
     68  f287		       86 a6		      stx	BuildKernelRST
     69  f289				   .set_else
     70  f289		       a2 00		      ldx	#$00
     71  f28b		       60		      rts
     72  f28c
     73  f28c							; Y=Gemini Sprite
     74  f28c							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     75  f28c							; processor flag Z is TRUE if this is RST.
     76  f28c				   KernelB_GenPhp subroutine
     77  f28c		       c0 06		      cpy	#G10
     78  f28e		       f0 05		      beq	.start
     79  f290		       c0 66		      cpy	#G11
     80  f292		       f0 01		      beq	.start
     81  f294		       60		      rts
     82  f295							; Current Gemini = $00
     83  f295				   .start
     84  f295		       a6 a6		      ldx	BuildKernelRST
     85  f297		       e0 aa		      cpx	#SENTINEL
     86  f299		       d0 06		      bne	.set_else
     87  f29b							; We have found the first (and only) RST on this line, set the marker var
     88  f29b		       a2 ff		      ldx	#$ff
     89  f29d		       86 a6		      stx	BuildKernelRST
     90  f29f		       a2 00		      ldx	#$00
     91  f2a1				   .set_else
     92  f2a1		       60		      rts
     93  f2a2
     94  f2a2							; Allocates build-time registers for a new Gemini sprite value.
     95  f2a2							; register Y = the storage opcode to write to the result
     96  f2a2							;
     97  f2a2							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     98  f2a2							; BuildKernelX, BuildKernelY are upgraded if not set.
     99  f2a2							; Y=Gemini Sprite
    100  f2a2				   KernelB_UpdateRegs
    101  f2a2				   KernelA_UpdateRegs subroutine
    102  f2a2
    103  f2a2							; If equal to GRP0, return nop
    104  f2a2							; FIXME GRP0 might not always be up to date (should update each entry?)
    105  f2a2							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    106  f2a2							; cpy BuildKernelGrp0
    107  f2a2							; bne .set_start
    108  f2a2							; ; TODO if this is stx + NOP value, then register doesn't have to change as
    109  f2a2							; ; often in GEM1ASWITCH
    110  f2a2							; ldy #BC_NOP
    111  f2a2							; rts
    112  f2a2
    113  f2a2		       c4 a4		      cpy	BuildKernelX
    114  f2a4		       d0 03		      bne	.op_else
    115  f2a6		       a0 86		      ldy	#BC_STX
    116  f2a8		       60		      rts
    117  f2a9				   .op_else
    118  f2a9		       c4 a5		      cpy	BuildKernelY
    119  f2ab		       d0 03		      bne	.op_end
    120  f2ad		       a0 84		      ldy	#BC_STY
    121  f2af		       60		      rts
    122  f2b0				   .op_end
    123  f2b0
    124  f2b0				   .set_start
    125  f2b0		       a6 a4		      ldx	BuildKernelX
    126  f2b2		       e0 aa		      cpx	#SENTINEL
    127  f2b4		       d0 05		      bne	.set_else
    128  f2b6		       84 a4		      sty	BuildKernelX
    129  f2b8		       a0 86		      ldy	#BC_STX
    130  f2ba		       60		      rts
    131  f2bb				   .set_else
    132  f2bb		       a6 a5		      ldx	BuildKernelY
    133  f2bd		       e0 aa		      cpx	#SENTINEL
    134  f2bf		       d0 05		      bne	.set_end
    135  f2c1		       84 a5		      sty	BuildKernelY
    136  f2c3		       a0 84		      ldy	#BC_STY
    137  f2c5		       60		      rts
    138  f2c6				   .set_end
    139  f2c6							; Failed all
      0  f2c6					      ASSERT_RUNTIME	"0"
      1  f2c6				   .COND      SET	"0"
 ASSERT: breakif { pc== $f2c6  && !(  0  ) }
      2  f2c6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    141  f2c6		       60		      rts
    142  f2c7
    143  f2c7							; Vertical Sync
    144  f2c7				   VerticalSync subroutine
      0  f2c7					      VERTICAL_SYNC
      1  f2c7		       a9 0e		      lda	#%1110
      2  f2c9		       85 02	   .VSLP1     sta	WSYNC
      3  f2cb		       85 00		      sta	VSYNC
      4  f2cd		       4a		      lsr
      5  f2ce		       d0 f9		      bne	.VSLP1
    146  f2d0
    147  f2d0				   FrameStart subroutine
      0  f2d0					      ASSERT_RUNTIME	"_scan == #0"
      1  f2d0				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2d0  && !(  _scan == #0  ) }
      2  f2d0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    149  f2d0
    150  f2d0				   VerticalBlank subroutine
      0  f2d0					      TIMER_SETUP	37
      1  f2d0				   .lines     SET	37
      2  f2d0		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2d2		       85 02		      sta	WSYNC
      4  f2d4		       8d 96 02 	      sta	TIM64T
    152  f2d7
    153  f2d7							; Scanline counter
    154  f2d7		       a9 10		      lda	#ROW_COUNT
    155  f2d9		       85 83		      sta	LoopCount
    156  f2db
    157  f2db							; Frame counter
    158  f2db		       e6 84		      inc	FrameCount
    159  f2dd
    160  f2dd							; Skip every 8 frames for increasing demo index
    161  f2dd		       a5 84		      lda	FrameCount
    162  f2df		       29 07		      and	#FrameSkip
    163  f2e1		       c9 07		      cmp	#FrameSkip
    164  f2e3		       d0 0d		      bne	.next_next_thing
    165  f2e5
    166  f2e5		       18		      clc
    167  f2e6		       a5 8f		      lda	ROW_DEMO_INDEX
    168  f2e8		       69 04		      adc	#4
    169  f2ea		       c9 68		      cmp	#[level_01_end - level_01]
    170  f2ec		       90 02		      bcc	.next_thing_local
    171  f2ee		       a9 00		      lda	#0
    172  f2f0				   .next_thing_local
    173  f2f0		       85 8f		      sta	ROW_DEMO_INDEX
    174  f2f2				   .next_next_thing
    175  f2f2		       85 02		      sta	WSYNC
    176  f2f4
    177  f2f4							; Positioning
      0  f2f4					      SLEEP	40
      1  f2f4				   .CYCLES    SET	40
      2  f2f4
      3  f2f4				  -	      IF	.CYCLES < 2
      4  f2f4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2f4				  -	      ERR
      6  f2f4					      ENDIF
      7  f2f4
      8  f2f4				  -	      IF	.CYCLES & 1
      9  f2f4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2f4				  -	      nop	0
     11  f2f4				  -	      ELSE
     12  f2f4				  -	      bit	VSYNC
     13  f2f4				  -	      ENDIF
     14  f2f4				  -.CYCLES    SET	.CYCLES - 3
     15  f2f4					      ENDIF
     16  f2f4
     17  f2f4					      REPEAT	.CYCLES / 2
     18  f2f4		       ea		      nop
     17  f2f4					      REPEND
     18  f2f5		       ea		      nop
     17  f2f5					      REPEND
     18  f2f6		       ea		      nop
     17  f2f6					      REPEND
     18  f2f7		       ea		      nop
     17  f2f7					      REPEND
     18  f2f8		       ea		      nop
     17  f2f8					      REPEND
     18  f2f9		       ea		      nop
     17  f2f9					      REPEND
     18  f2fa		       ea		      nop
     17  f2fa					      REPEND
     18  f2fb		       ea		      nop
     17  f2fb					      REPEND
     18  f2fc		       ea		      nop
     17  f2fc					      REPEND
     18  f2fd		       ea		      nop
     17  f2fd					      REPEND
     18  f2fe		       ea		      nop
     17  f2fe					      REPEND
     18  f2ff		       ea		      nop
     17  f2ff					      REPEND
     18  f300		       ea		      nop
     17  f300					      REPEND
     18  f301		       ea		      nop
     17  f301					      REPEND
     18  f302		       ea		      nop
     17  f302					      REPEND
     18  f303		       ea		      nop
     17  f303					      REPEND
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     19  f308					      REPEND
    179  f308		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    180  f30a		       85 02		      sta	WSYNC
    181  f30c
    182  f30c							; Misc
    183  f30c		       a9 00		      lda	#00
    184  f30e		       85 1e		      sta	EMERALD_MI_ENABLE
    185  f310
    186  f310							; Assign dervied SpriteEnd value
    187  f310		       18		      clc
    188  f311		       a9 c8		      lda	#HEIGHT_OFFSET
    189  f313		       e5 8a		      sbc	YPos
    190  f315		       85 86		      sta	SpriteEnd
    191  f317
    192  f317							; Player 1
    193  f317		       a5 87		      lda	XPos
    194  f319		       a2 00		      ldx	#0
    195  f31b		       20 48 f9 	      jsr	SetHorizPos
    196  f31e
    197  f31e							; Extract 26-bit string to full Gemini profile
    198  f31e		       20 00 f8 	      jsr	gemini_populate
    199  f321
    200  f321				   frame_setup subroutine
    201  f321							; Kernel A or B
    202  f321		       a9 01		      lda	#01
    203  f323		       25 84		      and	FrameCount
    204  f325		       d0 24		      bne	frame_setup_kernel_b
    205  f327
    206  f327				   frame_setup_kernel_a subroutine
    207  f327							; Load kernel into CBSRAM
    208  f327		       20 56 f2 	      jsr	LoadKernelA
    209  f32a
    210  f32a							; Move missile
    211  f32a		       85 02		      sta	WSYNC
      0  f32c					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f32c				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f32c
      3  f32c				  -	      IF	.CYCLES < 2
      4  f32c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f32c				  -	      ERR
      6  f32c					      ENDIF
      7  f32c
      8  f32c				  -	      IF	.CYCLES & 1
      9  f32c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f32c				  -	      nop	0
     11  f32c				  -	      ELSE
     12  f32c				  -	      bit	VSYNC
     13  f32c				  -	      ENDIF
     14  f32c				  -.CYCLES    SET	.CYCLES - 3
     15  f32c					      ENDIF
     16  f32c
     17  f32c					      REPEAT	.CYCLES / 2
     18  f32c		       ea		      nop
     17  f32c					      REPEND
     18  f32d		       ea		      nop
     17  f32d					      REPEND
     18  f32e		       ea		      nop
     17  f32e					      REPEND
     18  f32f		       ea		      nop
     17  f32f					      REPEND
     18  f330		       ea		      nop
     17  f330					      REPEND
     18  f331		       ea		      nop
     17  f331					      REPEND
     18  f332		       ea		      nop
     17  f332					      REPEND
     18  f333		       ea		      nop
     17  f333					      REPEND
     18  f334		       ea		      nop
     17  f334					      REPEND
     18  f335		       ea		      nop
     17  f335					      REPEND
     18  f336		       ea		      nop
     17  f336					      REPEND
     18  f337		       ea		      nop
     17  f337					      REPEND
     18  f338		       ea		      nop
     17  f338					      REPEND
     18  f339		       ea		      nop
     19  f33a					      REPEND
    213  f33a		       85 13		      sta	EMERALD_MI_RESET
    214  f33c		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    215  f33e		       85 23		      sta	EMERALD_MI_HMOVE
    216  f340
    217  f340							; DEBUG: Set per-kernel color
    218  f340		       a2 cc		      ldx	#COL_EMERALD
    219  f342		       86 07		      stx	EMERALD_SP_COLOR
    220  f344
    221  f344							; Set reflection for Jetpack.
    222  f344		       a9 ff		      lda	#%11111111
    223  f346		       85 0c		      sta	REFP1
    224  f348
    225  f348		       4c 78 f3 	      jmp	frame_setup_complete
    226  f34b
    227  f34b				   frame_setup_kernel_b subroutine
    228  f34b							; Load kernel into CBSRAM
    229  f34b		       20 68 f2 	      jsr	LoadKernelB
    230  f34e
    231  f34e							; Move missile
    232  f34e		       85 02		      sta	WSYNC
      0  f350					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f350				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f350
      3  f350				  -	      IF	.CYCLES < 2
      4  f350				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f350				  -	      ERR
      6  f350					      ENDIF
      7  f350
      8  f350					      IF	.CYCLES & 1
      9  f350					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f350		       04 00		      nop	0
     11  f352				  -	      ELSE
     12  f352				  -	      bit	VSYNC
     13  f352					      ENDIF
     14  f352				   .CYCLES    SET	.CYCLES - 3
     15  f352					      ENDIF
     16  f352
     17  f352					      REPEAT	.CYCLES / 2
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     17  f355					      REPEND
     18  f356		       ea		      nop
     17  f356					      REPEND
     18  f357		       ea		      nop
     17  f357					      REPEND
     18  f358		       ea		      nop
     17  f358					      REPEND
     18  f359		       ea		      nop
     17  f359					      REPEND
     18  f35a		       ea		      nop
     17  f35a					      REPEND
     18  f35b		       ea		      nop
     17  f35b					      REPEND
     18  f35c		       ea		      nop
     17  f35c					      REPEND
     18  f35d		       ea		      nop
     17  f35d					      REPEND
     18  f35e		       ea		      nop
     17  f35e					      REPEND
     18  f35f		       ea		      nop
     17  f35f					      REPEND
     18  f360		       ea		      nop
     17  f360					      REPEND
     18  f361		       ea		      nop
     17  f361					      REPEND
     18  f362		       ea		      nop
     17  f362					      REPEND
     18  f363		       ea		      nop
     17  f363					      REPEND
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     19  f36a					      REPEND
    234  f36a		       85 13		      sta	EMERALD_MI_RESET
    235  f36c		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    236  f36e		       85 23		      sta	EMERALD_MI_HMOVE
    237  f370
    238  f370							; DEBUG: Set per-kernel color
    239  f370		       a2 e0		      ldx	#$e0
    240  f372							; ldx #COL_EMERALD
    241  f372		       86 07		      stx	EMERALD_SP_COLOR
    242  f374
    243  f374							; Disable reflection for Jetpack.
    244  f374		       a9 ff		      lda	#%11111111
    245  f376		       85 0c		      sta	REFP1
    246  f378
    247  f378				   frame_setup_complete
    248  f378		       ad 00 f1 	      lda	$f100
    249  f37b		       85 80		      sta	DebugKernelID
    250  f37d
    251  f37d		       ad 7c fc 	      lda	shard_map
    252  f380		       a0 01		      ldy	#1	; gemini counter, starting at 1
    253  f382				   gemini_builder
    254  f382		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    255  f384		       d0 00		      bne	.no_vd0
    256  f386				   .no_vd0
    257  f386
    258  f386
    259  f386				   nibble_precompile_gem_kernel
    260  f386				   DBG_NIBBLE
    261  f386		       00 a9	   BC_LDA_IMM =	$a9
    262  f386		       00 85	   BC_STA     =	$85
    263  f386		       00 86	   BC_STX     =	$86
    264  f386		       00 84	   BC_STY     =	$84
    265  f386		       00 08	   BC_PHP     =	$08
    266  f386		       00 04	   BC_NOP     =	$04
    267  f386
    268  f386		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    269  f386
    270  f386				   KernelA_D_W EQM	[KernelA_D - $100]
    271  f386				   KernelA_E_W EQM	[KernelA_E - $100]
    272  f386				   KernelA_G_W EQM	[KernelA_G - $100]
    273  f386				   KernelA_H_W EQM	[KernelA_H - $100]
    274  f386				   KernelA_I_W EQM	[KernelA_I - $100]
    275  f386				   KernelA_J_W EQM	[KernelA_J - $100]
    276  f386				   KernelA_K_W EQM	[KernelA_K - $100]
    277  f386
    278  f386				   KernelB_D_W EQM	[KernelB_D - $100]
    279  f386				   KernelB_E_W EQM	[KernelB_E - $100]
    280  f386				   KernelB_F_W EQM	[KernelB_F - $100]
    281  f386				   KernelB_G_W EQM	[KernelB_G - $100]
    282  f386				   KernelB_H_W EQM	[KernelB_H - $100]
    283  f386				   KernelB_I_W EQM	[KernelB_I - $100]
    284  f386				   KernelB_J_W EQM	[KernelB_J - $100]
    285  f386				   KernelB_K_W EQM	[KernelB_K - $100]
    286  f386
    287  f386							; Nibble Kernel A
      0  f386					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00d0 ????				      seg.U	ignoreme
    289 U00d0 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    290 U00d2 ????	       86 a4		      stx	BuildKernelX
    291 U00d4 ????	       86 a5		      stx	BuildKernelY
    292 U00d6 ????	       86 a6		      stx	BuildKernelRST
    293 U00d8 ????
    294 U00d8 ????						; Gemini 1A
    295 U00d8 ????			   .K_1A
    296 U00d8 ????	       a4 ab		      ldy	[DO_GEMS_A + 0]
    297 U00da ????	       20 7a f2 	      jsr	KernelA_GenReset
      0 U00dd ????				      NIBBLE_IF	eq
    299 U00dd ????						; Special: Encoding RST0
    300 U00dd ????						; Rewrite lda RamKernelPF1 to be #immediate
    301 U00dd ????	       a0 a9		      ldy	#BC_LDA_IMM
    302 U00df ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    303 U00e2 ????	       a0 a0		      ldy	#%10100000
    304 U00e4 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    305 U00e7 ????						; Store 1A in GRP0
    306 U00e7 ????	       a4 ac		      ldy	[DO_GEMS_A + 1]
    307 U00e9 ????	       84 a7		      sty	BuildKernelGrp0
    308 U00eb ????						; Gemini 1A is RESPx
    309 U00eb ????	       a0 11		      ldy	#EMERALD_SP_RESET
    310 U00ed ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    311 U00f0 ????						; Turn 3-cycle NOP into 4-cycle
    312 U00f0 ????	       a0 14		      ldy	#$14	; TODO what is this
    313 U00f2 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U00f5 ????				      NIBBLE_ELSE
    315 U00f5 ????						; Store 0A in GRP0
    316 U00f5 ????	       a4 ab		      ldy	[DO_GEMS_A + 0]
    317 U00f7 ????	       84 a7		      sty	BuildKernelGrp0
    318 U00f9 ????
    319 U00f9 ????	       a4 ac		      ldy	[DO_GEMS_A + 1]
    320 U00fb ????	       20 7a f2 	      jsr	KernelA_GenReset
      0 U00fe ????				      NIBBLE_IF	eq
    322 U00fe ????						; GEM1ASWITCH
      0 U00fe ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U00fe ????				      NIBBLE_ELSE
    325 U00fe ????						; Calculate the 1A value
    326 U00fe ????	       ac d8 f8 	      ldy	SHARD_LUT_RF1
    327 U0101 ????	       c0 01		      cpy	#1
    328 U0103 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    329 U0105 ????	       a0 11		      ldy	#RESP1
    330 U0107 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    331 U0108 ????	       a0 1c		      ldy	#GRP1
    332 U010a ????	       84 9c		      sty	RamKernelGemini1Reg
    333 U010c ????
    334 U010c ????						; Set opcode
    335 U010c ????	       ae d8 f8 	      ldx	SHARD_LUT_RF1
    336 U010f ????	       e0 01		      cpx	#1
    337 U0111 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    338 U0113 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    339 U0115 ????	       a4 ac		      ldy	[DO_GEMS_A + 1]
    340 U0117 ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    341 U011a ????	       84 9b		      sty	RamKernelGemini1
    342 U011c ????
      0 U011c ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U011c ????				      NIBBLE_END_IF
      0 U011c ????				      NIBBLE_END_IF
    346 U011c ????
    347 U011c ????						; BuildKernelX, BuildKernelY are upgraded if not set
    348 U011c ????						; Gemini 2A
    349 U011c ????	       a4 ad		      ldy	[DO_GEMS_A + 2]
    350 U011e ????	       20 7a f2 	      jsr	KernelA_GenReset
      0 U0121 ????				      NIBBLE_IF	eq
      0 U0121 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0121 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0121 ????				      NIBBLE_ELSE
    355 U0121 ????						; Set opcode
    356 U0121 ????	       a4 ad		      ldy	[DO_GEMS_A + 2]
    357 U0123 ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    358 U0126 ????	       84 9d		      sty	RamKernelGemini2
    359 U0128 ????
    360 U0128 ????						; Set opcode target
    361 U0128 ????	       ac d8 f8 	      ldy	SHARD_LUT_RF1
    362 U012b ????	       c0 02		      cpy	#2
    363 U012d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    364 U012f ????	       a0 11		      ldy	#RESP1
    365 U0131 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    366 U0132 ????	       a0 1c		      ldy	#GRP1
    367 U0134 ????	       84 9e		      sty	RamKernelGemini2Reg
    368 U0136 ????
      0 U0136 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0136 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0136 ????				      NIBBLE_END_IF
    372 U0136 ????
    373 U0136 ????						; Gemini 3A
    374 U0136 ????	       a4 ae		      ldy	[DO_GEMS_A + 3]
    375 U0138 ????	       20 7a f2 	      jsr	KernelA_GenReset
      0 U013b ????				      NIBBLE_IF	eq
      0 U013b ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U013b ????				      NIBBLE_ELSE
    379 U013b ????						; Set opcode
    380 U013b ????	       a4 ae		      ldy	[DO_GEMS_A + 3]
    381 U013d ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    382 U0140 ????	       84 9f		      sty	RamKernelGemini3
    383 U0142 ????
    384 U0142 ????						; Set opcode target
    385 U0142 ????	       ac d8 f8 	      ldy	SHARD_LUT_RF1
    386 U0145 ????	       c0 03		      cpy	#3
    387 U0147 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    388 U0149 ????	       a0 11		      ldy	#RESP1
    389 U014b ????	       2c		      .byte.b	$2C	; .bit (ABS)
    390 U014c ????	       a0 1c		      ldy	#GRP1
    391 U014e ????	       84 a0		      sty	RamKernelGemini3Reg
    392 U0150 ????
      0 U0150 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0150 ????				      NIBBLE_END_IF
      0 U0150 ????				      NIBBLE_END_KERNEL
      1  f386					      seg	CodeBank3
    396  f386
      0  f386					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0150 ????				      seg.U	ignoreme
    398 U0150 ????						; VD1 default
    399 U0150 ????	       a6 ac		      ldx	[DO_GEMS_A + 1]
    400 U0152 ????	       86 a8		      stx	BuildKernelVdel1
    401 U0154 ????
    402 U0154 ????						; Gemini 4A
    403 U0154 ????	       ae d9 f8 	      ldx	SHARD_LUT_VD1
    404 U0157 ????	       e0 04		      cpx	#4
      0 U0159 ????				      NIBBLE_IF	ne
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0159 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    409 U0159 ????
    410 U0159 ????						; Set PHP
      0 U0159 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    412 U0159 ????
    413 U0159 ????						; Update VDEL1
    414 U0159 ????	       a6 af		      ldx	[DO_GEMS_A + 4]
    415 U015b ????	       86 a8		      stx	BuildKernelVdel1
      0 U015d ????				      NIBBLE_ELSE
    417 U015d ????	       a4 af		      ldy	[DO_GEMS_A + 4]
    418 U015f ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    419 U0162 ????	       84 a1		      sty	RamKernelGemini4
    420 U0164 ????
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U0164 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    424 U0164 ????
    425 U0164 ????						; Set PHP
      0 U0164 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U0164 ????				      NIBBLE_END_IF
    428 U0164 ????
    429 U0164 ????						; VD1
    430 U0164 ????						; ldy #SHARD_VD1
    431 U0164 ????						; sty [KernelA_VDEL1 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    433 U0164 ????						; GRP0
    434 U0164 ????						; ldy #SHARD_GRP0
    435 U0164 ????						; sty [KernelA_VDEL0 - $100]
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    437 U0164 ????						; X
    438 U0164 ????						; ldy #SHARD_X
    439 U0164 ????						; sty RamKernelX
      0 U0164 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    441 U0164 ????						; Y
      0 U0164 ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    443 U0164 ????
    444 U0164 ????						; Gemini 5A
    445 U0164 ????						; TODO eventually...?
      0 U0164 ????				      NIBBLE_END_KERNEL
      1  f386					      seg	CodeBank3
    447  f386
    448  f386							; Nibble Kernel B
      0  f386					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U0164 ????				      seg.U	ignoreme
    450 U0164 ????						; Php target default
    451 U0164 ????	       a2 11		      ldx	#RESP1
    452 U0166 ????	       86 98		      stx	RamKernelPhpTarget
    453 U0168 ????
    454 U0168 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    455 U016a ????	       86 a4		      stx	BuildKernelX
    456 U016c ????	       86 a5		      stx	BuildKernelY
    457 U016e ????	       86 a6		      stx	BuildKernelRST
    458 U0170 ????
    459 U0170 ????						; Gemini 0B
    460 U0170 ????	       a4 b1		      ldy	[DO_GEMS_B + 0]
    461 U0172 ????	       84 a7		      sty	BuildKernelGrp0
    462 U0174 ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    463 U0174 ????
    464 U0174 ????						; Gemini 1B
    465 U0174 ????	       a4 b2		      ldy	[DO_GEMS_B + 1]
    466 U0176 ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    467 U0179 ????	       84 9b		      sty	RamKernelGemini1
      0 U017b ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    469 U017b ????
    470 U017b ????						; Calculate Gemini 2B
    471 U017b ????	       a4 b3		      ldy	[DO_GEMS_B + 2]
    472 U017d ????	       20 a2 f2 	      jsr	KernelB_UpdateRegs
    473 U0180 ????	       84 9d		      sty	RamKernelGemini2
    474 U0182 ????						; Calculate Gemini 3B
    475 U0182 ????	       a4 b4		      ldy	[DO_GEMS_B + 3]
    476 U0184 ????	       20 a2 f2 	      jsr	KernelB_UpdateRegs
    477 U0187 ????	       84 9f		      sty	RamKernelGemini3
    478 U0189 ????
    479 U0189 ????						; Gemini 2B
    480 U0189 ????			   .K_2B
    481 U0189 ????	       a4 b3		      ldy	[DO_GEMS_B + 2]
    482 U018b ????	       20 8c f2 	      jsr	KernelB_GenPhp
      0 U018e ????				      NIBBLE_IF	eq
    484 U018e ????						; Write to PHP in 2B
      0 U018e ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U018e ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U018e ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U018e ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
      0 U018e ????				      NIBBLE_ELSE
      0 U018e ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
      0 U018e ????				      NIBBLE_END_IF
    493 U018e ????
    494 U018e ????						; Gemini 3B
    495 U018e ????	       a4 b4		      ldy	[DO_GEMS_B + 3]
    496 U0190 ????	       20 8c f2 	      jsr	KernelB_GenPhp
      0 U0193 ????				      NIBBLE_IF	eq
    498 U0193 ????						; Write to PHP in 3B
      0 U0193 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U0193 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
      0 U0193 ????				      NIBBLE_ELSE
      0 U0193 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, #EMERALD_SP
      0 U0193 ????				      NIBBLE_END_IF
    507 U0193 ????
    508 U0193 ????						; Gemini 4B
    509 U0193 ????	       a4 b5		      ldy	[DO_GEMS_B + 4]
    510 U0195 ????	       20 a2 f2 	      jsr	KernelA_UpdateRegs
    511 U0198 ????			   .K_4B
    512 U0198 ????	       84 a1		      sty	RamKernelGemini4
      0 U019a ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    514 U019a ????
    515 U019a ????						; TODO if no PHP, rewrite previous section:
    516 U019a ????						; NIBBLE_IF cs
    517 U019a ????						;     ; Write to PHP in reset command
    518 U019a ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    519 U019a ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    520 U019a ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    521 U019a ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    522 U019a ????						; NIBBLE_END_IF
    523 U019a ????
    524 U019a ????						; Make adjustments for sprites.
    525 U019a ????	       66 a7		      ror	BuildKernelGrp0
    526 U019c ????	       66 a4		      ror	BuildKernelX
    527 U019e ????	       66 a5		      ror	BuildKernelY
    528 U01a0 ????
    529 U01a0 ????						; ; VD1
    530 U01a0 ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    531 U01a0 ????						; GRP0
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    533 U01a0 ????						; X
      0 U01a0 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    535 U01a0 ????						; Y
      0 U01a0 ????				      NIBBLE_WRITE	[KernelB_STY - $100], BuildKernelY
    537 U01a0 ????
      0 U01a0 ????				      NIBBLE_END_KERNEL
      1  f386					      seg	CodeBank3
    539  f386
    540  f386							; TODO do this for all rows
    541  f386				   DBG_NIBBLE_BUILD subroutine
    542  f386		       ae 00 f1 	      ldx	$f100
    543  f389		       e0 0a		      cpx	#$a
    544  f38b		       f0 03		      beq	[. + 5]
    545  f38d		       4c 68 f4 	      jmp	.kernel_b
    546  f390				   .kernel_a
      0  f390					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f390		       a9 00		      lda	#0
      2  f392		       a2 aa		      ldx	#SENTINEL
      3  f394		       86 a4		      stx	BuildKernelX
      4  f396		       86 a5		      stx	BuildKernelY
      5  f398		       86 a6		      stx	BuildKernelRST
      6  f39a
      7  f39a				   .K_1A
      8  f39a		       a4 ab		      ldy	[DO_GEMS_A + 0]
      9  f39c		       20 7a f2 	      jsr	KernelA_GenReset
     10  f39f				   .if_1
     11  f39f		       d0 1e		      bne	.else_1
     12  f3a1		       38		      sec
     13  f3a2		       2a		      rol
     14  f3a3
     15  f3a3
     16  f3a3		       a0 a9		      ldy	#BC_LDA_IMM
     17  f3a5		       8c 16 f0 	      sty	[KernelA_B - $100]
     18  f3a8		       a0 a0		      ldy	#%10100000
     19  f3aa		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     20  f3ad
     21  f3ad		       a4 ac		      ldy	[DO_GEMS_A + 1]
     22  f3af		       84 a7		      sty	BuildKernelGrp0
     23  f3b1
     24  f3b1		       a0 11		      ldy	#EMERALD_SP_RESET
     25  f3b3		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     26  f3b6
     27  f3b6		       a0 14		      ldy	#$14
     28  f3b8		       8c 1a f0 	      sty	[KernelA_D - $100]
     29  f3bb		       4c f1 f3 	      jmp	.endif_1
     30  f3be
     31  f3be		       2a		      rol
     32  f3bf
     33  f3bf				   .else_1
     34  f3bf		       18		      clc
     35  f3c0		       2a		      rol
     36  f3c1
     37  f3c1		       a4 ab		      ldy	[DO_GEMS_A + 0]
     38  f3c3		       84 a7		      sty	BuildKernelGrp0
     39  f3c5		       a4 ac		      ldy	[DO_GEMS_A + 1]
     40  f3c7		       20 7a f2 	      jsr	KernelA_GenReset
     41  f3ca				   .if_2
     42  f3ca		       d0 05		      bne	.else_2
     43  f3cc		       38		      sec
     44  f3cd		       2a		      rol
     45  f3ce
     46  f3ce		       4c f1 f3 	      jmp	.endif_2
     47  f3d1
     48  f3d1
     49  f3d1				   .else_2
     50  f3d1		       18		      clc
     51  f3d2		       2a		      rol
     52  f3d3
     53  f3d3		       ac d8 f8 	      ldy	SHARD_LUT_RF1
     54  f3d6		       c0 01		      cpy	#1
     55  f3d8		       d0 03		      .byte.b	$D0, #3
     56  f3da		       a0 11		      ldy	#RESP1
     57  f3dc		       2c		      .byte.b	$2C
     58  f3dd		       a0 1c		      ldy	#GRP1
     59  f3df		       84 9c		      sty	RamKernelGemini1Reg
     60  f3e1
     61  f3e1		       ae d8 f8 	      ldx	SHARD_LUT_RF1
     62  f3e4		       e0 01		      cpx	#1
     63  f3e6		       a0 86		      ldy	#BC_STX
     64  f3e8		       f0 05		      .byte.b	$F0, #5
     65  f3ea		       a4 ac		      ldy	[DO_GEMS_A + 1]
     66  f3ec		       20 a2 f2 	      jsr	KernelA_UpdateRegs
     67  f3ef		       84 9b		      sty	RamKernelGemini1
     68  f3f1
     69  f3f1
     70  f3f1				   .endif_2
     71  f3f1
     72  f3f1
     73  f3f1				   .endif_1
     74  f3f1
     75  f3f1
     76  f3f1		       a4 ad		      ldy	[DO_GEMS_A + 2]
     77  f3f3		       20 7a f2 	      jsr	KernelA_GenReset
     78  f3f6				   .if_3
     79  f3f6		       d0 05		      bne	.else_3
     80  f3f8		       38		      sec
     81  f3f9		       2a		      rol
     82  f3fa		       4c 14 f4 	      jmp	.endif_3
     83  f3fd
     84  f3fd
     85  f3fd				   .else_3
     86  f3fd		       18		      clc
     87  f3fe		       2a		      rol
     88  f3ff
     89  f3ff		       a4 ad		      ldy	[DO_GEMS_A + 2]
     90  f401		       20 a2 f2 	      jsr	KernelA_UpdateRegs
     91  f404		       84 9d		      sty	RamKernelGemini2
     92  f406
     93  f406		       ac d8 f8 	      ldy	SHARD_LUT_RF1
     94  f409		       c0 02		      cpy	#2
     95  f40b		       d0 03		      .byte.b	$D0, #3
     96  f40d		       a0 11		      ldy	#RESP1
     97  f40f		       2c		      .byte.b	$2C
     98  f410		       a0 1c		      ldy	#GRP1
     99  f412		       84 9e		      sty	RamKernelGemini2Reg
    100  f414
    101  f414
    102  f414				   .endif_3
    103  f414
    104  f414		       a4 ae		      ldy	[DO_GEMS_A + 3]
    105  f416		       20 7a f2 	      jsr	KernelA_GenReset
    106  f419				   .if_4
    107  f419		       d0 05		      bne	.else_4
    108  f41b		       38		      sec
    109  f41c		       2a		      rol
    110  f41d		       4c 37 f4 	      jmp	.endif_4
    111  f420
    112  f420
    113  f420				   .else_4
    114  f420		       18		      clc
    115  f421		       2a		      rol
    116  f422
    117  f422		       a4 ae		      ldy	[DO_GEMS_A + 3]
    118  f424		       20 a2 f2 	      jsr	KernelA_UpdateRegs
    119  f427		       84 9f		      sty	RamKernelGemini3
    120  f429
    121  f429		       ac d8 f8 	      ldy	SHARD_LUT_RF1
    122  f42c		       c0 03		      cpy	#3
    123  f42e		       d0 03		      .byte.b	$D0, #3
    124  f430		       a0 11		      ldy	#RESP1
    125  f432		       2c		      .byte.b	$2C
    126  f433		       a0 1c		      ldy	#GRP1
    127  f435		       84 a0		      sty	RamKernelGemini3Reg
    128  f437
    129  f437
    130  f437				   .endif_4
    131  f437
    132  f437		       2a		      rol
    133  f438		       2a		      rol
    134  f439		       2a		      rol
    135  f43a		       2a		      rol
    548  f43b		       85 91		      sta	RamNibbleVar1
      0  f43d					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f43d		       a9 00		      lda	#0
      2  f43f
      3  f43f		       a6 ac		      ldx	[DO_GEMS_A + 1]
      4  f441		       86 a8		      stx	BuildKernelVdel1
      5  f443
      6  f443		       ae d9 f8 	      ldx	SHARD_LUT_VD1
      7  f446		       e0 04		      cpx	#4
      8  f448				   .if_1
      9  f448		       f0 09		      beq	.else_1
     10  f44a		       38		      sec
     11  f44b		       2a		      rol
     12  f44c
     13  f44c
     14  f44c		       a6 af		      ldx	[DO_GEMS_A + 4]
     15  f44e		       86 a8		      stx	BuildKernelVdel1
     16  f450		       4c 5c f4 	      jmp	.endif_1
     17  f453
     18  f453
     19  f453				   .else_1
     20  f453		       18		      clc
     21  f454		       2a		      rol
     22  f455		       a4 af		      ldy	[DO_GEMS_A + 4]
     23  f457		       20 a2 f2 	      jsr	KernelA_UpdateRegs
     24  f45a		       84 a1		      sty	RamKernelGemini4
     25  f45c
     26  f45c
     27  f45c
     28  f45c				   .endif_1
     29  f45c
     30  f45c
     31  f45c
     32  f45c
     33  f45c
     34  f45c
     35  f45c
     36  f45c
     37  f45c
     38  f45c
     39  f45c
     40  f45c
     41  f45c
     42  f45c		       2a		      rol
     43  f45d		       2a		      rol
     44  f45e		       2a		      rol
     45  f45f		       2a		      rol
     46  f460		       2a		      rol
     47  f461		       2a		      rol
     48  f462		       2a		      rol
    550  f463		       85 92		      sta	RamNibbleVar2
    551  f465		       4c c0 f4 	      jmp	.next
    552  f468				   .kernel_b
      0  f468					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f468		       a9 00		      lda	#0
      2  f46a
      3  f46a		       a2 11		      ldx	#RESP1
      4  f46c		       86 98		      stx	RamKernelPhpTarget
      5  f46e		       a2 aa		      ldx	#SENTINEL
      6  f470		       86 a4		      stx	BuildKernelX
      7  f472		       86 a5		      stx	BuildKernelY
      8  f474		       86 a6		      stx	BuildKernelRST
      9  f476
     10  f476		       a4 b1		      ldy	[DO_GEMS_B + 0]
     11  f478		       84 a7		      sty	BuildKernelGrp0
     12  f47a
     13  f47a
     14  f47a		       a4 b2		      ldy	[DO_GEMS_B + 1]
     15  f47c		       20 a2 f2 	      jsr	KernelA_UpdateRegs
     16  f47f		       84 9b		      sty	RamKernelGemini1
     17  f481
     18  f481		       a4 b3		      ldy	[DO_GEMS_B + 2]
     19  f483		       20 a2 f2 	      jsr	KernelB_UpdateRegs
     20  f486		       84 9d		      sty	RamKernelGemini2
     21  f488
     22  f488		       a4 b4		      ldy	[DO_GEMS_B + 3]
     23  f48a		       20 a2 f2 	      jsr	KernelB_UpdateRegs
     24  f48d		       84 9f		      sty	RamKernelGemini3
     25  f48f
     26  f48f				   .K_2B
     27  f48f		       a4 b3		      ldy	[DO_GEMS_B + 2]
     28  f491		       20 8c f2 	      jsr	KernelB_GenPhp
     29  f494				   .if_1
     30  f494		       d0 05		      bne	.else_1
     31  f496		       38		      sec
     32  f497		       2a		      rol
     33  f498
     34  f498		       4c 9d f4 	      jmp	.endif_1
     35  f49b
     36  f49b
     37  f49b				   .else_1
     38  f49b		       18		      clc
     39  f49c		       2a		      rol
     40  f49d
     41  f49d
     42  f49d				   .endif_1
     43  f49d
     44  f49d		       a4 b4		      ldy	[DO_GEMS_B + 3]
     45  f49f		       20 8c f2 	      jsr	KernelB_GenPhp
     46  f4a2				   .if_2
     47  f4a2		       d0 05		      bne	.else_2
     48  f4a4		       38		      sec
     49  f4a5		       2a		      rol
     50  f4a6
     51  f4a6		       4c ab f4 	      jmp	.endif_2
     52  f4a9
     53  f4a9
     54  f4a9				   .else_2
     55  f4a9		       18		      clc
     56  f4aa		       2a		      rol
     57  f4ab
     58  f4ab
     59  f4ab				   .endif_2
     60  f4ab
     61  f4ab		       a4 b5		      ldy	[DO_GEMS_B + 4]
     62  f4ad		       20 a2 f2 	      jsr	KernelA_UpdateRegs
     63  f4b0				   .K_4B
     64  f4b0		       84 a1		      sty	RamKernelGemini4
     65  f4b2
     66  f4b2
     67  f4b2
     68  f4b2
     69  f4b2
     70  f4b2
     71  f4b2
     72  f4b2
     73  f4b2
     74  f4b2		       66 a7		      ror	BuildKernelGrp0
     75  f4b4		       66 a4		      ror	BuildKernelX
     76  f4b6		       66 a5		      ror	BuildKernelY
     77  f4b8
     78  f4b8
     79  f4b8
     80  f4b8
     81  f4b8
     82  f4b8
     83  f4b8		       2a		      rol
     84  f4b9		       2a		      rol
     85  f4ba		       2a		      rol
     86  f4bb		       2a		      rol
     87  f4bc		       2a		      rol
     88  f4bd		       2a		      rol
    554  f4be		       85 91		      sta	RamNibbleVar1
    555  f4c0				   .next
    556  f4c0
    557  f4c0							; TODO move this into the row kernel
    558  f4c0				   DBG_NIBBLE_RUN subroutine
    559  f4c0		       ae 00 f1 	      ldx	$f100
    560  f4c3		       e0 0a		      cpx	#$a
    561  f4c5		       f0 03		      beq	[. + 5]
    562  f4c7		       4c 78 f5 	      jmp	.kernel_b
    563  f4ca				   .kernel_a
    564  f4ca		       a5 91		      lda	RamNibbleVar1
      0  f4cc					      NIBBLE_gem_kernel_a_1
      1  f4cc				   .if_1
      2  f4cc		       0a		      asl
      3  f4cd		       90 03		      bcc	.else_1
      4  f4cf		       4c ec f4 	      jmp	.endif_1
      5  f4d2				   .else_1
      6  f4d2				   .if_2
      7  f4d2		       0a		      asl
      8  f4d3		       90 0d		      bcc	.else_2
      9  f4d5		       a2 86		      ldx	#BC_STX
     10  f4d7		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f4da		       a2 11		      ldx	#RESP1
     12  f4dc		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f4df		       4c ec f4 	      jmp	.endif_2
     14  f4e2				   .else_2
     15  f4e2		       a6 9b		      ldx	RamKernelGemini1
     16  f4e4		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f4e7		       a6 9c		      ldx	RamKernelGemini1Reg
     18  f4e9		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f4ec				   .endif_2
     20  f4ec				   .endif_1
     21  f4ec				   .if_3
     22  f4ec		       0a		      asl
     23  f4ed		       90 0d		      bcc	.else_3
     24  f4ef		       a2 79		      ldx	#NOP_REG
     25  f4f1		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f4f4		       a2 11		      ldx	#RESP1
     27  f4f6		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f4f9		       4c 0b f5 	      jmp	.endif_3
     29  f4fc				   .else_3
     30  f4fc		       a2 11		      ldx	#RESP1
     31  f4fe		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f501		       a6 9d		      ldx	RamKernelGemini2
     33  f503		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f506		       a6 9e		      ldx	RamKernelGemini2Reg
     35  f508		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f50b				   .endif_3
     37  f50b				   .if_4
     38  f50b		       0a		      asl
     39  f50c		       90 08		      bcc	.else_4
     40  f50e		       a2 11		      ldx	#RESP1
     41  f510		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f513		       4c 20 f5 	      jmp	.endif_4
     43  f516				   .else_4
     44  f516		       a6 9f		      ldx	RamKernelGemini3
     45  f518		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f51b		       a6 a0		      ldx	RamKernelGemini3Reg
     47  f51d		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f520				   .endif_4
    566  f520		       a5 92		      lda	RamNibbleVar2
      0  f522					      NIBBLE_gem_kernel_a_2
      1  f522				   .if_1
      2  f522		       0a		      asl
      3  f523		       90 20		      bcc	.else_1
      4  f525		       a2 85		      ldx	#BC_STA
      5  f527		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f52a		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f52c		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f52f		       a2 85		      ldx	#BC_STA
      9  f531		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f534		       a2 0e		      ldx	#PF1
     11  f536		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f539		       a2 08		      ldx	#BC_PHP
     13  f53b		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f53e		       a2 26		      ldx	#VDELP1
     15  f540		       86 98		      stx	[RamKernelPhpTarget + 0]
     16  f542		       4c 62 f5 	      jmp	.endif_1
     17  f545				   .else_1
     18  f545		       a2 08		      ldx	#BC_PHP
     19  f547		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f54a		       a2 85		      ldx	#BC_STA
     21  f54c		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f54f		       a2 0e		      ldx	#PF1
     23  f551		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f554		       a6 a1		      ldx	RamKernelGemini4
     25  f556		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f559		       a2 1c		      ldx	#EMERALD_SP
     27  f55b		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f55e		       a2 11		      ldx	#RESP1
     29  f560		       86 98		      stx	[RamKernelPhpTarget + 0]
     30  f562				   .endif_1
     31  f562		       a6 a8		      ldx	BuildKernelVdel1
     32  f564		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f567		       a6 a7		      ldx	BuildKernelGrp0
     34  f569		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f56c		       a6 a4		      ldx	BuildKernelX
     36  f56e		       86 99		      stx	[RamKernelX + 0]
     37  f570		       a6 a5		      ldx	BuildKernelY
     38  f572		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    568  f575		       4c 00 f6 	      jmp	.next
    569  f578				   .kernel_b
    570  f578		       a5 91		      lda	RamNibbleVar1
      0  f57a					      NIBBLE_gem_kernel_b
      1  f57a		       a6 9b		      ldx	RamKernelGemini1
      2  f57c		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f57f				   .if_1
      4  f57f		       0a		      asl
      5  f580		       90 2a		      bcc	.else_1
      6  f582		       a2 1c		      ldx	#EMERALD_SP
      7  f584		       86 98		      stx	[RamKernelPhpTarget + 0]
      8  f586		       a2 84		      ldx	#BC_STY
      9  f588		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f58b		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f58d		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f590		       a2 08		      ldx	#BC_PHP
     13  f592		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f595		       a2 85		      ldx	#BC_STA
     15  f597		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f59a		       a2 0e		      ldx	#PF1
     17  f59c		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f59f		       a6 9f		      ldx	RamKernelGemini3
     19  f5a1		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f5a4		       a2 1c		      ldx	#EMERALD_SP
     21  f5a6		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f5a9		       4c b6 f5 	      jmp	.endif_1
     23  f5ac				   .else_1
     24  f5ac		       a6 9d		      ldx	RamKernelGemini2
     25  f5ae		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f5b1		       a2 1c		      ldx	#EMERALD_SP
     27  f5b3		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f5b6				   .endif_1
     29  f5b6				   .if_2
     30  f5b6		       0a		      asl
     31  f5b7		       90 2a		      bcc	.else_2
     32  f5b9		       a2 1c		      ldx	#EMERALD_SP
     33  f5bb		       86 98		      stx	[RamKernelPhpTarget + 0]
     34  f5bd		       a2 84		      ldx	#BC_STY
     35  f5bf		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f5c2		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f5c4		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f5c7		       a6 9d		      ldx	RamKernelGemini2
     39  f5c9		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f5cc		       a2 1c		      ldx	#EMERALD_SP
     41  f5ce		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f5d1		       a2 85		      ldx	#BC_STA
     43  f5d3		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f5d6		       a2 0e		      ldx	#PF1
     45  f5d8		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f5db		       a2 08		      ldx	#BC_PHP
     47  f5dd		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f5e0		       4c ed f5 	      jmp	.endif_2
     49  f5e3				   .else_2
     50  f5e3		       a6 9f		      ldx	RamKernelGemini3
     51  f5e5		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     52  f5e8		       a2 1c		      ldx	#EMERALD_SP
     53  f5ea		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     54  f5ed				   .endif_2
     55  f5ed		       a6 a1		      ldx	RamKernelGemini4
     56  f5ef		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     57  f5f2		       a6 a7		      ldx	BuildKernelGrp0
     58  f5f4		       8e 08 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     59  f5f7		       a6 a4		      ldx	BuildKernelX
     60  f5f9		       86 99		      stx	[RamKernelX + 0]
     61  f5fb		       a6 a5		      ldx	BuildKernelY
     62  f5fd		       8e 11 f0 	      stx	[[KernelB_STY - $100] + 0]
    572  f600				   .next
    573  f600
    574  f600				   VerticalBlankEnd
    575  f600							; Wait until the end of Vertical blank.
      0  f600					      TIMER_WAIT
      1  f600				   .waittimer
      2  f600		       ad 84 02 	      lda	INTIM
      3  f603		       d0 fb		      bne	.waittimer
      4  f605		       85 02		      sta	WSYNC
      0  f607					      ASSERT_RUNTIME	"_scan == #37"
      1  f607				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f607  && !(  _scan == #37  ) }
      2  f607					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    578  f607
    579  f607							; Save stack pointer
    580  f607		       ba		      tsx
    581  f608		       86 95		      stx	RamStackBkp
    582  f60a
    583  f60a							; Start rendering the kernel.
    584  f60a		       4c 5c f9 	      jmp	KernelBorder
    585  f60d
    586  f700		       00 00 00 00*	      align	256	; TODO why
    587  f700
    588  f700				   FrameEnd   subroutine
    589  f700		       85 02		      sta	WSYNC
    590  f702
    591  f702							; Blank all background colors.
    592  f702		       a9 00		      lda	#0
    593  f704		       85 08		      sta	COLUPF
    594  f706		       85 0f		      sta	PF2
    595  f708		       85 0e		      sta	PF1
    596  f70a		       85 1c		      sta	EMERALD_SP
    597  f70c
    598  f70c							; Guide lines (2x)
    599  f70c		       a9 02		      lda	#SIGNAL_LINE
    600  f70e		       85 09		      sta	COLUBK
    601  f710					      REPEAT	6
    602  f710		       85 02		      sta	WSYNC
    601  f710					      REPEND
    602  f712		       85 02		      sta	WSYNC
    601  f712					      REPEND
    602  f714		       85 02		      sta	WSYNC
    601  f714					      REPEND
    602  f716		       85 02		      sta	WSYNC
    601  f716					      REPEND
    602  f718		       85 02		      sta	WSYNC
    601  f718					      REPEND
    602  f71a		       85 02		      sta	WSYNC
    603  f71c					      REPEND
    604  f71c		       a9 00		      lda	#$00
    605  f71e		       85 09		      sta	COLUBK
    606  f720
    607  f720							; Restore stack pointer
    608  f720		       a6 95		      ldx	RamStackBkp
    609  f722		       9a		      txs
    610  f723
    611  f723							; Display the rest of the blank screen.
      0  f723					      TIMER_SETUP	25
      1  f723				   .lines     SET	25
      2  f723		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f725		       85 02		      sta	WSYNC
      4  f727		       8d 96 02 	      sta	TIM64T
    613  f72a		       85 02		      sta	WSYNC
      0  f72c					      TIMER_WAIT
      1  f72c				   .waittimer
      2  f72c		       ad 84 02 	      lda	INTIM
      3  f72f		       d0 fb		      bne	.waittimer
      4  f731		       85 02		      sta	WSYNC
      0  f733					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f733				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f733  && !(  _scan == (#37 + #192)  ) }
      2  f733					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    616  f733
    617  f733							; Overscan
    618  f733				   Overscan   subroutine
    619  f733		       85 01		      sta	VBLANK
      0  f735					      TIMER_SETUP	29
      1  f735				   .lines     SET	29
      2  f735		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f737		       85 02		      sta	WSYNC
      4  f739		       8d 96 02 	      sta	TIM64T
    621  f73c
    622  f73c		       20 da f8 	      jsr	MoveJoystick
    623  f73f		       20 11 f9 	      jsr	SpeedCalculation
    624  f742
      0  f742					      TIMER_WAIT
      1  f742				   .waittimer
      2  f742		       ad 84 02 	      lda	INTIM
      3  f745		       d0 fb		      bne	.waittimer
      4  f747		       85 02		      sta	WSYNC
      0  f749					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f749				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f749  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f749					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    627  f749
    628  f749		       4c c7 f2 	      jmp	VerticalSync
    629  f74c
    630  f74c
    631  f74c
    632  f800		       00 00 00 00*	      align	256
    633  f800
    634  f800					      mac	gemini_populate
    635  f800				   .TARGET    SET	{1}
    636  f800					      lda	RamNibbleTemp
    637  f800					      and	#%00000011
    638  f800					      tay
    639  f800					      lda	GEMINI_LOOKUP,y
    640  f800					      sta	.TARGET
    641  f800					      endm
    642  f800
    643  f800					      mac	gemini_populate_missile
    644  f800				   .TARGET    SET	{1}
    645  f800					      txa
    646  f800					      and	#%00000001
    647  f800					      sta	.TARGET
    648  f800					      endm
    649  f800
    650  f800				   gemini_populate
    651  f800		       ae d7 f8 	      ldx	level_for_game + 3
    652  f803		       86 90		      stx	RamNibbleTemp
      0  f805					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  f805				   .TARGET    SET	DO_GEMS_B + 5
      2  f805		       a5 90		      lda	RamNibbleTemp
      3  f807		       29 03		      and	#%00000011
      4  f809		       a8		      tay
      5  f80a		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f80d		       85 b6		      sta	.TARGET
    654  f80f		       66 90		      ror	RamNibbleTemp
    655  f811		       66 90		      ror	RamNibbleTemp
      0  f813					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  f813				   .TARGET    SET	DO_GEMS_A + 5
      2  f813		       a5 90		      lda	RamNibbleTemp
      3  f815		       29 03		      and	#%00000011
      4  f817		       a8		      tay
      5  f818		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f81b		       85 b0		      sta	.TARGET
    657  f81d		       66 90		      ror	RamNibbleTemp
    658  f81f		       66 90		      ror	RamNibbleTemp
      0  f821					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  f821				   .TARGET    SET	DO_GEMS_B + 4
      2  f821		       a5 90		      lda	RamNibbleTemp
      3  f823		       29 03		      and	#%00000011
      4  f825		       a8		      tay
      5  f826		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f829		       85 b5		      sta	.TARGET
    660  f82b		       66 90		      ror	RamNibbleTemp
    661  f82d		       66 90		      ror	RamNibbleTemp
      0  f82f					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  f82f				   .TARGET    SET	DO_GEMS_A + 4
      2  f82f		       a5 90		      lda	RamNibbleTemp
      3  f831		       29 03		      and	#%00000011
      4  f833		       a8		      tay
      5  f834		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f837		       85 af		      sta	.TARGET
    663  f839		       66 90		      ror	RamNibbleTemp
    664  f83b		       66 90		      ror	RamNibbleTemp
    665  f83d
    666  f83d		       ae d6 f8 	      ldx	level_for_game + 2
    667  f840		       86 90		      stx	RamNibbleTemp
      0  f842					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  f842				   .TARGET    SET	DO_MISS_B
      2  f842		       8a		      txa
      3  f843		       29 01		      and	#%00000001
      4  f845		       85 aa		      sta	.TARGET
    669  f847		       66 90		      ror	RamNibbleTemp
      0  f849					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  f849				   .TARGET    SET	DO_GEMS_B + 3
      2  f849		       a5 90		      lda	RamNibbleTemp
      3  f84b		       29 03		      and	#%00000011
      4  f84d		       a8		      tay
      5  f84e		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f851		       85 b4		      sta	.TARGET
    671  f853		       66 90		      ror	RamNibbleTemp
    672  f855		       66 90		      ror	RamNibbleTemp
      0  f857					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  f857				   .TARGET    SET	DO_GEMS_A + 3
      2  f857		       a5 90		      lda	RamNibbleTemp
      3  f859		       29 03		      and	#%00000011
      4  f85b		       a8		      tay
      5  f85c		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f85f		       85 ae		      sta	.TARGET
    674  f861		       66 90		      ror	RamNibbleTemp
    675  f863		       66 90		      ror	RamNibbleTemp
      0  f865					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  f865				   .TARGET    SET	DO_GEMS_B + 2
      2  f865		       a5 90		      lda	RamNibbleTemp
      3  f867		       29 03		      and	#%00000011
      4  f869		       a8		      tay
      5  f86a		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f86d		       85 b3		      sta	.TARGET
    677  f86f		       66 90		      ror	RamNibbleTemp
    678  f871		       66 90		      ror	RamNibbleTemp
    679  f873
    680  f873		       ae d5 f8 	      ldx	level_for_game + 1
    681  f876		       86 90		      stx	RamNibbleTemp
      0  f878					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  f878				   .TARGET    SET	DO_GEMS_A + 2
      2  f878		       a5 90		      lda	RamNibbleTemp
      3  f87a		       29 03		      and	#%00000011
      4  f87c		       a8		      tay
      5  f87d		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f880		       85 ad		      sta	.TARGET
    683  f882		       66 90		      ror	RamNibbleTemp
    684  f884		       66 90		      ror	RamNibbleTemp
      0  f886					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  f886				   .TARGET    SET	DO_MISS_A
      2  f886		       8a		      txa
      3  f887		       29 01		      and	#%00000001
      4  f889		       85 a9		      sta	.TARGET
    686  f88b		       66 90		      ror	RamNibbleTemp
      0  f88d					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  f88d				   .TARGET    SET	DO_GEMS_B + 1
      2  f88d		       a5 90		      lda	RamNibbleTemp
      3  f88f		       29 03		      and	#%00000011
      4  f891		       a8		      tay
      5  f892		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f895		       85 b2		      sta	.TARGET
    688  f897		       66 90		      ror	RamNibbleTemp
    689  f899		       66 90		      ror	RamNibbleTemp
      0  f89b					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  f89b				   .TARGET    SET	DO_GEMS_A + 1
      2  f89b		       a5 90		      lda	RamNibbleTemp
      3  f89d		       29 03		      and	#%00000011
      4  f89f		       a8		      tay
      5  f8a0		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8a3		       85 ac		      sta	.TARGET
    691  f8a5		       66 90		      ror	RamNibbleTemp
    692  f8a7		       66 90		      ror	RamNibbleTemp
    693  f8a9
    694  f8a9		       ae d4 f8 	      ldx	level_for_game + 0
    695  f8ac		       86 90		      stx	RamNibbleTemp
      0  f8ae					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  f8ae				   .TARGET    SET	DO_GEMS_B + 0
      2  f8ae		       a5 90		      lda	RamNibbleTemp
      3  f8b0		       29 03		      and	#%00000011
      4  f8b2		       a8		      tay
      5  f8b3		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8b6		       85 b1		      sta	.TARGET
    697  f8b8		       66 90		      ror	RamNibbleTemp
    698  f8ba		       66 90		      ror	RamNibbleTemp
      0  f8bc					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  f8bc				   .TARGET    SET	DO_GEMS_A + 0
      2  f8bc		       a5 90		      lda	RamNibbleTemp
      3  f8be		       29 03		      and	#%00000011
      4  f8c0		       a8		      tay
      5  f8c1		       b9 d0 f8 	      lda	GEMINI_LOOKUP,y
      6  f8c4		       85 ab		      sta	.TARGET
    700  f8c6		       66 90		      ror	RamNibbleTemp
    701  f8c8		       66 90		      ror	RamNibbleTemp
    702  f8ca
    703  f8ca		       60		      rts
    704  f8cb				   gemini_populate_end
    705  f8cb
    706  f8d0		       00 00 00 00*	      align	16
    707  f8d0
    708  f8d0				   GEMINI_LOOKUP
    709  f8d0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    710  f8d4
    711  f8d4				   level_for_game
    712  f8d4		       0f 7f 3f ff	      .byte.b	%1111, %1111111, %0111111, %11111111
    713  f8d8
    714  f8d8				   SHARD_LUT_RF1
    715  f8d8		       00		      .byte.b	#0
    716  f8d9				   SHARD_LUT_VD1
    717  f8d9		       00		      .byte.b	#0
    718  f8da
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f8da					      include	"game_input.s"
      1  f8da							; Handles input checking. Called from overscan.
      2  f8da
      3  f8da							; Read joystick movement and apply to object 0
      4  f8da				   MoveJoystick
      5  f8da							; Move vertically
      6  f8da							; (up and down are actually reversed since ypos starts at bottom)
      7  f8da							;     ldx YPos
      8  f8da		       a9 10		      lda	#%00010000	;Up?
      9  f8dc		       2c 80 02 	      bit	SWCHA
     10  f8df		       d0 0d		      bne	SkipMoveUp
     11  f8e1
     12  f8e1		       18		      clc
     13  f8e2		       a5 89		      lda	Speed2
     14  f8e4		       69 0c		      adc	#12
     15  f8e6		       85 89		      sta	Speed2
     16  f8e8		       a5 88		      lda	Speed1
     17  f8ea		       69 00		      adc	#00
     18  f8ec		       85 88		      sta	Speed1
     19  f8ee
     20  f8ee				   SkipMoveUp
     21  f8ee		       a6 87		      ldx	XPos
     22  f8f0
     23  f8f0							; Only check left/right on odd frames;
     24  f8f0							; TODO make this just a fractional speed
     25  f8f0							; rather than dropping frames
     26  f8f0		       a9 01		      lda	#01
     27  f8f2		       25 84		      and	FrameCount
     28  f8f4		       d0 18		      bne	SkipMoveRight
     29  f8f6
     30  f8f6
     31  f8f6							; Move horizontally
     32  f8f6		       a9 40		      lda	#%01000000	;Left?
     33  f8f8		       2c 80 02 	      bit	SWCHA
     34  f8fb		       d0 05		      bne	SkipMoveLeft
     35  f8fd		       e0 1d		      cpx	#29
     36  f8ff		       90 01		      bcc	SkipMoveLeft
     37  f901		       ca		      dex
     38  f902
     39  f902							; Reflect
     40  f902							;     lda #$ff
     41  f902							;     sta REFP0
     42  f902				   SkipMoveLeft
     43  f902		       a9 80		      lda	#%10000000	;Right?
     44  f904		       2c 80 02 	      bit	SWCHA
     45  f907		       d0 05		      bne	SkipMoveRight
     46  f909		       e0 80		      cpx	#128
     47  f90b		       b0 01		      bcs	SkipMoveRight
     48  f90d		       e8		      inx
     49  f90e
     50  f90e							; Reflect
     51  f90e							;     lda #$0
     52  f90e							;     sta REFP0
     53  f90e				   SkipMoveRight
     54  f90e		       86 87		      stx	XPos
     55  f910		       60		      rts
     56  f911
     57  f911
     58  f911				   SpeedCalculation
     59  f911		       38		      sec
     60  f912		       a5 89		      lda	Speed2
     61  f914		       e9 07		      sbc	#7
     62  f916		       85 89		      sta	Speed2
     63  f918		       a5 88		      lda	Speed1
     64  f91a		       e9 00		      sbc	#0
     65  f91c		       85 88		      sta	Speed1
     66  f91e
     67  f91e		       18		      clc
     68  f91f		       a5 8b		      lda	YPos2
     69  f921		       65 89		      adc	Speed2
     70  f923		       85 8b		      sta	YPos2
     71  f925		       a5 8a		      lda	YPos
     72  f927		       65 88		      adc	Speed1
     73  f929		       85 8a		      sta	YPos
     74  f92b
     75  f92b		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f92d		       b0 0a		      bcs	NewThing2
     77  f92f
     78  f92f							; Reset to floor
     79  f92f		       a9 3e		      lda	#FLOOR_OFFSET
     80  f931		       85 8a		      sta	YPos
     81  f933		       a9 00		      lda	#0
     82  f935		       85 88		      sta	Speed1
     83  f937		       85 89		      sta	Speed2
     84  f939				   NewThing2
     85  f939
     86  f939		       c9 be		      cmp	#CEILING_OFFSET
     87  f93b		       90 0a		      bcc	.next
     88  f93d
     89  f93d							; Reset to ceiling
     90  f93d		       a9 be		      lda	#CEILING_OFFSET
     91  f93f		       85 8a		      sta	YPos
     92  f941		       a9 00		      lda	#0
     93  f943		       85 88		      sta	Speed1
     94  f945		       85 89		      sta	Speed2
     95  f947				   .next
     96  f947		       60		      rts
     97  f948
     98  f948
     99  f948
    100  f948							; Subroutine
    101  f948				   SetHorizPos
    102  f948		       85 02		      sta	WSYNC	; start a new line
    103  f94a		       24 00		      bit	0	; waste 3 cycles
    104  f94c		       38		      sec		; set carry flag
    105  f94d				   DivideLoop
    106  f94d		       e9 0f		      sbc	#15	; subtract 15
    107  f94f		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f951		       49 07		      eor	#7	; calculate fine offset
    109  f953		       0a		      asl
    110  f954		       0a		      asl
    111  f955		       0a		      asl
    112  f956		       0a		      asl
    113  f957		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f959		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f95b		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f95c					      include	"kernel_border.s"
      1  f95c							; Visible Kernel
      2  f95c
      3  f95c				   KernelBorder subroutine
      4  f95c		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f95e
      6  f95e							; First HMOVE
      7  f95e		       85 2a		      sta	HMOVE
      8  f960
      9  f960							; Border top
     10  f960		       a9 00		      lda	#0
     11  f962		       85 08		      sta	COLUPF
     12  f964		       85 0e		      sta	PF1
     13  f966		       85 0f		      sta	PF2
     14  f968		       a9 02		      lda	#SIGNAL_LINE
     15  f96a		       85 09		      sta	COLUBK
     16  f96c
     17  f96c					      REPEAT	6
     18  f96c		       85 02		      sta	WSYNC
     17  f96c					      REPEND
     18  f96e		       85 02		      sta	WSYNC
     17  f96e					      REPEND
     18  f970		       85 02		      sta	WSYNC
     17  f970					      REPEND
     18  f972		       85 02		      sta	WSYNC
     17  f972					      REPEND
     18  f974		       85 02		      sta	WSYNC
     17  f974					      REPEND
     18  f976		       85 02		      sta	WSYNC
     19  f978					      REPEND
     20  f978
     21  f978		       a9 00		      lda	#0
     22  f97a		       85 09		      sta	COLUBK
     23  f97c		       85 02		      sta	WSYNC
     24  f97e
     25  f97e							; Start top border
     26  f97e				   border_top
     27  f97e							; Make the playfield solid.
     28  f97e		       a9 3f		      lda	#%00111111
     29  f980		       85 0e		      sta	PF1
     30  f982		       a9 ff		      lda	#%11111111
     31  f984		       85 0f		      sta	PF2
     32  f986
     33  f986		       a9 42		      lda	#COL_BG
     34  f988		       a0 00		      ldy	#0
     35  f98a
     36  f98a							; X_XXXX_XX
     37  f98a							; Commented lines removed to save on space.
     38  f98a		       85 08		      sta	COLUPF
     39  f98c		       85 02		      sta	WSYNC
     40  f98e		       84 08		      sty	COLUPF
     41  f990		       85 02		      sta	WSYNC
     42  f992		       85 08		      sta	COLUPF
     43  f994		       85 02		      sta	WSYNC
     44  f996							; sta COLUPF
     45  f996		       85 02		      sta	WSYNC
     46  f998							; sta COLUPF
     47  f998		       85 02		      sta	WSYNC
     48  f99a		       84 08		      sty	COLUPF
     49  f99c		       85 02		      sta	WSYNC
     50  f99e		       85 08		      sta	COLUPF
     51  f9a0
     52  f9a0		       85 02		      sta	WSYNC
     53  f9a2							; sta COLUPF
     54  f9a2
     55  f9a2				   PlayArea
     56  f9a2							; PF is now the playing area
      0  f9a2					      ASSERT_RUNTIME	"_scycles == #0"
      1  f9a2				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f9a2  && !(  _scycles == #0  ) }
      2  f9a2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f9a2					      sleep	61
      1  f9a2				   .CYCLES    SET	61
      2  f9a2
      3  f9a2				  -	      IF	.CYCLES < 2
      4  f9a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f9a2				  -	      ERR
      6  f9a2					      ENDIF
      7  f9a2
      8  f9a2					      IF	.CYCLES & 1
      9  f9a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f9a2		       04 00		      nop	0
     11  f9a4				  -	      ELSE
     12  f9a4				  -	      bit	VSYNC
     13  f9a4					      ENDIF
     14  f9a4				   .CYCLES    SET	.CYCLES - 3
     15  f9a4					      ENDIF
     16  f9a4
     17  f9a4					      REPEAT	.CYCLES / 2
     18  f9a4		       ea		      nop
     17  f9a4					      REPEND
     18  f9a5		       ea		      nop
     17  f9a5					      REPEND
     18  f9a6		       ea		      nop
     17  f9a6					      REPEND
     18  f9a7		       ea		      nop
     17  f9a7					      REPEND
     18  f9a8		       ea		      nop
     17  f9a8					      REPEND
     18  f9a9		       ea		      nop
     17  f9a9					      REPEND
     18  f9aa		       ea		      nop
     17  f9aa					      REPEND
     18  f9ab		       ea		      nop
     17  f9ab					      REPEND
     18  f9ac		       ea		      nop
     17  f9ac					      REPEND
     18  f9ad		       ea		      nop
     17  f9ad					      REPEND
     18  f9ae		       ea		      nop
     17  f9ae					      REPEND
     18  f9af		       ea		      nop
     17  f9af					      REPEND
     18  f9b0		       ea		      nop
     17  f9b0					      REPEND
     18  f9b1		       ea		      nop
     17  f9b1					      REPEND
     18  f9b2		       ea		      nop
     17  f9b2					      REPEND
     18  f9b3		       ea		      nop
     17  f9b3					      REPEND
     18  f9b4		       ea		      nop
     17  f9b4					      REPEND
     18  f9b5		       ea		      nop
     17  f9b5					      REPEND
     18  f9b6		       ea		      nop
     17  f9b6					      REPEND
     18  f9b7		       ea		      nop
     17  f9b7					      REPEND
     18  f9b8		       ea		      nop
     17  f9b8					      REPEND
     18  f9b9		       ea		      nop
     17  f9b9					      REPEND
     18  f9ba		       ea		      nop
     17  f9ba					      REPEND
     18  f9bb		       ea		      nop
     17  f9bb					      REPEND
     18  f9bc		       ea		      nop
     17  f9bc					      REPEND
     18  f9bd		       ea		      nop
     17  f9bd					      REPEND
     18  f9be		       ea		      nop
     17  f9be					      REPEND
     18  f9bf		       ea		      nop
     17  f9bf					      REPEND
     18  f9c0		       ea		      nop
     19  f9c1					      REPEND
     59  f9c1		       a9 00		      lda	#%00000000
     60  f9c3		       85 0d		      sta	PF0
     61  f9c5		       a9 20		      lda	#%00100000
     62  f9c7		       85 0e		      sta	PF1
     63  f9c9		       a9 00		      lda	#%00000000
     64  f9cb		       85 0f		      sta	PF2
      0  f9cd					      ASSERT_RUNTIME	"_scycles == #0"
      1  f9cd				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f9cd  && !(  _scycles == #0  ) }
      2  f9cd					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f9cd					      sleep	7
      1  f9cd				   .CYCLES    SET	7
      2  f9cd
      3  f9cd				  -	      IF	.CYCLES < 2
      4  f9cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f9cd				  -	      ERR
      6  f9cd					      ENDIF
      7  f9cd
      8  f9cd					      IF	.CYCLES & 1
      9  f9cd					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f9cd		       04 00		      nop	0
     11  f9cf				  -	      ELSE
     12  f9cf				  -	      bit	VSYNC
     13  f9cf					      ENDIF
     14  f9cf				   .CYCLES    SET	.CYCLES - 3
     15  f9cf					      ENDIF
     16  f9cf
     17  f9cf					      REPEAT	.CYCLES / 2
     18  f9cf		       ea		      nop
     17  f9cf					      REPEND
     18  f9d0		       ea		      nop
     19  f9d1					      REPEND
     67  f9d1		       4c 03 fa 	      jmp	row_start
     68  f9d4							; enter row on cycle 10.
     69  f9d4
     70  f9d4							; reset the background for bottom of playfield
     71  f9d4				   border_bottom
     72  f9d4							;sta WSYNC
     73  f9d4
     74  f9d4							; Form the bottom of the level frame.
     75  f9d4		       a9 3f		      lda	#%00111111
     76  f9d6		       85 0e		      sta	PF1
     77  f9d8		       a9 ff		      lda	#%11111111
     78  f9da		       85 0f		      sta	PF2
     79  f9dc
     80  f9dc							; Clear all sprites.
     81  f9dc		       a9 00		      lda	#0
     82  f9de		       85 1c		      sta	EMERALD_SP
     83  f9e0		       85 1b		      sta	JET_SP
     84  f9e2		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f9e4
     86  f9e4		       a9 42		      lda	#COL_BG
     87  f9e6		       a0 00		      ldy	#0
     88  f9e8		       85 02		      sta	WSYNC
     89  f9ea
     90  f9ea		       84 08		      sty	COLUPF
     91  f9ec		       85 02		      sta	WSYNC
     92  f9ee
     93  f9ee		       85 08		      sta	COLUPF
     94  f9f0		       85 02		      sta	WSYNC
     95  f9f2
     96  f9f2		       85 02		      sta	WSYNC
     97  f9f4
     98  f9f4		       85 02		      sta	WSYNC
     99  f9f6
    100  f9f6		       84 08		      sty	COLUPF
    101  f9f8		       85 02		      sta	WSYNC
    102  f9fa
    103  f9fa		       85 08		      sta	COLUPF
    104  f9fc		       85 02		      sta	WSYNC
    105  f9fe		       85 02		      sta	WSYNC
    106  fa00		       4c 00 f7 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fa03					      include	"kernel_row.s"
      1  fa03							; Frame Start
      2  fa03
      3  fa03							; Macros for calculating sprite values (GRPx).
      4  fa03
      5  fa03							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  fa03					      mac	kernel_load_player
      7  fa03							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  fa03					      dcp	SpriteEnd	; 5c
      9  fa03					      ldy	#0	; 2c
     10  fa03							; constant 6c:
     11  fa03					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  fa03					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  fa03					      ldy	SpriteEnd
     14  fa03							; 4c
     15  fa03					      ldx	Frame0,Y
     16  fa03					      endm
     17  fa03
     18  fa03							; mac jet_spritedata_calc
     19  fa03							;
     20  fa03							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  fa03							; GRP0.
     22  fa03					      mac	jet_spritedata_calc
     23  fa03							; loader
     24  fa03					      lda	#SPRITE_HEIGHT
     25  fa03					      dcp	SpriteEnd
     26  fa03					      ldy	SpriteEnd
     27  fa03
     28  fa03							; 4c
     29  fa03							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  fa03							; from Frame0 + Y must never cross a page boundary.
     31  fa03					      lda	Frame0,Y
     32  fa03							; 6c
     33  fa03					      .byte	$b0, $01	;2c / 3c (taken)
     34  fa03					      .byte	$2c	; 4c / 0c
     35  fa03					      sta	JET_SP	; 0c / 3c
     36  fa03					      endm
     37  fa03
     38  fa03				   row_start
     39  fa03
     40  fa03							; [scanline 1]
     41  fa03				   row_1
     42  fa03							; Enter after scanline starts on row "9" and wraps
      0  fa03					      ASSERT_RUNTIME	"_scycles == #10"
      1  fa03				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fa03  && !(  _scycles == #10  ) }
      2  fa03					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  fa03
      0  fa03					      jet_spritedata_calc
      1  fa03
      2  fa03		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa05		       c7 86		      dcp	SpriteEnd
      4  fa07		       a4 86		      ldy	SpriteEnd
      5  fa09
      6  fa09
      7  fa09
      8  fa09
      9  fa09		       b9 00 fc 	      lda	Frame0,Y
     10  fa0c
     11  fa0c		       b0 01		      .byte.b	$b0, $01
     12  fa0e		       2c		      .byte.b	$2c
     13  fa0f		       85 1b		      sta	JET_SP
     46  fa11
     47  fa11							; [[[Nibble VM.]]]
     48  fa11		       85 02		      sta	WSYNC
     49  fa13
     50  fa13							; sleep 46
     51  fa13
      0  fa13					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa13				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa13  && !(  _scycles == #0  ) }
      2  fa13					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  fa13
     54  fa13							; [scanline 2]
     55  fa13				   row_2
      0  fa13					      jet_spritedata_calc
      1  fa13
      2  fa13		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa15		       c7 86		      dcp	SpriteEnd
      4  fa17		       a4 86		      ldy	SpriteEnd
      5  fa19
      6  fa19
      7  fa19
      8  fa19
      9  fa19		       b9 00 fc 	      lda	Frame0,Y
     10  fa1c
     11  fa1c		       b0 01		      .byte.b	$b0, $01
     12  fa1e		       2c		      .byte.b	$2c
     13  fa1f		       85 1b		      sta	JET_SP
     57  fa21
     58  fa21							; Black out playfield
     59  fa21							; TODO This should be done with playfield pixels, not color.
     60  fa21		       a9 00		      lda	#0
     61  fa23		       85 08		      sta	COLUPF
     62  fa25
     63  fa25							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  fa25		       a6 98		      ldx	RamKernelPhpTarget
     65  fa27		       9a		      txs
     66  fa28
     67  fa28							; [[[Nibble VM.]]]
      0  fa28					      sleep	30
      1  fa28				   .CYCLES    SET	30
      2  fa28
      3  fa28				  -	      IF	.CYCLES < 2
      4  fa28				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa28				  -	      ERR
      6  fa28					      ENDIF
      7  fa28
      8  fa28				  -	      IF	.CYCLES & 1
      9  fa28				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa28				  -	      nop	0
     11  fa28				  -	      ELSE
     12  fa28				  -	      bit	VSYNC
     13  fa28				  -	      ENDIF
     14  fa28				  -.CYCLES    SET	.CYCLES - 3
     15  fa28					      ENDIF
     16  fa28
     17  fa28					      REPEAT	.CYCLES / 2
     18  fa28		       ea		      nop
     17  fa28					      REPEND
     18  fa29		       ea		      nop
     17  fa29					      REPEND
     18  fa2a		       ea		      nop
     17  fa2a					      REPEND
     18  fa2b		       ea		      nop
     17  fa2b					      REPEND
     18  fa2c		       ea		      nop
     17  fa2c					      REPEND
     18  fa2d		       ea		      nop
     17  fa2d					      REPEND
     18  fa2e		       ea		      nop
     17  fa2e					      REPEND
     18  fa2f		       ea		      nop
     17  fa2f					      REPEND
     18  fa30		       ea		      nop
     17  fa30					      REPEND
     18  fa31		       ea		      nop
     17  fa31					      REPEND
     18  fa32		       ea		      nop
     17  fa32					      REPEND
     18  fa33		       ea		      nop
     17  fa33					      REPEND
     18  fa34		       ea		      nop
     17  fa34					      REPEND
     18  fa35		       ea		      nop
     17  fa35					      REPEND
     18  fa36		       ea		      nop
     19  fa37					      REPEND
     69  fa37
     70  fa37							; Load PF1 value
     71  fa37		       a9 a0		      lda	#%10100000
     72  fa39		       85 96		      sta	RamPF1Value
     73  fa3b
     74  fa3b		       a9 04		      lda	#4
     75  fa3d		       8d 96 02 	      sta	TIM64T
     76  fa40
     77  fa40							; Enable playfield at end of scanline
     78  fa40		       a9 42		      lda	#COL_BG
     79  fa42		       85 08		      sta	COLUPF
     80  fa44
     81  fa44							; lda #%00001000
     82  fa44							; sta REFP1
     83  fa44
      0  fa44					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa44				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa44  && !(  _scycles == #0  ) }
      2  fa44					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  fa44
     86  fa44							; [scanline 3]
     87  fa44				   row_3
      0  fa44					      jet_spritedata_calc
      1  fa44
      2  fa44		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa46		       c7 86		      dcp	SpriteEnd
      4  fa48		       a4 86		      ldy	SpriteEnd
      5  fa4a
      6  fa4a
      7  fa4a
      8  fa4a
      9  fa4a		       b9 00 fc 	      lda	Frame0,Y
     10  fa4d
     11  fa4d		       b0 01		      .byte.b	$b0, $01
     12  fa4f		       2c		      .byte.b	$2c
     13  fa50		       85 1b		      sta	JET_SP
     89  fa52
     90  fa52							; Pre-populate graphics.
     91  fa52		       a9 09		      lda	#SPRITE_HEIGHT
      0  fa54					      KERNEL_LOAD_PLAYER
      1  fa54
      2  fa54		       c7 86		      dcp	SpriteEnd
      3  fa56		       a0 00		      ldy	#0
      4  fa58
      5  fa58		       b0 01		      .byte.b	$b0, $01
      6  fa5a		       2c		      .byte.b	$2c
      7  fa5b		       a4 86		      ldy	SpriteEnd
      8  fa5d
      9  fa5d		       be 00 fc 	      ldx	Frame0,Y
     93  fa60		       86 97		      stx	RamKernelGRP0
      0  fa62					      KERNEL_LOAD_PLAYER
      1  fa62
      2  fa62		       c7 86		      dcp	SpriteEnd
      3  fa64		       a0 00		      ldy	#0
      4  fa66
      5  fa66		       b0 01		      .byte.b	$b0, $01
      6  fa68		       2c		      .byte.b	$2c
      7  fa69		       a4 86		      ldy	SpriteEnd
      8  fa6b
      9  fa6b		       be 00 fc 	      ldx	Frame0,Y
     95  fa6e		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  fa71		       a5 97		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  fa73					      sleep	2
      1  fa73				   .CYCLES    SET	2
      2  fa73
      3  fa73				  -	      IF	.CYCLES < 2
      4  fa73				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa73				  -	      ERR
      6  fa73					      ENDIF
      7  fa73
      8  fa73				  -	      IF	.CYCLES & 1
      9  fa73				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa73				  -	      nop	0
     11  fa73				  -	      ELSE
     12  fa73				  -	      bit	VSYNC
     13  fa73				  -	      ENDIF
     14  fa73				  -.CYCLES    SET	.CYCLES - 3
     15  fa73					      ENDIF
     16  fa73
     17  fa73					      REPEAT	.CYCLES / 2
     18  fa73		       ea		      nop
     19  fa74					      REPEND
     98  fa74
     99  fa74							; [scanlines 4-5]
    100  fa74							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  fa74		       a6 99		      ldx	RamKernelX
    102  fa76		       38		      sec
      0  fa77					      ASSERT_RUNTIME	"_scycles == #73"
      1  fa77				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fa77  && !(  _scycles == #73  ) }
      2  fa77					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  fa77		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  fa7a
    106  fa7a							; [scanline 6]
    107  fa7a
    108  fa7a							; Try to avoid page crossing in jet_spritedata_calc
    109  fa7a							; TODO enforce this with ASSERT_RUNTIME instead?
    110  fa80		       00 00 00 00*	      align	16
    111  fa80
    112  fa80				   row_after_kernel
    113  fa80				   row_6
      0  fa80					      ASSERT_RUNTIME	"_scycles == #0"
      1  fa80				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fa80  && !(  _scycles == #0  ) }
      2  fa80					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  fa80
    116  fa80							; Cleanup from the kernel.
    117  fa80		       a9 00		      lda	#0
    118  fa82		       85 1e		      sta	EMERALD_MI_ENABLE
    119  fa84		       85 1c		      sta	EMERALD_SP
    120  fa86		       85 08		      sta	COLUPF
    121  fa88		       85 26		      sta	VDELP1
    122  fa8a
      0  fa8a					      jet_spritedata_calc
      1  fa8a
      2  fa8a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa8c		       c7 86		      dcp	SpriteEnd
      4  fa8e		       a4 86		      ldy	SpriteEnd
      5  fa90
      6  fa90
      7  fa90
      8  fa90
      9  fa90		       b9 00 fc 	      lda	Frame0,Y
     10  fa93
     11  fa93		       b0 01		      .byte.b	$b0, $01
     12  fa95		       2c		      .byte.b	$2c
     13  fa96		       85 1b		      sta	JET_SP
    124  fa98
    125  fa98							; Idle.
    126  fa98		       85 02		      sta	WSYNC
    127  fa9a
    128  fa9a							; [scanline 7]
    129  fa9a				   row_7
      0  fa9a					      jet_spritedata_calc
      1  fa9a
      2  fa9a		       a9 09		      lda	#SPRITE_HEIGHT
      3  fa9c		       c7 86		      dcp	SpriteEnd
      4  fa9e		       a4 86		      ldy	SpriteEnd
      5  faa0
      6  faa0
      7  faa0
      8  faa0
      9  faa0		       b9 00 fc 	      lda	Frame0,Y
     10  faa3
     11  faa3		       b0 01		      .byte.b	$b0, $01
     12  faa5		       2c		      .byte.b	$2c
     13  faa6		       85 1b		      sta	JET_SP
    131  faa8
    132  faa8		       a9 42		      lda	#COL_BG
    133  faaa		       85 08		      sta	COLUPF
    134  faac
    135  faac							; FRAMESWITCH
    136  faac		       a9 01		      lda	#01
    137  faae		       25 84		      and	FrameCount
    138  fab0		       d0 13		      bne	loadframe2
    139  fab2
    140  fab2							; Perform gem loading for Kernel A.
    141  fab2
    142  fab2				   loadframe1
      0  fab2					      ASSERT_RUNTIME	"_scycles == #32"
      1  fab2				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $fab2  && !(  _scycles == #32  ) }
      2  fab2					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  fab2
    145  fab2							; Emerald byte setting 1A
    146  fab2							; ldx #0
    147  fab2							; lda KERNEL_STORAGE_R,X
    148  fab2							; sta GEM_00_W
    149  fab2							; inx
    150  fab2							; lda KERNEL_STORAGE_R,X
    151  fab2							; sta GEM_04_W
    152  fab2							; inx
    153  fab2							; lda KERNEL_STORAGE_R,X
    154  fab2							; sta GEM_09_W
    155  fab2							; inx
    156  fab2
    157  fab2		       85 02		      sta	WSYNC
    158  fab4
    159  fab4							; [scanline 8]
      0  fab4					      jet_spritedata_calc
      1  fab4
      2  fab4		       a9 09		      lda	#SPRITE_HEIGHT
      3  fab6		       c7 86		      dcp	SpriteEnd
      4  fab8		       a4 86		      ldy	SpriteEnd
      5  faba
      6  faba
      7  faba
      8  faba
      9  faba		       b9 00 fc 	      lda	Frame0,Y
     10  fabd
     11  fabd		       b0 01		      .byte.b	$b0, $01
     12  fabf		       2c		      .byte.b	$2c
     13  fac0		       85 1b		      sta	JET_SP
    161  fac2
    162  fac2							; Emerald byte setting 1B
    163  fac2							; lda KERNEL_STORAGE_R,X
    164  fac2							; sta GEM_13_W
    165  fac2							; inx
    166  fac2							; lda KERNEL_STORAGE_R,X
    167  fac2							; sta GEM_17_W
    168  fac2							; inx
    169  fac2							; lda KERNEL_STORAGE_R,X
    170  fac2							; sta GEM_18_W
    171  fac2							; inx
    172  fac2							; lda KERNEL_STORAGE_R,X
    173  fac2							; sta GEM_22_W
    174  fac2
    175  fac2		       4c d8 fa 	      jmp	row_8_end
    176  fac5
    177  fac5							; Perform gem loading for Kernel B.
    178  fac5
    179  fac5				   loadframe2
      0  fac5					      ASSERT_RUNTIME	"_scycles == #33"
      1  fac5				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $fac5  && !(  _scycles == #33  ) }
      2  fac5					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  fac5
    182  fac5							; Emerald byte setting 2A
    183  fac5							; ldx #[storage_02 - storage]
    184  fac5							; lda KERNEL_STORAGE_R,X
    185  fac5							; sta GEM_02_W
    186  fac5							; inx
    187  fac5							; lda KERNEL_STORAGE_R,X
    188  fac5							; sta GEM_06_W
    189  fac5							; inx
    190  fac5							; lda KERNEL_STORAGE_R,X
    191  fac5							; sta GEM_08_W
    192  fac5							; inx
    193  fac5
    194  fac5		       85 02		      sta	WSYNC
    195  fac7
    196  fac7							; [scanline 8]
    197  fac7				   row_8
      0  fac7					      jet_spritedata_calc
      1  fac7
      2  fac7		       a9 09		      lda	#SPRITE_HEIGHT
      3  fac9		       c7 86		      dcp	SpriteEnd
      4  facb		       a4 86		      ldy	SpriteEnd
      5  facd
      6  facd
      7  facd
      8  facd
      9  facd		       b9 00 fc 	      lda	Frame0,Y
     10  fad0
     11  fad0		       b0 01		      .byte.b	$b0, $01
     12  fad2		       2c		      .byte.b	$2c
     13  fad3		       85 1b		      sta	JET_SP
    199  fad5
    200  fad5							; Emerald byte setting 2B
    201  fad5							; lda KERNEL_STORAGE_R,X
    202  fad5							; sta GEM_11_W
    203  fad5							; inx
    204  fad5							; lda KERNEL_STORAGE_R,X
    205  fad5							; sta GEM_15_W
    206  fad5							; inx
    207  fad5							; lda KERNEL_STORAGE_R,X
    208  fad5							; sta GEM_20_W
    209  fad5							; inx
    210  fad5							; lda KERNEL_STORAGE_R,X
    211  fad5							; sta GEM_24_W
    212  fad5
    213  fad5		       4c d8 fa 	      jmp	row_8_end
    214  fad8
    215  fad8							; Common row 8 return.
    216  fad8
    217  fad8				   row_8_end
    218  fad8							; Idle.
    219  fad8		       85 02		      sta	WSYNC
    220  fada
    221  fada							; [scanline 8]
    222  fada							; Repeat loop until LoopCount < 0
    223  fada		       c6 83		      dec	LoopCount
    224  fadc		       30 03		      bmi	row_end
    225  fade		       4c 03 fa 	      jmp	row_start
    226  fae1				   row_end
    227  fae1		       4c d4 f9 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fae4					      include	"kernel_gem.s"
      1  fae4							;
      2  fae4							; Gem Kernels
      3  fae4							;
      4  fae4							; Gems are displayed in alternating kernels. This chart shows
      5  fae4							; which kernel is responsible for which gem, with missiles denoted.
      6  fae4							;
      7  fae4							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fae4							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fae4							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fae4							;  #	 0^	 8^	  17^	    26^       gem index
     11  fae4							;
     12  fae4							; The middle bar indicates where the pattern reverses.
     13  fae4							;
     14  fae4							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fae4							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fae4							; requires with a single sprite. By alternating sprites each frame with an...
     17  fae4							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fae4							; line, except for two. These are instead rendered by the missile, which
     19  fae4							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fae4
     21  fae4							; for copying
     22  fb00		       00 00 00 00*	      align	256
     23  fb00
     24  fb00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fb00							;
     26  fb00							; GEM KERNEL A
     27  fb00							;
     28  fb00
     29  fb00				   kernel_1_start subroutine
     30  fb00					      rorg	$f100
     31  fb00
     32  fb00							; Kernel Marker
     33  fb00		       0a		      .byte.b	$A
     34  fb01
     35  fb01				   KernelA_early
     36  fb01							; Early code to set next GRP0 image. Immediate value is overwritten
     37  fb01		       a9 ff		      lda	#$ff
     38  fb03
     39  fb03				   KernelA    subroutine
      0  fb03					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fb03				   .KERNEL    SET	$A
      2  fb03				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fb03					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  fb03
     42  fb03							; Write Gemini 0A into delayed sprite register
     43  fb03		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  fb03		       f1 04	   KernelA_VDEL1 =	. - 1
     45  fb05		       84 1c		      sty	EMERALD_SP
     46  fb07							; Write Player from accumulator. When writing to the other sprite, the
     47  fb07							; TIA will copy Gemini 0A into visible sprite register
     48  fb07		       85 1b		      sta	JET_SP
     49  fb09							; Write Gemini 1A into visible sprite register
     50  fb09		       a0 66		      ldy	#%01100110
     51  fb09		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  fb0b		       84 1c		      sty	EMERALD_SP
     53  fb0d		       a0 06		      ldy	#%00000110
     54  fb0d		       f1 0e	   KernelA_STY =	. - 1
     55  fb0f
     56  fb0f							; Need D0 for VDELP1 trigger with PHP
      0  fb0f					      sleep	2
      1  fb0f				   .CYCLES    SET	2
      2  fb0f
      3  fb0f				  -	      IF	.CYCLES < 2
      4  fb0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb0f				  -	      ERR
      6  fb0f					      ENDIF
      7  fb0f
      8  fb0f				  -	      IF	.CYCLES & 1
      9  fb0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb0f				  -	      nop	0
     11  fb0f				  -	      ELSE
     12  fb0f				  -	      bit	VSYNC
     13  fb0f				  -	      ENDIF
     14  fb0f				  -.CYCLES    SET	.CYCLES - 3
     15  fb0f					      ENDIF
     16  fb0f
     17  fb0f					      REPEAT	.CYCLES / 2
     18  fb0f		       ea		      nop
     19  fb10					      REPEND
     58  fb10
     59  fb10							; Register config
     60  fb10		       a9 08		      lda	#%00001000
     61  fb12		       85 0c		      sta	REFP1
     62  fb14
     63  fb14							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fb14					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fb14				   .KERNEL    SET	$A
      2  fb14				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fb14					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     65  fb14				   KernelA_A
     66  fb14		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     67  fb16
     68  fb16							; vvv RST0
     69  fb16				   KernelA_B
     70  fb16		       a5 96		      lda	RamPF1Value
     71  fb18				   KernelA_C
     72  fb18		       84 26		      sty	VDELP1	; disable delayed sprite
     73  fb1a				   KernelA_D
     74  fb1a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  fb1a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  fb1a				   .CYCLES    SET	3
      2  fb1a
      3  fb1a				  -	      IF	.CYCLES < 2
      4  fb1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb1a				  -	      ERR
      6  fb1a					      ENDIF
      7  fb1a
      8  fb1a					      IF	.CYCLES & 1
      9  fb1a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb1a		       04 00		      nop	0
     11  fb1c				  -	      ELSE
     12  fb1c				  -	      bit	VSYNC
     13  fb1c					      ENDIF
     14  fb1c				   .CYCLES    SET	.CYCLES - 3
     15  fb1c					      ENDIF
     16  fb1c
     17  fb1c				  -	      REPEAT	.CYCLES / 2
     18  fb1c				  -	      nop
     19  fb1c					      REPEND
     76  fb1c				   KernelA_E
     77  fb1c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     78  fb1e				   KernelA_F
     79  fb1e		       85 1e		      sta	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     80  fb20							; sleep 3 ; FIXME This should be a "sleep 3" and the missile enabled should be moved
     81  fb20				   KernelA_G
     82  fb20		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     83  fb22
     84  fb22				   KernelA_H
     85  fb22		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     86  fb24
      0  fb24					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fb24				   .KERNEL    SET	$A
      2  fb24				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fb24					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     88  fb24							; RST4 vvv
     89  fb24				   KernelA_I
     90  fb24		       08		      php		; Reset "medium close" NUSIZ repetition
     91  fb25				   KernelA_J		; unchanging
     92  fb25		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     93  fb27				   KernelA_K
     94  fb27		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     95  fb29							; RST4 ^^^
     96  fb29
     97  fb29				   KernelA_L
     98  fb29		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME this should be in prelude
     99  fb2b				   KernelA_M
    100  fb2b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    101  fb2d
    102  fb2d				   KernelA_N
    103  fb2d				   KernelA_O
      0  fb2d					      sleep	2
      1  fb2d				   .CYCLES    SET	2
      2  fb2d
      3  fb2d				  -	      IF	.CYCLES < 2
      4  fb2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb2d				  -	      ERR
      6  fb2d					      ENDIF
      7  fb2d
      8  fb2d				  -	      IF	.CYCLES & 1
      9  fb2d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb2d				  -	      nop	0
     11  fb2d				  -	      ELSE
     12  fb2d				  -	      bit	VSYNC
     13  fb2d				  -	      ENDIF
     14  fb2d				  -.CYCLES    SET	.CYCLES - 3
     15  fb2d					      ENDIF
     16  fb2d
     17  fb2d					      REPEAT	.CYCLES / 2
     18  fb2d		       ea		      nop
     19  fb2e					      REPEND
    105  fb2e							; reset stack pointer
    106  fb2e		       68		      pla
    107  fb2f
    108  fb2f							; End visible line
      0  fb2f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fb2f				   .KERNEL    SET	$A
      2  fb2f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fb2f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    110  fb2f
    111  fb2f				   KernelA_branch
    112  fb2f		       ad 84 02 	      lda	INTIM
    113  fb32		       d0 cd		      bne	KernelA_early
    114  fb34
    115  fb34		       4c 80 fa 	      jmp	row_after_kernel
    116  fb37
    117  fb37					      rend
    118  fb37				   kernel_1_end
      0  fb37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fb37				   .STARTA    SET	kernel_1_start
      2  fb37				   .ENDA      SET	kernel_1_end
      3  fb37				   .LEN       SET	$40
      4  fb37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fb37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fb37				  -	      err
      7  fb37					      endif
    120  fb37
    121  fb37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    122  fb37							;
    123  fb37							; GEM KERNEL B
    124  fb37							;
    125  fb37
    126  fb37				   kernel_2_start subroutine
    127  fb37					      rorg	$f100
    128  fb37
    129  fb37							; Kernel Marker
    130  fb37		       0b		      .byte.b	$B
    131  fb38
    132  fb38				   KernelB_early
    133  fb38							; Early code to set next GRP0 image. Value is overwritten
    134  fb38		       a9 ff		      lda	#$ff
    135  fb3a
    136  fb3a				   KernelB    subroutine
      0  fb3a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fb3a				   .KERNEL    SET	$B
      2  fb3a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fb3a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    138  fb3a
    139  fb3a							; Write Gemini 0A into delayed sprite register
    140  fb3a		       84 1c		      sty	EMERALD_SP
    141  fb3c							; Write Player from accumulator. When writing to the other sprite, the
    142  fb3c							; TIA will copy Gemini 0A into visible sprite register
    143  fb3c		       85 1b		      sta	JET_SP
    144  fb3e		       a0 aa		      ldy	#%10101010
    145  fb3e		       f1 08	   KernelB_VDEL0 =	. - 1
    146  fb40							; Write Gemini 1A into delayed sprite register
    147  fb40		       84 1c		      sty	EMERALD_SP
      0  fb42					      sleep	2
      1  fb42				   .CYCLES    SET	2
      2  fb42
      3  fb42				  -	      IF	.CYCLES < 2
      4  fb42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb42				  -	      ERR
      6  fb42					      ENDIF
      7  fb42
      8  fb42				  -	      IF	.CYCLES & 1
      9  fb42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb42				  -	      nop	0
     11  fb42				  -	      ELSE
     12  fb42				  -	      bit	VSYNC
     13  fb42				  -	      ENDIF
     14  fb42				  -.CYCLES    SET	.CYCLES - 3
     15  fb42					      ENDIF
     16  fb42
     17  fb42					      REPEAT	.CYCLES / 2
     18  fb42		       ea		      nop
     19  fb43					      REPEND
    149  fb43
    150  fb43							; Register config
    151  fb43		       a9 ff		      lda	#$ff
    152  fb45		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    153  fb47
    154  fb47		       a0 ff		      ldy	#$ff
    155  fb47		       f1 11	   KernelB_STY =	. - 1
    156  fb49
    157  fb49							; Load PF1 value into accumulator
    158  fb49		       a5 96		      lda	RamPF1Value
    159  fb4b
    160  fb4b							; Clear bits in processor status register for drawing.
    161  fb4b							; clc
    162  fb4b							; bit RamLowerSixByte
    163  fb4b		       38		      sec
    164  fb4c
    165  fb4c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fb4c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fb4c				   .KERNEL    SET	$B
      2  fb4c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fb4c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    167  fb4c				   KernelB_A
    168  fb4c		       85 11		      sta	EMERALD_SP_RESET
    169  fb4e				   KernelB_B
    170  fb4e		       24 93		      bit	RamZeroByte
    171  fb50				   KernelB_C
      0  fb50					      sleep	3
      1  fb50				   .CYCLES    SET	3
      2  fb50
      3  fb50				  -	      IF	.CYCLES < 2
      4  fb50				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb50				  -	      ERR
      6  fb50					      ENDIF
      7  fb50
      8  fb50					      IF	.CYCLES & 1
      9  fb50					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb50		       04 00		      nop	0
     11  fb52				  -	      ELSE
     12  fb52				  -	      bit	VSYNC
     13  fb52					      ENDIF
     14  fb52				   .CYCLES    SET	.CYCLES - 3
     15  fb52					      ENDIF
     16  fb52
     17  fb52				  -	      REPEAT	.CYCLES / 2
     18  fb52				  -	      nop
     19  fb52					      REPEND
    173  fb52				   KernelB_D
    174  fb52		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    175  fb54
    176  fb54							; below has one php load (could just be RESET)
    177  fb54				   KernelB_E
    178  fb54		       08		      php
    179  fb55				   KernelB_F
    180  fb55		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    181  fb57				   KernelB_G
    182  fb57		       85 0e		      sta	PF1
    183  fb59				   KernelB_H
    184  fb59		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    185  fb5b							; above has one PHP load
    186  fb5b
    187  fb5b				   KernelB_I
    188  fb5b		       85 11		      sta	EMERALD_SP_RESET
    189  fb5d				   KernelB_J
    190  fb5d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    191  fb5f				   KernelB_K
    192  fb5f		       86 1e		      stx	EMERALD_MI_ENABLE
    193  fb61				   KernelB_L
    194  fb61		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    195  fb63
    196  fb63				   KernelB_M
    197  fb63				   KernelB_N
      0  fb63					      sleep	2
      1  fb63				   .CYCLES    SET	2
      2  fb63
      3  fb63				  -	      IF	.CYCLES < 2
      4  fb63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb63				  -	      ERR
      6  fb63					      ENDIF
      7  fb63
      8  fb63				  -	      IF	.CYCLES & 1
      9  fb63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb63				  -	      nop	0
     11  fb63				  -	      ELSE
     12  fb63				  -	      bit	VSYNC
     13  fb63				  -	      ENDIF
     14  fb63				  -.CYCLES    SET	.CYCLES - 3
     15  fb63					      ENDIF
     16  fb63
     17  fb63					      REPEAT	.CYCLES / 2
     18  fb63		       ea		      nop
     19  fb64					      REPEND
    199  fb64
    200  fb64							; reset stack pointer
    201  fb64		       68		      pla
    202  fb65
    203  fb65							; End visible line
      0  fb65					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fb65				   .KERNEL    SET	$B
      2  fb65				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fb65					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    205  fb65
    206  fb65				   KernelB_branch
    207  fb65		       ad 84 02 	      lda	INTIM
    208  fb68		       d0 ce		      bne	KernelB_early
    209  fb6a		       4c 80 fa 	      jmp	row_after_kernel
    210  fb6d
    211  fb6d					      rend
    212  fb6d				   kernel_2_end
      0  fb6d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fb6d				   .STARTA    SET	kernel_2_start
      2  fb6d				   .ENDA      SET	kernel_2_end
      3  fb6d				   .LEN       SET	$40
      4  fb6d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fb6d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fb6d				  -	      err
      7  fb6d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fb6d					      include	"data_sprites.s"
      1  fc00		       00 00 00 00*	      align	256
      2  fc00
      3  fc00							; Player
      4  fc00				   Frame0
      5  fc00		       00		      .byte.b	#%00000000
      6  fc01		       60		      .byte.b	#%01100000
      7  fc02		       60		      .byte.b	#%01100000
      8  fc03		       60		      .byte.b	#%01100000
      9  fc04		       c0		      .byte.b	#%11000000
     10  fc05		       c0		      .byte.b	#%11000000
     11  fc06		       f0		      .byte.b	#%11110000
     12  fc07		       c0		      .byte.b	#%11000000
     13  fc08		       c0		      .byte.b	#%11000000
     14  fc09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fc0a					      include	"data_levels.s"
      1  fc10		       00 00 00 00*	      align	8
      2  fc10							; first bit of byte 2 & 3 are unused for simplicity
      3  fc10
      4  fc10				   level_00
      5  fc10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fc14
      7  fc14				   level_01
      8  fc14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fc18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fc1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fc20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fc24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fc28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fc2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fc30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fc34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fc38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fc3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fc40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fc44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fc48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fc4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fc50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fc54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fc58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fc5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fc60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fc64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fc68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fc6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fc70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fc74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fc78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fc7c				   level_01_end
     35  fc7c
     36  fc7c
     37  fc7c				   shard_map
     38  fc7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fc7d				   shard_map_end
------- FILE main.s
    125  fc7d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
