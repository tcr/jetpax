------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008f ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e		       00	   ROW_DEMO_INDEX byte.b
     49 U008f
     50 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     51 U008f
     52 U008f		       00 10	   ROW_COUNT  equ	16
     53 U008f
     54 U008f		       00 52	   SIGNAL_LINE equ	$52
     55 U008f
     56 U008f		       11 00	   KERNEL_START equ	$1100
     57 U008f
     58 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     59 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     60 U008f
     61 U008f							; Sprites
     62 U008f
     63 U008f							; Nusiz
     64 U008f		       00 13	   THREE_COPIES equ	%00010011
     65 U008f
     66 U008f							; Frame 1 sprites
     67 U008f		       00 60	   EMR1       equ	%01100000
     68 U008f		       00 06	   EMR2       equ	%00000110
     69 U008f		       00 66	   EMR3       equ	%01100110
     70 U008f
     71 U008f							; Frame 2 sprites
     72 U008f		       00 c0	   T1	      equ	%11000000
     73 U008f		       00 0c	   T2	      equ	%00001100
     74 U008f		       00 cc	   T3	      equ	%11001100
     75 U008f
     76 U008f							; Shorthands
     77 U008f
     78 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     79 U008f		       00 85	   SET_1_0    equ	$85	; STA
     80 U008f		       00 86	   SET_0_1    equ	$86	; STX
     81 U008f		       00 84	   SET_1_1    equ	$84	; STY
     82 U008f
     83 U008f		       00 86	   SET_0_L    equ	$86	; STX
     84 U008f		       00 85	   SET_1_L    equ	$85	; STY
     85 U008f
     86 U008f		       00 85	   SET_0_R    equ	$85	; STA
     87 U008f		       00 84	   SET_1_R    equ	$84	; STY
     88 U008f
     89 U008f							; Gem enabling/disabling globally
     90 U008f
     91 U008f							; ; all off
     92 U008f							; GEM_00 equ SET_0_0
     93 U008f							; GEM_02 equ SET_0_0
     94 U008f							; GEM_04 equ SET_0_0
     95 U008f							; GEM_06 equ SET_0_0
     96 U008f							; GEM_08 equ SET_0_L
     97 U008f							; GEM_09 equ SET_0_0
     98 U008f							; GEM_11 equ SET_0_0
     99 U008f							; GEM_13 equ SET_0_0
    100 U008f							; GEM_15 equ SET_0_0
    101 U008f							; GEM_17 equ SET_0_R
    102 U008f							; GEM_18 equ SET_0_0
    103 U008f							; GEM_20 equ SET_0_0
    104 U008f							; GEM_22 equ SET_0_0
    105 U008f							; GEM_24 equ SET_0_0
    106 U008f
    107 U008f							; all on
    108 U008f		       00 84	   GEM_00     equ	SET_1_1
    109 U008f		       00 84	   GEM_02     equ	SET_1_1
    110 U008f		       00 84	   GEM_04     equ	SET_1_1
    111 U008f		       00 84	   GEM_06     equ	SET_1_1
    112 U008f		       00 85	   GEM_08     equ	SET_1_L
    113 U008f		       00 84	   GEM_09     equ	SET_1_1
    114 U008f		       00 84	   GEM_11     equ	SET_1_1
    115 U008f		       00 84	   GEM_13     equ	SET_1_1
    116 U008f		       00 84	   GEM_15     equ	SET_1_1
    117 U008f		       00 84	   GEM_17     equ	SET_1_R
    118 U008f		       00 84	   GEM_18     equ	SET_1_1
    119 U008f		       00 84	   GEM_20     equ	SET_1_1
    120 U008f		       00 84	   GEM_22     equ	SET_1_1
    121 U008f		       00 84	   GEM_24     equ	SET_1_1
    122 U008f
    123 U008f							; ; odd on
    124 U008f							; GEM_00 equ SET_1_0
    125 U008f							; GEM_02 equ SET_1_0
    126 U008f							; GEM_04 equ SET_1_0
    127 U008f							; GEM_06 equ SET_1_0
    128 U008f							; GEM_08 equ SET_1_L
    129 U008f							; GEM_09 equ SET_0_1
    130 U008f							; GEM_11 equ SET_0_1
    131 U008f							; GEM_13 equ SET_0_1
    132 U008f							; GEM_15 equ SET_0_1
    133 U008f							; GEM_17 equ SET_0_R
    134 U008f							; GEM_18 equ SET_1_0
    135 U008f							; GEM_20 equ SET_1_0
    136 U008f							; GEM_22 equ SET_1_0
    137 U008f							; GEM_24 equ SET_1_0
    138 U008f
    139 U008f							; ; even on
    140 U008f							; GEM_00 equ SET_0_1
    141 U008f							; GEM_02 equ SET_0_1
    142 U008f							; GEM_04 equ SET_0_1
    143 U008f							; GEM_06 equ SET_0_1
    144 U008f							; GEM_08 equ SET_0_L
    145 U008f							; GEM_09 equ SET_1_0
    146 U008f							; GEM_11 equ SET_1_0
    147 U008f							; GEM_13 equ SET_1_0
    148 U008f							; GEM_15 equ SET_1_0
    149 U008f							; GEM_17 equ SET_1_R
    150 U008f							; GEM_18 equ SET_0_1
    151 U008f							; GEM_20 equ SET_0_1
    152 U008f							; GEM_22 equ SET_0_1
    153 U008f							; GEM_24 equ SET_0_1
    154 U008f
    155 U008f							; Colors
    156 U008f
    157 U008f		       00 42	   COL_BG     equ	$42
    158 U008f		       00 cc	   COL_EMERALD equ	$CC
    159 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    160 U008f
    161 U008f							; HMOVE values
    162 U008f
    163 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    164 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    165 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    166 U008f
    167 U008f							; Sprite details
    168 U008f
    169 U008f		       00 09	   SPRITE_HEIGHT equ	9
    170 U008f
    171 U008f
    172 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    173 U008f		       00 1c	   EMERALD_SP equ	GRP1
    174 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    175 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    176 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    177 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    178 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    179 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    180 U008f
    181 U008f		       00 1b	   JET_SP     equ	GRP0
    182 U008f		       00 10	   JET_SP_RESET equ	RESP0
    183 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    184 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    185 U008f
    186 U008f
    187 U008f							; Offset from the sprite label to the point
    188 U008f							; at which the sprite actually starts. This is the 0-padding
    189 U008f							; FRAME_OFFSET equ 53
    190 U008f
    191 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    192 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    193 U008f
    194 U008f							; Compared with YPos
    195 U008f		       00 43	   FLOOR_OFFSET equ	67
    196 U008f		       00 bf	   CEILING_OFFSET equ	191
    197 U008f
    198 U008f							; YPos definite position
    199 U008f		       00 64	   YPosStart  equ	100
    200 U008f
    201 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    202 U008f
    203  10000 ????				       seg	Code
    204  10000 ????
    205  d000					      org	$D000
    206  d000					      rorg	$F000
    207  d000
    208  d000		       00	   BANK1      byte.b
    209  d001
    210  d200					      org	$D200
    211  d200					      rorg	$F200
    212  d200
    213  d200				   Bank1Start
    214  d200		       ad fa ff 	      lda	$FFFA
    215  d203		       ea		      nop
    216  d204		       ea		      nop
    217  d205		       ea		      nop
    218  d206
    219  d206							; Epilogue
    220  dffc					      org	$DFFC
    221  dffc					      rorg	$FFFC
    222  dffc		       00 f2		      .word.w	Bank1Start
    223  dffe		       00 f2		      .word.w	Bank1Start
    224  e000
    225  e000					      org	$E000
    226  e000					      rorg	$F000
    227  e000
    228  e000		       00	   BANK2      byte.b
    229  e001
    230  e200					      org	$E200
    231  e200					      rorg	$F200
    232  e200
    233  e200				   Bank2Start
    234  e200		       ad fa ff 	      lda	$FFFA
    235  e203		       ea		      nop
    236  e204		       ea		      nop
    237  e205		       ea		      nop
    238  e206
    239  e206							; Epilogue
    240  effc					      org	$EFFC
    241  effc					      rorg	$FFFC
    242  effc		       00 f2		      .word.w	Bank2Start
    243  effe		       00 f2		      .word.w	Bank2Start
    244  f000
    245  f000					      org	$F000
    246  f000					      rorg	$F000
    247  f000
    248  f000		       00	   BANK3      byte.b
    249  f001
    250  f200					      org	$F200
    251  f200					      rorg	$F200
    252  f200
    253  f200				   Start
    254  f200		       ad fa ff 	      lda	$FFFA
    255  f203		       ea		      nop
    256  f204		       ea		      nop
    257  f205		       ea		      nop
    258  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    260  f211		       a9 00		      lda	#0
    261  f213		       85 83		      sta	FrameCount
    262  f215
    263  f215							; P0 has three copies
    264  f215		       a9 13		      lda	#THREE_COPIES
    265  f217		       85 05		      sta	EMERALD_COPIES
    266  f219
    267  f219		       a9 00		      lda	#$00
    268  f21b		       85 09		      sta	COLUBK
    269  f21d		       a9 01		      lda	#%00000001
    270  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    271  f221
    272  f221							; Disable VDEL
    273  f221		       a9 00		      lda	#0
    274  f223		       85 25		      sta	VDELP0
    275  f225		       85 26		      sta	VDELP1
    276  f227
    277  f227
    278  f227							; Player 0
    279  f227		       a2 cc		      ldx	#COL_EMERALD
    280  f229		       86 07		      stx	EMERALD_SP_COLOR
    281  f22b
    282  f22b							; Player 1
    283  f22b		       a9 98		      lda	#$98
    284  f22d		       85 06		      sta	JET_SP_COLOR
    285  f22f		       a9 00		      lda	#$00
    286  f231		       85 1b		      sta	JET_SP
    287  f233
    288  f233							; Positions
    289  f233		       a9 64		      lda	#YPosStart
    290  f235		       85 89		      sta	YPos
    291  f237		       a9 37		      lda	#55
    292  f239		       85 86		      sta	XPos
    293  f23b		       a9 00		      lda	#0
    294  f23d		       85 87		      sta	Speed1
    295  f23f		       85 88		      sta	Speed2
    296  f241		       85 8a		      sta	YPos2
    297  f243
    298  f243		       a9 00		      lda	#0
    299  f245		       85 8e		      sta	ROW_DEMO_INDEX
    300  f247
    301  f247				   BeginFrame
      0  f247					      VERTICAL_SYNC
      1  f247		       a9 0e		      lda	#%1110
      2  f249		       85 02	   .VSLP1     sta	WSYNC
      3  f24b		       85 00		      sta	VSYNC
      4  f24d		       4a		      lsr
      5  f24e		       d0 f9		      bne	.VSLP1
    303  f250
      0  f250					      TIMER_SETUP	37
      1  f250				   .lines     SET	37
      2  f250		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f252		       85 02		      sta	WSYNC
      4  f254		       8d 96 02 	      sta	TIM64T
    305  f257
    306  f257							; Scanline counter
    307  f257		       a9 10		      lda	#ROW_COUNT
    308  f259		       85 82		      sta	LoopCount
    309  f25b
    310  f25b							; Frame counter
    311  f25b		       e6 83		      inc	FrameCount
    312  f25d
    313  f25d							; Now the work stuff
    314  f25d		       4c e0 f2 	      jmp	copy_frame
    315  f260
    316  f260					      MAC	emeralds_two
    317  f260				   .target    SET	{1}
    318  f260					      tax
    319  f260					      and	#%11
    320  f260					      tay
    321  f260					      lda	map_full,Y
    322  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    323  f260					      txa
    324  f260					      ror
    325  f260					      ror
    326  f260					      ENDM
    327  f260
    328  f260					      MAC	emeralds_two_skip
    329  f260					      ror
    330  f260					      ror
    331  f260					      ENDM
    332  f260
    333  f260					      MAC	emeralds_one
    334  f260				   .target    SET	{1}
    335  f260				   .source    SET	{2}
    336  f260					      tax
    337  f260					      and	#%1
    338  f260					      tay
    339  f260					      lda	.source,Y
    340  f260					      sta	[.target - storage + KERNEL_STORAGE_W]
    341  f260					      txa
    342  f260					      ror
    343  f260					      ror
    344  f260					      ENDM
    345  f260
    346  f260					      MAC	emeralds_one_skip
    347  f260					      ror
    348  f260					      ENDM
    349  f260
    350  f260					      align	8
    351  f260				   storage
    352  f260							; Emerald byte setting 1A
    353  f260				   storage_00
    354  f260		       85		      .byte.b	SET_1_0
    355  f261				   storage_04
    356  f261		       87		      .byte.b	SET_0_0
    357  f262				   storage_09
    358  f262		       84		      .byte.b	SET_1_1
    359  f263				   storage_13
    360  f263		       84		      .byte.b	SET_1_1
    361  f264				   storage_17
    362  f264		       84		      .byte.b	SET_1_R
    363  f265				   storage_18
    364  f265		       87		      .byte.b	SET_0_0
    365  f266				   storage_22
    366  f266		       87		      .byte.b	SET_0_0
    367  f267
    368  f267							; Emerald byte setting 2A
    369  f267				   storage_02
    370  f267		       87		      .byte.b	SET_0_0
    371  f268				   storage_06
    372  f268		       87		      .byte.b	SET_0_0
    373  f269				   storage_11
    374  f269		       84		      .byte.b	SET_1_1
    375  f26a				   storage_15
    376  f26a		       84		      .byte.b	SET_1_1
    377  f26b				   storage_20
    378  f26b		       87		      .byte.b	SET_0_0
    379  f26c				   storage_24
    380  f26c		       86		      .byte.b	SET_0_1
    381  f26d				   storage_end
    382  f26d
    383  f270		       00 00 00 	      align	8
    384  f270				   map_emeralds
    385  f270							; first bit of byte 2 & 3 are unused for simplicity
    386  f270		       08 00 00 00	      .byte.b	%1000, %0000000, %0000000, %00000000
    387  f274		       04 00 00 00	      .byte.b	%0100, %0000000, %0000000, %00000000
    388  f278		       02 00 00 00	      .byte.b	%0010, %0000000, %0000000, %00000000
    389  f27c		       01 00 00 00	      .byte.b	%0001, %0000000, %0000000, %00000000
    390  f280		       00 40 00 00	      .byte.b	%0000, %1000000, %0000000, %00000000
    391  f284		       00 20 00 00	      .byte.b	%0000, %0100000, %0000000, %00000000
    392  f288		       00 10 00 00	      .byte.b	%0000, %0010000, %0000000, %00000000
    393  f28c		       00 08 00 00	      .byte.b	%0000, %0001000, %0000000, %00000000
    394  f290		       00 04 00 00	      .byte.b	%0000, %0000100, %0000000, %00000000
    395  f294		       00 02 00 00	      .byte.b	%0000, %0000010, %0000000, %00000000
    396  f298		       00 01 00 00	      .byte.b	%0000, %0000001, %0000000, %00000000
    397  f29c		       00 00 40 00	      .byte.b	%0000, %0000000, %1000000, %00000000
    398  f2a0		       00 00 20 00	      .byte.b	%0000, %0000000, %0100000, %00000000
    399  f2a4		       00 00 10 00	      .byte.b	%0000, %0000000, %0010000, %00000000
    400  f2a8		       00 00 08 00	      .byte.b	%0000, %0000000, %0001000, %00000000
    401  f2ac		       00 00 04 00	      .byte.b	%0000, %0000000, %0000100, %00000000
    402  f2b0		       00 00 02 00	      .byte.b	%0000, %0000000, %0000010, %00000000
    403  f2b4		       00 00 01 00	      .byte.b	%0000, %0000000, %0000001, %00000000
    404  f2b8		       00 00 00 80	      .byte.b	%0000, %0000000, %0000000, %10000000
    405  f2bc		       00 00 00 40	      .byte.b	%0000, %0000000, %0000000, %01000000
    406  f2c0		       00 00 00 20	      .byte.b	%0000, %0000000, %0000000, %00100000
    407  f2c4		       00 00 00 10	      .byte.b	%0000, %0000000, %0000000, %00010000
    408  f2c8		       00 00 00 08	      .byte.b	%0000, %0000000, %0000000, %00001000
    409  f2cc		       00 00 00 04	      .byte.b	%0000, %0000000, %0000000, %00000100
    410  f2d0		       00 00 00 02	      .byte.b	%0000, %0000000, %0000000, %00000010
    411  f2d4		       00 00 00 01	      .byte.b	%0000, %0000000, %0000000, %00000001
    412  f2d8				   map_emeralds_end
    413  f2d8
    414  f2d8					      align	8
    415  f2d8				   map_full
    416  f2d8		       87		      .byte.b	SET_0_0
    417  f2d9		       86		      .byte.b	SET_0_1
    418  f2da		       85		      .byte.b	SET_1_0
    419  f2db		       84		      .byte.b	SET_1_1
    420  f2dc				   map_missle_r
    421  f2dc		       85		      .byte.b	SET_0_R
    422  f2dd		       84		      .byte.b	SET_1_R
    423  f2de				   map_missle_l
    424  f2de		       86		      .byte.b	SET_0_L
    425  f2df		       85		      .byte.b	SET_1_L
    426  f2e0
    427  f2e0
    428  f2e0				   copy_frame
    429  f2e0							; FRAMESWITCH
    430  f2e0		       a9 01		      lda	#01
    431  f2e2		       25 83		      and	FrameCount
    432  f2e4		       f0 03		      beq	CopyFrame1Kernel
    433  f2e6		       4c 84 f3 	      jmp	CopyFrame2Kernel
    434  f2e9
    435  f2e9				   CopyFrame1Kernel
    436  f2e9							; Copy: KERNEL 1
    437  f2e9		       a0 2d		      ldy	#(kernel_1_end - kernel_1_start)-1
    438  f2eb				   .copy_loop_1
    439  f2eb		       b9 4b f6 	      lda	kernel_1_start,Y
    440  f2ee		       99 00 10 	      sta	$1000,Y
    441  f2f1		       88		      dey
    442  f2f2		       d0 f7		      bne	.copy_loop_1
    443  f2f4		       ad 4b f6 	      lda	kernel_1_start
    444  f2f7		       8d 00 10 	      sta	$1000
    445  f2fa
    446  f2fa		       a6 8e		      ldx	ROW_DEMO_INDEX
    447  f2fc		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f2ff					      EMERALDS_TWO_SKIP
      1  f2ff		       6a		      ror
      2  f300		       6a		      ror
      0  f301					      EMERALDS_TWO	storage_22
      1  f301				   .target    SET	storage_22
      2  f301		       aa		      tax
      3  f302		       29 03		      and	#%11
      4  f304		       a8		      tay
      5  f305		       b9 d8 f2 	      lda	map_full,Y
      6  f308		       8d 46 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f30b		       8a		      txa
      8  f30c		       6a		      ror
      9  f30d		       6a		      ror
      0  f30e					      EMERALDS_TWO_SKIP
      1  f30e		       6a		      ror
      2  f30f		       6a		      ror
      0  f310					      EMERALDS_TWO	storage_18
      1  f310				   .target    SET	storage_18
      2  f310		       aa		      tax
      3  f311		       29 03		      and	#%11
      4  f313		       a8		      tay
      5  f314		       b9 d8 f2 	      lda	map_full,Y
      6  f317		       8d 45 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f31a		       8a		      txa
      8  f31b		       6a		      ror
      9  f31c		       6a		      ror
    452  f31d
    453  f31d		       a6 8e		      ldx	ROW_DEMO_INDEX
    454  f31f		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f322					      EMERALDS_ONE	storage_17, map_missle_r
      1  f322				   .target    SET	storage_17
      2  f322				   .source    SET	map_missle_r
      3  f322		       aa		      tax
      4  f323		       29 01		      and	#%1
      5  f325		       a8		      tay
      6  f326		       b9 dc f2 	      lda	.source,Y
      7  f329		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f32c		       8a		      txa
      9  f32d		       6a		      ror
     10  f32e		       6a		      ror
      0  f32f					      EMERALDS_TWO_SKIP
      1  f32f		       6a		      ror
      2  f330		       6a		      ror
      0  f331					      EMERALDS_TWO	storage_13
      1  f331				   .target    SET	storage_13
      2  f331		       aa		      tax
      3  f332		       29 03		      and	#%11
      4  f334		       a8		      tay
      5  f335		       b9 d8 f2 	      lda	map_full,Y
      6  f338		       8d 43 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f33b		       8a		      txa
      8  f33c		       6a		      ror
      9  f33d		       6a		      ror
      0  f33e					      EMERALDS_TWO_SKIP
      1  f33e		       6a		      ror
      2  f33f		       6a		      ror
    459  f340
    460  f340		       a6 8e		      ldx	ROW_DEMO_INDEX
    461  f342		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f345					      EMERALDS_TWO	storage_09
      1  f345				   .target    SET	storage_09
      2  f345		       aa		      tax
      3  f346		       29 03		      and	#%11
      4  f348		       a8		      tay
      5  f349		       b9 d8 f2 	      lda	map_full,Y
      6  f34c		       8d 42 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f34f		       8a		      txa
      8  f350		       6a		      ror
      9  f351		       6a		      ror
      0  f352					      EMERALDS_ONE	Temp, map_missle_l	; ???
      1  f352				   .target    SET	Temp
      2  f352				   .source    SET	map_missle_l
      3  f352		       aa		      tax
      4  f353		       29 01		      and	#%1
      5  f355		       a8		      tay
      6  f356		       b9 de f2 	      lda	.source,Y
      7  f359		       85 60		      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f35b		       8a		      txa
      9  f35c		       6a		      ror
     10  f35d		       6a		      ror
      0  f35e					      EMERALDS_TWO_SKIP
      1  f35e		       6a		      ror
      2  f35f		       6a		      ror
      0  f360					      EMERALDS_TWO	storage_04
      1  f360				   .target    SET	storage_04
      2  f360		       aa		      tax
      3  f361		       29 03		      and	#%11
      4  f363		       a8		      tay
      5  f364		       b9 d8 f2 	      lda	map_full,Y
      6  f367		       8d 41 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f36a		       8a		      txa
      8  f36b		       6a		      ror
      9  f36c		       6a		      ror
    466  f36d
    467  f36d		       a6 8e		      ldx	ROW_DEMO_INDEX
    468  f36f		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f372					      EMERALDS_TWO_SKIP
      1  f372		       6a		      ror
      2  f373		       6a		      ror
      0  f374					      EMERALDS_TWO	storage_00
      1  f374				   .target    SET	storage_00
      2  f374		       aa		      tax
      3  f375		       29 03		      and	#%11
      4  f377		       a8		      tay
      5  f378		       b9 d8 f2 	      lda	map_full,Y
      6  f37b		       8d 40 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f37e		       8a		      txa
      8  f37f		       6a		      ror
      9  f380		       6a		      ror
    471  f381
    472  f381		       4c 08 f4 	      jmp	CopyFrameNext
    473  f384
    474  f384				   CopyFrame2Kernel
    475  f384							; Copy: KERNEL 2
    476  f384		       a0 2c		      ldy	#(kernel_2_end - kernel_2_start)-1
    477  f386				   .copy_loop_2
    478  f386		       b9 79 f6 	      lda	kernel_2_start,Y
    479  f389		       99 00 10 	      sta	$1000,Y
    480  f38c		       88		      dey
    481  f38d		       d0 f7		      bne	.copy_loop_2
    482  f38f		       ad 79 f6 	      lda	kernel_2_start
    483  f392		       8d 00 10 	      sta	$1000
    484  f395
    485  f395		       a6 8e		      ldx	ROW_DEMO_INDEX
    486  f397		       bd 73 f2 	      lda	map_emeralds+3,X
      0  f39a					      EMERALDS_TWO	storage_24
      1  f39a				   .target    SET	storage_24
      2  f39a		       aa		      tax
      3  f39b		       29 03		      and	#%11
      4  f39d		       a8		      tay
      5  f39e		       b9 d8 f2 	      lda	map_full,Y
      6  f3a1		       8d 4c 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3a4		       8a		      txa
      8  f3a5		       6a		      ror
      9  f3a6		       6a		      ror
      0  f3a7					      EMERALDS_TWO_SKIP
      1  f3a7		       6a		      ror
      2  f3a8		       6a		      ror
      0  f3a9					      EMERALDS_TWO	storage_20
      1  f3a9				   .target    SET	storage_20
      2  f3a9		       aa		      tax
      3  f3aa		       29 03		      and	#%11
      4  f3ac		       a8		      tay
      5  f3ad		       b9 d8 f2 	      lda	map_full,Y
      6  f3b0		       8d 4b 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3b3		       8a		      txa
      8  f3b4		       6a		      ror
      9  f3b5		       6a		      ror
      0  f3b6					      EMERALDS_TWO_SKIP
      1  f3b6		       6a		      ror
      2  f3b7		       6a		      ror
    491  f3b8
    492  f3b8		       a6 8e		      ldx	ROW_DEMO_INDEX
    493  f3ba		       bd 72 f2 	      lda	map_emeralds+2,X
      0  f3bd					      EMERALDS_ONE_SKIP
      1  f3bd		       6a		      ror
      0  f3be					      EMERALDS_TWO	storage_15
      1  f3be				   .target    SET	storage_15
      2  f3be		       aa		      tax
      3  f3bf		       29 03		      and	#%11
      4  f3c1		       a8		      tay
      5  f3c2		       b9 d8 f2 	      lda	map_full,Y
      6  f3c5		       8d 4a 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3c8		       8a		      txa
      8  f3c9		       6a		      ror
      9  f3ca		       6a		      ror
      0  f3cb					      EMERALDS_TWO_SKIP
      1  f3cb		       6a		      ror
      2  f3cc		       6a		      ror
      0  f3cd					      EMERALDS_TWO	storage_11
      1  f3cd				   .target    SET	storage_11
      2  f3cd		       aa		      tax
      3  f3ce		       29 03		      and	#%11
      4  f3d0		       a8		      tay
      5  f3d1		       b9 d8 f2 	      lda	map_full,Y
      6  f3d4		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3d7		       8a		      txa
      8  f3d8		       6a		      ror
      9  f3d9		       6a		      ror
    498  f3da
    499  f3da		       a6 8e		      ldx	ROW_DEMO_INDEX
    500  f3dc		       bd 71 f2 	      lda	map_emeralds+1,X
      0  f3df					      EMERALDS_TWO_SKIP
      1  f3df		       6a		      ror
      2  f3e0		       6a		      ror
      0  f3e1					      EMERALDS_ONE_SKIP
      1  f3e1		       6a		      ror
      0  f3e2					      EMERALDS_TWO	storage_06
      1  f3e2				   .target    SET	storage_06
      2  f3e2		       aa		      tax
      3  f3e3		       29 03		      and	#%11
      4  f3e5		       a8		      tay
      5  f3e6		       b9 d8 f2 	      lda	map_full,Y
      6  f3e9		       8d 48 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f3ec		       8a		      txa
      8  f3ed		       6a		      ror
      9  f3ee		       6a		      ror
      0  f3ef					      EMERALDS_TWO_SKIP
      1  f3ef		       6a		      ror
      2  f3f0		       6a		      ror
    505  f3f1
    506  f3f1		       a6 8e		      ldx	ROW_DEMO_INDEX
    507  f3f3		       bd 70 f2 	      lda	map_emeralds+0,X
      0  f3f6					      EMERALDS_TWO	storage_02
      1  f3f6				   .target    SET	storage_02
      2  f3f6		       aa		      tax
      3  f3f7		       29 03		      and	#%11
      4  f3f9		       a8		      tay
      5  f3fa		       b9 d8 f2 	      lda	map_full,Y
      6  f3fd		       8d 47 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      7  f400		       8a		      txa
      8  f401		       6a		      ror
      9  f402		       6a		      ror
      0  f403					      EMERALDS_TWO_SKIP
      1  f403		       6a		      ror
      2  f404		       6a		      ror
    510  f405
    511  f405		       4c 08 f4 	      jmp	CopyFrameNext
    512  f408
    513  f408
    514  f408				   CopyFrameNext
    515  f408
    516  f408		       a5 83		      lda	FrameCount
    517  f40a		       29 0f		      and	#%1111
    518  f40c		       c9 0f		      cmp	#%1111
    519  f40e		       d0 0d		      bne	.next_next_thing
    520  f410
    521  f410		       18		      clc
    522  f411		       a5 8e		      lda	ROW_DEMO_INDEX
    523  f413		       69 04		      adc	#4
    524  f415		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
    525  f417		       90 02		      bcc	.next_thing_local
    526  f419		       a9 00		      lda	#0
    527  f41b				   .next_thing_local
    528  f41b		       85 8e		      sta	ROW_DEMO_INDEX
    529  f41d				   .next_next_thing
    530  f41d		       85 02		      sta	WSYNC
    531  f41f
    532  f41f							; Positioning
      0  f41f					      SLEEP	40
      1  f41f				   .CYCLES    SET	40
      2  f41f
      3  f41f				  -	      IF	.CYCLES < 2
      4  f41f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f41f				  -	      ERR
      6  f41f					      ENDIF
      7  f41f
      8  f41f				  -	      IF	.CYCLES & 1
      9  f41f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f41f				  -	      nop	0
     11  f41f				  -	      ELSE
     12  f41f				  -	      bit	VSYNC
     13  f41f				  -	      ENDIF
     14  f41f				  -.CYCLES    SET	.CYCLES - 3
     15  f41f					      ENDIF
     16  f41f
     17  f41f					      REPEAT	.CYCLES / 2
     18  f41f		       ea		      nop
     17  f41f					      REPEND
     18  f420		       ea		      nop
     17  f420					      REPEND
     18  f421		       ea		      nop
     17  f421					      REPEND
     18  f422		       ea		      nop
     17  f422					      REPEND
     18  f423		       ea		      nop
     17  f423					      REPEND
     18  f424		       ea		      nop
     17  f424					      REPEND
     18  f425		       ea		      nop
     17  f425					      REPEND
     18  f426		       ea		      nop
     17  f426					      REPEND
     18  f427		       ea		      nop
     17  f427					      REPEND
     18  f428		       ea		      nop
     17  f428					      REPEND
     18  f429		       ea		      nop
     17  f429					      REPEND
     18  f42a		       ea		      nop
     17  f42a					      REPEND
     18  f42b		       ea		      nop
     17  f42b					      REPEND
     18  f42c		       ea		      nop
     17  f42c					      REPEND
     18  f42d		       ea		      nop
     17  f42d					      REPEND
     18  f42e		       ea		      nop
     17  f42e					      REPEND
     18  f42f		       ea		      nop
     17  f42f					      REPEND
     18  f430		       ea		      nop
     17  f430					      REPEND
     18  f431		       ea		      nop
     17  f431					      REPEND
     18  f432		       ea		      nop
     19  f433					      REPEND
    534  f433		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    535  f435		       85 02		      sta	WSYNC
    536  f437
    537  f437							; Misc
    538  f437		       a9 00		      lda	#00
    539  f439		       85 1e		      sta	EMERALD_MI_ENABLE
    540  f43b
    541  f43b							; Assign dervied SpriteEnd value
    542  f43b		       a9 c8		      lda	#HEIGHT_OFFSET
    543  f43d		       e5 89		      sbc	YPos
    544  f43f		       85 85		      sta	SpriteEnd
    545  f441
    546  f441							; Move missile to starting position and fine-tune position
    547  f441							; TODO replace with an HMOVE macro
    548  f441		       85 02		      sta	WSYNC
      0  f443					      sleep	EMERALD_MI_HMOVE_S
      1  f443				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f443
      3  f443				  -	      IF	.CYCLES < 2
      4  f443				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f443				  -	      ERR
      6  f443					      ENDIF
      7  f443
      8  f443					      IF	.CYCLES & 1
      9  f443					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f443		       04 00		      nop	0
     11  f445				  -	      ELSE
     12  f445				  -	      bit	VSYNC
     13  f445					      ENDIF
     14  f445				   .CYCLES    SET	.CYCLES - 3
     15  f445					      ENDIF
     16  f445
     17  f445					      REPEAT	.CYCLES / 2
     18  f445		       ea		      nop
     17  f445					      REPEND
     18  f446		       ea		      nop
     17  f446					      REPEND
     18  f447		       ea		      nop
     17  f447					      REPEND
     18  f448		       ea		      nop
     17  f448					      REPEND
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     17  f44b					      REPEND
     18  f44c		       ea		      nop
     17  f44c					      REPEND
     18  f44d		       ea		      nop
     17  f44d					      REPEND
     18  f44e		       ea		      nop
     17  f44e					      REPEND
     18  f44f		       ea		      nop
     17  f44f					      REPEND
     18  f450		       ea		      nop
     17  f450					      REPEND
     18  f451		       ea		      nop
     17  f451					      REPEND
     18  f452		       ea		      nop
     17  f452					      REPEND
     18  f453		       ea		      nop
     17  f453					      REPEND
     18  f454		       ea		      nop
     17  f454					      REPEND
     18  f455		       ea		      nop
     17  f455					      REPEND
     18  f456		       ea		      nop
     19  f457					      REPEND
    550  f457		       85 13		      sta	EMERALD_MI_RESET
    551  f459
    552  f459							; Player 1
    553  f459		       a5 86		      lda	XPos
    554  f45b		       a2 00		      ldx	#0
    555  f45d		       20 14 f7 	      jsr	SetHorizPos
    556  f460
    557  f460
    558  f460							; Choose which hmove value to use
    559  f460							; FRAMESWITCH
    560  f460		       a9 01		      lda	#01
    561  f462		       25 83		      and	FrameCount
    562  f464		       d0 07		      bne	doframe2
    563  f466
    564  f466							; frame 1
    565  f466		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
    566  f468		       85 23		      sta	EMERALD_MI_HMOVE
    567  f46a		       4c 71 f4 	      jmp	doframe2after
    568  f46d
    569  f46d							; frame 2
    570  f46d				   doframe2
    571  f46d		       a9 10		      lda	#EMERALD_MI_HMOVE_3
    572  f46f		       85 23		      sta	EMERALD_MI_HMOVE
    573  f471				   doframe2after
    574  f471
      0  f471					      TIMER_WAIT
      1  f471				   .waittimer
      2  f471		       ad 84 02 	      lda	INTIM
      3  f474		       d0 fb		      bne	.waittimer
      0  f476					      TIMER_SETUP	192
      1  f476				   .lines     SET	192
      2  f476		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f478		       85 02		      sta	WSYNC
      4  f47a		       8d 96 02 	      sta	TIM64T
    577  f47d		       85 02		      sta	WSYNC	; ???
    578  f47f
    579  f47f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    580  f47f
    581  f47f							; Frame border top
    582  f47f
    583  f47f
    584  f47f							; First HMOVE
    585  f47f		       85 2a		      sta	HMOVE
    586  f481
    587  f481		       a9 00		      lda	#0
    588  f483		       85 08		      sta	COLUPF
    589  f485		       85 0e		      sta	PF1
    590  f487		       85 0f		      sta	PF2
    591  f489		       a9 52		      lda	#SIGNAL_LINE
    592  f48b		       85 09		      sta	COLUBK
    593  f48d
    594  f48d		       85 02		      sta	WSYNC
    595  f48f
    596  f48f		       a9 00		      lda	#0
    597  f491		       85 09		      sta	COLUBK
    598  f493		       85 02		      sta	WSYNC
    599  f495
    600  f495							; Start top border
    601  f495				   border_top
    602  f495							; Make the playfield solid.
    603  f495		       a9 3f		      lda	#%00111111
    604  f497		       85 0e		      sta	PF1
    605  f499		       a9 ff		      lda	#%11111111
    606  f49b		       85 0f		      sta	PF2
    607  f49d
    608  f49d		       a9 42		      lda	#COL_BG
    609  f49f		       a0 00		      ldy	#0
    610  f4a1
    611  f4a1		       85 08		      sta	COLUPF
    612  f4a3		       85 02		      sta	WSYNC
    613  f4a5
    614  f4a5		       84 08		      sty	COLUPF
    615  f4a7		       85 02		      sta	WSYNC
    616  f4a9
    617  f4a9		       85 08		      sta	COLUPF
    618  f4ab		       85 02		      sta	WSYNC
    619  f4ad
    620  f4ad		       85 02		      sta	WSYNC
    621  f4af
    622  f4af		       85 02		      sta	WSYNC
    623  f4b1
    624  f4b1		       84 08		      sty	COLUPF
    625  f4b3		       85 02		      sta	WSYNC
    626  f4b5
    627  f4b5		       85 08		      sta	COLUPF
    628  f4b7		       85 02		      sta	WSYNC
    629  f4b9
    630  f4b9		       85 02		      sta	WSYNC
    631  f4bb
    632  f4bb				   PlayArea
    633  f4bb							; PF is now the playing area
    634  f4bb		       a9 00		      lda	#%00000000
    635  f4bd		       85 0d		      sta	PF0
    636  f4bf		       a9 20		      lda	#%00100000
    637  f4c1		       85 0e		      sta	PF1
    638  f4c3		       a9 00		      lda	#%00000000
    639  f4c5		       85 0f		      sta	PF2
    640  f4c7
    641  f4c7
    642  f4c7							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    643  f4c7
    644  f4c7							; frame start
    645  f4c7
    646  f4c7
    647  f4c7
    648  f4c7
    649  f4c7							; MACRO for calculating next GRPx value
    650  f4c7
    651  f4c7					      MAC	jet_spritedata_calc_nosta
    652  f4c7							; loader
    653  f4c7					      dcp	SpriteEnd
    654  f4c7
    655  f4c7							; 4c
    656  f4c7							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    657  f4c7							; 6c
    658  f4c7					      ldy	#0
    659  f4c7					      .byte	$b0, $01	;2c / 3c (taken)
    660  f4c7					      .byte	$2c	; 4c / 0c
    661  f4c7				   .okok
    662  f4c7					      ldy	SpriteEnd
    663  f4c7
    664  f4c7					      ENDM
    665  f4c7
    666  f4c7					      MAC	jet_spritedata_calc
    667  f4c7							; loader
    668  f4c7					      lda	#SPRITE_HEIGHT
    669  f4c7					      dcp	SpriteEnd
    670  f4c7					      ldy	SpriteEnd
    671  f4c7
    672  f4c7							; 4c
    673  f4c7							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    674  f4c7					      lda	Frame0,Y
    675  f4c7							; 6c
    676  f4c7					      .byte	$b0, $01	;2c / 3c (taken)
    677  f4c7					      .byte	$2c	; 4c / 0c
    678  f4c7					      sta	JET_SP	; 0c / 3c
    679  f4c7
    680  f4c7					      ENDM
    681  f4c7
    682  f4c7
    683  f4c7							; Start the frame with a WSYNC.
    684  f4c7				   frame_start
      0  f4c7					      jet_spritedata_calc
      1  f4c7
      2  f4c7		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4c9		       c7 85		      dcp	SpriteEnd
      4  f4cb		       a4 85		      ldy	SpriteEnd
      5  f4cd
      6  f4cd
      7  f4cd
      8  f4cd		       b9 00 f8 	      lda	Frame0,Y
      9  f4d0
     10  f4d0		       b0 01		      .byte.b	$b0, $01
     11  f4d2		       2c		      .byte.b	$2c
     12  f4d3		       85 1b		      sta	JET_SP
     13  f4d5
    686  f4d5		       85 02		      sta	WSYNC
    687  f4d7
    688  f4d7							; [row:1]
      0  f4d7					      jet_spritedata_calc
      1  f4d7
      2  f4d7		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4d9		       c7 85		      dcp	SpriteEnd
      4  f4db		       a4 85		      ldy	SpriteEnd
      5  f4dd
      6  f4dd
      7  f4dd
      8  f4dd		       b9 00 f8 	      lda	Frame0,Y
      9  f4e0
     10  f4e0		       b0 01		      .byte.b	$b0, $01
     11  f4e2		       2c		      .byte.b	$2c
     12  f4e3		       85 1b		      sta	JET_SP
     13  f4e5
    690  f4e5
    691  f4e5		       a9 00		      lda	#0
    692  f4e7		       85 08		      sta	COLUPF
    693  f4e9
    694  f4e9							; Push jump table to the stack
    695  f4e9		       a9 f5		      lda	#>[frame_row_start - 1]
    696  f4eb		       48		      pha
    697  f4ec		       a9 32		      lda	#<[frame_row_start - 1]
    698  f4ee		       48		      pha
    699  f4ef		       a9 81		      lda	#%10000001
    700  f4f1		       48		      pha
    701  f4f2		       a9 10		      lda	#>[$1100 - 1]
    702  f4f4		       48		      pha
    703  f4f5		       a9 ff		      lda	#<[$1100 - 1]
    704  f4f7		       48		      pha
    705  f4f8		       a9 81		      lda	#%10000001
    706  f4fa		       48		      pha
    707  f4fb
    708  f4fb		       85 02		      sta	WSYNC
    709  f4fd
    710  f4fd							; [row:2]
      0  f4fd					      jet_spritedata_calc
      1  f4fd
      2  f4fd		       a9 09		      lda	#SPRITE_HEIGHT
      3  f4ff		       c7 85		      dcp	SpriteEnd
      4  f501		       a4 85		      ldy	SpriteEnd
      5  f503
      6  f503
      7  f503
      8  f503		       b9 00 f8 	      lda	Frame0,Y
      9  f506
     10  f506		       b0 01		      .byte.b	$b0, $01
     11  f508		       2c		      .byte.b	$2c
     12  f509		       85 1b		      sta	JET_SP
     13  f50b
    712  f50b
    713  f50b
    714  f50b		       a9 42		      lda	#COL_BG
    715  f50d		       85 08		      sta	COLUPF
    716  f50f
    717  f50f
    718  f50f		       a9 09		      lda	#SPRITE_HEIGHT
      0  f511					      jet_spritedata_calc_nosta
      1  f511
      2  f511		       c7 85		      dcp	SpriteEnd
      3  f513
      4  f513
      5  f513
      6  f513
      7  f513		       a0 00		      ldy	#0
      8  f515		       b0 01		      .byte.b	$b0, $01
      9  f517		       2c		      .byte.b	$2c
     10  f518				   .okok
     11  f518		       a4 85		      ldy	SpriteEnd
     12  f51a
    720  f51a		       b9 00 f8 	      lda	Frame0,Y
    721  f51d		       85 fa		      sta	$fa
      0  f51f					      jet_spritedata_calc_nosta
      1  f51f
      2  f51f		       c7 85		      dcp	SpriteEnd
      3  f521
      4  f521
      5  f521
      6  f521
      7  f521		       a0 00		      ldy	#0
      8  f523		       b0 01		      .byte.b	$b0, $01
      9  f525		       2c		      .byte.b	$2c
     10  f526				   .okok
     11  f526		       a4 85		      ldy	SpriteEnd
     12  f528
    723  f528		       b9 00 f8 	      lda	Frame0,Y
    724  f52b		       85 fd		      sta	$fd
    725  f52d
      0  f52d					      sleep	6
      1  f52d				   .CYCLES    SET	6
      2  f52d
      3  f52d				  -	      IF	.CYCLES < 2
      4  f52d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f52d				  -	      ERR
      6  f52d					      ENDIF
      7  f52d
      8  f52d				  -	      IF	.CYCLES & 1
      9  f52d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f52d				  -	      nop	0
     11  f52d				  -	      ELSE
     12  f52d				  -	      bit	VSYNC
     13  f52d				  -	      ENDIF
     14  f52d				  -.CYCLES    SET	.CYCLES - 3
     15  f52d					      ENDIF
     16  f52d
     17  f52d					      REPEAT	.CYCLES / 2
     18  f52d		       ea		      nop
     17  f52d					      REPEND
     18  f52e		       ea		      nop
     17  f52e					      REPEND
     18  f52f		       ea		      nop
     19  f530					      REPEND
    727  f530
    728  f530							; [row:3-4]
    729  f530							; Jump to the copied kernel.
    730  f530				   help_me
    731  f530		       4c 00 11 	      jmp	KERNEL_START
    732  f533
    733  f533				   frame_row_start subroutine
    734  f533							; [row:5]
    735  f533							; Cleanup from the kernel.
    736  f533		       a9 00		      lda	#0
    737  f535		       85 1e		      sta	EMERALD_MI_ENABLE
    738  f537		       85 1c		      sta	EMERALD_SP
    739  f539		       85 08		      sta	COLUPF
    740  f53b
      0  f53b					      jet_spritedata_calc
      1  f53b
      2  f53b		       a9 09		      lda	#SPRITE_HEIGHT
      3  f53d		       c7 85		      dcp	SpriteEnd
      4  f53f		       a4 85		      ldy	SpriteEnd
      5  f541
      6  f541
      7  f541
      8  f541		       b9 00 f8 	      lda	Frame0,Y
      9  f544
     10  f544		       b0 01		      .byte.b	$b0, $01
     11  f546		       2c		      .byte.b	$2c
     12  f547		       85 1b		      sta	JET_SP
     13  f549
    742  f549
    743  f549		       85 02		      sta	WSYNC
    744  f54b
    745  f54b							; [row:6]
      0  f54b					      jet_spritedata_calc
      1  f54b
      2  f54b		       a9 09		      lda	#SPRITE_HEIGHT
      3  f54d		       c7 85		      dcp	SpriteEnd
      4  f54f		       a4 85		      ldy	SpriteEnd
      5  f551
      6  f551
      7  f551
      8  f551		       b9 00 f8 	      lda	Frame0,Y
      9  f554
     10  f554		       b0 01		      .byte.b	$b0, $01
     11  f556		       2c		      .byte.b	$2c
     12  f557		       85 1b		      sta	JET_SP
     13  f559
    747  f559		       a9 42		      lda	#COL_BG
    748  f55b		       85 08		      sta	COLUPF
    749  f55d
    750  f55d							; FRAMESWITCH
    751  f55d		       a9 01		      lda	#01
    752  f55f		       25 83		      and	FrameCount
    753  f561		       d0 44		      bne	loadframe2
    754  f563
    755  f563				   loadframe1
    756  f563							; ~30c
    757  f563
    758  f563							; Emerald byte setting 1A
    759  f563		       a2 00		      ldx	#0
    760  f565		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    761  f568		       8d 0d 10 	      sta	GEM_00_W
    762  f56b		       e8		      inx
    763  f56c		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    764  f56f		       8d 14 10 	      sta	GEM_04_W
    765  f572		       e8		      inx
    766  f573		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    767  f576		       8d 18 10 	      sta	GEM_09_W
    768  f579		       e8		      inx
    769  f57a		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    770  f57d		       8d 1c 10 	      sta	GEM_13_W
    771  f580
    772  f580		       85 02		      sta	WSYNC
    773  f582
    774  f582							; [row:7]
      0  f582					      jet_spritedata_calc
      1  f582
      2  f582		       a9 09		      lda	#SPRITE_HEIGHT
      3  f584		       c7 85		      dcp	SpriteEnd
      4  f586		       a4 85		      ldy	SpriteEnd
      5  f588
      6  f588
      7  f588
      8  f588		       b9 00 f8 	      lda	Frame0,Y
      9  f58b
     10  f58b		       b0 01		      .byte.b	$b0, $01
     11  f58d		       2c		      .byte.b	$2c
     12  f58e		       85 1b		      sta	JET_SP
     13  f590
    776  f590
    777  f590							; Emerald byte setting 1B
    778  f590		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    779  f593		       8d 20 10 	      sta	GEM_17_W
    780  f596		       e8		      inx
    781  f597		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    782  f59a		       8d 22 10 	      sta	GEM_18_W
    783  f59d		       e8		      inx
    784  f59e		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    785  f5a1		       8d 26 10 	      sta	GEM_22_W
    786  f5a4
    787  f5a4		       4c e4 f5 	      jmp	row_7_end
    788  f5a7
    789  f5a7				   loadframe2
    790  f5a7							; ~30c
    791  f5a7
    792  f5a7							; Emerald byte setting 2A
    793  f5a7		       a2 08		      ldx	#8
    794  f5a9		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    795  f5ac		       8d 0f 10 	      sta	GEM_02_W
    796  f5af		       e8		      inx
    797  f5b0		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    798  f5b3		       8d 16 10 	      sta	GEM_06_W
    799  f5b6		       e8		      inx
    800  f5b7		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    801  f5ba		       8d 1a 10 	      sta	GEM_11_W
    802  f5bd
    803  f5bd		       85 02		      sta	WSYNC
    804  f5bf
    805  f5bf							; [row:7]
      0  f5bf					      jet_spritedata_calc
      1  f5bf
      2  f5bf		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c1		       c7 85		      dcp	SpriteEnd
      4  f5c3		       a4 85		      ldy	SpriteEnd
      5  f5c5
      6  f5c5
      7  f5c5
      8  f5c5		       b9 00 f8 	      lda	Frame0,Y
      9  f5c8
     10  f5c8		       b0 01		      .byte.b	$b0, $01
     11  f5ca		       2c		      .byte.b	$2c
     12  f5cb		       85 1b		      sta	JET_SP
     13  f5cd
    807  f5cd
    808  f5cd							; Emerald byte setting 2B
    809  f5cd		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    810  f5d0		       8d 1e 10 	      sta	GEM_15_W
    811  f5d3		       e8		      inx
    812  f5d4		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    813  f5d7		       8d 22 10 	      sta	GEM_20_W
    814  f5da		       e8		      inx
    815  f5db		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    816  f5de		       8d 24 10 	      sta	GEM_24_W
    817  f5e1
    818  f5e1		       4c e4 f5 	      jmp	row_7_end
    819  f5e4
    820  f5e4				   row_7_end
    821  f5e4		       85 02		      sta	WSYNC
    822  f5e6
    823  f5e6							; [row:8]
    824  f5e6							; Repeat loop until LoopCount < 0
    825  f5e6		       c6 82		      dec	LoopCount
    826  f5e8		       30 03		      bmi	frame_bottom
    827  f5ea		       4c c7 f4 	      jmp	frame_start
    828  f5ed
    829  f5ed							; reset the background for bottom of playfield
    830  f5ed				   frame_bottom
    831  f5ed							;sta WSYNC
    832  f5ed
    833  f5ed							; Make the playfield solid.
    834  f5ed		       a9 3f		      lda	#%00111111
    835  f5ef		       85 0e		      sta	PF1
    836  f5f1		       a9 ff		      lda	#%11111111
    837  f5f3		       85 0f		      sta	PF2
    838  f5f5
    839  f5f5							; Clear all sprites.
    840  f5f5		       a9 00		      lda	#0
    841  f5f7		       85 1c		      sta	EMERALD_SP
    842  f5f9		       85 1b		      sta	JET_SP
    843  f5fb		       85 1e		      sta	EMERALD_MI_ENABLE
    844  f5fd
    845  f5fd		       a9 42		      lda	#COL_BG
    846  f5ff		       a0 00		      ldy	#0
    847  f601		       85 02		      sta	WSYNC
    848  f603
    849  f603		       84 08		      sty	COLUPF
    850  f605		       85 02		      sta	WSYNC
    851  f607
    852  f607		       85 08		      sta	COLUPF
    853  f609		       85 02		      sta	WSYNC
    854  f60b
    855  f60b		       85 02		      sta	WSYNC
    856  f60d
    857  f60d		       85 02		      sta	WSYNC
    858  f60f
    859  f60f		       84 08		      sty	COLUPF
    860  f611		       85 02		      sta	WSYNC
    861  f613
    862  f613		       85 08		      sta	COLUPF
    863  f615		       85 02		      sta	WSYNC
    864  f617		       85 02		      sta	WSYNC
    865  f619
    866  f619							; Blank all background colors.
    867  f619				   frame_end
    868  f619		       a9 00		      lda	#0
    869  f61b		       85 08		      sta	COLUPF
    870  f61d		       85 0f		      sta	PF2
    871  f61f		       85 0e		      sta	PF1
    872  f621		       85 1c		      sta	EMERALD_SP
    873  f623		       85 02		      sta	WSYNC
    874  f625
    875  f625							; Guide lines (2x)
    876  f625		       a9 52		      lda	#SIGNAL_LINE
    877  f627		       85 09		      sta	COLUBK
    878  f629		       85 02		      sta	WSYNC
    879  f62b		       a9 00		      lda	#$00
    880  f62d		       85 09		      sta	COLUBK
    881  f62f		       85 02		      sta	WSYNC
    882  f631
      0  f631					      TIMER_WAIT
      1  f631				   .waittimer
      2  f631		       ad 84 02 	      lda	INTIM
      3  f634		       d0 fb		      bne	.waittimer
      0  f636					      TIMER_SETUP	30
      1  f636				   .lines     SET	30
      2  f636		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f638		       85 02		      sta	WSYNC
      4  f63a		       8d 96 02 	      sta	TIM64T
    885  f63d
    886  f63d		       20 a6 f6 	      jsr	MoveJoystick
    887  f640		       20 dd f6 	      jsr	SpeedCalculation
    888  f643
      0  f643					      TIMER_WAIT
      1  f643				   .waittimer
      2  f643		       ad 84 02 	      lda	INTIM
      3  f646		       d0 fb		      bne	.waittimer
    890  f648		       4c 47 f2 	      jmp	BeginFrame
    891  f64b
    892  f64b
    893  f64b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    894  f64b
    895  f64b							; kernels
    896  f64b
    897  f64b
    898  f64b							; Important cycles for the kernels:
    899  f64b							; left border: 29, right border: 64
    900  f64b
    901  f64b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    902  f64b
    903  f64b							; KERNEL 1
    904  f64b
    905  f64b							; Emerald line macro (1, 2, ...)
    906  f64b
    907  f64b				   kernel_1_start
    908  f64b							;dec SpriteEnd
      0  f64b					      sleep	5
      1  f64b				   .CYCLES    SET	5
      2  f64b
      3  f64b				  -	      IF	.CYCLES < 2
      4  f64b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f64b				  -	      ERR
      6  f64b					      ENDIF
      7  f64b
      8  f64b					      IF	.CYCLES & 1
      9  f64b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f64b		       04 00		      nop	0
     11  f64d				  -	      ELSE
     12  f64d				  -	      bit	VSYNC
     13  f64d					      ENDIF
     14  f64d				   .CYCLES    SET	.CYCLES - 3
     15  f64d					      ENDIF
     16  f64d
     17  f64d					      REPEAT	.CYCLES / 2
     18  f64d		       ea		      nop
     19  f64e					      REPEND
    910  f64e		       68		      pla
    911  f64f		       8d 1b 00 	      sta.w	GRP0
    912  f652
    913  f652		       a9 60		      lda	#EMR1
    914  f654		       a2 06		      ldx	#EMR2
    915  f656		       a0 66		      ldy	#EMR3
    916  f658				   .gem_00
    917  f658		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    918  f65a
    919  f65a							; 22
    920  f65a		       85 11		      sta	EMERALD_SP_RESET
      0  f65c					      sleep	6
      1  f65c				   .CYCLES    SET	6
      2  f65c
      3  f65c				  -	      IF	.CYCLES < 2
      4  f65c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f65c				  -	      ERR
      6  f65c					      ENDIF
      7  f65c
      8  f65c				  -	      IF	.CYCLES & 1
      9  f65c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f65c				  -	      nop	0
     11  f65c				  -	      ELSE
     12  f65c				  -	      bit	VSYNC
     13  f65c				  -	      ENDIF
     14  f65c				  -.CYCLES    SET	.CYCLES - 3
     15  f65c					      ENDIF
     16  f65c
     17  f65c					      REPEAT	.CYCLES / 2
     18  f65c		       ea		      nop
     17  f65c					      REPEND
     18  f65d		       ea		      nop
     17  f65d					      REPEND
     18  f65e		       ea		      nop
     19  f65f					      REPEND
    922  f65f				   .gem_04
    923  f65f		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    924  f661		       85 11		      sta	EMERALD_SP_RESET
    925  f663				   .gem_09
    926  f663		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f665					      sleep	3
      1  f665				   .CYCLES    SET	3
      2  f665
      3  f665				  -	      IF	.CYCLES < 2
      4  f665				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f665				  -	      ERR
      6  f665					      ENDIF
      7  f665
      8  f665					      IF	.CYCLES & 1
      9  f665					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f665		       04 00		      nop	0
     11  f667				  -	      ELSE
     12  f667				  -	      bit	VSYNC
     13  f667					      ENDIF
     14  f667				   .CYCLES    SET	.CYCLES - 3
     15  f667					      ENDIF
     16  f667
     17  f667				  -	      REPEAT	.CYCLES / 2
     18  f667				  -	      nop
     19  f667					      REPEND
    928  f667				   .gem_13
    929  f667		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    930  f669		       85 11		      sta	EMERALD_SP_RESET
    931  f66b				   .gem_17
    932  f66b		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    933  f66d				   .gem_18
    934  f66d		       84 1c		      .byte.b	GEM_18, EMERALD_SP
      0  f66f					      sleep	3
      1  f66f				   .CYCLES    SET	3
      2  f66f
      3  f66f				  -	      IF	.CYCLES < 2
      4  f66f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f66f				  -	      ERR
      6  f66f					      ENDIF
      7  f66f
      8  f66f					      IF	.CYCLES & 1
      9  f66f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f66f		       04 00		      nop	0
     11  f671				  -	      ELSE
     12  f671				  -	      bit	VSYNC
     13  f671					      ENDIF
     14  f671				   .CYCLES    SET	.CYCLES - 3
     15  f671					      ENDIF
     16  f671
     17  f671				  -	      REPEAT	.CYCLES / 2
     18  f671				  -	      nop
     19  f671					      REPEND
    936  f671				   .gem_22
    937  f671		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    938  f673
    939  f673							; cycle 64 (start of right border)
      0  f673					      sleep	9
      1  f673				   .CYCLES    SET	9
      2  f673
      3  f673				  -	      IF	.CYCLES < 2
      4  f673				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f673				  -	      ERR
      6  f673					      ENDIF
      7  f673
      8  f673					      IF	.CYCLES & 1
      9  f673					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f673		       04 00		      nop	0
     11  f675				  -	      ELSE
     12  f675				  -	      bit	VSYNC
     13  f675					      ENDIF
     14  f675				   .CYCLES    SET	.CYCLES - 3
     15  f675					      ENDIF
     16  f675
     17  f675					      REPEAT	.CYCLES / 2
     18  f675		       ea		      nop
     17  f675					      REPEND
     18  f676		       ea		      nop
     17  f676					      REPEND
     18  f677		       ea		      nop
     19  f678					      REPEND
    941  f678		       60		      rts
    942  f679				   kernel_1_end
    943  f679
    944  f679		       10 0d	   GEM_00_W   equ	[$1000 + .gem_00 - kernel_1_start]
    945  f679		       10 14	   GEM_04_W   equ	[$1000 + .gem_04 - kernel_1_start]
    946  f679		       10 18	   GEM_09_W   equ	[$1000 + .gem_09 - kernel_1_start]
    947  f679		       10 1c	   GEM_13_W   equ	[$1000 + .gem_13 - kernel_1_start]
    948  f679		       10 20	   GEM_17_W   equ	[$1000 + .gem_17 - kernel_1_start]
    949  f679		       10 22	   GEM_18_W   equ	[$1000 + .gem_18 - kernel_1_start]
    950  f679		       10 26	   GEM_22_W   equ	[$1000 + .gem_22 - kernel_1_start]
    951  f679
    952  f679							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    953  f679
    954  f679							; KERNEL 2
    955  f679
    956  f679							; Emerald line macro (3, 4, ...)
    957  f679
    958  f679				   kernel_2_start
    959  f679
    960  f679		       68		      pla
    961  f67a		       85 1b		      sta	GRP0
      0  f67c					      sleep	4
      1  f67c				   .CYCLES    SET	4
      2  f67c
      3  f67c				  -	      IF	.CYCLES < 2
      4  f67c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f67c				  -	      ERR
      6  f67c					      ENDIF
      7  f67c
      8  f67c				  -	      IF	.CYCLES & 1
      9  f67c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f67c				  -	      nop	0
     11  f67c				  -	      ELSE
     12  f67c				  -	      bit	VSYNC
     13  f67c				  -	      ENDIF
     14  f67c				  -.CYCLES    SET	.CYCLES - 3
     15  f67c					      ENDIF
     16  f67c
     17  f67c					      REPEAT	.CYCLES / 2
     18  f67c		       ea		      nop
     17  f67c					      REPEND
     18  f67d		       ea		      nop
     19  f67e					      REPEND
    963  f67e
    964  f67e							; Enable missile (using excessive lda instructions)
    965  f67e		       a9 02		      lda	#02
    966  f680		       a2 0c		      ldx	#T2
    967  f682		       a0 cc		      ldy	#T3
    968  f684		       85 1e		      sta	EMERALD_MI_ENABLE
    969  f686		       a9 c0		      lda	#T1	; movable
    970  f688				   .gem_02
    971  f688		       84 1c		      .byte.b	GEM_02, EMERALD_SP
    972  f68a
    973  f68a							; cycle 25
    974  f68a		       85 11		      sta	EMERALD_SP_RESET
      0  f68c					      sleep	6
      1  f68c				   .CYCLES    SET	6
      2  f68c
      3  f68c				  -	      IF	.CYCLES < 2
      4  f68c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f68c				  -	      ERR
      6  f68c					      ENDIF
      7  f68c
      8  f68c				  -	      IF	.CYCLES & 1
      9  f68c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f68c				  -	      nop	0
     11  f68c				  -	      ELSE
     12  f68c				  -	      bit	VSYNC
     13  f68c				  -	      ENDIF
     14  f68c				  -.CYCLES    SET	.CYCLES - 3
     15  f68c					      ENDIF
     16  f68c
     17  f68c					      REPEAT	.CYCLES / 2
     18  f68c		       ea		      nop
     17  f68c					      REPEND
     18  f68d		       ea		      nop
     17  f68d					      REPEND
     18  f68e		       ea		      nop
     19  f68f					      REPEND
    976  f68f				   .gem_06
    977  f68f		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    978  f691		       85 11		      sta	EMERALD_SP_RESET
    979  f693				   .gem_11
    980  f693		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    981  f695		       86 1e		      stx	EMERALD_MI_ENABLE
    982  f697				   .gem_15
    983  f697		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    984  f699		       85 11		      sta	EMERALD_SP_RESET
    985  f69b				   .gem_20
    986  f69b		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    987  f69d				   .gem_24
    988  f69d		       84 1c		      .byte.b	GEM_24, EMERALD_SP
      0  f69f					      sleep	6
      1  f69f				   .CYCLES    SET	6
      2  f69f
      3  f69f				  -	      IF	.CYCLES < 2
      4  f69f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f69f				  -	      ERR
      6  f69f					      ENDIF
      7  f69f
      8  f69f				  -	      IF	.CYCLES & 1
      9  f69f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f69f				  -	      nop	0
     11  f69f				  -	      ELSE
     12  f69f				  -	      bit	VSYNC
     13  f69f				  -	      ENDIF
     14  f69f				  -.CYCLES    SET	.CYCLES - 3
     15  f69f					      ENDIF
     16  f69f
     17  f69f					      REPEAT	.CYCLES / 2
     18  f69f		       ea		      nop
     17  f69f					      REPEND
     18  f6a0		       ea		      nop
     17  f6a0					      REPEND
     18  f6a1		       ea		      nop
     19  f6a2					      REPEND
    990  f6a2
    991  f6a2							; cycle 64 (start of right border)
      0  f6a2					      sleep	6
      1  f6a2				   .CYCLES    SET	6
      2  f6a2
      3  f6a2				  -	      IF	.CYCLES < 2
      4  f6a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6a2				  -	      ERR
      6  f6a2					      ENDIF
      7  f6a2
      8  f6a2				  -	      IF	.CYCLES & 1
      9  f6a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6a2				  -	      nop	0
     11  f6a2				  -	      ELSE
     12  f6a2				  -	      bit	VSYNC
     13  f6a2				  -	      ENDIF
     14  f6a2				  -.CYCLES    SET	.CYCLES - 3
     15  f6a2					      ENDIF
     16  f6a2
     17  f6a2					      REPEAT	.CYCLES / 2
     18  f6a2		       ea		      nop
     17  f6a2					      REPEND
     18  f6a3		       ea		      nop
     17  f6a3					      REPEND
     18  f6a4		       ea		      nop
     19  f6a5					      REPEND
    993  f6a5		       60		      rts
    994  f6a6				   kernel_2_end
    995  f6a6
    996  f6a6		       10 0f	   GEM_02_W   equ	[$1000 + .gem_02 - kernel_2_start]
    997  f6a6		       10 16	   GEM_06_W   equ	[$1000 + .gem_06 - kernel_2_start]
    998  f6a6		       10 1a	   GEM_11_W   equ	[$1000 + .gem_11 - kernel_2_start]
    999  f6a6		       10 1e	   GEM_15_W   equ	[$1000 + .gem_15 - kernel_2_start]
   1000  f6a6		       10 22	   GEM_20_W   equ	[$1000 + .gem_20 - kernel_2_start]
   1001  f6a6		       10 24	   GEM_24_W   equ	[$1000 + .gem_24 - kernel_2_start]
   1002  f6a6
   1003  f6a6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1004  f6a6
   1005  f6a6							; SUBROUTINE
   1006  f6a6							; Read joystick movement and apply to object 0
   1007  f6a6				   MoveJoystick
   1008  f6a6							; Move vertically
   1009  f6a6							; (up and down are actually reversed since ypos starts at bottom)
   1010  f6a6							;     ldx YPos
   1011  f6a6		       a9 10		      lda	#%00010000	;Up?
   1012  f6a8		       2c 80 02 	      bit	SWCHA
   1013  f6ab		       d0 0d		      bne	SkipMoveUp
   1014  f6ad
   1015  f6ad		       18		      clc
   1016  f6ae		       a5 88		      lda	Speed2
   1017  f6b0		       69 0c		      adc	#12
   1018  f6b2		       85 88		      sta	Speed2
   1019  f6b4		       a5 87		      lda	Speed1
   1020  f6b6		       69 00		      adc	#00
   1021  f6b8		       85 87		      sta	Speed1
   1022  f6ba
   1023  f6ba				   SkipMoveUp
   1024  f6ba		       a6 86		      ldx	XPos
   1025  f6bc
   1026  f6bc							; Only check left/right on odd frames;
   1027  f6bc							; TODO make this just a fractional speed
   1028  f6bc							; rather than dropping frames
   1029  f6bc		       a9 01		      lda	#01
   1030  f6be		       25 83		      and	FrameCount
   1031  f6c0		       d0 18		      bne	SkipMoveRight
   1032  f6c2
   1033  f6c2
   1034  f6c2							; Move horizontally
   1035  f6c2		       a9 40		      lda	#%01000000	;Left?
   1036  f6c4		       2c 80 02 	      bit	SWCHA
   1037  f6c7		       d0 05		      bne	SkipMoveLeft
   1038  f6c9		       e0 1d		      cpx	#29
   1039  f6cb		       90 01		      bcc	SkipMoveLeft
   1040  f6cd		       ca		      dex
   1041  f6ce
   1042  f6ce							; Reflect
   1043  f6ce							;     lda #$ff
   1044  f6ce							;     sta REFP0
   1045  f6ce				   SkipMoveLeft
   1046  f6ce		       a9 80		      lda	#%10000000	;Right?
   1047  f6d0		       2c 80 02 	      bit	SWCHA
   1048  f6d3		       d0 05		      bne	SkipMoveRight
   1049  f6d5		       e0 80		      cpx	#128
   1050  f6d7		       b0 01		      bcs	SkipMoveRight
   1051  f6d9		       e8		      inx
   1052  f6da
   1053  f6da							; Reflect
   1054  f6da							;     lda #$0
   1055  f6da							;     sta REFP0
   1056  f6da				   SkipMoveRight
   1057  f6da		       86 86		      stx	XPos
   1058  f6dc		       60		      rts
   1059  f6dd
   1060  f6dd
   1061  f6dd							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   1062  f6dd
   1063  f6dd
   1064  f6dd				   SpeedCalculation
   1065  f6dd		       38		      sec
   1066  f6de		       a5 88		      lda	Speed2
   1067  f6e0		       e9 07		      sbc	#7
   1068  f6e2		       85 88		      sta	Speed2
   1069  f6e4		       a5 87		      lda	Speed1
   1070  f6e6		       e9 00		      sbc	#0
   1071  f6e8		       85 87		      sta	Speed1
   1072  f6ea
   1073  f6ea		       18		      clc
   1074  f6eb		       a5 8a		      lda	YPos2
   1075  f6ed		       65 88		      adc	Speed2
   1076  f6ef		       85 8a		      sta	YPos2
   1077  f6f1		       a5 89		      lda	YPos
   1078  f6f3		       65 87		      adc	Speed1
   1079  f6f5		       85 89		      sta	YPos
   1080  f6f7
   1081  f6f7		       c9 43		      cmp	#FLOOR_OFFSET
   1082  f6f9		       b0 0a		      bcs	NewThing2
   1083  f6fb
   1084  f6fb							; Reset to floor
   1085  f6fb		       a9 43		      lda	#FLOOR_OFFSET
   1086  f6fd		       85 89		      sta	YPos
   1087  f6ff		       a9 00		      lda	#0
   1088  f701		       85 87		      sta	Speed1
   1089  f703		       85 88		      sta	Speed2
   1090  f705				   NewThing2
   1091  f705
   1092  f705		       c9 bf		      cmp	#CEILING_OFFSET
   1093  f707		       90 0a		      bcc	.next
   1094  f709
   1095  f709							; Reset to ceiling
   1096  f709		       a9 bf		      lda	#CEILING_OFFSET
   1097  f70b		       85 89		      sta	YPos
   1098  f70d		       a9 00		      lda	#0
   1099  f70f		       85 87		      sta	Speed1
   1100  f711		       85 88		      sta	Speed2
   1101  f713				   .next
   1102  f713
   1103  f713		       60		      rts
   1104  f714
   1105  f714
   1106  f714
   1107  f714							; Subroutine
   1108  f714				   SetHorizPos
   1109  f714		       85 02		      sta	WSYNC	; start a new line
   1110  f716		       24 00		      bit	0	; waste 3 cycles
   1111  f718		       38		      sec		; set carry flag
   1112  f719				   DivideLoop
   1113  f719		       e9 0f		      sbc	#15	; subtract 15
   1114  f71b		       b0 fc		      bcs	DivideLoop	; branch until negative
   1115  f71d		       49 07		      eor	#7	; calculate fine offset
   1116  f71f		       0a		      asl
   1117  f720		       0a		      asl
   1118  f721		       0a		      asl
   1119  f722		       0a		      asl
   1120  f723		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
   1121  f725		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
   1122  f727		       60		      rts		; return to caller
   1123  f728
   1124  f728
   1125  f728
   1126  f800		       00 00 00 00*	      align	256
   1127  f800
   1128  f800							; Bitmap data for character "standing" position
   1129  f800							; Comical amount of 0's for now to simplify sprite rendering
   1130  f800
   1131  f800							; Y can be from:
   1132  f800							;     SPRITE_HEIGHT to (8*ROW_COUNT)
   1133  f800							; SpriteEnd: 8..128
   1134  f800							; Frame0 should start at +120 so the Y rollunder of -$120 is OK]
   1135  f800				   Frame0
   1136  f800		       00		      .byte.b	#%00000000
   1137  f801		       60		      .byte.b	#%01100000
   1138  f802		       60		      .byte.b	#%01100000
   1139  f803		       60		      .byte.b	#%01100000
   1140  f804		       c0		      .byte.b	#%11000000
   1141  f805		       c0		      .byte.b	#%11000000
   1142  f806		       f0		      .byte.b	#%11110000
   1143  f807		       c0		      .byte.b	#%11000000
   1144  f808		       c0		      .byte.b	#%11000000
   1145  f809		       00		      .byte.b	#%00000000
   1146  f80a
   1147  f80a
   1148  f80a							; Epilogue
   1149  fffc					      org	$fffc
   1150  fffc		       00 f2		      .word.w	Start
   1151  fffe		       00 f2		      .word.w	Start
