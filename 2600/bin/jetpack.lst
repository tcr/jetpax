------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????
     22  10000 ????						; Perform a left rotation on the 32 bit number at
     23  10000 ????						; location VLA and store the result at location
     24  10000 ????						; RES. If VLA and RES are the same then the
     25  10000 ????						; operation is applied directly to the memory,
     26  10000 ????						; otherwise it is done in the accumulator.
     27  10000 ????						;
     28  10000 ????						; On exit: A = ??, X & Y are unchanged.
     29  10000 ????
     30  10000 ????						;http://www.obelisk.me.uk/6502/maclib.inc but reversed
     31  10000 ????				       mac	_ror32
     32  10000 ????			    VLA        EQU	{1}
     33  10000 ????			    RES        EQU	{2}
     34  10000 ????				       IF	VLA != RES
     35  10000 ????				       LDA	VLA+0
     36  10000 ????				       ROR	A
     37  10000 ????				       STA	RES+0
     38  10000 ????				       LDA	VLA+1
     39  10000 ????				       ROR	A
     40  10000 ????				       STA	RES+1
     41  10000 ????				       LDA	VLA+2
     42  10000 ????				       ROR	A
     43  10000 ????				       STA	RES+2
     44  10000 ????				       LDA	VLA+3
     45  10000 ????				       ROR	A
     46  10000 ????				       STA	RES+3
     47  10000 ????				       ELSE
     48  10000 ????				       ROR	VLA+0
     49  10000 ????				       ROR	VLA+1
     50  10000 ????				       ROR	VLA+2
     51  10000 ????				       ROR	VLA+3
     52  10000 ????				       ENDIF
     53  10000 ????				       ENDM
     54  10000 ????
     55  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     56  10000 ????				       mac	assert_runtime
     57  10000 ????			    .COND      SET	{1}
     58  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     59  10000 ????				       endm
     60  10000 ????
     61  10000 ????
     62  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     63  10000 ????				       mac	assert_runtime_kernel
     64  10000 ????			    .KERNEL    SET	{1}
     65  10000 ????			    .COND      SET	{2}
     66  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     67  10000 ????				       endm
     68  10000 ????
     69  10000 ????						; Static assertions for size
     70  10000 ????				       mac	assert_size
     71  10000 ????			    .STARTA    SET	{1}
     72  10000 ????			    .ENDA      SET	{2}
     73  10000 ????			    .LEN       SET	{3}
     74  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     75  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     76  10000 ????				       err
     77  10000 ????				       endif
     78  10000 ????				       endm
     79  10000 ????				       mac	assert_size_exact
     80  10000 ????			    .STARTA    SET	{1}
     81  10000 ????			    .ENDA      SET	{2}
     82  10000 ????			    .LEN       SET	{3}
     83  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     84  10000 ????				       echo	""
     85  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     86  10000 ????				       err
     87  10000 ????				       endif
     88  10000 ????				       endm
     89  10000 ????
     90  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     94  0000 ????
     95  0000 ????						; RAM and constants
------- FILE game_define.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_define.s"
      1 U0000 ????				      seg.u	Defines
      2 U0000 ????
      3 U0000 ????	       00 10	   ROW_COUNT  =	16
      4 U0000 ????	       00 02	   SIGNAL_LINE =	$02
      5 U0000 ????	       00 07	   FrameSkip  =	%111	; Tick (every 8 frames)
      6 U0000 ????
      7 U0000 ????						; RAM+ memory map
      8 U0000 ????
      9 U0000 ????	       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     10 U0000 ????	       f1 00	   CBSRAM_KERNEL_READ =	$f100
     11 U0000 ????	       f1 04	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 4]
     12 U0000 ????
     13 U0000 ????	       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     14 U0000 ????	       f1 40	   RAMP_STORAGE_R =	$f140
     15 U0000 ????
     16 U0000 ????
     17 U0000 ????						; NUSIZ values
     18 U0000 ????
     19 U0000 ????	       00 13	   THREE_COPIES =	%00010011
     20 U0000 ????
     21 U0000 ????
     22 U0000 ????						; Colors
     23 U0000 ????
     24 U0000 ????	       00 42	   COL_BG     =	$42
     25 U0000 ????	       00 cc	   COL_EMERALD =	$CC
     26 U0000 ????	       00 cc	   COL_EMERALD_2 =	$CC
     27 U0000 ????
     28 U0000 ????
     29 U0000 ????						; HMOVE values for missiles
     30 U0000 ????
     31 U0000 ????	       00 1c	   KERNEL_A_MISSILE_SLEEP =	28
     32 U0000 ????	       00 00	   KERNEL_A_MISSILE_HMOVE =	$00
     33 U0000 ????
     34 U0000 ????	       00 33	   KERNEL_B_MISSILE_SLEEP =	51
     35 U0000 ????	       00 10	   KERNEL_B_MISSILE_HMOVE =	$10
     36 U0000 ????
     37 U0000 ????						; Missile values when 2A=RST
     38 U0000 ????						; KERNEL_B_MISSILE_SLEEP equ 46
     39 U0000 ????						; KERNEL_B_MISSILE_HMOVE equ $20
     40 U0000 ????
     41 U0000 ????
     42 U0000 ????						; Sprite details
     43 U0000 ????
     44 U0000 ????	       00 07	   EMERALD_SP_COLOR =	COLUP1
     45 U0000 ????	       00 1c	   EMERALD_SP =	GRP1
     46 U0000 ????	       00 1e	   EMERALD_MI_ENABLE =	ENAM1
     47 U0000 ????	       00 11	   EMERALD_SP_RESET =	RESP1
     48 U0000 ????	       00 13	   EMERALD_MI_RESET =	RESM1
     49 U0000 ????	       00 21	   EMERALD_SP_HMOVE =	HMP1
     50 U0000 ????	       00 23	   EMERALD_MI_HMOVE =	HMM1
     51 U0000 ????	       00 05	   EMERALD_COPIES =	NUSIZ1
     52 U0000 ????
     53 U0000 ????	       00 1b	   JET_SP     =	GRP0
     54 U0000 ????	       00 10	   JET_SP_RESET =	RESP0
     55 U0000 ????	       00 20	   JET_SP_HMOVE =	HMP0
     56 U0000 ????	       00 06	   JET_SP_COLOR =	COLUP0
     57 U0000 ????
     58 U0000 ????
     59 U0000 ????						; Game dimensionsn
     60 U0000 ????
     61 U0000 ????						; Spriteend is HEIGHT_OFFSET - YPos
     62 U0000 ????	       00 08	   SPRITE_HEIGHT =	8
     63 U0000 ????	       00 c8	   HEIGHT_OFFSET =	200
     64 U0000 ????
     65 U0000 ????						; Compared with YPos
     66 U0000 ????	       00 48	   FLOOR_OFFSET =	72
     67 U0000 ????	       00 c0	   CEILING_OFFSET =	192
     68 U0000 ????
     69 U0000 ????						; Starting player position
     70 U0000 ????	       00 48	   YPosStart  =	72
     71 U0000 ????	       00 58	   XPosStart  =	88
     72 U0000 ????
     73 U0000 ????						; Top left corner
     74 U0000 ????						; YPosStart equ 190
     75 U0000 ????						; XPosStart equ 28
------- FILE main.s
------- FILE game_vars.s LEVEL 2 PASS 2
      0 U0000 ????				      include	"game_vars.s"
      1 U00be ????				      seg.u	Variables
      2 U00be ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; which kernel are we running this frame? (for debugging)
      6 U0081
      7 U0081		       00	   Temp       byte.b
      8 U0082
      9 U0082							; Counters
     10 U0082		       00	   RowCount   byte.b
     11 U0083		       00	   LoopCount  byte.b
     12 U0084		       00	   FrameCount byte.b
     13 U0085
     14 U0085		       00	   YP1	      byte.b
     15 U0086		       00	   SpriteEnd  byte.b
     16 U0087		       00	   XPos       byte.b		; X position of player sprite
     17 U0088
     18 U0088
     19 U0088		       00	   Speed1     byte.b
     20 U0089		       00	   Speed2     byte.b
     21 U008a
     22 U008a		       00	   YPos       byte.b		; Y position of player sprite
     23 U008b		       00	   YPos2      byte.b
     24 U008c
     25 U008c		       00	   GEM_02_TARGET byte.b
     26 U008d
     27 U008d		       00	   JMP_ADDR   byte.b
     28 U008e		       00	   JMP_ADDR_2 byte.b
     29 U008f
     30 U008f		       00	   ROW_DEMO_INDEX byte.b
     31 U0090
     32 U0090		       00	   RamNibbleTemp byte.b
     33 U0091		       00	   RamNibbleVar1 byte.b
     34 U0092		       00	   RamNibbleVar2 byte.b
     35 U0093		       00	   RamZeroByte byte.b
     36 U0094		       00	   RamLowerSixByte byte.b
     37 U0095		       00	   RamFFByte  byte.b
     38 U0096		       00	   RamStackBkp byte.b
     39 U0097
     40 U0097		       00	   RamRowJetpackIndex byte.b		; sprite counter
     41 U0098
     42 U0098							; Kernel support
     43 U0098		       00	   RamPF1Value byte.b
     44 U0099		       00	   RamKernelGRP0 byte.b		; temp
     45 U009a		       00	   RamKernelPhpTarget byte.b
     46 U009b		       00	   RamKernelX byte.b
     47 U009c		       00	   RamKernelY byte.b
     48 U009d		       00	   RamKernelGemini1 byte.b
     49 U009e		       00	   RamKernelGemini1Reg byte.b
     50 U009f		       00	   RamKernelGemini2 byte.b
     51 U00a0		       00	   RamKernelGemini2Reg byte.b
     52 U00a1		       00	   RamKernelGemini3 byte.b
     53 U00a2		       00	   RamKernelGemini3Reg byte.b
     54 U00a3		       00	   RamKernelGemini4 byte.b
     55 U00a4		       00	   RamKernelGemini4Reg byte.b
     56 U00a5		       00	   RamKernelGemini5 byte.b
     57 U00a6
     58 U00a6		       00	   BuildKernelX byte.b
     59 U00a7		       00	   BuildKernelY byte.b
     60 U00a8		       00	   BuildKernelRST byte.b
     61 U00a9		       00	   BuildKernelGrp0 byte.b
     62 U00aa		       00	   BuildKernelVdel1 byte.b
     63 U00ab		       00	   BuildKernelMissile byte.b
     64 U00ac
     65 U00ac		       00	   level_for_game byte.b
     66 U00ad		       00		      byte.b
     67 U00ae		       00		      byte.b
     68 U00af		       00		      byte.b
     69 U00b0
     70 U00b0		       00	   DO_MISS_A  byte.b
     71 U00b1		       00	   DO_MISS_B  byte.b
     72 U00b2		       00	   DO_GEMS_A  byte.b
     73 U00b3		       00		      byte.b
     74 U00b4		       00		      byte.b
     75 U00b5		       00		      byte.b
     76 U00b6		       00		      byte.b
     77 U00b7		       00		      byte.b
     78 U00b8		       00	   DO_GEMS_B  byte.b
     79 U00b9		       00		      byte.b
     80 U00ba		       00		      byte.b
     81 U00bb		       00		      byte.b
     82 U00bc		       00		      byte.b
     83 U00bd		       00		      byte.b
------- FILE main.s
     98 U00be
     99 U00be							; Bank 1
    100  e000 ????				      seg	CodeBank1
    101  d000					      org	$D000
    102  d000					      rorg	$F000
    103  d000		       00	   BANK1      byte.b
    104  d200					      org	$d200
    105  d200					      rorg	$d200
    106  d200				   Bank1Start
    107  d200		       ad fa ff 	      lda	$fffa
    108  d203		       ea		      nop
    109  d204		       ea		      nop
    110  d205		       ea		      nop
    111  d206
    112  dffc					      org	$dffc
    113  dffc					      rorg	$fffc
    114  dffc		       00 d2		      .word.w	Bank1Start
    115  dffe		       00 d2		      .word.w	Bank1Start
    116  e000
    117  e000							; Bank 2
    118  f000 ????				      seg	CodeBank2
    119  e000					      org	$E000
    120  e000					      rorg	$F000
    121  e000		       00	   BANK2      byte.b
    122  e200					      org	$e200
    123  e200					      rorg	$f200
    124  e200				   Bank2Start
    125  e200		       ad fa ff 	      lda	$fffa
    126  e203		       ea		      nop
    127  e204		       ea		      nop
    128  e205		       ea		      nop
    129  e206
    130  effc					      org	$effc
    131  effc					      rorg	$fffc
    132  effc		       00 f2		      .word.w	Bank2Start
    133  effe		       00 f2		      .word.w	Bank2Start
    134  f000
    135  f000							; Bank 3
    136  10000 ????				       seg	CodeBank3
    137  f000					      org	$F000
    138  f000					      rorg	$F000
    139  f000		       00	   BANK3      byte.b
    140  f200					      org	$f200
    141  f200					      rorg	$f200
    142  f200				   Bank3Start
    143  f200		       ad fa ff 	      lda	$fffa
    144  f203		       ea		      nop
    145  f204		       ea		      nop
    146  f205		       ea		      nop
    147  f206		       4c 09 f2 	      jmp	Start
    148  f209
    149  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 84		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 48		      lda	#YPosStart
     43  f239		       85 8a		      sta	YPos
     44  f23b		       a9 58		      lda	#XPosStart
     45  f23d		       85 87		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 88		      sta	Speed1
     48  f243		       85 89		      sta	Speed2
     49  f245		       85 8b		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8f		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 93		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 94		      sta	RamLowerSixByte
     59  f253		       a9 ff		      lda	#$ff
     60  f255		       85 95		      sta	RamFFByte
     61  f257
     62  f257							; Set all the bits in a silly manner
     63  f257				   .setallbits
     64  f257		       a9 fd		      lda	#%11111101
     65  f259		       85 ac		      sta	[level_for_game + 0]
     66  f25b		       a9 ff		      lda	#%11111111
     67  f25d		       85 ad		      sta	[level_for_game + 1]
     68  f25f		       a9 ff		      lda	#%11111111
     69  f261		       85 ae		      sta	[level_for_game + 2]
     70  f263		       a9 ff		      lda	#%11111111
     71  f265		       85 af		      sta	[level_for_game + 3]
     72  f267
     73  f267							; Start with vertical sync (to reset frame)
     74  f267		       4c 5b f4 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f26a					      include	"kernel_loader.s"
      1  f26a							; Copies the gem kernels to RAM
      2  f26a
      3  f26a							; Copy Kernel A to CBSRAM
      4  f26a				   LoadKernelA subroutine
      5  f26a		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f26c				   .loop
      7  f26c		       b9 00 fd 	      lda	kernel_1_start,Y
      8  f26f		       99 00 10 	      sta	$1000,Y
      9  f272		       88		      dey
     10  f273		       d0 f7		      bne	.loop
     11  f275		       ad 00 fd 	      lda	kernel_1_start
     12  f278		       8d 00 10 	      sta	$1000
     13  f27b		       60		      rts
     14  f27c
     15  f27c							; Copy Kernel B to CBSRAM
     16  f27c				   LoadKernelB subroutine
     17  f27c		       a0 36		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f27e				   .loop
     19  f27e		       b9 37 fd 	      lda	kernel_2_start,Y
     20  f281		       99 00 10 	      sta	$1000,Y
     21  f284		       88		      dey
     22  f285		       d0 f7		      bne	.loop
     23  f287		       ad 37 fd 	      lda	kernel_2_start
     24  f28a		       8d 00 10 	      sta	$1000
     25  f28d		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f28e					      include	"nibble.s"
      1  f28e
      2  f28e					      MAC	nibble_gem_kernel_a_1_build
      3  f28e					      lda	#0
      4  f28e					      ldx	#SENTINEL
      5  f28e					      stx	BuildKernelX
      6  f28e					      stx	BuildKernelY
      7  f28e					      stx	BuildKernelRST
      8  f28e							; Gemini 1A
      9  f28e				   .K_1A
     10  f28e					      ldy	[DO_GEMS_A + 0]
     11  f28e					      jsr	KernelA_GenReset
     12  f28e				   .if_1
     13  f28e					      bne	.else_1
     14  f28e					      sec
     15  f28e					      rol
     16  f28e							; Special: Encoding RST0
     17  f28e							; Rewrite lda RamKernelPF1 to be #immediate
     18  f28e					      ldy	#BC_LDA_IMM
     19  f28e					      sty	[KernelA_B - $100]
     20  f28e					      ldy	#%10100000
     21  f28e					      sty	[KernelA_B - $100 + 1]
     22  f28e							; Store 1A in GRP0
     23  f28e					      ldy	[DO_GEMS_A + 1]
     24  f28e					      sty	BuildKernelGrp0
     25  f28e							; Gemini 1A is RESPx
     26  f28e					      ldy	#EMERALD_SP_RESET
     27  f28e					      sty	[KernelA_C - $100 + 1]
     28  f28e							; Turn 3-cycle NOP into 4-cycle
     29  f28e					      ldy	#$14
     30  f28e					      sty	[KernelA_D - $100]
     31  f28e					      jmp	.endif_1
     32  f28e							; [BIT DEPTH] #1 If-End @ 1
     33  f28e					      rol
     34  f28e
     35  f28e				   .else_1
     36  f28e					      clc
     37  f28e					      rol
     38  f28e							; Store 0A in GRP0
     39  f28e					      ldy	[DO_GEMS_A + 0]
     40  f28e					      sty	BuildKernelGrp0
     41  f28e					      ldy	[DO_GEMS_A + 1]
     42  f28e					      jsr	KernelA_GenReset
     43  f28e				   .if_2
     44  f28e					      bne	.else_2
     45  f28e					      sec
     46  f28e					      rol
     47  f28e							; GEM1ASWITCH
     48  f28e					      jmp	.endif_2
     49  f28e							; [BIT DEPTH] #2 If-End @ 2
     50  f28e
     51  f28e				   .else_2
     52  f28e					      clc
     53  f28e					      rol
     54  f28e							; Calculate the 1A value
     55  f28e					      ldy	SHARD_LUT_RF1
     56  f28e					      cpy	#1
     57  f28e					      .byte	$D0, #3
     58  f28e					      ldy	#RESP1
     59  f28e					      .byte	$2C
     60  f28e					      ldy	#GRP1
     61  f28e					      sty	RamKernelGemini1Reg
     62  f28e							; Set opcode
     63  f28e					      ldx	SHARD_LUT_RF1
     64  f28e					      cpx	#1
     65  f28e					      ldy	#BC_STX
     66  f28e					      .byte	$F0, #5
     67  f28e					      ldy	[DO_GEMS_A + 1]
     68  f28e					      jsr	KernelA_UpdateRegs
     69  f28e					      sty	RamKernelGemini1
     70  f28e							; [BIT DEPTH] #2 *If-End @ 2
     71  f28e							; [BIT DEPTH] #2 Else-End @ 2
     72  f28e				   .endif_2
     73  f28e							; [BIT DEPTH] #1 *If-End @ 1
     74  f28e							; [BIT DEPTH] #1 Else-End @ 2
     75  f28e				   .endif_1
     76  f28e							; BuildKernelX, BuildKernelY are upgraded if not set
     77  f28e							; Gemini 2A
     78  f28e					      ldy	[DO_GEMS_A + 2]
     79  f28e					      jsr	KernelA_GenReset
     80  f28e				   .if_3
     81  f28e					      bne	.else_3
     82  f28e					      sec
     83  f28e					      rol
     84  f28e					      jmp	.endif_3
     85  f28e							; [BIT DEPTH] #3 If-End @ 3
     86  f28e
     87  f28e				   .else_3
     88  f28e					      clc
     89  f28e					      rol
     90  f28e							; Set opcode
     91  f28e					      ldy	[DO_GEMS_A + 2]
     92  f28e					      jsr	KernelA_UpdateRegs
     93  f28e					      sty	RamKernelGemini2
     94  f28e							; Set opcode target
     95  f28e					      ldy	SHARD_LUT_RF1
     96  f28e					      cpy	#2
     97  f28e					      .byte	$D0, #3
     98  f28e					      ldy	#RESP1
     99  f28e					      .byte	$2C
    100  f28e					      ldy	#GRP1
    101  f28e					      sty	RamKernelGemini2Reg
    102  f28e							; [BIT DEPTH] #3 *If-End @ 3
    103  f28e							; [BIT DEPTH] #3 Else-End @ 3
    104  f28e				   .endif_3
    105  f28e							; Gemini 3A
    106  f28e					      ldy	[DO_GEMS_A + 3]
    107  f28e					      jsr	KernelA_GenReset
    108  f28e				   .if_4
    109  f28e					      bne	.else_4
    110  f28e					      sec
    111  f28e					      rol
    112  f28e					      jmp	.endif_4
    113  f28e							; [BIT DEPTH] #4 If-End @ 4
    114  f28e
    115  f28e				   .else_4
    116  f28e					      clc
    117  f28e					      rol
    118  f28e							; Set opcode
    119  f28e					      ldy	[DO_GEMS_A + 3]
    120  f28e					      jsr	KernelA_UpdateRegs
    121  f28e					      sty	RamKernelGemini3
    122  f28e							; Set opcode target
    123  f28e					      ldy	SHARD_LUT_RF1
    124  f28e					      cpy	#3
    125  f28e					      .byte	$D0, #3
    126  f28e					      ldy	#RESP1
    127  f28e					      .byte	$2C
    128  f28e					      ldy	#GRP1
    129  f28e					      sty	RamKernelGemini3Reg
    130  f28e							; [BIT DEPTH] #4 *If-End @ 4
    131  f28e							; [BIT DEPTH] #4 Else-End @ 4
    132  f28e				   .endif_4
    133  f28e							; [BIT DEPTH] Final: 4 (out of 8 bits)
    134  f28e					      rol
    135  f28e					      rol
    136  f28e					      rol
    137  f28e					      rol
    138  f28e					      ENDM
    139  f28e
    140  f28e					      MAC	nibble_gem_kernel_a_2_build
    141  f28e					      lda	#0
    142  f28e							; VD1 default
    143  f28e					      ldx	[DO_GEMS_A + 1]
    144  f28e					      stx	BuildKernelVdel1
    145  f28e							; Gemini 4A
    146  f28e					      ldx	SHARD_LUT_VD1
    147  f28e					      cpx	#4
    148  f28e				   .if_1
    149  f28e					      beq	.else_1
    150  f28e					      sec
    151  f28e					      rol
    152  f28e							; Set PHP
    153  f28e							; Update VDEL1
    154  f28e					      ldx	[DO_GEMS_A + 4]
    155  f28e					      stx	BuildKernelVdel1
    156  f28e					      jmp	.endif_1
    157  f28e							; [BIT DEPTH] #1 If-End @ 1
    158  f28e
    159  f28e				   .else_1
    160  f28e					      clc
    161  f28e					      rol
    162  f28e					      ldy	[DO_GEMS_A + 4]
    163  f28e					      jsr	KernelA_UpdateRegs
    164  f28e					      sty	RamKernelGemini4
    165  f28e							; Set PHP
    166  f28e							; [BIT DEPTH] #1 *If-End @ 1
    167  f28e							; [BIT DEPTH] #1 Else-End @ 1
    168  f28e				   .endif_1
    169  f28e							; Misisle
    170  f28e					      ldy	DO_MISS_A
    171  f28e				   .if_2
    172  f28e					      bne	.else_2
    173  f28e					      sec
    174  f28e					      rol
    175  f28e					      jmp	.endif_2
    176  f28e							; [BIT DEPTH] #2 If-End @ 2
    177  f28e
    178  f28e				   .else_2
    179  f28e					      clc
    180  f28e					      rol
    181  f28e							; [BIT DEPTH] #2 *If-End @ 2
    182  f28e							; [BIT DEPTH] #2 Else-End @ 2
    183  f28e				   .endif_2
    184  f28e							; VD1
    185  f28e							; ldy #SHARD_VD1
    186  f28e							; sty [KernelA_VDEL1 - $100]
    187  f28e							; GRP0
    188  f28e							; ldy #SHARD_GRP0
    189  f28e							; sty [KernelA_VDEL0 - $100]
    190  f28e							; X
    191  f28e							; ldy #SHARD_X
    192  f28e							; sty RamKernelX
    193  f28e							; Y
    194  f28e							; Gemini 5A
    195  f28e							; TODO eventually...?
    196  f28e							; [BIT DEPTH] Final: 2 (out of 8 bits)
    197  f28e					      rol
    198  f28e					      rol
    199  f28e					      rol
    200  f28e					      rol
    201  f28e					      rol
    202  f28e					      rol
    203  f28e					      ENDM
    204  f28e
    205  f28e					      MAC	nibble_gem_kernel_b_build
    206  f28e					      lda	#0
    207  f28e							; Php target default
    208  f28e					      ldx	#RESP1
    209  f28e					      stx	RamKernelPhpTarget
    210  f28e					      ldx	#SENTINEL
    211  f28e					      stx	BuildKernelX
    212  f28e					      stx	BuildKernelY
    213  f28e					      stx	BuildKernelRST
    214  f28e							; Gemini 0B
    215  f28e					      ldy	[DO_GEMS_B + 0]
    216  f28e					      sty	BuildKernelGrp0
    217  f28e							; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    218  f28e							; Gemini 1B
    219  f28e					      ldy	[DO_GEMS_B + 1]
    220  f28e					      jsr	KernelA_UpdateRegs
    221  f28e					      sty	RamKernelGemini1
    222  f28e							; Calculate Gemini 2B
    223  f28e					      ldy	[DO_GEMS_B + 2]
    224  f28e					      jsr	KernelB_UpdateRegs
    225  f28e					      sty	RamKernelGemini2
    226  f28e							; Calculate Gemini 3B
    227  f28e					      ldy	[DO_GEMS_B + 3]
    228  f28e					      jsr	KernelB_UpdateRegs
    229  f28e					      sty	RamKernelGemini3
    230  f28e							; Gemini 2B
    231  f28e				   .K_2B
    232  f28e					      ldy	[DO_GEMS_B + 2]
    233  f28e					      jsr	KernelB_GenPhp
    234  f28e				   .if_1
    235  f28e					      bne	.else_1
    236  f28e					      sec
    237  f28e					      rol
    238  f28e							; Write to PHP in 2B
    239  f28e					      cpy	G11
    240  f28e				   .if_2
    241  f28e					      beq	.else_2
    242  f28e					      sec
    243  f28e					      rol
    244  f28e					      jmp	.endif_2
    245  f28e							; [BIT DEPTH] #2 If-End @ 2
    246  f28e
    247  f28e				   .else_2
    248  f28e					      clc
    249  f28e					      rol
    250  f28e							; [BIT DEPTH] #2 *If-End @ 2
    251  f28e							; [BIT DEPTH] #2 Else-End @ 2
    252  f28e				   .endif_2
    253  f28e					      jmp	.endif_1
    254  f28e							; [BIT DEPTH] #1 If-End @ 2
    255  f28e
    256  f28e				   .else_1
    257  f28e					      clc
    258  f28e					      rol
    259  f28e							; [BIT DEPTH] #1 *If-End @ 2
    260  f28e							; [BIT DEPTH] #1 Else-End @ 1
    261  f28e					      rol
    262  f28e				   .endif_1
    263  f28e							; Gemini 3B
    264  f28e					      ldy	[DO_GEMS_B + 3]
    265  f28e					      jsr	KernelB_GenPhp
    266  f28e				   .if_3
    267  f28e					      beq	.else_3
    268  f28e					      sec
    269  f28e					      rol
    270  f28e							; Write to PHP in 3B
    271  f28e							; TODO compare this in the outside by checking KernelB_GenPhp value
    272  f28e					      cpy	G11
    273  f28e				   .if_4
    274  f28e					      bne	.else_4
    275  f28e					      sec
    276  f28e					      rol
    277  f28e					      jmp	.endif_4
    278  f28e							; [BIT DEPTH] #4 If-End @ 4
    279  f28e
    280  f28e				   .else_4
    281  f28e					      clc
    282  f28e					      rol
    283  f28e							; [BIT DEPTH] #4 *If-End @ 4
    284  f28e							; [BIT DEPTH] #4 Else-End @ 4
    285  f28e				   .endif_4
    286  f28e					      jmp	.endif_3
    287  f28e							; [BIT DEPTH] #3 If-End @ 4
    288  f28e
    289  f28e				   .else_3
    290  f28e					      clc
    291  f28e					      rol
    292  f28e							; [BIT DEPTH] #3 *If-End @ 4
    293  f28e							; [BIT DEPTH] #3 Else-End @ 3
    294  f28e					      rol
    295  f28e				   .endif_3
    296  f28e							; Gemini 4B
    297  f28e					      ldy	[DO_GEMS_B + 4]
    298  f28e					      jsr	KernelA_UpdateRegs
    299  f28e				   .K_4B
    300  f28e					      sty	RamKernelGemini4
    301  f28e							; TODO if no PHP, rewrite previous section:
    302  f28e							; NIBBLE_IF cs
    303  f28e							;
    304  f28e							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    305  f28e							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    306  f28e							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    307  f28e							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    308  f28e							; NIBBLE_END_IF
    309  f28e							; Make adjustments for sprites.
    310  f28e					      ror	BuildKernelGrp0
    311  f28e					      ror	BuildKernelX
    312  f28e					      ror	BuildKernelY
    313  f28e							;
    314  f28e							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    315  f28e							; GRP0
    316  f28e							; X
    317  f28e							; Y
    318  f28e							; [BIT DEPTH] Final: 4 (out of 8 bits)
    319  f28e					      rol
    320  f28e					      rol
    321  f28e					      rol
    322  f28e					      rol
    323  f28e					      ENDM
    324  f28e
    325  f28e
    326  f28e					      MAC	nibble_gem_kernel_a_1
    327  f28e				   .if_1
    328  f28e					      asl
    329  f28e					      bcc	.else_1
    330  f28e					      jmp	.endif_1
    331  f28e				   .else_1
    332  f28e				   .if_2
    333  f28e					      asl
    334  f28e					      bcc	.else_2
    335  f28e					      ldx	#BC_STX
    336  f28e					      stx	[KernelA_D_W + 0]
    337  f28e					      ldx	#RESP1
    338  f28e					      stx	[KernelA_D_W + 1]
    339  f28e					      jmp	.endif_2
    340  f28e				   .else_2
    341  f28e					      ldx	RamKernelGemini1
    342  f28e					      stx	[KernelA_D_W + 0]
    343  f28e					      ldx	RamKernelGemini1Reg
    344  f28e					      stx	[KernelA_D_W + 1]
    345  f28e				   .endif_2
    346  f28e				   .endif_1
    347  f28e				   .if_3
    348  f28e					      asl
    349  f28e					      bcc	.else_3
    350  f28e					      ldx	#NOP_REG
    351  f28e					      stx	[KernelA_E_W + 1 + 0]
    352  f28e					      ldx	#RESP1
    353  f28e					      stx	[KernelA_G_W + 1 + 0]
    354  f28e					      jmp	.endif_3
    355  f28e				   .else_3
    356  f28e					      ldx	#RESP1
    357  f28e					      stx	[KernelA_E_W + 1 + 0]
    358  f28e					      ldx	RamKernelGemini2
    359  f28e					      stx	[KernelA_G_W + 0]
    360  f28e					      ldx	RamKernelGemini2Reg
    361  f28e					      stx	[KernelA_G_W + 1]
    362  f28e				   .endif_3
    363  f28e				   .if_4
    364  f28e					      asl
    365  f28e					      bcc	.else_4
    366  f28e					      ldx	#RESP1
    367  f28e					      stx	[KernelA_H_W + 1 + 0]
    368  f28e					      jmp	.endif_4
    369  f28e				   .else_4
    370  f28e					      ldx	RamKernelGemini3
    371  f28e					      stx	[KernelA_H_W + 0]
    372  f28e					      ldx	RamKernelGemini3Reg
    373  f28e					      stx	[KernelA_H_W + 1]
    374  f28e				   .endif_4
    375  f28e					      ENDM
    376  f28e
    377  f28e					      MAC	nibble_gem_kernel_a_2
    378  f28e				   .if_1
    379  f28e					      asl
    380  f28e					      bcc	.else_1
    381  f28e					      ldx	#BC_STA
    382  f28e					      stx	[[KernelA_I_W + 0] + 0]
    383  f28e					      ldx	#EMERALD_SP_RESET
    384  f28e					      stx	[[KernelA_I_W + 0] + 1]
    385  f28e					      ldx	#BC_STA
    386  f28e					      stx	[[KernelA_J_W + 1] + 0]
    387  f28e					      ldx	#PF1
    388  f28e					      stx	[[KernelA_J_W + 1] + 1]
    389  f28e					      ldx	#BC_PHP
    390  f28e					      stx	[[KernelA_K_W + 1] + 0]
    391  f28e					      ldx	#VDELP1
    392  f28e					      stx	[RamKernelPhpTarget + 0]
    393  f28e					      jmp	.endif_1
    394  f28e				   .else_1
    395  f28e					      ldx	#BC_PHP
    396  f28e					      stx	[[KernelA_I_W + 0] + 0]
    397  f28e					      ldx	#BC_STA
    398  f28e					      stx	[[KernelA_J_W + 0] + 0]
    399  f28e					      ldx	#PF1
    400  f28e					      stx	[[KernelA_J_W + 0] + 1]
    401  f28e					      ldx	RamKernelGemini4
    402  f28e					      stx	[KernelA_K_W + 0]
    403  f28e					      ldx	#EMERALD_SP
    404  f28e					      stx	[KernelA_K_W + 1]
    405  f28e					      ldx	#RESP1
    406  f28e					      stx	[RamKernelPhpTarget + 0]
    407  f28e				   .endif_1
    408  f28e				   .if_2
    409  f28e					      asl
    410  f28e					      bcc	.else_2
    411  f28e					      ldx	#BC_NOP
    412  f28e					      stx	[[KernelA_F - $100] + 0]
    413  f28e					      jmp	.endif_2
    414  f28e				   .else_2
    415  f28e					      ldx	BuildKernelMissile
    416  f28e					      stx	[[KernelA_F - $100] + 0]
    417  f28e				   .endif_2
    418  f28e					      ldx	BuildKernelVdel1
    419  f28e					      stx	[[KernelA_VDEL1 - $100] + 0]
    420  f28e					      ldx	BuildKernelGrp0
    421  f28e					      stx	[[KernelA_VDEL0 - $100] + 0]
    422  f28e					      ldx	BuildKernelX
    423  f28e					      stx	[RamKernelX + 0]
    424  f28e					      ldx	BuildKernelY
    425  f28e					      stx	[[KernelA_STY - $100] + 0]
    426  f28e					      ENDM
    427  f28e
    428  f28e					      MAC	nibble_gem_kernel_b
    429  f28e					      ldx	RamKernelGemini1
    430  f28e					      stx	[KernelB_D_W + 0]
    431  f28e				   .if_1
    432  f28e					      asl
    433  f28e					      bcc	.else_1
    434  f28e					      ldx	#EMERALD_SP
    435  f28e					      stx	[RamKernelPhpTarget + 0]
    436  f28e					      ldx	#BC_STY
    437  f28e					      stx	[[KernelB_E_W + 0] + 0]
    438  f28e					      ldx	#EMERALD_SP_RESET
    439  f28e					      stx	[[KernelB_E_W + 0] + 1]
    440  f28e					      ldx	#BC_PHP
    441  f28e					      stx	[[KernelB_F_W + 1] + 0]
    442  f28e					      ldx	#BC_STA
    443  f28e					      stx	[[KernelB_G_W + 0] + 0]
    444  f28e					      ldx	#PF1
    445  f28e					      stx	[[KernelB_G_W + 0] + 1]
    446  f28e					      ldx	RamKernelGemini3
    447  f28e					      stx	[[KernelB_H_W + 0] + 0]
    448  f28e					      ldx	#EMERALD_SP
    449  f28e					      stx	[[KernelB_H_W + 0] + 1]
    450  f28e				   .if_2
    451  f28e					      asl
    452  f28e					      bcc	.else_2
    453  f28e					      ldx	#$38
    454  f28e					      stx	[[KernelB_P11_C - $100] + 0]
    455  f28e					      ldx	#RamZeroByte
    456  f28e					      stx	[[KernelB_B + 1 - $100] + 0]
    457  f28e					      jmp	.endif_2
    458  f28e				   .else_2
    459  f28e					      ldx	#$18
    460  f28e					      stx	[[KernelB_P11_C - $100] + 0]
    461  f28e					      ldx	#RamLowerSixByte
    462  f28e					      stx	[[KernelB_B + 1 - $100] + 0]
    463  f28e				   .endif_2
    464  f28e					      jmp	.endif_1
    465  f28e				   .else_1
    466  f28e					      ldx	RamKernelGemini2
    467  f28e					      stx	[KernelB_F_W + 0]
    468  f28e					      ldx	#EMERALD_SP
    469  f28e					      stx	[KernelB_F_W + 1]
    470  f28e				   .endif_1
    471  f28e				   .if_3
    472  f28e					      asl
    473  f28e					      bcc	.else_3
    474  f28e					      ldx	#EMERALD_SP
    475  f28e					      stx	[RamKernelPhpTarget + 0]
    476  f28e					      ldx	#BC_STY
    477  f28e					      stx	[[KernelB_E_W + 0] + 0]
    478  f28e					      ldx	#EMERALD_SP_RESET
    479  f28e					      stx	[[KernelB_E_W + 0] + 1]
    480  f28e					      ldx	RamKernelGemini2
    481  f28e					      stx	[[KernelB_F_W + 1] + 0]
    482  f28e					      ldx	#EMERALD_SP
    483  f28e					      stx	[[KernelB_F_W + 1] + 1]
    484  f28e					      ldx	#BC_STA
    485  f28e					      stx	[[KernelB_G_W + 1] + 0]
    486  f28e					      ldx	#PF1
    487  f28e					      stx	[[KernelB_G_W + 1] + 1]
    488  f28e					      ldx	#BC_PHP
    489  f28e					      stx	[[KernelB_H_W + 1] + 0]
    490  f28e				   .if_4
    491  f28e					      asl
    492  f28e					      bcc	.else_4
    493  f28e					      ldx	#$38
    494  f28e					      stx	[[KernelB_P11_C - $100] + 0]
    495  f28e					      ldx	#RamZeroByte
    496  f28e					      stx	[[KernelB_B + 1 - $100] + 0]
    497  f28e					      jmp	.endif_4
    498  f28e				   .else_4
    499  f28e					      ldx	#$18
    500  f28e					      stx	[[KernelB_P11_C - $100] + 0]
    501  f28e					      ldx	#RamLowerSixByte
    502  f28e					      stx	[[KernelB_B + 1 - $100] + 0]
    503  f28e				   .endif_4
    504  f28e					      jmp	.endif_3
    505  f28e				   .else_3
    506  f28e					      ldx	RamKernelGemini3
    507  f28e					      stx	[KernelA_H_W + 0]
    508  f28e					      ldx	#EMERALD_SP
    509  f28e					      stx	[KernelA_H_W + 1]
    510  f28e				   .endif_3
    511  f28e					      ldx	RamKernelGemini4
    512  f28e					      stx	[KernelB_J_W + 0]
    513  f28e					      ldx	BuildKernelGrp0
    514  f28e					      stx	[[KernelB_VDEL0 - $100] + 0]
    515  f28e					      ldx	BuildKernelX
    516  f28e					      stx	[RamKernelX + 0]
    517  f28e					      ldx	BuildKernelY
    518  f28e					      stx	[[KernelB_STY - $100] + 0]
    519  f28e					      ENDM
    520  f28e
    521  f28e
------- FILE main.s
------- FILE nibble_shard.s LEVEL 2 PASS 2
      0  f28e					      include	"nibble_shard.s"
      1  f28e							; conflict: 11011000 #%0011 #%1000
      2  f28e							; conflict: 11011001 #%0011 #%1000
      3  f28e							; conflict: 11011010 #%0011 #%1000
      4  f28e							; conflict: 11011011 #%0011 #%1000
      5  f28e							; conflict: 11100100 #%1000 #%0011
      6  f28e							; conflict: 11100101 #%1000 #%0011
      7  f28e							; conflict: 11100110 #%1000 #%0011
      8  f28e							; conflict: 11100111 #%1000 #%0011
      9  f28e							; conflict: 01111000 #%1000 #%0001
     10  f28e							; conflict: 01111001 #%1000 #%0001
     11  f28e							; conflict: 01111010 #%1000 #%0001
     12  f28e							; conflict: 01111011 #%1000 #%0001
     13  f28e							; conflict: 10110100 #%1000 #%0001
     14  f28e							; conflict: 10110101 #%1000 #%0001
     15  f28e							; conflict: 10110110 #%1000 #%0001
     16  f28e							; conflict: 10110111 #%1000 #%0001
     17  f300		       00 00 00 00*	      align	256
     18  f300		       00	   .shard_0   .byte.b	#0
     19  f301		       00	   .shard_1   .byte.b	#0
     20  f302		       00	   .shard_2   .byte.b	#0
     21  f303		       00	   .shard_3   .byte.b	#0
     22  f304		       00	   .shard_4   .byte.b	#0
     23  f305		       00	   .shard_5   .byte.b	#0
     24  f306		       00	   .shard_6   .byte.b	#0
     25  f307		       00	   .shard_7   .byte.b	#0
     26  f308		       00	   .shard_8   .byte.b	#0
     27  f309		       00	   .shard_9   .byte.b	#0
     28  f30a		       00	   .shard_10  .byte.b	#0
     29  f30b		       00	   .shard_11  .byte.b	#0
     30  f30c		       00	   .shard_12  .byte.b	#0
     31  f30d		       00	   .shard_13  .byte.b	#0
     32  f30e		       00	   .shard_14  .byte.b	#0
     33  f30f		       00	   .shard_15  .byte.b	#0
     34  f310		       00	   .shard_16  .byte.b	#0
     35  f311		       00	   .shard_17  .byte.b	#0
     36  f312		       00	   .shard_18  .byte.b	#0
     37  f313		       00	   .shard_19  .byte.b	#0
     38  f314		       00	   .shard_20  .byte.b	#0
     39  f315		       00	   .shard_21  .byte.b	#0
     40  f316		       00	   .shard_22  .byte.b	#0
     41  f317		       00	   .shard_23  .byte.b	#0
     42  f318		       00	   .shard_24  .byte.b	#0
     43  f319		       00	   .shard_25  .byte.b	#0
     44  f31a		       00	   .shard_26  .byte.b	#0
     45  f31b		       00	   .shard_27  .byte.b	#0
     46  f31c		       00	   .shard_28  .byte.b	#0
     47  f31d		       00	   .shard_29  .byte.b	#0
     48  f31e		       00	   .shard_30  .byte.b	#0
     49  f31f		       00	   .shard_31  .byte.b	#0
     50  f320		       00	   .shard_32  .byte.b	#0
     51  f321		       00	   .shard_33  .byte.b	#0
     52  f322		       00	   .shard_34  .byte.b	#0
     53  f323		       00	   .shard_35  .byte.b	#0
     54  f324		       00	   .shard_36  .byte.b	#0
     55  f325		       00	   .shard_37  .byte.b	#0
     56  f326		       00	   .shard_38  .byte.b	#0
     57  f327		       00	   .shard_39  .byte.b	#0
     58  f328		       00	   .shard_40  .byte.b	#0
     59  f329		       00	   .shard_41  .byte.b	#0
     60  f32a		       00	   .shard_42  .byte.b	#0
     61  f32b		       00	   .shard_43  .byte.b	#0
     62  f32c		       00	   .shard_44  .byte.b	#0
     63  f32d		       00	   .shard_45  .byte.b	#0
     64  f32e		       00	   .shard_46  .byte.b	#0
     65  f32f		       00	   .shard_47  .byte.b	#0
     66  f330		       00	   .shard_48  .byte.b	#0
     67  f331		       00	   .shard_49  .byte.b	#0
     68  f332		       00	   .shard_50  .byte.b	#0
     69  f333		       00	   .shard_51  .byte.b	#0
     70  f334		       00	   .shard_52  .byte.b	#0
     71  f335		       00	   .shard_53  .byte.b	#0
     72  f336		       00	   .shard_54  .byte.b	#0
     73  f337		       00	   .shard_55  .byte.b	#0
     74  f338		       00	   .shard_56  .byte.b	#0
     75  f339		       00	   .shard_57  .byte.b	#0
     76  f33a		       00	   .shard_58  .byte.b	#0
     77  f33b		       00	   .shard_59  .byte.b	#0
     78  f33c		       00	   .shard_60  .byte.b	#0
     79  f33d		       00	   .shard_61  .byte.b	#0
     80  f33e		       00	   .shard_62  .byte.b	#0
     81  f33f		       00	   .shard_63  .byte.b	#0
     82  f340		       00	   .shard_64  .byte.b	#0
     83  f341		       00	   .shard_65  .byte.b	#0
     84  f342		       00	   .shard_66  .byte.b	#0
     85  f343		       00	   .shard_67  .byte.b	#0
     86  f344		       00	   .shard_68  .byte.b	#0
     87  f345		       00	   .shard_69  .byte.b	#0
     88  f346		       00	   .shard_70  .byte.b	#0
     89  f347		       00	   .shard_71  .byte.b	#0
     90  f348		       00	   .shard_72  .byte.b	#0
     91  f349		       00	   .shard_73  .byte.b	#0
     92  f34a		       00	   .shard_74  .byte.b	#0
     93  f34b		       00	   .shard_75  .byte.b	#0
     94  f34c		       00	   .shard_76  .byte.b	#0
     95  f34d		       00	   .shard_77  .byte.b	#0
     96  f34e		       00	   .shard_78  .byte.b	#0
     97  f34f		       00	   .shard_79  .byte.b	#0
     98  f350		       00	   .shard_80  .byte.b	#0
     99  f351		       00	   .shard_81  .byte.b	#0
    100  f352		       00	   .shard_82  .byte.b	#0
    101  f353		       00	   .shard_83  .byte.b	#0
    102  f354		       00	   .shard_84  .byte.b	#0
    103  f355		       00	   .shard_85  .byte.b	#0
    104  f356		       00	   .shard_86  .byte.b	#0
    105  f357		       00	   .shard_87  .byte.b	#0
    106  f358		       00	   .shard_88  .byte.b	#0
    107  f359		       00	   .shard_89  .byte.b	#0
    108  f35a		       00	   .shard_90  .byte.b	#0
    109  f35b		       00	   .shard_91  .byte.b	#0
    110  f35c		       00	   .shard_92  .byte.b	#0
    111  f35d		       00	   .shard_93  .byte.b	#0
    112  f35e		       00	   .shard_94  .byte.b	#0
    113  f35f		       00	   .shard_95  .byte.b	#0
    114  f360		       00	   .shard_96  .byte.b	#0
    115  f361		       00	   .shard_97  .byte.b	#0
    116  f362		       00	   .shard_98  .byte.b	#0
    117  f363		       00	   .shard_99  .byte.b	#0
    118  f364		       00	   .shard_100 .byte.b	#0
    119  f365		       00	   .shard_101 .byte.b	#0
    120  f366		       00	   .shard_102 .byte.b	#0
    121  f367		       00	   .shard_103 .byte.b	#0
    122  f368		       00	   .shard_104 .byte.b	#0
    123  f369		       00	   .shard_105 .byte.b	#0
    124  f36a		       00	   .shard_106 .byte.b	#0
    125  f36b		       00	   .shard_107 .byte.b	#0
    126  f36c		       02	   .shard_108 .byte.b	#%0010
    127  f36d		       02	   .shard_109 .byte.b	#%0010
    128  f36e		       02	   .shard_110 .byte.b	#%0010
    129  f36f		       02	   .shard_111 .byte.b	#%0010
    130  f370		       00	   .shard_112 .byte.b	#0
    131  f371		       00	   .shard_113 .byte.b	#0
    132  f372		       00	   .shard_114 .byte.b	#0
    133  f373		       00	   .shard_115 .byte.b	#0
    134  f374		       00	   .shard_116 .byte.b	#0
    135  f375		       00	   .shard_117 .byte.b	#0
    136  f376		       00	   .shard_118 .byte.b	#0
    137  f377		       00	   .shard_119 .byte.b	#0
    138  f378		       08	   .shard_120 .byte.b	#%1000
    139  f379		       08	   .shard_121 .byte.b	#%1000
    140  f37a		       08	   .shard_122 .byte.b	#%1000
    141  f37b		       08	   .shard_123 .byte.b	#%1000
    142  f37c		       00	   .shard_124 .byte.b	#0
    143  f37d		       00	   .shard_125 .byte.b	#0
    144  f37e		       00	   .shard_126 .byte.b	#0
    145  f37f		       00	   .shard_127 .byte.b	#0
    146  f380		       00	   .shard_128 .byte.b	#0
    147  f381		       00	   .shard_129 .byte.b	#0
    148  f382		       00	   .shard_130 .byte.b	#0
    149  f383		       00	   .shard_131 .byte.b	#0
    150  f384		       00	   .shard_132 .byte.b	#0
    151  f385		       00	   .shard_133 .byte.b	#0
    152  f386		       00	   .shard_134 .byte.b	#0
    153  f387		       00	   .shard_135 .byte.b	#0
    154  f388		       00	   .shard_136 .byte.b	#0
    155  f389		       00	   .shard_137 .byte.b	#0
    156  f38a		       00	   .shard_138 .byte.b	#0
    157  f38b		       00	   .shard_139 .byte.b	#0
    158  f38c		       00	   .shard_140 .byte.b	#0
    159  f38d		       00	   .shard_141 .byte.b	#0
    160  f38e		       00	   .shard_142 .byte.b	#0
    161  f38f		       00	   .shard_143 .byte.b	#0
    162  f390		       00	   .shard_144 .byte.b	#0
    163  f391		       00	   .shard_145 .byte.b	#0
    164  f392		       00	   .shard_146 .byte.b	#0
    165  f393		       00	   .shard_147 .byte.b	#0
    166  f394		       00	   .shard_148 .byte.b	#0
    167  f395		       00	   .shard_149 .byte.b	#0
    168  f396		       00	   .shard_150 .byte.b	#0
    169  f397		       00	   .shard_151 .byte.b	#0
    170  f398		       00	   .shard_152 .byte.b	#0
    171  f399		       00	   .shard_153 .byte.b	#0
    172  f39a		       00	   .shard_154 .byte.b	#0
    173  f39b		       00	   .shard_155 .byte.b	#0
    174  f39c		       02	   .shard_156 .byte.b	#%0010
    175  f39d		       02	   .shard_157 .byte.b	#%0010
    176  f39e		       02	   .shard_158 .byte.b	#%0010
    177  f39f		       02	   .shard_159 .byte.b	#%0010
    178  f3a0		       00	   .shard_160 .byte.b	#0
    179  f3a1		       00	   .shard_161 .byte.b	#0
    180  f3a2		       00	   .shard_162 .byte.b	#0
    181  f3a3		       00	   .shard_163 .byte.b	#0
    182  f3a4		       00	   .shard_164 .byte.b	#0
    183  f3a5		       00	   .shard_165 .byte.b	#0
    184  f3a6		       00	   .shard_166 .byte.b	#0
    185  f3a7		       00	   .shard_167 .byte.b	#0
    186  f3a8		       00	   .shard_168 .byte.b	#0
    187  f3a9		       00	   .shard_169 .byte.b	#0
    188  f3aa		       00	   .shard_170 .byte.b	#0
    189  f3ab		       00	   .shard_171 .byte.b	#0
    190  f3ac		       00	   .shard_172 .byte.b	#0
    191  f3ad		       00	   .shard_173 .byte.b	#0
    192  f3ae		       00	   .shard_174 .byte.b	#0
    193  f3af		       00	   .shard_175 .byte.b	#0
    194  f3b0		       00	   .shard_176 .byte.b	#0
    195  f3b1		       00	   .shard_177 .byte.b	#0
    196  f3b2		       00	   .shard_178 .byte.b	#0
    197  f3b3		       00	   .shard_179 .byte.b	#0
    198  f3b4		       08	   .shard_180 .byte.b	#%1000
    199  f3b5		       08	   .shard_181 .byte.b	#%1000
    200  f3b6		       08	   .shard_182 .byte.b	#%1000
    201  f3b7		       08	   .shard_183 .byte.b	#%1000
    202  f3b8		       00	   .shard_184 .byte.b	#0
    203  f3b9		       00	   .shard_185 .byte.b	#0
    204  f3ba		       00	   .shard_186 .byte.b	#0
    205  f3bb		       00	   .shard_187 .byte.b	#0
    206  f3bc		       00	   .shard_188 .byte.b	#0
    207  f3bd		       00	   .shard_189 .byte.b	#0
    208  f3be		       00	   .shard_190 .byte.b	#0
    209  f3bf		       00	   .shard_191 .byte.b	#0
    210  f3c0		       00	   .shard_192 .byte.b	#0
    211  f3c1		       00	   .shard_193 .byte.b	#0
    212  f3c2		       00	   .shard_194 .byte.b	#0
    213  f3c3		       00	   .shard_195 .byte.b	#0
    214  f3c4		       00	   .shard_196 .byte.b	#0
    215  f3c5		       00	   .shard_197 .byte.b	#0
    216  f3c6		       00	   .shard_198 .byte.b	#0
    217  f3c7		       00	   .shard_199 .byte.b	#0
    218  f3c8		       00	   .shard_200 .byte.b	#0
    219  f3c9		       00	   .shard_201 .byte.b	#0
    220  f3ca		       00	   .shard_202 .byte.b	#0
    221  f3cb		       00	   .shard_203 .byte.b	#0
    222  f3cc		       00	   .shard_204 .byte.b	#0
    223  f3cd		       00	   .shard_205 .byte.b	#0
    224  f3ce		       00	   .shard_206 .byte.b	#0
    225  f3cf		       00	   .shard_207 .byte.b	#0
    226  f3d0		       00	   .shard_208 .byte.b	#0
    227  f3d1		       00	   .shard_209 .byte.b	#0
    228  f3d2		       00	   .shard_210 .byte.b	#0
    229  f3d3		       00	   .shard_211 .byte.b	#0
    230  f3d4		       00	   .shard_212 .byte.b	#0
    231  f3d5		       00	   .shard_213 .byte.b	#0
    232  f3d6		       00	   .shard_214 .byte.b	#0
    233  f3d7		       00	   .shard_215 .byte.b	#0
    234  f3d8		       03	   .shard_216 .byte.b	#%0011
    235  f3d9		       03	   .shard_217 .byte.b	#%0011
    236  f3da		       03	   .shard_218 .byte.b	#%0011
    237  f3db		       03	   .shard_219 .byte.b	#%0011
    238  f3dc		       00	   .shard_220 .byte.b	#0
    239  f3dd		       00	   .shard_221 .byte.b	#0
    240  f3de		       00	   .shard_222 .byte.b	#0
    241  f3df		       00	   .shard_223 .byte.b	#0
    242  f3e0		       00	   .shard_224 .byte.b	#0
    243  f3e1		       00	   .shard_225 .byte.b	#0
    244  f3e2		       00	   .shard_226 .byte.b	#0
    245  f3e3		       00	   .shard_227 .byte.b	#0
    246  f3e4		       08	   .shard_228 .byte.b	#%1000
    247  f3e5		       08	   .shard_229 .byte.b	#%1000
    248  f3e6		       08	   .shard_230 .byte.b	#%1000
    249  f3e7		       08	   .shard_231 .byte.b	#%1000
    250  f3e8		       00	   .shard_232 .byte.b	#0
    251  f3e9		       00	   .shard_233 .byte.b	#0
    252  f3ea		       00	   .shard_234 .byte.b	#0
    253  f3eb		       00	   .shard_235 .byte.b	#0
    254  f3ec		       00	   .shard_236 .byte.b	#0
    255  f3ed		       00	   .shard_237 .byte.b	#0
    256  f3ee		       00	   .shard_238 .byte.b	#0
    257  f3ef		       00	   .shard_239 .byte.b	#0
    258  f3f0		       00	   .shard_240 .byte.b	#0
    259  f3f1		       00	   .shard_241 .byte.b	#0
    260  f3f2		       00	   .shard_242 .byte.b	#0
    261  f3f3		       00	   .shard_243 .byte.b	#0
    262  f3f4		       00	   .shard_244 .byte.b	#0
    263  f3f5		       00	   .shard_245 .byte.b	#0
    264  f3f6		       00	   .shard_246 .byte.b	#0
    265  f3f7		       00	   .shard_247 .byte.b	#0
    266  f3f8		       00	   .shard_248 .byte.b	#0
    267  f3f9		       00	   .shard_249 .byte.b	#0
    268  f3fa		       00	   .shard_250 .byte.b	#0
    269  f3fb		       00	   .shard_251 .byte.b	#0
    270  f3fc		       00	   .shard_252 .byte.b	#0
    271  f3fd		       00	   .shard_253 .byte.b	#0
    272  f3fe		       00	   .shard_254 .byte.b	#0
    273  f3ff		       00	   .shard_255 .byte.b	#0
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f400					      include	"game_frame.s"
      1  f400							; Frame loop, including calling out to other kernels.
      2  f400
      3  f400		       00 aa	   SENTINEL   =	%010101010
      4  f400
      5  f400							; Reflected for Kernel A
      6  f400		       00 00	   G00	      =	%00000000
      7  f400		       00 60	   G01	      =	%01100000
      8  f400		       00 06	   G10	      =	%00000110
      9  f400		       00 66	   G11	      =	%01100110
     10  f400
     11  f400							; Reflected for Kernel A
     12  f400		       00 00	   G00	      =	%00000000
     13  f400		       00 60	   G01	      =	%01100000
     14  f400		       00 06	   G10	      =	%00000110
     15  f400		       00 66	   G11	      =	%01100110
     16  f400
     17  f400
     18  f400							; gems:     [g01,g10,g01,g11,g00,g00]
     19  f400							; cpu:      cpu(g01,g00,false,g10,g11,false)
     20  f400							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     21  f400
     22  f400							; gems:     [g00,g01,g10,g11,g00,g01]
     23  f400							; cpu:      cpu(g01,g00,false,g10,g11,false)
     24  f400							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     25  f400
     26  f400							; gems:     [g01,g10,g11,g00,g01,g10]
     27  f400							; cpu:      cpu(g01,g01,false,g10,g11,false)
     28  f400							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     29  f400
     30  f400							; gems:     [g10,g11,g00,g01,g10,g11]
     31  f400							; cpu:      cpu(g10,g10,false,g11,g01,false)
     32  f400							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     33  f400
     34  f400							; gems:     [g01,g00,g00,g11,g01,g11]
     35  f400							; cpu:      cpu(g01,g01,false,g00,g11,false)
     36  f400							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     37  f400
     38  f400							; gems:     [g11,g01,g01,g01,g01,g00]
     39  f400							; cpu:      cpu(g00,g01,false,g11,g00,false)
     40  f400							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     41  f400
     42  f400							; gems:     [g10,g10,g11,g00,g11,g01]
     43  f400							; cpu:      cpu(g00,g00,false,g10,g11,false)
     44  f400							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     45  f400
     46  f400							; gems:     [g01,g00,g00,g11,g01,g11]
     47  f400							; cpu:      cpu(g00,g01,false,g01,g11,false)
     48  f400							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     49  f400
     50  f400							; gems:     [g11,g10,g00,g01,g00,g01]
     51  f400							; cpu:      cpu(g11,g00,false,g10,g01,false)
     52  f400							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     53  f400
     54  f400							; Y=Gemini Sprite
     55  f400							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     56  f400							; processor flag Z is TRUE if this is RST.
     57  f400				   KernelA_GenReset subroutine
     58  f400		       c0 00		      cpy	#$00
     59  f402		       f0 01		      beq	.start
     60  f404		       60		      rts
     61  f405							; Current Gemini = $00
     62  f405				   .start
     63  f405		       a6 a8		      ldx	BuildKernelRST
     64  f407		       e0 aa		      cpx	#SENTINEL
     65  f409		       d0 04		      bne	.set_else
     66  f40b							; We have found the first (and only) RST on this line, set the marker var
     67  f40b		       a2 ff		      ldx	#$ff
     68  f40d		       86 a8		      stx	BuildKernelRST
     69  f40f				   .set_else
     70  f40f		       a2 00		      ldx	#$00
     71  f411		       60		      rts
     72  f412
     73  f412							; Y=Gemini Sprite
     74  f412							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     75  f412							; processor flag Z is TRUE if this is RST.
     76  f412				   KernelB_GenPhp subroutine
     77  f412		       c0 60		      cpy	#G01
     78  f414		       f0 05		      beq	.start
     79  f416		       c0 66		      cpy	#G11
     80  f418		       f0 01		      beq	.start
     81  f41a		       60		      rts
     82  f41b							; Current Gemini = $00
     83  f41b				   .start
     84  f41b		       a6 a8		      ldx	BuildKernelRST
     85  f41d		       e0 aa		      cpx	#SENTINEL
     86  f41f		       d0 06		      bne	.set_else
     87  f421							; We have found the first (and only) RST on this line, set the marker var
     88  f421		       a2 ff		      ldx	#$ff
     89  f423		       86 a8		      stx	BuildKernelRST
     90  f425		       a2 00		      ldx	#$00
     91  f427				   .set_else
     92  f427		       60		      rts
     93  f428
     94  f428							; Allocates build-time registers for a new Gemini sprite value.
     95  f428							; register Y = the storage opcode to write to the result
     96  f428							;
     97  f428							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
     98  f428							; BuildKernelX, BuildKernelY are upgraded if not set.
     99  f428							; Y=Gemini Sprite
    100  f428				   KernelB_UpdateRegs
    101  f428				   KernelA_UpdateRegs subroutine
    102  f428
    103  f428							; If equal to GRP0, return nop
    104  f428							; FIXME GRP0 might not always be up to date (should update each entry?)
    105  f428							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    106  f428							; cpy BuildKernelGrp0
    107  f428							; bne .set_start
    108  f428							; ; TODO if this is stx + NOP value, then register doesn't have to change as
    109  f428							; ; often in GEM1ASWITCH
    110  f428							; ldy #BC_NOP
    111  f428							; rts
    112  f428
    113  f428		       c4 a6		      cpy	BuildKernelX
    114  f42a		       d0 03		      bne	.op_else
    115  f42c		       a0 86		      ldy	#BC_STX
    116  f42e		       60		      rts
    117  f42f				   .op_else
    118  f42f		       c4 a7		      cpy	BuildKernelY
    119  f431		       d0 03		      bne	.op_end
    120  f433		       a0 84		      ldy	#BC_STY
    121  f435		       60		      rts
    122  f436				   .op_end
    123  f436
    124  f436				   .set_start
    125  f436		       a6 a6		      ldx	BuildKernelX
    126  f438		       e0 aa		      cpx	#SENTINEL
    127  f43a		       d0 13		      bne	.set_else
    128  f43c
    129  f43c							; KA Missile opcode determination
    130  f43c		       84 a6		      sty	BuildKernelX
    131  f43e		       66 a6		      ror	BuildKernelX	; D0
    132  f440		       66 a6		      ror	BuildKernelX	; D1
    133  f442		       a2 86		      ldx	#BC_STX
    134  f444		       b0 00		      bcs	[. + 2]
    135  f446		       a2 84		      ldx	#BC_STY
    136  f448				   DBG_CHECK_MISSILE_OPCODE
    137  f448		       86 ab		      stx	BuildKernelMissile
    138  f44a
    139  f44a		       84 a6		      sty	BuildKernelX
    140  f44c		       a0 86		      ldy	#BC_STX
    141  f44e		       60		      rts
    142  f44f				   .set_else
    143  f44f		       a6 a7		      ldx	BuildKernelY
    144  f451		       e0 aa		      cpx	#SENTINEL
    145  f453		       d0 05		      bne	.set_end
    146  f455		       84 a7		      sty	BuildKernelY
    147  f457		       a0 84		      ldy	#BC_STY
    148  f459		       60		      rts
    149  f45a				   .set_end
    150  f45a							; Failed all
      0  f45a					      ASSERT_RUNTIME	"0"
      1  f45a				   .COND      SET	"0"
 ASSERT: breakif { pc== $f45a  && !(  0  ) }
      2  f45a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    152  f45a		       60		      rts
    153  f45b
    154  f45b							; Vertical Sync
    155  f45b				   VerticalSync subroutine
      0  f45b					      VERTICAL_SYNC
      1  f45b		       a9 0e		      lda	#%1110
      2  f45d		       85 02	   .VSLP1     sta	WSYNC
      3  f45f		       85 00		      sta	VSYNC
      4  f461		       4a		      lsr
      5  f462		       d0 f9		      bne	.VSLP1
    157  f464
    158  f464				   FrameStart subroutine
    159  f464							; FIXME we can't skip this: ASSERT_RUNTIME "_scan == #0"
    160  f464
    161  f464				   VerticalBlank subroutine
      0  f464					      TIMER_SETUP	37
      1  f464				   .lines     SET	37
      2  f464		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f466		       85 02		      sta	WSYNC
      4  f468		       8d 96 02 	      sta	TIM64T
    163  f46b
    164  f46b							; Scanline counter
    165  f46b		       a9 10		      lda	#ROW_COUNT
    166  f46d		       85 83		      sta	LoopCount
    167  f46f
    168  f46f							; Frame counter
    169  f46f		       e6 84		      inc	FrameCount
    170  f471
    171  f471							; Skip every 8 frames for increasing demo index
    172  f471		       a5 84		      lda	FrameCount
    173  f473		       29 07		      and	#FrameSkip
    174  f475		       c9 07		      cmp	#FrameSkip
    175  f477		       d0 0d		      bne	.next_next_thing
    176  f479
    177  f479		       18		      clc
    178  f47a		       a5 8f		      lda	ROW_DEMO_INDEX
    179  f47c		       69 04		      adc	#4
    180  f47e		       c9 68		      cmp	#[level_01_end - level_01]
    181  f480		       90 02		      bcc	.next_thing_local
    182  f482		       a9 00		      lda	#0
    183  f484				   .next_thing_local
    184  f484		       85 8f		      sta	ROW_DEMO_INDEX
    185  f486				   .next_next_thing
    186  f486		       85 02		      sta	WSYNC
    187  f488
    188  f488							; Positioning
      0  f488					      SLEEP	40
      1  f488				   .CYCLES    SET	40
      2  f488
      3  f488				  -	      IF	.CYCLES < 2
      4  f488				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f488				  -	      ERR
      6  f488					      ENDIF
      7  f488
      8  f488				  -	      IF	.CYCLES & 1
      9  f488				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f488				  -	      nop	0
     11  f488				  -	      ELSE
     12  f488				  -	      bit	VSYNC
     13  f488				  -	      ENDIF
     14  f488				  -.CYCLES    SET	.CYCLES - 3
     15  f488					      ENDIF
     16  f488
     17  f488					      REPEAT	.CYCLES / 2
     18  f488		       ea		      nop
     17  f488					      REPEND
     18  f489		       ea		      nop
     17  f489					      REPEND
     18  f48a		       ea		      nop
     17  f48a					      REPEND
     18  f48b		       ea		      nop
     17  f48b					      REPEND
     18  f48c		       ea		      nop
     17  f48c					      REPEND
     18  f48d		       ea		      nop
     17  f48d					      REPEND
     18  f48e		       ea		      nop
     17  f48e					      REPEND
     18  f48f		       ea		      nop
     17  f48f					      REPEND
     18  f490		       ea		      nop
     17  f490					      REPEND
     18  f491		       ea		      nop
     17  f491					      REPEND
     18  f492		       ea		      nop
     17  f492					      REPEND
     18  f493		       ea		      nop
     17  f493					      REPEND
     18  f494		       ea		      nop
     17  f494					      REPEND
     18  f495		       ea		      nop
     17  f495					      REPEND
     18  f496		       ea		      nop
     17  f496					      REPEND
     18  f497		       ea		      nop
     17  f497					      REPEND
     18  f498		       ea		      nop
     17  f498					      REPEND
     18  f499		       ea		      nop
     17  f499					      REPEND
     18  f49a		       ea		      nop
     17  f49a					      REPEND
     18  f49b		       ea		      nop
     19  f49c					      REPEND
    190  f49c		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    191  f49e		       85 02		      sta	WSYNC
    192  f4a0
    193  f4a0							; Misc
    194  f4a0		       a9 00		      lda	#00
    195  f4a2		       85 1e		      sta	EMERALD_MI_ENABLE
    196  f4a4
    197  f4a4							; Assign dervied SpriteEnd value
    198  f4a4		       18		      clc
    199  f4a5		       a9 c8		      lda	#HEIGHT_OFFSET
    200  f4a7		       e5 8a		      sbc	YPos
    201  f4a9		       85 86		      sta	SpriteEnd
    202  f4ab
    203  f4ab							; Player 1
    204  f4ab		       a5 87		      lda	XPos
    205  f4ad		       a2 00		      ldx	#0
    206  f4af		       20 44 fb 	      jsr	SetHorizPos
    207  f4b2
    208  f4b2							; Extract 26-bit string to full Gemini profile
    209  f4b2		       20 00 fa 	      jsr	gemini_populate
    210  f4b5
    211  f4b5				   frame_setup subroutine
    212  f4b5							; Kernel A or B
    213  f4b5		       a9 01		      lda	#01
    214  f4b7		       25 84		      and	FrameCount
    215  f4b9		       d0 24		      bne	frame_setup_kernel_b
    216  f4bb
    217  f4bb				   frame_setup_kernel_a subroutine
    218  f4bb							; Load kernel into CBSRAM
    219  f4bb		       20 6a f2 	      jsr	LoadKernelA
    220  f4be
    221  f4be							; Move missile
    222  f4be		       85 02		      sta	WSYNC
      0  f4c0					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f4c0				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f4c0
      3  f4c0				  -	      IF	.CYCLES < 2
      4  f4c0				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4c0				  -	      ERR
      6  f4c0					      ENDIF
      7  f4c0
      8  f4c0				  -	      IF	.CYCLES & 1
      9  f4c0				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4c0				  -	      nop	0
     11  f4c0				  -	      ELSE
     12  f4c0				  -	      bit	VSYNC
     13  f4c0				  -	      ENDIF
     14  f4c0				  -.CYCLES    SET	.CYCLES - 3
     15  f4c0					      ENDIF
     16  f4c0
     17  f4c0					      REPEAT	.CYCLES / 2
     18  f4c0		       ea		      nop
     17  f4c0					      REPEND
     18  f4c1		       ea		      nop
     17  f4c1					      REPEND
     18  f4c2		       ea		      nop
     17  f4c2					      REPEND
     18  f4c3		       ea		      nop
     17  f4c3					      REPEND
     18  f4c4		       ea		      nop
     17  f4c4					      REPEND
     18  f4c5		       ea		      nop
     17  f4c5					      REPEND
     18  f4c6		       ea		      nop
     17  f4c6					      REPEND
     18  f4c7		       ea		      nop
     17  f4c7					      REPEND
     18  f4c8		       ea		      nop
     17  f4c8					      REPEND
     18  f4c9		       ea		      nop
     17  f4c9					      REPEND
     18  f4ca		       ea		      nop
     17  f4ca					      REPEND
     18  f4cb		       ea		      nop
     17  f4cb					      REPEND
     18  f4cc		       ea		      nop
     17  f4cc					      REPEND
     18  f4cd		       ea		      nop
     19  f4ce					      REPEND
    224  f4ce		       85 13		      sta	EMERALD_MI_RESET
    225  f4d0		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    226  f4d2		       85 23		      sta	EMERALD_MI_HMOVE
    227  f4d4
    228  f4d4							; DEBUG: Set per-kernel color
    229  f4d4		       a2 cc		      ldx	#COL_EMERALD
    230  f4d6		       86 07		      stx	EMERALD_SP_COLOR
    231  f4d8
    232  f4d8							; Set reflection for Jetpack.
    233  f4d8		       a9 ff		      lda	#%11111111
    234  f4da		       85 0c		      sta	REFP1
    235  f4dc
    236  f4dc		       4c 0c f5 	      jmp	frame_setup_complete
    237  f4df
    238  f4df				   frame_setup_kernel_b subroutine
    239  f4df							; Load kernel into CBSRAM
    240  f4df		       20 7c f2 	      jsr	LoadKernelB
    241  f4e2
    242  f4e2							; Move missile
    243  f4e2		       85 02		      sta	WSYNC
      0  f4e4					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f4e4				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f4e4
      3  f4e4				  -	      IF	.CYCLES < 2
      4  f4e4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f4e4				  -	      ERR
      6  f4e4					      ENDIF
      7  f4e4
      8  f4e4					      IF	.CYCLES & 1
      9  f4e4					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f4e4		       04 00		      nop	0
     11  f4e6				  -	      ELSE
     12  f4e6				  -	      bit	VSYNC
     13  f4e6					      ENDIF
     14  f4e6				   .CYCLES    SET	.CYCLES - 3
     15  f4e6					      ENDIF
     16  f4e6
     17  f4e6					      REPEAT	.CYCLES / 2
     18  f4e6		       ea		      nop
     17  f4e6					      REPEND
     18  f4e7		       ea		      nop
     17  f4e7					      REPEND
     18  f4e8		       ea		      nop
     17  f4e8					      REPEND
     18  f4e9		       ea		      nop
     17  f4e9					      REPEND
     18  f4ea		       ea		      nop
     17  f4ea					      REPEND
     18  f4eb		       ea		      nop
     17  f4eb					      REPEND
     18  f4ec		       ea		      nop
     17  f4ec					      REPEND
     18  f4ed		       ea		      nop
     17  f4ed					      REPEND
     18  f4ee		       ea		      nop
     17  f4ee					      REPEND
     18  f4ef		       ea		      nop
     17  f4ef					      REPEND
     18  f4f0		       ea		      nop
     17  f4f0					      REPEND
     18  f4f1		       ea		      nop
     17  f4f1					      REPEND
     18  f4f2		       ea		      nop
     17  f4f2					      REPEND
     18  f4f3		       ea		      nop
     17  f4f3					      REPEND
     18  f4f4		       ea		      nop
     17  f4f4					      REPEND
     18  f4f5		       ea		      nop
     17  f4f5					      REPEND
     18  f4f6		       ea		      nop
     17  f4f6					      REPEND
     18  f4f7		       ea		      nop
     17  f4f7					      REPEND
     18  f4f8		       ea		      nop
     17  f4f8					      REPEND
     18  f4f9		       ea		      nop
     17  f4f9					      REPEND
     18  f4fa		       ea		      nop
     17  f4fa					      REPEND
     18  f4fb		       ea		      nop
     17  f4fb					      REPEND
     18  f4fc		       ea		      nop
     17  f4fc					      REPEND
     18  f4fd		       ea		      nop
     19  f4fe					      REPEND
    245  f4fe		       85 13		      sta	EMERALD_MI_RESET
    246  f500		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    247  f502		       85 23		      sta	EMERALD_MI_HMOVE
    248  f504
    249  f504							; DEBUG: Set per-kernel color
    250  f504		       a2 e4		      ldx	#$e4
    251  f506							; ldx #COL_EMERALD
    252  f506		       86 07		      stx	EMERALD_SP_COLOR
    253  f508
    254  f508							; Disable reflection for Jetpack.
    255  f508		       a9 ff		      lda	#%11111111
    256  f50a		       85 0c		      sta	REFP1
    257  f50c
    258  f50c				   frame_setup_complete
    259  f50c		       ad 00 f1 	      lda	$f100
    260  f50f		       85 80		      sta	DebugKernelID
    261  f511
    262  f511		       ad 84 fe 	      lda	shard_map
    263  f514		       a0 01		      ldy	#1	; gemini counter, starting at 1
    264  f516				   gemini_builder
    265  f516		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    266  f518		       d0 00		      bne	.no_vd0
    267  f51a				   .no_vd0
    268  f51a
    269  f51a
    270  f51a				   nibble_precompile_gem_kernel
    271  f51a				   DBG_NIBBLE
    272  f51a		       00 a9	   BC_LDA_IMM =	$a9
    273  f51a		       00 85	   BC_STA     =	$85
    274  f51a		       00 86	   BC_STX     =	$86
    275  f51a		       00 84	   BC_STY     =	$84
    276  f51a		       00 08	   BC_PHP     =	$08
    277  f51a		       00 04	   BC_NOP     =	$04
    278  f51a
    279  f51a		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    280  f51a
    281  f51a				   KernelA_D_W EQM	[KernelA_D - $100]
    282  f51a				   KernelA_E_W EQM	[KernelA_E - $100]
    283  f51a				   KernelA_G_W EQM	[KernelA_G - $100]
    284  f51a				   KernelA_H_W EQM	[KernelA_H - $100]
    285  f51a				   KernelA_I_W EQM	[KernelA_I - $100]
    286  f51a				   KernelA_J_W EQM	[KernelA_J - $100]
    287  f51a				   KernelA_K_W EQM	[KernelA_K - $100]
    288  f51a
    289  f51a				   KernelB_D_W EQM	[KernelB_D - $100]
    290  f51a				   KernelB_E_W EQM	[KernelB_E - $100]
    291  f51a				   KernelB_F_W EQM	[KernelB_F - $100]
    292  f51a				   KernelB_G_W EQM	[KernelB_G - $100]
    293  f51a				   KernelB_H_W EQM	[KernelB_H - $100]
    294  f51a				   KernelB_I_W EQM	[KernelB_I - $100]
    295  f51a				   KernelB_J_W EQM	[KernelB_J - $100]
    296  f51a				   KernelB_K_W EQM	[KernelB_K - $100]
    297  f51a
    298  f51a							; Nibble Kernel A
      0  f51a					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00d6 ????				      seg.U	ignoreme
    300 U00d6 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    301 U00d8 ????	       86 a6		      stx	BuildKernelX
    302 U00da ????	       86 a7		      stx	BuildKernelY
    303 U00dc ????	       86 a8		      stx	BuildKernelRST
    304 U00de ????
    305 U00de ????						; Gemini 1A
    306 U00de ????			   .K_1A
    307 U00de ????	       a4 b2		      ldy	[DO_GEMS_A + 0]
    308 U00e0 ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U00e3 ????				      NIBBLE_IF	eq
    310 U00e3 ????						; Special: Encoding RST0
    311 U00e3 ????						; Rewrite lda RamKernelPF1 to be #immediate
    312 U00e3 ????	       a0 a9		      ldy	#BC_LDA_IMM
    313 U00e5 ????	       8c 17 f0 	      sty	[KernelA_B - $100]
    314 U00e8 ????	       a0 a0		      ldy	#%10100000
    315 U00ea ????	       8c 18 f0 	      sty	[KernelA_B - $100 + 1]
    316 U00ed ????						; Store 1A in GRP0
    317 U00ed ????	       a4 b3		      ldy	[DO_GEMS_A + 1]
    318 U00ef ????	       84 a9		      sty	BuildKernelGrp0
    319 U00f1 ????						; Gemini 1A is RESPx
    320 U00f1 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    321 U00f3 ????	       8c 1a f0 	      sty	[KernelA_C - $100 + 1]
    322 U00f6 ????						; Turn 3-cycle NOP into 4-cycle
    323 U00f6 ????	       a0 14		      ldy	#$14	; TODO what is this
    324 U00f8 ????	       8c 1b f0 	      sty	[KernelA_D - $100]
      0 U00fb ????				      NIBBLE_ELSE
    326 U00fb ????						; Store 0A in GRP0
    327 U00fb ????	       a4 b2		      ldy	[DO_GEMS_A + 0]
    328 U00fd ????	       84 a9		      sty	BuildKernelGrp0
    329 U00ff ????
    330 U00ff ????	       a4 b3		      ldy	[DO_GEMS_A + 1]
    331 U0101 ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U0104 ????				      NIBBLE_IF	eq
    333 U0104 ????						; GEM1ASWITCH
      0 U0104 ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U0104 ????				      NIBBLE_ELSE
    336 U0104 ????						; Calculate the 1A value
    337 U0104 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    338 U0107 ????	       c0 01		      cpy	#1
    339 U0109 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    340 U010b ????	       a0 11		      ldy	#RESP1
    341 U010d ????	       2c		      .byte.b	$2C	; .bit (ABS)
    342 U010e ????	       a0 1c		      ldy	#GRP1
    343 U0110 ????	       84 9e		      sty	RamKernelGemini1Reg
    344 U0112 ????
    345 U0112 ????						; Set opcode
    346 U0112 ????	       ae d4 fa 	      ldx	SHARD_LUT_RF1
    347 U0115 ????	       e0 01		      cpx	#1
    348 U0117 ????	       a0 86		      ldy	#BC_STX	; Don't allocate
    349 U0119 ????	       f0 05		      .byte.b	$F0, #5	; beq +4
    350 U011b ????	       a4 b3		      ldy	[DO_GEMS_A + 1]
    351 U011d ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    352 U0120 ????	       84 9d		      sty	RamKernelGemini1
    353 U0122 ????
      0 U0122 ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U0122 ????				      NIBBLE_END_IF
      0 U0122 ????				      NIBBLE_END_IF
    357 U0122 ????
    358 U0122 ????						; BuildKernelX, BuildKernelY are upgraded if not set
    359 U0122 ????						; Gemini 2A
    360 U0122 ????	       a4 b4		      ldy	[DO_GEMS_A + 2]
    361 U0124 ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U0127 ????				      NIBBLE_IF	eq
      0 U0127 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0127 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0127 ????				      NIBBLE_ELSE
    366 U0127 ????						; Set opcode
    367 U0127 ????	       a4 b4		      ldy	[DO_GEMS_A + 2]
    368 U0129 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    369 U012c ????	       84 9f		      sty	RamKernelGemini2
    370 U012e ????
    371 U012e ????						; Set opcode target
    372 U012e ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    373 U0131 ????	       c0 02		      cpy	#2
    374 U0133 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    375 U0135 ????	       a0 11		      ldy	#RESP1
    376 U0137 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    377 U0138 ????	       a0 1c		      ldy	#GRP1
    378 U013a ????	       84 a0		      sty	RamKernelGemini2Reg
    379 U013c ????
      0 U013c ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U013c ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U013c ????				      NIBBLE_END_IF
    383 U013c ????
    384 U013c ????						; Gemini 3A
    385 U013c ????	       a4 b5		      ldy	[DO_GEMS_A + 3]
    386 U013e ????	       20 00 f4 	      jsr	KernelA_GenReset
      0 U0141 ????				      NIBBLE_IF	eq
      0 U0141 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0141 ????				      NIBBLE_ELSE
    390 U0141 ????						; Set opcode
    391 U0141 ????	       a4 b5		      ldy	[DO_GEMS_A + 3]
    392 U0143 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    393 U0146 ????	       84 a1		      sty	RamKernelGemini3
    394 U0148 ????
    395 U0148 ????						; Set opcode target
    396 U0148 ????	       ac d4 fa 	      ldy	SHARD_LUT_RF1
    397 U014b ????	       c0 03		      cpy	#3
    398 U014d ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    399 U014f ????	       a0 11		      ldy	#RESP1
    400 U0151 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    401 U0152 ????	       a0 1c		      ldy	#GRP1
    402 U0154 ????	       84 a2		      sty	RamKernelGemini3Reg
    403 U0156 ????
      0 U0156 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0156 ????				      NIBBLE_END_IF
      0 U0156 ????				      NIBBLE_END_KERNEL
      1  f51a					      seg	CodeBank3
    407  f51a
      0  f51a					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0156 ????				      seg.U	ignoreme
    409 U0156 ????						; VD1 default
    410 U0156 ????	       a6 b3		      ldx	[DO_GEMS_A + 1]
    411 U0158 ????	       86 aa		      stx	BuildKernelVdel1
    412 U015a ????
    413 U015a ????						; Gemini 4A
    414 U015a ????	       ae d5 fa 	      ldx	SHARD_LUT_VD1
    415 U015d ????	       e0 04		      cpx	#4
      0 U015f ????				      NIBBLE_IF	ne
      0 U015f ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U015f ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U015f ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    420 U015f ????
    421 U015f ????						; Set PHP
      0 U015f ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    423 U015f ????
    424 U015f ????						; Update VDEL1
    425 U015f ????	       a6 b6		      ldx	[DO_GEMS_A + 4]
    426 U0161 ????	       86 aa		      stx	BuildKernelVdel1
      0 U0163 ????				      NIBBLE_ELSE
    428 U0163 ????	       a4 b6		      ldy	[DO_GEMS_A + 4]
    429 U0165 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    430 U0168 ????	       84 a3		      sty	RamKernelGemini4
    431 U016a ????
      0 U016a ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U016a ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U016a ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    435 U016a ????
    436 U016a ????						; Set PHP
      0 U016a ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U016a ????				      NIBBLE_END_IF
    439 U016a ????
    440 U016a ????						; Misisle
    441 U016a ????	       a4 b0		      ldy	DO_MISS_A
      0 U016c ????				      NIBBLE_IF	eq	; Disabled
      0 U016c ????				      NIBBLE_WRITE	[KernelA_F - $100], #BC_NOP
      0 U016c ????				      NIBBLE_ELSE
      0 U016c ????				      NIBBLE_WRITE	[KernelA_F - $100], BuildKernelMissile
      0 U016c ????				      NIBBLE_END_IF
    447 U016c ????
    448 U016c ????						; VD1
    449 U016c ????						; ldy #SHARD_VD1
    450 U016c ????						; sty [KernelA_VDEL1 - $100]
      0 U016c ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    452 U016c ????						; GRP0
    453 U016c ????						; ldy #SHARD_GRP0
    454 U016c ????						; sty [KernelA_VDEL0 - $100]
      0 U016c ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    456 U016c ????						; X
    457 U016c ????						; ldy #SHARD_X
    458 U016c ????						; sty RamKernelX
      0 U016c ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    460 U016c ????						; Y
      0 U016c ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    462 U016c ????
    463 U016c ????						; Gemini 5A
    464 U016c ????						; TODO eventually...?
      0 U016c ????				      NIBBLE_END_KERNEL
      1  f51a					      seg	CodeBank3
    466  f51a
    467  f51a							; Nibble Kernel B
      0  f51a					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U016c ????				      seg.U	ignoreme
    469 U016c ????						; Php target default
    470 U016c ????	       a2 11		      ldx	#RESP1
    471 U016e ????	       86 9a		      stx	RamKernelPhpTarget
    472 U0170 ????
    473 U0170 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    474 U0172 ????	       86 a6		      stx	BuildKernelX
    475 U0174 ????	       86 a7		      stx	BuildKernelY
    476 U0176 ????	       86 a8		      stx	BuildKernelRST
    477 U0178 ????
    478 U0178 ????						; Gemini 0B
    479 U0178 ????	       a4 b8		      ldy	[DO_GEMS_B + 0]
    480 U017a ????	       84 a9		      sty	BuildKernelGrp0
    481 U017c ????						; NIBBLE_WRITE KernelB_D_W, RamKernelGemini0
    482 U017c ????
    483 U017c ????						; Gemini 1B
    484 U017c ????	       a4 b9		      ldy	[DO_GEMS_B + 1]
    485 U017e ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    486 U0181 ????	       84 9d		      sty	RamKernelGemini1
      0 U0183 ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini1
    488 U0183 ????
    489 U0183 ????						; Calculate Gemini 2B
    490 U0183 ????	       a4 ba		      ldy	[DO_GEMS_B + 2]
    491 U0185 ????	       20 28 f4 	      jsr	KernelB_UpdateRegs
    492 U0188 ????	       84 9f		      sty	RamKernelGemini2
    493 U018a ????						; Calculate Gemini 3B
    494 U018a ????	       a4 bb		      ldy	[DO_GEMS_B + 3]
    495 U018c ????	       20 28 f4 	      jsr	KernelB_UpdateRegs
    496 U018f ????	       84 a1		      sty	RamKernelGemini3
    497 U0191 ????
    498 U0191 ????						; Gemini 2B
    499 U0191 ????			   .K_2B
    500 U0191 ????	       a4 ba		      ldy	[DO_GEMS_B + 2]
    501 U0193 ????	       20 12 f4 	      jsr	KernelB_GenPhp
      0 U0196 ????				      NIBBLE_IF	eq
    503 U0196 ????						; Write to PHP in 2B
      0 U0196 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0196 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U0196 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U0196 ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U0196 ????				      NIBBLE_WRITE	[KernelB_H_W + 0], RamKernelGemini3, #EMERALD_SP	; 3B
    509 U0196 ????
    510 U0196 ????	       c4 66		      cpy	G11
      0 U0198 ????				      NIBBLE_IF	ne
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_P11_C - $100], #$38	; sec
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_B + 1 - $100], #RamZeroByte
      0 U0198 ????				      NIBBLE_ELSE
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_P11_C - $100], #$18	; clc
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_B + 1 - $100], #RamLowerSixByte
      0 U0198 ????				      NIBBLE_END_IF
      0 U0198 ????				      NIBBLE_ELSE
      0 U0198 ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini2, #EMERALD_SP
      0 U0198 ????				      NIBBLE_END_IF
    521 U0198 ????
    522 U0198 ????						; Gemini 3B
    523 U0198 ????	       a4 bb		      ldy	[DO_GEMS_B + 3]
    524 U019a ????	       20 12 f4 	      jsr	KernelB_GenPhp
      0 U019d ????				      NIBBLE_IF	ne
    526 U019d ????						; Write to PHP in 3B
      0 U019d ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U019d ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET
      0 U019d ????				      NIBBLE_WRITE	[KernelB_F_W + 1], RamKernelGemini2, #EMERALD_SP	; 2B
      0 U019d ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U019d ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP	; 3B
    532 U019d ????
    533 U019d ????						; TODO compare this in the outside by checking KernelB_GenPhp value
    534 U019d ????	       c4 66		      cpy	G11
      0 U019f ????				      NIBBLE_IF	eq
      0 U019f ????				      NIBBLE_WRITE	[KernelB_P11_C - $100], #$38	; sec
      0 U019f ????				      NIBBLE_WRITE	[KernelB_B + 1 - $100], #RamZeroByte
      0 U019f ????				      NIBBLE_ELSE
      0 U019f ????				      NIBBLE_WRITE	[KernelB_P11_C - $100], #$18	; clc
      0 U019f ????				      NIBBLE_WRITE	[KernelB_B + 1 - $100], #RamLowerSixByte
      0 U019f ????				      NIBBLE_END_IF
      0 U019f ????				      NIBBLE_ELSE
      0 U019f ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, #EMERALD_SP
      0 U019f ????				      NIBBLE_END_IF
    545 U019f ????
    546 U019f ????						; Gemini 4B
    547 U019f ????	       a4 bc		      ldy	[DO_GEMS_B + 4]
    548 U01a1 ????	       20 28 f4 	      jsr	KernelA_UpdateRegs
    549 U01a4 ????			   .K_4B
    550 U01a4 ????	       84 a3		      sty	RamKernelGemini4
      0 U01a6 ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    552 U01a6 ????
    553 U01a6 ????						; TODO if no PHP, rewrite previous section:
    554 U01a6 ????						; NIBBLE_IF cs
    555 U01a6 ????						;     ; Write to PHP in reset command
    556 U01a6 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    557 U01a6 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    558 U01a6 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    559 U01a6 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    560 U01a6 ????						; NIBBLE_END_IF
    561 U01a6 ????
    562 U01a6 ????						; Make adjustments for sprites.
    563 U01a6 ????	       66 a9		      ror	BuildKernelGrp0
    564 U01a8 ????	       66 a6		      ror	BuildKernelX
    565 U01aa ????	       66 a7		      ror	BuildKernelY
    566 U01ac ????
    567 U01ac ????						; ; VD1
    568 U01ac ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    569 U01ac ????						; GRP0
      0 U01ac ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    571 U01ac ????						; X
      0 U01ac ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    573 U01ac ????						; Y
      0 U01ac ????				      NIBBLE_WRITE	[KernelB_STY - $100], BuildKernelY
    575 U01ac ????
      0 U01ac ????				      NIBBLE_END_KERNEL
      1  f51a					      seg	CodeBank3
    577  f51a
    578  f51a							; TODO do this for all rows
    579  f51a				   DBG_NIBBLE_BUILD subroutine
    580  f51a		       ae 00 f1 	      ldx	$f100
    581  f51d		       e0 0a		      cpx	#$a
    582  f51f		       f0 03		      beq	[. + 5]
    583  f521		       4c 06 f6 	      jmp	.kernel_b
    584  f524				   .kernel_a
      0  f524					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f524		       a9 00		      lda	#0
      2  f526		       a2 aa		      ldx	#SENTINEL
      3  f528		       86 a6		      stx	BuildKernelX
      4  f52a		       86 a7		      stx	BuildKernelY
      5  f52c		       86 a8		      stx	BuildKernelRST
      6  f52e
      7  f52e				   .K_1A
      8  f52e		       a4 b2		      ldy	[DO_GEMS_A + 0]
      9  f530		       20 00 f4 	      jsr	KernelA_GenReset
     10  f533				   .if_1
     11  f533		       d0 1e		      bne	.else_1
     12  f535		       38		      sec
     13  f536		       2a		      rol
     14  f537
     15  f537
     16  f537		       a0 a9		      ldy	#BC_LDA_IMM
     17  f539		       8c 17 f0 	      sty	[KernelA_B - $100]
     18  f53c		       a0 a0		      ldy	#%10100000
     19  f53e		       8c 18 f0 	      sty	[KernelA_B - $100 + 1]
     20  f541
     21  f541		       a4 b3		      ldy	[DO_GEMS_A + 1]
     22  f543		       84 a9		      sty	BuildKernelGrp0
     23  f545
     24  f545		       a0 11		      ldy	#EMERALD_SP_RESET
     25  f547		       8c 1a f0 	      sty	[KernelA_C - $100 + 1]
     26  f54a
     27  f54a		       a0 14		      ldy	#$14
     28  f54c		       8c 1b f0 	      sty	[KernelA_D - $100]
     29  f54f		       4c 85 f5 	      jmp	.endif_1
     30  f552
     31  f552		       2a		      rol
     32  f553
     33  f553				   .else_1
     34  f553		       18		      clc
     35  f554		       2a		      rol
     36  f555
     37  f555		       a4 b2		      ldy	[DO_GEMS_A + 0]
     38  f557		       84 a9		      sty	BuildKernelGrp0
     39  f559		       a4 b3		      ldy	[DO_GEMS_A + 1]
     40  f55b		       20 00 f4 	      jsr	KernelA_GenReset
     41  f55e				   .if_2
     42  f55e		       d0 05		      bne	.else_2
     43  f560		       38		      sec
     44  f561		       2a		      rol
     45  f562
     46  f562		       4c 85 f5 	      jmp	.endif_2
     47  f565
     48  f565
     49  f565				   .else_2
     50  f565		       18		      clc
     51  f566		       2a		      rol
     52  f567
     53  f567		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     54  f56a		       c0 01		      cpy	#1
     55  f56c		       d0 03		      .byte.b	$D0, #3
     56  f56e		       a0 11		      ldy	#RESP1
     57  f570		       2c		      .byte.b	$2C
     58  f571		       a0 1c		      ldy	#GRP1
     59  f573		       84 9e		      sty	RamKernelGemini1Reg
     60  f575
     61  f575		       ae d4 fa 	      ldx	SHARD_LUT_RF1
     62  f578		       e0 01		      cpx	#1
     63  f57a		       a0 86		      ldy	#BC_STX
     64  f57c		       f0 05		      .byte.b	$F0, #5
     65  f57e		       a4 b3		      ldy	[DO_GEMS_A + 1]
     66  f580		       20 28 f4 	      jsr	KernelA_UpdateRegs
     67  f583		       84 9d		      sty	RamKernelGemini1
     68  f585
     69  f585
     70  f585				   .endif_2
     71  f585
     72  f585
     73  f585				   .endif_1
     74  f585
     75  f585
     76  f585		       a4 b4		      ldy	[DO_GEMS_A + 2]
     77  f587		       20 00 f4 	      jsr	KernelA_GenReset
     78  f58a				   .if_3
     79  f58a		       d0 05		      bne	.else_3
     80  f58c		       38		      sec
     81  f58d		       2a		      rol
     82  f58e		       4c a8 f5 	      jmp	.endif_3
     83  f591
     84  f591
     85  f591				   .else_3
     86  f591		       18		      clc
     87  f592		       2a		      rol
     88  f593
     89  f593		       a4 b4		      ldy	[DO_GEMS_A + 2]
     90  f595		       20 28 f4 	      jsr	KernelA_UpdateRegs
     91  f598		       84 9f		      sty	RamKernelGemini2
     92  f59a
     93  f59a		       ac d4 fa 	      ldy	SHARD_LUT_RF1
     94  f59d		       c0 02		      cpy	#2
     95  f59f		       d0 03		      .byte.b	$D0, #3
     96  f5a1		       a0 11		      ldy	#RESP1
     97  f5a3		       2c		      .byte.b	$2C
     98  f5a4		       a0 1c		      ldy	#GRP1
     99  f5a6		       84 a0		      sty	RamKernelGemini2Reg
    100  f5a8
    101  f5a8
    102  f5a8				   .endif_3
    103  f5a8
    104  f5a8		       a4 b5		      ldy	[DO_GEMS_A + 3]
    105  f5aa		       20 00 f4 	      jsr	KernelA_GenReset
    106  f5ad				   .if_4
    107  f5ad		       d0 05		      bne	.else_4
    108  f5af		       38		      sec
    109  f5b0		       2a		      rol
    110  f5b1		       4c cb f5 	      jmp	.endif_4
    111  f5b4
    112  f5b4
    113  f5b4				   .else_4
    114  f5b4		       18		      clc
    115  f5b5		       2a		      rol
    116  f5b6
    117  f5b6		       a4 b5		      ldy	[DO_GEMS_A + 3]
    118  f5b8		       20 28 f4 	      jsr	KernelA_UpdateRegs
    119  f5bb		       84 a1		      sty	RamKernelGemini3
    120  f5bd
    121  f5bd		       ac d4 fa 	      ldy	SHARD_LUT_RF1
    122  f5c0		       c0 03		      cpy	#3
    123  f5c2		       d0 03		      .byte.b	$D0, #3
    124  f5c4		       a0 11		      ldy	#RESP1
    125  f5c6		       2c		      .byte.b	$2C
    126  f5c7		       a0 1c		      ldy	#GRP1
    127  f5c9		       84 a2		      sty	RamKernelGemini3Reg
    128  f5cb
    129  f5cb
    130  f5cb				   .endif_4
    131  f5cb
    132  f5cb		       2a		      rol
    133  f5cc		       2a		      rol
    134  f5cd		       2a		      rol
    135  f5ce		       2a		      rol
    586  f5cf		       85 91		      sta	RamNibbleVar1
      0  f5d1					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f5d1		       a9 00		      lda	#0
      2  f5d3
      3  f5d3		       a6 b3		      ldx	[DO_GEMS_A + 1]
      4  f5d5		       86 aa		      stx	BuildKernelVdel1
      5  f5d7
      6  f5d7		       ae d5 fa 	      ldx	SHARD_LUT_VD1
      7  f5da		       e0 04		      cpx	#4
      8  f5dc				   .if_1
      9  f5dc		       f0 09		      beq	.else_1
     10  f5de		       38		      sec
     11  f5df		       2a		      rol
     12  f5e0
     13  f5e0
     14  f5e0		       a6 b6		      ldx	[DO_GEMS_A + 4]
     15  f5e2		       86 aa		      stx	BuildKernelVdel1
     16  f5e4		       4c f0 f5 	      jmp	.endif_1
     17  f5e7
     18  f5e7
     19  f5e7				   .else_1
     20  f5e7		       18		      clc
     21  f5e8		       2a		      rol
     22  f5e9		       a4 b6		      ldy	[DO_GEMS_A + 4]
     23  f5eb		       20 28 f4 	      jsr	KernelA_UpdateRegs
     24  f5ee		       84 a3		      sty	RamKernelGemini4
     25  f5f0
     26  f5f0
     27  f5f0
     28  f5f0				   .endif_1
     29  f5f0
     30  f5f0		       a4 b0		      ldy	DO_MISS_A
     31  f5f2				   .if_2
     32  f5f2		       d0 05		      bne	.else_2
     33  f5f4		       38		      sec
     34  f5f5		       2a		      rol
     35  f5f6		       4c fb f5 	      jmp	.endif_2
     36  f5f9
     37  f5f9
     38  f5f9				   .else_2
     39  f5f9		       18		      clc
     40  f5fa		       2a		      rol
     41  f5fb
     42  f5fb
     43  f5fb				   .endif_2
     44  f5fb
     45  f5fb
     46  f5fb
     47  f5fb
     48  f5fb
     49  f5fb
     50  f5fb
     51  f5fb
     52  f5fb
     53  f5fb
     54  f5fb
     55  f5fb
     56  f5fb
     57  f5fb		       2a		      rol
     58  f5fc		       2a		      rol
     59  f5fd		       2a		      rol
     60  f5fe		       2a		      rol
     61  f5ff		       2a		      rol
     62  f600		       2a		      rol
    588  f601		       85 92		      sta	RamNibbleVar2
    589  f603		       4c 74 f6 	      jmp	.next
    590  f606				   .kernel_b
      0  f606					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f606		       a9 00		      lda	#0
      2  f608
      3  f608		       a2 11		      ldx	#RESP1
      4  f60a		       86 9a		      stx	RamKernelPhpTarget
      5  f60c		       a2 aa		      ldx	#SENTINEL
      6  f60e		       86 a6		      stx	BuildKernelX
      7  f610		       86 a7		      stx	BuildKernelY
      8  f612		       86 a8		      stx	BuildKernelRST
      9  f614
     10  f614		       a4 b8		      ldy	[DO_GEMS_B + 0]
     11  f616		       84 a9		      sty	BuildKernelGrp0
     12  f618
     13  f618
     14  f618		       a4 b9		      ldy	[DO_GEMS_B + 1]
     15  f61a		       20 28 f4 	      jsr	KernelA_UpdateRegs
     16  f61d		       84 9d		      sty	RamKernelGemini1
     17  f61f
     18  f61f		       a4 ba		      ldy	[DO_GEMS_B + 2]
     19  f621		       20 28 f4 	      jsr	KernelB_UpdateRegs
     20  f624		       84 9f		      sty	RamKernelGemini2
     21  f626
     22  f626		       a4 bb		      ldy	[DO_GEMS_B + 3]
     23  f628		       20 28 f4 	      jsr	KernelB_UpdateRegs
     24  f62b		       84 a1		      sty	RamKernelGemini3
     25  f62d
     26  f62d				   .K_2B
     27  f62d		       a4 ba		      ldy	[DO_GEMS_B + 2]
     28  f62f		       20 12 f4 	      jsr	KernelB_GenPhp
     29  f632				   .if_1
     30  f632		       d0 10		      bne	.else_1
     31  f634		       38		      sec
     32  f635		       2a		      rol
     33  f636
     34  f636		       c4 66		      cpy	G11
     35  f638				   .if_2
     36  f638		       f0 05		      beq	.else_2
     37  f63a		       38		      sec
     38  f63b		       2a		      rol
     39  f63c		       4c 41 f6 	      jmp	.endif_2
     40  f63f
     41  f63f
     42  f63f				   .else_2
     43  f63f		       18		      clc
     44  f640		       2a		      rol
     45  f641
     46  f641
     47  f641				   .endif_2
     48  f641		       4c 47 f6 	      jmp	.endif_1
     49  f644
     50  f644
     51  f644				   .else_1
     52  f644		       18		      clc
     53  f645		       2a		      rol
     54  f646
     55  f646
     56  f646		       2a		      rol
     57  f647				   .endif_1
     58  f647
     59  f647		       a4 bb		      ldy	[DO_GEMS_B + 3]
     60  f649		       20 12 f4 	      jsr	KernelB_GenPhp
     61  f64c				   .if_3
     62  f64c		       f0 10		      beq	.else_3
     63  f64e		       38		      sec
     64  f64f		       2a		      rol
     65  f650
     66  f650
     67  f650		       c4 66		      cpy	G11
     68  f652				   .if_4
     69  f652		       d0 05		      bne	.else_4
     70  f654		       38		      sec
     71  f655		       2a		      rol
     72  f656		       4c 5b f6 	      jmp	.endif_4
     73  f659
     74  f659
     75  f659				   .else_4
     76  f659		       18		      clc
     77  f65a		       2a		      rol
     78  f65b
     79  f65b
     80  f65b				   .endif_4
     81  f65b		       4c 61 f6 	      jmp	.endif_3
     82  f65e
     83  f65e
     84  f65e				   .else_3
     85  f65e		       18		      clc
     86  f65f		       2a		      rol
     87  f660
     88  f660
     89  f660		       2a		      rol
     90  f661				   .endif_3
     91  f661
     92  f661		       a4 bc		      ldy	[DO_GEMS_B + 4]
     93  f663		       20 28 f4 	      jsr	KernelA_UpdateRegs
     94  f666				   .K_4B
     95  f666		       84 a3		      sty	RamKernelGemini4
     96  f668
     97  f668
     98  f668
     99  f668
    100  f668
    101  f668
    102  f668
    103  f668
    104  f668
    105  f668		       66 a9		      ror	BuildKernelGrp0
    106  f66a		       66 a6		      ror	BuildKernelX
    107  f66c		       66 a7		      ror	BuildKernelY
    108  f66e
    109  f66e
    110  f66e
    111  f66e
    112  f66e
    113  f66e
    114  f66e		       2a		      rol
    115  f66f		       2a		      rol
    116  f670		       2a		      rol
    117  f671		       2a		      rol
    592  f672		       85 91		      sta	RamNibbleVar1
    593  f674				   .next
    594  f674
    595  f674							; TODO move this into the row kernel
    596  f674				   DBG_NIBBLE_RUN subroutine
    597  f674		       ae 00 f1 	      ldx	$f100
    598  f677		       e0 0a		      cpx	#$a
    599  f679		       f0 03		      beq	[. + 5]
    600  f67b		       4c 3c f7 	      jmp	.kernel_b
    601  f67e				   .kernel_a
    602  f67e		       a5 91		      lda	RamNibbleVar1
      0  f680					      NIBBLE_gem_kernel_a_1
      1  f680				   .if_1
      2  f680		       0a		      asl
      3  f681		       90 03		      bcc	.else_1
      4  f683		       4c a0 f6 	      jmp	.endif_1
      5  f686				   .else_1
      6  f686				   .if_2
      7  f686		       0a		      asl
      8  f687		       90 0d		      bcc	.else_2
      9  f689		       a2 86		      ldx	#BC_STX
     10  f68b		       8e 1b f0 	      stx	[KernelA_D_W + 0]
     11  f68e		       a2 11		      ldx	#RESP1
     12  f690		       8e 1c f0 	      stx	[KernelA_D_W + 1]
     13  f693		       4c a0 f6 	      jmp	.endif_2
     14  f696				   .else_2
     15  f696		       a6 9d		      ldx	RamKernelGemini1
     16  f698		       8e 1b f0 	      stx	[KernelA_D_W + 0]
     17  f69b		       a6 9e		      ldx	RamKernelGemini1Reg
     18  f69d		       8e 1c f0 	      stx	[KernelA_D_W + 1]
     19  f6a0				   .endif_2
     20  f6a0				   .endif_1
     21  f6a0				   .if_3
     22  f6a0		       0a		      asl
     23  f6a1		       90 0d		      bcc	.else_3
     24  f6a3		       a2 79		      ldx	#NOP_REG
     25  f6a5		       8e 1e f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f6a8		       a2 11		      ldx	#RESP1
     27  f6aa		       8e 22 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f6ad		       4c bf f6 	      jmp	.endif_3
     29  f6b0				   .else_3
     30  f6b0		       a2 11		      ldx	#RESP1
     31  f6b2		       8e 1e f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f6b5		       a6 9f		      ldx	RamKernelGemini2
     33  f6b7		       8e 21 f0 	      stx	[KernelA_G_W + 0]
     34  f6ba		       a6 a0		      ldx	RamKernelGemini2Reg
     35  f6bc		       8e 22 f0 	      stx	[KernelA_G_W + 1]
     36  f6bf				   .endif_3
     37  f6bf				   .if_4
     38  f6bf		       0a		      asl
     39  f6c0		       90 08		      bcc	.else_4
     40  f6c2		       a2 11		      ldx	#RESP1
     41  f6c4		       8e 24 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f6c7		       4c d4 f6 	      jmp	.endif_4
     43  f6ca				   .else_4
     44  f6ca		       a6 a1		      ldx	RamKernelGemini3
     45  f6cc		       8e 23 f0 	      stx	[KernelA_H_W + 0]
     46  f6cf		       a6 a2		      ldx	RamKernelGemini3Reg
     47  f6d1		       8e 24 f0 	      stx	[KernelA_H_W + 1]
     48  f6d4				   .endif_4
    604  f6d4		       a5 92		      lda	RamNibbleVar2
      0  f6d6					      NIBBLE_gem_kernel_a_2
      1  f6d6				   .if_1
      2  f6d6		       0a		      asl
      3  f6d7		       90 20		      bcc	.else_1
      4  f6d9		       a2 85		      ldx	#BC_STA
      5  f6db		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f6de		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f6e0		       8e 26 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f6e3		       a2 85		      ldx	#BC_STA
      9  f6e5		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f6e8		       a2 0e		      ldx	#PF1
     11  f6ea		       8e 28 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f6ed		       a2 08		      ldx	#BC_PHP
     13  f6ef		       8e 29 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f6f2		       a2 26		      ldx	#VDELP1
     15  f6f4		       86 9a		      stx	[RamKernelPhpTarget + 0]
     16  f6f6		       4c 16 f7 	      jmp	.endif_1
     17  f6f9				   .else_1
     18  f6f9		       a2 08		      ldx	#BC_PHP
     19  f6fb		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f6fe		       a2 85		      ldx	#BC_STA
     21  f700		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f703		       a2 0e		      ldx	#PF1
     23  f705		       8e 27 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f708		       a6 a3		      ldx	RamKernelGemini4
     25  f70a		       8e 28 f0 	      stx	[KernelA_K_W + 0]
     26  f70d		       a2 1c		      ldx	#EMERALD_SP
     27  f70f		       8e 29 f0 	      stx	[KernelA_K_W + 1]
     28  f712		       a2 11		      ldx	#RESP1
     29  f714		       86 9a		      stx	[RamKernelPhpTarget + 0]
     30  f716				   .endif_1
     31  f716				   .if_2
     32  f716		       0a		      asl
     33  f717		       90 08		      bcc	.else_2
     34  f719		       a2 04		      ldx	#BC_NOP
     35  f71b		       8e 1f f0 	      stx	[[KernelA_F - $100] + 0]
     36  f71e		       4c 26 f7 	      jmp	.endif_2
     37  f721				   .else_2
     38  f721		       a6 ab		      ldx	BuildKernelMissile
     39  f723		       8e 1f f0 	      stx	[[KernelA_F - $100] + 0]
     40  f726				   .endif_2
     41  f726		       a6 aa		      ldx	BuildKernelVdel1
     42  f728		       8e 05 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     43  f72b		       a6 a9		      ldx	BuildKernelGrp0
     44  f72d		       8e 0b f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     45  f730		       a6 a6		      ldx	BuildKernelX
     46  f732		       86 9b		      stx	[RamKernelX + 0]
     47  f734		       a6 a7		      ldx	BuildKernelY
     48  f736		       8e 0f f0 	      stx	[[KernelA_STY - $100] + 0]
    606  f739		       4c f8 f7 	      jmp	.next
    607  f73c				   .kernel_b
    608  f73c		       a5 91		      lda	RamNibbleVar1
      0  f73e					      NIBBLE_gem_kernel_b
      1  f73e		       a6 9d		      ldx	RamKernelGemini1
      2  f740		       8e 1c f0 	      stx	[KernelB_D_W + 0]
      3  f743				   .if_1
      4  f743		       0a		      asl
      5  f744		       90 44		      bcc	.else_1
      6  f746		       a2 1c		      ldx	#EMERALD_SP
      7  f748		       86 9a		      stx	[RamKernelPhpTarget + 0]
      8  f74a		       a2 84		      ldx	#BC_STY
      9  f74c		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f74f		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f751		       8e 1f f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f754		       a2 08		      ldx	#BC_PHP
     13  f756		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f759		       a2 85		      ldx	#BC_STA
     15  f75b		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f75e		       a2 0e		      ldx	#PF1
     17  f760		       8e 22 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f763		       a6 a1		      ldx	RamKernelGemini3
     19  f765		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f768		       a2 1c		      ldx	#EMERALD_SP
     21  f76a		       8e 24 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f76d				   .if_2
     23  f76d		       0a		      asl
     24  f76e		       90 0d		      bcc	.else_2
     25  f770		       a2 38		      ldx	#$38
     26  f772		       8e 15 f0 	      stx	[[KernelB_P11_C - $100] + 0]
     27  f775		       a2 93		      ldx	#RamZeroByte
     28  f777		       8e 19 f0 	      stx	[[KernelB_B + 1 - $100] + 0]
     29  f77a		       4c 87 f7 	      jmp	.endif_2
     30  f77d				   .else_2
     31  f77d		       a2 18		      ldx	#$18
     32  f77f		       8e 15 f0 	      stx	[[KernelB_P11_C - $100] + 0]
     33  f782		       a2 94		      ldx	#RamLowerSixByte
     34  f784		       8e 19 f0 	      stx	[[KernelB_B + 1 - $100] + 0]
     35  f787				   .endif_2
     36  f787		       4c 94 f7 	      jmp	.endif_1
     37  f78a				   .else_1
     38  f78a		       a6 9f		      ldx	RamKernelGemini2
     39  f78c		       8e 1f f0 	      stx	[KernelB_F_W + 0]
     40  f78f		       a2 1c		      ldx	#EMERALD_SP
     41  f791		       8e 20 f0 	      stx	[KernelB_F_W + 1]
     42  f794				   .endif_1
     43  f794				   .if_3
     44  f794		       0a		      asl
     45  f795		       90 44		      bcc	.else_3
     46  f797		       a2 1c		      ldx	#EMERALD_SP
     47  f799		       86 9a		      stx	[RamKernelPhpTarget + 0]
     48  f79b		       a2 84		      ldx	#BC_STY
     49  f79d		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 0]
     50  f7a0		       a2 11		      ldx	#EMERALD_SP_RESET
     51  f7a2		       8e 1f f0 	      stx	[[KernelB_E_W + 0] + 1]
     52  f7a5		       a6 9f		      ldx	RamKernelGemini2
     53  f7a7		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 0]
     54  f7aa		       a2 1c		      ldx	#EMERALD_SP
     55  f7ac		       8e 21 f0 	      stx	[[KernelB_F_W + 1] + 1]
     56  f7af		       a2 85		      ldx	#BC_STA
     57  f7b1		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 0]
     58  f7b4		       a2 0e		      ldx	#PF1
     59  f7b6		       8e 23 f0 	      stx	[[KernelB_G_W + 1] + 1]
     60  f7b9		       a2 08		      ldx	#BC_PHP
     61  f7bb		       8e 24 f0 	      stx	[[KernelB_H_W + 1] + 0]
     62  f7be				   .if_4
     63  f7be		       0a		      asl
     64  f7bf		       90 0d		      bcc	.else_4
     65  f7c1		       a2 38		      ldx	#$38
     66  f7c3		       8e 15 f0 	      stx	[[KernelB_P11_C - $100] + 0]
     67  f7c6		       a2 93		      ldx	#RamZeroByte
     68  f7c8		       8e 19 f0 	      stx	[[KernelB_B + 1 - $100] + 0]
     69  f7cb		       4c d8 f7 	      jmp	.endif_4
     70  f7ce				   .else_4
     71  f7ce		       a2 18		      ldx	#$18
     72  f7d0		       8e 15 f0 	      stx	[[KernelB_P11_C - $100] + 0]
     73  f7d3		       a2 94		      ldx	#RamLowerSixByte
     74  f7d5		       8e 19 f0 	      stx	[[KernelB_B + 1 - $100] + 0]
     75  f7d8				   .endif_4
     76  f7d8		       4c e5 f7 	      jmp	.endif_3
     77  f7db				   .else_3
     78  f7db		       a6 a1		      ldx	RamKernelGemini3
     79  f7dd		       8e 23 f0 	      stx	[KernelA_H_W + 0]
     80  f7e0		       a2 1c		      ldx	#EMERALD_SP
     81  f7e2		       8e 24 f0 	      stx	[KernelA_H_W + 1]
     82  f7e5				   .endif_3
     83  f7e5		       a6 a3		      ldx	RamKernelGemini4
     84  f7e7		       8e 27 f0 	      stx	[KernelB_J_W + 0]
     85  f7ea		       a6 a9		      ldx	BuildKernelGrp0
     86  f7ec		       8e 09 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     87  f7ef		       a6 a6		      ldx	BuildKernelX
     88  f7f1		       86 9b		      stx	[RamKernelX + 0]
     89  f7f3		       a6 a7		      ldx	BuildKernelY
     90  f7f5		       8e 0e f0 	      stx	[[KernelB_STY - $100] + 0]
    610  f7f8				   .next
    611  f7f8
    612  f7f8				   VerticalBlankEnd
    613  f7f8							; Wait until the end of Vertical blank.
      0  f7f8					      TIMER_WAIT
      1  f7f8				   .waittimer
      2  f7f8		       ad 84 02 	      lda	INTIM
      3  f7fb		       d0 fb		      bne	.waittimer
      4  f7fd		       85 02		      sta	WSYNC
      0  f7ff					      ASSERT_RUNTIME	"_scan == #37"
      1  f7ff				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f7ff  && !(  _scan == #37  ) }
      2  f7ff					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    616  f7ff
    617  f7ff							; Save stack pointer
    618  f7ff		       ba		      tsx
    619  f800		       86 96		      stx	RamStackBkp
    620  f802
    621  f802							; Start rendering the kernel.
    622  f802		       4c 58 fb 	      jmp	KernelBorder
    623  f805
    624  f900		       00 00 00 00*	      align	256	; TODO why
    625  f900
    626  f900				   FrameEnd   subroutine
    627  f900		       85 02		      sta	WSYNC
    628  f902
    629  f902							; Blank all background colors.
    630  f902		       a9 00		      lda	#0
    631  f904		       85 08		      sta	COLUPF
    632  f906		       85 0f		      sta	PF2
    633  f908		       85 0e		      sta	PF1
    634  f90a		       85 1c		      sta	EMERALD_SP
    635  f90c
    636  f90c							; Guide lines (2x)
    637  f90c		       a9 02		      lda	#SIGNAL_LINE
    638  f90e		       85 09		      sta	COLUBK
    639  f910					      REPEAT	6
    640  f910		       85 02		      sta	WSYNC
    639  f910					      REPEND
    640  f912		       85 02		      sta	WSYNC
    639  f912					      REPEND
    640  f914		       85 02		      sta	WSYNC
    639  f914					      REPEND
    640  f916		       85 02		      sta	WSYNC
    639  f916					      REPEND
    640  f918		       85 02		      sta	WSYNC
    639  f918					      REPEND
    640  f91a		       85 02		      sta	WSYNC
    641  f91c					      REPEND
    642  f91c		       a9 00		      lda	#$00
    643  f91e		       85 09		      sta	COLUBK
    644  f920
    645  f920							; Restore stack pointer
    646  f920		       a6 96		      ldx	RamStackBkp
    647  f922		       9a		      txs
    648  f923
    649  f923							; Display the rest of the blank screen.
      0  f923					      TIMER_SETUP	25
      1  f923				   .lines     SET	25
      2  f923		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f925		       85 02		      sta	WSYNC
      4  f927		       8d 96 02 	      sta	TIM64T
    651  f92a		       85 02		      sta	WSYNC
      0  f92c					      TIMER_WAIT
      1  f92c				   .waittimer
      2  f92c		       ad 84 02 	      lda	INTIM
      3  f92f		       d0 fb		      bne	.waittimer
      4  f931		       85 02		      sta	WSYNC
      0  f933					      ASSERT_RUNTIME	"_scan == (#37 + #184)"
      1  f933				   .COND      SET	"_scan == (#37 + #184)"
 ASSERT: breakif { pc== $f933  && !(  _scan == (#37 + #184)  ) }
      2  f933					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    654  f933
    655  f933							; Overscan
    656  f933				   Overscan   subroutine
    657  f933		       85 01		      sta	VBLANK
      0  f935					      TIMER_SETUP	29
      1  f935				   .lines     SET	29
      2  f935		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f937		       85 02		      sta	WSYNC
      4  f939		       8d 96 02 	      sta	TIM64T
    659  f93c
    660  f93c		       20 d6 fa 	      jsr	MoveJoystick
    661  f93f		       20 0d fb 	      jsr	SpeedCalculation
    662  f942
    663  f942							; Calculate GemAnimation.
    664  f942		       a5 84		      lda	FrameCount
    665  f944		       29 0f		      and	#%1111
    666  f946		       d0 0b		      bne	.skiprotate
    667  f948		       a5 af		      lda	level_for_game + 3
    668  f94a		       6a		      ror
    669  f94b				   .rollall
      0  f94b					      _ROR32	level_for_game, level_for_game
      1  f94b		       00 ac	   VLA	      EQU	level_for_game
      2  f94b		       00 ac	   RES	      EQU	level_for_game
      3  f94b				  -	      IF	VLA != RES
      4  f94b				  -	      LDA	VLA+0
      5  f94b				  -	      ROR	A
      6  f94b				  -	      STA	RES+0
      7  f94b				  -	      LDA	VLA+1
      8  f94b				  -	      ROR	A
      9  f94b				  -	      STA	RES+1
     10  f94b				  -	      LDA	VLA+2
     11  f94b				  -	      ROR	A
     12  f94b				  -	      STA	RES+2
     13  f94b				  -	      LDA	VLA+3
     14  f94b				  -	      ROR	A
     15  f94b				  -	      STA	RES+3
     16  f94b					      ELSE
     17  f94b		       66 ac		      ROR	VLA+0
     18  f94d		       66 ad		      ROR	VLA+1
     19  f94f		       66 ae		      ROR	VLA+2
     20  f951		       66 af		      ROR	VLA+3
     21  f953					      ENDIF
    671  f953				   .skiprotate
    672  f953
      0  f953					      TIMER_WAIT
      1  f953				   .waittimer
      2  f953		       ad 84 02 	      lda	INTIM
      3  f956		       d0 fb		      bne	.waittimer
      4  f958		       85 02		      sta	WSYNC
      0  f95a					      ASSERT_RUNTIME	"_scan == (#37 + #184 + #29)"
      1  f95a				   .COND      SET	"_scan == (#37 + #184 + #29)"
 ASSERT: breakif { pc== $f95a  && !(  _scan == (#37 + #184 + #29)  ) }
      2  f95a					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    675  f95a
    676  f95a		       4c 5b f4 	      jmp	VerticalSync
    677  f95d
    678  f95d
    679  f95d
    680  fa00		       00 00 00 00*	      align	256
    681  fa00
    682  fa00					      mac	gemini_populate
    683  fa00				   .TARGET    SET	{1}
    684  fa00					      lda	RamNibbleTemp
    685  fa00					      and	#%00000011
    686  fa00					      tay
    687  fa00					      lda	GEMINI_LOOKUP,y
    688  fa00					      sta	.TARGET
    689  fa00					      endm
    690  fa00
    691  fa00					      mac	gemini_populate_missile
    692  fa00				   .TARGET    SET	{1}
    693  fa00					      lda	RamNibbleTemp
    694  fa00					      and	#%00000001
    695  fa00					      sta	.TARGET
    696  fa00					      endm
    697  fa00
    698  fa00				   gemini_populate
    699  fa00		       a6 af		      ldx	level_for_game + 3
    700  fa02		       86 90		      stx	RamNibbleTemp
      0  fa04					      GEMINI_POPULATE	DO_GEMS_B + 5
      1  fa04				   .TARGET    SET	DO_GEMS_B + 5
      2  fa04		       a5 90		      lda	RamNibbleTemp
      3  fa06		       29 03		      and	#%00000011
      4  fa08		       a8		      tay
      5  fa09		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa0c		       85 bd		      sta	.TARGET
    702  fa0e		       66 90		      ror	RamNibbleTemp
    703  fa10		       66 90		      ror	RamNibbleTemp
      0  fa12					      GEMINI_POPULATE	DO_GEMS_A + 5
      1  fa12				   .TARGET    SET	DO_GEMS_A + 5
      2  fa12		       a5 90		      lda	RamNibbleTemp
      3  fa14		       29 03		      and	#%00000011
      4  fa16		       a8		      tay
      5  fa17		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa1a		       85 b7		      sta	.TARGET
    705  fa1c		       66 90		      ror	RamNibbleTemp
    706  fa1e		       66 90		      ror	RamNibbleTemp
      0  fa20					      GEMINI_POPULATE	DO_GEMS_B + 4
      1  fa20				   .TARGET    SET	DO_GEMS_B + 4
      2  fa20		       a5 90		      lda	RamNibbleTemp
      3  fa22		       29 03		      and	#%00000011
      4  fa24		       a8		      tay
      5  fa25		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa28		       85 bc		      sta	.TARGET
    708  fa2a		       66 90		      ror	RamNibbleTemp
    709  fa2c		       66 90		      ror	RamNibbleTemp
      0  fa2e					      GEMINI_POPULATE	DO_GEMS_A + 4
      1  fa2e				   .TARGET    SET	DO_GEMS_A + 4
      2  fa2e		       a5 90		      lda	RamNibbleTemp
      3  fa30		       29 03		      and	#%00000011
      4  fa32		       a8		      tay
      5  fa33		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa36		       85 b6		      sta	.TARGET
    711  fa38		       66 90		      ror	RamNibbleTemp
    712  fa3a		       66 90		      ror	RamNibbleTemp
    713  fa3c
    714  fa3c		       a6 ae		      ldx	level_for_game + 2
    715  fa3e		       86 90		      stx	RamNibbleTemp
      0  fa40					      GEMINI_POPULATE_MISSILE	DO_MISS_B
      1  fa40				   .TARGET    SET	DO_MISS_B
      2  fa40		       a5 90		      lda	RamNibbleTemp
      3  fa42		       29 01		      and	#%00000001
      4  fa44		       85 b1		      sta	.TARGET
    717  fa46		       66 90		      ror	RamNibbleTemp
      0  fa48					      GEMINI_POPULATE	DO_GEMS_B + 3
      1  fa48				   .TARGET    SET	DO_GEMS_B + 3
      2  fa48		       a5 90		      lda	RamNibbleTemp
      3  fa4a		       29 03		      and	#%00000011
      4  fa4c		       a8		      tay
      5  fa4d		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa50		       85 bb		      sta	.TARGET
    719  fa52		       66 90		      ror	RamNibbleTemp
    720  fa54		       66 90		      ror	RamNibbleTemp
      0  fa56					      GEMINI_POPULATE	DO_GEMS_A + 3
      1  fa56				   .TARGET    SET	DO_GEMS_A + 3
      2  fa56		       a5 90		      lda	RamNibbleTemp
      3  fa58		       29 03		      and	#%00000011
      4  fa5a		       a8		      tay
      5  fa5b		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa5e		       85 b5		      sta	.TARGET
    722  fa60		       66 90		      ror	RamNibbleTemp
    723  fa62		       66 90		      ror	RamNibbleTemp
      0  fa64					      GEMINI_POPULATE	DO_GEMS_B + 2
      1  fa64				   .TARGET    SET	DO_GEMS_B + 2
      2  fa64		       a5 90		      lda	RamNibbleTemp
      3  fa66		       29 03		      and	#%00000011
      4  fa68		       a8		      tay
      5  fa69		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa6c		       85 ba		      sta	.TARGET
    725  fa6e		       66 90		      ror	RamNibbleTemp
    726  fa70		       66 90		      ror	RamNibbleTemp
    727  fa72
    728  fa72				   .HELLO
    729  fa72		       66 90		      ror	RamNibbleTemp
    730  fa74		       a6 ad		      ldx	level_for_game + 1
    731  fa76		       86 90		      stx	RamNibbleTemp
    732  fa78		       26 90		      rol	RamNibbleTemp
      0  fa7a					      GEMINI_POPULATE	DO_GEMS_A + 2
      1  fa7a				   .TARGET    SET	DO_GEMS_A + 2
      2  fa7a		       a5 90		      lda	RamNibbleTemp
      3  fa7c		       29 03		      and	#%00000011
      4  fa7e		       a8		      tay
      5  fa7f		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa82		       85 b4		      sta	.TARGET
    734  fa84
    735  fa84		       a6 ad		      ldx	level_for_game + 1
    736  fa86		       86 90		      stx	RamNibbleTemp
    737  fa88		       66 90		      ror	RamNibbleTemp
      0  fa8a					      GEMINI_POPULATE_MISSILE	DO_MISS_A
      1  fa8a				   .TARGET    SET	DO_MISS_A
      2  fa8a		       a5 90		      lda	RamNibbleTemp
      3  fa8c		       29 01		      and	#%00000001
      4  fa8e		       85 b0		      sta	.TARGET
    739  fa90		       66 90		      ror	RamNibbleTemp
      0  fa92					      GEMINI_POPULATE	DO_GEMS_B + 1
      1  fa92				   .TARGET    SET	DO_GEMS_B + 1
      2  fa92		       a5 90		      lda	RamNibbleTemp
      3  fa94		       29 03		      and	#%00000011
      4  fa96		       a8		      tay
      5  fa97		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fa9a		       85 b9		      sta	.TARGET
    741  fa9c		       66 90		      ror	RamNibbleTemp
    742  fa9e		       66 90		      ror	RamNibbleTemp
      0  faa0					      GEMINI_POPULATE	DO_GEMS_A + 1
      1  faa0				   .TARGET    SET	DO_GEMS_A + 1
      2  faa0		       a5 90		      lda	RamNibbleTemp
      3  faa2		       29 03		      and	#%00000011
      4  faa4		       a8		      tay
      5  faa5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  faa8		       85 b3		      sta	.TARGET
    744  faaa		       66 90		      ror	RamNibbleTemp
    745  faac		       66 90		      ror	RamNibbleTemp
      0  faae					      GEMINI_POPULATE	DO_GEMS_B + 0
      1  faae				   .TARGET    SET	DO_GEMS_B + 0
      2  faae		       a5 90		      lda	RamNibbleTemp
      3  fab0		       29 03		      and	#%00000011
      4  fab2		       a8		      tay
      5  fab3		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fab6		       85 b8		      sta	.TARGET
    747  fab8		       66 90		      ror	RamNibbleTemp
    748  faba		       66 90		      ror	RamNibbleTemp
    749  fabc
    750  fabc		       a6 ac		      ldx	level_for_game + 0
    751  fabe		       86 90		      stx	RamNibbleTemp
      0  fac0					      GEMINI_POPULATE	DO_GEMS_A + 0
      1  fac0				   .TARGET    SET	DO_GEMS_A + 0
      2  fac0		       a5 90		      lda	RamNibbleTemp
      3  fac2		       29 03		      and	#%00000011
      4  fac4		       a8		      tay
      5  fac5		       b9 d0 fa 	      lda	GEMINI_LOOKUP,y
      6  fac8		       85 b2		      sta	.TARGET
    753  faca		       66 90		      ror	RamNibbleTemp
    754  facc		       66 90		      ror	RamNibbleTemp
    755  face
    756  face		       60		      rts
    757  facf				   gemini_populate_end
    758  facf
    759  fad0		       00		      align	16
    760  fad0
    761  fad0				   GEMINI_LOOKUP
    762  fad0		       00 60 06 66	      .byte.b	G00, G01, G10, G11
    763  fad4
    764  fad4				   SHARD_LUT_RF1
    765  fad4		       00		      .byte.b	#0
    766  fad5				   SHARD_LUT_VD1
    767  fad5		       00		      .byte.b	#0
    768  fad6
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  fad6					      include	"game_input.s"
      1  fad6							; Handles input checking. Called from overscan.
      2  fad6
      3  fad6							; Read joystick movement and apply to object 0
      4  fad6				   MoveJoystick
      5  fad6							; Move vertically
      6  fad6							; (up and down are actually reversed since ypos starts at bottom)
      7  fad6							;     ldx YPos
      8  fad6		       a9 10		      lda	#%00010000	;Up?
      9  fad8		       2c 80 02 	      bit	SWCHA
     10  fadb		       d0 0d		      bne	SkipMoveUp
     11  fadd
     12  fadd		       18		      clc
     13  fade		       a5 89		      lda	Speed2
     14  fae0		       69 0c		      adc	#12
     15  fae2		       85 89		      sta	Speed2
     16  fae4		       a5 88		      lda	Speed1
     17  fae6		       69 00		      adc	#00
     18  fae8		       85 88		      sta	Speed1
     19  faea
     20  faea				   SkipMoveUp
     21  faea		       a6 87		      ldx	XPos
     22  faec
     23  faec							; Only check left/right on odd frames;
     24  faec							; TODO make this just a fractional speed
     25  faec							; rather than dropping frames
     26  faec		       a9 01		      lda	#01
     27  faee		       25 84		      and	FrameCount
     28  faf0		       d0 18		      bne	SkipMoveRight
     29  faf2
     30  faf2
     31  faf2							; Move horizontally
     32  faf2		       a9 40		      lda	#%01000000	;Left?
     33  faf4		       2c 80 02 	      bit	SWCHA
     34  faf7		       d0 05		      bne	SkipMoveLeft
     35  faf9		       e0 1d		      cpx	#29
     36  fafb		       90 01		      bcc	SkipMoveLeft
     37  fafd		       ca		      dex
     38  fafe
     39  fafe							; Reflect
     40  fafe							;     lda #$ff
     41  fafe							;     sta REFP0
     42  fafe				   SkipMoveLeft
     43  fafe		       a9 80		      lda	#%10000000	;Right?
     44  fb00		       2c 80 02 	      bit	SWCHA
     45  fb03		       d0 05		      bne	SkipMoveRight
     46  fb05		       e0 80		      cpx	#128
     47  fb07		       b0 01		      bcs	SkipMoveRight
     48  fb09		       e8		      inx
     49  fb0a
     50  fb0a							; Reflect
     51  fb0a							;     lda #$0
     52  fb0a							;     sta REFP0
     53  fb0a				   SkipMoveRight
     54  fb0a		       86 87		      stx	XPos
     55  fb0c		       60		      rts
     56  fb0d
     57  fb0d
     58  fb0d				   SpeedCalculation
     59  fb0d		       38		      sec
     60  fb0e		       a5 89		      lda	Speed2
     61  fb10		       e9 07		      sbc	#7
     62  fb12		       85 89		      sta	Speed2
     63  fb14		       a5 88		      lda	Speed1
     64  fb16		       e9 00		      sbc	#0
     65  fb18		       85 88		      sta	Speed1
     66  fb1a
     67  fb1a		       18		      clc
     68  fb1b		       a5 8b		      lda	YPos2
     69  fb1d		       65 89		      adc	Speed2
     70  fb1f		       85 8b		      sta	YPos2
     71  fb21		       a5 8a		      lda	YPos
     72  fb23		       65 88		      adc	Speed1
     73  fb25		       85 8a		      sta	YPos
     74  fb27
     75  fb27		       c9 48		      cmp	#FLOOR_OFFSET
     76  fb29		       b0 0a		      bcs	NewThing2
     77  fb2b
     78  fb2b							; Reset to floor
     79  fb2b		       a9 48		      lda	#FLOOR_OFFSET
     80  fb2d		       85 8a		      sta	YPos
     81  fb2f		       a9 00		      lda	#0
     82  fb31		       85 88		      sta	Speed1
     83  fb33		       85 89		      sta	Speed2
     84  fb35				   NewThing2
     85  fb35
     86  fb35		       c9 c0		      cmp	#CEILING_OFFSET
     87  fb37		       90 0a		      bcc	.next
     88  fb39
     89  fb39							; Reset to ceiling
     90  fb39		       a9 c0		      lda	#CEILING_OFFSET
     91  fb3b		       85 8a		      sta	YPos
     92  fb3d		       a9 00		      lda	#0
     93  fb3f		       85 88		      sta	Speed1
     94  fb41		       85 89		      sta	Speed2
     95  fb43				   .next
     96  fb43		       60		      rts
     97  fb44
     98  fb44
     99  fb44
    100  fb44							; Subroutine
    101  fb44				   SetHorizPos
    102  fb44		       85 02		      sta	WSYNC	; start a new line
    103  fb46		       24 00		      bit	0	; waste 3 cycles
    104  fb48		       38		      sec		; set carry flag
    105  fb49				   DivideLoop
    106  fb49		       e9 0f		      sbc	#15	; subtract 15
    107  fb4b		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  fb4d		       49 07		      eor	#7	; calculate fine offset
    109  fb4f		       0a		      asl
    110  fb50		       0a		      asl
    111  fb51		       0a		      asl
    112  fb52		       0a		      asl
    113  fb53		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  fb55		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  fb57		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  fb58					      include	"kernel_border.s"
      1  fb58							; Visible Kernel
      2  fb58
      3  fb58				   KernelBorder subroutine
      4  fb58		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  fb5a
      6  fb5a							; First HMOVE
      7  fb5a		       85 2a		      sta	HMOVE
      8  fb5c
      9  fb5c							; Border top
     10  fb5c		       a9 00		      lda	#0
     11  fb5e		       85 08		      sta	COLUPF
     12  fb60		       85 0e		      sta	PF1
     13  fb62		       85 0f		      sta	PF2
     14  fb64		       a9 02		      lda	#SIGNAL_LINE
     15  fb66		       85 09		      sta	COLUBK
     16  fb68
     17  fb68					      REPEAT	6
     18  fb68		       85 02		      sta	WSYNC
     17  fb68					      REPEND
     18  fb6a		       85 02		      sta	WSYNC
     17  fb6a					      REPEND
     18  fb6c		       85 02		      sta	WSYNC
     17  fb6c					      REPEND
     18  fb6e		       85 02		      sta	WSYNC
     17  fb6e					      REPEND
     18  fb70		       85 02		      sta	WSYNC
     17  fb70					      REPEND
     18  fb72		       85 02		      sta	WSYNC
     19  fb74					      REPEND
     20  fb74
     21  fb74		       a9 00		      lda	#0
     22  fb76		       85 09		      sta	COLUBK
     23  fb78		       85 02		      sta	WSYNC
     24  fb7a
     25  fb7a							; Start top border
     26  fb7a				   border_top
     27  fb7a							; Make the playfield solid.
     28  fb7a		       a9 3f		      lda	#%00111111
     29  fb7c		       85 0e		      sta	PF1
     30  fb7e		       a9 ff		      lda	#%11111111
     31  fb80		       85 0f		      sta	PF2
     32  fb82
     33  fb82		       a9 42		      lda	#COL_BG
     34  fb84		       a0 00		      ldy	#0
     35  fb86
     36  fb86							; X_XXXX_XX
     37  fb86							; Commented lines removed to save on space.
     38  fb86		       85 08		      sta	COLUPF
     39  fb88		       85 02		      sta	WSYNC
     40  fb8a		       84 08		      sty	COLUPF
     41  fb8c		       85 02		      sta	WSYNC
     42  fb8e		       85 08		      sta	COLUPF
     43  fb90		       85 02		      sta	WSYNC
     44  fb92							; sta COLUPF
     45  fb92		       85 02		      sta	WSYNC
     46  fb94							; sta COLUPF
     47  fb94		       85 02		      sta	WSYNC
     48  fb96		       84 08		      sty	COLUPF
     49  fb98		       85 02		      sta	WSYNC
     50  fb9a		       85 08		      sta	COLUPF
     51  fb9c
     52  fb9c		       85 02		      sta	WSYNC
     53  fb9e							; sta COLUPF
     54  fb9e
     55  fb9e				   PlayArea
     56  fb9e							; PF is now the playing area
      0  fb9e					      ASSERT_RUNTIME	"_scycles == #0"
      1  fb9e				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fb9e  && !(  _scycles == #0  ) }
      2  fb9e					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fb9e					      sleep	61
      1  fb9e				   .CYCLES    SET	61
      2  fb9e
      3  fb9e				  -	      IF	.CYCLES < 2
      4  fb9e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fb9e				  -	      ERR
      6  fb9e					      ENDIF
      7  fb9e
      8  fb9e					      IF	.CYCLES & 1
      9  fb9e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fb9e		       04 00		      nop	0
     11  fba0				  -	      ELSE
     12  fba0				  -	      bit	VSYNC
     13  fba0					      ENDIF
     14  fba0				   .CYCLES    SET	.CYCLES - 3
     15  fba0					      ENDIF
     16  fba0
     17  fba0					      REPEAT	.CYCLES / 2
     18  fba0		       ea		      nop
     17  fba0					      REPEND
     18  fba1		       ea		      nop
     17  fba1					      REPEND
     18  fba2		       ea		      nop
     17  fba2					      REPEND
     18  fba3		       ea		      nop
     17  fba3					      REPEND
     18  fba4		       ea		      nop
     17  fba4					      REPEND
     18  fba5		       ea		      nop
     17  fba5					      REPEND
     18  fba6		       ea		      nop
     17  fba6					      REPEND
     18  fba7		       ea		      nop
     17  fba7					      REPEND
     18  fba8		       ea		      nop
     17  fba8					      REPEND
     18  fba9		       ea		      nop
     17  fba9					      REPEND
     18  fbaa		       ea		      nop
     17  fbaa					      REPEND
     18  fbab		       ea		      nop
     17  fbab					      REPEND
     18  fbac		       ea		      nop
     17  fbac					      REPEND
     18  fbad		       ea		      nop
     17  fbad					      REPEND
     18  fbae		       ea		      nop
     17  fbae					      REPEND
     18  fbaf		       ea		      nop
     17  fbaf					      REPEND
     18  fbb0		       ea		      nop
     17  fbb0					      REPEND
     18  fbb1		       ea		      nop
     17  fbb1					      REPEND
     18  fbb2		       ea		      nop
     17  fbb2					      REPEND
     18  fbb3		       ea		      nop
     17  fbb3					      REPEND
     18  fbb4		       ea		      nop
     17  fbb4					      REPEND
     18  fbb5		       ea		      nop
     17  fbb5					      REPEND
     18  fbb6		       ea		      nop
     17  fbb6					      REPEND
     18  fbb7		       ea		      nop
     17  fbb7					      REPEND
     18  fbb8		       ea		      nop
     17  fbb8					      REPEND
     18  fbb9		       ea		      nop
     17  fbb9					      REPEND
     18  fbba		       ea		      nop
     17  fbba					      REPEND
     18  fbbb		       ea		      nop
     17  fbbb					      REPEND
     18  fbbc		       ea		      nop
     19  fbbd					      REPEND
     59  fbbd		       a9 00		      lda	#%00000000
     60  fbbf		       85 0d		      sta	PF0
     61  fbc1		       a9 20		      lda	#%00100000
     62  fbc3		       85 0e		      sta	PF1
     63  fbc5		       a9 00		      lda	#%00000000
     64  fbc7		       85 0f		      sta	PF2
      0  fbc9					      ASSERT_RUNTIME	"_scycles == #0"
      1  fbc9				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fbc9  && !(  _scycles == #0  ) }
      2  fbc9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  fbc9					      sleep	7
      1  fbc9				   .CYCLES    SET	7
      2  fbc9
      3  fbc9				  -	      IF	.CYCLES < 2
      4  fbc9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fbc9				  -	      ERR
      6  fbc9					      ENDIF
      7  fbc9
      8  fbc9					      IF	.CYCLES & 1
      9  fbc9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fbc9		       04 00		      nop	0
     11  fbcb				  -	      ELSE
     12  fbcb				  -	      bit	VSYNC
     13  fbcb					      ENDIF
     14  fbcb				   .CYCLES    SET	.CYCLES - 3
     15  fbcb					      ENDIF
     16  fbcb
     17  fbcb					      REPEAT	.CYCLES / 2
     18  fbcb		       ea		      nop
     17  fbcb					      REPEND
     18  fbcc		       ea		      nop
     19  fbcd					      REPEND
     67  fbcd		       4c ff fb 	      jmp	row_start
     68  fbd0							; enter row on cycle 10.
     69  fbd0
     70  fbd0							; reset the background for bottom of playfield
     71  fbd0				   border_bottom
     72  fbd0							;sta WSYNC
     73  fbd0
     74  fbd0							; Form the bottom of the level frame.
     75  fbd0		       a9 3f		      lda	#%00111111
     76  fbd2		       85 0e		      sta	PF1
     77  fbd4		       a9 ff		      lda	#%11111111
     78  fbd6		       85 0f		      sta	PF2
     79  fbd8
     80  fbd8							; Clear all sprites.
     81  fbd8		       a9 00		      lda	#0
     82  fbda		       85 1c		      sta	EMERALD_SP
     83  fbdc		       85 1b		      sta	JET_SP
     84  fbde		       85 1e		      sta	EMERALD_MI_ENABLE
     85  fbe0
     86  fbe0		       a9 42		      lda	#COL_BG
     87  fbe2		       a0 00		      ldy	#0
     88  fbe4		       85 02		      sta	WSYNC
     89  fbe6
     90  fbe6		       84 08		      sty	COLUPF
     91  fbe8		       85 02		      sta	WSYNC
     92  fbea
     93  fbea		       85 08		      sta	COLUPF
     94  fbec		       85 02		      sta	WSYNC
     95  fbee
     96  fbee		       85 02		      sta	WSYNC
     97  fbf0
     98  fbf0		       85 02		      sta	WSYNC
     99  fbf2
    100  fbf2		       84 08		      sty	COLUPF
    101  fbf4		       85 02		      sta	WSYNC
    102  fbf6
    103  fbf6		       85 08		      sta	COLUPF
    104  fbf8		       85 02		      sta	WSYNC
    105  fbfa		       85 02		      sta	WSYNC
    106  fbfc		       4c 00 f9 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  fbff					      include	"kernel_row.s"
      1  fbff							; Frame Start
      2  fbff
      3  fbff							; Macros for calculating sprite values (GRPx).
      4  fbff
      5  fbff							; mac jet_spritedata_calc
      6  fbff							;
      7  fbff							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
      8  fbff							; GRP0.
      9  fbff					      mac	jet_spritedata_calc
     10  fbff					      dec	RamRowJetpackIndex
     11  fbff					      ldy	RamRowJetpackIndex
     12  fbff					      ldx	Frame0,Y
     13  fbff					      stx	JET_SP
     14  fbff					      endm
     15  fbff
     16  fbff				   row_start
     17  fbff
     18  fbff							; [scanline 1]
     19  fbff				   row_1
     20  fbff							; Enter after scanline starts on row "9" and wraps
      0  fbff					      ASSERT_RUNTIME	"_scycles == #10"
      1  fbff				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $fbff  && !(  _scycles == #10  ) }
      2  fbff					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     22  fbff
     23  fbff							; Load sprite details
     24  fbff		       a9 0f		      lda	[#SPRITE_HEIGHT + #7]
     25  fc01		       c5 86		      cmp	SpriteEnd	; 5c
     26  fc03		       a9 00		      lda	#0	; 2c
     27  fc05							; constant 6c: if carry set, load SpriteEnd into y
     28  fc05		       b0 01		      .byte.b	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     29  fc07		       0c		      .byte.b	$0c	; 4c / 0c		: bit (skip next two bytes)
     30  fc08		       a5 86		      lda	SpriteEnd
     31  fc0a		       69 08		      adc	#8
     32  fc0c		       85 97		      sta	RamRowJetpackIndex
     33  fc0e
     34  fc0e							; Load sprite
     35  fc0e		       c6 97		      dec	RamRowJetpackIndex
     36  fc10		       a4 97		      ldy	RamRowJetpackIndex
     37  fc12		       be 00 fe 	      ldx	Frame0,Y
     38  fc15		       86 1b		      stx	JET_SP
     39  fc17
     40  fc17							; TODO assert cycle is not in visible range!
     41  fc17
     42  fc17							; [[[Nibble VM.]]]
     43  fc17		       85 02		      sta	WSYNC
     44  fc19
     45  fc19							; sleep 46
     46  fc19
      0  fc19					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc19				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc19  && !(  _scycles == #0  ) }
      2  fc19					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     48  fc19
     49  fc19							; [scanline 2]
     50  fc19				   row_2
      0  fc19					      jet_spritedata_calc
      1  fc19		       c6 97		      dec	RamRowJetpackIndex
      2  fc1b		       a4 97		      ldy	RamRowJetpackIndex
      3  fc1d		       be 00 fe 	      ldx	Frame0,Y
      4  fc20		       86 1b		      stx	JET_SP
      0  fc22					      sleep	5
      1  fc22				   .CYCLES    SET	5
      2  fc22
      3  fc22				  -	      IF	.CYCLES < 2
      4  fc22				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc22				  -	      ERR
      6  fc22					      ENDIF
      7  fc22
      8  fc22					      IF	.CYCLES & 1
      9  fc22					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc22		       04 00		      nop	0
     11  fc24				  -	      ELSE
     12  fc24				  -	      bit	VSYNC
     13  fc24					      ENDIF
     14  fc24				   .CYCLES    SET	.CYCLES - 3
     15  fc24					      ENDIF
     16  fc24
     17  fc24					      REPEAT	.CYCLES / 2
     18  fc24		       ea		      nop
     19  fc25					      REPEND
     53  fc25
     54  fc25							; Black out playfield
     55  fc25							; TODO This should be done with playfield pixels, not color.
     56  fc25		       a9 00		      lda	#0
     57  fc27		       85 08		      sta	COLUPF
     58  fc29
     59  fc29							; [[[Nibble VM.]]]
      0  fc29					      sleep	27
      1  fc29				   .CYCLES    SET	27
      2  fc29
      3  fc29				  -	      IF	.CYCLES < 2
      4  fc29				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc29				  -	      ERR
      6  fc29					      ENDIF
      7  fc29
      8  fc29					      IF	.CYCLES & 1
      9  fc29					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc29		       04 00		      nop	0
     11  fc2b				  -	      ELSE
     12  fc2b				  -	      bit	VSYNC
     13  fc2b					      ENDIF
     14  fc2b				   .CYCLES    SET	.CYCLES - 3
     15  fc2b					      ENDIF
     16  fc2b
     17  fc2b					      REPEAT	.CYCLES / 2
     18  fc2b		       ea		      nop
     17  fc2b					      REPEND
     18  fc2c		       ea		      nop
     17  fc2c					      REPEND
     18  fc2d		       ea		      nop
     17  fc2d					      REPEND
     18  fc2e		       ea		      nop
     17  fc2e					      REPEND
     18  fc2f		       ea		      nop
     17  fc2f					      REPEND
     18  fc30		       ea		      nop
     17  fc30					      REPEND
     18  fc31		       ea		      nop
     17  fc31					      REPEND
     18  fc32		       ea		      nop
     17  fc32					      REPEND
     18  fc33		       ea		      nop
     17  fc33					      REPEND
     18  fc34		       ea		      nop
     17  fc34					      REPEND
     18  fc35		       ea		      nop
     17  fc35					      REPEND
     18  fc36		       ea		      nop
     19  fc37					      REPEND
     61  fc37
     62  fc37							; Load PF1 value
     63  fc37		       a9 a0		      lda	#%10100000
     64  fc39		       85 98		      sta	RamPF1Value
     65  fc3b
     66  fc3b		       a9 04		      lda	#4
     67  fc3d		       8d 96 02 	      sta	TIM64T
     68  fc40
     69  fc40							; Enable playfield at end of scanline
     70  fc40		       a9 42		      lda	#COL_BG
     71  fc42		       85 08		      sta	COLUPF
     72  fc44
     73  fc44							; Set stack pointer for PHP use from RamKernelPhpTarget.
     74  fc44		       a6 9a		      ldx	RamKernelPhpTarget
     75  fc46		       9a		      txs
     76  fc47
     77  fc47							; Set overflow flag
     78  fc47		       24 95		      bit	RamFFByte
     79  fc49
      0  fc49					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc49				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc49  && !(  _scycles == #0  ) }
      2  fc49					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     81  fc49
     82  fc49							; [scanline 3]
     83  fc49				   row_3
     84  fc49							; Current row and next two rows.
     85  fc49		       a4 97		      ldy	RamRowJetpackIndex
     86  fc4b		       88		      dey
     87  fc4c		       be 00 fe 	      ldx	Frame0,Y
     88  fc4f		       86 1b		      stx	JET_SP
     89  fc51		       88		      dey
     90  fc52		       be 00 fe 	      ldx	Frame0,Y
     91  fc55		       86 99		      stx	RamKernelGRP0
     92  fc57		       88		      dey
     93  fc58		       be 00 fe 	      ldx	Frame0,Y
     94  fc5b		       8e 03 f0 	      stx	[KernelA_GRP0 - $100]
     95  fc5e		       84 97		      sty	RamRowJetpackIndex
     96  fc60
     97  fc60							; Idle.
      0  fc60					      sleep	31
      1  fc60				   .CYCLES    SET	31
      2  fc60
      3  fc60				  -	      IF	.CYCLES < 2
      4  fc60				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc60				  -	      ERR
      6  fc60					      ENDIF
      7  fc60
      8  fc60					      IF	.CYCLES & 1
      9  fc60					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc60		       04 00		      nop	0
     11  fc62				  -	      ELSE
     12  fc62				  -	      bit	VSYNC
     13  fc62					      ENDIF
     14  fc62				   .CYCLES    SET	.CYCLES - 3
     15  fc62					      ENDIF
     16  fc62
     17  fc62					      REPEAT	.CYCLES / 2
     18  fc62		       ea		      nop
     17  fc62					      REPEND
     18  fc63		       ea		      nop
     17  fc63					      REPEND
     18  fc64		       ea		      nop
     17  fc64					      REPEND
     18  fc65		       ea		      nop
     17  fc65					      REPEND
     18  fc66		       ea		      nop
     17  fc66					      REPEND
     18  fc67		       ea		      nop
     17  fc67					      REPEND
     18  fc68		       ea		      nop
     17  fc68					      REPEND
     18  fc69		       ea		      nop
     17  fc69					      REPEND
     18  fc6a		       ea		      nop
     17  fc6a					      REPEND
     18  fc6b		       ea		      nop
     17  fc6b					      REPEND
     18  fc6c		       ea		      nop
     17  fc6c					      REPEND
     18  fc6d		       ea		      nop
     17  fc6d					      REPEND
     18  fc6e		       ea		      nop
     17  fc6e					      REPEND
     18  fc6f		       ea		      nop
     19  fc70					      REPEND
     99  fc70
    100  fc70							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  fc70		       a6 9b		      ldx	RamKernelX
    102  fc72		       a5 99		      lda	RamKernelGRP0	; Load sprite 2 into A
    103  fc74		       38		      sec
    104  fc75
      0  fc75					      ASSERT_RUNTIME	"_scycles == #73"
      1  fc75				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $fc75  && !(  _scycles == #73  ) }
      2  fc75					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    106  fc75							; [scanline 4]
    107  fc75							; [scanline 5]
    108  fc75		       4c 04 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    109  fc78
    110  fc78							; [scanline 6]
    111  fc78
    112  fc78							; Try to avoid page crossing in jet_spritedata_calc
    113  fc78							; TODO enforce this with ASSERT_RUNTIME instead?
    114  fc80		       00 00 00 00*	      align	16
    115  fc80
    116  fc80				   row_after_kernel
    117  fc80				   row_6
      0  fc80					      ASSERT_RUNTIME	"_scycles == #0"
      1  fc80				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $fc80  && !(  _scycles == #0  ) }
      2  fc80					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    119  fc80
    120  fc80							; Cleanup from the kernel.
    121  fc80		       a9 00		      lda	#0
    122  fc82		       85 1e		      sta	EMERALD_MI_ENABLE
    123  fc84		       85 1c		      sta	EMERALD_SP
    124  fc86		       85 08		      sta	COLUPF
    125  fc88		       85 26		      sta	VDELP1
    126  fc8a
      0  fc8a					      jet_spritedata_calc
      1  fc8a		       c6 97		      dec	RamRowJetpackIndex
      2  fc8c		       a4 97		      ldy	RamRowJetpackIndex
      3  fc8e		       be 00 fe 	      ldx	Frame0,Y
      4  fc91		       86 1b		      stx	JET_SP
      0  fc93					      sleep	5
      1  fc93				   .CYCLES    SET	5
      2  fc93
      3  fc93				  -	      IF	.CYCLES < 2
      4  fc93				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fc93				  -	      ERR
      6  fc93					      ENDIF
      7  fc93
      8  fc93					      IF	.CYCLES & 1
      9  fc93					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fc93		       04 00		      nop	0
     11  fc95				  -	      ELSE
     12  fc95				  -	      bit	VSYNC
     13  fc95					      ENDIF
     14  fc95				   .CYCLES    SET	.CYCLES - 3
     15  fc95					      ENDIF
     16  fc95
     17  fc95					      REPEAT	.CYCLES / 2
     18  fc95		       ea		      nop
     19  fc96					      REPEND
    129  fc96
    130  fc96							; Idle.
    131  fc96		       85 02		      sta	WSYNC
    132  fc98
    133  fc98							; [scanline 7]
    134  fc98				   row_7
      0  fc98					      jet_spritedata_calc
      1  fc98		       c6 97		      dec	RamRowJetpackIndex
      2  fc9a		       a4 97		      ldy	RamRowJetpackIndex
      3  fc9c		       be 00 fe 	      ldx	Frame0,Y
      4  fc9f		       86 1b		      stx	JET_SP
      0  fca1					      sleep	5
      1  fca1				   .CYCLES    SET	5
      2  fca1
      3  fca1				  -	      IF	.CYCLES < 2
      4  fca1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fca1				  -	      ERR
      6  fca1					      ENDIF
      7  fca1
      8  fca1					      IF	.CYCLES & 1
      9  fca1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fca1		       04 00		      nop	0
     11  fca3				  -	      ELSE
     12  fca3				  -	      bit	VSYNC
     13  fca3					      ENDIF
     14  fca3				   .CYCLES    SET	.CYCLES - 3
     15  fca3					      ENDIF
     16  fca3
     17  fca3					      REPEAT	.CYCLES / 2
     18  fca3		       ea		      nop
     19  fca4					      REPEND
      0  fca4					      ASSERT_RUNTIME	"_scycles == #20"
      1  fca4				   .COND      SET	"_scycles == #20"
 ASSERT: breakif { pc== $fca4  && !(  _scycles == #20  ) }
      2  fca4					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    138  fca4
    139  fca4		       a9 42		      lda	#COL_BG
    140  fca6		       85 08		      sta	COLUPF
    141  fca8
    142  fca8							; FRAMESWITCH
    143  fca8		       a9 01		      lda	#01
    144  fcaa		       25 84		      and	FrameCount
    145  fcac		       d0 11		      bne	loadframe2
    146  fcae
    147  fcae							; Perform gem loading for Kernel A.
    148  fcae
    149  fcae				   loadframe1
      0  fcae					      ASSERT_RUNTIME	"_scycles == #32"
      1  fcae				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $fcae  && !(  _scycles == #32  ) }
      2  fcae					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    151  fcae
    152  fcae							; Emerald byte setting 1A
    153  fcae							; ldx #0
    154  fcae							; lda KERNEL_STORAGE_R,X
    155  fcae							; sta GEM_00_W
    156  fcae							; inx
    157  fcae							; lda KERNEL_STORAGE_R,X
    158  fcae							; sta GEM_04_W
    159  fcae							; inx
    160  fcae							; lda KERNEL_STORAGE_R,X
    161  fcae							; sta GEM_09_W
    162  fcae							; inx
    163  fcae
    164  fcae		       85 02		      sta	WSYNC
    165  fcb0
    166  fcb0							; [scanline 8]
      0  fcb0					      jet_spritedata_calc
      1  fcb0		       c6 97		      dec	RamRowJetpackIndex
      2  fcb2		       a4 97		      ldy	RamRowJetpackIndex
      3  fcb4		       be 00 fe 	      ldx	Frame0,Y
      4  fcb7		       86 1b		      stx	JET_SP
      0  fcb9					      sleep	5
      1  fcb9				   .CYCLES    SET	5
      2  fcb9
      3  fcb9				  -	      IF	.CYCLES < 2
      4  fcb9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcb9				  -	      ERR
      6  fcb9					      ENDIF
      7  fcb9
      8  fcb9					      IF	.CYCLES & 1
      9  fcb9					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcb9		       04 00		      nop	0
     11  fcbb				  -	      ELSE
     12  fcbb				  -	      bit	VSYNC
     13  fcbb					      ENDIF
     14  fcbb				   .CYCLES    SET	.CYCLES - 3
     15  fcbb					      ENDIF
     16  fcbb
     17  fcbb					      REPEAT	.CYCLES / 2
     18  fcbb		       ea		      nop
     19  fcbc					      REPEND
    169  fcbc
    170  fcbc							; Emerald byte setting 1B
    171  fcbc							; lda KERNEL_STORAGE_R,X
    172  fcbc							; sta GEM_13_W
    173  fcbc							; inx
    174  fcbc							; lda KERNEL_STORAGE_R,X
    175  fcbc							; sta GEM_17_W
    176  fcbc							; inx
    177  fcbc							; lda KERNEL_STORAGE_R,X
    178  fcbc							; sta GEM_18_W
    179  fcbc							; inx
    180  fcbc							; lda KERNEL_STORAGE_R,X
    181  fcbc							; sta GEM_22_W
    182  fcbc
    183  fcbc		       4c d0 fc 	      jmp	row_8_end
    184  fcbf
    185  fcbf							; Perform gem loading for Kernel B.
    186  fcbf
    187  fcbf				   loadframe2
      0  fcbf					      ASSERT_RUNTIME	"_scycles == #33"
      1  fcbf				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $fcbf  && !(  _scycles == #33  ) }
      2  fcbf					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    189  fcbf
    190  fcbf							; Emerald byte setting 2A
    191  fcbf							; ldx #[storage_02 - storage]
    192  fcbf							; lda KERNEL_STORAGE_R,X
    193  fcbf							; sta GEM_02_W
    194  fcbf							; inx
    195  fcbf							; lda KERNEL_STORAGE_R,X
    196  fcbf							; sta GEM_06_W
    197  fcbf							; inx
    198  fcbf							; lda KERNEL_STORAGE_R,X
    199  fcbf							; sta GEM_08_W
    200  fcbf							; inx
    201  fcbf
    202  fcbf		       85 02		      sta	WSYNC
    203  fcc1
    204  fcc1							; [scanline 8]
    205  fcc1				   row_8
      0  fcc1					      jet_spritedata_calc
      1  fcc1		       c6 97		      dec	RamRowJetpackIndex
      2  fcc3		       a4 97		      ldy	RamRowJetpackIndex
      3  fcc5		       be 00 fe 	      ldx	Frame0,Y
      4  fcc8		       86 1b		      stx	JET_SP
      0  fcca					      sleep	5
      1  fcca				   .CYCLES    SET	5
      2  fcca
      3  fcca				  -	      IF	.CYCLES < 2
      4  fcca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fcca				  -	      ERR
      6  fcca					      ENDIF
      7  fcca
      8  fcca					      IF	.CYCLES & 1
      9  fcca					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fcca		       04 00		      nop	0
     11  fccc				  -	      ELSE
     12  fccc				  -	      bit	VSYNC
     13  fccc					      ENDIF
     14  fccc				   .CYCLES    SET	.CYCLES - 3
     15  fccc					      ENDIF
     16  fccc
     17  fccc					      REPEAT	.CYCLES / 2
     18  fccc		       ea		      nop
     19  fccd					      REPEND
    208  fccd
    209  fccd							; Emerald byte setting 2B
    210  fccd							; lda KERNEL_STORAGE_R,X
    211  fccd							; sta GEM_11_W
    212  fccd							; inx
    213  fccd							; lda KERNEL_STORAGE_R,X
    214  fccd							; sta GEM_15_W
    215  fccd							; inx
    216  fccd							; lda KERNEL_STORAGE_R,X
    217  fccd							; sta GEM_20_W
    218  fccd							; inx
    219  fccd							; lda KERNEL_STORAGE_R,X
    220  fccd							; sta GEM_24_W
    221  fccd
    222  fccd		       4c d0 fc 	      jmp	row_8_end
    223  fcd0
    224  fcd0							; Common row 8 return.
    225  fcd0
    226  fcd0				   row_8_end
    227  fcd0							; Decrease SpriteEnd
    228  fcd0		       38		      sec
    229  fcd1		       a5 86		      lda	SpriteEnd
    230  fcd3		       e9 08		      sbc	#8
    231  fcd5		       85 86		      sta	SpriteEnd
    232  fcd7
    233  fcd7							; Idle.
    234  fcd7		       85 02		      sta	WSYNC
    235  fcd9
    236  fcd9							; [scanline 8]
    237  fcd9							; Repeat loop until LoopCount < 0
    238  fcd9		       c6 83		      dec	LoopCount
    239  fcdb		       f0 03		      beq	row_end
    240  fcdd		       4c ff fb 	      jmp	row_start
    241  fce0				   row_end
    242  fce0		       4c d0 fb 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  fce3					      include	"kernel_gem.s"
      1  fce3							;
      2  fce3							; Gem Kernels
      3  fce3							;
      4  fce3							; Gems are displayed in alternating kernels. This chart shows
      5  fce3							; which kernel is responsible for which gem, with missiles denoted.
      6  fce3							;
      7  fce3							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  fce3							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  fce3							;  =	 |1122112221122|1122111221122|	      kernel #
     10  fce3							;  #	 0^	 8^	  17^	    26^       gem index
     11  fce3							;
     12  fce3							; The middle bar indicates where the pattern reverses.
     13  fce3							;
     14  fce3							; Because we can repeat a sprite multiple times, and reset the sprite
     15  fce3							; occurance mid-line, we can render close to half of the 26 gems a line
     16  fce3							; requires with a single sprite. By alternating sprites each frame with an...
     17  fce3							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  fce3							; line, except for two. These are instead rendered by the missile, which
     19  fce3							; corresponds to the sprite and must have the same color and repeat pattern.
     20  fce3
     21  fce3							; for copying
     22  fd00		       00 00 00 00*	      align	256
     23  fd00
     24  fd00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fd00							;
     26  fd00							; GEM KERNEL A
     27  fd00							;
     28  fd00
     29  fd00				   kernel_1_start subroutine
     30  fd00					      rorg	$f100
     31  fd00
     32  fd00							; Kernel Marker
     33  fd00		       0a		      .byte.b	$A
     34  fd01
     35  fd01				   KernelA_early
      0  fd01					      ASSERT_RUNTIME_KERNEL	$A, "v == #1"
      1  fd01				   .KERNEL    SET	$A
      2  fd01				   .COND      SET	"v == #1"
 ASSERT: breakif { pc== $f101  && ( *$f100 ==  $a   ) && ! (  v == #1  ) }
      3  fd01					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     37  fd01		       b8		      clv
     38  fd02
     39  fd02							; Early code to set next Player GRP0. Immediate value is overwritten
     40  fd02		       a9 ff		      lda	#$ff
     41  fd02		       f1 03	   KernelA_GRP0 =	. - 1
     42  fd04
     43  fd04				   KernelA    subroutine
      0  fd04					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fd04				   .KERNEL    SET	$A
      2  fd04				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fd04					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     45  fd04
     46  fd04							; FIXME This should all use STA and y should be unmodified
     47  fd04							; FIXME this will require freeing up cycles on kernel_row 3 though, meaning the sprite loading channges
     48  fd04							; Write Gemini 0A into delayed sprite register
     49  fd04		       a0 66		      ldy	#%01100110
     50  fd04		       f1 05	   KernelA_VDEL1 =	. - 1
     51  fd06		       84 1c		      sty	EMERALD_SP
     52  fd08							; Write Player from accumulator. When writing to the other sprite, the
     53  fd08							; TIA will copy Gemini 0A into visible sprite register
     54  fd08		       85 1b		      sta	JET_SP
     55  fd0a							; Write Gemini 1A into visible sprite register
     56  fd0a		       a0 66		      ldy	#%01100110
     57  fd0a		       f1 0b	   KernelA_VDEL0 =	. - 1
     58  fd0c		       84 1c		      sty	EMERALD_SP
     59  fd0e		       a0 06		      ldy	#%00000110
     60  fd0e		       f1 0f	   KernelA_STY =	. - 1
     61  fd10
      0  fd10					      sleep	2
      1  fd10				   .CYCLES    SET	2
      2  fd10
      3  fd10				  -	      IF	.CYCLES < 2
      4  fd10				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd10				  -	      ERR
      6  fd10					      ENDIF
      7  fd10
      8  fd10				  -	      IF	.CYCLES & 1
      9  fd10				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd10				  -	      nop	0
     11  fd10				  -	      ELSE
     12  fd10				  -	      bit	VSYNC
     13  fd10				  -	      ENDIF
     14  fd10				  -.CYCLES    SET	.CYCLES - 3
     15  fd10					      ENDIF
     16  fd10
     17  fd10					      REPEAT	.CYCLES / 2
     18  fd10		       ea		      nop
     19  fd11					      REPEND
     63  fd11
     64  fd11							; Register config
     65  fd11		       a9 08		      lda	#%00001000
     66  fd13		       85 0c		      sta	REFP1
     67  fd15
     68  fd15							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fd15					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fd15				   .KERNEL    SET	$A
      2  fd15				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fd15					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     70  fd15				   KernelA_A
     71  fd15		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     72  fd17
     73  fd17							; RST0 vvv
     74  fd17				   KernelA_B
     75  fd17		       a5 98		      lda	RamPF1Value
     76  fd19				   KernelA_C
     77  fd19		       84 26		      sty	VDELP1	; disable delayed sprite
     78  fd1b				   KernelA_D
     79  fd1b							; sty EMERALD_SP ; Gemini 1A
      0  fd1b					      sleep	3
      1  fd1b				   .CYCLES    SET	3
      2  fd1b
      3  fd1b				  -	      IF	.CYCLES < 2
      4  fd1b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd1b				  -	      ERR
      6  fd1b					      ENDIF
      7  fd1b
      8  fd1b					      IF	.CYCLES & 1
      9  fd1b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd1b		       04 00		      nop	0
     11  fd1d				  -	      ELSE
     12  fd1d				  -	      bit	VSYNC
     13  fd1d					      ENDIF
     14  fd1d				   .CYCLES    SET	.CYCLES - 3
     15  fd1d					      ENDIF
     16  fd1d
     17  fd1d				  -	      REPEAT	.CYCLES / 2
     18  fd1d				  -	      nop
     19  fd1d					      REPEND
     81  fd1d							; RST0 ^^^
     82  fd1d
     83  fd1d				   KernelA_E
     84  fd1d		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     85  fd1f				   KernelA_F
     86  fd1f		       86 1e		      stx	EMERALD_MI_ENABLE	; Enable the missile (if register uses the %0xx00110 pattern)
     87  fd21				   KernelA_G
     88  fd21		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     89  fd23
     90  fd23				   KernelA_H
     91  fd23		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     92  fd25
      0  fd25					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fd25				   .KERNEL    SET	$A
      2  fd25				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f125  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fd25					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     94  fd25							; RST4 vvv
     95  fd25				   KernelA_I
     96  fd25		       08		      php		; Reset "medium close" NUSIZ repetition
     97  fd26				   KernelA_J		; unchanging
     98  fd26		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     99  fd28				   KernelA_K
    100  fd28		       84 1c		      sty	EMERALD_SP	; Gemini 4A
    101  fd2a							; RST4 ^^^
    102  fd2a
    103  fd2a				   KernelA_L
    104  fd2a		       85 1e		      sta	EMERALD_MI_ENABLE	; disable missile FIXME this should be in prelude
    105  fd2c				   KernelA_M
    106  fd2c		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    107  fd2e
    108  fd2e				   KernelA_N
    109  fd2e				   KernelA_O
    110  fd2e							; reset stack pointer
    111  fd2e		       68		      pla
      0  fd2f					      sleep	2
      1  fd2f				   .CYCLES    SET	2
      2  fd2f
      3  fd2f				  -	      IF	.CYCLES < 2
      4  fd2f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd2f				  -	      ERR
      6  fd2f					      ENDIF
      7  fd2f
      8  fd2f				  -	      IF	.CYCLES & 1
      9  fd2f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd2f				  -	      nop	0
     11  fd2f				  -	      ELSE
     12  fd2f				  -	      bit	VSYNC
     13  fd2f				  -	      ENDIF
     14  fd2f				  -.CYCLES    SET	.CYCLES - 3
     15  fd2f					      ENDIF
     16  fd2f
     17  fd2f					      REPEAT	.CYCLES / 2
     18  fd2f		       ea		      nop
     19  fd30					      REPEND
    113  fd30
    114  fd30							; End visible line
      0  fd30					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fd30				   .KERNEL    SET	$A
      2  fd30				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f130  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fd30					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    116  fd30
    117  fd30				   KernelA_branch
      0  fd30					      sleep	2
      1  fd30				   .CYCLES    SET	2
      2  fd30
      3  fd30				  -	      IF	.CYCLES < 2
      4  fd30				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd30				  -	      ERR
      6  fd30					      ENDIF
      7  fd30
      8  fd30				  -	      IF	.CYCLES & 1
      9  fd30				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd30				  -	      nop	0
     11  fd30				  -	      ELSE
     12  fd30				  -	      bit	VSYNC
     13  fd30				  -	      ENDIF
     14  fd30				  -.CYCLES    SET	.CYCLES - 3
     15  fd30					      ENDIF
     16  fd30
     17  fd30					      REPEAT	.CYCLES / 2
     18  fd30		       ea		      nop
     19  fd31					      REPEND
    119  fd31		       70 ce		      bvs	KernelA_early
    120  fd33
      0  fd33					      sleep	2
      1  fd33				   .CYCLES    SET	2
      2  fd33
      3  fd33				  -	      IF	.CYCLES < 2
      4  fd33				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd33				  -	      ERR
      6  fd33					      ENDIF
      7  fd33
      8  fd33				  -	      IF	.CYCLES & 1
      9  fd33				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd33				  -	      nop	0
     11  fd33				  -	      ELSE
     12  fd33				  -	      bit	VSYNC
     13  fd33				  -	      ENDIF
     14  fd33				  -.CYCLES    SET	.CYCLES - 3
     15  fd33					      ENDIF
     16  fd33
     17  fd33					      REPEAT	.CYCLES / 2
     18  fd33		       ea		      nop
     19  fd34					      REPEND
    122  fd34		       4c 80 fc 	      jmp	row_after_kernel
    123  fd37
    124  fd37					      rend
    125  fd37				   kernel_1_end
      0  fd37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fd37				   .STARTA    SET	kernel_1_start
      2  fd37				   .ENDA      SET	kernel_1_end
      3  fd37				   .LEN       SET	$40
      4  fd37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd37				  -	      err
      7  fd37					      endif
    127  fd37
    128  fd37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  fd37							;
    130  fd37							; GEM KERNEL B
    131  fd37							;
    132  fd37
    133  fd37				   kernel_2_start subroutine
    134  fd37					      rorg	$f100
    135  fd37
    136  fd37							; Kernel Marker
    137  fd37		       0b		      .byte.b	$B
    138  fd38
    139  fd38		       b8		      clv
    140  fd39
    141  fd39				   KernelB_early
    142  fd39							; Early code to set next GRP0 image. Value is overwritten
    143  fd39		       a9 ff		      lda	#$ff
    144  fd39		       f1 03	   KernelB_GRP0 =	. - 1
    145  fd3b
    146  fd3b				   KernelB    subroutine
      0  fd3b					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fd3b				   .KERNEL    SET	$B
      2  fd3b				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f104  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fd3b					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    148  fd3b
    149  fd3b							; Write Gemini 0A into delayed sprite register
    150  fd3b		       84 1c		      sty	EMERALD_SP
    151  fd3d							; Write Player from accumulator. When writing to the other sprite, the
    152  fd3d							; TIA will copy Gemini 0A into visible sprite register
    153  fd3d		       85 1b		      sta	JET_SP
    154  fd3f		       a0 aa		      ldy	#%10101010
    155  fd3f		       f1 09	   KernelB_VDEL0 =	. - 1
    156  fd41							; Write Gemini 1A into delayed sprite register
    157  fd41		       84 1c		      sty	EMERALD_SP
      0  fd43					      sleep	2
      1  fd43				   .CYCLES    SET	2
      2  fd43
      3  fd43				  -	      IF	.CYCLES < 2
      4  fd43				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd43				  -	      ERR
      6  fd43					      ENDIF
      7  fd43
      8  fd43				  -	      IF	.CYCLES & 1
      9  fd43				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd43				  -	      nop	0
     11  fd43				  -	      ELSE
     12  fd43				  -	      bit	VSYNC
     13  fd43				  -	      ENDIF
     14  fd43				  -.CYCLES    SET	.CYCLES - 3
     15  fd43					      ENDIF
     16  fd43
     17  fd43					      REPEAT	.CYCLES / 2
     18  fd43		       ea		      nop
     19  fd44					      REPEND
    159  fd44
    160  fd44		       a0 ff		      ldy	#$ff
    161  fd44		       f1 0e	   KernelB_STY =	. - 1
    162  fd46
    163  fd46							; Register config
    164  fd46		       a9 ff		      lda	#$ff
    165  fd48
    166  fd48		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    167  fd4a							; Load PF1 value into accumulator
    168  fd4a		       a5 98		      lda	RamPF1Value
    169  fd4c
    170  fd4c							; Clear bits in processor status register for drawing.
    171  fd4c							; clc
    172  fd4c							; bit RamLowerSixByte
    173  fd4c		       38		      sec
    174  fd4c		       f1 15	   KernelB_P11_C =	. - 1
    175  fd4d							; sleep 2
    176  fd4d
    177  fd4d							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fd4d					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fd4d				   .KERNEL    SET	$B
      2  fd4d				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f116  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fd4d					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    179  fd4d				   KernelB_A
    180  fd4d		       85 11		      sta	EMERALD_SP_RESET
    181  fd4f				   KernelB_B
    182  fd4f		       24 93		      bit	RamZeroByte
    183  fd51				   KernelB_C
      0  fd51					      sleep	3
      1  fd51				   .CYCLES    SET	3
      2  fd51
      3  fd51				  -	      IF	.CYCLES < 2
      4  fd51				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd51				  -	      ERR
      6  fd51					      ENDIF
      7  fd51
      8  fd51					      IF	.CYCLES & 1
      9  fd51					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd51		       04 00		      nop	0
     11  fd53				  -	      ELSE
     12  fd53				  -	      bit	VSYNC
     13  fd53					      ENDIF
     14  fd53				   .CYCLES    SET	.CYCLES - 3
     15  fd53					      ENDIF
     16  fd53
     17  fd53				  -	      REPEAT	.CYCLES / 2
     18  fd53				  -	      nop
     19  fd53					      REPEND
    185  fd53				   KernelB_D
    186  fd53		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    187  fd55
    188  fd55							; below has one php load (could just be RESET)
    189  fd55				   KernelB_E
    190  fd55		       08		      php
    191  fd56				   KernelB_F
    192  fd56		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    193  fd58				   KernelB_G
    194  fd58		       85 0e		      sta	PF1
    195  fd5a				   KernelB_H
    196  fd5a		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    197  fd5c							; above has one PHP load
    198  fd5c
    199  fd5c				   KernelB_I
    200  fd5c		       85 11		      sta	EMERALD_SP_RESET
    201  fd5e				   KernelB_J
    202  fd5e		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    203  fd60				   KernelB_K
    204  fd60		       86 1e		      stx	EMERALD_MI_ENABLE
    205  fd62				   KernelB_L
    206  fd62		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    207  fd64
    208  fd64				   KernelB_M
    209  fd64				   KernelB_N
      0  fd64					      sleep	2
      1  fd64				   .CYCLES    SET	2
      2  fd64
      3  fd64				  -	      IF	.CYCLES < 2
      4  fd64				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fd64				  -	      ERR
      6  fd64					      ENDIF
      7  fd64
      8  fd64				  -	      IF	.CYCLES & 1
      9  fd64				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fd64				  -	      nop	0
     11  fd64				  -	      ELSE
     12  fd64				  -	      bit	VSYNC
     13  fd64				  -	      ENDIF
     14  fd64				  -.CYCLES    SET	.CYCLES - 3
     15  fd64					      ENDIF
     16  fd64
     17  fd64					      REPEAT	.CYCLES / 2
     18  fd64		       ea		      nop
     19  fd65					      REPEND
    211  fd65
    212  fd65							; reset stack pointer
    213  fd65		       68		      pla
    214  fd66
    215  fd66							; End visible line
      0  fd66					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fd66				   .KERNEL    SET	$B
      2  fd66				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fd66					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    217  fd66
    218  fd66				   KernelB_branch
    219  fd66		       ad 84 02 	      lda	INTIM
    220  fd69		       d0 ce		      bne	KernelB_early
    221  fd6b		       4c 80 fc 	      jmp	row_after_kernel
    222  fd6e
    223  fd6e					      rend
    224  fd6e				   kernel_2_end
      0  fd6e					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fd6e				   .STARTA    SET	kernel_2_start
      2  fd6e				   .ENDA      SET	kernel_2_end
      3  fd6e				   .LEN       SET	$40
      4  fd6e				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fd6e				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fd6e				  -	      err
      7  fd6e					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fd6e					      include	"data_sprites.s"
      1  fd6e
      2  fe00		       00 00 00 00*	      align	256
      3  fe00
      4  fe00				   Frame0
      5  fe00							; 8 buffer
      6  fe00		       00		      .byte.b	#%00000000
      7  fe01		       00		      .byte.b	#%00000000
      8  fe02		       00		      .byte.b	#%00000000
      9  fe03		       00		      .byte.b	#%00000000
     10  fe04		       00		      .byte.b	#%00000000
     11  fe05		       00		      .byte.b	#%00000000
     12  fe06		       00		      .byte.b	#%00000000
     13  fe07		       00		      .byte.b	#%00000000
     14  fe08
     15  fe08							; 8 rows
     16  fe08		       60		      .byte.b	#%01100000
     17  fe09		       60		      .byte.b	#%01100000
     18  fe0a		       60		      .byte.b	#%01100000
     19  fe0b		       c0		      .byte.b	#%11000000
     20  fe0c		       c0		      .byte.b	#%11000000
     21  fe0d		       f0		      .byte.b	#%11110000
     22  fe0e		       c0		      .byte.b	#%11000000
     23  fe0f		       c0		      .byte.b	#%11000000
     24  fe10
     25  fe10							; 8 buffer
     26  fe10		       00		      .byte.b	#%00000000
     27  fe11		       00		      .byte.b	#%00000000
     28  fe12		       00		      .byte.b	#%00000000
     29  fe13		       00		      .byte.b	#%00000000
     30  fe14		       00		      .byte.b	#%00000000
     31  fe15		       00		      .byte.b	#%00000000
     32  fe16		       00		      .byte.b	#%00000000
     33  fe17		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fe18					      include	"data_levels.s"
      1  fe18					      align	8
      2  fe18							; first bit of byte 2 & 3 are unused for simplicity
      3  fe18
      4  fe18				   level_00
      5  fe18		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fe1c
      7  fe1c				   level_01
      8  fe1c		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fe20		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fe24		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fe28		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fe2c		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fe30		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fe34		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fe38		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fe3c		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fe40		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fe44		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fe48		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fe4c		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fe50		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fe54		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fe58		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fe5c		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fe60		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fe64		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fe68		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fe6c		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fe70		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fe74		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fe78		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fe7c		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fe80		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fe84				   level_01_end
     35  fe84
     36  fe84
     37  fe84				   shard_map
     38  fe84		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fe85				   shard_map_end
------- FILE main.s
    161  fe85
    162  fffc					      org	$fffc
    163  fffc		       09 f2		      .word.w	Start
    164  fffe		       09 f2		      .word.w	Start
