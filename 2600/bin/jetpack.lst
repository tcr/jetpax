------- FILE jetpack.s LEVEL 1 PASS 2
      1  10000 ????						; http://8bitworkshop.com/?platform=vcs&file=examples%2Fbigsprite
      2  10000 ????						;
      3  10000 ????						; TODO 03-19:
      4  10000 ????						; - Investigate RAM PLUS (FA) method and test write kernel into it
      5  10000 ????						; - Remove missile as way to render extra dots, switch to something else
      6  10000 ????						; - Proof of concept missile as way to render Jetpack Man
      7  10000 ????						; RAM+ is similar but the writing happens from adresses $1000 to $10FF (256 bytes) and the reading is from $1100 to $11FF (the next 256 bytes).
      8  10000 ????						; 12K
      9  10000 ????						;
     10  10000 ????						; TODO 10-03:
     11  10000 ????						; - Need to make each of the two-line kernels into a loop...
     12  10000 ????						; - So that the rewriting code can call and overwrite the line easily
     13  10000 ????						; - Then need POC of reading from a fixed buffer of code and copying into
     14  10000 ????						;   the kernel those bytes, then a way to generate the bytes to stuff in the
     15  10000 ????						;   kernel, then have per-line mutations!!
     16  10000 ????
     17  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetpack.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetpack.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE jetpack.s
     21  0000 ????
     22 U008e ????				      seg.u	Variables
     23 U0080					      org	$80
     24 U0080
     25 U0080		       00	   Temp       byte.b
     26 U0081
     27 U0081							; Counters
     28 U0081		       00	   RowCount   byte.b
     29 U0082		       00	   LoopCount  byte.b
     30 U0083		       00	   FrameCount byte.b
     31 U0084
     32 U0084		       00	   YP1	      byte.b
     33 U0085		       00	   SpriteEnd  byte.b
     34 U0086		       00	   XPos       byte.b		; X position of player sprite
     35 U0087
     36 U0087
     37 U0087		       00	   Speed1     byte.b
     38 U0088		       00	   Speed2     byte.b
     39 U0089
     40 U0089		       00	   YPos       byte.b		; Y position of player sprite
     41 U008a		       00	   YPos2      byte.b
     42 U008b
     43 U008b		       00	   GEM_02_TARGET byte.b
     44 U008c
     45 U008c		       00	   JMP_ADDR   byte.b
     46 U008d		       00	   JMP_ADDR_2 byte.b
     47 U008e
     48 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     49 U008e
     50 U008e		       00 10	   ROW_COUNT  equ	16
     51 U008e
     52 U008e							; Sprites
     53 U008e
     54 U008e							; Nusiz
     55 U008e		       00 13	   THREE_COPIES equ	%00010011
     56 U008e
     57 U008e							; Frame 1 sprites
     58 U008e		       00 60	   EMR1       equ	%01100000
     59 U008e		       00 06	   EMR2       equ	%00000110
     60 U008e		       00 66	   EMR3       equ	%01100110
     61 U008e
     62 U008e							; Frame 2 sprites
     63 U008e		       00 c0	   T1	      equ	%11000000
     64 U008e		       00 0c	   T2	      equ	%00001100
     65 U008e		       00 cc	   T3	      equ	%11001100
     66 U008e
     67 U008e							; Shorthands
     68 U008e
     69 U008e		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     70 U008e		       00 85	   SET_1_0    equ	$85	; STA
     71 U008e		       00 86	   SET_0_1    equ	$86	; STX
     72 U008e		       00 84	   SET_1_1    equ	$84	; STY
     73 U008e
     74 U008e		       00 86	   SET_0_L    equ	$86	; STX
     75 U008e		       00 85	   SET_1_L    equ	$85	; STY
     76 U008e
     77 U008e		       00 85	   SET_0_R    equ	$85	; STA
     78 U008e		       00 84	   SET_1_R    equ	$84	; STY
     79 U008e
     80 U008e							; Gem enabling/disabling globally
     81 U008e
     82 U008e							; ; all off
     83 U008e							; GEM_00 equ SET_0_0
     84 U008e							; GEM_02 equ SET_0_0
     85 U008e							; GEM_04 equ SET_0_0
     86 U008e							; GEM_06 equ SET_0_0
     87 U008e							; GEM_08 equ SET_0_L
     88 U008e							; GEM_09 equ SET_0_0
     89 U008e							; GEM_11 equ SET_0_0
     90 U008e							; GEM_13 equ SET_0_0
     91 U008e							; GEM_15 equ SET_0_0
     92 U008e							; GEM_17 equ SET_0_R
     93 U008e							; GEM_18 equ SET_0_0
     94 U008e							; GEM_20 equ SET_0_0
     95 U008e							; GEM_22 equ SET_0_0
     96 U008e							; GEM_24 equ SET_0_0
     97 U008e
     98 U008e							; all on
     99 U008e		       00 84	   GEM_00     equ	SET_1_1
    100 U008e		       00 84	   GEM_02     equ	SET_1_1
    101 U008e		       00 84	   GEM_04     equ	SET_1_1
    102 U008e		       00 84	   GEM_06     equ	SET_1_1
    103 U008e		       00 85	   GEM_08     equ	SET_1_L
    104 U008e		       00 84	   GEM_09     equ	SET_1_1
    105 U008e		       00 84	   GEM_11     equ	SET_1_1
    106 U008e		       00 84	   GEM_13     equ	SET_1_1
    107 U008e		       00 84	   GEM_15     equ	SET_1_1
    108 U008e		       00 84	   GEM_17     equ	SET_1_R
    109 U008e		       00 84	   GEM_18     equ	SET_1_1
    110 U008e		       00 84	   GEM_20     equ	SET_1_1
    111 U008e		       00 84	   GEM_22     equ	SET_1_1
    112 U008e		       00 84	   GEM_24     equ	SET_1_1
    113 U008e
    114 U008e							; ; odd on
    115 U008e							; GEM_00 equ SET_1_0
    116 U008e							; GEM_02 equ SET_1_0
    117 U008e							; GEM_04 equ SET_1_0
    118 U008e							; GEM_06 equ SET_1_0
    119 U008e							; GEM_08 equ SET_1_L
    120 U008e							; GEM_09 equ SET_0_1
    121 U008e							; GEM_11 equ SET_0_1
    122 U008e							; GEM_13 equ SET_0_1
    123 U008e							; GEM_15 equ SET_0_1
    124 U008e							; GEM_17 equ SET_0_R
    125 U008e							; GEM_18 equ SET_1_0
    126 U008e							; GEM_20 equ SET_1_0
    127 U008e							; GEM_22 equ SET_1_0
    128 U008e							; GEM_24 equ SET_1_0
    129 U008e
    130 U008e							; ; even on
    131 U008e							; GEM_00 equ SET_0_1
    132 U008e							; GEM_02 equ SET_0_1
    133 U008e							; GEM_04 equ SET_0_1
    134 U008e							; GEM_06 equ SET_0_1
    135 U008e							; GEM_08 equ SET_0_L
    136 U008e							; GEM_09 equ SET_1_0
    137 U008e							; GEM_11 equ SET_1_0
    138 U008e							; GEM_13 equ SET_1_0
    139 U008e							; GEM_15 equ SET_1_0
    140 U008e							; GEM_17 equ SET_1_R
    141 U008e							; GEM_18 equ SET_0_1
    142 U008e							; GEM_20 equ SET_0_1
    143 U008e							; GEM_22 equ SET_0_1
    144 U008e							; GEM_24 equ SET_0_1
    145 U008e
    146 U008e							; Colors
    147 U008e
    148 U008e		       00 42	   COL_BG     equ	$42
    149 U008e		       00 cc	   COL_EMERALD equ	$CC
    150 U008e		       00 cc	   COL_EMERALD_2 equ	$CC
    151 U008e
    152 U008e							; HMOVE values
    153 U008e
    154 U008e		       00 27	   EMERALD_MI_HMOVE_S equ	39
    155 U008e		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    156 U008e		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    157 U008e
    158 U008e							; Sprite details
    159 U008e
    160 U008e		       00 09	   SPRITE_HEIGHT equ	9
    161 U008e
    162 U008e
    163 U008e		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    164 U008e		       00 1c	   EMERALD_SP equ	GRP1
    165 U008e		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    166 U008e		       00 11	   EMERALD_SP_RESET equ	RESP1
    167 U008e		       00 13	   EMERALD_MI_RESET equ	RESM1
    168 U008e		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    169 U008e		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    170 U008e		       00 05	   EMERALD_COPIES equ	NUSIZ1
    171 U008e
    172 U008e		       00 1b	   JET_SP     equ	GRP0
    173 U008e		       00 10	   JET_SP_RESET equ	RESP0
    174 U008e		       00 20	   JET_SP_HMOVE equ	HMP0
    175 U008e		       00 06	   JET_SP_COLOR equ	COLUP0
    176 U008e
    177 U008e
    178 U008e							; Offset from the sprite label to the point
    179 U008e							; at which the sprite actually starts. This is the 0-padding
    180 U008e							; FRAME_OFFSET equ 53
    181 U008e
    182 U008e							; Spriteend is HEIGHT_OFFSET - YPos
    183 U008e		       00 c8	   HEIGHT_OFFSET equ	200
    184 U008e
    185 U008e							; Compared with YPos
    186 U008e		       00 32	   FLOOR_OFFSET equ	50
    187 U008e
    188 U008e							; YPos definite position
    189 U008e		       00 64	   YPosStart  equ	100
    190 U008e
    191 U008e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    192 U008e
    193  10000 ????				       seg	Code
    194  10000 ????
    195  d000					      org	$D000
    196  d000					      rorg	$F000
    197  d000
    198  d000		       00	   BANK1      byte.b
    199  d001
    200  d200					      org	$D200
    201  d200					      rorg	$F200
    202  d200
    203  d200				   Bank1Start
    204  d200		       ad fa ff 	      lda	$FFFA
    205  d203		       ea		      nop
    206  d204		       ea		      nop
    207  d205		       ea		      nop
    208  d206
    209  d206							; Epilogue
    210  dffc					      org	$DFFC
    211  dffc					      rorg	$FFFC
    212  dffc		       00 f2		      .word.w	Bank1Start
    213  dffe		       00 f2		      .word.w	Bank1Start
    214  e000
    215  e000					      org	$E000
    216  e000					      rorg	$F000
    217  e000
    218  e000		       00	   BANK2      byte.b
    219  e001
    220  e200					      org	$E200
    221  e200					      rorg	$F200
    222  e200
    223  e200				   Bank2Start
    224  e200		       ad fa ff 	      lda	$FFFA
    225  e203		       ea		      nop
    226  e204		       ea		      nop
    227  e205		       ea		      nop
    228  e206
    229  e206							; Epilogue
    230  effc					      org	$EFFC
    231  effc					      rorg	$FFFC
    232  effc		       00 f2		      .word.w	Bank2Start
    233  effe		       00 f2		      .word.w	Bank2Start
    234  f000
    235  f000					      org	$F000
    236  f000					      rorg	$F000
    237  f000
    238  f000		       00	   BANK3      byte.b
    239  f001
    240  f200					      org	$F200
    241  f200					      rorg	$F200
    242  f200
    243  f200				   Start
    244  f200		       ad fa ff 	      lda	$FFFA
    245  f203		       ea		      nop
    246  f204		       ea		      nop
    247  f205		       ea		      nop
    248  f206
      0  f206					      CLEAN_START
      1  f206		       78		      sei
      2  f207		       d8		      cld
      3  f208
      4  f208		       a2 00		      ldx	#0
      5  f20a		       8a		      txa
      6  f20b		       a8		      tay
      7  f20c		       ca	   .CLEAR_STACK dex
      8  f20d		       9a		      txs
      9  f20e		       48		      pha
     10  f20f		       d0 fb		      bne	.CLEAR_STACK
     11  f211
    250  f211		       a9 00		      lda	#0
    251  f213		       85 83		      sta	FrameCount
    252  f215
    253  f215							; P0 has three copies
    254  f215		       a9 13		      lda	#THREE_COPIES
    255  f217		       85 05		      sta	EMERALD_COPIES
    256  f219
    257  f219		       a9 00		      lda	#$00
    258  f21b		       85 09		      sta	COLUBK
    259  f21d		       a9 01		      lda	#%00000001
    260  f21f		       85 0a		      sta	CTRLPF	; reflect playfield
    261  f221
    262  f221							; Disable VDEL
    263  f221		       a9 00		      lda	#0
    264  f223		       85 25		      sta	VDELP0
    265  f225		       85 26		      sta	VDELP1
    266  f227
    267  f227
    268  f227							; Player 0
    269  f227		       a2 cc		      ldx	#COL_EMERALD
    270  f229		       86 07		      stx	EMERALD_SP_COLOR
    271  f22b
    272  f22b							; Player 1
    273  f22b		       a9 98		      lda	#$98
    274  f22d		       85 06		      sta	JET_SP_COLOR
    275  f22f		       a9 00		      lda	#$00
    276  f231		       85 1b		      sta	JET_SP
    277  f233
    278  f233							; Positions
    279  f233		       a9 64		      lda	#YPosStart
    280  f235		       85 89		      sta	YPos
    281  f237		       a9 37		      lda	#55
    282  f239		       85 86		      sta	XPos
    283  f23b		       a9 00		      lda	#0
    284  f23d		       85 87		      sta	Speed1
    285  f23f		       85 88		      sta	Speed2
    286  f241		       85 8a		      sta	YPos2
    287  f243
    288  f243				   BeginFrame
      0  f243					      VERTICAL_SYNC
      1  f243		       a9 0e		      lda	#%1110
      2  f245		       85 02	   .VSLP1     sta	WSYNC
      3  f247		       85 00		      sta	VSYNC
      4  f249		       4a		      lsr
      5  f24a		       d0 f9		      bne	.VSLP1
    290  f24c
      0  f24c					      TIMER_SETUP	37
      1  f24c				   .lines     SET	37
      2  f24c		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f24e		       85 02		      sta	WSYNC
      4  f250		       8d 96 02 	      sta	TIM64T
    292  f253
    293  f253							; Scanline counter
    294  f253		       a9 10		      lda	#ROW_COUNT
    295  f255		       85 82		      sta	LoopCount
    296  f257
    297  f257							; Frame counter
    298  f257		       e6 83		      inc	FrameCount
    299  f259
    300  f259							; Now the work stuff
    301  f259
    302  f259							; FRAMESWITCH
    303  f259		       a9 01		      lda	#01
    304  f25b		       25 83		      and	FrameCount
    305  f25d		       d0 14		      bne	CopyFrame2Kernel
    306  f25f				   CopyFrame1Kernel
    307  f25f
    308  f25f							; Copy: FRAME 1
    309  f25f		       a0 33		      ldy	#(frame_1_end - frame_1_start)-1
    310  f261				   .copy_loop
    311  f261		       b9 35 f4 	      lda	frame_1_start,Y
    312  f264		       99 00 10 	      sta	$1000,Y
    313  f267		       88		      dey
    314  f268		       d0 f7		      bne	.copy_loop
    315  f26a		       ad 35 f4 	      lda	frame_1_start
    316  f26d		       8d 00 10 	      sta	$1000
    317  f270		       4c 87 f2 	      jmp	CopyFrameNext
    318  f273
    319  f273				   CopyFrame2Kernel
    320  f273
    321  f273							; Copy: FRAME 2
    322  f273		       a0 37		      ldy	#(frame_2_end - frame_2_start)-1
    323  f275				   .copy_loop2
    324  f275		       b9 69 f4 	      lda	frame_2_start,Y
    325  f278		       99 00 10 	      sta	$1000,Y
    326  f27b		       88		      dey
    327  f27c		       d0 f7		      bne	.copy_loop2
    328  f27e		       ad 69 f4 	      lda	frame_2_start
    329  f281		       8d 00 10 	      sta	$1000
    330  f284		       4c 87 f2 	      jmp	CopyFrameNext
    331  f287
    332  f287				   CopyFrameNext
    333  f287							; Positioning
    334  f287		       85 02		      sta	WSYNC
      0  f289					      SLEEP	40
      1  f289				   .CYCLES    SET	40
      2  f289
      3  f289				  -	      IF	.CYCLES < 2
      4  f289				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f289				  -	      ERR
      6  f289					      ENDIF
      7  f289
      8  f289				  -	      IF	.CYCLES & 1
      9  f289				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f289				  -	      nop	0
     11  f289				  -	      ELSE
     12  f289				  -	      bit	VSYNC
     13  f289				  -	      ENDIF
     14  f289				  -.CYCLES    SET	.CYCLES - 3
     15  f289					      ENDIF
     16  f289
     17  f289					      REPEAT	.CYCLES / 2
     18  f289		       ea		      nop
     17  f289					      REPEND
     18  f28a		       ea		      nop
     17  f28a					      REPEND
     18  f28b		       ea		      nop
     17  f28b					      REPEND
     18  f28c		       ea		      nop
     17  f28c					      REPEND
     18  f28d		       ea		      nop
     17  f28d					      REPEND
     18  f28e		       ea		      nop
     17  f28e					      REPEND
     18  f28f		       ea		      nop
     17  f28f					      REPEND
     18  f290		       ea		      nop
     17  f290					      REPEND
     18  f291		       ea		      nop
     17  f291					      REPEND
     18  f292		       ea		      nop
     17  f292					      REPEND
     18  f293		       ea		      nop
     17  f293					      REPEND
     18  f294		       ea		      nop
     17  f294					      REPEND
     18  f295		       ea		      nop
     17  f295					      REPEND
     18  f296		       ea		      nop
     17  f296					      REPEND
     18  f297		       ea		      nop
     17  f297					      REPEND
     18  f298		       ea		      nop
     17  f298					      REPEND
     18  f299		       ea		      nop
     17  f299					      REPEND
     18  f29a		       ea		      nop
     17  f29a					      REPEND
     18  f29b		       ea		      nop
     17  f29b					      REPEND
     18  f29c		       ea		      nop
     19  f29d					      REPEND
    336  f29d		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    337  f29f		       85 02		      sta	WSYNC
    338  f2a1
    339  f2a1							; Misc
    340  f2a1		       a9 00		      lda	#00
    341  f2a3		       85 1e		      sta	EMERALD_MI_ENABLE
    342  f2a5
    343  f2a5							; Assign dervied SpriteEnd value
    344  f2a5		       a9 c8		      lda	#HEIGHT_OFFSET
    345  f2a7		       e5 89		      sbc	YPos
    346  f2a9		       85 85		      sta	SpriteEnd
    347  f2ab
    348  f2ab							; Move missile to starting position and fine-tune position
    349  f2ab							; TODO replace with an HMOVE macro
    350  f2ab		       85 02		      sta	WSYNC
      0  f2ad					      sleep	EMERALD_MI_HMOVE_S
      1  f2ad				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f2ad
      3  f2ad				  -	      IF	.CYCLES < 2
      4  f2ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f2ad				  -	      ERR
      6  f2ad					      ENDIF
      7  f2ad
      8  f2ad					      IF	.CYCLES & 1
      9  f2ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f2ad		       04 00		      nop	0
     11  f2af				  -	      ELSE
     12  f2af				  -	      bit	VSYNC
     13  f2af					      ENDIF
     14  f2af				   .CYCLES    SET	.CYCLES - 3
     15  f2af					      ENDIF
     16  f2af
     17  f2af					      REPEAT	.CYCLES / 2
     18  f2af		       ea		      nop
     17  f2af					      REPEND
     18  f2b0		       ea		      nop
     17  f2b0					      REPEND
     18  f2b1		       ea		      nop
     17  f2b1					      REPEND
     18  f2b2		       ea		      nop
     17  f2b2					      REPEND
     18  f2b3		       ea		      nop
     17  f2b3					      REPEND
     18  f2b4		       ea		      nop
     17  f2b4					      REPEND
     18  f2b5		       ea		      nop
     17  f2b5					      REPEND
     18  f2b6		       ea		      nop
     17  f2b6					      REPEND
     18  f2b7		       ea		      nop
     17  f2b7					      REPEND
     18  f2b8		       ea		      nop
     17  f2b8					      REPEND
     18  f2b9		       ea		      nop
     17  f2b9					      REPEND
     18  f2ba		       ea		      nop
     17  f2ba					      REPEND
     18  f2bb		       ea		      nop
     17  f2bb					      REPEND
     18  f2bc		       ea		      nop
     17  f2bc					      REPEND
     18  f2bd		       ea		      nop
     17  f2bd					      REPEND
     18  f2be		       ea		      nop
     17  f2be					      REPEND
     18  f2bf		       ea		      nop
     17  f2bf					      REPEND
     18  f2c0		       ea		      nop
     19  f2c1					      REPEND
    352  f2c1		       85 13		      sta	EMERALD_MI_RESET
    353  f2c3
    354  f2c3							; Player 1
    355  f2c3		       a5 86		      lda	XPos
    356  f2c5		       a2 00		      ldx	#0
    357  f2c7		       20 01 f5 	      jsr	SetHorizPos
    358  f2ca
      0  f2ca					      TIMER_WAIT
      1  f2ca				   .waittimer
      2  f2ca		       ad 84 02 	      lda	INTIM
      3  f2cd		       d0 fb		      bne	.waittimer
      0  f2cf					      TIMER_SETUP	192
      1  f2cf				   .lines     SET	192
      2  f2cf		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f2d1		       85 02		      sta	WSYNC
      4  f2d3		       8d 96 02 	      sta	TIM64T
    361  f2d6
    362  f2d6							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    363  f2d6
    364  f2d6							; Frame border top
    365  f2d6
    366  f2d6							; Start top border
    367  f2d6				   frame_top
    368  f2d6		       a9 42		      lda	#COL_BG
    369  f2d8		       85 08		      sta	COLUPF
    370  f2da		       85 02		      sta	WSYNC
    371  f2dc		       85 02		      sta	WSYNC
    372  f2de		       85 02		      sta	WSYNC
    373  f2e0		       85 02		      sta	WSYNC
    374  f2e2		       85 02		      sta	WSYNC
    375  f2e4		       85 02		      sta	WSYNC
    376  f2e6		       85 02		      sta	WSYNC
    377  f2e8		       85 02		      sta	WSYNC
    378  f2ea
    379  f2ea				   PlayArea
    380  f2ea							; PF is now the playing area
    381  f2ea		       a9 00		      lda	#%00000000
    382  f2ec		       85 0d		      sta	PF0
    383  f2ee		       a9 20		      lda	#%00100000
    384  f2f0		       85 0e		      sta	PF1
    385  f2f2		       a9 00		      lda	#%00000000
    386  f2f4		       85 0f		      sta	PF2
    387  f2f6
    388  f2f6							; Choose which kernel to use
    389  f2f6							; FRAMESWITCH
    390  f2f6		       a9 01		      lda	#01
    391  f2f8		       25 83		      and	FrameCount
    392  f2fa		       d0 07		      bne	doframe2
    393  f2fc
    394  f2fc							; frame 1
    395  f2fc		       a2 d0		      ldx	#EMERALD_MI_HMOVE_2
    396  f2fe		       86 23		      stx	EMERALD_MI_HMOVE
    397  f300		       4c 07 f3 	      jmp	doframe2after
    398  f303
    399  f303							; frame 2
    400  f303				   doframe2
    401  f303		       a2 10		      ldx	#EMERALD_MI_HMOVE_3
    402  f305		       86 23		      stx	EMERALD_MI_HMOVE
    403  f307				   doframe2after
    404  f307
    405  f307
    406  f307
    407  f307
    408  f307							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    409  f307
    410  f307							; frame start
    411  f307
    412  f307
    413  f307
    414  f307
    415  f307							; MACRO for calculating next GRPx value
    416  f307
    417  f307					      MAC	jet_spritedata_calc
    418  f307					      lda	#SPRITE_HEIGHT
    419  f307					      dcp	SpriteEnd
    420  f307					      ldy	SpriteEnd
    421  f307
    422  f307							; 4c
    423  f307							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
    424  f307					      lda	Frame0,Y
    425  f307							; 6c
    426  f307					      .byte	$b0, $01	;2c / 3c (taken)
    427  f307					      .byte	$2c	; 4c / 0c
    428  f307					      sta	JET_SP	; 0c / 3c
    429  f307
    430  f307					      ENDM
    431  f307
    432  f307
    433  f307
    434  f307
    435  f308		       00		      align	8
    436  f308
    437  f308				   JUMP_TABLES
    438  f308		       11 00		      .byte.b	$11, $00
    439  f30a		       0c f3		      .byte.b	<frame_start, >frame_start
    440  f30c
    441  f30c
    442  f30c				   frame_start
    443  f30c		       85 02		      sta	WSYNC
    444  f30e							; [row:1]
      0  f30e					      jet_spritedata_calc
      1  f30e		       a9 09		      lda	#SPRITE_HEIGHT
      2  f310		       c7 85		      dcp	SpriteEnd
      3  f312		       a4 85		      ldy	SpriteEnd
      4  f314
      5  f314
      6  f314
      7  f314		       b9 7c f6 	      lda	Frame0,Y
      8  f317
      9  f317		       b0 01		      .byte.b	$b0, $01
     10  f319		       2c		      .byte.b	$2c
     11  f31a		       85 1b		      sta	JET_SP
     12  f31c
    446  f31c
    447  f31c							; Select which jump table address to modify (update)
    448  f31c							; FRAMESWITCH
    449  f31c		       a9 01		      lda	#01
    450  f31e		       25 83		      and	FrameCount
    451  f320		       d0 0d		      bne	frame_jump_2
    452  f322				   frame_jump_1
    453  f322							; copy in the JUMP TABLES address
    454  f322		       a5 08		      lda	<JUMP_TABLES
    455  f324		       8d 31 10 	      sta	$1000 + [frame_1_jump - frame_1_start]
    456  f327		       a5 f1		      lda	>JUMP_TABLES - 2
    457  f329		       8d 32 10 	      sta	$1001 + [frame_1_jump - frame_1_start]
    458  f32c		       4c 39 f3 	      jmp	frame_jump.next
    459  f32f
    460  f32f				   frame_jump_2
    461  f32f							; copy in the JUMP TABLES address
    462  f32f		       a5 08		      lda	<JUMP_TABLES
    463  f331		       8d 35 10 	      sta	$1000 + [frame_2_jump - frame_2_start]
    464  f334		       a5 f1		      lda	>JUMP_TABLES - 2
    465  f336		       8d 36 10 	      sta	$1001 + [frame_2_jump - frame_2_start]
    466  f339
    467  f339				   frame_jump.next
    468  f339
    469  f339		       85 02		      sta	WSYNC
    470  f33b							; [row:2]
      0  f33b					      jet_spritedata_calc
      1  f33b		       a9 09		      lda	#SPRITE_HEIGHT
      2  f33d		       c7 85		      dcp	SpriteEnd
      3  f33f		       a4 85		      ldy	SpriteEnd
      4  f341
      5  f341
      6  f341
      7  f341		       b9 7c f6 	      lda	Frame0,Y
      8  f344
      9  f344		       b0 01		      .byte.b	$b0, $01
     10  f346		       2c		      .byte.b	$2c
     11  f347		       85 1b		      sta	JET_SP
     12  f349
    472  f349
    473  f349							; Prepare for the kernel.
      0  f349					      sleep	44
      1  f349				   .CYCLES    SET	44
      2  f349
      3  f349				  -	      IF	.CYCLES < 2
      4  f349				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f349				  -	      ERR
      6  f349					      ENDIF
      7  f349
      8  f349				  -	      IF	.CYCLES & 1
      9  f349				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f349				  -	      nop	0
     11  f349				  -	      ELSE
     12  f349				  -	      bit	VSYNC
     13  f349				  -	      ENDIF
     14  f349				  -.CYCLES    SET	.CYCLES - 3
     15  f349					      ENDIF
     16  f349
     17  f349					      REPEAT	.CYCLES / 2
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     17  f355					      REPEND
     18  f356		       ea		      nop
     17  f356					      REPEND
     18  f357		       ea		      nop
     17  f357					      REPEND
     18  f358		       ea		      nop
     17  f358					      REPEND
     18  f359		       ea		      nop
     17  f359					      REPEND
     18  f35a		       ea		      nop
     17  f35a					      REPEND
     18  f35b		       ea		      nop
     17  f35b					      REPEND
     18  f35c		       ea		      nop
     17  f35c					      REPEND
     18  f35d		       ea		      nop
     17  f35d					      REPEND
     18  f35e		       ea		      nop
     19  f35f					      REPEND
    475  f35f		       c6 85		      dec	SpriteEnd
    476  f361
    477  f361							; Jump to the copied kernel.
    478  f361							; TODO this has to be EXACT
    479  f361							; [row:3-4]
    480  f361		       4c 00 11 	      jmp	$1100
    481  f364
    482  f364				   frame_row_start subroutine
    483  f364							; [row:5]
    484  f364							; Cleanup from the kernel.
    485  f364		       a9 00		      lda	#0
    486  f366		       85 1e		      sta	EMERALD_MI_ENABLE
    487  f368		       85 1c		      sta	EMERALD_SP
    488  f36a
    489  f36a
    490  f36a		       85 02		      sta	WSYNC
    491  f36c							; [row:6]
      0  f36c					      jet_spritedata_calc
      1  f36c		       a9 09		      lda	#SPRITE_HEIGHT
      2  f36e		       c7 85		      dcp	SpriteEnd
      3  f370		       a4 85		      ldy	SpriteEnd
      4  f372
      5  f372
      6  f372
      7  f372		       b9 7c f6 	      lda	Frame0,Y
      8  f375
      9  f375		       b0 01		      .byte.b	$b0, $01
     10  f377		       2c		      .byte.b	$2c
     11  f378		       85 1b		      sta	JET_SP
     12  f37a
    493  f37a
    494  f37a							; FRAMESWITCH
    495  f37a		       a9 01		      lda	#01
    496  f37c		       25 83		      and	FrameCount
    497  f37e		       d0 1b		      bne	loadframe2
    498  f380				   loadframe1
    499  f380		       a9 84		      lda	#SET_1_1
    500  f382		       85 8b		      sta	GEM_02_TARGET
    501  f384
    502  f384		       a9 84		      lda	#SET_1_1
    503  f386		       85 8b		      sta	GEM_02_TARGET
    504  f388
    505  f388		       a9 84		      lda	#SET_1_1
    506  f38a		       85 8b		      sta	GEM_02_TARGET
    507  f38c
    508  f38c		       a9 85		      lda	#SET_1_L
    509  f38e		       85 8b		      sta	GEM_02_TARGET
    510  f390
    511  f390		       a9 84		      lda	#SET_1_1
    512  f392		       85 8b		      sta	GEM_02_TARGET
    513  f394
    514  f394		       a9 84		      lda	#SET_1_1
    515  f396		       85 8b		      sta	GEM_02_TARGET
    516  f398
    517  f398		       4c ba f3 	      jmp	loadframeafter
    518  f39b
    519  f39b				   loadframe2
    520  f39b		       a9 84		      lda	#SET_1_1
    521  f39d		       85 8b		      sta	GEM_02_TARGET
    522  f39f
    523  f39f		       a9 84		      lda	#SET_1_1
    524  f3a1		       85 8b		      sta	GEM_02_TARGET
    525  f3a3
    526  f3a3		       a9 84		      lda	#SET_1_R
    527  f3a5		       85 8b		      sta	GEM_02_TARGET
    528  f3a7
    529  f3a7		       a9 84		      lda	#SET_1_1
    530  f3a9		       85 8b		      sta	GEM_02_TARGET
    531  f3ab
    532  f3ab		       a9 84		      lda	#SET_1_1
    533  f3ad		       85 8b		      sta	GEM_02_TARGET
    534  f3af
    535  f3af		       a9 84		      lda	#SET_1_1
    536  f3b1		       85 8b		      sta	GEM_02_TARGET
    537  f3b3
    538  f3b3		       a9 84		      lda	#SET_1_1
    539  f3b5		       85 8b		      sta	GEM_02_TARGET
    540  f3b7
    541  f3b7		       4c ba f3 	      jmp	loadframeafter
    542  f3ba
    543  f3ba				   loadframeafter
    544  f3ba		       85 02		      sta	WSYNC
    545  f3bc							; [row:7]
      0  f3bc					      jet_spritedata_calc
      1  f3bc		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3be		       c7 85		      dcp	SpriteEnd
      3  f3c0		       a4 85		      ldy	SpriteEnd
      4  f3c2
      5  f3c2
      6  f3c2
      7  f3c2		       b9 7c f6 	      lda	Frame0,Y
      8  f3c5
      9  f3c5		       b0 01		      .byte.b	$b0, $01
     10  f3c7		       2c		      .byte.b	$2c
     11  f3c8		       85 1b		      sta	JET_SP
     12  f3ca
    547  f3ca
    548  f3ca		       85 02		      sta	WSYNC
    549  f3cc							; [row:8]
      0  f3cc					      jet_spritedata_calc
      1  f3cc		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3ce		       c7 85		      dcp	SpriteEnd
      3  f3d0		       a4 85		      ldy	SpriteEnd
      4  f3d2
      5  f3d2
      6  f3d2
      7  f3d2		       b9 7c f6 	      lda	Frame0,Y
      8  f3d5
      9  f3d5		       b0 01		      .byte.b	$b0, $01
     10  f3d7		       2c		      .byte.b	$2c
     11  f3d8		       85 1b		      sta	JET_SP
     12  f3da
    551  f3da		       85 02		      sta	WSYNC
    552  f3dc							; [row:9]
      0  f3dc					      jet_spritedata_calc
      1  f3dc		       a9 09		      lda	#SPRITE_HEIGHT
      2  f3de		       c7 85		      dcp	SpriteEnd
      3  f3e0		       a4 85		      ldy	SpriteEnd
      4  f3e2
      5  f3e2
      6  f3e2
      7  f3e2		       b9 7c f6 	      lda	Frame0,Y
      8  f3e5
      9  f3e5		       b0 01		      .byte.b	$b0, $01
     10  f3e7		       2c		      .byte.b	$2c
     11  f3e8		       85 1b		      sta	JET_SP
     12  f3ea
    554  f3ea
    555  f3ea							; next line, repeat until <0
    556  f3ea		       c6 82		      dec	LoopCount
    557  f3ec		       30 03		      bmi	.skip
    558  f3ee		       4c 0c f3 	      jmp	frame_start
    559  f3f1				   .skip
    560  f3f1
    561  f3f1							; reset the background for bottom of playfield
    562  f3f1				   frame_bottom
    563  f3f1		       a9 3f		      lda	#%00111111
    564  f3f3		       85 0e		      sta	PF1
    565  f3f5		       a9 ff		      lda	#%11111111
    566  f3f7		       85 0f		      sta	PF2
    567  f3f9
    568  f3f9		       a9 00		      lda	#0
    569  f3fb		       85 1c		      sta	EMERALD_SP
    570  f3fd		       85 1b		      sta	JET_SP
    571  f3ff		       85 1e		      sta	EMERALD_MI_ENABLE
    572  f401
    573  f401		       85 02		      sta	WSYNC
    574  f403		       85 02		      sta	WSYNC
    575  f405		       85 02		      sta	WSYNC
    576  f407		       85 02		      sta	WSYNC
    577  f409		       85 02		      sta	WSYNC
    578  f40b		       85 02		      sta	WSYNC
    579  f40d		       85 02		      sta	WSYNC
    580  f40f		       85 02		      sta	WSYNC
    581  f411
    582  f411		       a9 00		      lda	#$00
    583  f413		       85 09		      sta	COLUBK
    584  f415		       85 08		      sta	COLUPF
    585  f417
    586  f417				   frame_end
    587  f417							; End
    588  f417		       a9 00		      lda	#0
    589  f419		       85 1c		      sta	EMERALD_SP
    590  f41b
      0  f41b					      TIMER_WAIT
      1  f41b				   .waittimer
      2  f41b		       ad 84 02 	      lda	INTIM
      3  f41e		       d0 fb		      bne	.waittimer
      0  f420					      TIMER_SETUP	30
      1  f420				   .lines     SET	30
      2  f420		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f422		       85 02		      sta	WSYNC
      4  f424		       8d 96 02 	      sta	TIM64T
    593  f427
    594  f427		       20 a1 f4 	      jsr	MoveJoystick
    595  f42a		       20 d8 f4 	      jsr	SpeedCalculation
    596  f42d
      0  f42d					      TIMER_WAIT
      1  f42d				   .waittimer
      2  f42d		       ad 84 02 	      lda	INTIM
      3  f430		       d0 fb		      bne	.waittimer
    598  f432		       4c 43 f2 	      jmp	BeginFrame
    599  f435
    600  f435
    601  f435							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    602  f435
    603  f435							; kernels
    604  f435
    605  f435
    606  f435							; Important cycles for the kernels:
    607  f435							; left border: 29, right border: 64
    608  f435
    609  f435							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    610  f435
    611  f435							; FRAME 1
    612  f435
    613  f435							; Emerald line macro
    614  f435
    615  f435							; rorg $1100
    616  f435
    617  f435
    618  f435				   frame_1_start
    619  f435							; 8c
    620  f435							; little-endian means 0x0
    621  f435		       ad 31 11 	      lda	$1100 + [frame_1_jump - frame_1_start]
    622  f438		       69 02		      adc	#2
    623  f43a		       8d 31 10 	      sta	$1000 + [frame_1_jump - frame_1_start]
    624  f43d
    625  f43d							; Start new line + HMOVE
    626  f43d							;sta HMOVE
    627  f43d							;sleep 8
    628  f43d
    629  f43d		       c6 85		      dec	SpriteEnd
    630  f43f
    631  f43f		       a9 60		      lda	#EMR1
    632  f441		       a2 06		      ldx	#EMR2
    633  f443		       a0 66		      ldy	#EMR3
    634  f445		       84 1c		      .byte.b	GEM_00, EMERALD_SP
    635  f447
    636  f447							; 22
    637  f447		       85 11		      sta	EMERALD_SP_RESET
      0  f449					      sleep	6
      1  f449				   .CYCLES    SET	6
      2  f449
      3  f449				  -	      IF	.CYCLES < 2
      4  f449				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f449				  -	      ERR
      6  f449					      ENDIF
      7  f449
      8  f449				  -	      IF	.CYCLES & 1
      9  f449				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f449				  -	      nop	0
     11  f449				  -	      ELSE
     12  f449				  -	      bit	VSYNC
     13  f449				  -	      ENDIF
     14  f449				  -.CYCLES    SET	.CYCLES - 3
     15  f449					      ENDIF
     16  f449
     17  f449					      REPEAT	.CYCLES / 2
     18  f449		       ea		      nop
     17  f449					      REPEND
     18  f44a		       ea		      nop
     17  f44a					      REPEND
     18  f44b		       ea		      nop
     19  f44c					      REPEND
    639  f44c		       84 1c		      .byte.b	GEM_04, EMERALD_SP
    640  f44e		       85 11		      sta	EMERALD_SP_RESET
    641  f450		       84 1c		      .byte.b	GEM_09, EMERALD_SP
      0  f452					      sleep	3
      1  f452				   .CYCLES    SET	3
      2  f452
      3  f452				  -	      IF	.CYCLES < 2
      4  f452				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f452				  -	      ERR
      6  f452					      ENDIF
      7  f452
      8  f452					      IF	.CYCLES & 1
      9  f452					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f452		       04 00		      nop	0
     11  f454				  -	      ELSE
     12  f454				  -	      bit	VSYNC
     13  f454					      ENDIF
     14  f454				   .CYCLES    SET	.CYCLES - 3
     15  f454					      ENDIF
     16  f454
     17  f454				  -	      REPEAT	.CYCLES / 2
     18  f454				  -	      nop
     19  f454					      REPEND
    643  f454		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    644  f456		       85 11		      sta	EMERALD_SP_RESET
    645  f458		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE
    646  f45a		       84 1c		      .byte.b	GEM_18, EMERALD_SP
    647  f45c		       85 2b		      sta	HMCLR	; movable
    648  f45e		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    649  f460		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    650  f462
    651  f462							; cycle 64 (start of right border)
      0  f462					      sleep	7
      1  f462				   .CYCLES    SET	7
      2  f462
      3  f462				  -	      IF	.CYCLES < 2
      4  f462				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f462				  -	      ERR
      6  f462					      ENDIF
      7  f462
      8  f462					      IF	.CYCLES & 1
      9  f462					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f462		       04 00		      nop	0
     11  f464				  -	      ELSE
     12  f464				  -	      bit	VSYNC
     13  f464					      ENDIF
     14  f464				   .CYCLES    SET	.CYCLES - 3
     15  f464					      ENDIF
     16  f464
     17  f464					      REPEAT	.CYCLES / 2
     18  f464		       ea		      nop
     17  f464					      REPEND
     18  f465		       ea		      nop
     19  f466					      REPEND
    653  f466				   frame_1_jump
    654  f466		       6c 08 f3 	      jmp	(JUMP_TABLES)
    655  f469				   frame_1_end
    656  f469
    657  f469							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    658  f469
    659  f469							; FRAME 2
    660  f469
    661  f469				   frame_2_start
    662  f469							; 8c
    663  f469							; little-endian means 0x0
    664  f469		       ad 35 11 	      lda	$1100 + [frame_2_jump - frame_2_start]
    665  f46c		       69 02		      adc	#2
    666  f46e		       8d 35 10 	      sta	$1000 + [frame_2_jump - frame_2_start]
    667  f471
    668  f471							; Enable missile (using excessive lda instructions)
    669  f471		       a9 02		      lda	#02
    670  f473		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE
    671  f475
    672  f475		       c6 85		      dec	SpriteEnd
      0  f477					      sleep	5
      1  f477				   .CYCLES    SET	5
      2  f477
      3  f477				  -	      IF	.CYCLES < 2
      4  f477				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f477				  -	      ERR
      6  f477					      ENDIF
      7  f477
      8  f477					      IF	.CYCLES & 1
      9  f477					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f477		       04 00		      nop	0
     11  f479				  -	      ELSE
     12  f479				  -	      bit	VSYNC
     13  f479					      ENDIF
     14  f479				   .CYCLES    SET	.CYCLES - 3
     15  f479					      ENDIF
     16  f479
     17  f479					      REPEAT	.CYCLES / 2
     18  f479		       ea		      nop
     19  f47a					      REPEND
    674  f47a							; ldy SpriteEnd
    675  f47a							; lda Frame0,Y
    676  f47a							; sta JET_SP
    677  f47a
    678  f47a							; moved: lda #T1
    679  f47a		       a2 0c		      ldx	#T2
    680  f47c		       a0 cc		      ldy	#T3
    681  f47e		       84 1c		      .byte.b	GEM_02, EMERALD_SP
    682  f480
    683  f480							; cycle 25
    684  f480		       85 11		      sta	EMERALD_SP_RESET
    685  f482		       a9 c0		      lda	#T1	; movable
      0  f484					      sleep	4
      1  f484				   .CYCLES    SET	4
      2  f484
      3  f484				  -	      IF	.CYCLES < 2
      4  f484				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f484				  -	      ERR
      6  f484					      ENDIF
      7  f484
      8  f484				  -	      IF	.CYCLES & 1
      9  f484				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f484				  -	      nop	0
     11  f484				  -	      ELSE
     12  f484				  -	      bit	VSYNC
     13  f484				  -	      ENDIF
     14  f484				  -.CYCLES    SET	.CYCLES - 3
     15  f484					      ENDIF
     16  f484
     17  f484					      REPEAT	.CYCLES / 2
     18  f484		       ea		      nop
     17  f484					      REPEND
     18  f485		       ea		      nop
     19  f486					      REPEND
    687  f486		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    688  f488		       85 11		      sta	EMERALD_SP_RESET
    689  f48a		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    690  f48c							; stx EMERALD_MI_ENABLE ; stx disables it
      0  f48c					      sleep	3
      1  f48c				   .CYCLES    SET	3
      2  f48c
      3  f48c				  -	      IF	.CYCLES < 2
      4  f48c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f48c				  -	      ERR
      6  f48c					      ENDIF
      7  f48c
      8  f48c					      IF	.CYCLES & 1
      9  f48c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f48c		       04 00		      nop	0
     11  f48e				  -	      ELSE
     12  f48e				  -	      bit	VSYNC
     13  f48e					      ENDIF
     14  f48e				   .CYCLES    SET	.CYCLES - 3
     15  f48e					      ENDIF
     16  f48e
     17  f48e				  -	      REPEAT	.CYCLES / 2
     18  f48e				  -	      nop
     19  f48e					      REPEND
    692  f48e		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    693  f490		       85 11		      sta	EMERALD_SP_RESET
    694  f492		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    695  f494		       84 1c		      .byte.b	GEM_24, EMERALD_SP
    696  f496		       85 2b		      sta	HMCLR	; movable
      0  f498					      sleep	3
      1  f498				   .CYCLES    SET	3
      2  f498
      3  f498				  -	      IF	.CYCLES < 2
      4  f498				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f498				  -	      ERR
      6  f498					      ENDIF
      7  f498
      8  f498					      IF	.CYCLES & 1
      9  f498					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f498		       04 00		      nop	0
     11  f49a				  -	      ELSE
     12  f49a				  -	      bit	VSYNC
     13  f49a					      ENDIF
     14  f49a				   .CYCLES    SET	.CYCLES - 3
     15  f49a					      ENDIF
     16  f49a
     17  f49a				  -	      REPEAT	.CYCLES / 2
     18  f49a				  -	      nop
     19  f49a					      REPEND
    698  f49a
    699  f49a							; cycle 64 (start of right border)
      0  f49a					      sleep	7
      1  f49a				   .CYCLES    SET	7
      2  f49a
      3  f49a				  -	      IF	.CYCLES < 2
      4  f49a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f49a				  -	      ERR
      6  f49a					      ENDIF
      7  f49a
      8  f49a					      IF	.CYCLES & 1
      9  f49a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f49a		       04 00		      nop	0
     11  f49c				  -	      ELSE
     12  f49c				  -	      bit	VSYNC
     13  f49c					      ENDIF
     14  f49c				   .CYCLES    SET	.CYCLES - 3
     15  f49c					      ENDIF
     16  f49c
     17  f49c					      REPEAT	.CYCLES / 2
     18  f49c		       ea		      nop
     17  f49c					      REPEND
     18  f49d		       ea		      nop
     19  f49e					      REPEND
    701  f49e				   frame_2_jump
    702  f49e		       6c 08 f3 	      jmp	(JUMP_TABLES)
    703  f4a1				   frame_2_end
    704  f4a1
    705  f4a1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    706  f4a1
    707  f4a1							; SUBROUTINE
    708  f4a1							; Read joystick movement and apply to object 0
    709  f4a1				   MoveJoystick
    710  f4a1							; Move vertically
    711  f4a1							; (up and down are actually reversed since ypos starts at bottom)
    712  f4a1							;     ldx YPos
    713  f4a1		       a9 10		      lda	#%00010000	;Up?
    714  f4a3		       2c 80 02 	      bit	SWCHA
    715  f4a6		       d0 0d		      bne	SkipMoveUp
    716  f4a8
    717  f4a8		       18		      clc
    718  f4a9		       a5 88		      lda	Speed2
    719  f4ab		       69 0c		      adc	#12
    720  f4ad		       85 88		      sta	Speed2
    721  f4af		       a5 87		      lda	Speed1
    722  f4b1		       69 00		      adc	#00
    723  f4b3		       85 87		      sta	Speed1
    724  f4b5
    725  f4b5				   SkipMoveUp
    726  f4b5		       a6 86		      ldx	XPos
    727  f4b7
    728  f4b7							; Only check left/right on odd frames;
    729  f4b7							; TODO make this just a fractional speed
    730  f4b7							; rather than dropping frames
    731  f4b7		       a9 01		      lda	#01
    732  f4b9		       25 83		      and	FrameCount
    733  f4bb		       d0 18		      bne	SkipMoveRight
    734  f4bd
    735  f4bd
    736  f4bd							; Move horizontally
    737  f4bd		       a9 40		      lda	#%01000000	;Left?
    738  f4bf		       2c 80 02 	      bit	SWCHA
    739  f4c2		       d0 05		      bne	SkipMoveLeft
    740  f4c4		       e0 1d		      cpx	#29
    741  f4c6		       90 01		      bcc	SkipMoveLeft
    742  f4c8		       ca		      dex
    743  f4c9
    744  f4c9							; Reflect
    745  f4c9							;     lda #$ff
    746  f4c9							;     sta REFP0
    747  f4c9				   SkipMoveLeft
    748  f4c9		       a9 80		      lda	#%10000000	;Right?
    749  f4cb		       2c 80 02 	      bit	SWCHA
    750  f4ce		       d0 05		      bne	SkipMoveRight
    751  f4d0		       e0 80		      cpx	#128
    752  f4d2		       b0 01		      bcs	SkipMoveRight
    753  f4d4		       e8		      inx
    754  f4d5
    755  f4d5							; Reflect
    756  f4d5							;     lda #$0
    757  f4d5							;     sta REFP0
    758  f4d5				   SkipMoveRight
    759  f4d5		       86 86		      stx	XPos
    760  f4d7		       60		      rts
    761  f4d8
    762  f4d8
    763  f4d8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    764  f4d8
    765  f4d8
    766  f4d8				   SpeedCalculation
    767  f4d8		       38		      sec
    768  f4d9		       a5 88		      lda	Speed2
    769  f4db		       e9 07		      sbc	#7
    770  f4dd		       85 88		      sta	Speed2
    771  f4df		       a5 87		      lda	Speed1
    772  f4e1		       e9 00		      sbc	#0
    773  f4e3		       85 87		      sta	Speed1
    774  f4e5
    775  f4e5		       18		      clc
    776  f4e6		       a5 8a		      lda	YPos2
    777  f4e8		       65 88		      adc	Speed2
    778  f4ea		       85 8a		      sta	YPos2
    779  f4ec		       a5 89		      lda	YPos
    780  f4ee		       65 87		      adc	Speed1
    781  f4f0		       85 89		      sta	YPos
    782  f4f2
    783  f4f2		       c9 32		      cmp	#FLOOR_OFFSET
    784  f4f4		       b0 0a		      bcs	NewThing2
    785  f4f6
    786  f4f6							; Reset everything?
    787  f4f6		       a9 32		      lda	#FLOOR_OFFSET
    788  f4f8		       85 89		      sta	YPos
    789  f4fa		       a9 00		      lda	#0
    790  f4fc		       85 87		      sta	Speed1
    791  f4fe		       85 88		      sta	Speed2
    792  f500				   NewThing2
    793  f500		       60		      rts
    794  f501
    795  f501
    796  f501
    797  f501							; Subroutine
    798  f501				   SetHorizPos
    799  f501		       85 02		      sta	WSYNC	; start a new line
    800  f503		       24 00		      bit	0	; waste 3 cycles
    801  f505		       38		      sec		; set carry flag
    802  f506				   DivideLoop
    803  f506		       e9 0f		      sbc	#15	; subtract 15
    804  f508		       b0 fc		      bcs	DivideLoop	; branch until negative
    805  f50a		       49 07		      eor	#7	; calculate fine offset
    806  f50c		       0a		      asl
    807  f50d		       0a		      asl
    808  f50e		       0a		      asl
    809  f50f		       0a		      asl
    810  f510		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    811  f512		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    812  f514		       60		      rts		; return to caller
    813  f515
    814  f515
    815  f515
    816  f600		       00 00 00 00*	      align	256
    817  f600
    818  f600							; Bitmap data for character "standing" position
    819  f600							; Comical amount of 0's for now to simplify sprite rendering
    820  f600
    821  f600							; Y can be from:
    822  f600							;     SPRITE_HEIGHT to (8*ROW_COUNT)
    823  f600							; SpriteEnd: 8..128
    824  f600							; Frame0 should start at +120 so the Y rollunder of -$120 is OK
    825  f600					      REPEAT	124
    826  f600		       00		      .byte.b	0
    825  f600					      REPEND
    826  f601		       00		      .byte.b	0
    825  f601					      REPEND
    826  f602		       00		      .byte.b	0
    825  f602					      REPEND
    826  f603		       00		      .byte.b	0
    825  f603					      REPEND
    826  f604		       00		      .byte.b	0
    825  f604					      REPEND
    826  f605		       00		      .byte.b	0
    825  f605					      REPEND
    826  f606		       00		      .byte.b	0
    825  f606					      REPEND
    826  f607		       00		      .byte.b	0
    825  f607					      REPEND
    826  f608		       00		      .byte.b	0
    825  f608					      REPEND
    826  f609		       00		      .byte.b	0
    825  f609					      REPEND
    826  f60a		       00		      .byte.b	0
    825  f60a					      REPEND
    826  f60b		       00		      .byte.b	0
    825  f60b					      REPEND
    826  f60c		       00		      .byte.b	0
    825  f60c					      REPEND
    826  f60d		       00		      .byte.b	0
    825  f60d					      REPEND
    826  f60e		       00		      .byte.b	0
    825  f60e					      REPEND
    826  f60f		       00		      .byte.b	0
    825  f60f					      REPEND
    826  f610		       00		      .byte.b	0
    825  f610					      REPEND
    826  f611		       00		      .byte.b	0
    825  f611					      REPEND
    826  f612		       00		      .byte.b	0
    825  f612					      REPEND
    826  f613		       00		      .byte.b	0
    825  f613					      REPEND
    826  f614		       00		      .byte.b	0
    825  f614					      REPEND
    826  f615		       00		      .byte.b	0
    825  f615					      REPEND
    826  f616		       00		      .byte.b	0
    825  f616					      REPEND
    826  f617		       00		      .byte.b	0
    825  f617					      REPEND
    826  f618		       00		      .byte.b	0
    825  f618					      REPEND
    826  f619		       00		      .byte.b	0
    825  f619					      REPEND
    826  f61a		       00		      .byte.b	0
    825  f61a					      REPEND
    826  f61b		       00		      .byte.b	0
    825  f61b					      REPEND
    826  f61c		       00		      .byte.b	0
    825  f61c					      REPEND
    826  f61d		       00		      .byte.b	0
    825  f61d					      REPEND
    826  f61e		       00		      .byte.b	0
    825  f61e					      REPEND
    826  f61f		       00		      .byte.b	0
    825  f61f					      REPEND
    826  f620		       00		      .byte.b	0
    825  f620					      REPEND
    826  f621		       00		      .byte.b	0
    825  f621					      REPEND
    826  f622		       00		      .byte.b	0
    825  f622					      REPEND
    826  f623		       00		      .byte.b	0
    825  f623					      REPEND
    826  f624		       00		      .byte.b	0
    825  f624					      REPEND
    826  f625		       00		      .byte.b	0
    825  f625					      REPEND
    826  f626		       00		      .byte.b	0
    825  f626					      REPEND
    826  f627		       00		      .byte.b	0
    825  f627					      REPEND
    826  f628		       00		      .byte.b	0
    825  f628					      REPEND
    826  f629		       00		      .byte.b	0
    825  f629					      REPEND
    826  f62a		       00		      .byte.b	0
    825  f62a					      REPEND
    826  f62b		       00		      .byte.b	0
    825  f62b					      REPEND
    826  f62c		       00		      .byte.b	0
    825  f62c					      REPEND
    826  f62d		       00		      .byte.b	0
    825  f62d					      REPEND
    826  f62e		       00		      .byte.b	0
    825  f62e					      REPEND
    826  f62f		       00		      .byte.b	0
    825  f62f					      REPEND
    826  f630		       00		      .byte.b	0
    825  f630					      REPEND
    826  f631		       00		      .byte.b	0
    825  f631					      REPEND
    826  f632		       00		      .byte.b	0
    825  f632					      REPEND
    826  f633		       00		      .byte.b	0
    825  f633					      REPEND
    826  f634		       00		      .byte.b	0
    825  f634					      REPEND
    826  f635		       00		      .byte.b	0
    825  f635					      REPEND
    826  f636		       00		      .byte.b	0
    825  f636					      REPEND
    826  f637		       00		      .byte.b	0
    825  f637					      REPEND
    826  f638		       00		      .byte.b	0
    825  f638					      REPEND
    826  f639		       00		      .byte.b	0
    825  f639					      REPEND
    826  f63a		       00		      .byte.b	0
    825  f63a					      REPEND
    826  f63b		       00		      .byte.b	0
    825  f63b					      REPEND
    826  f63c		       00		      .byte.b	0
    825  f63c					      REPEND
    826  f63d		       00		      .byte.b	0
    825  f63d					      REPEND
    826  f63e		       00		      .byte.b	0
    825  f63e					      REPEND
    826  f63f		       00		      .byte.b	0
    825  f63f					      REPEND
    826  f640		       00		      .byte.b	0
    825  f640					      REPEND
    826  f641		       00		      .byte.b	0
    825  f641					      REPEND
    826  f642		       00		      .byte.b	0
    825  f642					      REPEND
    826  f643		       00		      .byte.b	0
    825  f643					      REPEND
    826  f644		       00		      .byte.b	0
    825  f644					      REPEND
    826  f645		       00		      .byte.b	0
    825  f645					      REPEND
    826  f646		       00		      .byte.b	0
    825  f646					      REPEND
    826  f647		       00		      .byte.b	0
    825  f647					      REPEND
    826  f648		       00		      .byte.b	0
    825  f648					      REPEND
    826  f649		       00		      .byte.b	0
    825  f649					      REPEND
    826  f64a		       00		      .byte.b	0
    825  f64a					      REPEND
    826  f64b		       00		      .byte.b	0
    825  f64b					      REPEND
    826  f64c		       00		      .byte.b	0
    825  f64c					      REPEND
    826  f64d		       00		      .byte.b	0
    825  f64d					      REPEND
    826  f64e		       00		      .byte.b	0
    825  f64e					      REPEND
    826  f64f		       00		      .byte.b	0
    825  f64f					      REPEND
    826  f650		       00		      .byte.b	0
    825  f650					      REPEND
    826  f651		       00		      .byte.b	0
    825  f651					      REPEND
    826  f652		       00		      .byte.b	0
    825  f652					      REPEND
    826  f653		       00		      .byte.b	0
    825  f653					      REPEND
    826  f654		       00		      .byte.b	0
    825  f654					      REPEND
    826  f655		       00		      .byte.b	0
    825  f655					      REPEND
    826  f656		       00		      .byte.b	0
    825  f656					      REPEND
    826  f657		       00		      .byte.b	0
    825  f657					      REPEND
    826  f658		       00		      .byte.b	0
    825  f658					      REPEND
    826  f659		       00		      .byte.b	0
    825  f659					      REPEND
    826  f65a		       00		      .byte.b	0
    825  f65a					      REPEND
    826  f65b		       00		      .byte.b	0
    825  f65b					      REPEND
    826  f65c		       00		      .byte.b	0
    825  f65c					      REPEND
    826  f65d		       00		      .byte.b	0
    825  f65d					      REPEND
    826  f65e		       00		      .byte.b	0
    825  f65e					      REPEND
    826  f65f		       00		      .byte.b	0
    825  f65f					      REPEND
    826  f660		       00		      .byte.b	0
    825  f660					      REPEND
    826  f661		       00		      .byte.b	0
    825  f661					      REPEND
    826  f662		       00		      .byte.b	0
    825  f662					      REPEND
    826  f663		       00		      .byte.b	0
    825  f663					      REPEND
    826  f664		       00		      .byte.b	0
    825  f664					      REPEND
    826  f665		       00		      .byte.b	0
    825  f665					      REPEND
    826  f666		       00		      .byte.b	0
    825  f666					      REPEND
    826  f667		       00		      .byte.b	0
    825  f667					      REPEND
    826  f668		       00		      .byte.b	0
    825  f668					      REPEND
    826  f669		       00		      .byte.b	0
    825  f669					      REPEND
    826  f66a		       00		      .byte.b	0
    825  f66a					      REPEND
    826  f66b		       00		      .byte.b	0
    825  f66b					      REPEND
    826  f66c		       00		      .byte.b	0
    825  f66c					      REPEND
    826  f66d		       00		      .byte.b	0
    825  f66d					      REPEND
    826  f66e		       00		      .byte.b	0
    825  f66e					      REPEND
    826  f66f		       00		      .byte.b	0
    825  f66f					      REPEND
    826  f670		       00		      .byte.b	0
    825  f670					      REPEND
    826  f671		       00		      .byte.b	0
    825  f671					      REPEND
    826  f672		       00		      .byte.b	0
    825  f672					      REPEND
    826  f673		       00		      .byte.b	0
    825  f673					      REPEND
    826  f674		       00		      .byte.b	0
    825  f674					      REPEND
    826  f675		       00		      .byte.b	0
    825  f675					      REPEND
    826  f676		       00		      .byte.b	0
    825  f676					      REPEND
    826  f677		       00		      .byte.b	0
    825  f677					      REPEND
    826  f678		       00		      .byte.b	0
    825  f678					      REPEND
    826  f679		       00		      .byte.b	0
    825  f679					      REPEND
    826  f67a		       00		      .byte.b	0
    825  f67a					      REPEND
    826  f67b		       00		      .byte.b	0
    827  f67c					      REPEND
    828  f67c				   Frame0
    829  f67c		       00		      .byte.b	#%00000000
    830  f67d		       60		      .byte.b	#%01100000
    831  f67e		       60		      .byte.b	#%01100000
    832  f67f		       60		      .byte.b	#%01100000
    833  f680		       c0		      .byte.b	#%11000000
    834  f681		       c0		      .byte.b	#%11000000
    835  f682		       f0		      .byte.b	#%11110000
    836  f683		       c0		      .byte.b	#%11000000
    837  f684		       c0		      .byte.b	#%11000000
    838  f685		       00		      .byte.b	#%00000000
    839  f686					      REPEAT	124
    840  f686		       00		      .byte.b	0
    839  f686					      REPEND
    840  f687		       00		      .byte.b	0
    839  f687					      REPEND
    840  f688		       00		      .byte.b	0
    839  f688					      REPEND
    840  f689		       00		      .byte.b	0
    839  f689					      REPEND
    840  f68a		       00		      .byte.b	0
    839  f68a					      REPEND
    840  f68b		       00		      .byte.b	0
    839  f68b					      REPEND
    840  f68c		       00		      .byte.b	0
    839  f68c					      REPEND
    840  f68d		       00		      .byte.b	0
    839  f68d					      REPEND
    840  f68e		       00		      .byte.b	0
    839  f68e					      REPEND
    840  f68f		       00		      .byte.b	0
    839  f68f					      REPEND
    840  f690		       00		      .byte.b	0
    839  f690					      REPEND
    840  f691		       00		      .byte.b	0
    839  f691					      REPEND
    840  f692		       00		      .byte.b	0
    839  f692					      REPEND
    840  f693		       00		      .byte.b	0
    839  f693					      REPEND
    840  f694		       00		      .byte.b	0
    839  f694					      REPEND
    840  f695		       00		      .byte.b	0
    839  f695					      REPEND
    840  f696		       00		      .byte.b	0
    839  f696					      REPEND
    840  f697		       00		      .byte.b	0
    839  f697					      REPEND
    840  f698		       00		      .byte.b	0
    839  f698					      REPEND
    840  f699		       00		      .byte.b	0
    839  f699					      REPEND
    840  f69a		       00		      .byte.b	0
    839  f69a					      REPEND
    840  f69b		       00		      .byte.b	0
    839  f69b					      REPEND
    840  f69c		       00		      .byte.b	0
    839  f69c					      REPEND
    840  f69d		       00		      .byte.b	0
    839  f69d					      REPEND
    840  f69e		       00		      .byte.b	0
    839  f69e					      REPEND
    840  f69f		       00		      .byte.b	0
    839  f69f					      REPEND
    840  f6a0		       00		      .byte.b	0
    839  f6a0					      REPEND
    840  f6a1		       00		      .byte.b	0
    839  f6a1					      REPEND
    840  f6a2		       00		      .byte.b	0
    839  f6a2					      REPEND
    840  f6a3		       00		      .byte.b	0
    839  f6a3					      REPEND
    840  f6a4		       00		      .byte.b	0
    839  f6a4					      REPEND
    840  f6a5		       00		      .byte.b	0
    839  f6a5					      REPEND
    840  f6a6		       00		      .byte.b	0
    839  f6a6					      REPEND
    840  f6a7		       00		      .byte.b	0
    839  f6a7					      REPEND
    840  f6a8		       00		      .byte.b	0
    839  f6a8					      REPEND
    840  f6a9		       00		      .byte.b	0
    839  f6a9					      REPEND
    840  f6aa		       00		      .byte.b	0
    839  f6aa					      REPEND
    840  f6ab		       00		      .byte.b	0
    839  f6ab					      REPEND
    840  f6ac		       00		      .byte.b	0
    839  f6ac					      REPEND
    840  f6ad		       00		      .byte.b	0
    839  f6ad					      REPEND
    840  f6ae		       00		      .byte.b	0
    839  f6ae					      REPEND
    840  f6af		       00		      .byte.b	0
    839  f6af					      REPEND
    840  f6b0		       00		      .byte.b	0
    839  f6b0					      REPEND
    840  f6b1		       00		      .byte.b	0
    839  f6b1					      REPEND
    840  f6b2		       00		      .byte.b	0
    839  f6b2					      REPEND
    840  f6b3		       00		      .byte.b	0
    839  f6b3					      REPEND
    840  f6b4		       00		      .byte.b	0
    839  f6b4					      REPEND
    840  f6b5		       00		      .byte.b	0
    839  f6b5					      REPEND
    840  f6b6		       00		      .byte.b	0
    839  f6b6					      REPEND
    840  f6b7		       00		      .byte.b	0
    839  f6b7					      REPEND
    840  f6b8		       00		      .byte.b	0
    839  f6b8					      REPEND
    840  f6b9		       00		      .byte.b	0
    839  f6b9					      REPEND
    840  f6ba		       00		      .byte.b	0
    839  f6ba					      REPEND
    840  f6bb		       00		      .byte.b	0
    839  f6bb					      REPEND
    840  f6bc		       00		      .byte.b	0
    839  f6bc					      REPEND
    840  f6bd		       00		      .byte.b	0
    839  f6bd					      REPEND
    840  f6be		       00		      .byte.b	0
    839  f6be					      REPEND
    840  f6bf		       00		      .byte.b	0
    839  f6bf					      REPEND
    840  f6c0		       00		      .byte.b	0
    839  f6c0					      REPEND
    840  f6c1		       00		      .byte.b	0
    839  f6c1					      REPEND
    840  f6c2		       00		      .byte.b	0
    839  f6c2					      REPEND
    840  f6c3		       00		      .byte.b	0
    839  f6c3					      REPEND
    840  f6c4		       00		      .byte.b	0
    839  f6c4					      REPEND
    840  f6c5		       00		      .byte.b	0
    839  f6c5					      REPEND
    840  f6c6		       00		      .byte.b	0
    839  f6c6					      REPEND
    840  f6c7		       00		      .byte.b	0
    839  f6c7					      REPEND
    840  f6c8		       00		      .byte.b	0
    839  f6c8					      REPEND
    840  f6c9		       00		      .byte.b	0
    839  f6c9					      REPEND
    840  f6ca		       00		      .byte.b	0
    839  f6ca					      REPEND
    840  f6cb		       00		      .byte.b	0
    839  f6cb					      REPEND
    840  f6cc		       00		      .byte.b	0
    839  f6cc					      REPEND
    840  f6cd		       00		      .byte.b	0
    839  f6cd					      REPEND
    840  f6ce		       00		      .byte.b	0
    839  f6ce					      REPEND
    840  f6cf		       00		      .byte.b	0
    839  f6cf					      REPEND
    840  f6d0		       00		      .byte.b	0
    839  f6d0					      REPEND
    840  f6d1		       00		      .byte.b	0
    839  f6d1					      REPEND
    840  f6d2		       00		      .byte.b	0
    839  f6d2					      REPEND
    840  f6d3		       00		      .byte.b	0
    839  f6d3					      REPEND
    840  f6d4		       00		      .byte.b	0
    839  f6d4					      REPEND
    840  f6d5		       00		      .byte.b	0
    839  f6d5					      REPEND
    840  f6d6		       00		      .byte.b	0
    839  f6d6					      REPEND
    840  f6d7		       00		      .byte.b	0
    839  f6d7					      REPEND
    840  f6d8		       00		      .byte.b	0
    839  f6d8					      REPEND
    840  f6d9		       00		      .byte.b	0
    839  f6d9					      REPEND
    840  f6da		       00		      .byte.b	0
    839  f6da					      REPEND
    840  f6db		       00		      .byte.b	0
    839  f6db					      REPEND
    840  f6dc		       00		      .byte.b	0
    839  f6dc					      REPEND
    840  f6dd		       00		      .byte.b	0
    839  f6dd					      REPEND
    840  f6de		       00		      .byte.b	0
    839  f6de					      REPEND
    840  f6df		       00		      .byte.b	0
    839  f6df					      REPEND
    840  f6e0		       00		      .byte.b	0
    839  f6e0					      REPEND
    840  f6e1		       00		      .byte.b	0
    839  f6e1					      REPEND
    840  f6e2		       00		      .byte.b	0
    839  f6e2					      REPEND
    840  f6e3		       00		      .byte.b	0
    839  f6e3					      REPEND
    840  f6e4		       00		      .byte.b	0
    839  f6e4					      REPEND
    840  f6e5		       00		      .byte.b	0
    839  f6e5					      REPEND
    840  f6e6		       00		      .byte.b	0
    839  f6e6					      REPEND
    840  f6e7		       00		      .byte.b	0
    839  f6e7					      REPEND
    840  f6e8		       00		      .byte.b	0
    839  f6e8					      REPEND
    840  f6e9		       00		      .byte.b	0
    839  f6e9					      REPEND
    840  f6ea		       00		      .byte.b	0
    839  f6ea					      REPEND
    840  f6eb		       00		      .byte.b	0
    839  f6eb					      REPEND
    840  f6ec		       00		      .byte.b	0
    839  f6ec					      REPEND
    840  f6ed		       00		      .byte.b	0
    839  f6ed					      REPEND
    840  f6ee		       00		      .byte.b	0
    839  f6ee					      REPEND
    840  f6ef		       00		      .byte.b	0
    839  f6ef					      REPEND
    840  f6f0		       00		      .byte.b	0
    839  f6f0					      REPEND
    840  f6f1		       00		      .byte.b	0
    839  f6f1					      REPEND
    840  f6f2		       00		      .byte.b	0
    839  f6f2					      REPEND
    840  f6f3		       00		      .byte.b	0
    839  f6f3					      REPEND
    840  f6f4		       00		      .byte.b	0
    839  f6f4					      REPEND
    840  f6f5		       00		      .byte.b	0
    839  f6f5					      REPEND
    840  f6f6		       00		      .byte.b	0
    839  f6f6					      REPEND
    840  f6f7		       00		      .byte.b	0
    839  f6f7					      REPEND
    840  f6f8		       00		      .byte.b	0
    839  f6f8					      REPEND
    840  f6f9		       00		      .byte.b	0
    839  f6f9					      REPEND
    840  f6fa		       00		      .byte.b	0
    839  f6fa					      REPEND
    840  f6fb		       00		      .byte.b	0
    839  f6fb					      REPEND
    840  f6fc		       00		      .byte.b	0
    839  f6fc					      REPEND
    840  f6fd		       00		      .byte.b	0
    839  f6fd					      REPEND
    840  f6fe		       00		      .byte.b	0
    839  f6fe					      REPEND
    840  f6ff		       00		      .byte.b	0
    839  f6ff					      REPEND
    840  f700		       00		      .byte.b	0
    839  f700					      REPEND
    840  f701		       00		      .byte.b	0
    841  f702					      REPEND
    842  f702
    843  f702
    844  f702							; Epilogue
    845  fffc					      org	$fffc
    846  fffc		       00 f2		      .word.w	Start
    847  fffe		       00 f2		      .word.w	Start
