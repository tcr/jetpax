------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00a8 ????				      seg.u	Variables
      2 U00a8 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   Temp       byte.b
      6 U0081
      7 U0081							; Counters
      8 U0081		       00	   RowCount   byte.b
      9 U0082		       00	   LoopCount  byte.b
     10 U0083		       00	   FrameCount byte.b
     11 U0084
     12 U0084		       00	   YP1	      byte.b
     13 U0085		       00	   SpriteEnd  byte.b
     14 U0086		       00	   XPos       byte.b		; X position of player sprite
     15 U0087
     16 U0087
     17 U0087		       00	   Speed1     byte.b
     18 U0088		       00	   Speed2     byte.b
     19 U0089
     20 U0089		       00	   YPos       byte.b		; Y position of player sprite
     21 U008a		       00	   YPos2      byte.b
     22 U008b
     23 U008b		       00	   GEM_02_TARGET byte.b
     24 U008c
     25 U008c		       00	   JMP_ADDR   byte.b
     26 U008d		       00	   JMP_ADDR_2 byte.b
     27 U008e
     28 U008e		       00	   ROW_DEMO_INDEX byte.b
     29 U008f
     30 U008f		       00	   RamNibbleTemp byte.b
     31 U0090		       00	   RamNibbleVar1 byte.b
     32 U0091		       00	   RamNibbleVar2 byte.b
     33 U0092		       00	   RamZeroByte byte.b
     34 U0093		       00	   RamLowerSixByte byte.b
     35 U0094		       00	   RamStackBkp byte.b
     36 U0095
     37 U0095							; Kernel support
     38 U0095		       00	   RamPF1Value byte.b
     39 U0096		       00	   RamKernelGRP0 byte.b		; temp
     40 U0097		       00	   RamKernelPhpTarget byte.b
     41 U0098		       00	   RamKernelX byte.b
     42 U0099		       00	   RamKernelY byte.b
     43 U009a		       00	   RamKernelGemini1 byte.b
     44 U009b		       00	   RamKernelGemini1Reg byte.b
     45 U009c		       00	   RamKernelGemini2 byte.b
     46 U009d		       00	   RamKernelGemini2Reg byte.b
     47 U009e		       00	   RamKernelGemini3 byte.b
     48 U009f		       00	   RamKernelGemini3Reg byte.b
     49 U00a0		       00	   RamKernelGemini4 byte.b
     50 U00a1		       00	   RamKernelGemini4Reg byte.b
     51 U00a2		       00	   RamKernelGemini5 byte.b
     52 U00a3
     53 U00a3		       00	   BuildKernelX byte.b
     54 U00a4		       00	   BuildKernelY byte.b
     55 U00a5		       00	   BuildKernelRST byte.b
     56 U00a6		       00	   BuildKernelGrp0 byte.b
     57 U00a7		       00	   BuildKernelVdel1 byte.b
     58 U00a8
     59 U00a8							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     60 U00a8
     61 U00a8		       00 10	   ROW_COUNT  =	16
     62 U00a8
     63 U00a8		       00 02	   SIGNAL_LINE =	$02
     64 U00a8
     65 U00a8							; RAM+ memory map
     66 U00a8		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     67 U00a8		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     68 U00a8		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     69 U00a8
     70 U00a8		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     71 U00a8		       f1 40	   RAMP_STORAGE_R =	$f140
     72 U00a8
     73 U00a8							; NUSIZ values
     74 U00a8
     75 U00a8		       00 13	   THREE_COPIES =	%00010011
     76 U00a8
     77 U00a8							; Colors
     78 U00a8
     79 U00a8		       00 42	   COL_BG     equ	$42
     80 U00a8		       00 cc	   COL_EMERALD equ	$CC
     81 U00a8		       00 cc	   COL_EMERALD_2 equ	$CC
     82 U00a8
     83 U00a8							; HMOVE values for missiles
     84 U00a8
     85 U00a8		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     86 U00a8		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     87 U00a8
     88 U00a8		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     89 U00a8		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     90 U00a8
     91 U00a8							; Missile values when 2A=RST
     92 U00a8							; KERNEL_B_MISSILE_SLEEP equ 46
     93 U00a8							; KERNEL_B_MISSILE_HMOVE equ $20
     94 U00a8
     95 U00a8							; Sprite details
     96 U00a8
     97 U00a8		       00 09	   SPRITE_HEIGHT equ	9
     98 U00a8
     99 U00a8		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    100 U00a8		       00 1c	   EMERALD_SP equ	GRP1
    101 U00a8		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    102 U00a8		       00 11	   EMERALD_SP_RESET equ	RESP1
    103 U00a8		       00 13	   EMERALD_MI_RESET equ	RESM1
    104 U00a8		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    105 U00a8		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    106 U00a8		       00 05	   EMERALD_COPIES equ	NUSIZ1
    107 U00a8
    108 U00a8		       00 1b	   JET_SP     equ	GRP0
    109 U00a8		       00 10	   JET_SP_RESET equ	RESP0
    110 U00a8		       00 20	   JET_SP_HMOVE equ	HMP0
    111 U00a8		       00 06	   JET_SP_COLOR equ	COLUP0
    112 U00a8
    113 U00a8							; Spriteend is HEIGHT_OFFSET - YPos
    114 U00a8		       00 c8	   HEIGHT_OFFSET equ	200
    115 U00a8
    116 U00a8							; Compared with YPos
    117 U00a8		       00 3e	   FLOOR_OFFSET equ	62
    118 U00a8		       00 be	   CEILING_OFFSET equ	190
    119 U00a8
    120 U00a8							; Starting player position
    121 U00a8		       00 3e	   YPosStart  equ	62
    122 U00a8		       00 37	   XPosStart  equ	55
    123 U00a8
    124 U00a8							; Top left corner
    125 U00a8							; YPosStart equ 190
    126 U00a8							; XPosStart equ 28
    127 U00a8
    128 U00a8							; Tick (every 8 frames)
    129 U00a8		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00a8
     64 U00a8							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 83		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 89		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 86		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 87		      sta	Speed1
     48  f243		       85 88		      sta	Speed2
     49  f245		       85 8a		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8e		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 92		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 93		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c d7 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 fa 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 fa 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 fa 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 fa 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelRST
      8  f27a							; Gemini 1A
      9  f27a					      ldy	GEM0A
     10  f27a					      jsr	KernelA_GenReset
     11  f27a				   .if_1
     12  f27a					      bne	.else_1
     13  f27a					      sec
     14  f27a					      rol
     15  f27a							; Special: Encoding RST0
     16  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     17  f27a					      ldy	#BC_LDA_IMM
     18  f27a					      sty	[KernelA_B - $100]
     19  f27a					      ldy	#%10100000
     20  f27a					      sty	[KernelA_B - $100 + 1]
     21  f27a							; Store 1A in GRP0
     22  f27a					      ldy	GEM1A
     23  f27a					      sty	BuildKernelGrp0
     24  f27a							; Gemini 1A is RESPx
     25  f27a					      ldy	#EMERALD_SP_RESET
     26  f27a					      sty	[KernelA_C - $100 + 1]
     27  f27a							; Turn 3-cycle NOP into 4-cycle
     28  f27a					      ldy	#$14
     29  f27a					      sty	[KernelA_D - $100]
     30  f27a					      jmp	.endif_1
     31  f27a							; [BIT DEPTH] #1 If-End @ 1
     32  f27a					      rol
     33  f27a
     34  f27a				   .else_1
     35  f27a					      clc
     36  f27a					      rol
     37  f27a							; Store 0A in GRP0
     38  f27a					      ldy	GEM0A
     39  f27a					      sty	BuildKernelGrp0
     40  f27a					      ldy	GEM1A
     41  f27a					      jsr	KernelA_GenReset
     42  f27a				   .if_2
     43  f27a					      bne	.else_2
     44  f27a					      sec
     45  f27a					      rol
     46  f27a							; GEM1ASWITCH
     47  f27a					      jmp	.endif_2
     48  f27a							; [BIT DEPTH] #2 If-End @ 2
     49  f27a
     50  f27a				   .else_2
     51  f27a					      clc
     52  f27a					      rol
     53  f27a							; Calculate the 1A value
     54  f27a					      ldy	SHARD_LUT_RF1
     55  f27a					      cpy	#1
     56  f27a					      .byte	$D0, #3
     57  f27a					      ldy	#RESP1
     58  f27a					      .byte	$2C
     59  f27a					      ldy	#GRP1
     60  f27a					      sty	RamKernelGemini1Reg
     61  f27a							; Set opcode
     62  f27a					      ldx	SHARD_LUT_RF1
     63  f27a					      cpx	#1
     64  f27a					      ldy	#BC_STX
     65  f27a					      .byte	$D0, #4
     66  f27a					      ldy	GEM1A
     67  f27a					      jsr	KernelA_UpdateRegs
     68  f27a					      sty	RamKernelGemini1
     69  f27a							; [BIT DEPTH] #2 *If-End @ 2
     70  f27a							; [BIT DEPTH] #2 Else-End @ 2
     71  f27a				   .endif_2
     72  f27a							; [BIT DEPTH] #1 *If-End @ 1
     73  f27a							; [BIT DEPTH] #1 Else-End @ 2
     74  f27a				   .endif_1
     75  f27a							; Gemini 2A
     76  f27a					      ldy	GEM2A
     77  f27a					      jsr	KernelA_GenReset
     78  f27a				   .if_3
     79  f27a					      bne	.else_3
     80  f27a					      sec
     81  f27a					      rol
     82  f27a					      jmp	.endif_3
     83  f27a							; [BIT DEPTH] #3 If-End @ 3
     84  f27a
     85  f27a				   .else_3
     86  f27a					      clc
     87  f27a					      rol
     88  f27a							; Set opcode
     89  f27a					      ldy	GEM2A
     90  f27a					      jsr	KernelA_UpdateRegs
     91  f27a					      sty	RamKernelGemini2
     92  f27a							; Set opcode target
     93  f27a					      ldy	SHARD_LUT_RF1
     94  f27a					      cpy	#2
     95  f27a					      .byte	$D0, #3
     96  f27a					      ldy	#RESP1
     97  f27a					      .byte	$2C
     98  f27a					      ldy	#GRP1
     99  f27a					      sty	RamKernelGemini2Reg
    100  f27a							; [BIT DEPTH] #3 *If-End @ 3
    101  f27a							; [BIT DEPTH] #3 Else-End @ 3
    102  f27a				   .endif_3
    103  f27a							; Gemini 3A
    104  f27a					      ldy	GEM3A
    105  f27a					      jsr	KernelA_GenReset
    106  f27a				   .if_4
    107  f27a					      bne	.else_4
    108  f27a					      sec
    109  f27a					      rol
    110  f27a					      jmp	.endif_4
    111  f27a							; [BIT DEPTH] #4 If-End @ 4
    112  f27a
    113  f27a				   .else_4
    114  f27a					      clc
    115  f27a					      rol
    116  f27a							; Set opcode
    117  f27a					      ldy	GEM3A
    118  f27a					      jsr	KernelA_UpdateRegs
    119  f27a					      sty	RamKernelGemini3
    120  f27a							; Set opcode target
    121  f27a					      ldy	SHARD_LUT_RF1
    122  f27a					      cpy	#3
    123  f27a					      .byte	$D0, #3
    124  f27a					      ldy	#RESP1
    125  f27a					      .byte	$2C
    126  f27a					      ldy	#GRP1
    127  f27a					      sty	RamKernelGemini3Reg
    128  f27a							; [BIT DEPTH] #4 *If-End @ 4
    129  f27a							; [BIT DEPTH] #4 Else-End @ 4
    130  f27a				   .endif_4
    131  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    132  f27a					      rol
    133  f27a					      rol
    134  f27a					      rol
    135  f27a					      rol
    136  f27a					      ENDM
    137  f27a
    138  f27a					      MAC	nibble_gem_kernel_a_2_build
    139  f27a					      lda	#0
    140  f27a							; VD1 default
    141  f27a					      ldx	GEM1A
    142  f27a					      stx	BuildKernelVdel1
    143  f27a							; Gemini 4A
    144  f27a					      ldx	SHARD_LUT_VD1
    145  f27a					      cpx	#4
    146  f27a				   .if_1
    147  f27a					      beq	.else_1
    148  f27a					      sec
    149  f27a					      rol
    150  f27a							; Set PHP
    151  f27a							; Update VDEL1
    152  f27a					      ldx	GEM4A
    153  f27a					      stx	BuildKernelVdel1
    154  f27a					      jmp	.endif_1
    155  f27a							; [BIT DEPTH] #1 If-End @ 1
    156  f27a
    157  f27a				   .else_1
    158  f27a					      clc
    159  f27a					      rol
    160  f27a					      ldy	GEM4A
    161  f27a					      jsr	KernelA_UpdateRegs
    162  f27a					      sty	RamKernelGemini4
    163  f27a							; Set PHP
    164  f27a							; [BIT DEPTH] #1 *If-End @ 1
    165  f27a							; [BIT DEPTH] #1 Else-End @ 1
    166  f27a				   .endif_1
    167  f27a							; VD1
    168  f27a							; ldy #SHARD_VD1
    169  f27a							; sty [KernelA_VDEL1 - $100]
    170  f27a							; GRP0
    171  f27a							; ldy #SHARD_GRP0
    172  f27a							; sty [KernelA_VDEL0 - $100]
    173  f27a							; X
    174  f27a							; ldy #SHARD_X
    175  f27a							; sty RamKernelX
    176  f27a							; Y
    177  f27a							; Gemini 5A
    178  f27a							; TODO eventually...?
    179  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    180  f27a					      rol
    181  f27a					      rol
    182  f27a					      rol
    183  f27a					      rol
    184  f27a					      rol
    185  f27a					      rol
    186  f27a					      rol
    187  f27a					      ENDM
    188  f27a
    189  f27a					      MAC	nibble_gem_kernel_b_build
    190  f27a					      lda	#0
    191  f27a					      ldx	#SENTINEL
    192  f27a					      stx	BuildKernelX
    193  f27a					      stx	BuildKernelY
    194  f27a					      stx	BuildKernelRST
    195  f27a							; Gemini 1B
    196  f27a					      ldy	GEM1B
    197  f27a					      jsr	KernelA_UpdateRegs
    198  f27a					      sty	RamKernelGemini3
    199  f27a							; Gemini 2B
    200  f27a					      ldy	GEM2B
    201  f27a					      jsr	KernelB_GenPhp
    202  f27a				   .if_1
    203  f27a					      bne	.else_1
    204  f27a					      sec
    205  f27a					      rol
    206  f27a					      jmp	.endif_1
    207  f27a							; [BIT DEPTH] #1 If-End @ 1
    208  f27a
    209  f27a				   .else_1
    210  f27a					      clc
    211  f27a					      rol
    212  f27a							; Calculate the gemini value
    213  f27a					      ldy	GEM2B
    214  f27a					      jsr	KernelB_UpdateRegs
    215  f27a					      sty	RamKernelGemini1
    216  f27a							; [BIT DEPTH] #1 *If-End @ 1
    217  f27a							; [BIT DEPTH] #1 Else-End @ 1
    218  f27a				   .endif_1
    219  f27a							; Gemini 3B
    220  f27a					      ldy	GEM3B
    221  f27a					      jsr	KernelB_GenPhp
    222  f27a				   .if_2
    223  f27a					      bne	.else_2
    224  f27a					      sec
    225  f27a					      rol
    226  f27a					      jmp	.endif_2
    227  f27a							; [BIT DEPTH] #2 If-End @ 2
    228  f27a
    229  f27a				   .else_2
    230  f27a					      clc
    231  f27a					      rol
    232  f27a							; Calculate the gemini value
    233  f27a					      ldy	GEM1B
    234  f27a					      jsr	KernelB_UpdateRegs
    235  f27a					      sty	RamKernelGemini1
    236  f27a							; [BIT DEPTH] #2 *If-End @ 2
    237  f27a							; [BIT DEPTH] #2 Else-End @ 2
    238  f27a				   .endif_2
    239  f27a							; Gemini 4B
    240  f27a					      ldy	GEM4B
    241  f27a					      jsr	KernelA_UpdateRegs
    242  f27a					      sty	RamKernelGemini4
    243  f27a							; TODO if no PHP, rewrite previous section:
    244  f27a							; NIBBLE_IF cs
    245  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    246  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    247  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    248  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    249  f27a							; NIBBLE_END_IF
    250  f27a							;
    251  f27a							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    252  f27a							; GRP0
    253  f27a							; X
    254  f27a							; Y
    255  f27a							; [BIT DEPTH] Final: 2 (out of 8 bits)
    256  f27a					      rol
    257  f27a					      rol
    258  f27a					      rol
    259  f27a					      rol
    260  f27a					      rol
    261  f27a					      rol
    262  f27a					      ENDM
    263  f27a
    264  f27a
    265  f27a					      MAC	nibble_gem_kernel_a_1
    266  f27a				   .if_1
    267  f27a					      asl
    268  f27a					      bcc	.else_1
    269  f27a					      jmp	.endif_1
    270  f27a				   .else_1
    271  f27a				   .if_2
    272  f27a					      asl
    273  f27a					      bcc	.else_2
    274  f27a					      ldx	#BC_STX
    275  f27a					      stx	[KernelA_D_W + 0]
    276  f27a					      ldx	#RESP1
    277  f27a					      stx	[KernelA_D_W + 1]
    278  f27a					      jmp	.endif_2
    279  f27a				   .else_2
    280  f27a					      ldx	RamKernelGemini1
    281  f27a					      stx	[KernelA_D_W + 0]
    282  f27a					      ldx	RamKernelGemini1Reg
    283  f27a					      stx	[KernelA_D_W + 1]
    284  f27a				   .endif_2
    285  f27a				   .endif_1
    286  f27a				   .if_3
    287  f27a					      asl
    288  f27a					      bcc	.else_3
    289  f27a					      ldx	#NOP_REG
    290  f27a					      stx	[KernelA_E_W + 1 + 0]
    291  f27a					      ldx	#RESP1
    292  f27a					      stx	[KernelA_G_W + 1 + 0]
    293  f27a					      jmp	.endif_3
    294  f27a				   .else_3
    295  f27a					      ldx	#RESP1
    296  f27a					      stx	[KernelA_E_W + 1 + 0]
    297  f27a					      ldx	RamKernelGemini2
    298  f27a					      stx	[KernelA_G_W + 0]
    299  f27a					      ldx	RamKernelGemini2Reg
    300  f27a					      stx	[KernelA_G_W + 1]
    301  f27a				   .endif_3
    302  f27a				   .if_4
    303  f27a					      asl
    304  f27a					      bcc	.else_4
    305  f27a					      ldx	#RESP1
    306  f27a					      stx	[KernelA_H_W + 1 + 0]
    307  f27a					      jmp	.endif_4
    308  f27a				   .else_4
    309  f27a					      ldx	RamKernelGemini3
    310  f27a					      stx	[KernelA_H_W + 0]
    311  f27a					      ldx	RamKernelGemini3Reg
    312  f27a					      stx	[KernelA_H_W + 1]
    313  f27a				   .endif_4
    314  f27a					      ENDM
    315  f27a
    316  f27a					      MAC	nibble_gem_kernel_a_2
    317  f27a				   .if_1
    318  f27a					      asl
    319  f27a					      bcc	.else_1
    320  f27a					      ldx	#BC_STA
    321  f27a					      stx	[[KernelA_I_W + 0] + 0]
    322  f27a					      ldx	#EMERALD_SP_RESET
    323  f27a					      stx	[[KernelA_I_W + 0] + 1]
    324  f27a					      ldx	#BC_STA
    325  f27a					      stx	[[KernelA_J_W + 1] + 0]
    326  f27a					      ldx	#PF1
    327  f27a					      stx	[[KernelA_J_W + 1] + 1]
    328  f27a					      ldx	#BC_PHP
    329  f27a					      stx	[[KernelA_K_W + 1] + 0]
    330  f27a					      ldx	#VDELP1
    331  f27a					      stx	[RamKernelPhpTarget + 0]
    332  f27a					      jmp	.endif_1
    333  f27a				   .else_1
    334  f27a					      ldx	#BC_PHP
    335  f27a					      stx	[[KernelA_I_W + 0] + 0]
    336  f27a					      ldx	#BC_STA
    337  f27a					      stx	[[KernelA_J_W + 0] + 0]
    338  f27a					      ldx	#PF1
    339  f27a					      stx	[[KernelA_J_W + 0] + 1]
    340  f27a					      ldx	RamKernelGemini4
    341  f27a					      stx	[KernelA_K_W + 0]
    342  f27a					      ldx	#EMERALD_SP
    343  f27a					      stx	[KernelA_K_W + 1]
    344  f27a					      ldx	#RESP1
    345  f27a					      stx	[RamKernelPhpTarget + 0]
    346  f27a				   .endif_1
    347  f27a					      ldx	BuildKernelVdel1
    348  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    349  f27a					      ldx	BuildKernelGrp0
    350  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    351  f27a					      ldx	BuildKernelX
    352  f27a					      stx	[RamKernelX + 0]
    353  f27a					      ldx	BuildKernelY
    354  f27a					      stx	[[KernelA_STY - $100] + 0]
    355  f27a					      ENDM
    356  f27a
    357  f27a					      MAC	nibble_gem_kernel_b
    358  f27a					      ldx	RamKernelGemini3
    359  f27a					      stx	[KernelB_D_W + 0]
    360  f27a				   .if_1
    361  f27a					      asl
    362  f27a					      bcc	.else_1
    363  f27a					      ldx	#EMERALD_SP
    364  f27a					      stx	[RamKernelPhpTarget + 0]
    365  f27a					      ldx	#BC_STY
    366  f27a					      stx	[[KernelB_E_W + 0] + 0]
    367  f27a					      ldx	#EMERALD_SP_RESET
    368  f27a					      stx	[[KernelB_E_W + 0] + 1]
    369  f27a					      ldx	#BC_PHP
    370  f27a					      stx	[[KernelB_F_W + 1] + 0]
    371  f27a					      ldx	#BC_STA
    372  f27a					      stx	[[KernelB_G_W + 0] + 0]
    373  f27a					      ldx	#PF1
    374  f27a					      stx	[[KernelB_G_W + 0] + 1]
    375  f27a					      ldx	#BC_STY
    376  f27a					      stx	[[KernelB_H_W + 0] + 0]
    377  f27a					      ldx	#EMERALD_SP
    378  f27a					      stx	[[KernelB_H_W + 0] + 1]
    379  f27a					      jmp	.endif_1
    380  f27a				   .else_1
    381  f27a					      ldx	RamKernelGemini1
    382  f27a					      stx	[KernelB_F_W + 0]
    383  f27a					      ldx	#EMERALD_SP
    384  f27a					      stx	[KernelB_F_W + 1]
    385  f27a				   .endif_1
    386  f27a				   .if_2
    387  f27a					      asl
    388  f27a					      bcc	.else_2
    389  f27a					      ldx	#EMERALD_SP
    390  f27a					      stx	[RamKernelPhpTarget + 0]
    391  f27a					      ldx	#BC_STY
    392  f27a					      stx	[[KernelB_E_W + 0] + 0]
    393  f27a					      ldx	#EMERALD_SP_RESET
    394  f27a					      stx	[[KernelB_E_W + 0] + 1]
    395  f27a					      ldx	#BC_STY
    396  f27a					      stx	[[KernelB_F_W + 1] + 0]
    397  f27a					      ldx	#EMERALD_SP
    398  f27a					      stx	[[KernelB_F_W + 1] + 1]
    399  f27a					      ldx	#BC_STA
    400  f27a					      stx	[[KernelB_G_W + 1] + 0]
    401  f27a					      ldx	#PF1
    402  f27a					      stx	[[KernelB_G_W + 1] + 1]
    403  f27a					      ldx	#BC_PHP
    404  f27a					      stx	[[KernelB_H_W + 1] + 0]
    405  f27a					      jmp	.endif_2
    406  f27a				   .else_2
    407  f27a					      ldx	RamKernelGemini1
    408  f27a					      stx	[KernelA_H_W + 0]
    409  f27a					      ldx	#EMERALD_SP
    410  f27a					      stx	[KernelA_H_W + 1]
    411  f27a				   .endif_2
    412  f27a					      ldx	RamKernelGemini4
    413  f27a					      stx	[KernelB_J_W + 0]
    414  f27a					      ldx	BuildKernelGrp0
    415  f27a					      stx	[[KernelB_VDEL0 - $100] + 0]
    416  f27a					      ldx	BuildKernelX
    417  f27a					      stx	[RamKernelX + 0]
    418  f27a					      ldx	BuildKernelY
    419  f27a					      stx	[RamKernelY + 0]
    420  f27a					      ENDM
    421  f27a
    422  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a		       00 aa	   SENTINEL   =	%010101010
      4  f27a
      5  f27a							; Reflected for Kernel A
      6  f27a		       00 00	   G00	      =	%00000000
      7  f27a		       00 60	   G01	      =	%01100000
      8  f27a		       00 06	   G10	      =	%00000110
      9  f27a		       00 66	   G11	      =	%01100110
     10  f27a
     11  f27a							; gems:     [g01,g10,g01,g11,g00,g00]
     12  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     13  f27a							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     14  f27a
     15  f27a							; gems:     [g00,g01,g10,g11,g00,g01]
     16  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     17  f27a							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     18  f27a
     19  f27a							; gems:     [g01,g10,g11,g00,g01,g10]
     20  f27a							; cpu:      cpu(g01,g01,false,g10,g11,false)
     21  f27a							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     22  f27a
     23  f27a							; gems:     [g10,g11,g00,g01,g10,g11]
     24  f27a							; cpu:      cpu(g10,g10,false,g11,g01,false)
     25  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     26  f27a
     27  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     28  f27a							; cpu:      cpu(g01,g01,false,g00,g11,false)
     29  f27a							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     30  f27a
     31  f27a							; gems:     [g11,g01,g01,g01,g01,g00]
     32  f27a							; cpu:      cpu(g00,g01,false,g11,g00,false)
     33  f27a							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     34  f27a
     35  f27a							; gems:     [g10,g10,g11,g00,g11,g01]
     36  f27a							; cpu:      cpu(g00,g00,false,g10,g11,false)
     37  f27a							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     38  f27a
     39  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     40  f27a							; cpu:      cpu(g00,g01,false,g01,g11,false)
     41  f27a							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     42  f27a
     43  f27a							; gems:     [g11,g10,g00,g01,g00,g01]
     44  f27a							; cpu:      cpu(g11,g00,false,g10,g01,false)
     45  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     46  f27a
     47  f27a				   SHARD_LUT_RF1
     48  f27a		       00		      .byte.b	#0
     49  f27b				   SHARD_LUT_VD1
     50  f27b		       00		      .byte.b	#0
     51  f27c
     52  f27c				   GEM0A
     53  f27c		       66		      .byte.b	G11
     54  f27d				   GEM1A
     55  f27d		       66		      .byte.b	G11
     56  f27e				   GEM2A
     57  f27e		       66		      .byte.b	G11
     58  f27f				   GEM3A
     59  f27f		       66		      .byte.b	G11
     60  f280				   GEM4A
     61  f280		       66		      .byte.b	G11
     62  f281				   GEM5A
     63  f281		       66		      .byte.b	G11
     64  f282
     65  f282				   GEM0B
     66  f282		       66		      .byte.b	G11
     67  f283				   GEM1B
     68  f283		       66		      .byte.b	G11
     69  f284				   GEM2B
     70  f284		       66		      .byte.b	G11
     71  f285				   GEM3B
     72  f285		       66		      .byte.b	G11
     73  f286				   GEM4B
     74  f286		       66		      .byte.b	G11
     75  f287				   GEM5B
     76  f287		       66		      .byte.b	G11
     77  f288
     78  f288							; Y=Gemini Sprite
     79  f288							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     80  f288							; processor flag Z is TRUE if this is RST.
     81  f288				   KernelA_GenReset subroutine
     82  f288		       c0 00		      cpy	#$00
     83  f28a		       f0 01		      beq	.start
     84  f28c		       60		      rts
     85  f28d							; Current Gemini = $00
     86  f28d				   .start
     87  f28d		       a6 a5		      ldx	BuildKernelRST
     88  f28f		       e0 aa		      cpx	#SENTINEL
     89  f291		       d0 04		      bne	.set_else
     90  f293							; We have found the first (and only) RST on this line, set the marker var
     91  f293		       a2 ff		      ldx	#$ff
     92  f295		       86 a5		      stx	BuildKernelRST
     93  f297				   .set_else
     94  f297		       a2 00		      ldx	#$00
     95  f299		       60		      rts
     96  f29a
     97  f29a							; Y=Gemini Sprite
     98  f29a							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     99  f29a							; processor flag Z is TRUE if this is RST.
    100  f29a				   KernelB_GenPhp subroutine
    101  f29a		       c0 10		      cpy	#$10
    102  f29c		       f0 05		      beq	.start
    103  f29e		       c0 11		      cpy	#$11
    104  f2a0		       f0 01		      beq	.start
    105  f2a2		       60		      rts
    106  f2a3							; Current Gemini = $00
    107  f2a3				   .start
    108  f2a3		       a6 a5		      ldx	BuildKernelRST
    109  f2a5		       e0 aa		      cpx	#SENTINEL
    110  f2a7		       d0 04		      bne	.set_else
    111  f2a9							; We have found the first (and only) RST on this line, set the marker var
    112  f2a9		       a2 ff		      ldx	#$ff
    113  f2ab		       86 a5		      stx	BuildKernelRST
    114  f2ad				   .set_else
    115  f2ad		       a2 00		      ldx	#$00
    116  f2af		       60		      rts
    117  f2b0
    118  f2b0							; Allocates build-time registers for a new Gemini sprite value.
    119  f2b0							; register Y = the storage opcode to write to the result
    120  f2b0							;
    121  f2b0							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
    122  f2b0							; BuildKernelX, BuildKernelY are upgraded if not set.
    123  f2b0							; Y=Gemini Sprite
    124  f2b0				   KernelB_UpdateRegs
    125  f2b0				   KernelA_UpdateRegs subroutine
    126  f2b0
    127  f2b0							; If equal to GRP0, return nop
    128  f2b0							; FIXME GRP0 might not always be up to date (should update each entry?)
    129  f2b0							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    130  f2b0		       c4 a6		      cpy	BuildKernelGrp0
    131  f2b2		       d0 03		      bne	.set_start
    132  f2b4							; TODO if this is stx + NOP value, then register doesn't have to change as
    133  f2b4							; often in GEM1ASWITCH
    134  f2b4		       a0 04		      ldy	#BC_NOP
    135  f2b6		       60		      rts
    136  f2b7
    137  f2b7				   .set_start
    138  f2b7		       a6 a3		      ldx	BuildKernelX
    139  f2b9		       e0 aa		      cpx	#SENTINEL
    140  f2bb		       d0 04		      bne	.set_else
    141  f2bd		       84 a3		      sty	BuildKernelX
    142  f2bf							; FIXME like here is where graphics would be reversed savedinto BuidlKernelX
    143  f2bf		       f0 08		      beq	.set_end
    144  f2c1				   .set_else
    145  f2c1		       a6 a4		      ldx	BuildKernelY
    146  f2c3		       e0 aa		      cpx	#SENTINEL
    147  f2c5		       d0 02		      bne	.set_end
    148  f2c7		       84 a4		      sty	BuildKernelY
    149  f2c9				   .set_end
    150  f2c9
    151  f2c9		       c4 a3		      cpy	BuildKernelX
    152  f2cb		       d0 03		      bne	.op_else
    153  f2cd		       a0 86		      ldy	#BC_STX
    154  f2cf		       60		      rts
    155  f2d0				   .op_else
    156  f2d0		       c4 a4		      cpy	BuildKernelY
    157  f2d2		       d0 02		      bne	.op_end
    158  f2d4		       a0 84		      ldy	#BC_STY
    159  f2d6				   .op_end
    160  f2d6		       60		      rts
    161  f2d7
    162  f2d7							; Vertical Sync
    163  f2d7				   VerticalSync subroutine
      0  f2d7					      VERTICAL_SYNC
      1  f2d7		       a9 0e		      lda	#%1110
      2  f2d9		       85 02	   .VSLP1     sta	WSYNC
      3  f2db		       85 00		      sta	VSYNC
      4  f2dd		       4a		      lsr
      5  f2de		       d0 f9		      bne	.VSLP1
    165  f2e0
    166  f2e0				   FrameStart subroutine
      0  f2e0					      ASSERT_RUNTIME	"_scan == #0"
      1  f2e0				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2e0  && !(  _scan == #0  ) }
      2  f2e0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    168  f2e0
    169  f2e0				   VerticalBlank subroutine
      0  f2e0					      TIMER_SETUP	37
      1  f2e0				   .lines     SET	37
      2  f2e0		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2e2		       85 02		      sta	WSYNC
      4  f2e4		       8d 96 02 	      sta	TIM64T
    171  f2e7
    172  f2e7							; Scanline counter
    173  f2e7		       a9 10		      lda	#ROW_COUNT
    174  f2e9		       85 82		      sta	LoopCount
    175  f2eb
    176  f2eb							; Frame counter
    177  f2eb		       e6 83		      inc	FrameCount
    178  f2ed
    179  f2ed							; Skip every 8 frames for increasing demo index
    180  f2ed		       a5 83		      lda	FrameCount
    181  f2ef		       29 07		      and	#FrameSkip
    182  f2f1		       c9 07		      cmp	#FrameSkip
    183  f2f3		       d0 0d		      bne	.next_next_thing
    184  f2f5
    185  f2f5		       18		      clc
    186  f2f6		       a5 8e		      lda	ROW_DEMO_INDEX
    187  f2f8		       69 04		      adc	#4
    188  f2fa		       c9 68		      cmp	#[level_01_end - level_01]
    189  f2fc		       90 02		      bcc	.next_thing_local
    190  f2fe		       a9 00		      lda	#0
    191  f300				   .next_thing_local
    192  f300		       85 8e		      sta	ROW_DEMO_INDEX
    193  f302				   .next_next_thing
    194  f302		       85 02		      sta	WSYNC
    195  f304
    196  f304							; Positioning
      0  f304					      SLEEP	40
      1  f304				   .CYCLES    SET	40
      2  f304
      3  f304				  -	      IF	.CYCLES < 2
      4  f304				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f304				  -	      ERR
      6  f304					      ENDIF
      7  f304
      8  f304				  -	      IF	.CYCLES & 1
      9  f304				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f304				  -	      nop	0
     11  f304				  -	      ELSE
     12  f304				  -	      bit	VSYNC
     13  f304				  -	      ENDIF
     14  f304				  -.CYCLES    SET	.CYCLES - 3
     15  f304					      ENDIF
     16  f304
     17  f304					      REPEAT	.CYCLES / 2
     18  f304		       ea		      nop
     17  f304					      REPEND
     18  f305		       ea		      nop
     17  f305					      REPEND
     18  f306		       ea		      nop
     17  f306					      REPEND
     18  f307		       ea		      nop
     17  f307					      REPEND
     18  f308		       ea		      nop
     17  f308					      REPEND
     18  f309		       ea		      nop
     17  f309					      REPEND
     18  f30a		       ea		      nop
     17  f30a					      REPEND
     18  f30b		       ea		      nop
     17  f30b					      REPEND
     18  f30c		       ea		      nop
     17  f30c					      REPEND
     18  f30d		       ea		      nop
     17  f30d					      REPEND
     18  f30e		       ea		      nop
     17  f30e					      REPEND
     18  f30f		       ea		      nop
     17  f30f					      REPEND
     18  f310		       ea		      nop
     17  f310					      REPEND
     18  f311		       ea		      nop
     17  f311					      REPEND
     18  f312		       ea		      nop
     17  f312					      REPEND
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     17  f316					      REPEND
     18  f317		       ea		      nop
     19  f318					      REPEND
    198  f318		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    199  f31a		       85 02		      sta	WSYNC
    200  f31c
    201  f31c							; Misc
    202  f31c		       a9 00		      lda	#00
    203  f31e		       85 1e		      sta	EMERALD_MI_ENABLE
    204  f320
    205  f320							; Assign dervied SpriteEnd value
    206  f320		       18		      clc
    207  f321		       a9 c8		      lda	#HEIGHT_OFFSET
    208  f323		       e5 89		      sbc	YPos
    209  f325		       85 85		      sta	SpriteEnd
    210  f327
    211  f327							; Player 1
    212  f327		       a5 86		      lda	XPos
    213  f329		       a2 00		      ldx	#0
    214  f32b		       20 ba f7 	      jsr	SetHorizPos
    215  f32e
    216  f32e				   frame_setup subroutine
    217  f32e							; Kernel A or B
    218  f32e		       a9 01		      lda	#01
    219  f330		       25 83		      and	FrameCount
    220  f332		       d0 24		      bne	frame_setup_kernel_b
    221  f334
    222  f334				   frame_setup_kernel_a subroutine
    223  f334							; Load kernel into CBSRAM
    224  f334		       20 56 f2 	      jsr	LoadKernelA
    225  f337
    226  f337							; Move missile
    227  f337		       85 02		      sta	WSYNC
      0  f339					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f339				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f339
      3  f339				  -	      IF	.CYCLES < 2
      4  f339				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f339				  -	      ERR
      6  f339					      ENDIF
      7  f339
      8  f339				  -	      IF	.CYCLES & 1
      9  f339				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f339				  -	      nop	0
     11  f339				  -	      ELSE
     12  f339				  -	      bit	VSYNC
     13  f339				  -	      ENDIF
     14  f339				  -.CYCLES    SET	.CYCLES - 3
     15  f339					      ENDIF
     16  f339
     17  f339					      REPEAT	.CYCLES / 2
     18  f339		       ea		      nop
     17  f339					      REPEND
     18  f33a		       ea		      nop
     17  f33a					      REPEND
     18  f33b		       ea		      nop
     17  f33b					      REPEND
     18  f33c		       ea		      nop
     17  f33c					      REPEND
     18  f33d		       ea		      nop
     17  f33d					      REPEND
     18  f33e		       ea		      nop
     17  f33e					      REPEND
     18  f33f		       ea		      nop
     17  f33f					      REPEND
     18  f340		       ea		      nop
     17  f340					      REPEND
     18  f341		       ea		      nop
     17  f341					      REPEND
     18  f342		       ea		      nop
     17  f342					      REPEND
     18  f343		       ea		      nop
     17  f343					      REPEND
     18  f344		       ea		      nop
     17  f344					      REPEND
     18  f345		       ea		      nop
     17  f345					      REPEND
     18  f346		       ea		      nop
     19  f347					      REPEND
    229  f347		       85 13		      sta	EMERALD_MI_RESET
    230  f349		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    231  f34b		       85 23		      sta	EMERALD_MI_HMOVE
    232  f34d
    233  f34d							; DEBUG: Set per-kernel color
    234  f34d		       a2 cc		      ldx	#COL_EMERALD
    235  f34f		       86 07		      stx	EMERALD_SP_COLOR
    236  f351
    237  f351							; Set reflection for Jetpack.
    238  f351		       a9 ff		      lda	#%11111111
    239  f353		       85 0c		      sta	REFP1
    240  f355
    241  f355		       4c 85 f3 	      jmp	frame_setup_complete
    242  f358
    243  f358				   frame_setup_kernel_b subroutine
    244  f358							; Load kernel into CBSRAM
    245  f358		       20 68 f2 	      jsr	LoadKernelB
    246  f35b
    247  f35b							; Move missile
    248  f35b		       85 02		      sta	WSYNC
      0  f35d					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f35d				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f35d
      3  f35d				  -	      IF	.CYCLES < 2
      4  f35d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f35d				  -	      ERR
      6  f35d					      ENDIF
      7  f35d
      8  f35d					      IF	.CYCLES & 1
      9  f35d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f35d		       04 00		      nop	0
     11  f35f				  -	      ELSE
     12  f35f				  -	      bit	VSYNC
     13  f35f					      ENDIF
     14  f35f				   .CYCLES    SET	.CYCLES - 3
     15  f35f					      ENDIF
     16  f35f
     17  f35f					      REPEAT	.CYCLES / 2
     18  f35f		       ea		      nop
     17  f35f					      REPEND
     18  f360		       ea		      nop
     17  f360					      REPEND
     18  f361		       ea		      nop
     17  f361					      REPEND
     18  f362		       ea		      nop
     17  f362					      REPEND
     18  f363		       ea		      nop
     17  f363					      REPEND
     18  f364		       ea		      nop
     17  f364					      REPEND
     18  f365		       ea		      nop
     17  f365					      REPEND
     18  f366		       ea		      nop
     17  f366					      REPEND
     18  f367		       ea		      nop
     17  f367					      REPEND
     18  f368		       ea		      nop
     17  f368					      REPEND
     18  f369		       ea		      nop
     17  f369					      REPEND
     18  f36a		       ea		      nop
     17  f36a					      REPEND
     18  f36b		       ea		      nop
     17  f36b					      REPEND
     18  f36c		       ea		      nop
     17  f36c					      REPEND
     18  f36d		       ea		      nop
     17  f36d					      REPEND
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     17  f36f					      REPEND
     18  f370		       ea		      nop
     17  f370					      REPEND
     18  f371		       ea		      nop
     17  f371					      REPEND
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     17  f375					      REPEND
     18  f376		       ea		      nop
     19  f377					      REPEND
    250  f377		       85 13		      sta	EMERALD_MI_RESET
    251  f379		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    252  f37b		       85 23		      sta	EMERALD_MI_HMOVE
    253  f37d
    254  f37d							; DEBUG: Set per-kernel color
    255  f37d		       a2 e0		      ldx	#$e0
    256  f37f		       86 07		      stx	EMERALD_SP_COLOR
    257  f381
    258  f381							; Disable reflection for Jetpack.
    259  f381		       a9 ff		      lda	#%11111111
    260  f383		       85 0c		      sta	REFP1
    261  f385
    262  f385				   frame_setup_complete
    263  f385
    264  f385		       ad 7c fb 	      lda	shard_map
    265  f388		       a0 01		      ldy	#1	; gemini counter, starting at 1
    266  f38a				   gemini_builder
    267  f38a		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    268  f38c		       d0 00		      bne	.no_vd0
    269  f38e				   .no_vd0
    270  f38e
    271  f38e
    272  f38e				   nibble_precompile_gem_kernel
    273  f38e				   DBG_NIBBLE
    274  f38e		       00 a9	   BC_LDA_IMM =	$a9
    275  f38e		       00 85	   BC_STA     =	$85
    276  f38e		       00 86	   BC_STX     =	$86
    277  f38e		       00 84	   BC_STY     =	$84
    278  f38e		       00 08	   BC_PHP     =	$08
    279  f38e		       00 04	   BC_NOP     =	$04
    280  f38e
    281  f38e		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    282  f38e
    283  f38e				   KernelA_D_W EQM	[KernelA_D - $100]
    284  f38e				   KernelA_E_W EQM	[KernelA_E - $100]
    285  f38e				   KernelA_G_W EQM	[KernelA_G - $100]
    286  f38e				   KernelA_H_W EQM	[KernelA_H - $100]
    287  f38e				   KernelA_I_W EQM	[KernelA_I - $100]
    288  f38e				   KernelA_J_W EQM	[KernelA_J - $100]
    289  f38e				   KernelA_K_W EQM	[KernelA_K - $100]
    290  f38e
    291  f38e				   KernelB_D_W EQM	[KernelB_D - $100]
    292  f38e				   KernelB_E_W EQM	[KernelB_E - $100]
    293  f38e				   KernelB_F_W EQM	[KernelB_F - $100]
    294  f38e				   KernelB_G_W EQM	[KernelB_G - $100]
    295  f38e				   KernelB_H_W EQM	[KernelB_H - $100]
    296  f38e				   KernelB_I_W EQM	[KernelB_I - $100]
    297  f38e				   KernelB_J_W EQM	[KernelB_J - $100]
    298  f38e				   KernelB_K_W EQM	[KernelB_K - $100]
    299  f38e
    300  f38e							; Nibble Kernel A
      0  f38e					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00d4 ????				      seg.U	ignoreme
    302 U00d4 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    303 U00d6 ????	       86 a3		      stx	BuildKernelX
    304 U00d8 ????	       86 a4		      stx	BuildKernelY
    305 U00da ????	       86 a5		      stx	BuildKernelRST
    306 U00dc ????
    307 U00dc ????						; Gemini 1A
    308 U00dc ????	       ac 7c f2 	      ldy	GEM0A
    309 U00df ????	       20 88 f2 	      jsr	KernelA_GenReset
      0 U00e2 ????				      NIBBLE_IF	eq
    311 U00e2 ????						; Special: Encoding RST0
    312 U00e2 ????						; Rewrite lda RamKernelPF1 to be #immediate
    313 U00e2 ????	       a0 a9		      ldy	#BC_LDA_IMM
    314 U00e4 ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    315 U00e7 ????	       a0 a0		      ldy	#%10100000
    316 U00e9 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    317 U00ec ????						; Store 1A in GRP0
    318 U00ec ????	       ac 7d f2 	      ldy	GEM1A
    319 U00ef ????	       84 a6		      sty	BuildKernelGrp0
    320 U00f1 ????						; Gemini 1A is RESPx
    321 U00f1 ????	       a0 11		      ldy	#EMERALD_SP_RESET
    322 U00f3 ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    323 U00f6 ????						; Turn 3-cycle NOP into 4-cycle
    324 U00f6 ????	       a0 14		      ldy	#$14	; TODO what is this
    325 U00f8 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U00fb ????				      NIBBLE_ELSE
    327 U00fb ????						; Store 0A in GRP0
    328 U00fb ????	       ac 7c f2 	      ldy	GEM0A
    329 U00fe ????	       84 a6		      sty	BuildKernelGrp0
    330 U0100 ????
    331 U0100 ????	       ac 7d f2 	      ldy	GEM1A
    332 U0103 ????	       20 88 f2 	      jsr	KernelA_GenReset
      0 U0106 ????				      NIBBLE_IF	eq
    334 U0106 ????						; GEM1ASWITCH
      0 U0106 ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U0106 ????				      NIBBLE_ELSE
    337 U0106 ????						; Calculate the 1A value
    338 U0106 ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    339 U0109 ????	       c0 01		      cpy	#1
    340 U010b ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    341 U010d ????	       a0 11		      ldy	#RESP1
    342 U010f ????	       2c		      .byte.b	$2C	; .bit (ABS)
    343 U0110 ????	       a0 1c		      ldy	#GRP1
    344 U0112 ????	       84 9b		      sty	RamKernelGemini1Reg
    345 U0114 ????
    346 U0114 ????						; Set opcode
    347 U0114 ????	       ae 7a f2 	      ldx	SHARD_LUT_RF1
    348 U0117 ????	       e0 01		      cpx	#1
    349 U0119 ????	       a0 86		      ldy	#BC_STX
    350 U011b ????	       d0 04		      .byte.b	$D0, #4	; bne +5
    351 U011d ????	       ac 7d f2 	      ldy	GEM1A
    352 U0120 ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    353 U0123 ????	       84 9a		      sty	RamKernelGemini1
    354 U0125 ????
      0 U0125 ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U0125 ????				      NIBBLE_END_IF
      0 U0125 ????				      NIBBLE_END_IF
    358 U0125 ????
    359 U0125 ????						; Gemini 2A
    360 U0125 ????	       ac 7e f2 	      ldy	GEM2A
    361 U0128 ????	       20 88 f2 	      jsr	KernelA_GenReset
      0 U012b ????				      NIBBLE_IF	eq
      0 U012b ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U012b ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U012b ????				      NIBBLE_ELSE
    366 U012b ????						; Set opcode
    367 U012b ????	       ac 7e f2 	      ldy	GEM2A
    368 U012e ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    369 U0131 ????	       84 9c		      sty	RamKernelGemini2
    370 U0133 ????
    371 U0133 ????						; Set opcode target
    372 U0133 ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    373 U0136 ????	       c0 02		      cpy	#2
    374 U0138 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    375 U013a ????	       a0 11		      ldy	#RESP1
    376 U013c ????	       2c		      .byte.b	$2C	; .bit (ABS)
    377 U013d ????	       a0 1c		      ldy	#GRP1
    378 U013f ????	       84 9d		      sty	RamKernelGemini2Reg
    379 U0141 ????
      0 U0141 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U0141 ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U0141 ????				      NIBBLE_END_IF
    383 U0141 ????
    384 U0141 ????						; Gemini 3A
    385 U0141 ????	       ac 7f f2 	      ldy	GEM3A
    386 U0144 ????	       20 88 f2 	      jsr	KernelA_GenReset
      0 U0147 ????				      NIBBLE_IF	eq
      0 U0147 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0147 ????				      NIBBLE_ELSE
    390 U0147 ????						; Set opcode
    391 U0147 ????	       ac 7f f2 	      ldy	GEM3A
    392 U014a ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    393 U014d ????	       84 9e		      sty	RamKernelGemini3
    394 U014f ????
    395 U014f ????						; Set opcode target
    396 U014f ????	       ac 7a f2 	      ldy	SHARD_LUT_RF1
    397 U0152 ????	       c0 03		      cpy	#3
    398 U0154 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    399 U0156 ????	       a0 11		      ldy	#RESP1
    400 U0158 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    401 U0159 ????	       a0 1c		      ldy	#GRP1
    402 U015b ????	       84 9f		      sty	RamKernelGemini3Reg
    403 U015d ????
      0 U015d ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U015d ????				      NIBBLE_END_IF
      0 U015d ????				      NIBBLE_END_KERNEL
      1  f38e					      seg	CodeBank3
    407  f38e
      0  f38e					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U015d ????				      seg.U	ignoreme
    409 U015d ????						; VD1 default
    410 U015d ????	       ae 7d f2 	      ldx	GEM1A
    411 U0160 ????	       86 a7		      stx	BuildKernelVdel1
    412 U0162 ????
    413 U0162 ????						; Gemini 4A
    414 U0162 ????	       ae 7b f2 	      ldx	SHARD_LUT_VD1
    415 U0165 ????	       e0 04		      cpx	#4
      0 U0167 ????				      NIBBLE_IF	ne
      0 U0167 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0167 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0167 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    420 U0167 ????
    421 U0167 ????						; Set PHP
      0 U0167 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    423 U0167 ????
    424 U0167 ????						; Update VDEL1
    425 U0167 ????	       ae 80 f2 	      ldx	GEM4A
    426 U016a ????	       86 a7		      stx	BuildKernelVdel1
      0 U016c ????				      NIBBLE_ELSE
    428 U016c ????	       ac 80 f2 	      ldy	GEM4A
    429 U016f ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    430 U0172 ????	       84 a0		      sty	RamKernelGemini4
    431 U0174 ????
      0 U0174 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U0174 ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U0174 ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    435 U0174 ????
    436 U0174 ????						; Set PHP
      0 U0174 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U0174 ????				      NIBBLE_END_IF
    439 U0174 ????
    440 U0174 ????						; VD1
    441 U0174 ????						; ldy #SHARD_VD1
    442 U0174 ????						; sty [KernelA_VDEL1 - $100]
      0 U0174 ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    444 U0174 ????						; GRP0
    445 U0174 ????						; ldy #SHARD_GRP0
    446 U0174 ????						; sty [KernelA_VDEL0 - $100]
      0 U0174 ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    448 U0174 ????						; X
    449 U0174 ????						; ldy #SHARD_X
    450 U0174 ????						; sty RamKernelX
      0 U0174 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    452 U0174 ????						; Y
      0 U0174 ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    454 U0174 ????
    455 U0174 ????						; Gemini 5A
    456 U0174 ????						; TODO eventually...?
      0 U0174 ????				      NIBBLE_END_KERNEL
      1  f38e					      seg	CodeBank3
    458  f38e
    459  f38e							; Nibble Kernel B
      0  f38e					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U0174 ????				      seg.U	ignoreme
    461 U0174 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    462 U0176 ????	       86 a3		      stx	BuildKernelX
    463 U0178 ????	       86 a4		      stx	BuildKernelY
    464 U017a ????	       86 a5		      stx	BuildKernelRST
    465 U017c ????
    466 U017c ????						; Gemini 1B
    467 U017c ????	       ac 83 f2 	      ldy	GEM1B
    468 U017f ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    469 U0182 ????	       84 9e		      sty	RamKernelGemini3
      0 U0184 ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini3
    471 U0184 ????
    472 U0184 ????						; Gemini 2B
    473 U0184 ????	       ac 84 f2 	      ldy	GEM2B
    474 U0187 ????	       20 9a f2 	      jsr	KernelB_GenPhp
      0 U018a ????				      NIBBLE_IF	eq
      0 U018a ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U018a ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U018a ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U018a ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U018a ????				      NIBBLE_WRITE	[KernelB_H_W + 0], #BC_STY, #EMERALD_SP	; 3B
      0 U018a ????				      NIBBLE_ELSE
    482 U018a ????						; Calculate the gemini value
    483 U018a ????	       ac 84 f2 	      ldy	GEM2B
    484 U018d ????	       20 b0 f2 	      jsr	KernelB_UpdateRegs
    485 U0190 ????	       84 9a		      sty	RamKernelGemini1
    486 U0192 ????
      0 U0192 ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini1, #EMERALD_SP
      0 U0192 ????				      NIBBLE_END_IF
    489 U0192 ????
    490 U0192 ????						; Gemini 3B
    491 U0192 ????	       ac 85 f2 	      ldy	GEM3B
    492 U0195 ????	       20 9a f2 	      jsr	KernelB_GenPhp
      0 U0198 ????				      NIBBLE_IF	eq
      0 U0198 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 3B
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_STY, #EMERALD_SP	; 2B
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP
      0 U0198 ????				      NIBBLE_ELSE
    500 U0198 ????						; Calculate the gemini value
    501 U0198 ????	       ac 83 f2 	      ldy	GEM1B
    502 U019b ????	       20 b0 f2 	      jsr	KernelB_UpdateRegs
    503 U019e ????	       84 9a		      sty	RamKernelGemini1
    504 U01a0 ????
      0 U01a0 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini1, #EMERALD_SP
      0 U01a0 ????				      NIBBLE_END_IF
    507 U01a0 ????
    508 U01a0 ????						; Gemini 4B
    509 U01a0 ????	       ac 86 f2 	      ldy	GEM4B
    510 U01a3 ????	       20 b0 f2 	      jsr	KernelA_UpdateRegs
    511 U01a6 ????	       84 a0		      sty	RamKernelGemini4
      0 U01a8 ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    513 U01a8 ????
    514 U01a8 ????						; TODO if no PHP, rewrite previous section:
    515 U01a8 ????						; NIBBLE_IF cs
    516 U01a8 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    517 U01a8 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    518 U01a8 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    519 U01a8 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    520 U01a8 ????						; NIBBLE_END_IF
    521 U01a8 ????
    522 U01a8 ????						; ; VD1
    523 U01a8 ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    524 U01a8 ????						; GRP0
      0 U01a8 ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    526 U01a8 ????						; X
      0 U01a8 ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    528 U01a8 ????						; Y
      0 U01a8 ????				      NIBBLE_WRITE	RamKernelY, BuildKernelY
    530 U01a8 ????
      0 U01a8 ????				      NIBBLE_END_KERNEL
      1  f38e					      seg	CodeBank3
    532  f38e
    533  f38e							; TODO do this for all rows
    534  f38e				   DBG_NIBBLE_BUILD subroutine
    535  f38e		       ae 00 f1 	      ldx	$f100
    536  f391		       e0 0a		      cpx	#$a
    537  f393		       f0 03		      beq	[. + 5]
    538  f395		       4c 7c f4 	      jmp	.kernel_b
    539  f398				   .kernel_a
      0  f398					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f398		       a9 00		      lda	#0
      2  f39a		       a2 aa		      ldx	#SENTINEL
      3  f39c		       86 a3		      stx	BuildKernelX
      4  f39e		       86 a4		      stx	BuildKernelY
      5  f3a0		       86 a5		      stx	BuildKernelRST
      6  f3a2
      7  f3a2		       ac 7c f2 	      ldy	GEM0A
      8  f3a5		       20 88 f2 	      jsr	KernelA_GenReset
      9  f3a8				   .if_1
     10  f3a8		       d0 1f		      bne	.else_1
     11  f3aa		       38		      sec
     12  f3ab		       2a		      rol
     13  f3ac
     14  f3ac
     15  f3ac		       a0 a9		      ldy	#BC_LDA_IMM
     16  f3ae		       8c 16 f0 	      sty	[KernelA_B - $100]
     17  f3b1		       a0 a0		      ldy	#%10100000
     18  f3b3		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     19  f3b6
     20  f3b6		       ac 7d f2 	      ldy	GEM1A
     21  f3b9		       84 a6		      sty	BuildKernelGrp0
     22  f3bb
     23  f3bb		       a0 11		      ldy	#EMERALD_SP_RESET
     24  f3bd		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     25  f3c0
     26  f3c0		       a0 14		      ldy	#$14
     27  f3c2		       8c 1a f0 	      sty	[KernelA_D - $100]
     28  f3c5		       4c fe f3 	      jmp	.endif_1
     29  f3c8
     30  f3c8		       2a		      rol
     31  f3c9
     32  f3c9				   .else_1
     33  f3c9		       18		      clc
     34  f3ca		       2a		      rol
     35  f3cb
     36  f3cb		       ac 7c f2 	      ldy	GEM0A
     37  f3ce		       84 a6		      sty	BuildKernelGrp0
     38  f3d0		       ac 7d f2 	      ldy	GEM1A
     39  f3d3		       20 88 f2 	      jsr	KernelA_GenReset
     40  f3d6				   .if_2
     41  f3d6		       d0 05		      bne	.else_2
     42  f3d8		       38		      sec
     43  f3d9		       2a		      rol
     44  f3da
     45  f3da		       4c fe f3 	      jmp	.endif_2
     46  f3dd
     47  f3dd
     48  f3dd				   .else_2
     49  f3dd		       18		      clc
     50  f3de		       2a		      rol
     51  f3df
     52  f3df		       ac 7a f2 	      ldy	SHARD_LUT_RF1
     53  f3e2		       c0 01		      cpy	#1
     54  f3e4		       d0 03		      .byte.b	$D0, #3
     55  f3e6		       a0 11		      ldy	#RESP1
     56  f3e8		       2c		      .byte.b	$2C
     57  f3e9		       a0 1c		      ldy	#GRP1
     58  f3eb		       84 9b		      sty	RamKernelGemini1Reg
     59  f3ed
     60  f3ed		       ae 7a f2 	      ldx	SHARD_LUT_RF1
     61  f3f0		       e0 01		      cpx	#1
     62  f3f2		       a0 86		      ldy	#BC_STX
     63  f3f4		       d0 04		      .byte.b	$D0, #4
     64  f3f6		       ac 7d f2 	      ldy	GEM1A
     65  f3f9		       20 b0 f2 	      jsr	KernelA_UpdateRegs
     66  f3fc		       84 9a		      sty	RamKernelGemini1
     67  f3fe
     68  f3fe
     69  f3fe				   .endif_2
     70  f3fe
     71  f3fe
     72  f3fe				   .endif_1
     73  f3fe
     74  f3fe		       ac 7e f2 	      ldy	GEM2A
     75  f401		       20 88 f2 	      jsr	KernelA_GenReset
     76  f404				   .if_3
     77  f404		       d0 05		      bne	.else_3
     78  f406		       38		      sec
     79  f407		       2a		      rol
     80  f408		       4c 23 f4 	      jmp	.endif_3
     81  f40b
     82  f40b
     83  f40b				   .else_3
     84  f40b		       18		      clc
     85  f40c		       2a		      rol
     86  f40d
     87  f40d		       ac 7e f2 	      ldy	GEM2A
     88  f410		       20 b0 f2 	      jsr	KernelA_UpdateRegs
     89  f413		       84 9c		      sty	RamKernelGemini2
     90  f415
     91  f415		       ac 7a f2 	      ldy	SHARD_LUT_RF1
     92  f418		       c0 02		      cpy	#2
     93  f41a		       d0 03		      .byte.b	$D0, #3
     94  f41c		       a0 11		      ldy	#RESP1
     95  f41e		       2c		      .byte.b	$2C
     96  f41f		       a0 1c		      ldy	#GRP1
     97  f421		       84 9d		      sty	RamKernelGemini2Reg
     98  f423
     99  f423
    100  f423				   .endif_3
    101  f423
    102  f423		       ac 7f f2 	      ldy	GEM3A
    103  f426		       20 88 f2 	      jsr	KernelA_GenReset
    104  f429				   .if_4
    105  f429		       d0 05		      bne	.else_4
    106  f42b		       38		      sec
    107  f42c		       2a		      rol
    108  f42d		       4c 48 f4 	      jmp	.endif_4
    109  f430
    110  f430
    111  f430				   .else_4
    112  f430		       18		      clc
    113  f431		       2a		      rol
    114  f432
    115  f432		       ac 7f f2 	      ldy	GEM3A
    116  f435		       20 b0 f2 	      jsr	KernelA_UpdateRegs
    117  f438		       84 9e		      sty	RamKernelGemini3
    118  f43a
    119  f43a		       ac 7a f2 	      ldy	SHARD_LUT_RF1
    120  f43d		       c0 03		      cpy	#3
    121  f43f		       d0 03		      .byte.b	$D0, #3
    122  f441		       a0 11		      ldy	#RESP1
    123  f443		       2c		      .byte.b	$2C
    124  f444		       a0 1c		      ldy	#GRP1
    125  f446		       84 9f		      sty	RamKernelGemini3Reg
    126  f448
    127  f448
    128  f448				   .endif_4
    129  f448
    130  f448		       2a		      rol
    131  f449		       2a		      rol
    132  f44a		       2a		      rol
    133  f44b		       2a		      rol
    541  f44c		       85 90		      sta	RamNibbleVar1
      0  f44e					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f44e		       a9 00		      lda	#0
      2  f450
      3  f450		       ae 7d f2 	      ldx	GEM1A
      4  f453		       86 a7		      stx	BuildKernelVdel1
      5  f455
      6  f455		       ae 7b f2 	      ldx	SHARD_LUT_VD1
      7  f458		       e0 04		      cpx	#4
      8  f45a				   .if_1
      9  f45a		       f0 0a		      beq	.else_1
     10  f45c		       38		      sec
     11  f45d		       2a		      rol
     12  f45e
     13  f45e
     14  f45e		       ae 80 f2 	      ldx	GEM4A
     15  f461		       86 a7		      stx	BuildKernelVdel1
     16  f463		       4c 70 f4 	      jmp	.endif_1
     17  f466
     18  f466
     19  f466				   .else_1
     20  f466		       18		      clc
     21  f467		       2a		      rol
     22  f468		       ac 80 f2 	      ldy	GEM4A
     23  f46b		       20 b0 f2 	      jsr	KernelA_UpdateRegs
     24  f46e		       84 a0		      sty	RamKernelGemini4
     25  f470
     26  f470
     27  f470
     28  f470				   .endif_1
     29  f470
     30  f470
     31  f470
     32  f470
     33  f470
     34  f470
     35  f470
     36  f470
     37  f470
     38  f470
     39  f470
     40  f470
     41  f470
     42  f470		       2a		      rol
     43  f471		       2a		      rol
     44  f472		       2a		      rol
     45  f473		       2a		      rol
     46  f474		       2a		      rol
     47  f475		       2a		      rol
     48  f476		       2a		      rol
    543  f477		       85 91		      sta	RamNibbleVar2
    544  f479		       4c cc f4 	      jmp	.next
    545  f47c				   .kernel_b
      0  f47c					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f47c		       a9 00		      lda	#0
      2  f47e		       a2 aa		      ldx	#SENTINEL
      3  f480		       86 a3		      stx	BuildKernelX
      4  f482		       86 a4		      stx	BuildKernelY
      5  f484		       86 a5		      stx	BuildKernelRST
      6  f486
      7  f486		       ac 83 f2 	      ldy	GEM1B
      8  f489		       20 b0 f2 	      jsr	KernelA_UpdateRegs
      9  f48c		       84 9e		      sty	RamKernelGemini3
     10  f48e
     11  f48e		       ac 84 f2 	      ldy	GEM2B
     12  f491		       20 9a f2 	      jsr	KernelB_GenPhp
     13  f494				   .if_1
     14  f494		       d0 05		      bne	.else_1
     15  f496		       38		      sec
     16  f497		       2a		      rol
     17  f498		       4c a5 f4 	      jmp	.endif_1
     18  f49b
     19  f49b
     20  f49b				   .else_1
     21  f49b		       18		      clc
     22  f49c		       2a		      rol
     23  f49d
     24  f49d		       ac 84 f2 	      ldy	GEM2B
     25  f4a0		       20 b0 f2 	      jsr	KernelB_UpdateRegs
     26  f4a3		       84 9a		      sty	RamKernelGemini1
     27  f4a5
     28  f4a5
     29  f4a5				   .endif_1
     30  f4a5
     31  f4a5		       ac 85 f2 	      ldy	GEM3B
     32  f4a8		       20 9a f2 	      jsr	KernelB_GenPhp
     33  f4ab				   .if_2
     34  f4ab		       d0 05		      bne	.else_2
     35  f4ad		       38		      sec
     36  f4ae		       2a		      rol
     37  f4af		       4c bc f4 	      jmp	.endif_2
     38  f4b2
     39  f4b2
     40  f4b2				   .else_2
     41  f4b2		       18		      clc
     42  f4b3		       2a		      rol
     43  f4b4
     44  f4b4		       ac 83 f2 	      ldy	GEM1B
     45  f4b7		       20 b0 f2 	      jsr	KernelB_UpdateRegs
     46  f4ba		       84 9a		      sty	RamKernelGemini1
     47  f4bc
     48  f4bc
     49  f4bc				   .endif_2
     50  f4bc
     51  f4bc		       ac 86 f2 	      ldy	GEM4B
     52  f4bf		       20 b0 f2 	      jsr	KernelA_UpdateRegs
     53  f4c2		       84 a0		      sty	RamKernelGemini4
     54  f4c4
     55  f4c4
     56  f4c4
     57  f4c4
     58  f4c4
     59  f4c4
     60  f4c4
     61  f4c4
     62  f4c4
     63  f4c4
     64  f4c4
     65  f4c4
     66  f4c4
     67  f4c4		       2a		      rol
     68  f4c5		       2a		      rol
     69  f4c6		       2a		      rol
     70  f4c7		       2a		      rol
     71  f4c8		       2a		      rol
     72  f4c9		       2a		      rol
    547  f4ca		       85 90		      sta	RamNibbleVar1
    548  f4cc				   .next
    549  f4cc
    550  f4cc							; TODO move this into the row kernel
    551  f4cc				   DBG_NIBBLE_RUN subroutine
    552  f4cc		       ae 00 f1 	      ldx	$f100
    553  f4cf		       e0 0a		      cpx	#$a
    554  f4d1		       f0 03		      beq	[. + 5]
    555  f4d3		       4c 84 f5 	      jmp	.kernel_b
    556  f4d6				   .kernel_a
    557  f4d6		       a5 90		      lda	RamNibbleVar1
      0  f4d8					      NIBBLE_gem_kernel_a_1
      1  f4d8				   .if_1
      2  f4d8		       0a		      asl
      3  f4d9		       90 03		      bcc	.else_1
      4  f4db		       4c f8 f4 	      jmp	.endif_1
      5  f4de				   .else_1
      6  f4de				   .if_2
      7  f4de		       0a		      asl
      8  f4df		       90 0d		      bcc	.else_2
      9  f4e1		       a2 86		      ldx	#BC_STX
     10  f4e3		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f4e6		       a2 11		      ldx	#RESP1
     12  f4e8		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f4eb		       4c f8 f4 	      jmp	.endif_2
     14  f4ee				   .else_2
     15  f4ee		       a6 9a		      ldx	RamKernelGemini1
     16  f4f0		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f4f3		       a6 9b		      ldx	RamKernelGemini1Reg
     18  f4f5		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f4f8				   .endif_2
     20  f4f8				   .endif_1
     21  f4f8				   .if_3
     22  f4f8		       0a		      asl
     23  f4f9		       90 0d		      bcc	.else_3
     24  f4fb		       a2 79		      ldx	#NOP_REG
     25  f4fd		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f500		       a2 11		      ldx	#RESP1
     27  f502		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f505		       4c 17 f5 	      jmp	.endif_3
     29  f508				   .else_3
     30  f508		       a2 11		      ldx	#RESP1
     31  f50a		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f50d		       a6 9c		      ldx	RamKernelGemini2
     33  f50f		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f512		       a6 9d		      ldx	RamKernelGemini2Reg
     35  f514		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f517				   .endif_3
     37  f517				   .if_4
     38  f517		       0a		      asl
     39  f518		       90 08		      bcc	.else_4
     40  f51a		       a2 11		      ldx	#RESP1
     41  f51c		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f51f		       4c 2c f5 	      jmp	.endif_4
     43  f522				   .else_4
     44  f522		       a6 9e		      ldx	RamKernelGemini3
     45  f524		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f527		       a6 9f		      ldx	RamKernelGemini3Reg
     47  f529		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f52c				   .endif_4
    559  f52c		       a5 91		      lda	RamNibbleVar2
      0  f52e					      NIBBLE_gem_kernel_a_2
      1  f52e				   .if_1
      2  f52e		       0a		      asl
      3  f52f		       90 20		      bcc	.else_1
      4  f531		       a2 85		      ldx	#BC_STA
      5  f533		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f536		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f538		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f53b		       a2 85		      ldx	#BC_STA
      9  f53d		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f540		       a2 0e		      ldx	#PF1
     11  f542		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f545		       a2 08		      ldx	#BC_PHP
     13  f547		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f54a		       a2 26		      ldx	#VDELP1
     15  f54c		       86 97		      stx	[RamKernelPhpTarget + 0]
     16  f54e		       4c 6e f5 	      jmp	.endif_1
     17  f551				   .else_1
     18  f551		       a2 08		      ldx	#BC_PHP
     19  f553		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f556		       a2 85		      ldx	#BC_STA
     21  f558		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f55b		       a2 0e		      ldx	#PF1
     23  f55d		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f560		       a6 a0		      ldx	RamKernelGemini4
     25  f562		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f565		       a2 1c		      ldx	#EMERALD_SP
     27  f567		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f56a		       a2 11		      ldx	#RESP1
     29  f56c		       86 97		      stx	[RamKernelPhpTarget + 0]
     30  f56e				   .endif_1
     31  f56e		       a6 a7		      ldx	BuildKernelVdel1
     32  f570		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f573		       a6 a6		      ldx	BuildKernelGrp0
     34  f575		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f578		       a6 a3		      ldx	BuildKernelX
     36  f57a		       86 98		      stx	[RamKernelX + 0]
     37  f57c		       a6 a4		      ldx	BuildKernelY
     38  f57e		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    561  f581		       4c 0b f6 	      jmp	.next
    562  f584				   .kernel_b
    563  f584		       a5 90		      lda	RamNibbleVar1
      0  f586					      NIBBLE_gem_kernel_b
      1  f586		       a6 9e		      ldx	RamKernelGemini3
      2  f588		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f58b				   .if_1
      4  f58b		       0a		      asl
      5  f58c		       90 2a		      bcc	.else_1
      6  f58e		       a2 1c		      ldx	#EMERALD_SP
      7  f590		       86 97		      stx	[RamKernelPhpTarget + 0]
      8  f592		       a2 84		      ldx	#BC_STY
      9  f594		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f597		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f599		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f59c		       a2 08		      ldx	#BC_PHP
     13  f59e		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f5a1		       a2 85		      ldx	#BC_STA
     15  f5a3		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f5a6		       a2 0e		      ldx	#PF1
     17  f5a8		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f5ab		       a2 84		      ldx	#BC_STY
     19  f5ad		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f5b0		       a2 1c		      ldx	#EMERALD_SP
     21  f5b2		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f5b5		       4c c2 f5 	      jmp	.endif_1
     23  f5b8				   .else_1
     24  f5b8		       a6 9a		      ldx	RamKernelGemini1
     25  f5ba		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f5bd		       a2 1c		      ldx	#EMERALD_SP
     27  f5bf		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f5c2				   .endif_1
     29  f5c2				   .if_2
     30  f5c2		       0a		      asl
     31  f5c3		       90 2a		      bcc	.else_2
     32  f5c5		       a2 1c		      ldx	#EMERALD_SP
     33  f5c7		       86 97		      stx	[RamKernelPhpTarget + 0]
     34  f5c9		       a2 84		      ldx	#BC_STY
     35  f5cb		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f5ce		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f5d0		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f5d3		       a2 84		      ldx	#BC_STY
     39  f5d5		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f5d8		       a2 1c		      ldx	#EMERALD_SP
     41  f5da		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f5dd		       a2 85		      ldx	#BC_STA
     43  f5df		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f5e2		       a2 0e		      ldx	#PF1
     45  f5e4		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f5e7		       a2 08		      ldx	#BC_PHP
     47  f5e9		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f5ec		       4c f9 f5 	      jmp	.endif_2
     49  f5ef				   .else_2
     50  f5ef		       a6 9a		      ldx	RamKernelGemini1
     51  f5f1		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     52  f5f4		       a2 1c		      ldx	#EMERALD_SP
     53  f5f6		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     54  f5f9				   .endif_2
     55  f5f9		       a6 a0		      ldx	RamKernelGemini4
     56  f5fb		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     57  f5fe		       a6 a6		      ldx	BuildKernelGrp0
     58  f600		       8e 08 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     59  f603		       a6 a3		      ldx	BuildKernelX
     60  f605		       86 98		      stx	[RamKernelX + 0]
     61  f607		       a6 a4		      ldx	BuildKernelY
     62  f609		       86 99		      stx	[RamKernelY + 0]
    565  f60b				   .next
    566  f60b
    567  f60b				   VerticalBlankEnd
    568  f60b							; Wait until the end of Vertical blank.
      0  f60b					      TIMER_WAIT
      1  f60b				   .waittimer
      2  f60b		       ad 84 02 	      lda	INTIM
      3  f60e		       d0 fb		      bne	.waittimer
      4  f610		       85 02		      sta	WSYNC
      0  f612					      ASSERT_RUNTIME	"_scan == #37"
      1  f612				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f612  && !(  _scan == #37  ) }
      2  f612					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    571  f612
    572  f612							; Save stack pointer
    573  f612		       ba		      tsx
    574  f613		       86 94		      stx	RamStackBkp
    575  f615
    576  f615							; Start rendering the kernel.
    577  f615		       4c ce f7 	      jmp	KernelBorder
    578  f618
    579  f700		       00 00 00 00*	      align	256	; TODO why
    580  f700
    581  f700				   FrameEnd   subroutine
    582  f700		       85 02		      sta	WSYNC
    583  f702
    584  f702							; Blank all background colors.
    585  f702		       a9 00		      lda	#0
    586  f704		       85 08		      sta	COLUPF
    587  f706		       85 0f		      sta	PF2
    588  f708		       85 0e		      sta	PF1
    589  f70a		       85 1c		      sta	EMERALD_SP
    590  f70c
    591  f70c							; Guide lines (2x)
    592  f70c		       a9 02		      lda	#SIGNAL_LINE
    593  f70e		       85 09		      sta	COLUBK
    594  f710					      REPEAT	6
    595  f710		       85 02		      sta	WSYNC
    594  f710					      REPEND
    595  f712		       85 02		      sta	WSYNC
    594  f712					      REPEND
    595  f714		       85 02		      sta	WSYNC
    594  f714					      REPEND
    595  f716		       85 02		      sta	WSYNC
    594  f716					      REPEND
    595  f718		       85 02		      sta	WSYNC
    594  f718					      REPEND
    595  f71a		       85 02		      sta	WSYNC
    596  f71c					      REPEND
    597  f71c		       a9 00		      lda	#$00
    598  f71e		       85 09		      sta	COLUBK
    599  f720
    600  f720							; Restore stack pointer
    601  f720		       a6 94		      ldx	RamStackBkp
    602  f722		       9a		      txs
    603  f723
    604  f723							; Display the rest of the blank screen.
      0  f723					      TIMER_SETUP	25
      1  f723				   .lines     SET	25
      2  f723		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f725		       85 02		      sta	WSYNC
      4  f727		       8d 96 02 	      sta	TIM64T
    606  f72a		       85 02		      sta	WSYNC
      0  f72c					      TIMER_WAIT
      1  f72c				   .waittimer
      2  f72c		       ad 84 02 	      lda	INTIM
      3  f72f		       d0 fb		      bne	.waittimer
      4  f731		       85 02		      sta	WSYNC
      0  f733					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f733				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f733  && !(  _scan == (#37 + #192)  ) }
      2  f733					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    609  f733
    610  f733							; Overscan
    611  f733				   Overscan   subroutine
    612  f733		       85 01		      sta	VBLANK
      0  f735					      TIMER_SETUP	29
      1  f735				   .lines     SET	29
      2  f735		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f737		       85 02		      sta	WSYNC
      4  f739		       8d 96 02 	      sta	TIM64T
    614  f73c
    615  f73c		       20 4c f7 	      jsr	MoveJoystick
    616  f73f		       20 83 f7 	      jsr	SpeedCalculation
    617  f742
      0  f742					      TIMER_WAIT
      1  f742				   .waittimer
      2  f742		       ad 84 02 	      lda	INTIM
      3  f745		       d0 fb		      bne	.waittimer
      4  f747		       85 02		      sta	WSYNC
      0  f749					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f749				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f749  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f749					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    620  f749
    621  f749		       4c d7 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f74c					      include	"game_input.s"
      1  f74c							; Handles input checking. Called from overscan.
      2  f74c
      3  f74c							; Read joystick movement and apply to object 0
      4  f74c				   MoveJoystick
      5  f74c							; Move vertically
      6  f74c							; (up and down are actually reversed since ypos starts at bottom)
      7  f74c							;     ldx YPos
      8  f74c		       a9 10		      lda	#%00010000	;Up?
      9  f74e		       2c 80 02 	      bit	SWCHA
     10  f751		       d0 0d		      bne	SkipMoveUp
     11  f753
     12  f753		       18		      clc
     13  f754		       a5 88		      lda	Speed2
     14  f756		       69 0c		      adc	#12
     15  f758		       85 88		      sta	Speed2
     16  f75a		       a5 87		      lda	Speed1
     17  f75c		       69 00		      adc	#00
     18  f75e		       85 87		      sta	Speed1
     19  f760
     20  f760				   SkipMoveUp
     21  f760		       a6 86		      ldx	XPos
     22  f762
     23  f762							; Only check left/right on odd frames;
     24  f762							; TODO make this just a fractional speed
     25  f762							; rather than dropping frames
     26  f762		       a9 01		      lda	#01
     27  f764		       25 83		      and	FrameCount
     28  f766		       d0 18		      bne	SkipMoveRight
     29  f768
     30  f768
     31  f768							; Move horizontally
     32  f768		       a9 40		      lda	#%01000000	;Left?
     33  f76a		       2c 80 02 	      bit	SWCHA
     34  f76d		       d0 05		      bne	SkipMoveLeft
     35  f76f		       e0 1d		      cpx	#29
     36  f771		       90 01		      bcc	SkipMoveLeft
     37  f773		       ca		      dex
     38  f774
     39  f774							; Reflect
     40  f774							;     lda #$ff
     41  f774							;     sta REFP0
     42  f774				   SkipMoveLeft
     43  f774		       a9 80		      lda	#%10000000	;Right?
     44  f776		       2c 80 02 	      bit	SWCHA
     45  f779		       d0 05		      bne	SkipMoveRight
     46  f77b		       e0 80		      cpx	#128
     47  f77d		       b0 01		      bcs	SkipMoveRight
     48  f77f		       e8		      inx
     49  f780
     50  f780							; Reflect
     51  f780							;     lda #$0
     52  f780							;     sta REFP0
     53  f780				   SkipMoveRight
     54  f780		       86 86		      stx	XPos
     55  f782		       60		      rts
     56  f783
     57  f783
     58  f783				   SpeedCalculation
     59  f783		       38		      sec
     60  f784		       a5 88		      lda	Speed2
     61  f786		       e9 07		      sbc	#7
     62  f788		       85 88		      sta	Speed2
     63  f78a		       a5 87		      lda	Speed1
     64  f78c		       e9 00		      sbc	#0
     65  f78e		       85 87		      sta	Speed1
     66  f790
     67  f790		       18		      clc
     68  f791		       a5 8a		      lda	YPos2
     69  f793		       65 88		      adc	Speed2
     70  f795		       85 8a		      sta	YPos2
     71  f797		       a5 89		      lda	YPos
     72  f799		       65 87		      adc	Speed1
     73  f79b		       85 89		      sta	YPos
     74  f79d
     75  f79d		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f79f		       b0 0a		      bcs	NewThing2
     77  f7a1
     78  f7a1							; Reset to floor
     79  f7a1		       a9 3e		      lda	#FLOOR_OFFSET
     80  f7a3		       85 89		      sta	YPos
     81  f7a5		       a9 00		      lda	#0
     82  f7a7		       85 87		      sta	Speed1
     83  f7a9		       85 88		      sta	Speed2
     84  f7ab				   NewThing2
     85  f7ab
     86  f7ab		       c9 be		      cmp	#CEILING_OFFSET
     87  f7ad		       90 0a		      bcc	.next
     88  f7af
     89  f7af							; Reset to ceiling
     90  f7af		       a9 be		      lda	#CEILING_OFFSET
     91  f7b1		       85 89		      sta	YPos
     92  f7b3		       a9 00		      lda	#0
     93  f7b5		       85 87		      sta	Speed1
     94  f7b7		       85 88		      sta	Speed2
     95  f7b9				   .next
     96  f7b9		       60		      rts
     97  f7ba
     98  f7ba
     99  f7ba
    100  f7ba							; Subroutine
    101  f7ba				   SetHorizPos
    102  f7ba		       85 02		      sta	WSYNC	; start a new line
    103  f7bc		       24 00		      bit	0	; waste 3 cycles
    104  f7be		       38		      sec		; set carry flag
    105  f7bf				   DivideLoop
    106  f7bf		       e9 0f		      sbc	#15	; subtract 15
    107  f7c1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f7c3		       49 07		      eor	#7	; calculate fine offset
    109  f7c5		       0a		      asl
    110  f7c6		       0a		      asl
    111  f7c7		       0a		      asl
    112  f7c8		       0a		      asl
    113  f7c9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f7cb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f7cd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f7ce					      include	"kernel_border.s"
      1  f7ce							; Visible Kernel
      2  f7ce
      3  f7ce				   KernelBorder subroutine
      4  f7ce		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f7d0
      6  f7d0							; First HMOVE
      7  f7d0		       85 2a		      sta	HMOVE
      8  f7d2
      9  f7d2							; Border top
     10  f7d2		       a9 00		      lda	#0
     11  f7d4		       85 08		      sta	COLUPF
     12  f7d6		       85 0e		      sta	PF1
     13  f7d8		       85 0f		      sta	PF2
     14  f7da		       a9 02		      lda	#SIGNAL_LINE
     15  f7dc		       85 09		      sta	COLUBK
     16  f7de
     17  f7de					      REPEAT	6
     18  f7de		       85 02		      sta	WSYNC
     17  f7de					      REPEND
     18  f7e0		       85 02		      sta	WSYNC
     17  f7e0					      REPEND
     18  f7e2		       85 02		      sta	WSYNC
     17  f7e2					      REPEND
     18  f7e4		       85 02		      sta	WSYNC
     17  f7e4					      REPEND
     18  f7e6		       85 02		      sta	WSYNC
     17  f7e6					      REPEND
     18  f7e8		       85 02		      sta	WSYNC
     19  f7ea					      REPEND
     20  f7ea
     21  f7ea		       a9 00		      lda	#0
     22  f7ec		       85 09		      sta	COLUBK
     23  f7ee		       85 02		      sta	WSYNC
     24  f7f0
     25  f7f0							; Start top border
     26  f7f0				   border_top
     27  f7f0							; Make the playfield solid.
     28  f7f0		       a9 3f		      lda	#%00111111
     29  f7f2		       85 0e		      sta	PF1
     30  f7f4		       a9 ff		      lda	#%11111111
     31  f7f6		       85 0f		      sta	PF2
     32  f7f8
     33  f7f8		       a9 42		      lda	#COL_BG
     34  f7fa		       a0 00		      ldy	#0
     35  f7fc
     36  f7fc							; X_XXXX_XX
     37  f7fc							; Commented lines removed to save on space.
     38  f7fc		       85 08		      sta	COLUPF
     39  f7fe		       85 02		      sta	WSYNC
     40  f800		       84 08		      sty	COLUPF
     41  f802		       85 02		      sta	WSYNC
     42  f804		       85 08		      sta	COLUPF
     43  f806		       85 02		      sta	WSYNC
     44  f808							; sta COLUPF
     45  f808		       85 02		      sta	WSYNC
     46  f80a							; sta COLUPF
     47  f80a		       85 02		      sta	WSYNC
     48  f80c		       84 08		      sty	COLUPF
     49  f80e		       85 02		      sta	WSYNC
     50  f810		       85 08		      sta	COLUPF
     51  f812
     52  f812		       85 02		      sta	WSYNC
     53  f814							; sta COLUPF
     54  f814
     55  f814				   PlayArea
     56  f814							; PF is now the playing area
      0  f814					      ASSERT_RUNTIME	"_scycles == #0"
      1  f814				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f814  && !(  _scycles == #0  ) }
      2  f814					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f814					      sleep	61
      1  f814				   .CYCLES    SET	61
      2  f814
      3  f814				  -	      IF	.CYCLES < 2
      4  f814				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f814				  -	      ERR
      6  f814					      ENDIF
      7  f814
      8  f814					      IF	.CYCLES & 1
      9  f814					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f814		       04 00		      nop	0
     11  f816				  -	      ELSE
     12  f816				  -	      bit	VSYNC
     13  f816					      ENDIF
     14  f816				   .CYCLES    SET	.CYCLES - 3
     15  f816					      ENDIF
     16  f816
     17  f816					      REPEAT	.CYCLES / 2
     18  f816		       ea		      nop
     17  f816					      REPEND
     18  f817		       ea		      nop
     17  f817					      REPEND
     18  f818		       ea		      nop
     17  f818					      REPEND
     18  f819		       ea		      nop
     17  f819					      REPEND
     18  f81a		       ea		      nop
     17  f81a					      REPEND
     18  f81b		       ea		      nop
     17  f81b					      REPEND
     18  f81c		       ea		      nop
     17  f81c					      REPEND
     18  f81d		       ea		      nop
     17  f81d					      REPEND
     18  f81e		       ea		      nop
     17  f81e					      REPEND
     18  f81f		       ea		      nop
     17  f81f					      REPEND
     18  f820		       ea		      nop
     17  f820					      REPEND
     18  f821		       ea		      nop
     17  f821					      REPEND
     18  f822		       ea		      nop
     17  f822					      REPEND
     18  f823		       ea		      nop
     17  f823					      REPEND
     18  f824		       ea		      nop
     17  f824					      REPEND
     18  f825		       ea		      nop
     17  f825					      REPEND
     18  f826		       ea		      nop
     17  f826					      REPEND
     18  f827		       ea		      nop
     17  f827					      REPEND
     18  f828		       ea		      nop
     17  f828					      REPEND
     18  f829		       ea		      nop
     17  f829					      REPEND
     18  f82a		       ea		      nop
     17  f82a					      REPEND
     18  f82b		       ea		      nop
     17  f82b					      REPEND
     18  f82c		       ea		      nop
     17  f82c					      REPEND
     18  f82d		       ea		      nop
     17  f82d					      REPEND
     18  f82e		       ea		      nop
     17  f82e					      REPEND
     18  f82f		       ea		      nop
     17  f82f					      REPEND
     18  f830		       ea		      nop
     17  f830					      REPEND
     18  f831		       ea		      nop
     17  f831					      REPEND
     18  f832		       ea		      nop
     19  f833					      REPEND
     59  f833		       a9 00		      lda	#%00000000
     60  f835		       85 0d		      sta	PF0
     61  f837		       a9 20		      lda	#%00100000
     62  f839		       85 0e		      sta	PF1
     63  f83b		       a9 00		      lda	#%00000000
     64  f83d		       85 0f		      sta	PF2
      0  f83f					      ASSERT_RUNTIME	"_scycles == #0"
      1  f83f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f83f  && !(  _scycles == #0  ) }
      2  f83f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f83f					      sleep	7
      1  f83f				   .CYCLES    SET	7
      2  f83f
      3  f83f				  -	      IF	.CYCLES < 2
      4  f83f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f83f				  -	      ERR
      6  f83f					      ENDIF
      7  f83f
      8  f83f					      IF	.CYCLES & 1
      9  f83f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f83f		       04 00		      nop	0
     11  f841				  -	      ELSE
     12  f841				  -	      bit	VSYNC
     13  f841					      ENDIF
     14  f841				   .CYCLES    SET	.CYCLES - 3
     15  f841					      ENDIF
     16  f841
     17  f841					      REPEAT	.CYCLES / 2
     18  f841		       ea		      nop
     17  f841					      REPEND
     18  f842		       ea		      nop
     19  f843					      REPEND
     67  f843		       4c 75 f8 	      jmp	row_start
     68  f846							; enter row on cycle 10.
     69  f846
     70  f846							; reset the background for bottom of playfield
     71  f846				   border_bottom
     72  f846							;sta WSYNC
     73  f846
     74  f846							; Form the bottom of the level frame.
     75  f846		       a9 3f		      lda	#%00111111
     76  f848		       85 0e		      sta	PF1
     77  f84a		       a9 ff		      lda	#%11111111
     78  f84c		       85 0f		      sta	PF2
     79  f84e
     80  f84e							; Clear all sprites.
     81  f84e		       a9 00		      lda	#0
     82  f850		       85 1c		      sta	EMERALD_SP
     83  f852		       85 1b		      sta	JET_SP
     84  f854		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f856
     86  f856		       a9 42		      lda	#COL_BG
     87  f858		       a0 00		      ldy	#0
     88  f85a		       85 02		      sta	WSYNC
     89  f85c
     90  f85c		       84 08		      sty	COLUPF
     91  f85e		       85 02		      sta	WSYNC
     92  f860
     93  f860		       85 08		      sta	COLUPF
     94  f862		       85 02		      sta	WSYNC
     95  f864
     96  f864		       85 02		      sta	WSYNC
     97  f866
     98  f866		       85 02		      sta	WSYNC
     99  f868
    100  f868		       84 08		      sty	COLUPF
    101  f86a		       85 02		      sta	WSYNC
    102  f86c
    103  f86c		       85 08		      sta	COLUPF
    104  f86e		       85 02		      sta	WSYNC
    105  f870		       85 02		      sta	WSYNC
    106  f872		       4c 00 f7 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f875					      include	"kernel_row.s"
      1  f875							; Frame Start
      2  f875
      3  f875							; Macros for calculating sprite values (GRPx).
      4  f875
      5  f875							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f875					      mac	kernel_load_player
      7  f875							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f875					      dcp	SpriteEnd	; 5c
      9  f875					      ldy	#0	; 2c
     10  f875							; constant 6c:
     11  f875					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f875					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f875					      ldy	SpriteEnd
     14  f875							; 4c
     15  f875					      ldx	Frame0,Y
     16  f875					      endm
     17  f875
     18  f875							; mac jet_spritedata_calc
     19  f875							;
     20  f875							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f875							; GRP0.
     22  f875					      mac	jet_spritedata_calc
     23  f875							; loader
     24  f875					      lda	#SPRITE_HEIGHT
     25  f875					      dcp	SpriteEnd
     26  f875					      ldy	SpriteEnd
     27  f875
     28  f875							; 4c
     29  f875							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f875							; from Frame0 + Y must never cross a page boundary.
     31  f875					      lda	Frame0,Y
     32  f875							; 6c
     33  f875					      .byte	$b0, $01	;2c / 3c (taken)
     34  f875					      .byte	$2c	; 4c / 0c
     35  f875					      sta	JET_SP	; 0c / 3c
     36  f875					      endm
     37  f875
     38  f875				   row_start
     39  f875
     40  f875							; [scanline 1]
     41  f875				   row_1
     42  f875							; Enter after scanline starts on row "9" and wraps
      0  f875					      ASSERT_RUNTIME	"_scycles == #10"
      1  f875				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f875  && !(  _scycles == #10  ) }
      2  f875					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f875
      0  f875					      jet_spritedata_calc
      1  f875
      2  f875		       a9 09		      lda	#SPRITE_HEIGHT
      3  f877		       c7 85		      dcp	SpriteEnd
      4  f879		       a4 85		      ldy	SpriteEnd
      5  f87b
      6  f87b
      7  f87b
      8  f87b
      9  f87b		       b9 00 fb 	      lda	Frame0,Y
     10  f87e
     11  f87e		       b0 01		      .byte.b	$b0, $01
     12  f880		       2c		      .byte.b	$2c
     13  f881		       85 1b		      sta	JET_SP
     46  f883
     47  f883							; [[[Nibble VM.]]]
     48  f883		       85 02		      sta	WSYNC
     49  f885
     50  f885							; sleep 46
     51  f885
      0  f885					      ASSERT_RUNTIME	"_scycles == #0"
      1  f885				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f885  && !(  _scycles == #0  ) }
      2  f885					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f885
     54  f885							; [scanline 2]
     55  f885				   row_2
      0  f885					      jet_spritedata_calc
      1  f885
      2  f885		       a9 09		      lda	#SPRITE_HEIGHT
      3  f887		       c7 85		      dcp	SpriteEnd
      4  f889		       a4 85		      ldy	SpriteEnd
      5  f88b
      6  f88b
      7  f88b
      8  f88b
      9  f88b		       b9 00 fb 	      lda	Frame0,Y
     10  f88e
     11  f88e		       b0 01		      .byte.b	$b0, $01
     12  f890		       2c		      .byte.b	$2c
     13  f891		       85 1b		      sta	JET_SP
     57  f893
     58  f893							; Black out playfield
     59  f893							; TODO This should be done with playfield pixels, not color.
     60  f893		       a9 00		      lda	#0
     61  f895		       85 08		      sta	COLUPF
     62  f897
     63  f897							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  f897		       a6 97		      ldx	RamKernelPhpTarget
     65  f899		       9a		      txs
     66  f89a
     67  f89a							; [[[Nibble VM.]]]
      0  f89a					      sleep	30
      1  f89a				   .CYCLES    SET	30
      2  f89a
      3  f89a				  -	      IF	.CYCLES < 2
      4  f89a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f89a				  -	      ERR
      6  f89a					      ENDIF
      7  f89a
      8  f89a				  -	      IF	.CYCLES & 1
      9  f89a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f89a				  -	      nop	0
     11  f89a				  -	      ELSE
     12  f89a				  -	      bit	VSYNC
     13  f89a				  -	      ENDIF
     14  f89a				  -.CYCLES    SET	.CYCLES - 3
     15  f89a					      ENDIF
     16  f89a
     17  f89a					      REPEAT	.CYCLES / 2
     18  f89a		       ea		      nop
     17  f89a					      REPEND
     18  f89b		       ea		      nop
     17  f89b					      REPEND
     18  f89c		       ea		      nop
     17  f89c					      REPEND
     18  f89d		       ea		      nop
     17  f89d					      REPEND
     18  f89e		       ea		      nop
     17  f89e					      REPEND
     18  f89f		       ea		      nop
     17  f89f					      REPEND
     18  f8a0		       ea		      nop
     17  f8a0					      REPEND
     18  f8a1		       ea		      nop
     17  f8a1					      REPEND
     18  f8a2		       ea		      nop
     17  f8a2					      REPEND
     18  f8a3		       ea		      nop
     17  f8a3					      REPEND
     18  f8a4		       ea		      nop
     17  f8a4					      REPEND
     18  f8a5		       ea		      nop
     17  f8a5					      REPEND
     18  f8a6		       ea		      nop
     17  f8a6					      REPEND
     18  f8a7		       ea		      nop
     17  f8a7					      REPEND
     18  f8a8		       ea		      nop
     19  f8a9					      REPEND
     69  f8a9
     70  f8a9							; Load PF1 value
     71  f8a9		       a9 a0		      lda	#%10100000
     72  f8ab		       85 95		      sta	RamPF1Value
     73  f8ad
     74  f8ad		       a9 04		      lda	#4
     75  f8af		       8d 96 02 	      sta	TIM64T
     76  f8b2
     77  f8b2							; Enable playfield at end of scanline
     78  f8b2		       a9 42		      lda	#COL_BG
     79  f8b4		       85 08		      sta	COLUPF
     80  f8b6
     81  f8b6							; lda #%00001000
     82  f8b6							; sta REFP1
     83  f8b6
      0  f8b6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f8b6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f8b6  && !(  _scycles == #0  ) }
      2  f8b6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f8b6
     86  f8b6							; [scanline 3]
     87  f8b6				   row_3
      0  f8b6					      jet_spritedata_calc
      1  f8b6
      2  f8b6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f8b8		       c7 85		      dcp	SpriteEnd
      4  f8ba		       a4 85		      ldy	SpriteEnd
      5  f8bc
      6  f8bc
      7  f8bc
      8  f8bc
      9  f8bc		       b9 00 fb 	      lda	Frame0,Y
     10  f8bf
     11  f8bf		       b0 01		      .byte.b	$b0, $01
     12  f8c1		       2c		      .byte.b	$2c
     13  f8c2		       85 1b		      sta	JET_SP
     89  f8c4
     90  f8c4							; Pre-populate graphics.
     91  f8c4		       a9 09		      lda	#SPRITE_HEIGHT
      0  f8c6					      KERNEL_LOAD_PLAYER
      1  f8c6
      2  f8c6		       c7 85		      dcp	SpriteEnd
      3  f8c8		       a0 00		      ldy	#0
      4  f8ca
      5  f8ca		       b0 01		      .byte.b	$b0, $01
      6  f8cc		       2c		      .byte.b	$2c
      7  f8cd		       a4 85		      ldy	SpriteEnd
      8  f8cf
      9  f8cf		       be 00 fb 	      ldx	Frame0,Y
     93  f8d2		       86 96		      stx	RamKernelGRP0
      0  f8d4					      KERNEL_LOAD_PLAYER
      1  f8d4
      2  f8d4		       c7 85		      dcp	SpriteEnd
      3  f8d6		       a0 00		      ldy	#0
      4  f8d8
      5  f8d8		       b0 01		      .byte.b	$b0, $01
      6  f8da		       2c		      .byte.b	$2c
      7  f8db		       a4 85		      ldy	SpriteEnd
      8  f8dd
      9  f8dd		       be 00 fb 	      ldx	Frame0,Y
     95  f8e0		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f8e3		       a5 96		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  f8e5					      sleep	2
      1  f8e5				   .CYCLES    SET	2
      2  f8e5
      3  f8e5				  -	      IF	.CYCLES < 2
      4  f8e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8e5				  -	      ERR
      6  f8e5					      ENDIF
      7  f8e5
      8  f8e5				  -	      IF	.CYCLES & 1
      9  f8e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8e5				  -	      nop	0
     11  f8e5				  -	      ELSE
     12  f8e5				  -	      bit	VSYNC
     13  f8e5				  -	      ENDIF
     14  f8e5				  -.CYCLES    SET	.CYCLES - 3
     15  f8e5					      ENDIF
     16  f8e5
     17  f8e5					      REPEAT	.CYCLES / 2
     18  f8e5		       ea		      nop
     19  f8e6					      REPEND
     98  f8e6
     99  f8e6							; [scanlines 4-5]
    100  f8e6							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  f8e6		       a6 98		      ldx	RamKernelX
    102  f8e8		       38		      sec
      0  f8e9					      ASSERT_RUNTIME	"_scycles == #73"
      1  f8e9				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f8e9  && !(  _scycles == #73  ) }
      2  f8e9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f8e9		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  f8ec
    106  f8ec							; [scanline 6]
    107  f8ec
    108  f8ec							; Try to avoid page crossing in jet_spritedata_calc
    109  f8ec							; TODO enforce this with ASSERT_RUNTIME instead?
    110  f8f0		       00 00 00 00	      align	16
    111  f8f0
    112  f8f0				   row_after_kernel
    113  f8f0				   row_6
      0  f8f0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f8f0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f8f0  && !(  _scycles == #0  ) }
      2  f8f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  f8f0
    116  f8f0							; Cleanup from the kernel.
    117  f8f0		       a9 00		      lda	#0
    118  f8f2		       85 1e		      sta	EMERALD_MI_ENABLE
    119  f8f4		       85 1c		      sta	EMERALD_SP
    120  f8f6		       85 08		      sta	COLUPF
    121  f8f8		       85 26		      sta	VDELP1
    122  f8fa
      0  f8fa					      jet_spritedata_calc
      1  f8fa
      2  f8fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f8fc		       c7 85		      dcp	SpriteEnd
      4  f8fe		       a4 85		      ldy	SpriteEnd
      5  f900
      6  f900
      7  f900
      8  f900
      9  f900		       b9 00 fb 	      lda	Frame0,Y
     10  f903
     11  f903		       b0 01		      .byte.b	$b0, $01
     12  f905		       2c		      .byte.b	$2c
     13  f906		       85 1b		      sta	JET_SP
    124  f908
    125  f908							; Idle.
    126  f908		       85 02		      sta	WSYNC
    127  f90a
    128  f90a							; [scanline 7]
    129  f90a				   row_7
      0  f90a					      jet_spritedata_calc
      1  f90a
      2  f90a		       a9 09		      lda	#SPRITE_HEIGHT
      3  f90c		       c7 85		      dcp	SpriteEnd
      4  f90e		       a4 85		      ldy	SpriteEnd
      5  f910
      6  f910
      7  f910
      8  f910
      9  f910		       b9 00 fb 	      lda	Frame0,Y
     10  f913
     11  f913		       b0 01		      .byte.b	$b0, $01
     12  f915		       2c		      .byte.b	$2c
     13  f916		       85 1b		      sta	JET_SP
    131  f918
    132  f918		       a9 42		      lda	#COL_BG
    133  f91a		       85 08		      sta	COLUPF
    134  f91c
    135  f91c							; FRAMESWITCH
    136  f91c		       a9 01		      lda	#01
    137  f91e		       25 83		      and	FrameCount
    138  f920		       d0 13		      bne	loadframe2
    139  f922
    140  f922							; Perform gem loading for Kernel A.
    141  f922
    142  f922				   loadframe1
      0  f922					      ASSERT_RUNTIME	"_scycles == #32"
      1  f922				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f922  && !(  _scycles == #32  ) }
      2  f922					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f922
    145  f922							; Emerald byte setting 1A
    146  f922							; ldx #0
    147  f922							; lda KERNEL_STORAGE_R,X
    148  f922							; sta GEM_00_W
    149  f922							; inx
    150  f922							; lda KERNEL_STORAGE_R,X
    151  f922							; sta GEM_04_W
    152  f922							; inx
    153  f922							; lda KERNEL_STORAGE_R,X
    154  f922							; sta GEM_09_W
    155  f922							; inx
    156  f922
    157  f922		       85 02		      sta	WSYNC
    158  f924
    159  f924							; [scanline 8]
      0  f924					      jet_spritedata_calc
      1  f924
      2  f924		       a9 09		      lda	#SPRITE_HEIGHT
      3  f926		       c7 85		      dcp	SpriteEnd
      4  f928		       a4 85		      ldy	SpriteEnd
      5  f92a
      6  f92a
      7  f92a
      8  f92a
      9  f92a		       b9 00 fb 	      lda	Frame0,Y
     10  f92d
     11  f92d		       b0 01		      .byte.b	$b0, $01
     12  f92f		       2c		      .byte.b	$2c
     13  f930		       85 1b		      sta	JET_SP
    161  f932
    162  f932							; Emerald byte setting 1B
    163  f932							; lda KERNEL_STORAGE_R,X
    164  f932							; sta GEM_13_W
    165  f932							; inx
    166  f932							; lda KERNEL_STORAGE_R,X
    167  f932							; sta GEM_17_W
    168  f932							; inx
    169  f932							; lda KERNEL_STORAGE_R,X
    170  f932							; sta GEM_18_W
    171  f932							; inx
    172  f932							; lda KERNEL_STORAGE_R,X
    173  f932							; sta GEM_22_W
    174  f932
    175  f932		       4c 48 f9 	      jmp	row_8_end
    176  f935
    177  f935							; Perform gem loading for Kernel B.
    178  f935
    179  f935				   loadframe2
      0  f935					      ASSERT_RUNTIME	"_scycles == #33"
      1  f935				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f935  && !(  _scycles == #33  ) }
      2  f935					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f935
    182  f935							; Emerald byte setting 2A
    183  f935							; ldx #[storage_02 - storage]
    184  f935							; lda KERNEL_STORAGE_R,X
    185  f935							; sta GEM_02_W
    186  f935							; inx
    187  f935							; lda KERNEL_STORAGE_R,X
    188  f935							; sta GEM_06_W
    189  f935							; inx
    190  f935							; lda KERNEL_STORAGE_R,X
    191  f935							; sta GEM_08_W
    192  f935							; inx
    193  f935
    194  f935		       85 02		      sta	WSYNC
    195  f937
    196  f937							; [scanline 8]
    197  f937				   row_8
      0  f937					      jet_spritedata_calc
      1  f937
      2  f937		       a9 09		      lda	#SPRITE_HEIGHT
      3  f939		       c7 85		      dcp	SpriteEnd
      4  f93b		       a4 85		      ldy	SpriteEnd
      5  f93d
      6  f93d
      7  f93d
      8  f93d
      9  f93d		       b9 00 fb 	      lda	Frame0,Y
     10  f940
     11  f940		       b0 01		      .byte.b	$b0, $01
     12  f942		       2c		      .byte.b	$2c
     13  f943		       85 1b		      sta	JET_SP
    199  f945
    200  f945							; Emerald byte setting 2B
    201  f945							; lda KERNEL_STORAGE_R,X
    202  f945							; sta GEM_11_W
    203  f945							; inx
    204  f945							; lda KERNEL_STORAGE_R,X
    205  f945							; sta GEM_15_W
    206  f945							; inx
    207  f945							; lda KERNEL_STORAGE_R,X
    208  f945							; sta GEM_20_W
    209  f945							; inx
    210  f945							; lda KERNEL_STORAGE_R,X
    211  f945							; sta GEM_24_W
    212  f945
    213  f945		       4c 48 f9 	      jmp	row_8_end
    214  f948
    215  f948							; Common row 8 return.
    216  f948
    217  f948				   row_8_end
    218  f948							; Idle.
    219  f948		       85 02		      sta	WSYNC
    220  f94a
    221  f94a							; [scanline 8]
    222  f94a							; Repeat loop until LoopCount < 0
    223  f94a		       c6 82		      dec	LoopCount
    224  f94c		       30 03		      bmi	row_end
    225  f94e		       4c 75 f8 	      jmp	row_start
    226  f951				   row_end
    227  f951		       4c 46 f8 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f954					      include	"kernel_gem.s"
      1  f954							;
      2  f954							; Gem Kernels
      3  f954							;
      4  f954							; Gems are displayed in alternating kernels. This chart shows
      5  f954							; which kernel is responsible for which gem, with missiles denoted.
      6  f954							;
      7  f954							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f954							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f954							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f954							;  #	 0^	 8^	  17^	    26^       gem index
     11  f954							;
     12  f954							; The middle bar indicates where the pattern reverses.
     13  f954							;
     14  f954							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f954							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f954							; requires with a single sprite. By alternating sprites each frame with an...
     17  f954							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f954							; line, except for two. These are instead rendered by the missile, which
     19  f954							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f954
     21  f954							; for copying
     22  fa00		       00 00 00 00*	      align	256
     23  fa00
     24  fa00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fa00							;
     26  fa00							; GEM KERNEL A
     27  fa00							;
     28  fa00
     29  fa00				   kernel_1_start subroutine
     30  fa00					      rorg	$f100
     31  fa00
     32  fa00							; Kernel Marker
     33  fa00		       0a		      .byte.b	$A
     34  fa01
     35  fa01				   KernelA_early
     36  fa01							; Early code to set next GRP0 image. Immediate value is overwritten
     37  fa01		       a9 ff		      lda	#$ff
     38  fa03
     39  fa03				   KernelA    subroutine
      0  fa03					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fa03				   .KERNEL    SET	$A
      2  fa03				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fa03					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  fa03
     42  fa03							; Write Gemini 0A into delayed sprite register
     43  fa03		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  fa03		       f1 04	   KernelA_VDEL1 =	. - 1
     45  fa05		       84 1c		      sty	EMERALD_SP
     46  fa07							; Write Player from accumulator. When writing to the other sprite, the
     47  fa07							; TIA will copy Gemini 0A into visible sprite register
     48  fa07		       85 1b		      sta	JET_SP
     49  fa09							; Write Gemini 1A into visible sprite register
     50  fa09		       a0 66		      ldy	#%01100110
     51  fa09		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  fa0b		       84 1c		      sty	EMERALD_SP
     53  fa0d		       a0 06		      ldy	#%00000110	; TODO temporary?
     54  fa0d		       f1 0e	   KernelA_STY =	. - 1
     55  fa0f
     56  fa0f							; Need D0 for VDELP1 trigger with PHP
      0  fa0f					      sleep	2
      1  fa0f				   .CYCLES    SET	2
      2  fa0f
      3  fa0f				  -	      IF	.CYCLES < 2
      4  fa0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa0f				  -	      ERR
      6  fa0f					      ENDIF
      7  fa0f
      8  fa0f				  -	      IF	.CYCLES & 1
      9  fa0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa0f				  -	      nop	0
     11  fa0f				  -	      ELSE
     12  fa0f				  -	      bit	VSYNC
     13  fa0f				  -	      ENDIF
     14  fa0f				  -.CYCLES    SET	.CYCLES - 3
     15  fa0f					      ENDIF
     16  fa0f
     17  fa0f					      REPEAT	.CYCLES / 2
     18  fa0f		       ea		      nop
     19  fa10					      REPEND
     58  fa10
     59  fa10							; Register config
     60  fa10		       a9 08		      lda	#%00001000
     61  fa12							; sta EMERALD_MI_ENABLE ; disable missile FIXME this should be uncommented!
     62  fa12		       85 0c		      sta	REFP1
     63  fa14
     64  fa14							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fa14					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fa14				   .KERNEL    SET	$A
      2  fa14				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fa14					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fa14				   KernelA_A
     67  fa14		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fa16
     69  fa16							; vvv RST0
     70  fa16				   KernelA_B
     71  fa16		       a5 95		      lda	RamPF1Value
     72  fa18				   KernelA_C
     73  fa18		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fa1a				   KernelA_D
     75  fa1a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  fa1a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  fa1a				   .CYCLES    SET	3
      2  fa1a
      3  fa1a				  -	      IF	.CYCLES < 2
      4  fa1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa1a				  -	      ERR
      6  fa1a					      ENDIF
      7  fa1a
      8  fa1a					      IF	.CYCLES & 1
      9  fa1a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa1a		       04 00		      nop	0
     11  fa1c				  -	      ELSE
     12  fa1c				  -	      bit	VSYNC
     13  fa1c					      ENDIF
     14  fa1c				   .CYCLES    SET	.CYCLES - 3
     15  fa1c					      ENDIF
     16  fa1c
     17  fa1c				  -	      REPEAT	.CYCLES / 2
     18  fa1c				  -	      nop
     19  fa1c					      REPEND
     77  fa1c				   KernelA_E
     78  fa1c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     79  fa1e				   KernelA_F
     80  fa1e							; sty EMERALD_MI_ENABLE ; Enable the missile (if we use %0xx00110 pattern)
      0  fa1e					      sleep	3	; FIXME This should be uncommented!
      1  fa1e				   .CYCLES    SET	3
      2  fa1e
      3  fa1e				  -	      IF	.CYCLES < 2
      4  fa1e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa1e				  -	      ERR
      6  fa1e					      ENDIF
      7  fa1e
      8  fa1e					      IF	.CYCLES & 1
      9  fa1e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa1e		       04 00		      nop	0
     11  fa20				  -	      ELSE
     12  fa20				  -	      bit	VSYNC
     13  fa20					      ENDIF
     14  fa20				   .CYCLES    SET	.CYCLES - 3
     15  fa20					      ENDIF
     16  fa20
     17  fa20				  -	      REPEAT	.CYCLES / 2
     18  fa20				  -	      nop
     19  fa20					      REPEND
     82  fa20				   KernelA_G
     83  fa20		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     84  fa22
     85  fa22				   KernelA_H
     86  fa22		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     87  fa24
      0  fa24					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fa24				   .KERNEL    SET	$A
      2  fa24				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fa24					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     89  fa24							; RST4 vvv
     90  fa24				   KernelA_I
     91  fa24		       08		      php		; Reset "medium close" NUSIZ repetition
     92  fa25				   KernelA_J		; unchanging
     93  fa25		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     94  fa27				   KernelA_K
     95  fa27		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     96  fa29							; RST4 ^^^
     97  fa29
     98  fa29				   KernelA_L
      0  fa29					      sleep	3	; when possible, sta VDELP0
      1  fa29				   .CYCLES    SET	3
      2  fa29
      3  fa29				  -	      IF	.CYCLES < 2
      4  fa29				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa29				  -	      ERR
      6  fa29					      ENDIF
      7  fa29
      8  fa29					      IF	.CYCLES & 1
      9  fa29					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa29		       04 00		      nop	0
     11  fa2b				  -	      ELSE
     12  fa2b				  -	      bit	VSYNC
     13  fa2b					      ENDIF
     14  fa2b				   .CYCLES    SET	.CYCLES - 3
     15  fa2b					      ENDIF
     16  fa2b
     17  fa2b				  -	      REPEAT	.CYCLES / 2
     18  fa2b				  -	      nop
     19  fa2b					      REPEND
    100  fa2b				   KernelA_M
    101  fa2b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    102  fa2d
    103  fa2d				   KernelA_N
    104  fa2d				   KernelA_O
      0  fa2d					      sleep	2
      1  fa2d				   .CYCLES    SET	2
      2  fa2d
      3  fa2d				  -	      IF	.CYCLES < 2
      4  fa2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa2d				  -	      ERR
      6  fa2d					      ENDIF
      7  fa2d
      8  fa2d				  -	      IF	.CYCLES & 1
      9  fa2d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa2d				  -	      nop	0
     11  fa2d				  -	      ELSE
     12  fa2d				  -	      bit	VSYNC
     13  fa2d				  -	      ENDIF
     14  fa2d				  -.CYCLES    SET	.CYCLES - 3
     15  fa2d					      ENDIF
     16  fa2d
     17  fa2d					      REPEAT	.CYCLES / 2
     18  fa2d		       ea		      nop
     19  fa2e					      REPEND
    106  fa2e							; reset stack pointer
    107  fa2e		       68		      pla
    108  fa2f
    109  fa2f							; End visible line
      0  fa2f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fa2f				   .KERNEL    SET	$A
      2  fa2f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fa2f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fa2f
    112  fa2f				   KernelA_branch
    113  fa2f		       ad 84 02 	      lda	INTIM
    114  fa32		       d0 cd		      bne	KernelA_early
    115  fa34
    116  fa34		       4c f0 f8 	      jmp	row_after_kernel
    117  fa37
    118  fa37					      rend
    119  fa37				   kernel_1_end
      0  fa37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fa37				   .STARTA    SET	kernel_1_start
      2  fa37				   .ENDA      SET	kernel_1_end
      3  fa37				   .LEN       SET	$40
      4  fa37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fa37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fa37				  -	      err
      7  fa37					      endif
    121  fa37
    122  fa37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  fa37							;
    124  fa37							; GEM KERNEL B
    125  fa37							;
    126  fa37
    127  fa37				   kernel_2_start subroutine
    128  fa37					      rorg	$f100
    129  fa37
    130  fa37							; Kernel Marker
    131  fa37		       0b		      .byte.b	$B
    132  fa38
    133  fa38				   KernelB_early
    134  fa38							; Early code to set next GRP0 image. Value is overwritten
    135  fa38		       a9 ff		      lda	#$ff
    136  fa3a
    137  fa3a				   KernelB    subroutine
      0  fa3a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fa3a				   .KERNEL    SET	$B
      2  fa3a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fa3a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    139  fa3a
    140  fa3a							; Write Gemini 0A into delayed sprite register
    141  fa3a		       84 1c		      sty	EMERALD_SP
    142  fa3c							; Write Player from accumulator. When writing to the other sprite, the
    143  fa3c							; TIA will copy Gemini 0A into visible sprite register
    144  fa3c		       85 1b		      sta	JET_SP
    145  fa3e		       a0 aa		      ldy	#%10101010
    146  fa3e		       f1 08	   KernelB_VDEL0 =	. - 1
    147  fa40							; Write Gemini 1A into delayed sprite register
    148  fa40		       84 1c		      sty	EMERALD_SP
      0  fa42					      sleep	2
      1  fa42				   .CYCLES    SET	2
      2  fa42
      3  fa42				  -	      IF	.CYCLES < 2
      4  fa42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa42				  -	      ERR
      6  fa42					      ENDIF
      7  fa42
      8  fa42				  -	      IF	.CYCLES & 1
      9  fa42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa42				  -	      nop	0
     11  fa42				  -	      ELSE
     12  fa42				  -	      bit	VSYNC
     13  fa42				  -	      ENDIF
     14  fa42				  -.CYCLES    SET	.CYCLES - 3
     15  fa42					      ENDIF
     16  fa42
     17  fa42					      REPEAT	.CYCLES / 2
     18  fa42		       ea		      nop
     19  fa43					      REPEND
    150  fa43
    151  fa43							; Register config
    152  fa43		       a9 ff		      lda	#$ff
    153  fa45		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    154  fa47
    155  fa47		       a0 ff		      ldy	#$ff
    156  fa47		       f1 11	   KernelB_STY =	. - 1
    157  fa49
    158  fa49							; Clear bits in processor status register for drawing.
    159  fa49		       18		      clc
    160  fa4a		       24 93		      bit	RamLowerSixByte
    161  fa4c
    162  fa4c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fa4c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fa4c				   .KERNEL    SET	$B
      2  fa4c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fa4c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    164  fa4c				   KernelB_A
    165  fa4c		       85 11		      sta	EMERALD_SP_RESET
    166  fa4e				   KernelB_B
    167  fa4e							; Load PF1 value into accumulator
    168  fa4e		       a5 95		      lda	RamPF1Value
    169  fa50				   KernelB_C
      0  fa50					      sleep	3
      1  fa50				   .CYCLES    SET	3
      2  fa50
      3  fa50				  -	      IF	.CYCLES < 2
      4  fa50				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa50				  -	      ERR
      6  fa50					      ENDIF
      7  fa50
      8  fa50					      IF	.CYCLES & 1
      9  fa50					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa50		       04 00		      nop	0
     11  fa52				  -	      ELSE
     12  fa52				  -	      bit	VSYNC
     13  fa52					      ENDIF
     14  fa52				   .CYCLES    SET	.CYCLES - 3
     15  fa52					      ENDIF
     16  fa52
     17  fa52				  -	      REPEAT	.CYCLES / 2
     18  fa52				  -	      nop
     19  fa52					      REPEND
    171  fa52				   KernelB_D
    172  fa52		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    173  fa54
    174  fa54							; below has one php load (could just be RESET)
    175  fa54				   KernelB_E
    176  fa54		       08		      php
    177  fa55				   KernelB_F
    178  fa55		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    179  fa57				   KernelB_G
    180  fa57		       85 0e		      sta	PF1
    181  fa59				   KernelB_H
    182  fa59		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    183  fa5b							; above has one PHP load
    184  fa5b
    185  fa5b				   KernelB_I
    186  fa5b		       85 11		      sta	EMERALD_SP_RESET
    187  fa5d				   KernelB_J
    188  fa5d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    189  fa5f				   KernelB_K
    190  fa5f		       86 1e		      stx	EMERALD_MI_ENABLE
    191  fa61				   KernelB_L
    192  fa61		       84 1c		      sty	EMERALD_SP	; Gemini 5B
    193  fa63
    194  fa63				   KernelB_M
    195  fa63				   KernelB_N
      0  fa63					      sleep	2
      1  fa63				   .CYCLES    SET	2
      2  fa63
      3  fa63				  -	      IF	.CYCLES < 2
      4  fa63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa63				  -	      ERR
      6  fa63					      ENDIF
      7  fa63
      8  fa63				  -	      IF	.CYCLES & 1
      9  fa63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa63				  -	      nop	0
     11  fa63				  -	      ELSE
     12  fa63				  -	      bit	VSYNC
     13  fa63				  -	      ENDIF
     14  fa63				  -.CYCLES    SET	.CYCLES - 3
     15  fa63					      ENDIF
     16  fa63
     17  fa63					      REPEAT	.CYCLES / 2
     18  fa63		       ea		      nop
     19  fa64					      REPEND
    197  fa64
    198  fa64							; reset stack pointer
    199  fa64		       68		      pla
    200  fa65
    201  fa65							; End visible line
      0  fa65					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fa65				   .KERNEL    SET	$B
      2  fa65				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fa65					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    203  fa65
    204  fa65				   KernelB_branch
    205  fa65		       ad 84 02 	      lda	INTIM
    206  fa68		       d0 ce		      bne	KernelB_early
    207  fa6a		       4c f0 f8 	      jmp	row_after_kernel
    208  fa6d
    209  fa6d					      rend
    210  fa6d				   kernel_2_end
      0  fa6d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fa6d				   .STARTA    SET	kernel_2_start
      2  fa6d				   .ENDA      SET	kernel_2_end
      3  fa6d				   .LEN       SET	$40
      4  fa6d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fa6d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fa6d				  -	      err
      7  fa6d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fa6d					      include	"data_sprites.s"
      1  fb00		       00 00 00 00*	      align	256
      2  fb00
      3  fb00							; Player
      4  fb00				   Frame0
      5  fb00		       00		      .byte.b	#%00000000
      6  fb01		       60		      .byte.b	#%01100000
      7  fb02		       60		      .byte.b	#%01100000
      8  fb03		       60		      .byte.b	#%01100000
      9  fb04		       c0		      .byte.b	#%11000000
     10  fb05		       c0		      .byte.b	#%11000000
     11  fb06		       f0		      .byte.b	#%11110000
     12  fb07		       c0		      .byte.b	#%11000000
     13  fb08		       c0		      .byte.b	#%11000000
     14  fb09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fb0a					      include	"data_levels.s"
      1  fb10		       00 00 00 00*	      align	8
      2  fb10							; first bit of byte 2 & 3 are unused for simplicity
      3  fb10
      4  fb10				   level_00
      5  fb10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fb14
      7  fb14				   level_01
      8  fb14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fb18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fb1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fb20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fb24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fb28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fb2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fb30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fb34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fb38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fb3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fb40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fb44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fb48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fb4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fb50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fb54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fb58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fb5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fb60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fb64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fb68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fb6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fb70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fb74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fb78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fb7c				   level_01_end
     35  fb7c
     36  fb7c
     37  fb7c				   shard_map
     38  fb7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fb7d				   shard_map_end
------- FILE main.s
    125  fb7d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
