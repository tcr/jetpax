------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Nibble null methods
      4  10000 ????				       mac	nibble_start_kernel
      5  10000 ????				       seg.U	ignoreme	; comment out rest of code
      6  10000 ????				       endm
      7  10000 ????				       mac	nibble_if
      8  10000 ????				       endm
      9  10000 ????				       mac	nibble_write
     10  10000 ????				       endm
     11  10000 ????				       mac	nibble_write_opcode
     12  10000 ????				       endm
     13  10000 ????				       mac	nibble_else
     14  10000 ????				       endm
     15  10000 ????				       mac	nibble_end_if
     16  10000 ????				       endm
     17  10000 ????				       mac	nibble_end_kernel
     18  10000 ????				       seg	CodeBank3
     19  10000 ????				       endm
     20  10000 ????
     21  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     22  10000 ????				       mac	assert_runtime
     23  10000 ????			    .COND      SET	{1}
     24  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     25  10000 ????				       endm
     26  10000 ????
     27  10000 ????
     28  10000 ????						; Dynamic, runtime (Stella) assertions for "make debug"
     29  10000 ????				       mac	assert_runtime_kernel
     30  10000 ????			    .KERNEL    SET	{1}
     31  10000 ????			    .COND      SET	{2}
     32  10000 ????				       echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     33  10000 ????				       endm
     34  10000 ????
     35  10000 ????						; Static assertions for size
     36  10000 ????				       mac	assert_size
     37  10000 ????			    .STARTA    SET	{1}
     38  10000 ????			    .ENDA      SET	{2}
     39  10000 ????			    .LEN       SET	{3}
     40  10000 ????				       if	[[.ENDA - .STARTA] >= .LEN]
     41  10000 ????				       echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
     42  10000 ????				       err
     43  10000 ????				       endif
     44  10000 ????				       endm
     45  10000 ????				       mac	assert_size_exact
     46  10000 ????			    .STARTA    SET	{1}
     47  10000 ????			    .ENDA      SET	{2}
     48  10000 ????			    .LEN       SET	{3}
     49  10000 ????				       if	[[.ENDA - .STARTA] != .LEN]
     50  10000 ????				       echo	""
     51  10000 ????				       echo	"Error: Violated size limit", [.ENDA - .STARTA], "vs", .LEN
     52  10000 ????				       err
     53  10000 ????				       endif
     54  10000 ????				       endm
     55  10000 ????
     56  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      sta	WSYNC
     25  0000 ????				      ENDM
     26  0000 ????
------- FILE main.s
     60  0000 ????
     61  0000 ????						; RAM and constants
------- FILE game_vars.s LEVEL 2 PASS 2
      0  0000 ????				      include	"game_vars.s"
      1 U00a9 ????				      seg.u	Variables
      2 U00a9 ????
      3 U0080					      org	$80
      4 U0080
      5 U0080		       00	   DebugKernelID byte.b		; only for debugging
      6 U0081
      7 U0081		       00	   Temp       byte.b
      8 U0082
      9 U0082							; Counters
     10 U0082		       00	   RowCount   byte.b
     11 U0083		       00	   LoopCount  byte.b
     12 U0084		       00	   FrameCount byte.b
     13 U0085
     14 U0085		       00	   YP1	      byte.b
     15 U0086		       00	   SpriteEnd  byte.b
     16 U0087		       00	   XPos       byte.b		; X position of player sprite
     17 U0088
     18 U0088
     19 U0088		       00	   Speed1     byte.b
     20 U0089		       00	   Speed2     byte.b
     21 U008a
     22 U008a		       00	   YPos       byte.b		; Y position of player sprite
     23 U008b		       00	   YPos2      byte.b
     24 U008c
     25 U008c		       00	   GEM_02_TARGET byte.b
     26 U008d
     27 U008d		       00	   JMP_ADDR   byte.b
     28 U008e		       00	   JMP_ADDR_2 byte.b
     29 U008f
     30 U008f		       00	   ROW_DEMO_INDEX byte.b
     31 U0090
     32 U0090		       00	   RamNibbleTemp byte.b
     33 U0091		       00	   RamNibbleVar1 byte.b
     34 U0092		       00	   RamNibbleVar2 byte.b
     35 U0093		       00	   RamZeroByte byte.b
     36 U0094		       00	   RamLowerSixByte byte.b
     37 U0095		       00	   RamStackBkp byte.b
     38 U0096
     39 U0096							; Kernel support
     40 U0096		       00	   RamPF1Value byte.b
     41 U0097		       00	   RamKernelGRP0 byte.b		; temp
     42 U0098		       00	   RamKernelPhpTarget byte.b
     43 U0099		       00	   RamKernelX byte.b
     44 U009a		       00	   RamKernelY byte.b
     45 U009b		       00	   RamKernelGemini1 byte.b
     46 U009c		       00	   RamKernelGemini1Reg byte.b
     47 U009d		       00	   RamKernelGemini2 byte.b
     48 U009e		       00	   RamKernelGemini2Reg byte.b
     49 U009f		       00	   RamKernelGemini3 byte.b
     50 U00a0		       00	   RamKernelGemini3Reg byte.b
     51 U00a1		       00	   RamKernelGemini4 byte.b
     52 U00a2		       00	   RamKernelGemini4Reg byte.b
     53 U00a3		       00	   RamKernelGemini5 byte.b
     54 U00a4
     55 U00a4		       00	   BuildKernelX byte.b
     56 U00a5		       00	   BuildKernelY byte.b
     57 U00a6		       00	   BuildKernelRST byte.b
     58 U00a7		       00	   BuildKernelGrp0 byte.b
     59 U00a8		       00	   BuildKernelVdel1 byte.b
     60 U00a9
     61 U00a9							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     62 U00a9
     63 U00a9		       00 10	   ROW_COUNT  =	16
     64 U00a9
     65 U00a9		       00 02	   SIGNAL_LINE =	$02
     66 U00a9
     67 U00a9							; RAM+ memory map
     68 U00a9		       f0 00	   CBSRAM_KERNEL_WRITE =	$f000
     69 U00a9		       f1 00	   CBSRAM_KERNEL_READ =	$f100
     70 U00a9		       f1 03	   CBSRAM_KERNEL_ENTRY =	[CBSRAM_KERNEL_READ + 3]
     71 U00a9
     72 U00a9		       f0 40	   RAMP_STORAGE_W =	$f040	; is this just max(frame_1_end, frame_2_end) ?
     73 U00a9		       f1 40	   RAMP_STORAGE_R =	$f140
     74 U00a9
     75 U00a9							; NUSIZ values
     76 U00a9
     77 U00a9		       00 13	   THREE_COPIES =	%00010011
     78 U00a9
     79 U00a9							; Colors
     80 U00a9
     81 U00a9		       00 42	   COL_BG     equ	$42
     82 U00a9		       00 cc	   COL_EMERALD equ	$CC
     83 U00a9		       00 cc	   COL_EMERALD_2 equ	$CC
     84 U00a9
     85 U00a9							; HMOVE values for missiles
     86 U00a9
     87 U00a9		       00 1c	   KERNEL_A_MISSILE_SLEEP equ	28
     88 U00a9		       00 00	   KERNEL_A_MISSILE_HMOVE equ	$00
     89 U00a9
     90 U00a9		       00 33	   KERNEL_B_MISSILE_SLEEP equ	51
     91 U00a9		       00 10	   KERNEL_B_MISSILE_HMOVE equ	$10
     92 U00a9
     93 U00a9							; Missile values when 2A=RST
     94 U00a9							; KERNEL_B_MISSILE_SLEEP equ 46
     95 U00a9							; KERNEL_B_MISSILE_HMOVE equ $20
     96 U00a9
     97 U00a9							; Sprite details
     98 U00a9
     99 U00a9		       00 09	   SPRITE_HEIGHT equ	9
    100 U00a9
    101 U00a9		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    102 U00a9		       00 1c	   EMERALD_SP equ	GRP1
    103 U00a9		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    104 U00a9		       00 11	   EMERALD_SP_RESET equ	RESP1
    105 U00a9		       00 13	   EMERALD_MI_RESET equ	RESM1
    106 U00a9		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    107 U00a9		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    108 U00a9		       00 05	   EMERALD_COPIES equ	NUSIZ1
    109 U00a9
    110 U00a9		       00 1b	   JET_SP     equ	GRP0
    111 U00a9		       00 10	   JET_SP_RESET equ	RESP0
    112 U00a9		       00 20	   JET_SP_HMOVE equ	HMP0
    113 U00a9		       00 06	   JET_SP_COLOR equ	COLUP0
    114 U00a9
    115 U00a9							; Spriteend is HEIGHT_OFFSET - YPos
    116 U00a9		       00 c8	   HEIGHT_OFFSET equ	200
    117 U00a9
    118 U00a9							; Compared with YPos
    119 U00a9		       00 3e	   FLOOR_OFFSET equ	62
    120 U00a9		       00 be	   CEILING_OFFSET equ	190
    121 U00a9
    122 U00a9							; Starting player position
    123 U00a9		       00 3e	   YPosStart  equ	62
    124 U00a9		       00 37	   XPosStart  equ	55
    125 U00a9
    126 U00a9							; Top left corner
    127 U00a9							; YPosStart equ 190
    128 U00a9							; XPosStart equ 28
    129 U00a9
    130 U00a9							; Tick (every 8 frames)
    131 U00a9		       00 07	   FrameSkip  equ	%111
------- FILE main.s
     63 U00a9
     64 U00a9							; Bank 1
     65  e000 ????				      seg	CodeBank1
     66  d000					      org	$D000
     67  d000					      rorg	$F000
     68  d000		       00	   BANK1      byte.b
     69  d200					      org	$d200
     70  d200					      rorg	$d200
     71  d200				   Bank1Start
     72  d200		       ad fa ff 	      lda	$fffa
     73  d203		       ea		      nop
     74  d204		       ea		      nop
     75  d205		       ea		      nop
     76  d206
     77  dffc					      org	$dffc
     78  dffc					      rorg	$fffc
     79  dffc		       00 d2		      .word.w	Bank1Start
     80  dffe		       00 d2		      .word.w	Bank1Start
     81  e000
     82  e000							; Bank 2
     83  f000 ????				      seg	CodeBank2
     84  e000					      org	$E000
     85  e000					      rorg	$F000
     86  e000		       00	   BANK2      byte.b
     87  e200					      org	$e200
     88  e200					      rorg	$f200
     89  e200				   Bank2Start
     90  e200		       ad fa ff 	      lda	$fffa
     91  e203		       ea		      nop
     92  e204		       ea		      nop
     93  e205		       ea		      nop
     94  e206
     95  effc					      org	$effc
     96  effc					      rorg	$fffc
     97  effc		       00 f2		      .word.w	Bank2Start
     98  effe		       00 f2		      .word.w	Bank2Start
     99  f000
    100  f000							; Bank 3
    101  10000 ????				       seg	CodeBank3
    102  f000					      org	$F000
    103  f000					      rorg	$F000
    104  f000		       00	   BANK3      byte.b
    105  f200					      org	$f200
    106  f200					      rorg	$f200
    107  f200				   Bank3Start
    108  f200		       ad fa ff 	      lda	$fffa
    109  f203		       ea		      nop
    110  f204		       ea		      nop
    111  f205		       ea		      nop
    112  f206		       4c 09 f2 	      jmp	Start
    113  f209
    114  f209							; Bank 3 source code
------- FILE game_init.s LEVEL 2 PASS 2
      0  f209					      include	"game_init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   IFTRACKER  SET	1
      4  f209
      5  f209				   IFTRACKER  SET	2
      6  f209
      7  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      9  f214
     10  f214							; Disable interrupt flag in processor status (it's useless anyway)
     11  f214		       58		      cli
     12  f215
     13  f215				   InitSetup
     14  f215		       a9 00		      lda	#0
     15  f217		       85 84		      sta	FrameCount
     16  f219
     17  f219							; P0 has three copies
     18  f219		       a9 13		      lda	#%00010011
     19  f21b		       85 05		      sta	EMERALD_COPIES
     20  f21d
     21  f21d		       a9 00		      lda	#$00
     22  f21f		       85 09		      sta	COLUBK
     23  f221		       a9 01		      lda	#%00000001
     24  f223		       85 0a		      sta	CTRLPF	; reflect playfield
     25  f225
     26  f225							; Disable VDEL
     27  f225		       a9 00		      lda	#0
     28  f227		       85 25		      sta	VDELP0
     29  f229		       85 26		      sta	VDELP1
     30  f22b
     31  f22b							; Player 0
     32  f22b		       a2 cc		      ldx	#COL_EMERALD
     33  f22d		       86 07		      stx	EMERALD_SP_COLOR
     34  f22f
     35  f22f							; Player 1
     36  f22f		       a9 0f		      lda	#$0f
     37  f231		       85 06		      sta	JET_SP_COLOR
     38  f233		       a9 00		      lda	#$00
     39  f235		       85 1b		      sta	JET_SP
     40  f237
     41  f237							; Positions
     42  f237		       a9 3e		      lda	#YPosStart
     43  f239		       85 8a		      sta	YPos
     44  f23b		       a9 37		      lda	#XPosStart
     45  f23d		       85 87		      sta	XPos
     46  f23f		       a9 00		      lda	#0
     47  f241		       85 88		      sta	Speed1
     48  f243		       85 89		      sta	Speed2
     49  f245		       85 8b		      sta	YPos2
     50  f247
     51  f247		       a9 00		      lda	#0
     52  f249		       85 8f		      sta	ROW_DEMO_INDEX
     53  f24b
     54  f24b							; Store 0 into RamZeroByte
     55  f24b		       a9 00		      lda	#0
     56  f24d		       85 93		      sta	RamZeroByte
     57  f24f		       a9 3f		      lda	#%00111111
     58  f251		       85 94		      sta	RamLowerSixByte
     59  f253
     60  f253							; Start with vertical sync (to reset frame)
     61  f253		       4c e6 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE kernel_loader.s LEVEL 2 PASS 2
      0  f256					      include	"kernel_loader.s"
      1  f256							; Copies the gem kernels to RAM
      2  f256
      3  f256							; Copy Kernel A to CBSRAM
      4  f256				   LoadKernelA subroutine
      5  f256		       a0 36		      ldy	#(kernel_1_end - kernel_1_start)-1
      6  f258				   .loop
      7  f258		       b9 00 fa 	      lda	kernel_1_start,Y
      8  f25b		       99 00 10 	      sta	$1000,Y
      9  f25e		       88		      dey
     10  f25f		       d0 f7		      bne	.loop
     11  f261		       ad 00 fa 	      lda	kernel_1_start
     12  f264		       8d 00 10 	      sta	$1000
     13  f267		       60		      rts
     14  f268
     15  f268							; Copy Kernel B to CBSRAM
     16  f268				   LoadKernelB subroutine
     17  f268		       a0 35		      ldy	#(kernel_2_end - kernel_2_start)-1
     18  f26a				   .loop
     19  f26a		       b9 37 fa 	      lda	kernel_2_start,Y
     20  f26d		       99 00 10 	      sta	$1000,Y
     21  f270		       88		      dey
     22  f271		       d0 f7		      bne	.loop
     23  f273		       ad 37 fa 	      lda	kernel_2_start
     24  f276		       8d 00 10 	      sta	$1000
     25  f279		       60		      rts
------- FILE main.s
------- FILE nibble.s LEVEL 2 PASS 2
      0  f27a					      include	"nibble.s"
      1  f27a
      2  f27a					      MAC	nibble_gem_kernel_a_1_build
      3  f27a					      lda	#0
      4  f27a					      ldx	#SENTINEL
      5  f27a					      stx	BuildKernelX
      6  f27a					      stx	BuildKernelY
      7  f27a					      stx	BuildKernelRST
      8  f27a							; Gemini 1A
      9  f27a					      ldy	[GEMS_A + 0]
     10  f27a					      jsr	KernelA_GenReset
     11  f27a				   .if_1
     12  f27a					      bne	.else_1
     13  f27a					      sec
     14  f27a					      rol
     15  f27a							; Special: Encoding RST0
     16  f27a							; Rewrite lda RamKernelPF1 to be #immediate
     17  f27a					      ldy	#BC_LDA_IMM
     18  f27a					      sty	[KernelA_B - $100]
     19  f27a					      ldy	#%10100000
     20  f27a					      sty	[KernelA_B - $100 + 1]
     21  f27a							; Store 1A in GRP0
     22  f27a					      ldy	[GEMS_A + 1]
     23  f27a					      sty	BuildKernelGrp0
     24  f27a							; Gemini 1A is RESPx
     25  f27a					      ldy	#EMERALD_SP_RESET
     26  f27a					      sty	[KernelA_C - $100 + 1]
     27  f27a							; Turn 3-cycle NOP into 4-cycle
     28  f27a					      ldy	#$14
     29  f27a					      sty	[KernelA_D - $100]
     30  f27a					      jmp	.endif_1
     31  f27a							; [BIT DEPTH] #1 If-End @ 1
     32  f27a					      rol
     33  f27a
     34  f27a				   .else_1
     35  f27a					      clc
     36  f27a					      rol
     37  f27a							; Store 0A in GRP0
     38  f27a					      ldy	[GEMS_A + 0]
     39  f27a					      sty	BuildKernelGrp0
     40  f27a					      ldy	[GEMS_A + 1]
     41  f27a					      jsr	KernelA_GenReset
     42  f27a				   .if_2
     43  f27a					      bne	.else_2
     44  f27a					      sec
     45  f27a					      rol
     46  f27a							; GEM1ASWITCH
     47  f27a					      jmp	.endif_2
     48  f27a							; [BIT DEPTH] #2 If-End @ 2
     49  f27a
     50  f27a				   .else_2
     51  f27a					      clc
     52  f27a					      rol
     53  f27a							; Calculate the 1A value
     54  f27a					      ldy	SHARD_LUT_RF1
     55  f27a					      cpy	#1
     56  f27a					      .byte	$D0, #3
     57  f27a					      ldy	#RESP1
     58  f27a					      .byte	$2C
     59  f27a					      ldy	#GRP1
     60  f27a					      sty	RamKernelGemini1Reg
     61  f27a							; Set opcode
     62  f27a					      ldx	SHARD_LUT_RF1
     63  f27a					      cpx	#1
     64  f27a					      ldy	#BC_STX
     65  f27a					      .byte	$D0, #4
     66  f27a					      ldy	[GEMS_A + 1]
     67  f27a					      jsr	KernelA_UpdateRegs
     68  f27a					      sty	RamKernelGemini1
     69  f27a							; [BIT DEPTH] #2 *If-End @ 2
     70  f27a							; [BIT DEPTH] #2 Else-End @ 2
     71  f27a				   .endif_2
     72  f27a							; [BIT DEPTH] #1 *If-End @ 1
     73  f27a							; [BIT DEPTH] #1 Else-End @ 2
     74  f27a				   .endif_1
     75  f27a							; Gemini 2A
     76  f27a					      ldy	[GEMS_A + 2]
     77  f27a					      jsr	KernelA_GenReset
     78  f27a				   .if_3
     79  f27a					      bne	.else_3
     80  f27a					      sec
     81  f27a					      rol
     82  f27a					      jmp	.endif_3
     83  f27a							; [BIT DEPTH] #3 If-End @ 3
     84  f27a
     85  f27a				   .else_3
     86  f27a					      clc
     87  f27a					      rol
     88  f27a							; Set opcode
     89  f27a					      ldy	[GEMS_A + 2]
     90  f27a					      jsr	KernelA_UpdateRegs
     91  f27a					      sty	RamKernelGemini2
     92  f27a							; Set opcode target
     93  f27a					      ldy	SHARD_LUT_RF1
     94  f27a					      cpy	#2
     95  f27a					      .byte	$D0, #3
     96  f27a					      ldy	#RESP1
     97  f27a					      .byte	$2C
     98  f27a					      ldy	#GRP1
     99  f27a					      sty	RamKernelGemini2Reg
    100  f27a							; [BIT DEPTH] #3 *If-End @ 3
    101  f27a							; [BIT DEPTH] #3 Else-End @ 3
    102  f27a				   .endif_3
    103  f27a							; Gemini 3A
    104  f27a					      ldy	[GEMS_A + 3]
    105  f27a					      jsr	KernelA_GenReset
    106  f27a				   .if_4
    107  f27a					      bne	.else_4
    108  f27a					      sec
    109  f27a					      rol
    110  f27a					      jmp	.endif_4
    111  f27a							; [BIT DEPTH] #4 If-End @ 4
    112  f27a
    113  f27a				   .else_4
    114  f27a					      clc
    115  f27a					      rol
    116  f27a							; Set opcode
    117  f27a					      ldy	[GEMS_A + 3]
    118  f27a					      jsr	KernelA_UpdateRegs
    119  f27a					      sty	RamKernelGemini3
    120  f27a							; Set opcode target
    121  f27a					      ldy	SHARD_LUT_RF1
    122  f27a					      cpy	#3
    123  f27a					      .byte	$D0, #3
    124  f27a					      ldy	#RESP1
    125  f27a					      .byte	$2C
    126  f27a					      ldy	#GRP1
    127  f27a					      sty	RamKernelGemini3Reg
    128  f27a							; [BIT DEPTH] #4 *If-End @ 4
    129  f27a							; [BIT DEPTH] #4 Else-End @ 4
    130  f27a				   .endif_4
    131  f27a							; [BIT DEPTH] Final: 4 (out of 8 bits)
    132  f27a					      rol
    133  f27a					      rol
    134  f27a					      rol
    135  f27a					      rol
    136  f27a					      ENDM
    137  f27a
    138  f27a					      MAC	nibble_gem_kernel_a_2_build
    139  f27a					      lda	#0
    140  f27a							; VD1 default
    141  f27a					      ldx	[GEMS_A + 1]
    142  f27a					      stx	BuildKernelVdel1
    143  f27a							; Gemini 4A
    144  f27a					      ldx	SHARD_LUT_VD1
    145  f27a					      cpx	#4
    146  f27a				   .if_1
    147  f27a					      beq	.else_1
    148  f27a					      sec
    149  f27a					      rol
    150  f27a							; Set PHP
    151  f27a							; Update VDEL1
    152  f27a					      ldx	[GEMS_A + 4]
    153  f27a					      stx	BuildKernelVdel1
    154  f27a					      jmp	.endif_1
    155  f27a							; [BIT DEPTH] #1 If-End @ 1
    156  f27a
    157  f27a				   .else_1
    158  f27a					      clc
    159  f27a					      rol
    160  f27a					      ldy	[GEMS_A + 4]
    161  f27a					      jsr	KernelA_UpdateRegs
    162  f27a					      sty	RamKernelGemini4
    163  f27a							; Set PHP
    164  f27a							; [BIT DEPTH] #1 *If-End @ 1
    165  f27a							; [BIT DEPTH] #1 Else-End @ 1
    166  f27a				   .endif_1
    167  f27a							; VD1
    168  f27a							; ldy #SHARD_VD1
    169  f27a							; sty [KernelA_VDEL1 - $100]
    170  f27a							; GRP0
    171  f27a							; ldy #SHARD_GRP0
    172  f27a							; sty [KernelA_VDEL0 - $100]
    173  f27a							; X
    174  f27a							; ldy #SHARD_X
    175  f27a							; sty RamKernelX
    176  f27a							; Y
    177  f27a							; Gemini 5A
    178  f27a							; TODO eventually...?
    179  f27a							; [BIT DEPTH] Final: 1 (out of 8 bits)
    180  f27a					      rol
    181  f27a					      rol
    182  f27a					      rol
    183  f27a					      rol
    184  f27a					      rol
    185  f27a					      rol
    186  f27a					      rol
    187  f27a					      ENDM
    188  f27a
    189  f27a					      MAC	nibble_gem_kernel_b_build
    190  f27a					      lda	#0
    191  f27a							; Php target default
    192  f27a					      ldx	#RESP1
    193  f27a					      stx	RamKernelPhpTarget
    194  f27a					      ldx	#SENTINEL
    195  f27a					      stx	BuildKernelX
    196  f27a					      stx	BuildKernelY
    197  f27a					      stx	BuildKernelRST
    198  f27a							; Gemini 1B
    199  f27a					      ldy	[GEMS_B + 1]
    200  f27a					      jsr	KernelA_UpdateRegs
    201  f27a					      sty	RamKernelGemini3
    202  f27a							; Gemini 2B
    203  f27a					      ldy	[GEMS_B + 2]
    204  f27a					      jsr	KernelB_GenPhp
    205  f27a				   .if_1
    206  f27a					      bne	.else_1
    207  f27a					      sec
    208  f27a					      rol
    209  f27a							; Write to PHP in 2B
    210  f27a					      jmp	.endif_1
    211  f27a							; [BIT DEPTH] #1 If-End @ 1
    212  f27a
    213  f27a				   .else_1
    214  f27a					      clc
    215  f27a					      rol
    216  f27a							; Calculate the gemini value
    217  f27a					      ldy	[GEMS_B + 2]
    218  f27a					      jsr	KernelB_UpdateRegs
    219  f27a					      sty	RamKernelGemini1
    220  f27a							; [BIT DEPTH] #1 *If-End @ 1
    221  f27a							; [BIT DEPTH] #1 Else-End @ 1
    222  f27a				   .endif_1
    223  f27a							; Gemini 3B
    224  f27a					      ldy	[GEMS_B + 3]
    225  f27a					      jsr	KernelB_GenPhp
    226  f27a				   .if_2
    227  f27a					      bne	.else_2
    228  f27a					      sec
    229  f27a					      rol
    230  f27a							; Write to PHP in 3B
    231  f27a					      jmp	.endif_2
    232  f27a							; [BIT DEPTH] #2 If-End @ 2
    233  f27a
    234  f27a				   .else_2
    235  f27a					      clc
    236  f27a					      rol
    237  f27a							; Calculate the gemini value
    238  f27a					      ldy	[GEMS_B + 1]
    239  f27a					      jsr	KernelB_UpdateRegs
    240  f27a					      sty	RamKernelGemini1
    241  f27a							; [BIT DEPTH] #2 *If-End @ 2
    242  f27a							; [BIT DEPTH] #2 Else-End @ 2
    243  f27a				   .endif_2
    244  f27a							; Gemini 4B
    245  f27a					      ldy	[GEMS_B + 4]
    246  f27a					      jsr	KernelA_UpdateRegs
    247  f27a					      sty	RamKernelGemini4
    248  f27a							; TODO if no PHP, rewrite previous section:
    249  f27a							; NIBBLE_IF cs
    250  f27a							;
    251  f27a							;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    252  f27a							;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP
    253  f27a							;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    254  f27a							;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP
    255  f27a							; NIBBLE_END_IF
    256  f27a							; Make adjustments for sprites.
    257  f27a					      ror	BuildKernelGrp0
    258  f27a					      ror	BuildKernelX
    259  f27a					      ror	BuildKernelY
    260  f27a							;
    261  f27a							; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    262  f27a							; GRP0
    263  f27a							; X
    264  f27a							; Y
    265  f27a							; [BIT DEPTH] Final: 2 (out of 8 bits)
    266  f27a					      rol
    267  f27a					      rol
    268  f27a					      rol
    269  f27a					      rol
    270  f27a					      rol
    271  f27a					      rol
    272  f27a					      ENDM
    273  f27a
    274  f27a
    275  f27a					      MAC	nibble_gem_kernel_a_1
    276  f27a				   .if_1
    277  f27a					      asl
    278  f27a					      bcc	.else_1
    279  f27a					      jmp	.endif_1
    280  f27a				   .else_1
    281  f27a				   .if_2
    282  f27a					      asl
    283  f27a					      bcc	.else_2
    284  f27a					      ldx	#BC_STX
    285  f27a					      stx	[KernelA_D_W + 0]
    286  f27a					      ldx	#RESP1
    287  f27a					      stx	[KernelA_D_W + 1]
    288  f27a					      jmp	.endif_2
    289  f27a				   .else_2
    290  f27a					      ldx	RamKernelGemini1
    291  f27a					      stx	[KernelA_D_W + 0]
    292  f27a					      ldx	RamKernelGemini1Reg
    293  f27a					      stx	[KernelA_D_W + 1]
    294  f27a				   .endif_2
    295  f27a				   .endif_1
    296  f27a				   .if_3
    297  f27a					      asl
    298  f27a					      bcc	.else_3
    299  f27a					      ldx	#NOP_REG
    300  f27a					      stx	[KernelA_E_W + 1 + 0]
    301  f27a					      ldx	#RESP1
    302  f27a					      stx	[KernelA_G_W + 1 + 0]
    303  f27a					      jmp	.endif_3
    304  f27a				   .else_3
    305  f27a					      ldx	#RESP1
    306  f27a					      stx	[KernelA_E_W + 1 + 0]
    307  f27a					      ldx	RamKernelGemini2
    308  f27a					      stx	[KernelA_G_W + 0]
    309  f27a					      ldx	RamKernelGemini2Reg
    310  f27a					      stx	[KernelA_G_W + 1]
    311  f27a				   .endif_3
    312  f27a				   .if_4
    313  f27a					      asl
    314  f27a					      bcc	.else_4
    315  f27a					      ldx	#RESP1
    316  f27a					      stx	[KernelA_H_W + 1 + 0]
    317  f27a					      jmp	.endif_4
    318  f27a				   .else_4
    319  f27a					      ldx	RamKernelGemini3
    320  f27a					      stx	[KernelA_H_W + 0]
    321  f27a					      ldx	RamKernelGemini3Reg
    322  f27a					      stx	[KernelA_H_W + 1]
    323  f27a				   .endif_4
    324  f27a					      ENDM
    325  f27a
    326  f27a					      MAC	nibble_gem_kernel_a_2
    327  f27a				   .if_1
    328  f27a					      asl
    329  f27a					      bcc	.else_1
    330  f27a					      ldx	#BC_STA
    331  f27a					      stx	[[KernelA_I_W + 0] + 0]
    332  f27a					      ldx	#EMERALD_SP_RESET
    333  f27a					      stx	[[KernelA_I_W + 0] + 1]
    334  f27a					      ldx	#BC_STA
    335  f27a					      stx	[[KernelA_J_W + 1] + 0]
    336  f27a					      ldx	#PF1
    337  f27a					      stx	[[KernelA_J_W + 1] + 1]
    338  f27a					      ldx	#BC_PHP
    339  f27a					      stx	[[KernelA_K_W + 1] + 0]
    340  f27a					      ldx	#VDELP1
    341  f27a					      stx	[RamKernelPhpTarget + 0]
    342  f27a					      jmp	.endif_1
    343  f27a				   .else_1
    344  f27a					      ldx	#BC_PHP
    345  f27a					      stx	[[KernelA_I_W + 0] + 0]
    346  f27a					      ldx	#BC_STA
    347  f27a					      stx	[[KernelA_J_W + 0] + 0]
    348  f27a					      ldx	#PF1
    349  f27a					      stx	[[KernelA_J_W + 0] + 1]
    350  f27a					      ldx	RamKernelGemini4
    351  f27a					      stx	[KernelA_K_W + 0]
    352  f27a					      ldx	#EMERALD_SP
    353  f27a					      stx	[KernelA_K_W + 1]
    354  f27a					      ldx	#RESP1
    355  f27a					      stx	[RamKernelPhpTarget + 0]
    356  f27a				   .endif_1
    357  f27a					      ldx	BuildKernelVdel1
    358  f27a					      stx	[[KernelA_VDEL1 - $100] + 0]
    359  f27a					      ldx	BuildKernelGrp0
    360  f27a					      stx	[[KernelA_VDEL0 - $100] + 0]
    361  f27a					      ldx	BuildKernelX
    362  f27a					      stx	[RamKernelX + 0]
    363  f27a					      ldx	BuildKernelY
    364  f27a					      stx	[[KernelA_STY - $100] + 0]
    365  f27a					      ENDM
    366  f27a
    367  f27a					      MAC	nibble_gem_kernel_b
    368  f27a					      ldx	RamKernelGemini3
    369  f27a					      stx	[KernelB_D_W + 0]
    370  f27a				   .if_1
    371  f27a					      asl
    372  f27a					      bcc	.else_1
    373  f27a					      ldx	#EMERALD_SP
    374  f27a					      stx	[RamKernelPhpTarget + 0]
    375  f27a					      ldx	#BC_STY
    376  f27a					      stx	[[KernelB_E_W + 0] + 0]
    377  f27a					      ldx	#EMERALD_SP_RESET
    378  f27a					      stx	[[KernelB_E_W + 0] + 1]
    379  f27a					      ldx	#BC_PHP
    380  f27a					      stx	[[KernelB_F_W + 1] + 0]
    381  f27a					      ldx	#BC_STA
    382  f27a					      stx	[[KernelB_G_W + 0] + 0]
    383  f27a					      ldx	#PF1
    384  f27a					      stx	[[KernelB_G_W + 0] + 1]
    385  f27a					      ldx	#BC_STY
    386  f27a					      stx	[[KernelB_H_W + 0] + 0]
    387  f27a					      ldx	#EMERALD_SP
    388  f27a					      stx	[[KernelB_H_W + 0] + 1]
    389  f27a					      jmp	.endif_1
    390  f27a				   .else_1
    391  f27a					      ldx	RamKernelGemini1
    392  f27a					      stx	[KernelB_F_W + 0]
    393  f27a					      ldx	#EMERALD_SP
    394  f27a					      stx	[KernelB_F_W + 1]
    395  f27a				   .endif_1
    396  f27a				   .if_2
    397  f27a					      asl
    398  f27a					      bcc	.else_2
    399  f27a					      ldx	#EMERALD_SP
    400  f27a					      stx	[RamKernelPhpTarget + 0]
    401  f27a					      ldx	#BC_STY
    402  f27a					      stx	[[KernelB_E_W + 0] + 0]
    403  f27a					      ldx	#EMERALD_SP_RESET
    404  f27a					      stx	[[KernelB_E_W + 0] + 1]
    405  f27a					      ldx	#BC_STY
    406  f27a					      stx	[[KernelB_F_W + 1] + 0]
    407  f27a					      ldx	#EMERALD_SP
    408  f27a					      stx	[[KernelB_F_W + 1] + 1]
    409  f27a					      ldx	#BC_STA
    410  f27a					      stx	[[KernelB_G_W + 1] + 0]
    411  f27a					      ldx	#PF1
    412  f27a					      stx	[[KernelB_G_W + 1] + 1]
    413  f27a					      ldx	#BC_PHP
    414  f27a					      stx	[[KernelB_H_W + 1] + 0]
    415  f27a					      jmp	.endif_2
    416  f27a				   .else_2
    417  f27a					      ldx	RamKernelGemini1
    418  f27a					      stx	[KernelA_H_W + 0]
    419  f27a					      ldx	#EMERALD_SP
    420  f27a					      stx	[KernelA_H_W + 1]
    421  f27a				   .endif_2
    422  f27a					      ldx	RamKernelGemini4
    423  f27a					      stx	[KernelB_J_W + 0]
    424  f27a					      ldx	BuildKernelGrp0
    425  f27a					      stx	[[KernelB_VDEL0 - $100] + 0]
    426  f27a					      ldx	BuildKernelX
    427  f27a					      stx	[RamKernelX + 0]
    428  f27a					      ldx	BuildKernelY
    429  f27a					      stx	[RamKernelY + 0]
    430  f27a					      ENDM
    431  f27a
    432  f27a
------- FILE main.s
------- FILE game_frame.s LEVEL 2 PASS 2
      0  f27a					      include	"game_frame.s"
      1  f27a							; Frame loop, including calling out to other kernels.
      2  f27a
      3  f27a		       00 aa	   SENTINEL   =	%010101010
      4  f27a
      5  f27a							; Reflected for Kernel A
      6  f27a		       00 00	   G00	      =	%00000000
      7  f27a		       00 60	   G01	      =	%01100000
      8  f27a		       00 06	   G10	      =	%00000110
      9  f27a		       00 66	   G11	      =	%01100110
     10  f27a
     11  f27a							; Reflected for Kernel A
     12  f27a		       00 00	   G00	      =	%00000000
     13  f27a		       00 60	   G01	      =	%01100000
     14  f27a		       00 06	   G10	      =	%00000110
     15  f27a		       00 66	   G11	      =	%01100110
     16  f27a
     17  f27a
     18  f27a							; gems:     [g01,g10,g01,g11,g00,g00]
     19  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     20  f27a							; solved:   [bc_NOP,bc_STX,bc_RF1,bc_STY,bc_VD1]
     21  f27a
     22  f27a							; gems:     [g00,g01,g10,g11,g00,g01]
     23  f27a							; cpu:      cpu(g01,g00,false,g10,g11,false)
     24  f27a							; solved:   [bc_RST,bc_NOP,bc_STX,bc_STY,bc_VD1]
     25  f27a
     26  f27a							; gems:     [g01,g10,g11,g00,g01,g10]
     27  f27a							; cpu:      cpu(g01,g01,false,g10,g11,false)
     28  f27a							; solved:   [bc_NOP,bc_STX,bc_STY,bc_RST,bc_VD1]
     29  f27a
     30  f27a							; gems:     [g10,g11,g00,g01,g10,g11]
     31  f27a							; cpu:      cpu(g10,g10,false,g11,g01,false)
     32  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     33  f27a
     34  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     35  f27a							; cpu:      cpu(g01,g01,false,g00,g11,false)
     36  f27a							; solved:   [bc_NOP,bc_STX,bc_STX,bc_STY,bc_VD1]
     37  f27a
     38  f27a							; gems:     [g11,g01,g01,g01,g01,g00]
     39  f27a							; cpu:      cpu(g00,g01,false,g11,g00,false)
     40  f27a							; solved:   [bc_STX,bc_VD1,bc_STX,bc_STX,bc_STX]
     41  f27a
     42  f27a							; gems:     [g10,g10,g11,g00,g11,g01]
     43  f27a							; cpu:      cpu(g00,g00,false,g10,g11,false)
     44  f27a							; solved:   [bc_STX,bc_STX,bc_STY,bc_RST,bc_STY]
     45  f27a
     46  f27a							; gems:     [g01,g00,g00,g11,g01,g11]
     47  f27a							; cpu:      cpu(g00,g01,false,g01,g11,false)
     48  f27a							; solved:   [bc_STX,bc_RST,bc_RST,bc_STY,bc_VD1]
     49  f27a
     50  f27a							; gems:     [g11,g10,g00,g01,g00,g01]
     51  f27a							; cpu:      cpu(g11,g00,false,g10,g01,false)
     52  f27a							; solved:   [bc_NOP,bc_STX,bc_RST,bc_STY,bc_VD1]
     53  f27a
     54  f280		       00 00 00 00*	      align	16
     55  f280
     56  f280		       01	   MISS_B     .byte.b	#1
     57  f281		       01	   MISS_A     .byte.b	#1
     58  f282
     59  f290		       00 00 00 00*	      align	16
     60  f290
     61  f290		       60 66 66 66*GEMS_A     .byte.b	G01, G11, G11, G11, G11, G11
     62  f296		       06 66 66 66*GEMS_B     .byte.b	G10, G11, G11, G11, G11, G11
     63  f29c
     64  f29c				   SHARD_LUT_RF1
     65  f29c		       00		      .byte.b	#0
     66  f29d				   SHARD_LUT_VD1
     67  f29d		       00		      .byte.b	#0
     68  f29e
     69  f29e							; Y=Gemini Sprite
     70  f29e							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     71  f29e							; processor flag Z is TRUE if this is RST.
     72  f29e				   KernelA_GenReset subroutine
     73  f29e		       c0 00		      cpy	#$00
     74  f2a0		       f0 01		      beq	.start
     75  f2a2		       60		      rts
     76  f2a3							; Current Gemini = $00
     77  f2a3				   .start
     78  f2a3		       a6 a6		      ldx	BuildKernelRST
     79  f2a5		       e0 aa		      cpx	#SENTINEL
     80  f2a7		       d0 04		      bne	.set_else
     81  f2a9							; We have found the first (and only) RST on this line, set the marker var
     82  f2a9		       a2 ff		      ldx	#$ff
     83  f2ab		       86 a6		      stx	BuildKernelRST
     84  f2ad				   .set_else
     85  f2ad		       a2 00		      ldx	#$00
     86  f2af		       60		      rts
     87  f2b0
     88  f2b0							; Y=Gemini Sprite
     89  f2b0							; See if the current Gemini is g00. Allocate an RST to this Gemini if so
     90  f2b0							; processor flag Z is TRUE if this is RST.
     91  f2b0				   KernelB_GenPhp subroutine
     92  f2b0		       c0 10		      cpy	#$10
     93  f2b2		       f0 05		      beq	.start
     94  f2b4		       c0 11		      cpy	#$11
     95  f2b6		       f0 01		      beq	.start
     96  f2b8		       60		      rts
     97  f2b9							; Current Gemini = $00
     98  f2b9				   .start
     99  f2b9		       a6 a6		      ldx	BuildKernelRST
    100  f2bb		       e0 aa		      cpx	#SENTINEL
    101  f2bd		       d0 04		      bne	.set_else
    102  f2bf							; We have found the first (and only) RST on this line, set the marker var
    103  f2bf		       a2 ff		      ldx	#$ff
    104  f2c1		       86 a6		      stx	BuildKernelRST
    105  f2c3				   .set_else
    106  f2c3		       a2 00		      ldx	#$00
    107  f2c5		       60		      rts
    108  f2c6
    109  f2c6							; Allocates build-time registers for a new Gemini sprite value.
    110  f2c6							; register Y = the storage opcode to write to the result
    111  f2c6							;
    112  f2c6							; BuildKernelGrp0, BuildKernelX, BuildKernelY are compared in that order.
    113  f2c6							; BuildKernelX, BuildKernelY are upgraded if not set.
    114  f2c6							; Y=Gemini Sprite
    115  f2c6				   KernelB_UpdateRegs
    116  f2c6				   KernelA_UpdateRegs subroutine
    117  f2c6
    118  f2c6							; If equal to GRP0, return nop
    119  f2c6							; FIXME GRP0 might not always be up to date (should update each entry?)
    120  f2c6							; FIXME GOTTA REVERSE THE GRAPHICS ALSO
    121  f2c6							; cpy BuildKernelGrp0
    122  f2c6							; bne .set_start
    123  f2c6							; ; TODO if this is stx + NOP value, then register doesn't have to change as
    124  f2c6							; ; often in GEM1ASWITCH
    125  f2c6							; ldy #BC_NOP
    126  f2c6							; rts
    127  f2c6
    128  f2c6				   .set_start
    129  f2c6		       a6 a4		      ldx	BuildKernelX
    130  f2c8		       e0 aa		      cpx	#SENTINEL
    131  f2ca		       d0 04		      bne	.set_else
    132  f2cc		       84 a4		      sty	BuildKernelX
    133  f2ce							; FIXME like here is where graphics would be reversed savedinto BuidlKernelX
    134  f2ce		       f0 08		      beq	.set_end
    135  f2d0				   .set_else
    136  f2d0		       a6 a5		      ldx	BuildKernelY
    137  f2d2		       e0 aa		      cpx	#SENTINEL
    138  f2d4		       d0 02		      bne	.set_end
    139  f2d6		       84 a5		      sty	BuildKernelY
    140  f2d8				   .set_end
    141  f2d8
    142  f2d8		       c4 a4		      cpy	BuildKernelX
    143  f2da		       d0 03		      bne	.op_else
    144  f2dc		       a0 86		      ldy	#BC_STX
    145  f2de		       60		      rts
    146  f2df				   .op_else
    147  f2df		       c4 a5		      cpy	BuildKernelY
    148  f2e1		       d0 02		      bne	.op_end
    149  f2e3		       a0 84		      ldy	#BC_STY
    150  f2e5				   .op_end
    151  f2e5		       60		      rts
    152  f2e6
    153  f2e6							; Vertical Sync
    154  f2e6				   VerticalSync subroutine
      0  f2e6					      VERTICAL_SYNC
      1  f2e6		       a9 0e		      lda	#%1110
      2  f2e8		       85 02	   .VSLP1     sta	WSYNC
      3  f2ea		       85 00		      sta	VSYNC
      4  f2ec		       4a		      lsr
      5  f2ed		       d0 f9		      bne	.VSLP1
    156  f2ef
    157  f2ef				   FrameStart subroutine
      0  f2ef					      ASSERT_RUNTIME	"_scan == #0"
      1  f2ef				   .COND      SET	"_scan == #0"
 ASSERT: breakif { pc== $f2ef  && !(  _scan == #0  ) }
      2  f2ef					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    159  f2ef
    160  f2ef				   VerticalBlank subroutine
      0  f2ef					      TIMER_SETUP	37
      1  f2ef				   .lines     SET	37
      2  f2ef		       a9 2b		      lda	#(((.lines)*76-14)/64)
      3  f2f1		       85 02		      sta	WSYNC
      4  f2f3		       8d 96 02 	      sta	TIM64T
    162  f2f6
    163  f2f6							; Scanline counter
    164  f2f6		       a9 10		      lda	#ROW_COUNT
    165  f2f8		       85 83		      sta	LoopCount
    166  f2fa
    167  f2fa							; Frame counter
    168  f2fa		       e6 84		      inc	FrameCount
    169  f2fc
    170  f2fc							; Skip every 8 frames for increasing demo index
    171  f2fc		       a5 84		      lda	FrameCount
    172  f2fe		       29 07		      and	#FrameSkip
    173  f300		       c9 07		      cmp	#FrameSkip
    174  f302		       d0 0d		      bne	.next_next_thing
    175  f304
    176  f304		       18		      clc
    177  f305		       a5 8f		      lda	ROW_DEMO_INDEX
    178  f307		       69 04		      adc	#4
    179  f309		       c9 68		      cmp	#[level_01_end - level_01]
    180  f30b		       90 02		      bcc	.next_thing_local
    181  f30d		       a9 00		      lda	#0
    182  f30f				   .next_thing_local
    183  f30f		       85 8f		      sta	ROW_DEMO_INDEX
    184  f311				   .next_next_thing
    185  f311		       85 02		      sta	WSYNC
    186  f313
    187  f313							; Positioning
      0  f313					      SLEEP	40
      1  f313				   .CYCLES    SET	40
      2  f313
      3  f313				  -	      IF	.CYCLES < 2
      4  f313				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f313				  -	      ERR
      6  f313					      ENDIF
      7  f313
      8  f313				  -	      IF	.CYCLES & 1
      9  f313				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f313				  -	      nop	0
     11  f313				  -	      ELSE
     12  f313				  -	      bit	VSYNC
     13  f313				  -	      ENDIF
     14  f313				  -.CYCLES    SET	.CYCLES - 3
     15  f313					      ENDIF
     16  f313
     17  f313					      REPEAT	.CYCLES / 2
     18  f313		       ea		      nop
     17  f313					      REPEND
     18  f314		       ea		      nop
     17  f314					      REPEND
     18  f315		       ea		      nop
     17  f315					      REPEND
     18  f316		       ea		      nop
     17  f316					      REPEND
     18  f317		       ea		      nop
     17  f317					      REPEND
     18  f318		       ea		      nop
     17  f318					      REPEND
     18  f319		       ea		      nop
     17  f319					      REPEND
     18  f31a		       ea		      nop
     17  f31a					      REPEND
     18  f31b		       ea		      nop
     17  f31b					      REPEND
     18  f31c		       ea		      nop
     17  f31c					      REPEND
     18  f31d		       ea		      nop
     17  f31d					      REPEND
     18  f31e		       ea		      nop
     17  f31e					      REPEND
     18  f31f		       ea		      nop
     17  f31f					      REPEND
     18  f320		       ea		      nop
     17  f320					      REPEND
     18  f321		       ea		      nop
     17  f321					      REPEND
     18  f322		       ea		      nop
     17  f322					      REPEND
     18  f323		       ea		      nop
     17  f323					      REPEND
     18  f324		       ea		      nop
     17  f324					      REPEND
     18  f325		       ea		      nop
     17  f325					      REPEND
     18  f326		       ea		      nop
     19  f327					      REPEND
    189  f327		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
    190  f329		       85 02		      sta	WSYNC
    191  f32b
    192  f32b							; Misc
    193  f32b		       a9 00		      lda	#00
    194  f32d		       85 1e		      sta	EMERALD_MI_ENABLE
    195  f32f
    196  f32f							; Assign dervied SpriteEnd value
    197  f32f		       18		      clc
    198  f330		       a9 c8		      lda	#HEIGHT_OFFSET
    199  f332		       e5 8a		      sbc	YPos
    200  f334		       85 86		      sta	SpriteEnd
    201  f336
    202  f336							; Player 1
    203  f336		       a5 87		      lda	XPos
    204  f338		       a2 00		      ldx	#0
    205  f33a		       20 ba f7 	      jsr	SetHorizPos
    206  f33d
    207  f33d				   frame_setup subroutine
    208  f33d							; Kernel A or B
    209  f33d		       a9 01		      lda	#01
    210  f33f		       25 84		      and	FrameCount
    211  f341		       d0 24		      bne	frame_setup_kernel_b
    212  f343
    213  f343				   frame_setup_kernel_a subroutine
    214  f343							; Load kernel into CBSRAM
    215  f343		       20 56 f2 	      jsr	LoadKernelA
    216  f346
    217  f346							; Move missile
    218  f346		       85 02		      sta	WSYNC
      0  f348					      sleep	KERNEL_A_MISSILE_SLEEP
      1  f348				   .CYCLES    SET	KERNEL_A_MISSILE_SLEEP
      2  f348
      3  f348				  -	      IF	.CYCLES < 2
      4  f348				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f348				  -	      ERR
      6  f348					      ENDIF
      7  f348
      8  f348				  -	      IF	.CYCLES & 1
      9  f348				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f348				  -	      nop	0
     11  f348				  -	      ELSE
     12  f348				  -	      bit	VSYNC
     13  f348				  -	      ENDIF
     14  f348				  -.CYCLES    SET	.CYCLES - 3
     15  f348					      ENDIF
     16  f348
     17  f348					      REPEAT	.CYCLES / 2
     18  f348		       ea		      nop
     17  f348					      REPEND
     18  f349		       ea		      nop
     17  f349					      REPEND
     18  f34a		       ea		      nop
     17  f34a					      REPEND
     18  f34b		       ea		      nop
     17  f34b					      REPEND
     18  f34c		       ea		      nop
     17  f34c					      REPEND
     18  f34d		       ea		      nop
     17  f34d					      REPEND
     18  f34e		       ea		      nop
     17  f34e					      REPEND
     18  f34f		       ea		      nop
     17  f34f					      REPEND
     18  f350		       ea		      nop
     17  f350					      REPEND
     18  f351		       ea		      nop
     17  f351					      REPEND
     18  f352		       ea		      nop
     17  f352					      REPEND
     18  f353		       ea		      nop
     17  f353					      REPEND
     18  f354		       ea		      nop
     17  f354					      REPEND
     18  f355		       ea		      nop
     19  f356					      REPEND
    220  f356		       85 13		      sta	EMERALD_MI_RESET
    221  f358		       a9 00		      lda	#KERNEL_A_MISSILE_HMOVE
    222  f35a		       85 23		      sta	EMERALD_MI_HMOVE
    223  f35c
    224  f35c							; DEBUG: Set per-kernel color
    225  f35c		       a2 cc		      ldx	#COL_EMERALD
    226  f35e		       86 07		      stx	EMERALD_SP_COLOR
    227  f360
    228  f360							; Set reflection for Jetpack.
    229  f360		       a9 ff		      lda	#%11111111
    230  f362		       85 0c		      sta	REFP1
    231  f364
    232  f364		       4c 94 f3 	      jmp	frame_setup_complete
    233  f367
    234  f367				   frame_setup_kernel_b subroutine
    235  f367							; Load kernel into CBSRAM
    236  f367		       20 68 f2 	      jsr	LoadKernelB
    237  f36a
    238  f36a							; Move missile
    239  f36a		       85 02		      sta	WSYNC
      0  f36c					      sleep	KERNEL_B_MISSILE_SLEEP
      1  f36c				   .CYCLES    SET	KERNEL_B_MISSILE_SLEEP
      2  f36c
      3  f36c				  -	      IF	.CYCLES < 2
      4  f36c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f36c				  -	      ERR
      6  f36c					      ENDIF
      7  f36c
      8  f36c					      IF	.CYCLES & 1
      9  f36c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f36c		       04 00		      nop	0
     11  f36e				  -	      ELSE
     12  f36e				  -	      bit	VSYNC
     13  f36e					      ENDIF
     14  f36e				   .CYCLES    SET	.CYCLES - 3
     15  f36e					      ENDIF
     16  f36e
     17  f36e					      REPEAT	.CYCLES / 2
     18  f36e		       ea		      nop
     17  f36e					      REPEND
     18  f36f		       ea		      nop
     17  f36f					      REPEND
     18  f370		       ea		      nop
     17  f370					      REPEND
     18  f371		       ea		      nop
     17  f371					      REPEND
     18  f372		       ea		      nop
     17  f372					      REPEND
     18  f373		       ea		      nop
     17  f373					      REPEND
     18  f374		       ea		      nop
     17  f374					      REPEND
     18  f375		       ea		      nop
     17  f375					      REPEND
     18  f376		       ea		      nop
     17  f376					      REPEND
     18  f377		       ea		      nop
     17  f377					      REPEND
     18  f378		       ea		      nop
     17  f378					      REPEND
     18  f379		       ea		      nop
     17  f379					      REPEND
     18  f37a		       ea		      nop
     17  f37a					      REPEND
     18  f37b		       ea		      nop
     17  f37b					      REPEND
     18  f37c		       ea		      nop
     17  f37c					      REPEND
     18  f37d		       ea		      nop
     17  f37d					      REPEND
     18  f37e		       ea		      nop
     17  f37e					      REPEND
     18  f37f		       ea		      nop
     17  f37f					      REPEND
     18  f380		       ea		      nop
     17  f380					      REPEND
     18  f381		       ea		      nop
     17  f381					      REPEND
     18  f382		       ea		      nop
     17  f382					      REPEND
     18  f383		       ea		      nop
     17  f383					      REPEND
     18  f384		       ea		      nop
     17  f384					      REPEND
     18  f385		       ea		      nop
     19  f386					      REPEND
    241  f386		       85 13		      sta	EMERALD_MI_RESET
    242  f388		       a9 10		      lda	#KERNEL_B_MISSILE_HMOVE
    243  f38a		       85 23		      sta	EMERALD_MI_HMOVE
    244  f38c
    245  f38c							; DEBUG: Set per-kernel color
    246  f38c							; ldx #$e0
    247  f38c		       a2 cc		      ldx	#COL_EMERALD
    248  f38e		       86 07		      stx	EMERALD_SP_COLOR
    249  f390
    250  f390							; Disable reflection for Jetpack.
    251  f390		       a9 ff		      lda	#%11111111
    252  f392		       85 0c		      sta	REFP1
    253  f394
    254  f394				   frame_setup_complete
    255  f394		       ad 00 f1 	      lda	$f100
    256  f397		       85 80		      sta	DebugKernelID
    257  f399
    258  f399		       ad 7c fb 	      lda	shard_map
    259  f39c		       a0 01		      ldy	#1	; gemini counter, starting at 1
    260  f39e				   gemini_builder
    261  f39e		       c0 01		      cpy	#1	; TODO top two bits of shard_map
    262  f3a0		       d0 00		      bne	.no_vd0
    263  f3a2				   .no_vd0
    264  f3a2
    265  f3a2
    266  f3a2				   nibble_precompile_gem_kernel
    267  f3a2				   DBG_NIBBLE
    268  f3a2		       00 a9	   BC_LDA_IMM =	$a9
    269  f3a2		       00 85	   BC_STA     =	$85
    270  f3a2		       00 86	   BC_STX     =	$86
    271  f3a2		       00 84	   BC_STY     =	$84
    272  f3a2		       00 08	   BC_PHP     =	$08
    273  f3a2		       00 04	   BC_NOP     =	$04
    274  f3a2
    275  f3a2		       00 79	   NOP_REG    =	$79	; TODO is there a better reg to write to with NOP effects
    276  f3a2
    277  f3a2				   KernelA_D_W EQM	[KernelA_D - $100]
    278  f3a2				   KernelA_E_W EQM	[KernelA_E - $100]
    279  f3a2				   KernelA_G_W EQM	[KernelA_G - $100]
    280  f3a2				   KernelA_H_W EQM	[KernelA_H - $100]
    281  f3a2				   KernelA_I_W EQM	[KernelA_I - $100]
    282  f3a2				   KernelA_J_W EQM	[KernelA_J - $100]
    283  f3a2				   KernelA_K_W EQM	[KernelA_K - $100]
    284  f3a2
    285  f3a2				   KernelB_D_W EQM	[KernelB_D - $100]
    286  f3a2				   KernelB_E_W EQM	[KernelB_E - $100]
    287  f3a2				   KernelB_F_W EQM	[KernelB_F - $100]
    288  f3a2				   KernelB_G_W EQM	[KernelB_G - $100]
    289  f3a2				   KernelB_H_W EQM	[KernelB_H - $100]
    290  f3a2				   KernelB_I_W EQM	[KernelB_I - $100]
    291  f3a2				   KernelB_J_W EQM	[KernelB_J - $100]
    292  f3a2				   KernelB_K_W EQM	[KernelB_K - $100]
    293  f3a2
    294  f3a2							; Nibble Kernel A
      0  f3a2					      NIBBLE_START_KERNEL	gem_kernel_a_1, 40
      1 U00de ????				      seg.U	ignoreme
    296 U00de ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    297 U00e0 ????	       86 a4		      stx	BuildKernelX
    298 U00e2 ????	       86 a5		      stx	BuildKernelY
    299 U00e4 ????	       86 a6		      stx	BuildKernelRST
    300 U00e6 ????
    301 U00e6 ????						; Gemini 1A
    302 U00e6 ????	       ac 90 f2 	      ldy	[GEMS_A + 0]
    303 U00e9 ????	       20 9e f2 	      jsr	KernelA_GenReset
      0 U00ec ????				      NIBBLE_IF	eq
    305 U00ec ????						; Special: Encoding RST0
    306 U00ec ????						; Rewrite lda RamKernelPF1 to be #immediate
    307 U00ec ????	       a0 a9		      ldy	#BC_LDA_IMM
    308 U00ee ????	       8c 16 f0 	      sty	[KernelA_B - $100]
    309 U00f1 ????	       a0 a0		      ldy	#%10100000
    310 U00f3 ????	       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
    311 U00f6 ????						; Store 1A in GRP0
    312 U00f6 ????	       ac 91 f2 	      ldy	[GEMS_A + 1]
    313 U00f9 ????	       84 a7		      sty	BuildKernelGrp0
    314 U00fb ????						; Gemini 1A is RESPx
    315 U00fb ????	       a0 11		      ldy	#EMERALD_SP_RESET
    316 U00fd ????	       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
    317 U0100 ????						; Turn 3-cycle NOP into 4-cycle
    318 U0100 ????	       a0 14		      ldy	#$14	; TODO what is this
    319 U0102 ????	       8c 1a f0 	      sty	[KernelA_D - $100]
      0 U0105 ????				      NIBBLE_ELSE
    321 U0105 ????						; Store 0A in GRP0
    322 U0105 ????	       ac 90 f2 	      ldy	[GEMS_A + 0]
    323 U0108 ????	       84 a7		      sty	BuildKernelGrp0
    324 U010a ????
    325 U010a ????	       ac 91 f2 	      ldy	[GEMS_A + 1]
    326 U010d ????	       20 9e f2 	      jsr	KernelA_GenReset
      0 U0110 ????				      NIBBLE_IF	eq
    328 U0110 ????						; GEM1ASWITCH
      0 U0110 ????				      NIBBLE_WRITE	KernelA_D_W, #BC_STX, #RESP1	; RESET
      0 U0110 ????				      NIBBLE_ELSE
    331 U0110 ????						; Calculate the 1A value
    332 U0110 ????	       ac 9c f2 	      ldy	SHARD_LUT_RF1
    333 U0113 ????	       c0 01		      cpy	#1
    334 U0115 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    335 U0117 ????	       a0 11		      ldy	#RESP1
    336 U0119 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    337 U011a ????	       a0 1c		      ldy	#GRP1
    338 U011c ????	       84 9c		      sty	RamKernelGemini1Reg
    339 U011e ????
    340 U011e ????						; Set opcode
    341 U011e ????	       ae 9c f2 	      ldx	SHARD_LUT_RF1
    342 U0121 ????	       e0 01		      cpx	#1
    343 U0123 ????	       a0 86		      ldy	#BC_STX
    344 U0125 ????	       d0 04		      .byte.b	$D0, #4	; bne +5
    345 U0127 ????	       ac 91 f2 	      ldy	[GEMS_A + 1]
    346 U012a ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    347 U012d ????	       84 9b		      sty	RamKernelGemini1
    348 U012f ????
      0 U012f ????				      NIBBLE_WRITE	KernelA_D_W, RamKernelGemini1, RamKernelGemini1Reg
      0 U012f ????				      NIBBLE_END_IF
      0 U012f ????				      NIBBLE_END_IF
    352 U012f ????
    353 U012f ????						; Gemini 2A
    354 U012f ????	       ac 92 f2 	      ldy	[GEMS_A + 2]
    355 U0132 ????	       20 9e f2 	      jsr	KernelA_GenReset
      0 U0135 ????				      NIBBLE_IF	eq
      0 U0135 ????				      NIBBLE_WRITE	KernelA_E_W + 1, #NOP_REG	; NOP
      0 U0135 ????				      NIBBLE_WRITE	KernelA_G_W + 1, #RESP1	; RESET
      0 U0135 ????				      NIBBLE_ELSE
    360 U0135 ????						; Set opcode
    361 U0135 ????	       ac 92 f2 	      ldy	[GEMS_A + 2]
    362 U0138 ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    363 U013b ????	       84 9d		      sty	RamKernelGemini2
    364 U013d ????
    365 U013d ????						; Set opcode target
    366 U013d ????	       ac 9c f2 	      ldy	SHARD_LUT_RF1
    367 U0140 ????	       c0 02		      cpy	#2
    368 U0142 ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    369 U0144 ????	       a0 11		      ldy	#RESP1
    370 U0146 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    371 U0147 ????	       a0 1c		      ldy	#GRP1
    372 U0149 ????	       84 9e		      sty	RamKernelGemini2Reg
    373 U014b ????
      0 U014b ????				      NIBBLE_WRITE	KernelA_E_W + 1, #RESP1
      0 U014b ????				      NIBBLE_WRITE	KernelA_G_W, RamKernelGemini2, RamKernelGemini2Reg	; STX
      0 U014b ????				      NIBBLE_END_IF
    377 U014b ????
    378 U014b ????						; Gemini 3A
    379 U014b ????	       ac 93 f2 	      ldy	[GEMS_A + 3]
    380 U014e ????	       20 9e f2 	      jsr	KernelA_GenReset
      0 U0151 ????				      NIBBLE_IF	eq
      0 U0151 ????				      NIBBLE_WRITE	KernelA_H_W + 1, #RESP1	; RESET
      0 U0151 ????				      NIBBLE_ELSE
    384 U0151 ????						; Set opcode
    385 U0151 ????	       ac 93 f2 	      ldy	[GEMS_A + 3]
    386 U0154 ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    387 U0157 ????	       84 9f		      sty	RamKernelGemini3
    388 U0159 ????
    389 U0159 ????						; Set opcode target
    390 U0159 ????	       ac 9c f2 	      ldy	SHARD_LUT_RF1
    391 U015c ????	       c0 03		      cpy	#3
    392 U015e ????	       d0 03		      .byte.b	$D0, #3	; bne +3
    393 U0160 ????	       a0 11		      ldy	#RESP1
    394 U0162 ????	       2c		      .byte.b	$2C	; .bit (ABS)
    395 U0163 ????	       a0 1c		      ldy	#GRP1
    396 U0165 ????	       84 a0		      sty	RamKernelGemini3Reg
    397 U0167 ????
      0 U0167 ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini3, RamKernelGemini3Reg	; STY
      0 U0167 ????				      NIBBLE_END_IF
      0 U0167 ????				      NIBBLE_END_KERNEL
      1  f3a2					      seg	CodeBank3
    401  f3a2
      0  f3a2					      NIBBLE_START_KERNEL	gem_kernel_a_2, 40
      1 U0167 ????				      seg.U	ignoreme
    403 U0167 ????						; VD1 default
    404 U0167 ????	       ae 91 f2 	      ldx	[GEMS_A + 1]
    405 U016a ????	       86 a8		      stx	BuildKernelVdel1
    406 U016c ????
    407 U016c ????						; Gemini 4A
    408 U016c ????	       ae 9d f2 	      ldx	SHARD_LUT_VD1
    409 U016f ????	       e0 04		      cpx	#4
      0 U0171 ????				      NIBBLE_IF	ne
      0 U0171 ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_STA, #EMERALD_SP_RESET
      0 U0171 ????				      NIBBLE_WRITE	[KernelA_J_W + 1], #BC_STA, #PF1
      0 U0171 ????				      NIBBLE_WRITE	[KernelA_K_W + 1], #BC_PHP
    414 U0171 ????
    415 U0171 ????						; Set PHP
      0 U0171 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #VDELP1
    417 U0171 ????
    418 U0171 ????						; Update VDEL1
    419 U0171 ????	       ae 94 f2 	      ldx	[GEMS_A + 4]
    420 U0174 ????	       86 a8		      stx	BuildKernelVdel1
      0 U0176 ????				      NIBBLE_ELSE
    422 U0176 ????	       ac 94 f2 	      ldy	[GEMS_A + 4]
    423 U0179 ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    424 U017c ????	       84 a1		      sty	RamKernelGemini4
    425 U017e ????
      0 U017e ????				      NIBBLE_WRITE	[KernelA_I_W + 0], #BC_PHP
      0 U017e ????				      NIBBLE_WRITE	[KernelA_J_W + 0], #BC_STA, #PF1
      0 U017e ????				      NIBBLE_WRITE	KernelA_K_W, RamKernelGemini4, #EMERALD_SP
    429 U017e ????
    430 U017e ????						; Set PHP
      0 U017e ????				      NIBBLE_WRITE	RamKernelPhpTarget, #RESP1
      0 U017e ????				      NIBBLE_END_IF
    433 U017e ????
    434 U017e ????						; VD1
    435 U017e ????						; ldy #SHARD_VD1
    436 U017e ????						; sty [KernelA_VDEL1 - $100]
      0 U017e ????				      NIBBLE_WRITE	[KernelA_VDEL1 - $100], BuildKernelVdel1
    438 U017e ????						; GRP0
    439 U017e ????						; ldy #SHARD_GRP0
    440 U017e ????						; sty [KernelA_VDEL0 - $100]
      0 U017e ????				      NIBBLE_WRITE	[KernelA_VDEL0 - $100], BuildKernelGrp0
    442 U017e ????						; X
    443 U017e ????						; ldy #SHARD_X
    444 U017e ????						; sty RamKernelX
      0 U017e ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    446 U017e ????						; Y
      0 U017e ????				      NIBBLE_WRITE	[KernelA_STY - $100], BuildKernelY
    448 U017e ????
    449 U017e ????						; Gemini 5A
    450 U017e ????						; TODO eventually...?
      0 U017e ????				      NIBBLE_END_KERNEL
      1  f3a2					      seg	CodeBank3
    452  f3a2
    453  f3a2							; Nibble Kernel B
      0  f3a2					      NIBBLE_START_KERNEL	gem_kernel_b, 40
      1 U017e ????				      seg.U	ignoreme
    455 U017e ????						; Php target default
    456 U017e ????	       a2 11		      ldx	#RESP1
    457 U0180 ????	       86 98		      stx	RamKernelPhpTarget
    458 U0182 ????
    459 U0182 ????	       a2 aa		      ldx	#SENTINEL	; sentinel
    460 U0184 ????	       86 a4		      stx	BuildKernelX
    461 U0186 ????	       86 a5		      stx	BuildKernelY
    462 U0188 ????	       86 a6		      stx	BuildKernelRST
    463 U018a ????
    464 U018a ????						; Gemini 1B
    465 U018a ????	       ac 97 f2 	      ldy	[GEMS_B + 1]
    466 U018d ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    467 U0190 ????	       84 9f		      sty	RamKernelGemini3
      0 U0192 ????				      NIBBLE_WRITE	KernelB_D_W, RamKernelGemini3
    469 U0192 ????
    470 U0192 ????						; Gemini 2B
    471 U0192 ????	       ac 98 f2 	      ldy	[GEMS_B + 2]
    472 U0195 ????	       20 b0 f2 	      jsr	KernelB_GenPhp
      0 U0198 ????				      NIBBLE_IF	eq
    474 U0198 ????						; Write to PHP in 2B
      0 U0198 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 2B
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_PHP
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_G_W + 0], #BC_STA, #PF1
      0 U0198 ????				      NIBBLE_WRITE	[KernelB_H_W + 0], #BC_STY, #EMERALD_SP	; 3B
      0 U0198 ????				      NIBBLE_ELSE
    481 U0198 ????						; Calculate the gemini value
    482 U0198 ????	       ac 98 f2 	      ldy	[GEMS_B + 2]
    483 U019b ????	       20 c6 f2 	      jsr	KernelB_UpdateRegs
    484 U019e ????	       84 9b		      sty	RamKernelGemini1
    485 U01a0 ????
      0 U01a0 ????				      NIBBLE_WRITE	KernelB_F_W, RamKernelGemini1, #EMERALD_SP
      0 U01a0 ????				      NIBBLE_END_IF
    488 U01a0 ????
    489 U01a0 ????						; Gemini 3B
    490 U01a0 ????	       ac 99 f2 	      ldy	[GEMS_B + 3]
    491 U01a3 ????	       20 b0 f2 	      jsr	KernelB_GenPhp
      0 U01a6 ????				      NIBBLE_IF	eq
    493 U01a6 ????						; Write to PHP in 3B
      0 U01a6 ????				      NIBBLE_WRITE	RamKernelPhpTarget, #EMERALD_SP
      0 U01a6 ????				      NIBBLE_WRITE	[KernelB_E_W + 0], #BC_STY, #EMERALD_SP_RESET	; 3B
      0 U01a6 ????				      NIBBLE_WRITE	[KernelB_F_W + 1], #BC_STY, #EMERALD_SP	; 2B
      0 U01a6 ????				      NIBBLE_WRITE	[KernelB_G_W + 1], #BC_STA, #PF1
      0 U01a6 ????				      NIBBLE_WRITE	[KernelB_H_W + 1], #BC_PHP
      0 U01a6 ????				      NIBBLE_ELSE
    500 U01a6 ????						; Calculate the gemini value
    501 U01a6 ????	       ac 97 f2 	      ldy	[GEMS_B + 1]
    502 U01a9 ????	       20 c6 f2 	      jsr	KernelB_UpdateRegs
    503 U01ac ????	       84 9b		      sty	RamKernelGemini1
    504 U01ae ????
      0 U01ae ????				      NIBBLE_WRITE	KernelA_H_W, RamKernelGemini1, #EMERALD_SP
      0 U01ae ????				      NIBBLE_END_IF
    507 U01ae ????
    508 U01ae ????						; Gemini 4B
    509 U01ae ????	       ac 9a f2 	      ldy	[GEMS_B + 4]
    510 U01b1 ????	       20 c6 f2 	      jsr	KernelA_UpdateRegs
    511 U01b4 ????	       84 a1		      sty	RamKernelGemini4
      0 U01b6 ????				      NIBBLE_WRITE	KernelB_J_W, RamKernelGemini4
    513 U01b6 ????
    514 U01b6 ????						; TODO if no PHP, rewrite previous section:
    515 U01b6 ????						; NIBBLE_IF cs
    516 U01b6 ????						;     ; Write to PHP in reset command
    517 U01b6 ????						;     NIBBLE_WRITE [KernelB_E_W + 0], #BC_PHP
    518 U01b6 ????						;     NIBBLE_WRITE [KernelB_F_W + 0], #BC_STY, #EMERALD_SP ; 2B
    519 U01b6 ????						;     NIBBLE_WRITE [KernelB_G_W + 0], #BC_STA, #PF1
    520 U01b6 ????						;     NIBBLE_WRITE [KernelB_H_W + 0], #BC_STY, #EMERALD_SP ; 3B
    521 U01b6 ????						; NIBBLE_END_IF
    522 U01b6 ????
    523 U01b6 ????						; Make adjustments for sprites.
    524 U01b6 ????	       66 a7		      ror	BuildKernelGrp0
    525 U01b8 ????	       66 a4		      ror	BuildKernelX
    526 U01ba ????	       66 a5		      ror	BuildKernelY
    527 U01bc ????
    528 U01bc ????						; ; VD1
    529 U01bc ????						; NIBBLE_WRITE [KernelB_VDEL1 - $100], BuildKernelVdel1
    530 U01bc ????						; GRP0
      0 U01bc ????				      NIBBLE_WRITE	[KernelB_VDEL0 - $100], BuildKernelGrp0
    532 U01bc ????						; X
      0 U01bc ????				      NIBBLE_WRITE	RamKernelX, BuildKernelX
    534 U01bc ????						; Y
      0 U01bc ????				      NIBBLE_WRITE	RamKernelY, BuildKernelY
    536 U01bc ????
      0 U01bc ????				      NIBBLE_END_KERNEL
      1  f3a2					      seg	CodeBank3
    538  f3a2
    539  f3a2							; TODO do this for all rows
    540  f3a2				   DBG_NIBBLE_BUILD subroutine
    541  f3a2		       ae 00 f1 	      ldx	$f100
    542  f3a5		       e0 0a		      cpx	#$a
    543  f3a7		       f0 03		      beq	[. + 5]
    544  f3a9		       4c 90 f4 	      jmp	.kernel_b
    545  f3ac				   .kernel_a
      0  f3ac					      NIBBLE_gem_kernel_a_1_BUILD		; TODO can this be implied
      1  f3ac		       a9 00		      lda	#0
      2  f3ae		       a2 aa		      ldx	#SENTINEL
      3  f3b0		       86 a4		      stx	BuildKernelX
      4  f3b2		       86 a5		      stx	BuildKernelY
      5  f3b4		       86 a6		      stx	BuildKernelRST
      6  f3b6
      7  f3b6		       ac 90 f2 	      ldy	[GEMS_A + 0]
      8  f3b9		       20 9e f2 	      jsr	KernelA_GenReset
      9  f3bc				   .if_1
     10  f3bc		       d0 1f		      bne	.else_1
     11  f3be		       38		      sec
     12  f3bf		       2a		      rol
     13  f3c0
     14  f3c0
     15  f3c0		       a0 a9		      ldy	#BC_LDA_IMM
     16  f3c2		       8c 16 f0 	      sty	[KernelA_B - $100]
     17  f3c5		       a0 a0		      ldy	#%10100000
     18  f3c7		       8c 17 f0 	      sty	[KernelA_B - $100 + 1]
     19  f3ca
     20  f3ca		       ac 91 f2 	      ldy	[GEMS_A + 1]
     21  f3cd		       84 a7		      sty	BuildKernelGrp0
     22  f3cf
     23  f3cf		       a0 11		      ldy	#EMERALD_SP_RESET
     24  f3d1		       8c 19 f0 	      sty	[KernelA_C - $100 + 1]
     25  f3d4
     26  f3d4		       a0 14		      ldy	#$14
     27  f3d6		       8c 1a f0 	      sty	[KernelA_D - $100]
     28  f3d9		       4c 12 f4 	      jmp	.endif_1
     29  f3dc
     30  f3dc		       2a		      rol
     31  f3dd
     32  f3dd				   .else_1
     33  f3dd		       18		      clc
     34  f3de		       2a		      rol
     35  f3df
     36  f3df		       ac 90 f2 	      ldy	[GEMS_A + 0]
     37  f3e2		       84 a7		      sty	BuildKernelGrp0
     38  f3e4		       ac 91 f2 	      ldy	[GEMS_A + 1]
     39  f3e7		       20 9e f2 	      jsr	KernelA_GenReset
     40  f3ea				   .if_2
     41  f3ea		       d0 05		      bne	.else_2
     42  f3ec		       38		      sec
     43  f3ed		       2a		      rol
     44  f3ee
     45  f3ee		       4c 12 f4 	      jmp	.endif_2
     46  f3f1
     47  f3f1
     48  f3f1				   .else_2
     49  f3f1		       18		      clc
     50  f3f2		       2a		      rol
     51  f3f3
     52  f3f3		       ac 9c f2 	      ldy	SHARD_LUT_RF1
     53  f3f6		       c0 01		      cpy	#1
     54  f3f8		       d0 03		      .byte.b	$D0, #3
     55  f3fa		       a0 11		      ldy	#RESP1
     56  f3fc		       2c		      .byte.b	$2C
     57  f3fd		       a0 1c		      ldy	#GRP1
     58  f3ff		       84 9c		      sty	RamKernelGemini1Reg
     59  f401
     60  f401		       ae 9c f2 	      ldx	SHARD_LUT_RF1
     61  f404		       e0 01		      cpx	#1
     62  f406		       a0 86		      ldy	#BC_STX
     63  f408		       d0 04		      .byte.b	$D0, #4
     64  f40a		       ac 91 f2 	      ldy	[GEMS_A + 1]
     65  f40d		       20 c6 f2 	      jsr	KernelA_UpdateRegs
     66  f410		       84 9b		      sty	RamKernelGemini1
     67  f412
     68  f412
     69  f412				   .endif_2
     70  f412
     71  f412
     72  f412				   .endif_1
     73  f412
     74  f412		       ac 92 f2 	      ldy	[GEMS_A + 2]
     75  f415		       20 9e f2 	      jsr	KernelA_GenReset
     76  f418				   .if_3
     77  f418		       d0 05		      bne	.else_3
     78  f41a		       38		      sec
     79  f41b		       2a		      rol
     80  f41c		       4c 37 f4 	      jmp	.endif_3
     81  f41f
     82  f41f
     83  f41f				   .else_3
     84  f41f		       18		      clc
     85  f420		       2a		      rol
     86  f421
     87  f421		       ac 92 f2 	      ldy	[GEMS_A + 2]
     88  f424		       20 c6 f2 	      jsr	KernelA_UpdateRegs
     89  f427		       84 9d		      sty	RamKernelGemini2
     90  f429
     91  f429		       ac 9c f2 	      ldy	SHARD_LUT_RF1
     92  f42c		       c0 02		      cpy	#2
     93  f42e		       d0 03		      .byte.b	$D0, #3
     94  f430		       a0 11		      ldy	#RESP1
     95  f432		       2c		      .byte.b	$2C
     96  f433		       a0 1c		      ldy	#GRP1
     97  f435		       84 9e		      sty	RamKernelGemini2Reg
     98  f437
     99  f437
    100  f437				   .endif_3
    101  f437
    102  f437		       ac 93 f2 	      ldy	[GEMS_A + 3]
    103  f43a		       20 9e f2 	      jsr	KernelA_GenReset
    104  f43d				   .if_4
    105  f43d		       d0 05		      bne	.else_4
    106  f43f		       38		      sec
    107  f440		       2a		      rol
    108  f441		       4c 5c f4 	      jmp	.endif_4
    109  f444
    110  f444
    111  f444				   .else_4
    112  f444		       18		      clc
    113  f445		       2a		      rol
    114  f446
    115  f446		       ac 93 f2 	      ldy	[GEMS_A + 3]
    116  f449		       20 c6 f2 	      jsr	KernelA_UpdateRegs
    117  f44c		       84 9f		      sty	RamKernelGemini3
    118  f44e
    119  f44e		       ac 9c f2 	      ldy	SHARD_LUT_RF1
    120  f451		       c0 03		      cpy	#3
    121  f453		       d0 03		      .byte.b	$D0, #3
    122  f455		       a0 11		      ldy	#RESP1
    123  f457		       2c		      .byte.b	$2C
    124  f458		       a0 1c		      ldy	#GRP1
    125  f45a		       84 a0		      sty	RamKernelGemini3Reg
    126  f45c
    127  f45c
    128  f45c				   .endif_4
    129  f45c
    130  f45c		       2a		      rol
    131  f45d		       2a		      rol
    132  f45e		       2a		      rol
    133  f45f		       2a		      rol
    547  f460		       85 91		      sta	RamNibbleVar1
      0  f462					      NIBBLE_gem_kernel_a_2_BUILD		; TODO can this be implied
      1  f462		       a9 00		      lda	#0
      2  f464
      3  f464		       ae 91 f2 	      ldx	[GEMS_A + 1]
      4  f467		       86 a8		      stx	BuildKernelVdel1
      5  f469
      6  f469		       ae 9d f2 	      ldx	SHARD_LUT_VD1
      7  f46c		       e0 04		      cpx	#4
      8  f46e				   .if_1
      9  f46e		       f0 0a		      beq	.else_1
     10  f470		       38		      sec
     11  f471		       2a		      rol
     12  f472
     13  f472
     14  f472		       ae 94 f2 	      ldx	[GEMS_A + 4]
     15  f475		       86 a8		      stx	BuildKernelVdel1
     16  f477		       4c 84 f4 	      jmp	.endif_1
     17  f47a
     18  f47a
     19  f47a				   .else_1
     20  f47a		       18		      clc
     21  f47b		       2a		      rol
     22  f47c		       ac 94 f2 	      ldy	[GEMS_A + 4]
     23  f47f		       20 c6 f2 	      jsr	KernelA_UpdateRegs
     24  f482		       84 a1		      sty	RamKernelGemini4
     25  f484
     26  f484
     27  f484
     28  f484				   .endif_1
     29  f484
     30  f484
     31  f484
     32  f484
     33  f484
     34  f484
     35  f484
     36  f484
     37  f484
     38  f484
     39  f484
     40  f484
     41  f484
     42  f484		       2a		      rol
     43  f485		       2a		      rol
     44  f486		       2a		      rol
     45  f487		       2a		      rol
     46  f488		       2a		      rol
     47  f489		       2a		      rol
     48  f48a		       2a		      rol
    549  f48b		       85 92		      sta	RamNibbleVar2
    550  f48d		       4c ea f4 	      jmp	.next
    551  f490				   .kernel_b
      0  f490					      NIBBLE_gem_kernel_b_BUILD		; TODO can this be implied
      1  f490		       a9 00		      lda	#0
      2  f492
      3  f492		       a2 11		      ldx	#RESP1
      4  f494		       86 98		      stx	RamKernelPhpTarget
      5  f496		       a2 aa		      ldx	#SENTINEL
      6  f498		       86 a4		      stx	BuildKernelX
      7  f49a		       86 a5		      stx	BuildKernelY
      8  f49c		       86 a6		      stx	BuildKernelRST
      9  f49e
     10  f49e		       ac 97 f2 	      ldy	[GEMS_B + 1]
     11  f4a1		       20 c6 f2 	      jsr	KernelA_UpdateRegs
     12  f4a4		       84 9f		      sty	RamKernelGemini3
     13  f4a6
     14  f4a6		       ac 98 f2 	      ldy	[GEMS_B + 2]
     15  f4a9		       20 b0 f2 	      jsr	KernelB_GenPhp
     16  f4ac				   .if_1
     17  f4ac		       d0 05		      bne	.else_1
     18  f4ae		       38		      sec
     19  f4af		       2a		      rol
     20  f4b0
     21  f4b0		       4c bd f4 	      jmp	.endif_1
     22  f4b3
     23  f4b3
     24  f4b3				   .else_1
     25  f4b3		       18		      clc
     26  f4b4		       2a		      rol
     27  f4b5
     28  f4b5		       ac 98 f2 	      ldy	[GEMS_B + 2]
     29  f4b8		       20 c6 f2 	      jsr	KernelB_UpdateRegs
     30  f4bb		       84 9b		      sty	RamKernelGemini1
     31  f4bd
     32  f4bd
     33  f4bd				   .endif_1
     34  f4bd
     35  f4bd		       ac 99 f2 	      ldy	[GEMS_B + 3]
     36  f4c0		       20 b0 f2 	      jsr	KernelB_GenPhp
     37  f4c3				   .if_2
     38  f4c3		       d0 05		      bne	.else_2
     39  f4c5		       38		      sec
     40  f4c6		       2a		      rol
     41  f4c7
     42  f4c7		       4c d4 f4 	      jmp	.endif_2
     43  f4ca
     44  f4ca
     45  f4ca				   .else_2
     46  f4ca		       18		      clc
     47  f4cb		       2a		      rol
     48  f4cc
     49  f4cc		       ac 97 f2 	      ldy	[GEMS_B + 1]
     50  f4cf		       20 c6 f2 	      jsr	KernelB_UpdateRegs
     51  f4d2		       84 9b		      sty	RamKernelGemini1
     52  f4d4
     53  f4d4
     54  f4d4				   .endif_2
     55  f4d4
     56  f4d4		       ac 9a f2 	      ldy	[GEMS_B + 4]
     57  f4d7		       20 c6 f2 	      jsr	KernelA_UpdateRegs
     58  f4da		       84 a1		      sty	RamKernelGemini4
     59  f4dc
     60  f4dc
     61  f4dc
     62  f4dc
     63  f4dc
     64  f4dc
     65  f4dc
     66  f4dc
     67  f4dc
     68  f4dc		       66 a7		      ror	BuildKernelGrp0
     69  f4de		       66 a4		      ror	BuildKernelX
     70  f4e0		       66 a5		      ror	BuildKernelY
     71  f4e2
     72  f4e2
     73  f4e2
     74  f4e2
     75  f4e2
     76  f4e2
     77  f4e2		       2a		      rol
     78  f4e3		       2a		      rol
     79  f4e4		       2a		      rol
     80  f4e5		       2a		      rol
     81  f4e6		       2a		      rol
     82  f4e7		       2a		      rol
    553  f4e8		       85 91		      sta	RamNibbleVar1
    554  f4ea				   .next
    555  f4ea
    556  f4ea							; TODO move this into the row kernel
    557  f4ea				   DBG_NIBBLE_RUN subroutine
    558  f4ea		       ae 00 f1 	      ldx	$f100
    559  f4ed		       e0 0a		      cpx	#$a
    560  f4ef		       f0 03		      beq	[. + 5]
    561  f4f1		       4c a2 f5 	      jmp	.kernel_b
    562  f4f4				   .kernel_a
    563  f4f4		       a5 91		      lda	RamNibbleVar1
      0  f4f6					      NIBBLE_gem_kernel_a_1
      1  f4f6				   .if_1
      2  f4f6		       0a		      asl
      3  f4f7		       90 03		      bcc	.else_1
      4  f4f9		       4c 16 f5 	      jmp	.endif_1
      5  f4fc				   .else_1
      6  f4fc				   .if_2
      7  f4fc		       0a		      asl
      8  f4fd		       90 0d		      bcc	.else_2
      9  f4ff		       a2 86		      ldx	#BC_STX
     10  f501		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     11  f504		       a2 11		      ldx	#RESP1
     12  f506		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     13  f509		       4c 16 f5 	      jmp	.endif_2
     14  f50c				   .else_2
     15  f50c		       a6 9b		      ldx	RamKernelGemini1
     16  f50e		       8e 1a f0 	      stx	[KernelA_D_W + 0]
     17  f511		       a6 9c		      ldx	RamKernelGemini1Reg
     18  f513		       8e 1b f0 	      stx	[KernelA_D_W + 1]
     19  f516				   .endif_2
     20  f516				   .endif_1
     21  f516				   .if_3
     22  f516		       0a		      asl
     23  f517		       90 0d		      bcc	.else_3
     24  f519		       a2 79		      ldx	#NOP_REG
     25  f51b		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     26  f51e		       a2 11		      ldx	#RESP1
     27  f520		       8e 21 f0 	      stx	[KernelA_G_W + 1 + 0]
     28  f523		       4c 35 f5 	      jmp	.endif_3
     29  f526				   .else_3
     30  f526		       a2 11		      ldx	#RESP1
     31  f528		       8e 1d f0 	      stx	[KernelA_E_W + 1 + 0]
     32  f52b		       a6 9d		      ldx	RamKernelGemini2
     33  f52d		       8e 20 f0 	      stx	[KernelA_G_W + 0]
     34  f530		       a6 9e		      ldx	RamKernelGemini2Reg
     35  f532		       8e 21 f0 	      stx	[KernelA_G_W + 1]
     36  f535				   .endif_3
     37  f535				   .if_4
     38  f535		       0a		      asl
     39  f536		       90 08		      bcc	.else_4
     40  f538		       a2 11		      ldx	#RESP1
     41  f53a		       8e 23 f0 	      stx	[KernelA_H_W + 1 + 0]
     42  f53d		       4c 4a f5 	      jmp	.endif_4
     43  f540				   .else_4
     44  f540		       a6 9f		      ldx	RamKernelGemini3
     45  f542		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     46  f545		       a6 a0		      ldx	RamKernelGemini3Reg
     47  f547		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     48  f54a				   .endif_4
    565  f54a		       a5 92		      lda	RamNibbleVar2
      0  f54c					      NIBBLE_gem_kernel_a_2
      1  f54c				   .if_1
      2  f54c		       0a		      asl
      3  f54d		       90 20		      bcc	.else_1
      4  f54f		       a2 85		      ldx	#BC_STA
      5  f551		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
      6  f554		       a2 11		      ldx	#EMERALD_SP_RESET
      7  f556		       8e 25 f0 	      stx	[[KernelA_I_W + 0] + 1]
      8  f559		       a2 85		      ldx	#BC_STA
      9  f55b		       8e 26 f0 	      stx	[[KernelA_J_W + 1] + 0]
     10  f55e		       a2 0e		      ldx	#PF1
     11  f560		       8e 27 f0 	      stx	[[KernelA_J_W + 1] + 1]
     12  f563		       a2 08		      ldx	#BC_PHP
     13  f565		       8e 28 f0 	      stx	[[KernelA_K_W + 1] + 0]
     14  f568		       a2 26		      ldx	#VDELP1
     15  f56a		       86 98		      stx	[RamKernelPhpTarget + 0]
     16  f56c		       4c 8c f5 	      jmp	.endif_1
     17  f56f				   .else_1
     18  f56f		       a2 08		      ldx	#BC_PHP
     19  f571		       8e 24 f0 	      stx	[[KernelA_I_W + 0] + 0]
     20  f574		       a2 85		      ldx	#BC_STA
     21  f576		       8e 25 f0 	      stx	[[KernelA_J_W + 0] + 0]
     22  f579		       a2 0e		      ldx	#PF1
     23  f57b		       8e 26 f0 	      stx	[[KernelA_J_W + 0] + 1]
     24  f57e		       a6 a1		      ldx	RamKernelGemini4
     25  f580		       8e 27 f0 	      stx	[KernelA_K_W + 0]
     26  f583		       a2 1c		      ldx	#EMERALD_SP
     27  f585		       8e 28 f0 	      stx	[KernelA_K_W + 1]
     28  f588		       a2 11		      ldx	#RESP1
     29  f58a		       86 98		      stx	[RamKernelPhpTarget + 0]
     30  f58c				   .endif_1
     31  f58c		       a6 a8		      ldx	BuildKernelVdel1
     32  f58e		       8e 04 f0 	      stx	[[KernelA_VDEL1 - $100] + 0]
     33  f591		       a6 a7		      ldx	BuildKernelGrp0
     34  f593		       8e 0a f0 	      stx	[[KernelA_VDEL0 - $100] + 0]
     35  f596		       a6 a4		      ldx	BuildKernelX
     36  f598		       86 99		      stx	[RamKernelX + 0]
     37  f59a		       a6 a5		      ldx	BuildKernelY
     38  f59c		       8e 0e f0 	      stx	[[KernelA_STY - $100] + 0]
    567  f59f		       4c 29 f6 	      jmp	.next
    568  f5a2				   .kernel_b
    569  f5a2		       a5 91		      lda	RamNibbleVar1
      0  f5a4					      NIBBLE_gem_kernel_b
      1  f5a4		       a6 9f		      ldx	RamKernelGemini3
      2  f5a6		       8e 1b f0 	      stx	[KernelB_D_W + 0]
      3  f5a9				   .if_1
      4  f5a9		       0a		      asl
      5  f5aa		       90 2a		      bcc	.else_1
      6  f5ac		       a2 1c		      ldx	#EMERALD_SP
      7  f5ae		       86 98		      stx	[RamKernelPhpTarget + 0]
      8  f5b0		       a2 84		      ldx	#BC_STY
      9  f5b2		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     10  f5b5		       a2 11		      ldx	#EMERALD_SP_RESET
     11  f5b7		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     12  f5ba		       a2 08		      ldx	#BC_PHP
     13  f5bc		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     14  f5bf		       a2 85		      ldx	#BC_STA
     15  f5c1		       8e 20 f0 	      stx	[[KernelB_G_W + 0] + 0]
     16  f5c4		       a2 0e		      ldx	#PF1
     17  f5c6		       8e 21 f0 	      stx	[[KernelB_G_W + 0] + 1]
     18  f5c9		       a2 84		      ldx	#BC_STY
     19  f5cb		       8e 22 f0 	      stx	[[KernelB_H_W + 0] + 0]
     20  f5ce		       a2 1c		      ldx	#EMERALD_SP
     21  f5d0		       8e 23 f0 	      stx	[[KernelB_H_W + 0] + 1]
     22  f5d3		       4c e0 f5 	      jmp	.endif_1
     23  f5d6				   .else_1
     24  f5d6		       a6 9b		      ldx	RamKernelGemini1
     25  f5d8		       8e 1e f0 	      stx	[KernelB_F_W + 0]
     26  f5db		       a2 1c		      ldx	#EMERALD_SP
     27  f5dd		       8e 1f f0 	      stx	[KernelB_F_W + 1]
     28  f5e0				   .endif_1
     29  f5e0				   .if_2
     30  f5e0		       0a		      asl
     31  f5e1		       90 2a		      bcc	.else_2
     32  f5e3		       a2 1c		      ldx	#EMERALD_SP
     33  f5e5		       86 98		      stx	[RamKernelPhpTarget + 0]
     34  f5e7		       a2 84		      ldx	#BC_STY
     35  f5e9		       8e 1d f0 	      stx	[[KernelB_E_W + 0] + 0]
     36  f5ec		       a2 11		      ldx	#EMERALD_SP_RESET
     37  f5ee		       8e 1e f0 	      stx	[[KernelB_E_W + 0] + 1]
     38  f5f1		       a2 84		      ldx	#BC_STY
     39  f5f3		       8e 1f f0 	      stx	[[KernelB_F_W + 1] + 0]
     40  f5f6		       a2 1c		      ldx	#EMERALD_SP
     41  f5f8		       8e 20 f0 	      stx	[[KernelB_F_W + 1] + 1]
     42  f5fb		       a2 85		      ldx	#BC_STA
     43  f5fd		       8e 21 f0 	      stx	[[KernelB_G_W + 1] + 0]
     44  f600		       a2 0e		      ldx	#PF1
     45  f602		       8e 22 f0 	      stx	[[KernelB_G_W + 1] + 1]
     46  f605		       a2 08		      ldx	#BC_PHP
     47  f607		       8e 23 f0 	      stx	[[KernelB_H_W + 1] + 0]
     48  f60a		       4c 17 f6 	      jmp	.endif_2
     49  f60d				   .else_2
     50  f60d		       a6 9b		      ldx	RamKernelGemini1
     51  f60f		       8e 22 f0 	      stx	[KernelA_H_W + 0]
     52  f612		       a2 1c		      ldx	#EMERALD_SP
     53  f614		       8e 23 f0 	      stx	[KernelA_H_W + 1]
     54  f617				   .endif_2
     55  f617		       a6 a1		      ldx	RamKernelGemini4
     56  f619		       8e 26 f0 	      stx	[KernelB_J_W + 0]
     57  f61c		       a6 a7		      ldx	BuildKernelGrp0
     58  f61e		       8e 08 f0 	      stx	[[KernelB_VDEL0 - $100] + 0]
     59  f621		       a6 a4		      ldx	BuildKernelX
     60  f623		       86 99		      stx	[RamKernelX + 0]
     61  f625		       a6 a5		      ldx	BuildKernelY
     62  f627		       86 9a		      stx	[RamKernelY + 0]
    571  f629				   .next
    572  f629
    573  f629				   VerticalBlankEnd
    574  f629							; Wait until the end of Vertical blank.
      0  f629					      TIMER_WAIT
      1  f629				   .waittimer
      2  f629		       ad 84 02 	      lda	INTIM
      3  f62c		       d0 fb		      bne	.waittimer
      4  f62e		       85 02		      sta	WSYNC
      0  f630					      ASSERT_RUNTIME	"_scan == #37"
      1  f630				   .COND      SET	"_scan == #37"
 ASSERT: breakif { pc== $f630  && !(  _scan == #37  ) }
      2  f630					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    577  f630
    578  f630							; Save stack pointer
    579  f630		       ba		      tsx
    580  f631		       86 95		      stx	RamStackBkp
    581  f633
    582  f633							; Start rendering the kernel.
    583  f633		       4c ce f7 	      jmp	KernelBorder
    584  f636
    585  f700		       00 00 00 00*	      align	256	; TODO why
    586  f700
    587  f700				   FrameEnd   subroutine
    588  f700		       85 02		      sta	WSYNC
    589  f702
    590  f702							; Blank all background colors.
    591  f702		       a9 00		      lda	#0
    592  f704		       85 08		      sta	COLUPF
    593  f706		       85 0f		      sta	PF2
    594  f708		       85 0e		      sta	PF1
    595  f70a		       85 1c		      sta	EMERALD_SP
    596  f70c
    597  f70c							; Guide lines (2x)
    598  f70c		       a9 02		      lda	#SIGNAL_LINE
    599  f70e		       85 09		      sta	COLUBK
    600  f710					      REPEAT	6
    601  f710		       85 02		      sta	WSYNC
    600  f710					      REPEND
    601  f712		       85 02		      sta	WSYNC
    600  f712					      REPEND
    601  f714		       85 02		      sta	WSYNC
    600  f714					      REPEND
    601  f716		       85 02		      sta	WSYNC
    600  f716					      REPEND
    601  f718		       85 02		      sta	WSYNC
    600  f718					      REPEND
    601  f71a		       85 02		      sta	WSYNC
    602  f71c					      REPEND
    603  f71c		       a9 00		      lda	#$00
    604  f71e		       85 09		      sta	COLUBK
    605  f720
    606  f720							; Restore stack pointer
    607  f720		       a6 95		      ldx	RamStackBkp
    608  f722		       9a		      txs
    609  f723
    610  f723							; Display the rest of the blank screen.
      0  f723					      TIMER_SETUP	25
      1  f723				   .lines     SET	25
      2  f723		       a9 1d		      lda	#(((.lines)*76-14)/64)
      3  f725		       85 02		      sta	WSYNC
      4  f727		       8d 96 02 	      sta	TIM64T
    612  f72a		       85 02		      sta	WSYNC
      0  f72c					      TIMER_WAIT
      1  f72c				   .waittimer
      2  f72c		       ad 84 02 	      lda	INTIM
      3  f72f		       d0 fb		      bne	.waittimer
      4  f731		       85 02		      sta	WSYNC
      0  f733					      ASSERT_RUNTIME	"_scan == (#37 + #192)"
      1  f733				   .COND      SET	"_scan == (#37 + #192)"
 ASSERT: breakif { pc== $f733  && !(  _scan == (#37 + #192)  ) }
      2  f733					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    615  f733
    616  f733							; Overscan
    617  f733				   Overscan   subroutine
    618  f733		       85 01		      sta	VBLANK
      0  f735					      TIMER_SETUP	29
      1  f735				   .lines     SET	29
      2  f735		       a9 22		      lda	#(((.lines)*76-14)/64)
      3  f737		       85 02		      sta	WSYNC
      4  f739		       8d 96 02 	      sta	TIM64T
    620  f73c
    621  f73c		       20 4c f7 	      jsr	MoveJoystick
    622  f73f		       20 83 f7 	      jsr	SpeedCalculation
    623  f742
      0  f742					      TIMER_WAIT
      1  f742				   .waittimer
      2  f742		       ad 84 02 	      lda	INTIM
      3  f745		       d0 fb		      bne	.waittimer
      4  f747		       85 02		      sta	WSYNC
      0  f749					      ASSERT_RUNTIME	"_scan == (#37 + #192 + #29)"
      1  f749				   .COND      SET	"_scan == (#37 + #192 + #29)"
 ASSERT: breakif { pc== $f749  && !(  _scan == (#37 + #192 + #29)  ) }
      2  f749					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    626  f749
    627  f749		       4c e6 f2 	      jmp	VerticalSync
------- FILE main.s
------- FILE game_input.s LEVEL 2 PASS 2
      0  f74c					      include	"game_input.s"
      1  f74c							; Handles input checking. Called from overscan.
      2  f74c
      3  f74c							; Read joystick movement and apply to object 0
      4  f74c				   MoveJoystick
      5  f74c							; Move vertically
      6  f74c							; (up and down are actually reversed since ypos starts at bottom)
      7  f74c							;     ldx YPos
      8  f74c		       a9 10		      lda	#%00010000	;Up?
      9  f74e		       2c 80 02 	      bit	SWCHA
     10  f751		       d0 0d		      bne	SkipMoveUp
     11  f753
     12  f753		       18		      clc
     13  f754		       a5 89		      lda	Speed2
     14  f756		       69 0c		      adc	#12
     15  f758		       85 89		      sta	Speed2
     16  f75a		       a5 88		      lda	Speed1
     17  f75c		       69 00		      adc	#00
     18  f75e		       85 88		      sta	Speed1
     19  f760
     20  f760				   SkipMoveUp
     21  f760		       a6 87		      ldx	XPos
     22  f762
     23  f762							; Only check left/right on odd frames;
     24  f762							; TODO make this just a fractional speed
     25  f762							; rather than dropping frames
     26  f762		       a9 01		      lda	#01
     27  f764		       25 84		      and	FrameCount
     28  f766		       d0 18		      bne	SkipMoveRight
     29  f768
     30  f768
     31  f768							; Move horizontally
     32  f768		       a9 40		      lda	#%01000000	;Left?
     33  f76a		       2c 80 02 	      bit	SWCHA
     34  f76d		       d0 05		      bne	SkipMoveLeft
     35  f76f		       e0 1d		      cpx	#29
     36  f771		       90 01		      bcc	SkipMoveLeft
     37  f773		       ca		      dex
     38  f774
     39  f774							; Reflect
     40  f774							;     lda #$ff
     41  f774							;     sta REFP0
     42  f774				   SkipMoveLeft
     43  f774		       a9 80		      lda	#%10000000	;Right?
     44  f776		       2c 80 02 	      bit	SWCHA
     45  f779		       d0 05		      bne	SkipMoveRight
     46  f77b		       e0 80		      cpx	#128
     47  f77d		       b0 01		      bcs	SkipMoveRight
     48  f77f		       e8		      inx
     49  f780
     50  f780							; Reflect
     51  f780							;     lda #$0
     52  f780							;     sta REFP0
     53  f780				   SkipMoveRight
     54  f780		       86 87		      stx	XPos
     55  f782		       60		      rts
     56  f783
     57  f783
     58  f783				   SpeedCalculation
     59  f783		       38		      sec
     60  f784		       a5 89		      lda	Speed2
     61  f786		       e9 07		      sbc	#7
     62  f788		       85 89		      sta	Speed2
     63  f78a		       a5 88		      lda	Speed1
     64  f78c		       e9 00		      sbc	#0
     65  f78e		       85 88		      sta	Speed1
     66  f790
     67  f790		       18		      clc
     68  f791		       a5 8b		      lda	YPos2
     69  f793		       65 89		      adc	Speed2
     70  f795		       85 8b		      sta	YPos2
     71  f797		       a5 8a		      lda	YPos
     72  f799		       65 88		      adc	Speed1
     73  f79b		       85 8a		      sta	YPos
     74  f79d
     75  f79d		       c9 3e		      cmp	#FLOOR_OFFSET
     76  f79f		       b0 0a		      bcs	NewThing2
     77  f7a1
     78  f7a1							; Reset to floor
     79  f7a1		       a9 3e		      lda	#FLOOR_OFFSET
     80  f7a3		       85 8a		      sta	YPos
     81  f7a5		       a9 00		      lda	#0
     82  f7a7		       85 88		      sta	Speed1
     83  f7a9		       85 89		      sta	Speed2
     84  f7ab				   NewThing2
     85  f7ab
     86  f7ab		       c9 be		      cmp	#CEILING_OFFSET
     87  f7ad		       90 0a		      bcc	.next
     88  f7af
     89  f7af							; Reset to ceiling
     90  f7af		       a9 be		      lda	#CEILING_OFFSET
     91  f7b1		       85 8a		      sta	YPos
     92  f7b3		       a9 00		      lda	#0
     93  f7b5		       85 88		      sta	Speed1
     94  f7b7		       85 89		      sta	Speed2
     95  f7b9				   .next
     96  f7b9		       60		      rts
     97  f7ba
     98  f7ba
     99  f7ba
    100  f7ba							; Subroutine
    101  f7ba				   SetHorizPos
    102  f7ba		       85 02		      sta	WSYNC	; start a new line
    103  f7bc		       24 00		      bit	0	; waste 3 cycles
    104  f7be		       38		      sec		; set carry flag
    105  f7bf				   DivideLoop
    106  f7bf		       e9 0f		      sbc	#15	; subtract 15
    107  f7c1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f7c3		       49 07		      eor	#7	; calculate fine offset
    109  f7c5		       0a		      asl
    110  f7c6		       0a		      asl
    111  f7c7		       0a		      asl
    112  f7c8		       0a		      asl
    113  f7c9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f7cb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f7cd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel_border.s LEVEL 2 PASS 2
      0  f7ce					      include	"kernel_border.s"
      1  f7ce							; Visible Kernel
      2  f7ce
      3  f7ce				   KernelBorder subroutine
      4  f7ce		       85 02		      sta	WSYNC	; ??? Is this needed?
      5  f7d0
      6  f7d0							; First HMOVE
      7  f7d0		       85 2a		      sta	HMOVE
      8  f7d2
      9  f7d2							; Border top
     10  f7d2		       a9 00		      lda	#0
     11  f7d4		       85 08		      sta	COLUPF
     12  f7d6		       85 0e		      sta	PF1
     13  f7d8		       85 0f		      sta	PF2
     14  f7da		       a9 02		      lda	#SIGNAL_LINE
     15  f7dc		       85 09		      sta	COLUBK
     16  f7de
     17  f7de					      REPEAT	6
     18  f7de		       85 02		      sta	WSYNC
     17  f7de					      REPEND
     18  f7e0		       85 02		      sta	WSYNC
     17  f7e0					      REPEND
     18  f7e2		       85 02		      sta	WSYNC
     17  f7e2					      REPEND
     18  f7e4		       85 02		      sta	WSYNC
     17  f7e4					      REPEND
     18  f7e6		       85 02		      sta	WSYNC
     17  f7e6					      REPEND
     18  f7e8		       85 02		      sta	WSYNC
     19  f7ea					      REPEND
     20  f7ea
     21  f7ea		       a9 00		      lda	#0
     22  f7ec		       85 09		      sta	COLUBK
     23  f7ee		       85 02		      sta	WSYNC
     24  f7f0
     25  f7f0							; Start top border
     26  f7f0				   border_top
     27  f7f0							; Make the playfield solid.
     28  f7f0		       a9 3f		      lda	#%00111111
     29  f7f2		       85 0e		      sta	PF1
     30  f7f4		       a9 ff		      lda	#%11111111
     31  f7f6		       85 0f		      sta	PF2
     32  f7f8
     33  f7f8		       a9 42		      lda	#COL_BG
     34  f7fa		       a0 00		      ldy	#0
     35  f7fc
     36  f7fc							; X_XXXX_XX
     37  f7fc							; Commented lines removed to save on space.
     38  f7fc		       85 08		      sta	COLUPF
     39  f7fe		       85 02		      sta	WSYNC
     40  f800		       84 08		      sty	COLUPF
     41  f802		       85 02		      sta	WSYNC
     42  f804		       85 08		      sta	COLUPF
     43  f806		       85 02		      sta	WSYNC
     44  f808							; sta COLUPF
     45  f808		       85 02		      sta	WSYNC
     46  f80a							; sta COLUPF
     47  f80a		       85 02		      sta	WSYNC
     48  f80c		       84 08		      sty	COLUPF
     49  f80e		       85 02		      sta	WSYNC
     50  f810		       85 08		      sta	COLUPF
     51  f812
     52  f812		       85 02		      sta	WSYNC
     53  f814							; sta COLUPF
     54  f814
     55  f814				   PlayArea
     56  f814							; PF is now the playing area
      0  f814					      ASSERT_RUNTIME	"_scycles == #0"
      1  f814				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f814  && !(  _scycles == #0  ) }
      2  f814					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f814					      sleep	61
      1  f814				   .CYCLES    SET	61
      2  f814
      3  f814				  -	      IF	.CYCLES < 2
      4  f814				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f814				  -	      ERR
      6  f814					      ENDIF
      7  f814
      8  f814					      IF	.CYCLES & 1
      9  f814					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f814		       04 00		      nop	0
     11  f816				  -	      ELSE
     12  f816				  -	      bit	VSYNC
     13  f816					      ENDIF
     14  f816				   .CYCLES    SET	.CYCLES - 3
     15  f816					      ENDIF
     16  f816
     17  f816					      REPEAT	.CYCLES / 2
     18  f816		       ea		      nop
     17  f816					      REPEND
     18  f817		       ea		      nop
     17  f817					      REPEND
     18  f818		       ea		      nop
     17  f818					      REPEND
     18  f819		       ea		      nop
     17  f819					      REPEND
     18  f81a		       ea		      nop
     17  f81a					      REPEND
     18  f81b		       ea		      nop
     17  f81b					      REPEND
     18  f81c		       ea		      nop
     17  f81c					      REPEND
     18  f81d		       ea		      nop
     17  f81d					      REPEND
     18  f81e		       ea		      nop
     17  f81e					      REPEND
     18  f81f		       ea		      nop
     17  f81f					      REPEND
     18  f820		       ea		      nop
     17  f820					      REPEND
     18  f821		       ea		      nop
     17  f821					      REPEND
     18  f822		       ea		      nop
     17  f822					      REPEND
     18  f823		       ea		      nop
     17  f823					      REPEND
     18  f824		       ea		      nop
     17  f824					      REPEND
     18  f825		       ea		      nop
     17  f825					      REPEND
     18  f826		       ea		      nop
     17  f826					      REPEND
     18  f827		       ea		      nop
     17  f827					      REPEND
     18  f828		       ea		      nop
     17  f828					      REPEND
     18  f829		       ea		      nop
     17  f829					      REPEND
     18  f82a		       ea		      nop
     17  f82a					      REPEND
     18  f82b		       ea		      nop
     17  f82b					      REPEND
     18  f82c		       ea		      nop
     17  f82c					      REPEND
     18  f82d		       ea		      nop
     17  f82d					      REPEND
     18  f82e		       ea		      nop
     17  f82e					      REPEND
     18  f82f		       ea		      nop
     17  f82f					      REPEND
     18  f830		       ea		      nop
     17  f830					      REPEND
     18  f831		       ea		      nop
     17  f831					      REPEND
     18  f832		       ea		      nop
     19  f833					      REPEND
     59  f833		       a9 00		      lda	#%00000000
     60  f835		       85 0d		      sta	PF0
     61  f837		       a9 20		      lda	#%00100000
     62  f839		       85 0e		      sta	PF1
     63  f83b		       a9 00		      lda	#%00000000
     64  f83d		       85 0f		      sta	PF2
      0  f83f					      ASSERT_RUNTIME	"_scycles == #0"
      1  f83f				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f83f  && !(  _scycles == #0  ) }
      2  f83f					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
      0  f83f					      sleep	7
      1  f83f				   .CYCLES    SET	7
      2  f83f
      3  f83f				  -	      IF	.CYCLES < 2
      4  f83f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f83f				  -	      ERR
      6  f83f					      ENDIF
      7  f83f
      8  f83f					      IF	.CYCLES & 1
      9  f83f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f83f		       04 00		      nop	0
     11  f841				  -	      ELSE
     12  f841				  -	      bit	VSYNC
     13  f841					      ENDIF
     14  f841				   .CYCLES    SET	.CYCLES - 3
     15  f841					      ENDIF
     16  f841
     17  f841					      REPEAT	.CYCLES / 2
     18  f841		       ea		      nop
     17  f841					      REPEND
     18  f842		       ea		      nop
     19  f843					      REPEND
     67  f843		       4c 75 f8 	      jmp	row_start
     68  f846							; enter row on cycle 10.
     69  f846
     70  f846							; reset the background for bottom of playfield
     71  f846				   border_bottom
     72  f846							;sta WSYNC
     73  f846
     74  f846							; Form the bottom of the level frame.
     75  f846		       a9 3f		      lda	#%00111111
     76  f848		       85 0e		      sta	PF1
     77  f84a		       a9 ff		      lda	#%11111111
     78  f84c		       85 0f		      sta	PF2
     79  f84e
     80  f84e							; Clear all sprites.
     81  f84e		       a9 00		      lda	#0
     82  f850		       85 1c		      sta	EMERALD_SP
     83  f852		       85 1b		      sta	JET_SP
     84  f854		       85 1e		      sta	EMERALD_MI_ENABLE
     85  f856
     86  f856		       a9 42		      lda	#COL_BG
     87  f858		       a0 00		      ldy	#0
     88  f85a		       85 02		      sta	WSYNC
     89  f85c
     90  f85c		       84 08		      sty	COLUPF
     91  f85e		       85 02		      sta	WSYNC
     92  f860
     93  f860		       85 08		      sta	COLUPF
     94  f862		       85 02		      sta	WSYNC
     95  f864
     96  f864		       85 02		      sta	WSYNC
     97  f866
     98  f866		       85 02		      sta	WSYNC
     99  f868
    100  f868		       84 08		      sty	COLUPF
    101  f86a		       85 02		      sta	WSYNC
    102  f86c
    103  f86c		       85 08		      sta	COLUPF
    104  f86e		       85 02		      sta	WSYNC
    105  f870		       85 02		      sta	WSYNC
    106  f872		       4c 00 f7 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_row.s LEVEL 2 PASS 2
      0  f875					      include	"kernel_row.s"
      1  f875							; Frame Start
      2  f875
      3  f875							; Macros for calculating sprite values (GRPx).
      4  f875
      5  f875							; Load the player graphics for this scanline using SpriteEnd (3c + 17c)
      6  f875					      mac	kernel_load_player
      7  f875							; expects "lda #SPRITE_HEIGHT" before this ; 3c
      8  f875					      dcp	SpriteEnd	; 5c
      9  f875					      ldy	#0	; 2c
     10  f875							; constant 6c:
     11  f875					      .byte	$b0, $01	; 2c / 3c (taken)  : bcs +01 (skipping 1-byte bit instr)
     12  f875					      .byte	$2c	; 4c / 0c		: bit (skip next two bytes)
     13  f875					      ldy	SpriteEnd
     14  f875							; 4c
     15  f875					      ldx	Frame0,Y
     16  f875					      endm
     17  f875
     18  f875							; mac jet_spritedata_calc
     19  f875							;
     20  f875							; loads the offset from Frame0 in Y, and the sprite value in A, and stores it in
     21  f875							; GRP0.
     22  f875					      mac	jet_spritedata_calc
     23  f875							; loader
     24  f875					      lda	#SPRITE_HEIGHT
     25  f875					      dcp	SpriteEnd
     26  f875					      ldy	SpriteEnd
     27  f875
     28  f875							; 4c
     29  f875							; This must never be 5 cycles This means Frame0 must be aligned and loading
     30  f875							; from Frame0 + Y must never cross a page boundary.
     31  f875					      lda	Frame0,Y
     32  f875							; 6c
     33  f875					      .byte	$b0, $01	;2c / 3c (taken)
     34  f875					      .byte	$2c	; 4c / 0c
     35  f875					      sta	JET_SP	; 0c / 3c
     36  f875					      endm
     37  f875
     38  f875				   row_start
     39  f875
     40  f875							; [scanline 1]
     41  f875				   row_1
     42  f875							; Enter after scanline starts on row "9" and wraps
      0  f875					      ASSERT_RUNTIME	"_scycles == #10"
      1  f875				   .COND      SET	"_scycles == #10"
 ASSERT: breakif { pc== $f875  && !(  _scycles == #10  ) }
      2  f875					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     44  f875
      0  f875					      jet_spritedata_calc
      1  f875
      2  f875		       a9 09		      lda	#SPRITE_HEIGHT
      3  f877		       c7 86		      dcp	SpriteEnd
      4  f879		       a4 86		      ldy	SpriteEnd
      5  f87b
      6  f87b
      7  f87b
      8  f87b
      9  f87b		       b9 00 fb 	      lda	Frame0,Y
     10  f87e
     11  f87e		       b0 01		      .byte.b	$b0, $01
     12  f880		       2c		      .byte.b	$2c
     13  f881		       85 1b		      sta	JET_SP
     46  f883
     47  f883							; [[[Nibble VM.]]]
     48  f883		       85 02		      sta	WSYNC
     49  f885
     50  f885							; sleep 46
     51  f885
      0  f885					      ASSERT_RUNTIME	"_scycles == #0"
      1  f885				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f885  && !(  _scycles == #0  ) }
      2  f885					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     53  f885
     54  f885							; [scanline 2]
     55  f885				   row_2
      0  f885					      jet_spritedata_calc
      1  f885
      2  f885		       a9 09		      lda	#SPRITE_HEIGHT
      3  f887		       c7 86		      dcp	SpriteEnd
      4  f889		       a4 86		      ldy	SpriteEnd
      5  f88b
      6  f88b
      7  f88b
      8  f88b
      9  f88b		       b9 00 fb 	      lda	Frame0,Y
     10  f88e
     11  f88e		       b0 01		      .byte.b	$b0, $01
     12  f890		       2c		      .byte.b	$2c
     13  f891		       85 1b		      sta	JET_SP
     57  f893
     58  f893							; Black out playfield
     59  f893							; TODO This should be done with playfield pixels, not color.
     60  f893		       a9 00		      lda	#0
     61  f895		       85 08		      sta	COLUPF
     62  f897
     63  f897							; Set stack pointer for PHP use from RamKernelPhpTarget.
     64  f897		       a6 98		      ldx	RamKernelPhpTarget
     65  f899		       9a		      txs
     66  f89a
     67  f89a							; [[[Nibble VM.]]]
      0  f89a					      sleep	30
      1  f89a				   .CYCLES    SET	30
      2  f89a
      3  f89a				  -	      IF	.CYCLES < 2
      4  f89a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f89a				  -	      ERR
      6  f89a					      ENDIF
      7  f89a
      8  f89a				  -	      IF	.CYCLES & 1
      9  f89a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f89a				  -	      nop	0
     11  f89a				  -	      ELSE
     12  f89a				  -	      bit	VSYNC
     13  f89a				  -	      ENDIF
     14  f89a				  -.CYCLES    SET	.CYCLES - 3
     15  f89a					      ENDIF
     16  f89a
     17  f89a					      REPEAT	.CYCLES / 2
     18  f89a		       ea		      nop
     17  f89a					      REPEND
     18  f89b		       ea		      nop
     17  f89b					      REPEND
     18  f89c		       ea		      nop
     17  f89c					      REPEND
     18  f89d		       ea		      nop
     17  f89d					      REPEND
     18  f89e		       ea		      nop
     17  f89e					      REPEND
     18  f89f		       ea		      nop
     17  f89f					      REPEND
     18  f8a0		       ea		      nop
     17  f8a0					      REPEND
     18  f8a1		       ea		      nop
     17  f8a1					      REPEND
     18  f8a2		       ea		      nop
     17  f8a2					      REPEND
     18  f8a3		       ea		      nop
     17  f8a3					      REPEND
     18  f8a4		       ea		      nop
     17  f8a4					      REPEND
     18  f8a5		       ea		      nop
     17  f8a5					      REPEND
     18  f8a6		       ea		      nop
     17  f8a6					      REPEND
     18  f8a7		       ea		      nop
     17  f8a7					      REPEND
     18  f8a8		       ea		      nop
     19  f8a9					      REPEND
     69  f8a9
     70  f8a9							; Load PF1 value
     71  f8a9		       a9 a0		      lda	#%10100000
     72  f8ab		       85 96		      sta	RamPF1Value
     73  f8ad
     74  f8ad		       a9 04		      lda	#4
     75  f8af		       8d 96 02 	      sta	TIM64T
     76  f8b2
     77  f8b2							; Enable playfield at end of scanline
     78  f8b2		       a9 42		      lda	#COL_BG
     79  f8b4		       85 08		      sta	COLUPF
     80  f8b6
     81  f8b6							; lda #%00001000
     82  f8b6							; sta REFP1
     83  f8b6
      0  f8b6					      ASSERT_RUNTIME	"_scycles == #0"
      1  f8b6				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f8b6  && !(  _scycles == #0  ) }
      2  f8b6					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
     85  f8b6
     86  f8b6							; [scanline 3]
     87  f8b6				   row_3
      0  f8b6					      jet_spritedata_calc
      1  f8b6
      2  f8b6		       a9 09		      lda	#SPRITE_HEIGHT
      3  f8b8		       c7 86		      dcp	SpriteEnd
      4  f8ba		       a4 86		      ldy	SpriteEnd
      5  f8bc
      6  f8bc
      7  f8bc
      8  f8bc
      9  f8bc		       b9 00 fb 	      lda	Frame0,Y
     10  f8bf
     11  f8bf		       b0 01		      .byte.b	$b0, $01
     12  f8c1		       2c		      .byte.b	$2c
     13  f8c2		       85 1b		      sta	JET_SP
     89  f8c4
     90  f8c4							; Pre-populate graphics.
     91  f8c4		       a9 09		      lda	#SPRITE_HEIGHT
      0  f8c6					      KERNEL_LOAD_PLAYER
      1  f8c6
      2  f8c6		       c7 86		      dcp	SpriteEnd
      3  f8c8		       a0 00		      ldy	#0
      4  f8ca
      5  f8ca		       b0 01		      .byte.b	$b0, $01
      6  f8cc		       2c		      .byte.b	$2c
      7  f8cd		       a4 86		      ldy	SpriteEnd
      8  f8cf
      9  f8cf		       be 00 fb 	      ldx	Frame0,Y
     93  f8d2		       86 97		      stx	RamKernelGRP0
      0  f8d4					      KERNEL_LOAD_PLAYER
      1  f8d4
      2  f8d4		       c7 86		      dcp	SpriteEnd
      3  f8d6		       a0 00		      ldy	#0
      4  f8d8
      5  f8d8		       b0 01		      .byte.b	$b0, $01
      6  f8da		       2c		      .byte.b	$2c
      7  f8db		       a4 86		      ldy	SpriteEnd
      8  f8dd
      9  f8dd		       be 00 fb 	      ldx	Frame0,Y
     95  f8e0		       8e 02 f0 	      stx	[CBSRAM_KERNEL_WRITE + 2]
     96  f8e3		       a5 97		      lda	RamKernelGRP0	; Load sprite 2 into A
      0  f8e5					      sleep	2
      1  f8e5				   .CYCLES    SET	2
      2  f8e5
      3  f8e5				  -	      IF	.CYCLES < 2
      4  f8e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f8e5				  -	      ERR
      6  f8e5					      ENDIF
      7  f8e5
      8  f8e5				  -	      IF	.CYCLES & 1
      9  f8e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f8e5				  -	      nop	0
     11  f8e5				  -	      ELSE
     12  f8e5				  -	      bit	VSYNC
     13  f8e5				  -	      ENDIF
     14  f8e5				  -.CYCLES    SET	.CYCLES - 3
     15  f8e5					      ENDIF
     16  f8e5
     17  f8e5					      REPEAT	.CYCLES / 2
     18  f8e5		       ea		      nop
     19  f8e6					      REPEND
     98  f8e6
     99  f8e6							; [scanlines 4-5]
    100  f8e6							; We jump immediately into scanlines 4-5, the "gem kernel"
    101  f8e6		       a6 99		      ldx	RamKernelX
    102  f8e8		       38		      sec
      0  f8e9					      ASSERT_RUNTIME	"_scycles == #73"
      1  f8e9				   .COND      SET	"_scycles == #73"
 ASSERT: breakif { pc== $f8e9  && !(  _scycles == #73  ) }
      2  f8e9					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    104  f8e9		       4c 03 f1 	      jmp	CBSRAM_KERNEL_ENTRY
    105  f8ec
    106  f8ec							; [scanline 6]
    107  f8ec
    108  f8ec							; Try to avoid page crossing in jet_spritedata_calc
    109  f8ec							; TODO enforce this with ASSERT_RUNTIME instead?
    110  f8f0		       00 00 00 00	      align	16
    111  f8f0
    112  f8f0				   row_after_kernel
    113  f8f0				   row_6
      0  f8f0					      ASSERT_RUNTIME	"_scycles == #0"
      1  f8f0				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f8f0  && !(  _scycles == #0  ) }
      2  f8f0					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    115  f8f0
    116  f8f0							; Cleanup from the kernel.
    117  f8f0		       a9 00		      lda	#0
    118  f8f2		       85 1e		      sta	EMERALD_MI_ENABLE
    119  f8f4		       85 1c		      sta	EMERALD_SP
    120  f8f6		       85 08		      sta	COLUPF
    121  f8f8		       85 26		      sta	VDELP1
    122  f8fa
      0  f8fa					      jet_spritedata_calc
      1  f8fa
      2  f8fa		       a9 09		      lda	#SPRITE_HEIGHT
      3  f8fc		       c7 86		      dcp	SpriteEnd
      4  f8fe		       a4 86		      ldy	SpriteEnd
      5  f900
      6  f900
      7  f900
      8  f900
      9  f900		       b9 00 fb 	      lda	Frame0,Y
     10  f903
     11  f903		       b0 01		      .byte.b	$b0, $01
     12  f905		       2c		      .byte.b	$2c
     13  f906		       85 1b		      sta	JET_SP
    124  f908
    125  f908							; Idle.
    126  f908		       85 02		      sta	WSYNC
    127  f90a
    128  f90a							; [scanline 7]
    129  f90a				   row_7
      0  f90a					      jet_spritedata_calc
      1  f90a
      2  f90a		       a9 09		      lda	#SPRITE_HEIGHT
      3  f90c		       c7 86		      dcp	SpriteEnd
      4  f90e		       a4 86		      ldy	SpriteEnd
      5  f910
      6  f910
      7  f910
      8  f910
      9  f910		       b9 00 fb 	      lda	Frame0,Y
     10  f913
     11  f913		       b0 01		      .byte.b	$b0, $01
     12  f915		       2c		      .byte.b	$2c
     13  f916		       85 1b		      sta	JET_SP
    131  f918
    132  f918		       a9 42		      lda	#COL_BG
    133  f91a		       85 08		      sta	COLUPF
    134  f91c
    135  f91c							; FRAMESWITCH
    136  f91c		       a9 01		      lda	#01
    137  f91e		       25 84		      and	FrameCount
    138  f920		       d0 13		      bne	loadframe2
    139  f922
    140  f922							; Perform gem loading for Kernel A.
    141  f922
    142  f922				   loadframe1
      0  f922					      ASSERT_RUNTIME	"_scycles == #32"
      1  f922				   .COND      SET	"_scycles == #32"
 ASSERT: breakif { pc== $f922  && !(  _scycles == #32  ) }
      2  f922					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    144  f922
    145  f922							; Emerald byte setting 1A
    146  f922							; ldx #0
    147  f922							; lda KERNEL_STORAGE_R,X
    148  f922							; sta GEM_00_W
    149  f922							; inx
    150  f922							; lda KERNEL_STORAGE_R,X
    151  f922							; sta GEM_04_W
    152  f922							; inx
    153  f922							; lda KERNEL_STORAGE_R,X
    154  f922							; sta GEM_09_W
    155  f922							; inx
    156  f922
    157  f922		       85 02		      sta	WSYNC
    158  f924
    159  f924							; [scanline 8]
      0  f924					      jet_spritedata_calc
      1  f924
      2  f924		       a9 09		      lda	#SPRITE_HEIGHT
      3  f926		       c7 86		      dcp	SpriteEnd
      4  f928		       a4 86		      ldy	SpriteEnd
      5  f92a
      6  f92a
      7  f92a
      8  f92a
      9  f92a		       b9 00 fb 	      lda	Frame0,Y
     10  f92d
     11  f92d		       b0 01		      .byte.b	$b0, $01
     12  f92f		       2c		      .byte.b	$2c
     13  f930		       85 1b		      sta	JET_SP
    161  f932
    162  f932							; Emerald byte setting 1B
    163  f932							; lda KERNEL_STORAGE_R,X
    164  f932							; sta GEM_13_W
    165  f932							; inx
    166  f932							; lda KERNEL_STORAGE_R,X
    167  f932							; sta GEM_17_W
    168  f932							; inx
    169  f932							; lda KERNEL_STORAGE_R,X
    170  f932							; sta GEM_18_W
    171  f932							; inx
    172  f932							; lda KERNEL_STORAGE_R,X
    173  f932							; sta GEM_22_W
    174  f932
    175  f932		       4c 48 f9 	      jmp	row_8_end
    176  f935
    177  f935							; Perform gem loading for Kernel B.
    178  f935
    179  f935				   loadframe2
      0  f935					      ASSERT_RUNTIME	"_scycles == #33"
      1  f935				   .COND      SET	"_scycles == #33"
 ASSERT: breakif { pc== $f935  && !(  _scycles == #33  ) }
      2  f935					      echo	"ASSERT:", "breakif { pc==", ., " && !( ", .COND, " ) }"
    181  f935
    182  f935							; Emerald byte setting 2A
    183  f935							; ldx #[storage_02 - storage]
    184  f935							; lda KERNEL_STORAGE_R,X
    185  f935							; sta GEM_02_W
    186  f935							; inx
    187  f935							; lda KERNEL_STORAGE_R,X
    188  f935							; sta GEM_06_W
    189  f935							; inx
    190  f935							; lda KERNEL_STORAGE_R,X
    191  f935							; sta GEM_08_W
    192  f935							; inx
    193  f935
    194  f935		       85 02		      sta	WSYNC
    195  f937
    196  f937							; [scanline 8]
    197  f937				   row_8
      0  f937					      jet_spritedata_calc
      1  f937
      2  f937		       a9 09		      lda	#SPRITE_HEIGHT
      3  f939		       c7 86		      dcp	SpriteEnd
      4  f93b		       a4 86		      ldy	SpriteEnd
      5  f93d
      6  f93d
      7  f93d
      8  f93d
      9  f93d		       b9 00 fb 	      lda	Frame0,Y
     10  f940
     11  f940		       b0 01		      .byte.b	$b0, $01
     12  f942		       2c		      .byte.b	$2c
     13  f943		       85 1b		      sta	JET_SP
    199  f945
    200  f945							; Emerald byte setting 2B
    201  f945							; lda KERNEL_STORAGE_R,X
    202  f945							; sta GEM_11_W
    203  f945							; inx
    204  f945							; lda KERNEL_STORAGE_R,X
    205  f945							; sta GEM_15_W
    206  f945							; inx
    207  f945							; lda KERNEL_STORAGE_R,X
    208  f945							; sta GEM_20_W
    209  f945							; inx
    210  f945							; lda KERNEL_STORAGE_R,X
    211  f945							; sta GEM_24_W
    212  f945
    213  f945		       4c 48 f9 	      jmp	row_8_end
    214  f948
    215  f948							; Common row 8 return.
    216  f948
    217  f948				   row_8_end
    218  f948							; Idle.
    219  f948		       85 02		      sta	WSYNC
    220  f94a
    221  f94a							; [scanline 8]
    222  f94a							; Repeat loop until LoopCount < 0
    223  f94a		       c6 83		      dec	LoopCount
    224  f94c		       30 03		      bmi	row_end
    225  f94e		       4c 75 f8 	      jmp	row_start
    226  f951				   row_end
    227  f951		       4c 46 f8 	      jmp	border_bottom
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f954					      include	"kernel_gem.s"
      1  f954							;
      2  f954							; Gem Kernels
      3  f954							;
      4  f954							; Gems are displayed in alternating kernels. This chart shows
      5  f954							; which kernel is responsible for which gem, with missiles denoted.
      6  f954							;
      7  f954							;  1:	 |SS  SS  MSS  |SS   SS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f954							;  2:	 |  SS	SS   SS|  SSM  SS  SS|	      kernel 2
      9  f954							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f954							;  #	 0^	 8^	  17^	    26^       gem index
     11  f954							;
     12  f954							; The middle bar indicates where the pattern reverses.
     13  f954							;
     14  f954							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f954							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f954							; requires with a single sprite. By alternating sprites each frame with an...
     17  f954							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f954							; line, except for two. These are instead rendered by the missile, which
     19  f954							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f954
     21  f954							; for copying
     22  fa00		       00 00 00 00*	      align	256
     23  fa00
     24  fa00							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     25  fa00							;
     26  fa00							; GEM KERNEL A
     27  fa00							;
     28  fa00
     29  fa00				   kernel_1_start subroutine
     30  fa00					      rorg	$f100
     31  fa00
     32  fa00							; Kernel Marker
     33  fa00		       0a		      .byte.b	$A
     34  fa01
     35  fa01				   KernelA_early
     36  fa01							; Early code to set next GRP0 image. Immediate value is overwritten
     37  fa01		       a9 ff		      lda	#$ff
     38  fa03
     39  fa03				   KernelA    subroutine
      0  fa03					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #0"
      1  fa03				   .KERNEL    SET	$A
      2  fa03				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $a   ) && ! (  _scycles == #0  ) }
      3  fa03					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     41  fa03
     42  fa03							; Write Gemini 0A into delayed sprite register
     43  fa03		       a0 66		      ldy	#%01100110	; TODO temporary?
     44  fa03		       f1 04	   KernelA_VDEL1 =	. - 1
     45  fa05		       84 1c		      sty	EMERALD_SP
     46  fa07							; Write Player from accumulator. When writing to the other sprite, the
     47  fa07							; TIA will copy Gemini 0A into visible sprite register
     48  fa07		       85 1b		      sta	JET_SP
     49  fa09							; Write Gemini 1A into visible sprite register
     50  fa09		       a0 66		      ldy	#%01100110
     51  fa09		       f1 0a	   KernelA_VDEL0 =	. - 1
     52  fa0b		       84 1c		      sty	EMERALD_SP
     53  fa0d		       a0 06		      ldy	#%00000110	; TODO temporary?
     54  fa0d		       f1 0e	   KernelA_STY =	. - 1
     55  fa0f
     56  fa0f							; Need D0 for VDELP1 trigger with PHP
      0  fa0f					      sleep	2
      1  fa0f				   .CYCLES    SET	2
      2  fa0f
      3  fa0f				  -	      IF	.CYCLES < 2
      4  fa0f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa0f				  -	      ERR
      6  fa0f					      ENDIF
      7  fa0f
      8  fa0f				  -	      IF	.CYCLES & 1
      9  fa0f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa0f				  -	      nop	0
     11  fa0f				  -	      ELSE
     12  fa0f				  -	      bit	VSYNC
     13  fa0f				  -	      ENDIF
     14  fa0f				  -.CYCLES    SET	.CYCLES - 3
     15  fa0f					      ENDIF
     16  fa0f
     17  fa0f					      REPEAT	.CYCLES / 2
     18  fa0f		       ea		      nop
     19  fa10					      REPEND
     58  fa10
     59  fa10							; Register config
     60  fa10		       a9 08		      lda	#%00001000
     61  fa12							; sta EMERALD_MI_ENABLE ; disable missile FIXME this should be uncommented!
     62  fa12		       85 0c		      sta	REFP1
     63  fa14
     64  fa14							; 22c is critical start of precise GRP0 timing for Kernel A
      0  fa14					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #22"
      1  fa14				   .KERNEL    SET	$A
      2  fa14				   .COND      SET	"_scycles == #22"
 ASSERT: breakif { pc== $f114  && ( *$f100 ==  $a   ) && ! (  _scycles == #22  ) }
      3  fa14					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     66  fa14				   KernelA_A
     67  fa14		       85 11		      sta	EMERALD_SP_RESET	; RESPx must be strobed on cycle 25c.
     68  fa16
     69  fa16							; vvv RST0
     70  fa16				   KernelA_B
     71  fa16		       a5 96		      lda	RamPF1Value
     72  fa18				   KernelA_C
     73  fa18		       84 26		      sty	VDELP1	; disable delayed sprite
     74  fa1a				   KernelA_D
     75  fa1a							; sty VDELP1 ; Gemini 1A, clear VDELP1. all registers have d0 cleared
      0  fa1a					      sleep	3	; Load PF1 (TODO asymmetrical playfield)
      1  fa1a				   .CYCLES    SET	3
      2  fa1a
      3  fa1a				  -	      IF	.CYCLES < 2
      4  fa1a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa1a				  -	      ERR
      6  fa1a					      ENDIF
      7  fa1a
      8  fa1a					      IF	.CYCLES & 1
      9  fa1a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa1a		       04 00		      nop	0
     11  fa1c				  -	      ELSE
     12  fa1c				  -	      bit	VSYNC
     13  fa1c					      ENDIF
     14  fa1c				   .CYCLES    SET	.CYCLES - 3
     15  fa1c					      ENDIF
     16  fa1c
     17  fa1c				  -	      REPEAT	.CYCLES / 2
     18  fa1c				  -	      nop
     19  fa1c					      REPEND
     77  fa1c				   KernelA_E
     78  fa1c		       85 11		      sta	EMERALD_SP_RESET	; Reset "medium close" NUSIZ repetition
     79  fa1e				   KernelA_F
     80  fa1e		       84 1e		      sty	EMERALD_MI_ENABLE	; Enable the missile (if we use %0xx00110 pattern)
     81  fa20							; sleep 3 ; FIXME This should be uncommented!
     82  fa20				   KernelA_G
     83  fa20		       84 1c		      sty	EMERALD_SP	; Gemini 2A
     84  fa22
     85  fa22				   KernelA_H
     86  fa22		       84 1c		      sty	EMERALD_SP	; Gemini 3A, modified for RST2 along with HMM1
     87  fa24
      0  fa24					      ASSERT_RUNTIME_KERNEL	$A, "c == #1"
      1  fa24				   .KERNEL    SET	$A
      2  fa24				   .COND      SET	"c == #1"
 ASSERT: breakif { pc== $f124  && ( *$f100 ==  $a   ) && ! (  c == #1  ) }
      3  fa24					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
     89  fa24							; RST4 vvv
     90  fa24				   KernelA_I
     91  fa24		       08		      php		; Reset "medium close" NUSIZ repetition
     92  fa25				   KernelA_J		; unchanging
     93  fa25		       85 0e		      sta	PF1	; Write asymmetrical playfield register
     94  fa27				   KernelA_K
     95  fa27		       84 1c		      sty	EMERALD_SP	; Gemini 4A
     96  fa29							; RST4 ^^^
     97  fa29
     98  fa29				   KernelA_L
      0  fa29					      sleep	3	; when possible, sta VDELP0
      1  fa29				   .CYCLES    SET	3
      2  fa29
      3  fa29				  -	      IF	.CYCLES < 2
      4  fa29				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa29				  -	      ERR
      6  fa29					      ENDIF
      7  fa29
      8  fa29					      IF	.CYCLES & 1
      9  fa29					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa29		       04 00		      nop	0
     11  fa2b				  -	      ELSE
     12  fa2b				  -	      bit	VSYNC
     13  fa2b					      ENDIF
     14  fa2b				   .CYCLES    SET	.CYCLES - 3
     15  fa2b					      ENDIF
     16  fa2b
     17  fa2b				  -	      REPEAT	.CYCLES / 2
     18  fa2b				  -	      nop
     19  fa2b					      REPEND
    100  fa2b				   KernelA_M
    101  fa2b		       84 26		      sty	VDELP1	; Gemini 5A ; need a way to skip this vlaue
    102  fa2d
    103  fa2d				   KernelA_N
    104  fa2d				   KernelA_O
      0  fa2d					      sleep	2
      1  fa2d				   .CYCLES    SET	2
      2  fa2d
      3  fa2d				  -	      IF	.CYCLES < 2
      4  fa2d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa2d				  -	      ERR
      6  fa2d					      ENDIF
      7  fa2d
      8  fa2d				  -	      IF	.CYCLES & 1
      9  fa2d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa2d				  -	      nop	0
     11  fa2d				  -	      ELSE
     12  fa2d				  -	      bit	VSYNC
     13  fa2d				  -	      ENDIF
     14  fa2d				  -.CYCLES    SET	.CYCLES - 3
     15  fa2d					      ENDIF
     16  fa2d
     17  fa2d					      REPEAT	.CYCLES / 2
     18  fa2d		       ea		      nop
     19  fa2e					      REPEND
    106  fa2e							; reset stack pointer
    107  fa2e		       68		      pla
    108  fa2f
    109  fa2f							; End visible line
      0  fa2f					      ASSERT_RUNTIME_KERNEL	$A, "_scycles == #67"
      1  fa2f				   .KERNEL    SET	$A
      2  fa2f				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12f  && ( *$f100 ==  $a   ) && ! (  _scycles == #67  ) }
      3  fa2f					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    111  fa2f
    112  fa2f				   KernelA_branch
    113  fa2f		       ad 84 02 	      lda	INTIM
    114  fa32		       d0 cd		      bne	KernelA_early
    115  fa34
    116  fa34		       4c f0 f8 	      jmp	row_after_kernel
    117  fa37
    118  fa37					      rend
    119  fa37				   kernel_1_end
      0  fa37					      ASSERT_SIZE	kernel_1_start, kernel_1_end, $40
      1  fa37				   .STARTA    SET	kernel_1_start
      2  fa37				   .ENDA      SET	kernel_1_end
      3  fa37				   .LEN       SET	$40
      4  fa37				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fa37				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fa37				  -	      err
      7  fa37					      endif
    121  fa37
    122  fa37							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    123  fa37							;
    124  fa37							; GEM KERNEL B
    125  fa37							;
    126  fa37
    127  fa37				   kernel_2_start subroutine
    128  fa37					      rorg	$f100
    129  fa37
    130  fa37							; Kernel Marker
    131  fa37		       0b		      .byte.b	$B
    132  fa38
    133  fa38				   KernelB_early
    134  fa38							; Early code to set next GRP0 image. Value is overwritten
    135  fa38		       a9 ff		      lda	#$ff
    136  fa3a
    137  fa3a				   KernelB    subroutine
      0  fa3a					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #0"
      1  fa3a				   .KERNEL    SET	$B
      2  fa3a				   .COND      SET	"_scycles == #0"
 ASSERT: breakif { pc== $f103  && ( *$f100 ==  $b   ) && ! (  _scycles == #0  ) }
      3  fa3a					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    139  fa3a
    140  fa3a							; Write Gemini 0A into delayed sprite register
    141  fa3a		       84 1c		      sty	EMERALD_SP
    142  fa3c							; Write Player from accumulator. When writing to the other sprite, the
    143  fa3c							; TIA will copy Gemini 0A into visible sprite register
    144  fa3c		       85 1b		      sta	JET_SP
    145  fa3e		       a0 aa		      ldy	#%10101010
    146  fa3e		       f1 08	   KernelB_VDEL0 =	. - 1
    147  fa40							; Write Gemini 1A into delayed sprite register
    148  fa40		       84 1c		      sty	EMERALD_SP
      0  fa42					      sleep	2
      1  fa42				   .CYCLES    SET	2
      2  fa42
      3  fa42				  -	      IF	.CYCLES < 2
      4  fa42				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa42				  -	      ERR
      6  fa42					      ENDIF
      7  fa42
      8  fa42				  -	      IF	.CYCLES & 1
      9  fa42				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa42				  -	      nop	0
     11  fa42				  -	      ELSE
     12  fa42				  -	      bit	VSYNC
     13  fa42				  -	      ENDIF
     14  fa42				  -.CYCLES    SET	.CYCLES - 3
     15  fa42					      ENDIF
     16  fa42
     17  fa42					      REPEAT	.CYCLES / 2
     18  fa42		       ea		      nop
     19  fa43					      REPEND
    150  fa43
    151  fa43							; Register config
    152  fa43		       a9 ff		      lda	#$ff
    153  fa45		       85 1e		      sta	EMERALD_MI_ENABLE	; enable missile
    154  fa47
    155  fa47		       a0 ff		      ldy	#$ff
    156  fa47		       f1 11	   KernelB_STY =	. - 1
    157  fa49
    158  fa49							; Clear bits in processor status register for drawing.
    159  fa49		       18		      clc
    160  fa4a		       24 94		      bit	RamLowerSixByte
    161  fa4c
    162  fa4c							; 25c is critical start of precise GRP0 timing for Kernel B
      0  fa4c					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #25"
      1  fa4c				   .KERNEL    SET	$B
      2  fa4c				   .COND      SET	"_scycles == #25"
 ASSERT: breakif { pc== $f115  && ( *$f100 ==  $b   ) && ! (  _scycles == #25  ) }
      3  fa4c					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    164  fa4c				   KernelB_A
    165  fa4c		       85 11		      sta	EMERALD_SP_RESET
    166  fa4e				   KernelB_B
    167  fa4e							; Load PF1 value into accumulator
    168  fa4e		       a5 96		      lda	RamPF1Value
    169  fa50				   KernelB_C
      0  fa50					      sleep	3
      1  fa50				   .CYCLES    SET	3
      2  fa50
      3  fa50				  -	      IF	.CYCLES < 2
      4  fa50				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa50				  -	      ERR
      6  fa50					      ENDIF
      7  fa50
      8  fa50					      IF	.CYCLES & 1
      9  fa50					      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa50		       04 00		      nop	0
     11  fa52				  -	      ELSE
     12  fa52				  -	      bit	VSYNC
     13  fa52					      ENDIF
     14  fa52				   .CYCLES    SET	.CYCLES - 3
     15  fa52					      ENDIF
     16  fa52
     17  fa52				  -	      REPEAT	.CYCLES / 2
     18  fa52				  -	      nop
     19  fa52					      REPEND
    171  fa52				   KernelB_D
    172  fa52		       86 1c		      stx	EMERALD_SP	; Gemini 1B
    173  fa54
    174  fa54							; below has one php load (could just be RESET)
    175  fa54				   KernelB_E
    176  fa54		       08		      php
    177  fa55				   KernelB_F
    178  fa55		       84 1c		      sty	EMERALD_SP	; Gemini 2B
    179  fa57				   KernelB_G
    180  fa57		       85 0e		      sta	PF1
    181  fa59				   KernelB_H
    182  fa59		       84 1c		      sty	EMERALD_SP	; Gemini 3B; TODO write php instead fixed
    183  fa5b							; above has one PHP load
    184  fa5b
    185  fa5b				   KernelB_I
    186  fa5b		       85 11		      sta	EMERALD_SP_RESET
    187  fa5d				   KernelB_J
    188  fa5d		       84 1c		      sty	EMERALD_SP	; Gemini 4B
    189  fa5f				   KernelB_K
    190  fa5f		       86 1e		      stx	EMERALD_MI_ENABLE
    191  fa61				   KernelB_L
    192  fa61		       86 1c		      stx	EMERALD_SP	; Gemini 5B
    193  fa63
    194  fa63				   KernelB_M
    195  fa63				   KernelB_N
      0  fa63					      sleep	2
      1  fa63				   .CYCLES    SET	2
      2  fa63
      3  fa63				  -	      IF	.CYCLES < 2
      4  fa63				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  fa63				  -	      ERR
      6  fa63					      ENDIF
      7  fa63
      8  fa63				  -	      IF	.CYCLES & 1
      9  fa63				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  fa63				  -	      nop	0
     11  fa63				  -	      ELSE
     12  fa63				  -	      bit	VSYNC
     13  fa63				  -	      ENDIF
     14  fa63				  -.CYCLES    SET	.CYCLES - 3
     15  fa63					      ENDIF
     16  fa63
     17  fa63					      REPEAT	.CYCLES / 2
     18  fa63		       ea		      nop
     19  fa64					      REPEND
    197  fa64
    198  fa64							; reset stack pointer
    199  fa64		       68		      pla
    200  fa65
    201  fa65							; End visible line
      0  fa65					      ASSERT_RUNTIME_KERNEL	$B, "_scycles == #67"
      1  fa65				   .KERNEL    SET	$B
      2  fa65				   .COND      SET	"_scycles == #67"
 ASSERT: breakif { pc== $f12e  && ( *$f100 ==  $b   ) && ! (  _scycles == #67  ) }
      3  fa65					      echo	"ASSERT:", "breakif { pc==", ., " && ( *$f100 == ", .KERNEL, "  ) && ! ( ", .COND, " ) }"
    203  fa65
    204  fa65				   KernelB_branch
    205  fa65		       ad 84 02 	      lda	INTIM
    206  fa68		       d0 ce		      bne	KernelB_early
    207  fa6a		       4c f0 f8 	      jmp	row_after_kernel
    208  fa6d
    209  fa6d					      rend
    210  fa6d				   kernel_2_end
      0  fa6d					      ASSERT_SIZE	kernel_2_start, kernel_2_end, $40
      1  fa6d				   .STARTA    SET	kernel_2_start
      2  fa6d				   .ENDA      SET	kernel_2_end
      3  fa6d				   .LEN       SET	$40
      4  fa6d				  -	      if	[[.ENDA - .STARTA] >= .LEN]
      5  fa6d				  -	      echo	"Error: Exceeded size limit", [.ENDA - .STARTA], "vs", .LEN
      6  fa6d				  -	      err
      7  fa6d					      endif
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  fa6d					      include	"data_sprites.s"
      1  fb00		       00 00 00 00*	      align	256
      2  fb00
      3  fb00							; Player
      4  fb00				   Frame0
      5  fb00		       00		      .byte.b	#%00000000
      6  fb01		       60		      .byte.b	#%01100000
      7  fb02		       60		      .byte.b	#%01100000
      8  fb03		       60		      .byte.b	#%01100000
      9  fb04		       c0		      .byte.b	#%11000000
     10  fb05		       c0		      .byte.b	#%11000000
     11  fb06		       f0		      .byte.b	#%11110000
     12  fb07		       c0		      .byte.b	#%11000000
     13  fb08		       c0		      .byte.b	#%11000000
     14  fb09		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  fb0a					      include	"data_levels.s"
      1  fb10		       00 00 00 00*	      align	8
      2  fb10							; first bit of byte 2 & 3 are unused for simplicity
      3  fb10
      4  fb10				   level_00
      5  fb10		       f0 1f 1f 0f	      .byte.b	%11110000, %00011111, %00011111, %00001111
      6  fb14
      7  fb14				   level_01
      8  fb14		       0a 1e 00 00	      .byte.b	%1010, %0011110, %0000000, %00000000
      9  fb18		       05 1e 00 00	      .byte.b	%0101, %0011110, %0000000, %00000000
     10  fb1c		       02 47 40 00	      .byte.b	%0010, %1000111, %1000000, %00000000
     11  fb20		       01 27 40 00	      .byte.b	%0001, %0100111, %1000000, %00000000
     12  fb24		       00 57 7c 00	      .byte.b	%0000, %1010111, %1111100, %00000000
     13  fb28		       00 28 3c 00	      .byte.b	%0000, %0101000, %0111100, %00000000
     14  fb2c		       00 14 3c 00	      .byte.b	%0000, %0010100, %0111100, %00000000
     15  fb30		       00 0a 3c 00	      .byte.b	%0000, %0001010, %0111100, %00000000
     16  fb34		       00 05 3c 00	      .byte.b	%0000, %0000101, %0111100, %00000000
     17  fb38		       00 02 43 c0	      .byte.b	%0000, %0000010, %1000011, %11000000
     18  fb3c		       00 01 23 c0	      .byte.b	%0000, %0000001, %0100011, %11000000
     19  fb40		       00 00 53 c0	      .byte.b	%0000, %0000000, %1010011, %11000000
     20  fb44		       00 00 2b c0	      .byte.b	%0000, %0000000, %0101011, %11000000
     21  fb48		       00 00 14 3c	      .byte.b	%0000, %0000000, %0010100, %00111100
     22  fb4c		       00 00 0a 3c	      .byte.b	%0000, %0000000, %0001010, %00111100
     23  fb50		       00 00 05 3c	      .byte.b	%0000, %0000000, %0000101, %00111100
     24  fb54		       00 00 02 bc	      .byte.b	%0000, %0000000, %0000010, %10111100
     25  fb58		       0c 00 01 43	      .byte.b	%1100, %0000000, %0000001, %01000011
     26  fb5c		       0c 00 00 a3	      .byte.b	%1100, %0000000, %0000000, %10100011
     27  fb60		       0c 00 00 53	      .byte.b	%1100, %0000000, %0000000, %01010011
     28  fb64		       0c 00 00 2b	      .byte.b	%1100, %0000000, %0000000, %00101011
     29  fb68		       03 60 00 14	      .byte.b	%0011, %1100000, %0000000, %00010100
     30  fb6c		       03 60 00 0a	      .byte.b	%0011, %1100000, %0000000, %00001010
     31  fb70		       03 60 00 05	      .byte.b	%0011, %1100000, %0000000, %00000101
     32  fb74		       0b 60 00 02	      .byte.b	%1011, %1100000, %0000000, %00000010
     33  fb78		       04 1e 00 01	      .byte.b	%0100, %0011110, %0000000, %00000001
     34  fb7c				   level_01_end
     35  fb7c
     36  fb7c
     37  fb7c				   shard_map
     38  fb7c		       40		      .byte.b	%01000000	; [1, 0, 0]
     39  fb7d				   shard_map_end
------- FILE main.s
    125  fb7d
    126  fffc					      org	$fffc
    127  fffc		       09 f2		      .word.w	Start
    128  fffe		       09 f2		      .word.w	Start
