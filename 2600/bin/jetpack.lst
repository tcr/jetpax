------- FILE main.s LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; Global headers
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.s
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.s
------- FILE xmacro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"xmacro.h"
      1  0000 ????
      2  0000 ????						;-------------------------------------------------------
      3  0000 ????						; Usage: TIMER_SETUP lines
      4  0000 ????						; where lines is the number of scanlines to skip (> 2).
      5  0000 ????						; The timer will be set so that it expires before this number
      6  0000 ????						; of scanlines. A WSYNC will be done first.
      7  0000 ????
      8  0000 ????				      MAC	timer_setup
      9  0000 ????			   .lines     SET	{1}
     10  0000 ????				      lda	#(((.lines-1)*76-14)/64)
     11  0000 ????				      sta	WSYNC
     12  0000 ????				      sta	TIM64T
     13  0000 ????				      ENDM
     14  0000 ????
     15  0000 ????						;-------------------------------------------------------
     16  0000 ????						; Use with TIMER_SETUP to wait for timer to complete.
     17  0000 ????						; You may want to do a WSYNC afterwards, since the timer
     18  0000 ????						; is not accurate to the beginning/end of a scanline.
     19  0000 ????
     20  0000 ????				      MAC	timer_wait
     21  0000 ????			   .waittimer
     22  0000 ????				      lda	INTIM
     23  0000 ????				      bne	.waittimer
     24  0000 ????				      ENDM
     25  0000 ????
------- FILE main.s
------- FILE vars.h LEVEL 2 PASS 2
      0  0000 ????				      include	"vars.h"
      1 U008f ????				      seg.u	Variables
      2 U0080					      org	$80
      3 U0080
      4 U0080		       00	   Temp       byte.b
      5 U0081
      6 U0081							; Counters
      7 U0081		       00	   RowCount   byte.b
      8 U0082		       00	   LoopCount  byte.b
      9 U0083		       00	   FrameCount byte.b
     10 U0084
     11 U0084		       00	   YP1	      byte.b
     12 U0085		       00	   SpriteEnd  byte.b
     13 U0086		       00	   XPos       byte.b		; X position of player sprite
     14 U0087
     15 U0087
     16 U0087		       00	   Speed1     byte.b
     17 U0088		       00	   Speed2     byte.b
     18 U0089
     19 U0089		       00	   YPos       byte.b		; Y position of player sprite
     20 U008a		       00	   YPos2      byte.b
     21 U008b
     22 U008b		       00	   GEM_02_TARGET byte.b
     23 U008c
     24 U008c		       00	   JMP_ADDR   byte.b
     25 U008d		       00	   JMP_ADDR_2 byte.b
     26 U008e
     27 U008e		       00	   ROW_DEMO_INDEX byte.b
     28 U008f
     29 U008f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     30 U008f
     31 U008f		       00 10	   ROW_COUNT  equ	16
     32 U008f
     33 U008f		       00 02	   SIGNAL_LINE equ	$02
     34 U008f
     35 U008f		       11 00	   KERNEL_START equ	$1100
     36 U008f
     37 U008f		       10 40	   KERNEL_STORAGE_W equ	$1040	; could be max(frame_1_end, frame_2_end)
     38 U008f		       11 40	   KERNEL_STORAGE_R equ	$1140
     39 U008f
     40 U008f							; Sprites
     41 U008f
     42 U008f							; Nusiz
     43 U008f		       00 13	   THREE_COPIES equ	%00010011
     44 U008f
     45 U008f							; Frame 1 sprites
     46 U008f		       00 60	   EMR1       equ	%01100000
     47 U008f		       00 06	   EMR2       equ	%00000110
     48 U008f		       00 66	   EMR3       equ	%01100110
     49 U008f
     50 U008f							; Frame 2 sprites
     51 U008f		       00 c0	   T1	      equ	%11000000
     52 U008f		       00 0c	   T2	      equ	%00001100
     53 U008f		       00 cc	   T3	      equ	%11001100
     54 U008f
     55 U008f							; Shorthands
     56 U008f
     57 U008f		       00 87	   SET_0_0    equ	$87	; SAX (AXS)
     58 U008f		       00 85	   SET_1_0    equ	$85	; STA
     59 U008f		       00 86	   SET_0_1    equ	$86	; STX
     60 U008f		       00 84	   SET_1_1    equ	$84	; STY
     61 U008f
     62 U008f		       00 86	   SET_0_L    equ	$86	; STX
     63 U008f		       00 85	   SET_1_L    equ	$85	; STA
     64 U008f
     65 U008f		       00 85	   SET_0_R    equ	$85	; STA
     66 U008f		       00 84	   SET_1_R    equ	$84	; STY
     67 U008f
     68 U008f							; Gem enabling/disabling globally
     69 U008f
     70 U008f							; ; all off
     71 U008f							; GEM_00 equ SET_0_0
     72 U008f							; GEM_02 equ SET_0_0
     73 U008f							; GEM_04 equ SET_0_0
     74 U008f							; GEM_06 equ SET_0_0
     75 U008f							; GEM_08 equ SET_0_L
     76 U008f							; GEM_09 equ SET_0_0
     77 U008f							; GEM_11 equ SET_0_0
     78 U008f							; GEM_13 equ SET_0_0
     79 U008f							; GEM_15 equ SET_0_0
     80 U008f							; GEM_17 equ SET_0_R
     81 U008f							; GEM_18 equ SET_0_0
     82 U008f							; GEM_20 equ SET_0_0
     83 U008f							; GEM_22 equ SET_0_0
     84 U008f							; GEM_24 equ SET_0_0
     85 U008f
     86 U008f							; all on
     87 U008f		       00 84	   GEM_00     equ	SET_1_1
     88 U008f		       00 84	   GEM_02     equ	SET_1_1
     89 U008f		       00 84	   GEM_04     equ	SET_1_1
     90 U008f		       00 84	   GEM_06     equ	SET_1_1
     91 U008f		       00 85	   GEM_08     equ	SET_1_L
     92 U008f		       00 84	   GEM_09     equ	SET_1_1
     93 U008f		       00 84	   GEM_11     equ	SET_1_1
     94 U008f		       00 84	   GEM_13     equ	SET_1_1
     95 U008f		       00 84	   GEM_15     equ	SET_1_1
     96 U008f		       00 84	   GEM_17     equ	SET_1_R
     97 U008f		       00 84	   GEM_18     equ	SET_1_1
     98 U008f		       00 84	   GEM_20     equ	SET_1_1
     99 U008f		       00 84	   GEM_22     equ	SET_1_1
    100 U008f		       00 84	   GEM_24     equ	SET_1_1
    101 U008f
    102 U008f							; ; odd on
    103 U008f							; GEM_00 equ SET_1_0
    104 U008f							; GEM_02 equ SET_1_0
    105 U008f							; GEM_04 equ SET_1_0
    106 U008f							; GEM_06 equ SET_1_0
    107 U008f							; GEM_08 equ SET_1_L
    108 U008f							; GEM_09 equ SET_0_1
    109 U008f							; GEM_11 equ SET_0_1
    110 U008f							; GEM_13 equ SET_0_1
    111 U008f							; GEM_15 equ SET_0_1
    112 U008f							; GEM_17 equ SET_0_R
    113 U008f							; GEM_18 equ SET_1_0
    114 U008f							; GEM_20 equ SET_1_0
    115 U008f							; GEM_22 equ SET_1_0
    116 U008f							; GEM_24 equ SET_1_0
    117 U008f
    118 U008f							; ; even on
    119 U008f							; GEM_00 equ SET_0_1
    120 U008f							; GEM_02 equ SET_0_1
    121 U008f							; GEM_04 equ SET_0_1
    122 U008f							; GEM_06 equ SET_0_1
    123 U008f							; GEM_08 equ SET_0_L
    124 U008f							; GEM_09 equ SET_1_0
    125 U008f							; GEM_11 equ SET_1_0
    126 U008f							; GEM_13 equ SET_1_0
    127 U008f							; GEM_15 equ SET_1_0
    128 U008f							; GEM_17 equ SET_1_R
    129 U008f							; GEM_18 equ SET_0_1
    130 U008f							; GEM_20 equ SET_0_1
    131 U008f							; GEM_22 equ SET_0_1
    132 U008f							; GEM_24 equ SET_0_1
    133 U008f
    134 U008f							; Colors
    135 U008f
    136 U008f		       00 42	   COL_BG     equ	$42
    137 U008f		       00 cc	   COL_EMERALD equ	$CC
    138 U008f		       00 cc	   COL_EMERALD_2 equ	$CC
    139 U008f
    140 U008f							; HMOVE values
    141 U008f
    142 U008f		       00 27	   EMERALD_MI_HMOVE_S equ	39
    143 U008f		       00 d0	   EMERALD_MI_HMOVE_2 equ	$d0
    144 U008f		       00 10	   EMERALD_MI_HMOVE_3 equ	$10
    145 U008f
    146 U008f							; Sprite details
    147 U008f
    148 U008f		       00 09	   SPRITE_HEIGHT equ	9
    149 U008f
    150 U008f
    151 U008f		       00 07	   EMERALD_SP_COLOR equ	COLUP1
    152 U008f		       00 1c	   EMERALD_SP equ	GRP1
    153 U008f		       00 1e	   EMERALD_MI_ENABLE equ	ENAM1
    154 U008f		       00 11	   EMERALD_SP_RESET equ	RESP1
    155 U008f		       00 13	   EMERALD_MI_RESET equ	RESM1
    156 U008f		       00 21	   EMERALD_SP_HMOVE equ	HMP1
    157 U008f		       00 23	   EMERALD_MI_HMOVE equ	HMM1
    158 U008f		       00 05	   EMERALD_COPIES equ	NUSIZ1
    159 U008f
    160 U008f		       00 1b	   JET_SP     equ	GRP0
    161 U008f		       00 10	   JET_SP_RESET equ	RESP0
    162 U008f		       00 20	   JET_SP_HMOVE equ	HMP0
    163 U008f		       00 06	   JET_SP_COLOR equ	COLUP0
    164 U008f
    165 U008f
    166 U008f							; Offset from the sprite label to the point
    167 U008f							; at which the sprite actually starts. This is the 0-padding
    168 U008f							; FRAME_OFFSET equ 53
    169 U008f
    170 U008f							; Spriteend is HEIGHT_OFFSET - YPos
    171 U008f		       00 c8	   HEIGHT_OFFSET equ	200
    172 U008f
    173 U008f							; Compared with YPos
    174 U008f		       00 43	   FLOOR_OFFSET equ	67
    175 U008f		       00 bf	   CEILING_OFFSET equ	191
    176 U008f
    177 U008f							; YPos definite position
    178 U008f		       00 64	   YPosStart  equ	100
------- FILE main.s
------- FILE sprites.h LEVEL 2 PASS 2
      0 U008f					      include	"sprites.h"
      1 U008f							; Macros for calculating sprite values (GRPx).
      2 U008f
      3 U008f					      MAC	jet_spritedata_calc_nosta
      4 U008f							; loader
      5 U008f					      dcp	SpriteEnd
      6 U008f
      7 U008f							; 4c
      8 U008f							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
      9 U008f							; 6c
     10 U008f					      ldy	#0
     11 U008f					      .byte	$b0, $01	;2c / 3c (taken)
     12 U008f					      .byte	$2c	; 4c / 0c
     13 U008f					      ldy	SpriteEnd
     14 U008f
     15 U008f					      ENDM
     16 U008f
     17 U008f					      MAC	jet_spritedata_calc
     18 U008f							; loader
     19 U008f					      lda	#SPRITE_HEIGHT
     20 U008f					      dcp	SpriteEnd
     21 U008f					      ldy	SpriteEnd
     22 U008f
     23 U008f							; 4c
     24 U008f							; This must never be 5 cycles This mean Frame0 + Y must not cross below apage boundary.
     25 U008f					      lda	Frame0,Y
     26 U008f							; 6c
     27 U008f					      .byte	$b0, $01	;2c / 3c (taken)
     28 U008f					      .byte	$2c	; 4c / 0c
     29 U008f					      sta	JET_SP	; 0c / 3c
     30 U008f
     31 U008f					      ENDM
------- FILE main.s
      9 U008f
     10 U008f							; Bank 1
     11  e000 ????				      seg	CodeBank1
     12  d000					      org	$D000
     13  d000					      rorg	$F000
     14  d000		       00	   BANK1      byte.b
     15  d200					      org	$d200
     16  d200					      rorg	$d200
     17  d200				   Bank1Start
     18  d200		       ad fa ff 	      lda	$fffa
     19  d203		       ea		      nop
     20  d204		       ea		      nop
     21  d205		       ea		      nop
     22  d206
     23  dffc					      org	$dffc
     24  dffc					      rorg	$fffc
     25  dffc		       00 d2		      .word.w	Bank1Start
     26  dffe		       00 d2		      .word.w	Bank1Start
     27  e000
     28  e000							; Bank 2
     29  f000 ????				      seg	CodeBank2
     30  e000					      org	$E000
     31  e000					      rorg	$F000
     32  e000		       00	   BANK2      byte.b
     33  e200					      org	$e200
     34  e200					      rorg	$f200
     35  e200				   Bank2Start
     36  e200		       ad fa ff 	      lda	$fffa
     37  e203		       ea		      nop
     38  e204		       ea		      nop
     39  e205		       ea		      nop
     40  e206
     41  effc					      org	$effc
     42  effc					      rorg	$fffc
     43  effc		       00 f2		      .word.w	Bank2Start
     44  effe		       00 f2		      .word.w	Bank2Start
     45  f000
     46  f000							; Bank 3
     47  10000 ????				       seg	CodeBank3
     48  f000					      org	$F000
     49  f000					      rorg	$F000
     50  f000		       00	   BANK3      byte.b
     51  f200					      org	$f200
     52  f200					      rorg	$f200
     53  f200				   Bank3Start
     54  f200		       ad fa ff 	      lda	$fffa
     55  f203		       ea		      nop
     56  f204		       ea		      nop
     57  f205		       ea		      nop
     58  f206		       4c 09 f2 	      jmp	Start
     59  f209
     60  f209							; Bank 3 source code
------- FILE init.s LEVEL 2 PASS 2
      0  f209					      include	"init.s"
      1  f209							; Game Initialization after power on or reset
      2  f209
      3  f209				   Start
      0  f209					      CLEAN_START
      1  f209		       78		      sei
      2  f20a		       d8		      cld
      3  f20b
      4  f20b		       a2 00		      ldx	#0
      5  f20d		       8a		      txa
      6  f20e		       a8		      tay
      7  f20f		       ca	   .CLEAR_STACK dex
      8  f210		       9a		      txs
      9  f211		       48		      pha
     10  f212		       d0 fb		      bne	.CLEAR_STACK
     11  f214
      5  f214		       a9 00		      lda	#0
      6  f216		       85 83		      sta	FrameCount
      7  f218
      8  f218							; P0 has three copies
      9  f218		       a9 13		      lda	#%00010011
     10  f21a		       85 05		      sta	EMERALD_COPIES
     11  f21c
     12  f21c		       a9 00		      lda	#$00
     13  f21e		       85 09		      sta	COLUBK
     14  f220		       a9 01		      lda	#%00000001
     15  f222		       85 0a		      sta	CTRLPF	; reflect playfield
     16  f224
     17  f224							; Disable VDEL
     18  f224		       a9 00		      lda	#0
     19  f226		       85 25		      sta	VDELP0
     20  f228		       85 26		      sta	VDELP1
     21  f22a
     22  f22a
     23  f22a							; Player 0
     24  f22a		       a2 cc		      ldx	#COL_EMERALD
     25  f22c		       86 07		      stx	EMERALD_SP_COLOR
     26  f22e
     27  f22e							; Player 1
     28  f22e		       a9 0f		      lda	#$0f
     29  f230		       85 06		      sta	JET_SP_COLOR
     30  f232		       a9 00		      lda	#$00
     31  f234		       85 1b		      sta	JET_SP
     32  f236
     33  f236							; Positions
     34  f236		       a9 64		      lda	#YPosStart
     35  f238		       85 89		      sta	YPos
     36  f23a		       a9 37		      lda	#55
     37  f23c		       85 86		      sta	XPos
     38  f23e		       a9 00		      lda	#0
     39  f240		       85 87		      sta	Speed1
     40  f242		       85 88		      sta	Speed2
     41  f244		       85 8a		      sta	YPos2
     42  f246
     43  f246		       a9 00		      lda	#0
     44  f248		       85 8e		      sta	ROW_DEMO_INDEX
     45  f24a		       4c 6f f3 	      jmp	FrameStart
------- FILE main.s
------- FILE loader.s LEVEL 2 PASS 2
      0  f24d					      include	"loader.s"
      1  f24d							; Copies the gem kernel to RAM
      2  f24d
      3  f24d					      mac	emeralds_two
      4  f24d				   .target    SET	{1}
      5  f24d					      ldx	#%11
      6  f24d					      .byte	$CB, $0	; axs
      7  f24d					      ldy	map_full,X
      8  f24d					      sty	[.target - storage + KERNEL_STORAGE_W]
      9  f24d					      ror
     10  f24d					      ror
     11  f24d					      endm
     12  f24d
     13  f24d					      mac	emeralds_two_skip
     14  f24d					      ror
     15  f24d					      ror
     16  f24d					      endm
     17  f24d
     18  f24d					      mac	emeralds_one
     19  f24d				   .target    SET	{1}
     20  f24d				   .source    SET	{2}
     21  f24d					      tax
     22  f24d					      and	#%1
     23  f24d					      tay
     24  f24d					      lda	.source,Y
     25  f24d					      sta	[.target - storage + KERNEL_STORAGE_W]
     26  f24d					      txa
     27  f24d					      ror
     28  f24d					      endm
     29  f24d
     30  f24d					      mac	emeralds_one_skip
     31  f24d					      ror
     32  f24d					      endm
     33  f24d
     34  f24d
     35  f24d							; Map
     36  f24d
     37  f250		       00 00 00 	      align	8
     38  f250				   map_full
     39  f250		       87		      .byte.b	SET_0_0	; 00
     40  f251		       86		      .byte.b	SET_0_1	; 01
     41  f252		       85		      .byte.b	SET_1_0	; 10
     42  f253		       84		      .byte.b	SET_1_1	; 11
     43  f254				   map_missle_l
     44  f254		       86		      .byte.b	SET_0_L	; 0
     45  f255		       85		      .byte.b	SET_1_L	; 1
     46  f256				   map_missle_r
     47  f256		       85		      .byte.b	SET_0_R	; 0
     48  f257		       84		      .byte.b	SET_1_R	; 1
     49  f258
     50  f258
     51  f258							; Frame Copying
     52  f258
     53  f258				   CopyFrame  subroutine
     54  f258							; FRAMESWITCH
     55  f258		       a9 01		      lda	#01
     56  f25a		       25 83		      and	FrameCount
     57  f25c		       f0 03		      beq	CopyFrame1Kernel
     58  f25e		       4c e8 f2 	      jmp	CopyFrame2Kernel
     59  f261
     60  f261							; Copy: KERNEL 1
     61  f261				   CopyFrame1Kernel subroutine
     62  f261		       a0 2d		      ldy	#(kernel_1_end - kernel_1_start)-1
     63  f263				   .loop
     64  f263		       b9 00 f7 	      lda	kernel_1_start,Y
     65  f266		       99 00 10 	      sta	$1000,Y
     66  f269		       88		      dey
     67  f26a		       d0 f7		      bne	.loop
     68  f26c		       ad 00 f7 	      lda	kernel_1_start
     69  f26f		       8d 00 10 	      sta	$1000
     70  f272
     71  f272		       a6 8e		      ldx	ROW_DEMO_INDEX
     72  f274		       bd 27 f8 	      lda	map_emeralds+3,X
      0  f277					      EMERALDS_TWO_SKIP
      1  f277		       6a		      ror
      2  f278		       6a		      ror
      0  f279					      EMERALDS_TWO	storage_22
      1  f279				   .target    SET	storage_22
      2  f279		       a2 03		      ldx	#%11
      3  f27b		       cb 00		      .byte.b	$CB, $0
      4  f27d		       bc 50 f2 	      ldy	map_full,X
      5  f280		       8c 46 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f283		       6a		      ror
      7  f284		       6a		      ror
      0  f285					      EMERALDS_TWO_SKIP
      1  f285		       6a		      ror
      2  f286		       6a		      ror
      0  f287					      EMERALDS_TWO	storage_18
      1  f287				   .target    SET	storage_18
      2  f287		       a2 03		      ldx	#%11
      3  f289		       cb 00		      .byte.b	$CB, $0
      4  f28b		       bc 50 f2 	      ldy	map_full,X
      5  f28e		       8c 45 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f291		       6a		      ror
      7  f292		       6a		      ror
     77  f293
     78  f293		       a6 8e		      ldx	ROW_DEMO_INDEX
     79  f295		       bd 26 f8 	      lda	map_emeralds+2,X
      0  f298					      EMERALDS_ONE	storage_17, map_missle_r
      1  f298				   .target    SET	storage_17
      2  f298				   .source    SET	map_missle_r
      3  f298		       aa		      tax
      4  f299		       29 01		      and	#%1
      5  f29b		       a8		      tay
      6  f29c		       b9 56 f2 	      lda	.source,Y
      7  f29f		       8d 44 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f2a2		       8a		      txa
      9  f2a3		       6a		      ror
      0  f2a4					      EMERALDS_TWO_SKIP
      1  f2a4		       6a		      ror
      2  f2a5		       6a		      ror
      0  f2a6					      EMERALDS_TWO	storage_13
      1  f2a6				   .target    SET	storage_13
      2  f2a6		       a2 03		      ldx	#%11
      3  f2a8		       cb 00		      .byte.b	$CB, $0
      4  f2aa		       bc 50 f2 	      ldy	map_full,X
      5  f2ad		       8c 43 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f2b0		       6a		      ror
      7  f2b1		       6a		      ror
      0  f2b2					      EMERALDS_TWO_SKIP
      1  f2b2		       6a		      ror
      2  f2b3		       6a		      ror
     84  f2b4
     85  f2b4		       a6 8e		      ldx	ROW_DEMO_INDEX
     86  f2b6		       bd 25 f8 	      lda	map_emeralds+1,X
      0  f2b9					      EMERALDS_TWO	storage_09
      1  f2b9				   .target    SET	storage_09
      2  f2b9		       a2 03		      ldx	#%11
      3  f2bb		       cb 00		      .byte.b	$CB, $0
      4  f2bd		       bc 50 f2 	      ldy	map_full,X
      5  f2c0		       8c 42 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f2c3		       6a		      ror
      7  f2c4		       6a		      ror
      0  f2c5					      EMERALDS_ONE_SKIP
      1  f2c5		       6a		      ror
      0  f2c6					      EMERALDS_TWO_SKIP
      1  f2c6		       6a		      ror
      2  f2c7		       6a		      ror
      0  f2c8					      EMERALDS_TWO	storage_04
      1  f2c8				   .target    SET	storage_04
      2  f2c8		       a2 03		      ldx	#%11
      3  f2ca		       cb 00		      .byte.b	$CB, $0
      4  f2cc		       bc 50 f2 	      ldy	map_full,X
      5  f2cf		       8c 41 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f2d2		       6a		      ror
      7  f2d3		       6a		      ror
     91  f2d4
     92  f2d4		       a6 8e		      ldx	ROW_DEMO_INDEX
     93  f2d6		       bd 24 f8 	      lda	map_emeralds+0,X
      0  f2d9					      EMERALDS_TWO_SKIP
      1  f2d9		       6a		      ror
      2  f2da		       6a		      ror
      0  f2db					      EMERALDS_TWO	storage_00
      1  f2db				   .target    SET	storage_00
      2  f2db		       a2 03		      ldx	#%11
      3  f2dd		       cb 00		      .byte.b	$CB, $0
      4  f2df		       bc 50 f2 	      ldy	map_full,X
      5  f2e2		       8c 40 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f2e5		       6a		      ror
      7  f2e6		       6a		      ror
     96  f2e7
     97  f2e7		       60		      rts
     98  f2e8
     99  f2e8							; Copy: KERNEL 2
    100  f2e8				   CopyFrame2Kernel subroutine
    101  f2e8		       a0 2d		      ldy	#(kernel_2_end - kernel_2_start)-1
    102  f2ea				   .loop
    103  f2ea		       b9 2e f7 	      lda	kernel_2_start,Y
    104  f2ed		       99 00 10 	      sta	$1000,Y
    105  f2f0		       88		      dey
    106  f2f1		       d0 f7		      bne	.loop
    107  f2f3		       ad 2e f7 	      lda	kernel_2_start
    108  f2f6		       8d 00 10 	      sta	$1000
    109  f2f9
    110  f2f9		       a6 8e		      ldx	ROW_DEMO_INDEX
    111  f2fb		       bd 27 f8 	      lda	map_emeralds+3,X
      0  f2fe					      EMERALDS_TWO	storage_24
      1  f2fe				   .target    SET	storage_24
      2  f2fe		       a2 03		      ldx	#%11
      3  f300		       cb 00		      .byte.b	$CB, $0
      4  f302		       bc 50 f2 	      ldy	map_full,X
      5  f305		       8c 4d 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f308		       6a		      ror
      7  f309		       6a		      ror
      0  f30a					      EMERALDS_TWO_SKIP
      1  f30a		       6a		      ror
      2  f30b		       6a		      ror
      0  f30c					      EMERALDS_TWO	storage_20
      1  f30c				   .target    SET	storage_20
      2  f30c		       a2 03		      ldx	#%11
      3  f30e		       cb 00		      .byte.b	$CB, $0
      4  f310		       bc 50 f2 	      ldy	map_full,X
      5  f313		       8c 4c 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f316		       6a		      ror
      7  f317		       6a		      ror
      0  f318					      EMERALDS_TWO_SKIP
      1  f318		       6a		      ror
      2  f319		       6a		      ror
    116  f31a
    117  f31a		       a6 8e		      ldx	ROW_DEMO_INDEX
    118  f31c		       bd 26 f8 	      lda	map_emeralds+2,X
      0  f31f					      EMERALDS_ONE_SKIP
      1  f31f		       6a		      ror
      0  f320					      EMERALDS_TWO	storage_15
      1  f320				   .target    SET	storage_15
      2  f320		       a2 03		      ldx	#%11
      3  f322		       cb 00		      .byte.b	$CB, $0
      4  f324		       bc 50 f2 	      ldy	map_full,X
      5  f327		       8c 4b 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f32a		       6a		      ror
      7  f32b		       6a		      ror
      0  f32c					      EMERALDS_TWO_SKIP
      1  f32c		       6a		      ror
      2  f32d		       6a		      ror
      0  f32e					      EMERALDS_TWO	storage_11
      1  f32e				   .target    SET	storage_11
      2  f32e		       a2 03		      ldx	#%11
      3  f330		       cb 00		      .byte.b	$CB, $0
      4  f332		       bc 50 f2 	      ldy	map_full,X
      5  f335		       8c 4a 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f338		       6a		      ror
      7  f339		       6a		      ror
    123  f33a
    124  f33a		       a6 8e		      ldx	ROW_DEMO_INDEX
    125  f33c		       bd 25 f8 	      lda	map_emeralds+1,X
      0  f33f					      EMERALDS_TWO_SKIP
      1  f33f		       6a		      ror
      2  f340		       6a		      ror
      0  f341					      EMERALDS_ONE	storage_08, map_missle_l
      1  f341				   .target    SET	storage_08
      2  f341				   .source    SET	map_missle_l
      3  f341		       aa		      tax
      4  f342		       29 01		      and	#%1
      5  f344		       a8		      tay
      6  f345		       b9 54 f2 	      lda	.source,Y
      7  f348		       8d 49 10 	      sta	[.target - storage + KERNEL_STORAGE_W]
      8  f34b		       8a		      txa
      9  f34c		       6a		      ror
      0  f34d					      EMERALDS_TWO	storage_06
      1  f34d				   .target    SET	storage_06
      2  f34d		       a2 03		      ldx	#%11
      3  f34f		       cb 00		      .byte.b	$CB, $0
      4  f351		       bc 50 f2 	      ldy	map_full,X
      5  f354		       8c 48 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f357		       6a		      ror
      7  f358		       6a		      ror
      0  f359					      EMERALDS_TWO_SKIP
      1  f359		       6a		      ror
      2  f35a		       6a		      ror
    130  f35b
    131  f35b		       a6 8e		      ldx	ROW_DEMO_INDEX
    132  f35d		       bd 24 f8 	      lda	map_emeralds+0,X
      0  f360					      EMERALDS_TWO	storage_02
      1  f360				   .target    SET	storage_02
      2  f360		       a2 03		      ldx	#%11
      3  f362		       cb 00		      .byte.b	$CB, $0
      4  f364		       bc 50 f2 	      ldy	map_full,X
      5  f367		       8c 47 10 	      sty	[.target - storage + KERNEL_STORAGE_W]
      6  f36a		       6a		      ror
      7  f36b		       6a		      ror
      0  f36c					      EMERALDS_TWO_SKIP
      1  f36c		       6a		      ror
      2  f36d		       6a		      ror
    135  f36e
    136  f36e		       60		      rts
------- FILE main.s
------- FILE frame.s LEVEL 2 PASS 2
      0  f36f					      include	"frame.s"
      1  f36f							; Frame loop, including calling out to other kernels.
      2  f36f
      3  f36f				   FrameStart subroutine
      4  f36f
      5  f36f							; Vertical Sync
      6  f36f				   VerticalSync subroutine
      0  f36f					      VERTICAL_SYNC
      1  f36f		       a9 0e		      lda	#%1110
      2  f371		       85 02	   .VSLP1     sta	WSYNC
      3  f373		       85 00		      sta	VSYNC
      4  f375		       4a		      lsr
      5  f376		       d0 f9		      bne	.VSLP1
      8  f378
      0  f378					      TIMER_SETUP	37
      1  f378				   .lines     SET	37
      2  f378		       a9 2a		      lda	#(((.lines-1)*76-14)/64)
      3  f37a		       85 02		      sta	WSYNC
      4  f37c		       8d 96 02 	      sta	TIM64T
     10  f37f
     11  f37f							; Scanline counter
     12  f37f		       a9 10		      lda	#ROW_COUNT
     13  f381		       85 82		      sta	LoopCount
     14  f383
     15  f383							; Frame counter
     16  f383		       e6 83		      inc	FrameCount
     17  f385
     18  f385							; Copy frames
     19  f385		       20 58 f2 	      jsr	CopyFrame
     20  f388
     21  f388							; Skip every 8 frames for increasing demo index
     22  f388		       a5 83		      lda	FrameCount
     23  f38a		       29 07		      and	#%111
     24  f38c		       c9 07		      cmp	#%111
     25  f38e		       d0 0d		      bne	.next_next_thing
     26  f390
     27  f390		       18		      clc
     28  f391		       a5 8e		      lda	ROW_DEMO_INDEX
     29  f393		       69 04		      adc	#4
     30  f395		       c9 68		      cmp	#[map_emeralds_end - map_emeralds]
     31  f397		       90 02		      bcc	.next_thing_local
     32  f399		       a9 00		      lda	#0
     33  f39b				   .next_thing_local
     34  f39b		       85 8e		      sta	ROW_DEMO_INDEX
     35  f39d				   .next_next_thing
     36  f39d		       85 02		      sta	WSYNC
     37  f39f
     38  f39f							; Positioning
      0  f39f					      SLEEP	40
      1  f39f				   .CYCLES    SET	40
      2  f39f
      3  f39f				  -	      IF	.CYCLES < 2
      4  f39f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f39f				  -	      ERR
      6  f39f					      ENDIF
      7  f39f
      8  f39f				  -	      IF	.CYCLES & 1
      9  f39f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f39f				  -	      nop	0
     11  f39f				  -	      ELSE
     12  f39f				  -	      bit	VSYNC
     13  f39f				  -	      ENDIF
     14  f39f				  -.CYCLES    SET	.CYCLES - 3
     15  f39f					      ENDIF
     16  f39f
     17  f39f					      REPEAT	.CYCLES / 2
     18  f39f		       ea		      nop
     17  f39f					      REPEND
     18  f3a0		       ea		      nop
     17  f3a0					      REPEND
     18  f3a1		       ea		      nop
     17  f3a1					      REPEND
     18  f3a2		       ea		      nop
     17  f3a2					      REPEND
     18  f3a3		       ea		      nop
     17  f3a3					      REPEND
     18  f3a4		       ea		      nop
     17  f3a4					      REPEND
     18  f3a5		       ea		      nop
     17  f3a5					      REPEND
     18  f3a6		       ea		      nop
     17  f3a6					      REPEND
     18  f3a7		       ea		      nop
     17  f3a7					      REPEND
     18  f3a8		       ea		      nop
     17  f3a8					      REPEND
     18  f3a9		       ea		      nop
     17  f3a9					      REPEND
     18  f3aa		       ea		      nop
     17  f3aa					      REPEND
     18  f3ab		       ea		      nop
     17  f3ab					      REPEND
     18  f3ac		       ea		      nop
     17  f3ac					      REPEND
     18  f3ad		       ea		      nop
     17  f3ad					      REPEND
     18  f3ae		       ea		      nop
     17  f3ae					      REPEND
     18  f3af		       ea		      nop
     17  f3af					      REPEND
     18  f3b0		       ea		      nop
     17  f3b0					      REPEND
     18  f3b1		       ea		      nop
     17  f3b1					      REPEND
     18  f3b2		       ea		      nop
     19  f3b3					      REPEND
     40  f3b3		       85 11		      sta	EMERALD_SP_RESET	; position 1st player
     41  f3b5		       85 02		      sta	WSYNC
     42  f3b7
     43  f3b7							; Misc
     44  f3b7		       a9 00		      lda	#00
     45  f3b9		       85 1e		      sta	EMERALD_MI_ENABLE
     46  f3bb
     47  f3bb							; Assign dervied SpriteEnd value
     48  f3bb		       a9 c8		      lda	#HEIGHT_OFFSET
     49  f3bd		       e5 89		      sbc	YPos
     50  f3bf		       85 85		      sta	SpriteEnd
     51  f3c1
     52  f3c1							; Move missile to starting position and fine-tune position
     53  f3c1							; TODO replace with an HMOVE macro
     54  f3c1		       85 02		      sta	WSYNC
      0  f3c3					      sleep	EMERALD_MI_HMOVE_S
      1  f3c3				   .CYCLES    SET	EMERALD_MI_HMOVE_S
      2  f3c3
      3  f3c3				  -	      IF	.CYCLES < 2
      4  f3c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3c3				  -	      ERR
      6  f3c3					      ENDIF
      7  f3c3
      8  f3c3					      IF	.CYCLES & 1
      9  f3c3					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3c3		       04 00		      nop	0
     11  f3c5				  -	      ELSE
     12  f3c5				  -	      bit	VSYNC
     13  f3c5					      ENDIF
     14  f3c5				   .CYCLES    SET	.CYCLES - 3
     15  f3c5					      ENDIF
     16  f3c5
     17  f3c5					      REPEAT	.CYCLES / 2
     18  f3c5		       ea		      nop
     17  f3c5					      REPEND
     18  f3c6		       ea		      nop
     17  f3c6					      REPEND
     18  f3c7		       ea		      nop
     17  f3c7					      REPEND
     18  f3c8		       ea		      nop
     17  f3c8					      REPEND
     18  f3c9		       ea		      nop
     17  f3c9					      REPEND
     18  f3ca		       ea		      nop
     17  f3ca					      REPEND
     18  f3cb		       ea		      nop
     17  f3cb					      REPEND
     18  f3cc		       ea		      nop
     17  f3cc					      REPEND
     18  f3cd		       ea		      nop
     17  f3cd					      REPEND
     18  f3ce		       ea		      nop
     17  f3ce					      REPEND
     18  f3cf		       ea		      nop
     17  f3cf					      REPEND
     18  f3d0		       ea		      nop
     17  f3d0					      REPEND
     18  f3d1		       ea		      nop
     17  f3d1					      REPEND
     18  f3d2		       ea		      nop
     17  f3d2					      REPEND
     18  f3d3		       ea		      nop
     17  f3d3					      REPEND
     18  f3d4		       ea		      nop
     17  f3d4					      REPEND
     18  f3d5		       ea		      nop
     17  f3d5					      REPEND
     18  f3d6		       ea		      nop
     19  f3d7					      REPEND
     56  f3d7		       85 13		      sta	EMERALD_MI_RESET
     57  f3d9
     58  f3d9							; Player 1
     59  f3d9		       a5 86		      lda	XPos
     60  f3db		       a2 00		      ldx	#0
     61  f3dd		       20 aa f4 	      jsr	SetHorizPos
     62  f3e0
     63  f3e0
     64  f3e0							; Choose which hmove value to use
     65  f3e0
     66  f3e0
     67  f3e0							; [TODO]
     68  f3e0							; Make these into separate horizontal positioning calls
     69  f3e0							; which will make it possible to do better missle tricks
     70  f3e0							; and free up both kernels to have another reigster
     71  f3e0
     72  f3e0
     73  f3e0
     74  f3e0							; FRAMESWITCH
     75  f3e0		       a9 01		      lda	#01
     76  f3e2		       25 83		      and	FrameCount
     77  f3e4		       d0 07		      bne	doframe2
     78  f3e6
     79  f3e6							; frame 1
     80  f3e6		       a9 d0		      lda	#EMERALD_MI_HMOVE_2
     81  f3e8		       85 23		      sta	EMERALD_MI_HMOVE
     82  f3ea		       4c f1 f3 	      jmp	doframe2after
     83  f3ed
     84  f3ed							; frame 2
     85  f3ed				   doframe2
     86  f3ed		       a9 10		      lda	#EMERALD_MI_HMOVE_3
     87  f3ef		       85 23		      sta	EMERALD_MI_HMOVE
     88  f3f1				   doframe2after
     89  f3f1
     90  f3f1
     91  f3f1							; Start rendering the kernel.
      0  f3f1					      TIMER_WAIT
      1  f3f1				   .waittimer
      2  f3f1		       ad 84 02 	      lda	INTIM
      3  f3f4		       d0 fb		      bne	.waittimer
      0  f3f6					      TIMER_SETUP	192
      1  f3f6				   .lines     SET	192
      2  f3f6		       a9 e2		      lda	#(((.lines-1)*76-14)/64)
      3  f3f8		       85 02		      sta	WSYNC
      4  f3fa		       8d 96 02 	      sta	TIM64T
     94  f3fd		       4c be f4 	      jmp	Kernel
     95  f400
     96  f400				   FrameEnd   subroutine
     97  f400							; Blank all background colors.
     98  f400		       a9 00		      lda	#0
     99  f402		       85 08		      sta	COLUPF
    100  f404		       85 0f		      sta	PF2
    101  f406		       85 0e		      sta	PF1
    102  f408		       85 1c		      sta	EMERALD_SP
    103  f40a		       85 02		      sta	WSYNC
    104  f40c
    105  f40c							; Guide lines (2x)
    106  f40c		       a9 02		      lda	#SIGNAL_LINE
    107  f40e		       85 09		      sta	COLUBK
    108  f410					      REPEAT	6
    109  f410		       85 02		      sta	WSYNC
    108  f410					      REPEND
    109  f412		       85 02		      sta	WSYNC
    108  f412					      REPEND
    109  f414		       85 02		      sta	WSYNC
    108  f414					      REPEND
    109  f416		       85 02		      sta	WSYNC
    108  f416					      REPEND
    109  f418		       85 02		      sta	WSYNC
    108  f418					      REPEND
    109  f41a		       85 02		      sta	WSYNC
    110  f41c					      REPEND
    111  f41c		       a9 00		      lda	#$00
    112  f41e		       85 09		      sta	COLUBK
    113  f420		       85 02		      sta	WSYNC
    114  f422
    115  f422
    116  f422							; Overscan
    117  f422				   Overscan   subroutine
      0  f422					      TIMER_WAIT
      1  f422				   .waittimer
      2  f422		       ad 84 02 	      lda	INTIM
      3  f425		       d0 fb		      bne	.waittimer
      0  f427					      TIMER_SETUP	30
      1  f427				   .lines     SET	30
      2  f427		       a9 22		      lda	#(((.lines-1)*76-14)/64)
      3  f429		       85 02		      sta	WSYNC
      4  f42b		       8d 96 02 	      sta	TIM64T
    120  f42e
    121  f42e		       20 3c f4 	      jsr	MoveJoystick
    122  f431		       20 73 f4 	      jsr	SpeedCalculation
    123  f434
      0  f434					      TIMER_WAIT
      1  f434				   .waittimer
      2  f434		       ad 84 02 	      lda	INTIM
      3  f437		       d0 fb		      bne	.waittimer
    125  f439		       4c 6f f3 	      jmp	FrameStart
------- FILE main.s
------- FILE input.s LEVEL 2 PASS 2
      0  f43c					      include	"input.s"
      1  f43c							; Handles input checking. Called from overscan.
      2  f43c
      3  f43c							; Read joystick movement and apply to object 0
      4  f43c				   MoveJoystick
      5  f43c							; Move vertically
      6  f43c							; (up and down are actually reversed since ypos starts at bottom)
      7  f43c							;     ldx YPos
      8  f43c		       a9 10		      lda	#%00010000	;Up?
      9  f43e		       2c 80 02 	      bit	SWCHA
     10  f441		       d0 0d		      bne	SkipMoveUp
     11  f443
     12  f443		       18		      clc
     13  f444		       a5 88		      lda	Speed2
     14  f446		       69 0c		      adc	#12
     15  f448		       85 88		      sta	Speed2
     16  f44a		       a5 87		      lda	Speed1
     17  f44c		       69 00		      adc	#00
     18  f44e		       85 87		      sta	Speed1
     19  f450
     20  f450				   SkipMoveUp
     21  f450		       a6 86		      ldx	XPos
     22  f452
     23  f452							; Only check left/right on odd frames;
     24  f452							; TODO make this just a fractional speed
     25  f452							; rather than dropping frames
     26  f452		       a9 01		      lda	#01
     27  f454		       25 83		      and	FrameCount
     28  f456		       d0 18		      bne	SkipMoveRight
     29  f458
     30  f458
     31  f458							; Move horizontally
     32  f458		       a9 40		      lda	#%01000000	;Left?
     33  f45a		       2c 80 02 	      bit	SWCHA
     34  f45d		       d0 05		      bne	SkipMoveLeft
     35  f45f		       e0 1d		      cpx	#29
     36  f461		       90 01		      bcc	SkipMoveLeft
     37  f463		       ca		      dex
     38  f464
     39  f464							; Reflect
     40  f464							;     lda #$ff
     41  f464							;     sta REFP0
     42  f464				   SkipMoveLeft
     43  f464		       a9 80		      lda	#%10000000	;Right?
     44  f466		       2c 80 02 	      bit	SWCHA
     45  f469		       d0 05		      bne	SkipMoveRight
     46  f46b		       e0 80		      cpx	#128
     47  f46d		       b0 01		      bcs	SkipMoveRight
     48  f46f		       e8		      inx
     49  f470
     50  f470							; Reflect
     51  f470							;     lda #$0
     52  f470							;     sta REFP0
     53  f470				   SkipMoveRight
     54  f470		       86 86		      stx	XPos
     55  f472		       60		      rts
     56  f473
     57  f473
     58  f473				   SpeedCalculation
     59  f473		       38		      sec
     60  f474		       a5 88		      lda	Speed2
     61  f476		       e9 07		      sbc	#7
     62  f478		       85 88		      sta	Speed2
     63  f47a		       a5 87		      lda	Speed1
     64  f47c		       e9 00		      sbc	#0
     65  f47e		       85 87		      sta	Speed1
     66  f480
     67  f480		       18		      clc
     68  f481		       a5 8a		      lda	YPos2
     69  f483		       65 88		      adc	Speed2
     70  f485		       85 8a		      sta	YPos2
     71  f487		       a5 89		      lda	YPos
     72  f489		       65 87		      adc	Speed1
     73  f48b		       85 89		      sta	YPos
     74  f48d
     75  f48d		       c9 43		      cmp	#FLOOR_OFFSET
     76  f48f		       b0 0a		      bcs	NewThing2
     77  f491
     78  f491							; Reset to floor
     79  f491		       a9 43		      lda	#FLOOR_OFFSET
     80  f493		       85 89		      sta	YPos
     81  f495		       a9 00		      lda	#0
     82  f497		       85 87		      sta	Speed1
     83  f499		       85 88		      sta	Speed2
     84  f49b				   NewThing2
     85  f49b
     86  f49b		       c9 bf		      cmp	#CEILING_OFFSET
     87  f49d		       90 0a		      bcc	.next
     88  f49f
     89  f49f							; Reset to ceiling
     90  f49f		       a9 bf		      lda	#CEILING_OFFSET
     91  f4a1		       85 89		      sta	YPos
     92  f4a3		       a9 00		      lda	#0
     93  f4a5		       85 87		      sta	Speed1
     94  f4a7		       85 88		      sta	Speed2
     95  f4a9				   .next
     96  f4a9		       60		      rts
     97  f4aa
     98  f4aa
     99  f4aa
    100  f4aa							; Subroutine
    101  f4aa				   SetHorizPos
    102  f4aa		       85 02		      sta	WSYNC	; start a new line
    103  f4ac		       24 00		      bit	0	; waste 3 cycles
    104  f4ae		       38		      sec		; set carry flag
    105  f4af				   DivideLoop
    106  f4af		       e9 0f		      sbc	#15	; subtract 15
    107  f4b1		       b0 fc		      bcs	DivideLoop	; branch until negative
    108  f4b3		       49 07		      eor	#7	; calculate fine offset
    109  f4b5		       0a		      asl
    110  f4b6		       0a		      asl
    111  f4b7		       0a		      asl
    112  f4b8		       0a		      asl
    113  f4b9		       95 10		      sta	JET_SP_RESET,x	; fix coarse position
    114  f4bb		       95 20		      sta	JET_SP_HMOVE,x	; set fine offset
    115  f4bd		       60		      rts		; return to caller
------- FILE main.s
------- FILE kernel.s LEVEL 2 PASS 2
      0  f4be					      include	"kernel.s"
      1  f4be							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      2  f4be							;
      3  f4be							; Visible Kernel
      4  f4be							;
      5  f4be
      6  f4be				   Kernel     subroutine
      7  f4be		       85 02		      sta	WSYNC	; ??? Is this needed?
      8  f4c0
      9  f4c0							; First HMOVE
     10  f4c0		       85 2a		      sta	HMOVE
     11  f4c2
     12  f4c2							; Frame border top
     13  f4c2		       a9 00		      lda	#0
     14  f4c4		       85 08		      sta	COLUPF
     15  f4c6		       85 0e		      sta	PF1
     16  f4c8		       85 0f		      sta	PF2
     17  f4ca		       a9 02		      lda	#SIGNAL_LINE
     18  f4cc		       85 09		      sta	COLUBK
     19  f4ce
     20  f4ce					      REPEAT	6
     21  f4ce		       85 02		      sta	WSYNC
     20  f4ce					      REPEND
     21  f4d0		       85 02		      sta	WSYNC
     20  f4d0					      REPEND
     21  f4d2		       85 02		      sta	WSYNC
     20  f4d2					      REPEND
     21  f4d4		       85 02		      sta	WSYNC
     20  f4d4					      REPEND
     21  f4d6		       85 02		      sta	WSYNC
     20  f4d6					      REPEND
     21  f4d8		       85 02		      sta	WSYNC
     22  f4da					      REPEND
     23  f4da
     24  f4da		       a9 00		      lda	#0
     25  f4dc		       85 09		      sta	COLUBK
     26  f4de		       85 02		      sta	WSYNC
     27  f4e0
     28  f4e0							; Start top border
     29  f4e0				   border_top
     30  f4e0							; Make the playfield solid.
     31  f4e0		       a9 3f		      lda	#%00111111
     32  f4e2		       85 0e		      sta	PF1
     33  f4e4		       a9 ff		      lda	#%11111111
     34  f4e6		       85 0f		      sta	PF2
     35  f4e8
     36  f4e8		       a9 42		      lda	#COL_BG
     37  f4ea		       a0 00		      ldy	#0
     38  f4ec
     39  f4ec		       85 08		      sta	COLUPF
     40  f4ee		       85 02		      sta	WSYNC
     41  f4f0
     42  f4f0		       84 08		      sty	COLUPF
     43  f4f2		       85 02		      sta	WSYNC
     44  f4f4
     45  f4f4		       85 08		      sta	COLUPF
     46  f4f6		       85 02		      sta	WSYNC
     47  f4f8
     48  f4f8		       85 02		      sta	WSYNC
     49  f4fa
     50  f4fa		       85 02		      sta	WSYNC
     51  f4fc
     52  f4fc		       84 08		      sty	COLUPF
     53  f4fe		       85 02		      sta	WSYNC
     54  f500
     55  f500		       85 08		      sta	COLUPF
     56  f502		       85 02		      sta	WSYNC
     57  f504
     58  f504		       85 02		      sta	WSYNC
     59  f506
     60  f506				   PlayArea
     61  f506							; PF is now the playing area
     62  f506		       a9 00		      lda	#%00000000
     63  f508		       85 0d		      sta	PF0
     64  f50a		       a9 20		      lda	#%00100000
     65  f50c		       85 0e		      sta	PF1
     66  f50e		       a9 00		      lda	#%00000000
     67  f510		       85 0f		      sta	PF2
     68  f512
     69  f512
     70  f512							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f512
     72  f512							; Frame Start
     73  f512
     74  f512							; Start the row with a WSYNC.
     75  f512				   row_start
     76  f512							; ~15c
      0  f512					      jet_spritedata_calc
      1  f512
      2  f512		       a9 09		      lda	#SPRITE_HEIGHT
      3  f514		       c7 85		      dcp	SpriteEnd
      4  f516		       a4 85		      ldy	SpriteEnd
      5  f518
      6  f518
      7  f518
      8  f518		       b9 00 f8 	      lda	Frame0,Y
      9  f51b
     10  f51b		       b0 01		      .byte.b	$b0, $01
     11  f51d		       2c		      .byte.b	$2c
     12  f51e		       85 1b		      sta	JET_SP
     13  f520
     78  f520		       85 02		      sta	WSYNC
     79  f522
     80  f522							; [row:1]
      0  f522					      jet_spritedata_calc
      1  f522
      2  f522		       a9 09		      lda	#SPRITE_HEIGHT
      3  f524		       c7 85		      dcp	SpriteEnd
      4  f526		       a4 85		      ldy	SpriteEnd
      5  f528
      6  f528
      7  f528
      8  f528		       b9 00 f8 	      lda	Frame0,Y
      9  f52b
     10  f52b		       b0 01		      .byte.b	$b0, $01
     11  f52d		       2c		      .byte.b	$2c
     12  f52e		       85 1b		      sta	JET_SP
     13  f530
     82  f530
     83  f530		       a9 00		      lda	#0
     84  f532		       85 08		      sta	COLUPF
     85  f534
     86  f534							; Push jump table to the stack
     87  f534		       a9 f5		      lda	#>[row_after_kernel - 1]
     88  f536		       48		      pha
     89  f537		       a9 7d		      lda	#<[row_after_kernel - 1]
     90  f539		       48		      pha
     91  f53a		       a9 81		      lda	#%10000001
     92  f53c		       48		      pha
     93  f53d		       a9 10		      lda	#>[$1100 - 1]
     94  f53f		       48		      pha
     95  f540		       a9 ff		      lda	#<[$1100 - 1]
     96  f542		       48		      pha
     97  f543		       a9 81		      lda	#%10000001
     98  f545		       48		      pha
     99  f546
    100  f546		       85 02		      sta	WSYNC
    101  f548
    102  f548							; [row:2]
      0  f548					      jet_spritedata_calc
      1  f548
      2  f548		       a9 09		      lda	#SPRITE_HEIGHT
      3  f54a		       c7 85		      dcp	SpriteEnd
      4  f54c		       a4 85		      ldy	SpriteEnd
      5  f54e
      6  f54e
      7  f54e
      8  f54e		       b9 00 f8 	      lda	Frame0,Y
      9  f551
     10  f551		       b0 01		      .byte.b	$b0, $01
     11  f553		       2c		      .byte.b	$2c
     12  f554		       85 1b		      sta	JET_SP
     13  f556
    104  f556
    105  f556
    106  f556		       a9 42		      lda	#COL_BG
    107  f558		       85 08		      sta	COLUPF
    108  f55a
    109  f55a
    110  f55a		       a9 09		      lda	#SPRITE_HEIGHT
      0  f55c					      jet_spritedata_calc_nosta
      1  f55c
      2  f55c		       c7 85		      dcp	SpriteEnd
      3  f55e
      4  f55e
      5  f55e
      6  f55e
      7  f55e		       a0 00		      ldy	#0
      8  f560		       b0 01		      .byte.b	$b0, $01
      9  f562		       2c		      .byte.b	$2c
     10  f563		       a4 85		      ldy	SpriteEnd
     11  f565
    112  f565		       b9 00 f8 	      lda	Frame0,Y
    113  f568		       85 fa		      sta	$fa
      0  f56a					      jet_spritedata_calc_nosta
      1  f56a
      2  f56a		       c7 85		      dcp	SpriteEnd
      3  f56c
      4  f56c
      5  f56c
      6  f56c
      7  f56c		       a0 00		      ldy	#0
      8  f56e		       b0 01		      .byte.b	$b0, $01
      9  f570		       2c		      .byte.b	$2c
     10  f571		       a4 85		      ldy	SpriteEnd
     11  f573
    115  f573		       b9 00 f8 	      lda	Frame0,Y
    116  f576		       85 fd		      sta	$fd
    117  f578
      0  f578					      sleep	6
      1  f578				   .CYCLES    SET	6
      2  f578
      3  f578				  -	      IF	.CYCLES < 2
      4  f578				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f578				  -	      ERR
      6  f578					      ENDIF
      7  f578
      8  f578				  -	      IF	.CYCLES & 1
      9  f578				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f578				  -	      nop	0
     11  f578				  -	      ELSE
     12  f578				  -	      bit	VSYNC
     13  f578				  -	      ENDIF
     14  f578				  -.CYCLES    SET	.CYCLES - 3
     15  f578					      ENDIF
     16  f578
     17  f578					      REPEAT	.CYCLES / 2
     18  f578		       ea		      nop
     17  f578					      REPEND
     18  f579		       ea		      nop
     17  f579					      REPEND
     18  f57a		       ea		      nop
     19  f57b					      REPEND
    119  f57b
    120  f57b							; [row:3-4]
    121  f57b							; Jump to the copied kernel.
    122  f57b				   kernel_launch
    123  f57b		       4c 00 11 	      jmp	KERNEL_START
    124  f57e
    125  f57e				   row_after_kernel
    126  f57e							; [row:5]
    127  f57e							; Cleanup from the kernel.
    128  f57e		       a9 00		      lda	#0
    129  f580		       85 1e		      sta	EMERALD_MI_ENABLE
    130  f582		       85 1c		      sta	EMERALD_SP
    131  f584		       85 08		      sta	COLUPF
    132  f586
      0  f586					      jet_spritedata_calc
      1  f586
      2  f586		       a9 09		      lda	#SPRITE_HEIGHT
      3  f588		       c7 85		      dcp	SpriteEnd
      4  f58a		       a4 85		      ldy	SpriteEnd
      5  f58c
      6  f58c
      7  f58c
      8  f58c		       b9 00 f8 	      lda	Frame0,Y
      9  f58f
     10  f58f		       b0 01		      .byte.b	$b0, $01
     11  f591		       2c		      .byte.b	$2c
     12  f592		       85 1b		      sta	JET_SP
     13  f594
    134  f594
    135  f594		       85 02		      sta	WSYNC
    136  f596
    137  f596							; [row:6]
      0  f596					      jet_spritedata_calc
      1  f596
      2  f596		       a9 09		      lda	#SPRITE_HEIGHT
      3  f598		       c7 85		      dcp	SpriteEnd
      4  f59a		       a4 85		      ldy	SpriteEnd
      5  f59c
      6  f59c
      7  f59c
      8  f59c		       b9 00 f8 	      lda	Frame0,Y
      9  f59f
     10  f59f		       b0 01		      .byte.b	$b0, $01
     11  f5a1		       2c		      .byte.b	$2c
     12  f5a2		       85 1b		      sta	JET_SP
     13  f5a4
    139  f5a4		       a9 42		      lda	#COL_BG
    140  f5a6		       85 08		      sta	COLUPF
    141  f5a8
    142  f5a8							; FRAMESWITCH
    143  f5a8		       a9 01		      lda	#01
    144  f5aa		       25 83		      and	FrameCount
    145  f5ac		       d0 45		      bne	loadframe2
    146  f5ae
    147  f5ae				   loadframe1
    148  f5ae							; ~30c
    149  f5ae
    150  f5ae							; Emerald byte setting 1A
    151  f5ae		       a2 00		      ldx	#0
    152  f5b0		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    153  f5b3		       8d 0c f0 	      sta	GEM_00_W
    154  f5b6		       e8		      inx
    155  f5b7		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    156  f5ba		       8d 14 f0 	      sta	GEM_04_W
    157  f5bd		       e8		      inx
    158  f5be		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    159  f5c1		       8d 18 f0 	      sta	GEM_09_W
    160  f5c4		       e8		      inx
    161  f5c5
    162  f5c5		       85 02		      sta	WSYNC
    163  f5c7
    164  f5c7							; [row:7]
      0  f5c7					      jet_spritedata_calc
      1  f5c7
      2  f5c7		       a9 09		      lda	#SPRITE_HEIGHT
      3  f5c9		       c7 85		      dcp	SpriteEnd
      4  f5cb		       a4 85		      ldy	SpriteEnd
      5  f5cd
      6  f5cd
      7  f5cd
      8  f5cd		       b9 00 f8 	      lda	Frame0,Y
      9  f5d0
     10  f5d0		       b0 01		      .byte.b	$b0, $01
     11  f5d2		       2c		      .byte.b	$2c
     12  f5d3		       85 1b		      sta	JET_SP
     13  f5d5
    166  f5d5
    167  f5d5							; Emerald byte setting 1B
    168  f5d5		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    169  f5d8		       8d 1c f0 	      sta	GEM_13_W
    170  f5db		       e8		      inx
    171  f5dc		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    172  f5df		       8d 20 f0 	      sta	GEM_17_W
    173  f5e2		       e8		      inx
    174  f5e3		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    175  f5e6		       8d 22 f0 	      sta	GEM_18_W
    176  f5e9		       e8		      inx
    177  f5ea		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    178  f5ed		       8d 26 f0 	      sta	GEM_22_W
    179  f5f0
    180  f5f0		       4c 38 f6 	      jmp	row_7_end
    181  f5f3
    182  f5f3				   loadframe2
    183  f5f3							; ~30c
    184  f5f3
    185  f5f3							; Emerald byte setting 2A
    186  f5f3		       a2 07		      ldx	#[storage_02 - storage]
    187  f5f5		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    188  f5f8		       8d 0f f0 	      sta	GEM_02_W
    189  f5fb		       e8		      inx
    190  f5fc		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    191  f5ff		       8d 16 f0 	      sta	GEM_06_W
    192  f602		       e8		      inx
    193  f603		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    194  f606		       8d 0b f0 	      sta	GEM_08_W
    195  f609		       e8		      inx
    196  f60a
    197  f60a		       85 02		      sta	WSYNC
    198  f60c
    199  f60c							; [row:7]
      0  f60c					      jet_spritedata_calc
      1  f60c
      2  f60c		       a9 09		      lda	#SPRITE_HEIGHT
      3  f60e		       c7 85		      dcp	SpriteEnd
      4  f610		       a4 85		      ldy	SpriteEnd
      5  f612
      6  f612
      7  f612
      8  f612		       b9 00 f8 	      lda	Frame0,Y
      9  f615
     10  f615		       b0 01		      .byte.b	$b0, $01
     11  f617		       2c		      .byte.b	$2c
     12  f618		       85 1b		      sta	JET_SP
     13  f61a
    201  f61a
    202  f61a							; Emerald byte setting 2B
    203  f61a		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    204  f61d		       8d 1a f0 	      sta	GEM_11_W
    205  f620		       e8		      inx
    206  f621		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    207  f624		       8d 1e f0 	      sta	GEM_15_W
    208  f627		       e8		      inx
    209  f628		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    210  f62b		       8d 22 f0 	      sta	GEM_20_W
    211  f62e		       e8		      inx
    212  f62f		       bd 40 11 	      lda	KERNEL_STORAGE_R,X
    213  f632		       8d 26 f0 	      sta	GEM_24_W
    214  f635
    215  f635		       4c 38 f6 	      jmp	row_7_end
    216  f638
    217  f638				   row_7_end
    218  f638		       85 02		      sta	WSYNC
    219  f63a
    220  f63a							; [row:8]
    221  f63a							; Repeat loop until LoopCount < 0
    222  f63a		       c6 82		      dec	LoopCount
    223  f63c		       30 03		      bmi	frame_bottom
    224  f63e		       4c 12 f5 	      jmp	row_start
    225  f641
    226  f641							; reset the background for bottom of playfield
    227  f641				   frame_bottom
    228  f641							;sta WSYNC
    229  f641
    230  f641							; Form the bottom of the level frame.
    231  f641		       a9 3f		      lda	#%00111111
    232  f643		       85 0e		      sta	PF1
    233  f645		       a9 ff		      lda	#%11111111
    234  f647		       85 0f		      sta	PF2
    235  f649
    236  f649							; Clear all sprites.
    237  f649		       a9 00		      lda	#0
    238  f64b		       85 1c		      sta	EMERALD_SP
    239  f64d		       85 1b		      sta	JET_SP
    240  f64f		       85 1e		      sta	EMERALD_MI_ENABLE
    241  f651
    242  f651		       a9 42		      lda	#COL_BG
    243  f653		       a0 00		      ldy	#0
    244  f655		       85 02		      sta	WSYNC
    245  f657
    246  f657		       84 08		      sty	COLUPF
    247  f659		       85 02		      sta	WSYNC
    248  f65b
    249  f65b		       85 08		      sta	COLUPF
    250  f65d		       85 02		      sta	WSYNC
    251  f65f
    252  f65f		       85 02		      sta	WSYNC
    253  f661
    254  f661		       85 02		      sta	WSYNC
    255  f663
    256  f663		       84 08		      sty	COLUPF
    257  f665		       85 02		      sta	WSYNC
    258  f667
    259  f667		       85 08		      sta	COLUPF
    260  f669		       85 02		      sta	WSYNC
    261  f66b		       85 02		      sta	WSYNC
    262  f66d		       4c 00 f4 	      jmp	FrameEnd
------- FILE main.s
------- FILE kernel_gem.s LEVEL 2 PASS 2
      0  f670					      include	"kernel_gem.s"
      1  f670							;
      2  f670							; Gem Kernels
      3  f670							;
      4  f670							; Gems are displayed in alternating kernels. This chart shows
      5  f670							; which kernel is responsible for which gem, with missiles denoted.
      6  f670							;
      7  f670							;  1:	 |SS  SS   SS  |SS  MSS  SS  |	      kernel 1 (S = Sprite, M = missile)
      8  f670							;  2:	 |  SS	SSM  SS|  SS   SS  SS|	      kernel 2
      9  f670							;  =	 |1122112221122|1122111221122|	      kernel #
     10  f670							;  #	 0^	 8^	  17^	    26^       gem index
     11  f670							;
     12  f670							; The middle bar indicates where the pattern reverses.
     13  f670							;
     14  f670							; Because we can repeat a sprite multiple times, and reset the sprite
     15  f670							; occurance mid-line, we can render close to half of the 26 gems a line
     16  f670							; requires with a single sprite. By alternating sprites each frame with an...
     17  f670							; acceptable amount of flicker (15Hz) we can render almost all the gems on each
     18  f670							; line, except for two. These are instead rendered by the missile, which
     19  f670							; corresponds to the sprite and must have the same color and repeat pattern.
     20  f670							;
     21  f670							; TODO there is a better writeup of how to get the last few sprites on the line
     22  f670							; with missles in some notebook somewhere?
     23  f670							;
     24  f670							;
     25  f670							; Gem Kernel Map by Color Clock
     26  f670							;
     27  f670							; - 3 Color Clocks = 1 CPU cycle
     28  f670							; - Kernel opcodes are 3 cycles = 9 color clocks
     29  f670							; - Playfield pixels = 4 color clocks wide
     30  f670							; -
     31  f670							;
     32  f670							;    v 22c    v 25c		 v 31c												    v 64c    v 67c
     33  f670							;    v -2P    v 7P		v 24P	  v 34P    v 43P			       v 79P				   v 115P		v 136P
     34  f670							; A: AAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDEEEEEEEEE.........,,,,,,,,,---------
     35  f670							;						   GEM9     PF1      GEM13    RESP1    M0=off	GEM18	 LDA	  GEM22
     36  f670							;	       !--------****	    _11__11_	   !_11__11_****	_11__11_       !_11__11_****	 MM _11__11_	   |_11__11_
     37  f670							; Gems:			====_XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX__XX_====
     38  f670							; B:	       AAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDD,,,,,,,,,.........,,,,,,,,,---------
     39  f670							;					  GEM6	   RESP1    GEM11    M1=on    GEM15    RESP1	GEM20	 LDA	  GEM24    ?
     40  f670							;			!--------****	     22__22__	    !22__22__*MM*	 22__22__	!22__22__****	     22__22__	    |22__22__
     41  f670							; PF |0		1	====			2				0		1				2   ====|
     42  f670							;
     43  f670							;   ====   playfield wall
     44  f670							;    !     RESP0
     45  f670							;    |     Let RESP0 chaining lapse
     46  f670							;   ****   Mysterious post-resp0 4 cycle wait
     47  f670							;    MM    Missile
     48  f670							;    ABCs  Resp0 sequences
     49  f670							;
     50  f670
     51  f670							; for copying
     52  f700		       00 00 00 00*	      align	256
     53  f700
     54  f700							; KERNEL 1
     55  f700
     56  f700							; Emerald line macro (1, 2, ...)
     57  f700
     58  f700				   kernel_1_start subroutine
     59  f700
     60  f700					      rorg	$f100
     61  f700
     62  f700							; sleep first make this distinct from
     63  f700							; other kernel for debug scenarios
      0  f700					      sleep	6
      1  f700				   .CYCLES    SET	6
      2  f700
      3  f700				  -	      IF	.CYCLES < 2
      4  f700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f700				  -	      ERR
      6  f700					      ENDIF
      7  f700
      8  f700				  -	      IF	.CYCLES & 1
      9  f700				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f700				  -	      nop	0
     11  f700				  -	      ELSE
     12  f700				  -	      bit	VSYNC
     13  f700				  -	      ENDIF
     14  f700				  -.CYCLES    SET	.CYCLES - 3
     15  f700					      ENDIF
     16  f700
     17  f700					      REPEAT	.CYCLES / 2
     18  f700		       ea		      nop
     17  f700					      REPEND
     18  f701		       ea		      nop
     17  f701					      REPEND
     18  f702		       ea		      nop
     19  f703					      REPEND
     65  f703		       68		      pla
     66  f704		       85 1b		      sta	GRP0
     67  f706
     68  f706		       a9 60		      lda	#EMR1
     69  f708		       a2 06		      ldx	#EMR2
     70  f70a		       a0 66		      ldy	#EMR3
     71  f70c				   .gem_00
     72  f70c		       84 1c		      .byte.b	GEM_00, EMERALD_SP	; moveable?
     73  f70e
     74  f70e							; Critical: 22c (start of precise timing)
     75  f70e							; (A)
     76  f70e		       85 11		      sta	EMERALD_SP_RESET	; trivial
     77  f710							; (B)
     78  f710		       85 1e		      sta	EMERALD_MI_ENABLE	; trivial ; Is this timing-critical??
     79  f712							; (C)
      0  f712					      sleep	3
      1  f712				   .CYCLES    SET	3
      2  f712
      3  f712				  -	      IF	.CYCLES < 2
      4  f712				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f712				  -	      ERR
      6  f712					      ENDIF
      7  f712
      8  f712					      IF	.CYCLES & 1
      9  f712					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f712		       04 00		      nop	0
     11  f714				  -	      ELSE
     12  f714				  -	      bit	VSYNC
     13  f714					      ENDIF
     14  f714				   .CYCLES    SET	.CYCLES - 3
     15  f714					      ENDIF
     16  f714
     17  f714				  -	      REPEAT	.CYCLES / 2
     18  f714				  -	      nop
     19  f714					      REPEND
     81  f714							; (D) far
     82  f714
     83  f714							; TODO bonus VDEL sprite
     84  f714				   .gem_04
     85  f714		       84 1c		      .byte.b	GEM_04, EMERALD_SP
     86  f716
     87  f716							; middle triplet; first kernel 1???
     88  f716							; (A)
     89  f716		       85 11		      sta	EMERALD_SP_RESET	; trivial
     90  f718				   .gem_09
     91  f718							; (B)
     92  f718		       84 1c		      .byte.b	GEM_09, EMERALD_SP
     93  f71a
     94  f71a							; TODO PF1 load
     95  f71a							; (C)
      0  f71a					      sleep	3
      1  f71a				   .CYCLES    SET	3
      2  f71a
      3  f71a				  -	      IF	.CYCLES < 2
      4  f71a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f71a				  -	      ERR
      6  f71a					      ENDIF
      7  f71a
      8  f71a					      IF	.CYCLES & 1
      9  f71a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f71a		       04 00		      nop	0
     11  f71c				  -	      ELSE
     12  f71c				  -	      bit	VSYNC
     13  f71c					      ENDIF
     14  f71c				   .CYCLES    SET	.CYCLES - 3
     15  f71c					      ENDIF
     16  f71c
     17  f71c				  -	      REPEAT	.CYCLES / 2
     18  f71c				  -	      nop
     19  f71c					      REPEND
     97  f71c
     98  f71c							; end triplet; second kernel 1???
     99  f71c				   .gem_13
    100  f71c							; (D) for far ?
    101  f71c		       84 1c		      .byte.b	GEM_13, EMERALD_SP
    102  f71e
    103  f71e							; reset (A)
    104  f71e		       85 11		      sta	EMERALD_SP_RESET	; trivial
    105  f720				   .gem_17
    106  f720
    107  f720							; spare; missle writes
    108  f720							; 49c (B)
    109  f720		       84 1e		      .byte.b	GEM_17, EMERALD_MI_ENABLE	; could htis ever possibly be
    110  f722							; moved out of the kernel, and if so, huge wins
    111  f722							; (makes next sprite a freebie too, then just dealing with 3)
    112  f722							; unique sprite values!!
    113  f722							; or at least the write of the particular OPCODE out of hte krernel ?
    114  f722							; even extreme measures...! PHP with Z register!!! muahaha
    115  f722							; dunno how to deal with the opcode length change though?
    116  f722
    117  f722							; middle triplet; third kernel 1??? (C)
    118  f722				   .gem_18
    119  f722		       84 1c		      .byte.b	GEM_18, EMERALD_SP
    120  f724
    121  f724							; end triplet; free (D)
      0  f724					      sleep	3
      1  f724				   .CYCLES    SET	3
      2  f724
      3  f724				  -	      IF	.CYCLES < 2
      4  f724				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f724				  -	      ERR
      6  f724					      ENDIF
      7  f724
      8  f724					      IF	.CYCLES & 1
      9  f724					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f724		       04 00		      nop	0
     11  f726				  -	      ELSE
     12  f726				  -	      bit	VSYNC
     13  f726					      ENDIF
     14  f726				   .CYCLES    SET	.CYCLES - 3
     15  f726					      ENDIF
     16  f726
     17  f726				  -	      REPEAT	.CYCLES / 2
     18  f726				  -	      nop
     19  f726					      REPEND
    123  f726				   .gem_22
    124  f726							; (E) past far ????
    125  f726		       84 1c		      .byte.b	GEM_22, EMERALD_SP
    126  f728							; Critical End: 64c (cycle follows start of right border)
    127  f728
      0  f728					      sleep	9
      1  f728				   .CYCLES    SET	9
      2  f728
      3  f728				  -	      IF	.CYCLES < 2
      4  f728				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f728				  -	      ERR
      6  f728					      ENDIF
      7  f728
      8  f728					      IF	.CYCLES & 1
      9  f728					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f728		       04 00		      nop	0
     11  f72a				  -	      ELSE
     12  f72a				  -	      bit	VSYNC
     13  f72a					      ENDIF
     14  f72a				   .CYCLES    SET	.CYCLES - 3
     15  f72a					      ENDIF
     16  f72a
     17  f72a					      REPEAT	.CYCLES / 2
     18  f72a		       ea		      nop
     17  f72a					      REPEND
     18  f72b		       ea		      nop
     17  f72b					      REPEND
     18  f72c		       ea		      nop
     19  f72d					      REPEND
    129  f72d		       60		      rts
    130  f72e
    131  f72e							; Writable offsets
    132  f72e		       f0 0c	   GEM_00_W   equ	[.gem_00 - $100]
    133  f72e		       f0 14	   GEM_04_W   equ	[.gem_04 - $100]
    134  f72e		       f0 18	   GEM_09_W   equ	[.gem_09 - $100]
    135  f72e		       f0 1c	   GEM_13_W   equ	[.gem_13 - $100]
    136  f72e		       f0 20	   GEM_17_W   equ	[.gem_17 - $100]
    137  f72e		       f0 22	   GEM_18_W   equ	[.gem_18 - $100]
    138  f72e		       f0 26	   GEM_22_W   equ	[.gem_22 - $100]
    139  f72e
    140  f72e					      rend
    141  f72e				   kernel_1_end
    142  f72e
    143  f72e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    144  f72e
    145  f72e							; KERNEL 2
    146  f72e
    147  f72e							; Emerald line macro (3, 4, ...)
    148  f72e
    149  f72e				   kernel_2_start subroutine
    150  f72e					      rorg	$f100
    151  f72e
    152  f72e							; don't sleep first to make this distinct from kernel 1
    153  f72e		       68		      pla
    154  f72f		       85 1b		      sta	GRP0
      0  f731					      sleep	4
      1  f731				   .CYCLES    SET	4
      2  f731
      3  f731				  -	      IF	.CYCLES < 2
      4  f731				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f731				  -	      ERR
      6  f731					      ENDIF
      7  f731
      8  f731				  -	      IF	.CYCLES & 1
      9  f731				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f731				  -	      nop	0
     11  f731				  -	      ELSE
     12  f731				  -	      bit	VSYNC
     13  f731				  -	      ENDIF
     14  f731				  -.CYCLES    SET	.CYCLES - 3
     15  f731					      ENDIF
     16  f731
     17  f731					      REPEAT	.CYCLES / 2
     18  f731		       ea		      nop
     17  f731					      REPEND
     18  f732		       ea		      nop
     19  f733					      REPEND
    156  f733
    157  f733							; Enable missile (using excessive lda instructions)
    158  f733		       a9 02		      lda	#02
    159  f735		       a2 0c		      ldx	#T2
    160  f737		       a0 cc		      ldy	#T3
    161  f739				   .gem_08
    162  f739		       85 1e		      .byte.b	GEM_08, EMERALD_MI_ENABLE	; movable
    163  f73b		       a9 c0		      lda	#T1	; movable?
    164  f73d				   .gem_02
    165  f73d							; load the first sprite
    166  f73d		       84 1c		      .byte.b	GEM_02, EMERALD_SP	; movable
    167  f73f
    168  f73f							; TODO preload the second sprite and
    169  f73f							; have that write GEM_06
    170  f73f
    171  f73f							; Critical: 25c (start of precise timing)
    172  f73f							; (A)
    173  f73f		       85 11		      sta	EMERALD_SP_RESET	; trivial
    174  f741
    175  f741							; already set middle triplet
    176  f741							;ldx #%00010010
    177  f741							;stx.w NUSIZ1
    178  f741							; (B) (C)
      0  f741					      sleep	6
      1  f741				   .CYCLES    SET	6
      2  f741
      3  f741				  -	      IF	.CYCLES < 2
      4  f741				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f741				  -	      ERR
      6  f741					      ENDIF
      7  f741
      8  f741				  -	      IF	.CYCLES & 1
      9  f741				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f741				  -	      nop	0
     11  f741				  -	      ELSE
     12  f741				  -	      bit	VSYNC
     13  f741				  -	      ENDIF
     14  f741				  -.CYCLES    SET	.CYCLES - 3
     15  f741					      ENDIF
     16  f741
     17  f741					      REPEAT	.CYCLES / 2
     18  f741		       ea		      nop
     17  f741					      REPEND
     18  f742		       ea		      nop
     17  f742					      REPEND
     18  f743		       ea		      nop
     19  f744					      REPEND
    180  f744
    181  f744							; end triplet; bonus VDEL write
    182  f744				   .gem_06
    183  f744							; (D)
    184  f744		       84 1c		      .byte.b	GEM_06, EMERALD_SP
    185  f746
    186  f746							; middle triplet; write or change nusiz
    187  f746							; (A)
    188  f746		       85 11		      sta	EMERALD_SP_RESET	; trivial
    189  f748				   .gem_11
    190  f748							; (B)
    191  f748		       84 1c		      .byte.b	GEM_11, EMERALD_SP
    192  f74a
    193  f74a							; disable missle
    194  f74a							; (C)
    195  f74a		       86 1e		      stx	EMERALD_MI_ENABLE
    196  f74c							; sleep 3
    197  f74c							; ^ could this be moved, and then free the timing slot
    198  f74c							; then can do the setting of PF1 value(!)
    199  f74c
    200  f74c							; end triplet; write or reset
    201  f74c				   .gem_15
    202  f74c							; (D)
    203  f74c		       84 1c		      .byte.b	GEM_15, EMERALD_SP
    204  f74e							; 49c midway
    205  f74e							; (A)
    206  f74e		       85 11		      sta	EMERALD_SP_RESET	; spare
    207  f750							; PF2
    208  f750
    209  f750							; middle triplet; write or change nusiz
    210  f750				   .gem_20
    211  f750							; (B)
    212  f750		       84 1c		      .byte.b	GEM_20, EMERALD_SP
    213  f752							; (C)
      0  f752					      sleep	3	; spare
      1  f752				   .CYCLES    SET	3
      2  f752
      3  f752				  -	      IF	.CYCLES < 2
      4  f752				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f752				  -	      ERR
      6  f752					      ENDIF
      7  f752
      8  f752					      IF	.CYCLES & 1
      9  f752					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f752		       04 00		      nop	0
     11  f754				  -	      ELSE
     12  f754				  -	      bit	VSYNC
     13  f754					      ENDIF
     14  f754				   .CYCLES    SET	.CYCLES - 3
     15  f754					      ENDIF
     16  f754
     17  f754				  -	      REPEAT	.CYCLES / 2
     18  f754				  -	      nop
     19  f754					      REPEND
    215  f754
    216  f754							; end triplet; free
    217  f754				   .gem_24
    218  f754							; (D)
    219  f754		       84 1c		      .byte.b	GEM_24, EMERALD_SP
    220  f756							; Critical End: 61c (just before gem 24 render)
    221  f756
    222  f756							; ldx #%0001001
    223  f756							; stx.w NUSIZ1
      0  f756					      sleep	9
      1  f756				   .CYCLES    SET	9
      2  f756
      3  f756				  -	      IF	.CYCLES < 2
      4  f756				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f756				  -	      ERR
      6  f756					      ENDIF
      7  f756
      8  f756					      IF	.CYCLES & 1
      9  f756					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f756		       04 00		      nop	0
     11  f758				  -	      ELSE
     12  f758				  -	      bit	VSYNC
     13  f758					      ENDIF
     14  f758				   .CYCLES    SET	.CYCLES - 3
     15  f758					      ENDIF
     16  f758
     17  f758					      REPEAT	.CYCLES / 2
     18  f758		       ea		      nop
     17  f758					      REPEND
     18  f759		       ea		      nop
     17  f759					      REPEND
     18  f75a		       ea		      nop
     19  f75b					      REPEND
    225  f75b		       60		      rts
    226  f75c
    227  f75c							; Writable offsets
    228  f75c		       f0 0f	   GEM_02_W   equ	[.gem_02 - $100]
    229  f75c		       f0 16	   GEM_06_W   equ	[.gem_06 - $100]
    230  f75c		       f0 0b	   GEM_08_W   equ	[.gem_08 - $100]
    231  f75c		       f0 1a	   GEM_11_W   equ	[.gem_11 - $100]
    232  f75c		       f0 1e	   GEM_15_W   equ	[.gem_15 - $100]
    233  f75c		       f0 22	   GEM_20_W   equ	[.gem_20 - $100]
    234  f75c		       f0 26	   GEM_24_W   equ	[.gem_24 - $100]
    235  f75c
    236  f75c					      rend
    237  f75c				   kernel_2_end
------- FILE main.s
------- FILE data_sprites.s LEVEL 2 PASS 2
      0  f75c					      include	"data_sprites.s"
      1  f800		       00 00 00 00*	      align	256
      2  f800
      3  f800							; Player
      4  f800				   Frame0
      5  f800		       00		      .byte.b	#%00000000
      6  f801		       60		      .byte.b	#%01100000
      7  f802		       60		      .byte.b	#%01100000
      8  f803		       60		      .byte.b	#%01100000
      9  f804		       c0		      .byte.b	#%11000000
     10  f805		       c0		      .byte.b	#%11000000
     11  f806		       f0		      .byte.b	#%11110000
     12  f807		       c0		      .byte.b	#%11000000
     13  f808		       c0		      .byte.b	#%11000000
     14  f809		       00		      .byte.b	#%00000000
------- FILE main.s
------- FILE data_levels.s LEVEL 2 PASS 2
      0  f80a					      include	"data_levels.s"
      1  f810		       00 00 00 00*	      align	8
      2  f810
      3  f810				   storage
      4  f810
      5  f810							; Gem defaults kernel 1
      6  f810				   storage_00
      7  f810		       85		      .byte.b	SET_1_0
      8  f811				   storage_04
      9  f811		       87		      .byte.b	SET_0_0
     10  f812				   storage_09
     11  f812		       84		      .byte.b	SET_1_1
     12  f813				   storage_13
     13  f813		       84		      .byte.b	SET_1_1
     14  f814				   storage_17
     15  f814		       84		      .byte.b	SET_1_R
     16  f815				   storage_18
     17  f815		       87		      .byte.b	SET_0_0
     18  f816				   storage_22
     19  f816		       87		      .byte.b	SET_0_0
     20  f817
     21  f817							; Gem defaults kernel 2
     22  f817				   storage_02
     23  f817		       87		      .byte.b	SET_0_0
     24  f818				   storage_06
     25  f818		       87		      .byte.b	SET_0_0
     26  f819				   storage_08
     27  f819		       86		      .byte.b	SET_0_L
     28  f81a				   storage_11
     29  f81a		       84		      .byte.b	SET_1_1
     30  f81b				   storage_15
     31  f81b		       84		      .byte.b	SET_1_1
     32  f81c				   storage_20
     33  f81c		       87		      .byte.b	SET_0_0
     34  f81d				   storage_24
     35  f81d		       86		      .byte.b	SET_0_1
     36  f81e				   storage_end
     37  f81e
     38  f820		       00 00		      align	8
     39  f820							; first bit of byte 2 & 3 are unused for simplicity
     40  f820		       00 01 04 00	      .byte.b	%0000, %000001, %0000100, %00000000
     41  f824				   map_emeralds
     42  f824		       0a 00 00 00	      .byte.b	%1010, %0000000, %0000000, %00000000
     43  f828		       05 00 00 00	      .byte.b	%0101, %0000000, %0000000, %00000000
     44  f82c		       02 40 00 00	      .byte.b	%0010, %1000000, %0000000, %00000000
     45  f830		       01 20 00 00	      .byte.b	%0001, %0100000, %0000000, %00000000
     46  f834		       00 50 00 00	      .byte.b	%0000, %1010000, %0000000, %00000000
     47  f838		       00 28 00 00	      .byte.b	%0000, %0101000, %0000000, %00000000
     48  f83c		       00 14 00 00	      .byte.b	%0000, %0010100, %0000000, %00000000
     49  f840		       00 0a 00 00	      .byte.b	%0000, %0001010, %0000000, %00000000
     50  f844		       00 05 00 00	      .byte.b	%0000, %0000101, %0000000, %00000000
     51  f848		       00 02 40 00	      .byte.b	%0000, %0000010, %1000000, %00000000
     52  f84c		       00 01 20 00	      .byte.b	%0000, %0000001, %0100000, %00000000
     53  f850		       00 00 50 00	      .byte.b	%0000, %0000000, %1010000, %00000000
     54  f854		       00 00 28 00	      .byte.b	%0000, %0000000, %0101000, %00000000
     55  f858		       00 00 14 00	      .byte.b	%0000, %0000000, %0010100, %00000000
     56  f85c		       00 00 0a 00	      .byte.b	%0000, %0000000, %0001010, %00000000
     57  f860		       00 00 05 00	      .byte.b	%0000, %0000000, %0000101, %00000000
     58  f864		       00 00 02 80	      .byte.b	%0000, %0000000, %0000010, %10000000
     59  f868		       00 00 01 40	      .byte.b	%0000, %0000000, %0000001, %01000000
     60  f86c		       00 00 00 a0	      .byte.b	%0000, %0000000, %0000000, %10100000
     61  f870		       00 00 00 50	      .byte.b	%0000, %0000000, %0000000, %01010000
     62  f874		       00 00 00 28	      .byte.b	%0000, %0000000, %0000000, %00101000
     63  f878		       00 00 00 14	      .byte.b	%0000, %0000000, %0000000, %00010100
     64  f87c		       00 00 00 0a	      .byte.b	%0000, %0000000, %0000000, %00001010
     65  f880		       00 00 00 05	      .byte.b	%0000, %0000000, %0000000, %00000101
     66  f884		       08 00 00 02	      .byte.b	%1000, %0000000, %0000000, %00000010
     67  f888		       04 00 00 01	      .byte.b	%0100, %0000000, %0000000, %00000001
     68  f88c				   map_emeralds_end
------- FILE main.s
     69  f88c
     70  fffc					      org	$fffc
     71  fffc		       09 f2		      .word.w	Start
     72  fffe		       09 f2		      .word.w	Start
